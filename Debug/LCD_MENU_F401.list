
LCD_MENU_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009bec  0800c448  0800c448  0001c448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016034  08016034  000300a0  2**0
                  CONTENTS
  4 .ARM          00000008  08016034  08016034  00026034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801603c  0801603c  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801603c  0801603c  0002603c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016040  08016040  00026040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08016044  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad50  200000a0  080160e4  000300a0  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  2000adf0  080160e4  0003adf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026660  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000533e  00000000  00000000  00056730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  0005ba70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001910  00000000  00000000  0005d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e24d  00000000  00000000  0005eec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002653b  00000000  00000000  0007d10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a83fc  00000000  00000000  000a3648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ba44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d2c  00000000  00000000  0014ba98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c430 	.word	0x0800c430

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	0800c430 	.word	0x0800c430

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d66:	4b52      	ldr	r3, [pc, #328]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d68:	4a52      	ldr	r2, [pc, #328]	; (8000eb4 <MX_ADC1_Init+0x160>)
 8000d6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d74:	4b4e      	ldr	r3, [pc, #312]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d7a:	4b4d      	ldr	r3, [pc, #308]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d80:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d86:	4b4a      	ldr	r3, [pc, #296]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d8e:	4b48      	ldr	r3, [pc, #288]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d94:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d96:	4a48      	ldr	r2, [pc, #288]	; (8000eb8 <MX_ADC1_Init+0x164>)
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d9a:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000da0:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000da2:	2208      	movs	r2, #8
 8000da4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000da6:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dae:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db4:	483e      	ldr	r0, [pc, #248]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000db6:	f002 fe7b 	bl	8003ab0 <HAL_ADC_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dc0:	f001 fda8 	bl	8002914 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4836      	ldr	r0, [pc, #216]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000dd6:	f002 ffbd 	bl	8003d54 <HAL_ADC_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000de0:	f001 fd98 	bl	8002914 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	482f      	ldr	r0, [pc, #188]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000df2:	f002 ffaf 	bl	8003d54 <HAL_ADC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dfc:	f001 fd8a 	bl	8002914 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e00:	2303      	movs	r3, #3
 8000e02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e04:	2303      	movs	r3, #3
 8000e06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4828      	ldr	r0, [pc, #160]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e0e:	f002 ffa1 	bl	8003d54 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000e18:	f001 fd7c 	bl	8002914 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e20:	2304      	movs	r3, #4
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e2a:	f002 ff93 	bl	8003d54 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e34:	f001 fd6e 	bl	8002914 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e38:	2306      	movs	r3, #6
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e40:	463b      	mov	r3, r7
 8000e42:	4619      	mov	r1, r3
 8000e44:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e46:	f002 ff85 	bl	8003d54 <HAL_ADC_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e50:	f001 fd60 	bl	8002914 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e54:	2307      	movs	r3, #7
 8000e56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000e58:	2306      	movs	r3, #6
 8000e5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e62:	f002 ff77 	bl	8003d54 <HAL_ADC_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e6c:	f001 fd52 	bl	8002914 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e70:	2308      	movs	r3, #8
 8000e72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000e74:	2307      	movs	r3, #7
 8000e76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e7e:	f002 ff69 	bl	8003d54 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000e88:	f001 fd44 	bl	8002914 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e8c:	2309      	movs	r3, #9
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000e90:	2308      	movs	r3, #8
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e9a:	f002 ff5b 	bl	8003d54 <HAL_ADC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000ea4:	f001 fd36 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000a140 	.word	0x2000a140
 8000eb4:	40012000 	.word	0x40012000
 8000eb8:	0f000001 	.word	0x0f000001

08000ebc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a3c      	ldr	r2, [pc, #240]	; (8000fcc <HAL_ADC_MspInit+0x110>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d171      	bne.n	8000fc2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a3a      	ldr	r2, [pc, #232]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a33      	ldr	r2, [pc, #204]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a2c      	ldr	r2, [pc, #176]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f32:	23de      	movs	r3, #222	; 0xde
 8000f34:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f36:	2303      	movs	r3, #3
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <HAL_ADC_MspInit+0x118>)
 8000f46:	f003 fe27 	bl	8004b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <HAL_ADC_MspInit+0x11c>)
 8000f5e:	f003 fe1b 	bl	8004b98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <HAL_ADC_MspInit+0x124>)
 8000f66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fa8:	f003 fa86 	bl	80044b8 <HAL_DMA_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fb2:	f001 fcaf 	bl	8002914 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fba:	639a      	str	r2, [r3, #56]	; 0x38
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40012000 	.word	0x40012000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	2000a188 	.word	0x2000a188
 8000fe0:	40026410 	.word	0x40026410

08000fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_DMA_Init+0x3c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <MX_DMA_Init+0x3c>)
 8000ff4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_DMA_Init+0x3c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	203b      	movs	r0, #59	; 0x3b
 800100c:	f003 fa1d 	bl	800444a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001010:	203b      	movs	r0, #59	; 0x3b
 8001012:	f003 fa36 	bl	8004482 <HAL_NVIC_EnableIRQ>

}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800

08001024 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <SELECT+0x1c>)
 8001030:	f003 ff4e 	bl	8004ed0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001034:	2001      	movs	r0, #1
 8001036:	f002 fd17 	bl	8003a68 <HAL_Delay>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400

08001044 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <DESELECT+0x1c>)
 8001050:	f003 ff3e 	bl	8004ed0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f002 fd07 	bl	8003a68 <HAL_Delay>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020400 	.word	0x40020400

08001064 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800106e:	bf00      	nop
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <SPI_TxByte+0x30>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b02      	cmp	r3, #2
 800107c:	d1f8      	bne.n	8001070 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800107e:	1df9      	adds	r1, r7, #7
 8001080:	2364      	movs	r3, #100	; 0x64
 8001082:	2201      	movs	r2, #1
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <SPI_TxByte+0x30>)
 8001086:	f004 ff3d 	bl	8005f04 <HAL_SPI_Transmit>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000a7d4 	.word	0x2000a7d4

08001098 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010a4:	bf00      	nop
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <SPI_TxBuffer+0x30>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d1f8      	bne.n	80010a6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80010b4:	887a      	ldrh	r2, [r7, #2]
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <SPI_TxBuffer+0x30>)
 80010bc:	f004 ff22 	bl	8005f04 <HAL_SPI_Transmit>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000a7d4 	.word	0x2000a7d4

080010cc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010d6:	bf00      	nop
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <SPI_RxByte+0x34>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d1f8      	bne.n	80010d8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010e6:	1dba      	adds	r2, r7, #6
 80010e8:	1df9      	adds	r1, r7, #7
 80010ea:	2364      	movs	r3, #100	; 0x64
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <SPI_RxByte+0x34>)
 80010f2:	f005 f843 	bl	800617c <HAL_SPI_TransmitReceive>

	return data;
 80010f6:	79bb      	ldrb	r3, [r7, #6]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000a7d4 	.word	0x2000a7d4

08001104 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800110c:	f7ff ffde 	bl	80010cc <SPI_RxByte>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	701a      	strb	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <SD_ReadyWait+0x30>)
 8001128:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800112c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800112e:	f7ff ffcd 	bl	80010cc <SPI_RxByte>
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2bff      	cmp	r3, #255	; 0xff
 800113a:	d004      	beq.n	8001146 <SD_ReadyWait+0x26>
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SD_ReadyWait+0x30>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f3      	bne.n	800112e <SD_ReadyWait+0xe>

	return res;
 8001146:	79fb      	ldrb	r3, [r7, #7]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000a8e4 	.word	0x2000a8e4

08001154 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800115a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800115e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001160:	f7ff ff70 	bl	8001044 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	e005      	b.n	8001176 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800116a:	20ff      	movs	r0, #255	; 0xff
 800116c:	f7ff ff7a 	bl	8001064 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3301      	adds	r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b09      	cmp	r3, #9
 800117a:	ddf6      	ble.n	800116a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800117c:	f7ff ff52 	bl	8001024 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001194:	2395      	movs	r3, #149	; 0x95
 8001196:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001198:	463b      	mov	r3, r7
 800119a:	2106      	movs	r1, #6
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff7b 	bl	8001098 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80011a2:	e002      	b.n	80011aa <SD_PowerOn+0x56>
	{
		cnt--;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80011aa:	f7ff ff8f 	bl	80010cc <SPI_RxByte>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d002      	beq.n	80011ba <SD_PowerOn+0x66>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f4      	bne.n	80011a4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80011ba:	f7ff ff43 	bl	8001044 <DESELECT>
	SPI_TxByte(0XFF);
 80011be:	20ff      	movs	r0, #255	; 0xff
 80011c0:	f7ff ff50 	bl	8001064 <SPI_TxByte>

	PowerFlag = 1;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <SD_PowerOn+0x80>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000bd 	.word	0x200000bd

080011d8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <SD_PowerOff+0x14>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	200000bd 	.word	0x200000bd

080011f0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <SD_CheckPower+0x14>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200000bd 	.word	0x200000bd

08001208 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <SD_RxDataBlock+0x5c>)
 8001214:	22c8      	movs	r2, #200	; 0xc8
 8001216:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001218:	f7ff ff58 	bl	80010cc <SPI_RxByte>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	2bff      	cmp	r3, #255	; 0xff
 8001224:	d104      	bne.n	8001230 <SD_RxDataBlock+0x28>
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <SD_RxDataBlock+0x5c>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f3      	bne.n	8001218 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2bfe      	cmp	r3, #254	; 0xfe
 8001234:	d001      	beq.n	800123a <SD_RxDataBlock+0x32>
 8001236:	2300      	movs	r3, #0
 8001238:	e00f      	b.n	800125a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5f 	bl	8001104 <SPI_RxBytePtr>
	} while(len--);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	603a      	str	r2, [r7, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f4      	bne.n	800123a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001250:	f7ff ff3c 	bl	80010cc <SPI_RxByte>
	SPI_RxByte();
 8001254:	f7ff ff3a 	bl	80010cc <SPI_RxByte>

	return TRUE;
 8001258:	2301      	movs	r3, #1
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000a8e5 	.word	0x2000a8e5

08001268 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001278:	f7ff ff52 	bl	8001120 <SD_ReadyWait>
 800127c:	4603      	mov	r3, r0
 800127e:	2bff      	cmp	r3, #255	; 0xff
 8001280:	d001      	beq.n	8001286 <SD_TxDataBlock+0x1e>
 8001282:	2300      	movs	r3, #0
 8001284:	e02f      	b.n	80012e6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff feeb 	bl	8001064 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	2bfd      	cmp	r3, #253	; 0xfd
 8001292:	d020      	beq.n	80012d6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fefd 	bl	8001098 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800129e:	f7ff ff15 	bl	80010cc <SPI_RxByte>
		SPI_RxByte();
 80012a2:	f7ff ff13 	bl	80010cc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80012a6:	e00b      	b.n	80012c0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80012a8:	f7ff ff10 	bl	80010cc <SPI_RxByte>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d006      	beq.n	80012c8 <SD_TxDataBlock+0x60>
			i++;
 80012ba:	7bbb      	ldrb	r3, [r7, #14]
 80012bc:	3301      	adds	r3, #1
 80012be:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	2b40      	cmp	r3, #64	; 0x40
 80012c4:	d9f0      	bls.n	80012a8 <SD_TxDataBlock+0x40>
 80012c6:	e000      	b.n	80012ca <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80012c8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80012ca:	bf00      	nop
 80012cc:	f7ff fefe 	bl	80010cc <SPI_RxByte>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0fa      	beq.n	80012cc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	2b05      	cmp	r3, #5
 80012de:	d101      	bne.n	80012e4 <SD_TxDataBlock+0x7c>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	6039      	str	r1, [r7, #0]
 80012f8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012fa:	f7ff ff11 	bl	8001120 <SD_ReadyWait>
 80012fe:	4603      	mov	r3, r0
 8001300:	2bff      	cmp	r3, #255	; 0xff
 8001302:	d001      	beq.n	8001308 <SD_SendCmd+0x1a>
 8001304:	23ff      	movs	r3, #255	; 0xff
 8001306:	e042      	b.n	800138e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff feaa 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	0e1b      	lsrs	r3, r3, #24
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fea4 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	0c1b      	lsrs	r3, r3, #16
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe9e 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fe98 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe93 	bl	8001064 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b40      	cmp	r3, #64	; 0x40
 8001342:	d102      	bne.n	800134a <SD_SendCmd+0x5c>
 8001344:	2395      	movs	r3, #149	; 0x95
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e007      	b.n	800135a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b48      	cmp	r3, #72	; 0x48
 800134e:	d102      	bne.n	8001356 <SD_SendCmd+0x68>
 8001350:	2387      	movs	r3, #135	; 0x87
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e001      	b.n	800135a <SD_SendCmd+0x6c>
	else crc = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe81 	bl	8001064 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b4c      	cmp	r3, #76	; 0x4c
 8001366:	d101      	bne.n	800136c <SD_SendCmd+0x7e>
 8001368:	f7ff feb0 	bl	80010cc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800136c:	230a      	movs	r3, #10
 800136e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001370:	f7ff feac 	bl	80010cc <SPI_RxByte>
 8001374:	4603      	mov	r3, r0
 8001376:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001378:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800137c:	2b00      	cmp	r3, #0
 800137e:	da05      	bge.n	800138c <SD_SendCmd+0x9e>
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	3b01      	subs	r3, #1
 8001384:	73bb      	strb	r3, [r7, #14]
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f1      	bne.n	8001370 <SD_SendCmd+0x82>

	return res;
 800138c:	7b7b      	ldrb	r3, [r7, #13]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SD_disk_initialize+0x14>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0d6      	b.n	800155a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80013ac:	4b6d      	ldr	r3, [pc, #436]	; (8001564 <SD_disk_initialize+0x1cc>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <SD_disk_initialize+0x2a>
 80013ba:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <SD_disk_initialize+0x1cc>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	e0cb      	b.n	800155a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80013c2:	f7ff fec7 	bl	8001154 <SD_PowerOn>

	/* slave select */
	SELECT();
 80013c6:	f7ff fe2d 	bl	8001024 <SELECT>

	/* check disk type */
	type = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80013ce:	2100      	movs	r1, #0
 80013d0:	2040      	movs	r0, #64	; 0x40
 80013d2:	f7ff ff8c 	bl	80012ee <SD_SendCmd>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b01      	cmp	r3, #1
 80013da:	f040 80a6 	bne.w	800152a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80013de:	4b62      	ldr	r3, [pc, #392]	; (8001568 <SD_disk_initialize+0x1d0>)
 80013e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013ea:	2048      	movs	r0, #72	; 0x48
 80013ec:	f7ff ff7f 	bl	80012ee <SD_SendCmd>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d158      	bne.n	80014a8 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e00c      	b.n	8001416 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80013fc:	7bfc      	ldrb	r4, [r7, #15]
 80013fe:	f7ff fe65 	bl	80010cc <SPI_RxByte>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4423      	add	r3, r4
 800140c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	3301      	adds	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d9ef      	bls.n	80013fc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800141c:	7abb      	ldrb	r3, [r7, #10]
 800141e:	2b01      	cmp	r3, #1
 8001420:	f040 8083 	bne.w	800152a <SD_disk_initialize+0x192>
 8001424:	7afb      	ldrb	r3, [r7, #11]
 8001426:	2baa      	cmp	r3, #170	; 0xaa
 8001428:	d17f      	bne.n	800152a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800142a:	2100      	movs	r1, #0
 800142c:	2077      	movs	r0, #119	; 0x77
 800142e:	f7ff ff5e 	bl	80012ee <SD_SendCmd>
 8001432:	4603      	mov	r3, r0
 8001434:	2b01      	cmp	r3, #1
 8001436:	d807      	bhi.n	8001448 <SD_disk_initialize+0xb0>
 8001438:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800143c:	2069      	movs	r0, #105	; 0x69
 800143e:	f7ff ff56 	bl	80012ee <SD_SendCmd>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001448:	4b47      	ldr	r3, [pc, #284]	; (8001568 <SD_disk_initialize+0x1d0>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1eb      	bne.n	800142a <SD_disk_initialize+0x92>
 8001452:	e000      	b.n	8001456 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001454:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <SD_disk_initialize+0x1d0>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d064      	beq.n	800152a <SD_disk_initialize+0x192>
 8001460:	2100      	movs	r1, #0
 8001462:	207a      	movs	r0, #122	; 0x7a
 8001464:	f7ff ff43 	bl	80012ee <SD_SendCmd>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d15d      	bne.n	800152a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e00c      	b.n	800148e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001474:	7bfc      	ldrb	r4, [r7, #15]
 8001476:	f7ff fe29 	bl	80010cc <SPI_RxByte>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4423      	add	r3, r4
 8001484:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3301      	adds	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d9ef      	bls.n	8001474 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001494:	7a3b      	ldrb	r3, [r7, #8]
 8001496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SD_disk_initialize+0x10a>
 800149e:	230c      	movs	r3, #12
 80014a0:	e000      	b.n	80014a4 <SD_disk_initialize+0x10c>
 80014a2:	2304      	movs	r3, #4
 80014a4:	73bb      	strb	r3, [r7, #14]
 80014a6:	e040      	b.n	800152a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80014a8:	2100      	movs	r1, #0
 80014aa:	2077      	movs	r0, #119	; 0x77
 80014ac:	f7ff ff1f 	bl	80012ee <SD_SendCmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d808      	bhi.n	80014c8 <SD_disk_initialize+0x130>
 80014b6:	2100      	movs	r1, #0
 80014b8:	2069      	movs	r0, #105	; 0x69
 80014ba:	f7ff ff18 	bl	80012ee <SD_SendCmd>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d801      	bhi.n	80014c8 <SD_disk_initialize+0x130>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e000      	b.n	80014ca <SD_disk_initialize+0x132>
 80014c8:	2301      	movs	r3, #1
 80014ca:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d10e      	bne.n	80014f0 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80014d2:	2100      	movs	r1, #0
 80014d4:	2077      	movs	r0, #119	; 0x77
 80014d6:	f7ff ff0a 	bl	80012ee <SD_SendCmd>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d80e      	bhi.n	80014fe <SD_disk_initialize+0x166>
 80014e0:	2100      	movs	r1, #0
 80014e2:	2069      	movs	r0, #105	; 0x69
 80014e4:	f7ff ff03 	bl	80012ee <SD_SendCmd>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d107      	bne.n	80014fe <SD_disk_initialize+0x166>
 80014ee:	e00d      	b.n	800150c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014f0:	2100      	movs	r1, #0
 80014f2:	2041      	movs	r0, #65	; 0x41
 80014f4:	f7ff fefb 	bl	80012ee <SD_SendCmd>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <SD_disk_initialize+0x1d0>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e1      	bne.n	80014cc <SD_disk_initialize+0x134>
 8001508:	e000      	b.n	800150c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800150a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <SD_disk_initialize+0x1d0>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <SD_disk_initialize+0x18e>
 8001516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151a:	2050      	movs	r0, #80	; 0x50
 800151c:	f7ff fee7 	bl	80012ee <SD_SendCmd>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SD_disk_initialize+0x192>
 8001526:	2300      	movs	r3, #0
 8001528:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <SD_disk_initialize+0x1d4>)
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001530:	f7ff fd88 	bl	8001044 <DESELECT>
	SPI_RxByte();
 8001534:	f7ff fdca 	bl	80010cc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <SD_disk_initialize+0x1cc>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SD_disk_initialize+0x1cc>)
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e001      	b.n	8001554 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001550:	f7ff fe42 	bl	80011d8 <SD_PowerOff>
	}

	return Stat;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <SD_disk_initialize+0x1cc>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	20000000 	.word	0x20000000
 8001568:	2000a8e5 	.word	0x2000a8e5
 800156c:	200000bc 	.word	0x200000bc

08001570 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SD_disk_status+0x14>
 8001580:	2301      	movs	r3, #1
 8001582:	e002      	b.n	800158a <SD_disk_status+0x1a>
	return Stat;
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SD_disk_status+0x28>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000

0800159c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <SD_disk_read+0x1c>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <SD_disk_read+0x20>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e051      	b.n	8001660 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <SD_disk_read+0xcc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SD_disk_read+0x32>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e048      	b.n	8001660 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <SD_disk_read+0xd0>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <SD_disk_read+0x44>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	607b      	str	r3, [r7, #4]

	SELECT();
 80015e0:	f7ff fd20 	bl	8001024 <SELECT>

	if (count == 1)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d111      	bne.n	800160e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	2051      	movs	r0, #81	; 0x51
 80015ee:	f7ff fe7e 	bl	80012ee <SD_SendCmd>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d129      	bne.n	800164c <SD_disk_read+0xb0>
 80015f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fc:	68b8      	ldr	r0, [r7, #8]
 80015fe:	f7ff fe03 	bl	8001208 <SD_RxDataBlock>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d021      	beq.n	800164c <SD_disk_read+0xb0>
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	e01e      	b.n	800164c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	2052      	movs	r0, #82	; 0x52
 8001612:	f7ff fe6c 	bl	80012ee <SD_SendCmd>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d117      	bne.n	800164c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800161c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001620:	68b8      	ldr	r0, [r7, #8]
 8001622:	f7ff fdf1 	bl	8001208 <SD_RxDataBlock>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00a      	beq.n	8001642 <SD_disk_read+0xa6>
				buff += 512;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001632:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3b01      	subs	r3, #1
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ed      	bne.n	800161c <SD_disk_read+0x80>
 8001640:	e000      	b.n	8001644 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001642:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001644:	2100      	movs	r1, #0
 8001646:	204c      	movs	r0, #76	; 0x4c
 8001648:	f7ff fe51 	bl	80012ee <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800164c:	f7ff fcfa 	bl	8001044 <DESELECT>
	SPI_RxByte();
 8001650:	f7ff fd3c 	bl	80010cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000000 	.word	0x20000000
 800166c:	200000bc 	.word	0x200000bc

08001670 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <SD_disk_write+0x1c>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <SD_disk_write+0x20>
 800168c:	2304      	movs	r3, #4
 800168e:	e06b      	b.n	8001768 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001690:	4b37      	ldr	r3, [pc, #220]	; (8001770 <SD_disk_write+0x100>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SD_disk_write+0x32>
 800169e:	2303      	movs	r3, #3
 80016a0:	e062      	b.n	8001768 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80016a2:	4b33      	ldr	r3, [pc, #204]	; (8001770 <SD_disk_write+0x100>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SD_disk_write+0x44>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e059      	b.n	8001768 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80016b4:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <SD_disk_write+0x104>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <SD_disk_write+0x56>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	607b      	str	r3, [r7, #4]

	SELECT();
 80016c6:	f7ff fcad 	bl	8001024 <SELECT>

	if (count == 1)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d110      	bne.n	80016f2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	2058      	movs	r0, #88	; 0x58
 80016d4:	f7ff fe0b 	bl	80012ee <SD_SendCmd>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d13a      	bne.n	8001754 <SD_disk_write+0xe4>
 80016de:	21fe      	movs	r1, #254	; 0xfe
 80016e0:	68b8      	ldr	r0, [r7, #8]
 80016e2:	f7ff fdc1 	bl	8001268 <SD_TxDataBlock>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d033      	beq.n	8001754 <SD_disk_write+0xe4>
			count = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	e030      	b.n	8001754 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <SD_disk_write+0x104>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80016fe:	2100      	movs	r1, #0
 8001700:	2077      	movs	r0, #119	; 0x77
 8001702:	f7ff fdf4 	bl	80012ee <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	2057      	movs	r0, #87	; 0x57
 800170a:	f7ff fdf0 	bl	80012ee <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	2059      	movs	r0, #89	; 0x59
 8001712:	f7ff fdec 	bl	80012ee <SD_SendCmd>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d11b      	bne.n	8001754 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800171c:	21fc      	movs	r1, #252	; 0xfc
 800171e:	68b8      	ldr	r0, [r7, #8]
 8001720:	f7ff fda2 	bl	8001268 <SD_TxDataBlock>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00a      	beq.n	8001740 <SD_disk_write+0xd0>
				buff += 512;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001730:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3b01      	subs	r3, #1
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ee      	bne.n	800171c <SD_disk_write+0xac>
 800173e:	e000      	b.n	8001742 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001740:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001742:	21fd      	movs	r1, #253	; 0xfd
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fd8f 	bl	8001268 <SD_TxDataBlock>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <SD_disk_write+0xe4>
			{
				count = 1;
 8001750:	2301      	movs	r3, #1
 8001752:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001754:	f7ff fc76 	bl	8001044 <DESELECT>
	SPI_RxByte();
 8001758:	f7ff fcb8 	bl	80010cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000000 	.word	0x20000000
 8001774:	200000bc 	.word	0x200000bc

08001778 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b08b      	sub	sp, #44	; 0x2c
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	603a      	str	r2, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
 8001784:	460b      	mov	r3, r1
 8001786:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SD_disk_ioctl+0x1e>
 8001792:	2304      	movs	r3, #4
 8001794:	e115      	b.n	80019c2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d124      	bne.n	80017ec <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d012      	beq.n	80017d0 <SD_disk_ioctl+0x58>
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	dc1a      	bgt.n	80017e4 <SD_disk_ioctl+0x6c>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <SD_disk_ioctl+0x40>
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d006      	beq.n	80017c4 <SD_disk_ioctl+0x4c>
 80017b6:	e015      	b.n	80017e4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80017b8:	f7ff fd0e 	bl	80011d8 <SD_PowerOff>
			res = RES_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017c2:	e0fc      	b.n	80019be <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80017c4:	f7ff fcc6 	bl	8001154 <SD_PowerOn>
			res = RES_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017ce:	e0f6      	b.n	80019be <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	1c5c      	adds	r4, r3, #1
 80017d4:	f7ff fd0c 	bl	80011f0 <SD_CheckPower>
 80017d8:	4603      	mov	r3, r0
 80017da:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017e2:	e0ec      	b.n	80019be <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80017e4:	2304      	movs	r3, #4
 80017e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017ea:	e0e8      	b.n	80019be <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017ec:	4b77      	ldr	r3, [pc, #476]	; (80019cc <SD_disk_ioctl+0x254>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SD_disk_ioctl+0x86>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0e1      	b.n	80019c2 <SD_disk_ioctl+0x24a>

		SELECT();
 80017fe:	f7ff fc11 	bl	8001024 <SELECT>

		switch (ctrl)
 8001802:	79bb      	ldrb	r3, [r7, #6]
 8001804:	2b0d      	cmp	r3, #13
 8001806:	f200 80cb 	bhi.w	80019a0 <SD_disk_ioctl+0x228>
 800180a:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <SD_disk_ioctl+0x98>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	0800190b 	.word	0x0800190b
 8001814:	08001849 	.word	0x08001849
 8001818:	080018fb 	.word	0x080018fb
 800181c:	080019a1 	.word	0x080019a1
 8001820:	080019a1 	.word	0x080019a1
 8001824:	080019a1 	.word	0x080019a1
 8001828:	080019a1 	.word	0x080019a1
 800182c:	080019a1 	.word	0x080019a1
 8001830:	080019a1 	.word	0x080019a1
 8001834:	080019a1 	.word	0x080019a1
 8001838:	080019a1 	.word	0x080019a1
 800183c:	0800191d 	.word	0x0800191d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001965 	.word	0x08001965
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001848:	2100      	movs	r1, #0
 800184a:	2049      	movs	r0, #73	; 0x49
 800184c:	f7ff fd4f 	bl	80012ee <SD_SendCmd>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 80a8 	bne.w	80019a8 <SD_disk_ioctl+0x230>
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	2110      	movs	r1, #16
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fcd2 	bl	8001208 <SD_RxDataBlock>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 809e 	beq.w	80019a8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800186c:	7b3b      	ldrb	r3, [r7, #12]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10e      	bne.n	8001894 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001876:	7d7b      	ldrb	r3, [r7, #21]
 8001878:	b29a      	uxth	r2, r3
 800187a:	7d3b      	ldrb	r3, [r7, #20]
 800187c:	b29b      	uxth	r3, r3
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	b29b      	uxth	r3, r3
 8001882:	4413      	add	r3, r2
 8001884:	b29b      	uxth	r3, r3
 8001886:	3301      	adds	r3, #1
 8001888:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800188a:	8bfb      	ldrh	r3, [r7, #30]
 800188c:	029a      	lsls	r2, r3, #10
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e02e      	b.n	80018f2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001894:	7c7b      	ldrb	r3, [r7, #17]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	b2da      	uxtb	r2, r3
 800189c:	7dbb      	ldrb	r3, [r7, #22]
 800189e:	09db      	lsrs	r3, r3, #7
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	7d7b      	ldrb	r3, [r7, #21]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f003 0306 	and.w	r3, r3, #6
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3302      	adds	r3, #2
 80018b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80018bc:	7d3b      	ldrb	r3, [r7, #20]
 80018be:	099b      	lsrs	r3, r3, #6
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	7cfb      	ldrb	r3, [r7, #19]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	7cbb      	ldrb	r3, [r7, #18]
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4413      	add	r3, r2
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80018e4:	8bfa      	ldrh	r2, [r7, #30]
 80018e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ea:	3b09      	subs	r3, #9
 80018ec:	409a      	lsls	r2, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80018f8:	e056      	b.n	80019a8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001900:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001908:	e055      	b.n	80019b6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800190a:	f7ff fc09 	bl	8001120 <SD_ReadyWait>
 800190e:	4603      	mov	r3, r0
 8001910:	2bff      	cmp	r3, #255	; 0xff
 8001912:	d14b      	bne.n	80019ac <SD_disk_ioctl+0x234>
 8001914:	2300      	movs	r3, #0
 8001916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800191a:	e047      	b.n	80019ac <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800191c:	2100      	movs	r1, #0
 800191e:	2049      	movs	r0, #73	; 0x49
 8001920:	f7ff fce5 	bl	80012ee <SD_SendCmd>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d142      	bne.n	80019b0 <SD_disk_ioctl+0x238>
 800192a:	2110      	movs	r1, #16
 800192c:	6a38      	ldr	r0, [r7, #32]
 800192e:	f7ff fc6b 	bl	8001208 <SD_RxDataBlock>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d03b      	beq.n	80019b0 <SD_disk_ioctl+0x238>
 8001938:	2300      	movs	r3, #0
 800193a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800193e:	e037      	b.n	80019b0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001940:	2100      	movs	r1, #0
 8001942:	204a      	movs	r0, #74	; 0x4a
 8001944:	f7ff fcd3 	bl	80012ee <SD_SendCmd>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d132      	bne.n	80019b4 <SD_disk_ioctl+0x23c>
 800194e:	2110      	movs	r1, #16
 8001950:	6a38      	ldr	r0, [r7, #32]
 8001952:	f7ff fc59 	bl	8001208 <SD_RxDataBlock>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d02b      	beq.n	80019b4 <SD_disk_ioctl+0x23c>
 800195c:	2300      	movs	r3, #0
 800195e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001962:	e027      	b.n	80019b4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001964:	2100      	movs	r1, #0
 8001966:	207a      	movs	r0, #122	; 0x7a
 8001968:	f7ff fcc1 	bl	80012ee <SD_SendCmd>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d116      	bne.n	80019a0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001972:	2300      	movs	r3, #0
 8001974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001978:	e00b      	b.n	8001992 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800197a:	6a3c      	ldr	r4, [r7, #32]
 800197c:	1c63      	adds	r3, r4, #1
 800197e:	623b      	str	r3, [r7, #32]
 8001980:	f7ff fba4 	bl	80010cc <SPI_RxByte>
 8001984:	4603      	mov	r3, r0
 8001986:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800198c:	3301      	adds	r3, #1
 800198e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001996:	2b03      	cmp	r3, #3
 8001998:	d9ef      	bls.n	800197a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80019a0:	2304      	movs	r3, #4
 80019a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019a6:	e006      	b.n	80019b6 <SD_disk_ioctl+0x23e>
			break;
 80019a8:	bf00      	nop
 80019aa:	e004      	b.n	80019b6 <SD_disk_ioctl+0x23e>
			break;
 80019ac:	bf00      	nop
 80019ae:	e002      	b.n	80019b6 <SD_disk_ioctl+0x23e>
			break;
 80019b0:	bf00      	nop
 80019b2:	e000      	b.n	80019b6 <SD_disk_ioctl+0x23e>
			break;
 80019b4:	bf00      	nop
		}

		DESELECT();
 80019b6:	f7ff fb45 	bl	8001044 <DESELECT>
		SPI_RxByte();
 80019ba:	f7ff fb87 	bl	80010cc <SPI_RxByte>
	}

	return res;
 80019be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	372c      	adds	r7, #44	; 0x2c
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000

080019d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <MX_GPIO_Init+0x138>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <MX_GPIO_Init+0x138>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b44      	ldr	r3, [pc, #272]	; (8001b08 <MX_GPIO_Init+0x138>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a3f      	ldr	r2, [pc, #252]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a38      	ldr	r2, [pc, #224]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8001a5c:	482b      	ldr	r0, [pc, #172]	; (8001b0c <MX_GPIO_Init+0x13c>)
 8001a5e:	f003 fa37 	bl	8004ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a68:	4829      	ldr	r0, [pc, #164]	; (8001b10 <MX_GPIO_Init+0x140>)
 8001a6a:	f003 fa31 	bl	8004ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WKUP_Pin;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4823      	ldr	r0, [pc, #140]	; (8001b10 <MX_GPIO_Init+0x140>)
 8001a84:	f003 f888 	bl	8004b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	481b      	ldr	r0, [pc, #108]	; (8001b0c <MX_GPIO_Init+0x13c>)
 8001aa0:	f003 f87a 	bl	8004b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin;
 8001aa4:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4813      	ldr	r0, [pc, #76]	; (8001b0c <MX_GPIO_Init+0x13c>)
 8001abe:	f003 f86b 	bl	8004b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 8001ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MX_GPIO_Init+0x140>)
 8001adc:	f003 f85c 	bl	8004b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	2006      	movs	r0, #6
 8001ae6:	f002 fcb0 	bl	800444a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001aea:	2006      	movs	r0, #6
 8001aec:	f002 fcc9 	bl	8004482 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2108      	movs	r1, #8
 8001af4:	2028      	movs	r0, #40	; 0x28
 8001af6:	f002 fca8 	bl	800444a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f002 fcc1 	bl	8004482 <HAL_NVIC_EnableIRQ>

}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	40020000 	.word	0x40020000

08001b14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b1a:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <MX_I2C1_Init+0x54>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b20:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <MX_I2C1_Init+0x58>)
 8001b22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b52:	f003 f9ef 	bl	8004f34 <HAL_I2C_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b5c:	f000 feda 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2000a1e8 	.word	0x2000a1e8
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	000186a0 	.word	0x000186a0

08001b70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_I2C_MspInit+0x84>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d12c      	bne.n	8001bec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001bae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb4:	2312      	movs	r3, #18
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480c      	ldr	r0, [pc, #48]	; (8001bfc <HAL_I2C_MspInit+0x8c>)
 8001bcc:	f002 ffe4 	bl	8004b98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001bda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	; 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40005400 	.word	0x40005400
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020400 	.word	0x40020400

08001c00 <lcd_cmd>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


static void lcd_cmd(uint8_t cmd) //send any command to st7735
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <lcd_cmd+0x40>)
 8001c12:	f003 f95d 	bl	8004ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2140      	movs	r1, #64	; 0x40
 8001c1a:	480a      	ldr	r0, [pc, #40]	; (8001c44 <lcd_cmd+0x44>)
 8001c1c:	f003 f958 	bl	8004ed0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001c20:	1df9      	adds	r1, r7, #7
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	2201      	movs	r2, #1
 8001c28:	4807      	ldr	r0, [pc, #28]	; (8001c48 <lcd_cmd+0x48>)
 8001c2a:	f004 f96b 	bl	8005f04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2140      	movs	r1, #64	; 0x40
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <lcd_cmd+0x44>)
 8001c34:	f003 f94c 	bl	8004ed0 <HAL_GPIO_WritePin>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	2000a82c 	.word	0x2000a82c

08001c4c <lcd_data>:

static void lcd_data(uint8_t data)//send data(value for command) to st7735, spi always uses 8bit data
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c5c:	480b      	ldr	r0, [pc, #44]	; (8001c8c <lcd_data+0x40>)
 8001c5e:	f003 f937 	bl	8004ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	480a      	ldr	r0, [pc, #40]	; (8001c90 <lcd_data+0x44>)
 8001c68:	f003 f932 	bl	8004ed0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001c6c:	1df9      	adds	r1, r7, #7
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	2201      	movs	r2, #1
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <lcd_data+0x48>)
 8001c76:	f004 f945 	bl	8005f04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2140      	movs	r1, #64	; 0x40
 8001c7e:	4804      	ldr	r0, [pc, #16]	; (8001c90 <lcd_data+0x44>)
 8001c80:	f003 f926 	bl	8004ed0 <HAL_GPIO_WritePin>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40020400 	.word	0x40020400
 8001c94:	2000a82c 	.word	0x2000a82c

08001c98 <lcd_data16>:

static void lcd_data16(uint16_t value)//function that allows to send 16bit data as 2x 8bit
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ffce 	bl	8001c4c <lcd_data>
	lcd_data(value);
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ffc9 	bl	8001c4c <lcd_data>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height) {
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);	//command to set window columns
 8001cd0:	202a      	movs	r0, #42	; 0x2a
 8001cd2:	f7ff ff95 	bl	8001c00 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);	//start col
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ffdc 	bl	8001c98 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);	//end col
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ffd1 	bl	8001c98 <lcd_data16>

	lcd_cmd(ST7735S_RASET);	//command to set window rows
 8001cf6:	202b      	movs	r0, #43	; 0x2b
 8001cf8:	f7ff ff82 	bl	8001c00 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);	//start row
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ffc9 	bl	8001c98 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height - 1);	//end row
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ffbe 	bl	8001c98 <lcd_data16>
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <lcd_send>:

static void lcd_send(uint16_t value) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) { //checks if value is a command (9th bit is 1) or data (9th bit is 0)
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <lcd_send+0x20>
		lcd_cmd(value);
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff5f 	bl	8001c00 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8001d42:	e004      	b.n	8001d4e <lcd_send+0x2a>
		lcd_data(value);
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff7f 	bl	8001c4c <lcd_data>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <lcd_init>:
		0x22, 0x1f, 0x1b, 0x23, 0x37, 0x00, 0x07, 0x02, 0x10, CMD(
				ST7735S_GAMCTRN1), 0x0f, 0x1b, 0x0f, 0x17, 0x33, 0x2c, 0x29,
		0x2e, 0x30, 0x30, 0x39, 0x3f, 0x00, 0x07, 0x03, 0x10, CMD(0xf0), 0x01,
		CMD(0xf6), 0x00, CMD(ST7735S_COLMOD), 0x05, CMD(ST7735S_MADCTL), 0x00, };

void lcd_init(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
	int i;

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d64:	4817      	ldr	r0, [pc, #92]	; (8001dc4 <lcd_init+0x6c>)
 8001d66:	f003 f8b3 	bl	8004ed0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001d6a:	2064      	movs	r0, #100	; 0x64
 8001d6c:	f001 fe7c 	bl	8003a68 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001d70:	2201      	movs	r2, #1
 8001d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d76:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <lcd_init+0x6c>)
 8001d78:	f003 f8aa 	bl	8004ed0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001d7c:	2064      	movs	r0, #100	; 0x64
 8001d7e:	f001 fe73 	bl	8003a68 <HAL_Delay>

	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	e009      	b.n	8001d9c <lcd_init+0x44>
		lcd_send(init_table[i]);
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <lcd_init+0x70>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ffc7 	bl	8001d24 <lcd_send>
	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b4b      	cmp	r3, #75	; 0x4b
 8001da0:	d9f2      	bls.n	8001d88 <lcd_init+0x30>
	}

	HAL_Delay(200);
 8001da2:	20c8      	movs	r0, #200	; 0xc8
 8001da4:	f001 fe60 	bl	8003a68 <HAL_Delay>

	lcd_cmd(ST7735S_SLPOUT);
 8001da8:	2011      	movs	r0, #17
 8001daa:	f7ff ff29 	bl	8001c00 <lcd_cmd>
	HAL_Delay(120);
 8001dae:	2078      	movs	r0, #120	; 0x78
 8001db0:	f001 fe5a 	bl	8003a68 <HAL_Delay>

	lcd_cmd(ST7735S_DISPON);
 8001db4:	2029      	movs	r0, #41	; 0x29
 8001db6:	f7ff ff23 	bl	8001c00 <lcd_cmd>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	0800c9a8 	.word	0x0800c9a8

08001dcc <lcd_put_pixel>:


void lcd_put_pixel(int x, int y, uint16_t color) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	01da      	lsls	r2, r3, #7
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	4905      	ldr	r1, [pc, #20]	; (8001df8 <lcd_put_pixel+0x2c>)
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	200000c0 	.word	0x200000c0

08001dfc <lcd_copy>:


void lcd_copy(void) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001e00:	23a0      	movs	r3, #160	; 0xa0
 8001e02:	2280      	movs	r2, #128	; 0x80
 8001e04:	2100      	movs	r1, #0
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff ff5b 	bl	8001cc2 <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 8001e0c:	202c      	movs	r0, #44	; 0x2c
 8001e0e:	f7ff fef7 	bl	8001c00 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001e12:	2201      	movs	r2, #1
 8001e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e18:	4807      	ldr	r0, [pc, #28]	; (8001e38 <lcd_copy+0x3c>)
 8001e1a:	f003 f859 	bl	8004ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2140      	movs	r1, #64	; 0x40
 8001e22:	4806      	ldr	r0, [pc, #24]	; (8001e3c <lcd_copy+0x40>)
 8001e24:	f003 f854 	bl	8004ed0 <HAL_GPIO_WritePin>
//	HAL_SPI_Transmit(&hspi2, (uint8_t *)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)frame_buffer, sizeof(frame_buffer));
 8001e28:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001e2c:	4904      	ldr	r1, [pc, #16]	; (8001e40 <lcd_copy+0x44>)
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <lcd_copy+0x48>)
 8001e30:	f004 fb46 	bl	80064c0 <HAL_SPI_Transmit_DMA>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	200000c0 	.word	0x200000c0
 8001e44:	2000a82c 	.word	0x2000a82c

08001e48 <lcd_transfer_done>:


void lcd_transfer_done(void){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2140      	movs	r1, #64	; 0x40
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <lcd_transfer_done+0x14>)
 8001e52:	f003 f83d 	bl	8004ed0 <HAL_GPIO_WritePin>
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40020400 	.word	0x40020400

08001e60 <__io_putchar>:
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int __io_putchar(int ch) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b0a      	cmp	r3, #10
 8001e6c:	d102      	bne.n	8001e74 <__io_putchar+0x14>
		__io_putchar('\r');
 8001e6e:	200d      	movs	r0, #13
 8001e70:	f7ff fff6 	bl	8001e60 <__io_putchar>
	}

	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001e74:	1d39      	adds	r1, r7, #4
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4803      	ldr	r0, [pc, #12]	; (8001e8c <__io_putchar+0x2c>)
 8001e7e:	f004 ffca 	bl	8006e16 <HAL_UART_Transmit>

	return 1;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2000a930 	.word	0x2000a930

08001e90 <clear_buffer>:
	while (*buf++ != '\0')
		i++;
	return i;
}

void clear_buffer(void) {
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUFFER_SIZE; i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	e007      	b.n	8001eac <clear_buffer+0x1c>
		buffer[i] = '\0';
 8001e9c:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <clear_buffer+0x30>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b7f      	cmp	r3, #127	; 0x7f
 8001eb0:	ddf4      	ble.n	8001e9c <clear_buffer+0xc>
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	2000a4a4 	.word	0x2000a4a4

08001ec4 <sd_card_mount>:

void sd_card_mount(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	490a      	ldr	r1, [pc, #40]	; (8001ef4 <sd_card_mount+0x30>)
 8001ecc:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <sd_card_mount+0x34>)
 8001ece:	f007 f819 	bl	8008f04 <f_mount>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <sd_card_mount+0x38>)
 8001ed8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <sd_card_mount+0x38>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <sd_card_mount+0x26>
		printf("ERROR!!! in mounting SD CARD...\n\n");
 8001ee2:	4807      	ldr	r0, [pc, #28]	; (8001f00 <sd_card_mount+0x3c>)
 8001ee4:	f009 fed0 	bl	800bc88 <puts>
	else
		printf("SD CARD mounted successfully...\n\n");
}
 8001ee8:	e002      	b.n	8001ef0 <sd_card_mount+0x2c>
		printf("SD CARD mounted successfully...\n\n");
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <sd_card_mount+0x40>)
 8001eec:	f009 fecc 	bl	800bc88 <puts>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	0800c448 	.word	0x0800c448
 8001ef8:	2000a26c 	.word	0x2000a26c
 8001efc:	2000a53c 	.word	0x2000a53c
 8001f00:	0800c44c 	.word	0x0800c44c
 8001f04:	0800c470 	.word	0x0800c470

08001f08 <sd_card_check_capacity>:
	fresult = f_mount(NULL, "/", 1);
	if (fresult == FR_OK)
		printf("SD CARD UNMOUNTED successfully...\n");
}

void sd_card_check_capacity(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	f_getfree("", &fre_clust, &pfs);
 8001f0c:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <sd_card_check_capacity+0xa8>)
 8001f0e:	4929      	ldr	r1, [pc, #164]	; (8001fb4 <sd_card_check_capacity+0xac>)
 8001f10:	4829      	ldr	r0, [pc, #164]	; (8001fb8 <sd_card_check_capacity+0xb0>)
 8001f12:	f007 fe21 	bl	8009b58 <f_getfree>
	total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <sd_card_check_capacity+0xa8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	3b02      	subs	r3, #2
 8001f1e:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <sd_card_check_capacity+0xa8>)
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	8952      	ldrh	r2, [r2, #10]
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe faeb 	bl	8000504 <__aeabi_ui2d>
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <sd_card_check_capacity+0xb4>)
 8001f34:	f7fe fb60 	bl	80005f8 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7fe fd6c 	bl	8000a1c <__aeabi_d2uiz>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4a1e      	ldr	r2, [pc, #120]	; (8001fc0 <sd_card_check_capacity+0xb8>)
 8001f48:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "SD CARD Total Size: \t%lu\n", total);
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <sd_card_check_capacity+0xb8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	491c      	ldr	r1, [pc, #112]	; (8001fc4 <sd_card_check_capacity+0xbc>)
 8001f52:	481d      	ldr	r0, [pc, #116]	; (8001fc8 <sd_card_check_capacity+0xc0>)
 8001f54:	f009 fee4 	bl	800bd20 <siprintf>
	printf(buffer);
 8001f58:	481b      	ldr	r0, [pc, #108]	; (8001fc8 <sd_card_check_capacity+0xc0>)
 8001f5a:	f009 fe0f 	bl	800bb7c <iprintf>
	clear_buffer();
 8001f5e:	f7ff ff97 	bl	8001e90 <clear_buffer>
	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <sd_card_check_capacity+0xa8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	895b      	ldrh	r3, [r3, #10]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <sd_card_check_capacity+0xac>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fb03 f302 	mul.w	r3, r3, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fac6 	bl	8000504 <__aeabi_ui2d>
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <sd_card_check_capacity+0xb4>)
 8001f7e:	f7fe fb3b 	bl	80005f8 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fd47 	bl	8000a1c <__aeabi_d2uiz>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <sd_card_check_capacity+0xc4>)
 8001f92:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "SD CARD Free Space: \t%lu\n\n", free_space);
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <sd_card_check_capacity+0xc4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	490d      	ldr	r1, [pc, #52]	; (8001fd0 <sd_card_check_capacity+0xc8>)
 8001f9c:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <sd_card_check_capacity+0xc0>)
 8001f9e:	f009 febf 	bl	800bd20 <siprintf>
	printf(buffer);
 8001fa2:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <sd_card_check_capacity+0xc0>)
 8001fa4:	f009 fdea 	bl	800bb7c <iprintf>
	clear_buffer();
 8001fa8:	f7ff ff72 	bl	8001e90 <clear_buffer>
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	2000a528 	.word	0x2000a528
 8001fb4:	2000a23c 	.word	0x2000a23c
 8001fb8:	0800c4b8 	.word	0x0800c4b8
 8001fbc:	3fe00000 	.word	0x3fe00000
 8001fc0:	2000a554 	.word	0x2000a554
 8001fc4:	0800c4bc 	.word	0x0800c4bc
 8001fc8:	2000a4a4 	.word	0x2000a4a4
 8001fcc:	2000a4a0 	.word	0x2000a4a0
 8001fd0:	0800c4d8 	.word	0x0800c4d8

08001fd4 <sd_card_basic_write_to_file>:

void sd_card_basic_write_to_file(char *filename) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001fdc:	2213      	movs	r2, #19
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	480e      	ldr	r0, [pc, #56]	; (800201c <sd_card_basic_write_to_file+0x48>)
 8001fe2:	f006 ffd5 	bl	8008f90 <f_open>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <sd_card_basic_write_to_file+0x4c>)
 8001fec:	701a      	strb	r2, [r3, #0]

	/* Writing text */
	f_puts(
 8001fee:	490b      	ldr	r1, [pc, #44]	; (800201c <sd_card_basic_write_to_file+0x48>)
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <sd_card_basic_write_to_file+0x50>)
 8001ff2:	f007 fedd 	bl	8009db0 <f_puts>
			"DateTime - Channel 0 - Channel 1 - Channel 2 - Channel 3 - Channel 4 - Channel 5 - Channel 6 - Channel 7\n",
			&fil);

	/* Close file */
	fresult = f_close(&fil);
 8001ff6:	4809      	ldr	r0, [pc, #36]	; (800201c <sd_card_basic_write_to_file+0x48>)
 8001ff8:	f007 fb7b 	bl	80096f2 <f_close>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <sd_card_basic_write_to_file+0x4c>)
 8002002:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <sd_card_basic_write_to_file+0x4c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <sd_card_basic_write_to_file+0x3e>
		printf("READINGS.txt created and the data is written \n");
 800200c:	4806      	ldr	r0, [pc, #24]	; (8002028 <sd_card_basic_write_to_file+0x54>)
 800200e:	f009 fe3b 	bl	800bc88 <puts>

}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000a558 	.word	0x2000a558
 8002020:	2000a53c 	.word	0x2000a53c
 8002024:	0800c4f4 	.word	0x0800c4f4
 8002028:	0800c560 	.word	0x0800c560

0800202c <sd_card_update_file>:
	f_close(&fil);

	clear_buffer();
}

void sd_card_update_file(char *filename, uint16_t *measurements) {
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202e:	b08b      	sub	sp, #44	; 0x2c
 8002030:	af08      	add	r7, sp, #32
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
	/* Open the file with write access */
	fresult = f_open(&fil, filename, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8002036:	2203      	movs	r2, #3
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	482a      	ldr	r0, [pc, #168]	; (80020e4 <sd_card_update_file+0xb8>)
 800203c:	f006 ffa8 	bl	8008f90 <f_open>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <sd_card_update_file+0xbc>)
 8002046:	701a      	strb	r2, [r3, #0]

	/* Move to offset to the end of the file */
	fresult = f_lseek(&fil, f_size(&fil));
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <sd_card_update_file+0xb8>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4619      	mov	r1, r3
 800204e:	4825      	ldr	r0, [pc, #148]	; (80020e4 <sd_card_update_file+0xb8>)
 8002050:	f007 fb79 	bl	8009746 <f_lseek>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <sd_card_update_file+0xbc>)
 800205a:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <sd_card_update_file+0xbc>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <sd_card_update_file+0x3e>
		printf("About to update the filename.txt\n");
 8002064:	4821      	ldr	r0, [pc, #132]	; (80020ec <sd_card_update_file+0xc0>)
 8002066:	f009 fe0f 	bl	800bc88 <puts>

	/* write the string to the file */
	snprintf(buffer, sizeof(buffer),
			"01/01/2021 - %d - %d - %d - %d - %d - %d - %d - %d\n",
			measurements[0], measurements[1], measurements[2], measurements[3],
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800206e:	469c      	mov	ip, r3
			measurements[0], measurements[1], measurements[2], measurements[3],
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	3302      	adds	r3, #2
 8002074:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 8002076:	461a      	mov	r2, r3
			measurements[0], measurements[1], measurements[2], measurements[3],
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	3304      	adds	r3, #4
 800207c:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800207e:	4619      	mov	r1, r3
			measurements[0], measurements[1], measurements[2], measurements[3],
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	3306      	adds	r3, #6
 8002084:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 8002086:	4618      	mov	r0, r3
			measurements[4], measurements[5], measurements[6], measurements[7]);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	3308      	adds	r3, #8
 800208c:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800208e:	461c      	mov	r4, r3
			measurements[4], measurements[5], measurements[6], measurements[7]);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	330a      	adds	r3, #10
 8002094:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 8002096:	461d      	mov	r5, r3
			measurements[4], measurements[5], measurements[6], measurements[7]);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	330c      	adds	r3, #12
 800209c:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800209e:	461e      	mov	r6, r3
			measurements[4], measurements[5], measurements[6], measurements[7]);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	330e      	adds	r3, #14
 80020a4:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 80020a6:	9306      	str	r3, [sp, #24]
 80020a8:	9605      	str	r6, [sp, #20]
 80020aa:	9504      	str	r5, [sp, #16]
 80020ac:	9403      	str	r4, [sp, #12]
 80020ae:	9002      	str	r0, [sp, #8]
 80020b0:	9101      	str	r1, [sp, #4]
 80020b2:	9200      	str	r2, [sp, #0]
 80020b4:	4663      	mov	r3, ip
 80020b6:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <sd_card_update_file+0xc4>)
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	480e      	ldr	r0, [pc, #56]	; (80020f4 <sd_card_update_file+0xc8>)
 80020bc:	f009 fdfc 	bl	800bcb8 <sniprintf>
	fresult = f_puts(buffer, &fil);
 80020c0:	4908      	ldr	r1, [pc, #32]	; (80020e4 <sd_card_update_file+0xb8>)
 80020c2:	480c      	ldr	r0, [pc, #48]	; (80020f4 <sd_card_update_file+0xc8>)
 80020c4:	f007 fe74 	bl	8009db0 <f_puts>
 80020c8:	4603      	mov	r3, r0
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <sd_card_update_file+0xbc>)
 80020ce:	701a      	strb	r2, [r3, #0]

	f_close(&fil);
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <sd_card_update_file+0xb8>)
 80020d2:	f007 fb0e 	bl	80096f2 <f_close>

	clear_buffer();
 80020d6:	f7ff fedb 	bl	8001e90 <clear_buffer>
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000a558 	.word	0x2000a558
 80020e8:	2000a53c 	.word	0x2000a53c
 80020ec:	0800c660 	.word	0x0800c660
 80020f0:	0800c684 	.word	0x0800c684
 80020f4:	2000a4a4 	.word	0x2000a4a4

080020f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80020fe:	f001 fc41 	bl	8003984 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002102:	f000 fb6b 	bl	80027dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002106:	f7ff fc63 	bl	80019d0 <MX_GPIO_Init>
	MX_DMA_Init();
 800210a:	f7fe ff6b 	bl	8000fe4 <MX_DMA_Init>
	MX_SPI1_Init();
 800210e:	f001 f82b 	bl	8003168 <MX_SPI1_Init>
	MX_ADC1_Init();
 8002112:	f7fe fe1f 	bl	8000d54 <MX_ADC1_Init>
	MX_I2C1_Init();
 8002116:	f7ff fcfd 	bl	8001b14 <MX_I2C1_Init>
	MX_RTC_Init();
 800211a:	f000 ffd3 	bl	80030c4 <MX_RTC_Init>
	MX_SPI2_Init();
 800211e:	f001 f859 	bl	80031d4 <MX_SPI2_Init>
	MX_TIM2_Init();
 8002122:	f001 fadb 	bl	80036dc <MX_TIM2_Init>
	MX_USART6_UART_Init();
 8002126:	f001 fb91 	bl	800384c <MX_USART6_UART_Init>
	MX_FATFS_Init();
 800212a:	f005 f93d 	bl	80073a8 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
//*******************************************************SD_CARD FUNCTIONS**************************************
	HAL_Delay(500);
 800212e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002132:	f001 fc99 	bl	8003a68 <HAL_Delay>

	/*************** Card capacity details ********************/
	sd_card_mount();
 8002136:	f7ff fec5 	bl	8001ec4 <sd_card_mount>
	/* Check free space */
	sd_card_check_capacity();
 800213a:	f7ff fee5 	bl	8001f08 <sd_card_check_capacity>

//*******************************************************SD_CARD FUNCTIONS**************************************
	printf("Starting..\n");
 800213e:	48a3      	ldr	r0, [pc, #652]	; (80023cc <main+0x2d4>)
 8002140:	f009 fda2 	bl	800bc88 <puts>
	fflush(stdout);
 8002144:	4ba2      	ldr	r3, [pc, #648]	; (80023d0 <main+0x2d8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	4618      	mov	r0, r3
 800214c:	f008 ffc2 	bl	800b0d4 <fflush>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensor_data,
 8002150:	2208      	movs	r2, #8
 8002152:	49a0      	ldr	r1, [pc, #640]	; (80023d4 <main+0x2dc>)
 8002154:	48a0      	ldr	r0, [pc, #640]	; (80023d8 <main+0x2e0>)
 8002156:	f001 fcef 	bl	8003b38 <HAL_ADC_Start_DMA>
			sizeof(sensor_data) / sizeof(int16_t));
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800215a:	213c      	movs	r1, #60	; 0x3c
 800215c:	489f      	ldr	r0, [pc, #636]	; (80023dc <main+0x2e4>)
 800215e:	f004 fc6b 	bl	8006a38 <HAL_TIM_Encoder_Start>
	//start LCD
	lcd_init();
 8002162:	f7ff fdf9 	bl	8001d58 <lcd_init>
	//generate filename from RTC
	sd_card_basic_write_to_file("POMIARY.txt");
 8002166:	489e      	ldr	r0, [pc, #632]	; (80023e0 <main+0x2e8>)
 8002168:	f7ff ff34 	bl	8001fd4 <sd_card_basic_write_to_file>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//************************CHANGING SCREENS************************
		switch (activeScreen) {
 800216c:	4b9d      	ldr	r3, [pc, #628]	; (80023e4 <main+0x2ec>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b29      	cmp	r3, #41	; 0x29
 8002174:	f200 81da 	bhi.w	800252c <main+0x434>
 8002178:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <main+0x88>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	08002229 	.word	0x08002229
 8002184:	080022e9 	.word	0x080022e9
 8002188:	0800252d 	.word	0x0800252d
 800218c:	0800252d 	.word	0x0800252d
 8002190:	0800252d 	.word	0x0800252d
 8002194:	0800252d 	.word	0x0800252d
 8002198:	0800252d 	.word	0x0800252d
 800219c:	0800252d 	.word	0x0800252d
 80021a0:	0800252d 	.word	0x0800252d
 80021a4:	0800252d 	.word	0x0800252d
 80021a8:	0800252d 	.word	0x0800252d
 80021ac:	08002365 	.word	0x08002365
 80021b0:	0800241d 	.word	0x0800241d
 80021b4:	0800252d 	.word	0x0800252d
 80021b8:	08002483 	.word	0x08002483
 80021bc:	0800252d 	.word	0x0800252d
 80021c0:	0800252d 	.word	0x0800252d
 80021c4:	0800252d 	.word	0x0800252d
 80021c8:	0800252d 	.word	0x0800252d
 80021cc:	0800252d 	.word	0x0800252d
 80021d0:	0800252d 	.word	0x0800252d
 80021d4:	0800252d 	.word	0x0800252d
 80021d8:	0800252d 	.word	0x0800252d
 80021dc:	0800252d 	.word	0x0800252d
 80021e0:	0800252d 	.word	0x0800252d
 80021e4:	0800252d 	.word	0x0800252d
 80021e8:	0800252d 	.word	0x0800252d
 80021ec:	0800252d 	.word	0x0800252d
 80021f0:	0800252d 	.word	0x0800252d
 80021f4:	0800252d 	.word	0x0800252d
 80021f8:	0800252d 	.word	0x0800252d
 80021fc:	0800252d 	.word	0x0800252d
 8002200:	0800252d 	.word	0x0800252d
 8002204:	0800252d 	.word	0x0800252d
 8002208:	0800252d 	.word	0x0800252d
 800220c:	0800252d 	.word	0x0800252d
 8002210:	0800252d 	.word	0x0800252d
 8002214:	0800252d 	.word	0x0800252d
 8002218:	0800252d 	.word	0x0800252d
 800221c:	0800252d 	.word	0x0800252d
 8002220:	0800252d 	.word	0x0800252d
 8002224:	080024ed 	.word	0x080024ed
		case 0:  //ADC data screen
			for (int currentIter = 0; currentIter < oversamplingPrescaler;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e01f      	b.n	800226e <main+0x176>
					++currentIter) {
				for (int currentChan = 0; currentChan < activeChannels;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	e010      	b.n	8002256 <main+0x15e>
						++currentChan) {
					summed_data[currentChan] += sensor_data[currentChan];
 8002234:	4a6c      	ldr	r2, [pc, #432]	; (80023e8 <main+0x2f0>)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800223c:	4965      	ldr	r1, [pc, #404]	; (80023d4 <main+0x2dc>)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002244:	4413      	add	r3, r2
 8002246:	b299      	uxth	r1, r3
 8002248:	4a67      	ldr	r2, [pc, #412]	; (80023e8 <main+0x2f0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						++currentChan) {
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	3301      	adds	r3, #1
 8002254:	60bb      	str	r3, [r7, #8]
				for (int currentChan = 0; currentChan < activeChannels;
 8002256:	4b65      	ldr	r3, [pc, #404]	; (80023ec <main+0x2f4>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4293      	cmp	r3, r2
 8002260:	dbe8      	blt.n	8002234 <main+0x13c>
					assert_param(summed_data[currentChan] <= UINT16_MAX);
				}
				HAL_Delay(50);
 8002262:	2032      	movs	r0, #50	; 0x32
 8002264:	f001 fc00 	bl	8003a68 <HAL_Delay>
					++currentIter) {
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3301      	adds	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
			for (int currentIter = 0; currentIter < oversamplingPrescaler;
 800226e:	4b60      	ldr	r3, [pc, #384]	; (80023f0 <main+0x2f8>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4293      	cmp	r3, r2
 8002278:	dbd9      	blt.n	800222e <main+0x136>
			}
			for (int var = 0; var < activeChannels; ++var) {
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	e015      	b.n	80022ac <main+0x1b4>
				averaged_data[var] = summed_data[var] / oversamplingPrescaler;
 8002280:	4a59      	ldr	r2, [pc, #356]	; (80023e8 <main+0x2f0>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002288:	461a      	mov	r2, r3
 800228a:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <main+0x2f8>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002292:	b299      	uxth	r1, r3
 8002294:	4a57      	ldr	r2, [pc, #348]	; (80023f4 <main+0x2fc>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				summed_data[var] = 0;
 800229c:	4a52      	ldr	r2, [pc, #328]	; (80023e8 <main+0x2f0>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2100      	movs	r1, #0
 80022a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int var = 0; var < activeChannels; ++var) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3301      	adds	r3, #1
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	4b4f      	ldr	r3, [pc, #316]	; (80023ec <main+0x2f4>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4293      	cmp	r3, r2
 80022b6:	dbe3      	blt.n	8002280 <main+0x188>
			}
			show_sensor_data(averaged_data, activeChannels);
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <main+0x2f4>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	484d      	ldr	r0, [pc, #308]	; (80023f4 <main+0x2fc>)
 80022c0:	f000 fd48 	bl	8002d54 <show_sensor_data>
			sd_card_update_file("POMIARY.txt", averaged_data);
 80022c4:	494b      	ldr	r1, [pc, #300]	; (80023f4 <main+0x2fc>)
 80022c6:	4846      	ldr	r0, [pc, #280]	; (80023e0 <main+0x2e8>)
 80022c8:	f7ff feb0 	bl	800202c <sd_card_update_file>
			HAL_Delay(1000);
 80022cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022d0:	f001 fbca 	bl	8003a68 <HAL_Delay>
			printf("Sensor data case executed.\n");
 80022d4:	4848      	ldr	r0, [pc, #288]	; (80023f8 <main+0x300>)
 80022d6:	f009 fcd7 	bl	800bc88 <puts>
			fflush(stdout);
 80022da:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <main+0x2d8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f008 fef7 	bl	800b0d4 <fflush>
			break;
 80022e6:	e121      	b.n	800252c <main+0x434>
		case 1:  //main menu screen
			currentItem = (__HAL_TIM_GET_COUNTER(&htim2) >> 1) % menuMaxIndex;
 80022e8:	4b3c      	ldr	r3, [pc, #240]	; (80023dc <main+0x2e4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	085b      	lsrs	r3, r3, #1
 80022f0:	4a42      	ldr	r2, [pc, #264]	; (80023fc <main+0x304>)
 80022f2:	8812      	ldrh	r2, [r2, #0]
 80022f4:	b212      	sxth	r2, r2
 80022f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80022fa:	fb02 f201 	mul.w	r2, r2, r1
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <main+0x308>)
 8002304:	701a      	strb	r2, [r3, #0]
			assert(currentItem <= menuMaxIndex - 1);
 8002306:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <main+0x304>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b21b      	sxth	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	4b3c      	ldr	r3, [pc, #240]	; (8002400 <main+0x308>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	dc06      	bgt.n	8002324 <main+0x22c>
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <main+0x30c>)
 8002318:	4a3b      	ldr	r2, [pc, #236]	; (8002408 <main+0x310>)
 800231a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800231e:	483b      	ldr	r0, [pc, #236]	; (800240c <main+0x314>)
 8002320:	f008 fdf2 	bl	800af08 <__assert_func>
			show_main_menu();
 8002324:	f000 fafc 	bl	8002920 <show_main_menu>
			deselect_item(previousItem);
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <main+0x318>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fea0 	bl	8003072 <deselect_item>
			select_item(currentItem);
 8002332:	4b33      	ldr	r3, [pc, #204]	; (8002400 <main+0x308>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fe72 	bl	8003020 <select_item>
			if (previousItem != currentItem) {
 800233c:	4b34      	ldr	r3, [pc, #208]	; (8002410 <main+0x318>)
 800233e:	781a      	ldrb	r2, [r3, #0]
 8002340:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <main+0x308>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d003      	beq.n	8002350 <main+0x258>
				previousItem = currentItem;
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <main+0x308>)
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	4b30      	ldr	r3, [pc, #192]	; (8002410 <main+0x318>)
 800234e:	701a      	strb	r2, [r3, #0]
			}
			printf("Main menu case executed..\n");
 8002350:	4830      	ldr	r0, [pc, #192]	; (8002414 <main+0x31c>)
 8002352:	f009 fc99 	bl	800bc88 <puts>
			fflush(stdout);
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <main+0x2d8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4618      	mov	r0, r3
 800235e:	f008 feb9 	bl	800b0d4 <fflush>
			break;
 8002362:	e0e3      	b.n	800252c <main+0x434>
		case 11:  //active channels selection screen
			activeChannels = __HAL_TIM_GET_COUNTER(&htim2) >> 1;
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <main+0x2e4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <main+0x2f4>)
 8002370:	701a      	strb	r2, [r3, #0]
			if (activeChannels < 1) {
 8002372:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <main+0x2f4>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <main+0x290>
				activeChannels = 1;
 800237a:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <main+0x2f4>)
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 2);
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <main+0x2e4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2202      	movs	r2, #2
 8002386:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (activeChannels > 8) {
 8002388:	4b18      	ldr	r3, [pc, #96]	; (80023ec <main+0x2f4>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d906      	bls.n	800239e <main+0x2a6>
				activeChannels = 8;
 8002390:	4b16      	ldr	r3, [pc, #88]	; (80023ec <main+0x2f4>)
 8002392:	2208      	movs	r2, #8
 8002394:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 16);
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <main+0x2e4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2210      	movs	r2, #16
 800239c:	625a      	str	r2, [r3, #36]	; 0x24
			}
			set_channels_value(activeChannels, rgb565(200, 200, 200));
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <main+0x2f4>)
 80023a0:	781c      	ldrb	r4, [r3, #0]
 80023a2:	22c8      	movs	r2, #200	; 0xc8
 80023a4:	21c8      	movs	r1, #200	; 0xc8
 80023a6:	20c8      	movs	r0, #200	; 0xc8
 80023a8:	f008 fd7c 	bl	800aea4 <rgb565>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4619      	mov	r1, r3
 80023b0:	4620      	mov	r0, r4
 80023b2:	f000 fbdf 	bl	8002b74 <set_channels_value>
			printf("Active channels case executed..\n");
 80023b6:	4818      	ldr	r0, [pc, #96]	; (8002418 <main+0x320>)
 80023b8:	f009 fc66 	bl	800bc88 <puts>
			fflush(stdout);
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <main+0x2d8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f008 fe86 	bl	800b0d4 <fflush>
			break;
 80023c8:	e0b0      	b.n	800252c <main+0x434>
 80023ca:	bf00      	nop
 80023cc:	0800c70c 	.word	0x0800c70c
 80023d0:	2000003c 	.word	0x2000003c
 80023d4:	2000a240 	.word	0x2000a240
 80023d8:	2000a140 	.word	0x2000a140
 80023dc:	2000a8e8 	.word	0x2000a8e8
 80023e0:	0800c718 	.word	0x0800c718
 80023e4:	2000a0c0 	.word	0x2000a0c0
 80023e8:	2000a52c 	.word	0x2000a52c
 80023ec:	20000004 	.word	0x20000004
 80023f0:	20000005 	.word	0x20000005
 80023f4:	2000a540 	.word	0x2000a540
 80023f8:	0800c724 	.word	0x0800c724
 80023fc:	20000002 	.word	0x20000002
 8002400:	2000a550 	.word	0x2000a550
 8002404:	0800c740 	.word	0x0800c740
 8002408:	0800f9f8 	.word	0x0800f9f8
 800240c:	0800c760 	.word	0x0800c760
 8002410:	2000a250 	.word	0x2000a250
 8002414:	0800c774 	.word	0x0800c774
 8002418:	0800c790 	.word	0x0800c790
		case 12:  //oversampling selection screen
			oversamplingPrescaler = __HAL_TIM_GET_COUNTER(&htim2) >> 1;
 800241c:	4baa      	ldr	r3, [pc, #680]	; (80026c8 <main+0x5d0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	085b      	lsrs	r3, r3, #1
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4ba9      	ldr	r3, [pc, #676]	; (80026cc <main+0x5d4>)
 8002428:	701a      	strb	r2, [r3, #0]
			if (oversamplingPrescaler < 1) {
 800242a:	4ba8      	ldr	r3, [pc, #672]	; (80026cc <main+0x5d4>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <main+0x348>
				oversamplingPrescaler = 1;
 8002432:	4ba6      	ldr	r3, [pc, #664]	; (80026cc <main+0x5d4>)
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 2);
 8002438:	4ba3      	ldr	r3, [pc, #652]	; (80026c8 <main+0x5d0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2202      	movs	r2, #2
 800243e:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (oversamplingPrescaler > 15) {
 8002440:	4ba2      	ldr	r3, [pc, #648]	; (80026cc <main+0x5d4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b0f      	cmp	r3, #15
 8002446:	d906      	bls.n	8002456 <main+0x35e>
				oversamplingPrescaler = 15;
 8002448:	4ba0      	ldr	r3, [pc, #640]	; (80026cc <main+0x5d4>)
 800244a:	220f      	movs	r2, #15
 800244c:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 30); //encoder counts up to 19 so 19*2 is max available value rn
 800244e:	4b9e      	ldr	r3, [pc, #632]	; (80026c8 <main+0x5d0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	221e      	movs	r2, #30
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
			}
			set_oversampling_prescaler(oversamplingPrescaler,
 8002456:	4b9d      	ldr	r3, [pc, #628]	; (80026cc <main+0x5d4>)
 8002458:	781c      	ldrb	r4, [r3, #0]
 800245a:	22dc      	movs	r2, #220	; 0xdc
 800245c:	21dc      	movs	r1, #220	; 0xdc
 800245e:	20dc      	movs	r0, #220	; 0xdc
 8002460:	f008 fd20 	bl	800aea4 <rgb565>
 8002464:	4603      	mov	r3, r0
 8002466:	4619      	mov	r1, r3
 8002468:	4620      	mov	r0, r4
 800246a:	f000 fbe9 	bl	8002c40 <set_oversampling_prescaler>
					rgb565(220, 220, 220));
			printf("Oversampling case executed...\n");
 800246e:	4898      	ldr	r0, [pc, #608]	; (80026d0 <main+0x5d8>)
 8002470:	f009 fc0a 	bl	800bc88 <puts>
			fflush(stdout);
 8002474:	4b97      	ldr	r3, [pc, #604]	; (80026d4 <main+0x5dc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4618      	mov	r0, r3
 800247c:	f008 fe2a 	bl	800b0d4 <fflush>
			break;
 8002480:	e054      	b.n	800252c <main+0x434>
		case 14:
			currentItem = (__HAL_TIM_GET_COUNTER(&htim2) >> 1) % menuMaxIndex;
 8002482:	4b91      	ldr	r3, [pc, #580]	; (80026c8 <main+0x5d0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	4a93      	ldr	r2, [pc, #588]	; (80026d8 <main+0x5e0>)
 800248c:	8812      	ldrh	r2, [r2, #0]
 800248e:	b212      	sxth	r2, r2
 8002490:	fbb3 f1f2 	udiv	r1, r3, r2
 8002494:	fb02 f201 	mul.w	r2, r2, r1
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b8f      	ldr	r3, [pc, #572]	; (80026dc <main+0x5e4>)
 800249e:	701a      	strb	r2, [r3, #0]
			assert(currentItem <= menuMaxIndex - 1);
 80024a0:	4b8d      	ldr	r3, [pc, #564]	; (80026d8 <main+0x5e0>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b8c      	ldr	r3, [pc, #560]	; (80026dc <main+0x5e4>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dc06      	bgt.n	80024be <main+0x3c6>
 80024b0:	4b8b      	ldr	r3, [pc, #556]	; (80026e0 <main+0x5e8>)
 80024b2:	4a8c      	ldr	r2, [pc, #560]	; (80026e4 <main+0x5ec>)
 80024b4:	f240 118b 	movw	r1, #395	; 0x18b
 80024b8:	488b      	ldr	r0, [pc, #556]	; (80026e8 <main+0x5f0>)
 80024ba:	f008 fd25 	bl	800af08 <__assert_func>
			show_misc_menu();
 80024be:	f000 fad5 	bl	8002a6c <show_misc_menu>
			deselect_item(previousItem);
 80024c2:	4b8a      	ldr	r3, [pc, #552]	; (80026ec <main+0x5f4>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 fdd3 	bl	8003072 <deselect_item>
			select_item(currentItem);
 80024cc:	4b83      	ldr	r3, [pc, #524]	; (80026dc <main+0x5e4>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 fda5 	bl	8003020 <select_item>
			if (previousItem != currentItem) {
 80024d6:	4b85      	ldr	r3, [pc, #532]	; (80026ec <main+0x5f4>)
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	4b80      	ldr	r3, [pc, #512]	; (80026dc <main+0x5e4>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d023      	beq.n	800252a <main+0x432>
				previousItem = currentItem;
 80024e2:	4b7e      	ldr	r3, [pc, #504]	; (80026dc <main+0x5e4>)
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	4b81      	ldr	r3, [pc, #516]	; (80026ec <main+0x5f4>)
 80024e8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80024ea:	e01e      	b.n	800252a <main+0x432>
		case 41:
			currentItem = __HAL_TIM_GET_COUNTER(&htim2) >> 1;
 80024ec:	4b76      	ldr	r3, [pc, #472]	; (80026c8 <main+0x5d0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	085b      	lsrs	r3, r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b79      	ldr	r3, [pc, #484]	; (80026dc <main+0x5e4>)
 80024f8:	701a      	strb	r2, [r3, #0]
			datetime[datetimeIndex] = currentItem % 10;
 80024fa:	4b78      	ldr	r3, [pc, #480]	; (80026dc <main+0x5e4>)
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	4b7c      	ldr	r3, [pc, #496]	; (80026f0 <main+0x5f8>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	4b7b      	ldr	r3, [pc, #492]	; (80026f4 <main+0x5fc>)
 8002506:	fba3 1302 	umull	r1, r3, r3, r2
 800250a:	08d9      	lsrs	r1, r3, #3
 800250c:	460b      	mov	r3, r1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b77      	ldr	r3, [pc, #476]	; (80026f8 <main+0x600>)
 800251a:	541a      	strb	r2, [r3, r0]
			set_datetime_screen(datetimeIndex, datetime);
 800251c:	4b74      	ldr	r3, [pc, #464]	; (80026f0 <main+0x5f8>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4975      	ldr	r1, [pc, #468]	; (80026f8 <main+0x600>)
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fcaa 	bl	8002e7c <set_datetime_screen>
			break;
 8002528:	e000      	b.n	800252c <main+0x434>
			break;
 800252a:	bf00      	nop
		}
		//************************CHANGING SCREENS************************
		if (encoderBtnFlag) {
 800252c:	4b73      	ldr	r3, [pc, #460]	; (80026fc <main+0x604>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8112 	beq.w	800275c <main+0x664>
			encoderBtnFlag = 0;
 8002538:	4b70      	ldr	r3, [pc, #448]	; (80026fc <main+0x604>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
			switch (activeScreen) {
 800253e:	4b70      	ldr	r3, [pc, #448]	; (8002700 <main+0x608>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b29      	cmp	r3, #41	; 0x29
 8002546:	f200 80ff 	bhi.w	8002748 <main+0x650>
 800254a:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <main+0x458>)
 800254c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002550:	080025f9 	.word	0x080025f9
 8002554:	0800260f 	.word	0x0800260f
 8002558:	08002749 	.word	0x08002749
 800255c:	08002749 	.word	0x08002749
 8002560:	08002749 	.word	0x08002749
 8002564:	08002749 	.word	0x08002749
 8002568:	08002749 	.word	0x08002749
 800256c:	08002749 	.word	0x08002749
 8002570:	08002749 	.word	0x08002749
 8002574:	08002749 	.word	0x08002749
 8002578:	08002749 	.word	0x08002749
 800257c:	0800267f 	.word	0x0800267f
 8002580:	0800268f 	.word	0x0800268f
 8002584:	08002749 	.word	0x08002749
 8002588:	0800269f 	.word	0x0800269f
 800258c:	08002749 	.word	0x08002749
 8002590:	08002749 	.word	0x08002749
 8002594:	08002749 	.word	0x08002749
 8002598:	08002749 	.word	0x08002749
 800259c:	08002749 	.word	0x08002749
 80025a0:	08002749 	.word	0x08002749
 80025a4:	08002749 	.word	0x08002749
 80025a8:	08002749 	.word	0x08002749
 80025ac:	08002749 	.word	0x08002749
 80025b0:	08002749 	.word	0x08002749
 80025b4:	08002749 	.word	0x08002749
 80025b8:	08002749 	.word	0x08002749
 80025bc:	08002749 	.word	0x08002749
 80025c0:	08002749 	.word	0x08002749
 80025c4:	08002749 	.word	0x08002749
 80025c8:	08002749 	.word	0x08002749
 80025cc:	08002749 	.word	0x08002749
 80025d0:	08002749 	.word	0x08002749
 80025d4:	08002749 	.word	0x08002749
 80025d8:	08002749 	.word	0x08002749
 80025dc:	08002749 	.word	0x08002749
 80025e0:	08002749 	.word	0x08002749
 80025e4:	08002749 	.word	0x08002749
 80025e8:	08002749 	.word	0x08002749
 80025ec:	08002749 	.word	0x08002749
 80025f0:	08002749 	.word	0x08002749
 80025f4:	08002733 	.word	0x08002733
			case 0: //sensor to menu
				__HAL_TIM_SET_COUNTER(&htim2, 0);
 80025f8:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <main+0x5d0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2200      	movs	r2, #0
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 8002600:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <main+0x608>)
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
				menuMaxIndex = 5;
 8002606:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <main+0x5e0>)
 8002608:	2205      	movs	r2, #5
 800260a:	801a      	strh	r2, [r3, #0]
				break;
 800260c:	e09d      	b.n	800274a <main+0x652>
			case 1:	//menu to ...
				//menu to sensor
				if (currentItem == (menuMaxIndex - 1)) {
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <main+0x5e4>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <main+0x5e0>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	b21b      	sxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	429a      	cmp	r2, r3
 800261e:	d103      	bne.n	8002628 <main+0x530>
					activeScreen = 0;
 8002620:	4b37      	ldr	r3, [pc, #220]	; (8002700 <main+0x608>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
					break;
 8002626:	e090      	b.n	800274a <main+0x652>
				}
				//menu to activechannels
				else if (currentItem == 0) {
 8002628:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <main+0x5e4>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <main+0x54c>
					__HAL_TIM_GET_COUNTER(&htim2) = activeChannels * 2; //you can't assign value to shifted value, hence no >> is used, silly me tried..
 8002630:	4b34      	ldr	r3, [pc, #208]	; (8002704 <main+0x60c>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	005a      	lsls	r2, r3, #1
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <main+0x5d0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 11;
 800263c:	4b30      	ldr	r3, [pc, #192]	; (8002700 <main+0x608>)
 800263e:	220b      	movs	r2, #11
 8002640:	701a      	strb	r2, [r3, #0]
					break;
 8002642:	e082      	b.n	800274a <main+0x652>
				} else if (currentItem == 1) {
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <main+0x5e4>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d109      	bne.n	8002660 <main+0x568>
					__HAL_TIM_GET_COUNTER(&htim2) = oversamplingPrescaler * 2; //you can't assign value to shifted value, hence no >> is used, silly me tried..
 800264c:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <main+0x5d4>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	005a      	lsls	r2, r3, #1
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <main+0x5d0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 12;
 8002658:	4b29      	ldr	r3, [pc, #164]	; (8002700 <main+0x608>)
 800265a:	220c      	movs	r2, #12
 800265c:	701a      	strb	r2, [r3, #0]
					break;
 800265e:	e074      	b.n	800274a <main+0x652>
				} else if (currentItem == 3) {
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <main+0x5e4>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d10a      	bne.n	800267e <main+0x586>
					activeScreen = 14;
 8002668:	4b25      	ldr	r3, [pc, #148]	; (8002700 <main+0x608>)
 800266a:	220e      	movs	r2, #14
 800266c:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_GET_COUNTER(&htim2) = 0;
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <main+0x5d0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	625a      	str	r2, [r3, #36]	; 0x24
					menuMaxIndex = 3;
 8002676:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <main+0x5e0>)
 8002678:	2203      	movs	r2, #3
 800267a:	801a      	strh	r2, [r3, #0]
					break;
 800267c:	e065      	b.n	800274a <main+0x652>
				}
			case 11: //channels to main menu
				__HAL_TIM_GET_COUNTER(&htim2) = 0;
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <main+0x5d0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2200      	movs	r2, #0
 8002684:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <main+0x608>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
				break;
 800268c:	e05d      	b.n	800274a <main+0x652>
			case 12: //sampling to main menu
				__HAL_TIM_GET_COUNTER(&htim2) = 0;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <main+0x5d0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2200      	movs	r2, #0
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <main+0x608>)
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
				break;
 800269c:	e055      	b.n	800274a <main+0x652>
			case 14: //misc menu to main menu
				if (currentItem == (menuMaxIndex - 1)) {
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <main+0x5e4>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <main+0x5e0>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d12b      	bne.n	8002708 <main+0x610>
					menuMaxIndex = 5;
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <main+0x5e0>)
 80026b2:	2205      	movs	r2, #5
 80026b4:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_GET_COUNTER(&htim2) = 0;
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <main+0x5d0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2200      	movs	r2, #0
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 1;
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <main+0x608>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
					break;
 80026c4:	e041      	b.n	800274a <main+0x652>
 80026c6:	bf00      	nop
 80026c8:	2000a8e8 	.word	0x2000a8e8
 80026cc:	20000005 	.word	0x20000005
 80026d0:	0800c7b0 	.word	0x0800c7b0
 80026d4:	2000003c 	.word	0x2000003c
 80026d8:	20000002 	.word	0x20000002
 80026dc:	2000a550 	.word	0x2000a550
 80026e0:	0800c740 	.word	0x0800c740
 80026e4:	0800f9f8 	.word	0x0800f9f8
 80026e8:	0800c760 	.word	0x0800c760
 80026ec:	2000a250 	.word	0x2000a250
 80026f0:	2000a252 	.word	0x2000a252
 80026f4:	cccccccd 	.word	0xcccccccd
 80026f8:	20000008 	.word	0x20000008
 80026fc:	2000a251 	.word	0x2000a251
 8002700:	2000a0c0 	.word	0x2000a0c0
 8002704:	20000004 	.word	0x20000004
				}
				if (currentItem == 0) {
 8002708:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <main+0x6bc>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d110      	bne.n	8002732 <main+0x63a>
					datetimeIndex = 0;
 8002710:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <main+0x6c0>)
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_GET_COUNTER(&htim2) = 0;
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <main+0x6c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2200      	movs	r2, #0
 800271c:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 41; //switch to datetime screen
 800271e:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <main+0x6c8>)
 8002720:	2229      	movs	r2, #41	; 0x29
 8002722:	701a      	strb	r2, [r3, #0]
					break;
 8002724:	e011      	b.n	800274a <main+0x652>
				}
			case 41: //set datetime to misc menu
				//iterate over each symbol 2021-12-20 17:56 - 12 symbols to iterate through
				while (datetimeIndex >= 12){
					activeScreen = 14;
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <main+0x6c8>)
 8002728:	220e      	movs	r2, #14
 800272a:	701a      	strb	r2, [r3, #0]
					datetimeIndex = 0;
 800272c:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <main+0x6c0>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
				while (datetimeIndex >= 12){
 8002732:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <main+0x6c0>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b0b      	cmp	r3, #11
 8002738:	d8f5      	bhi.n	8002726 <main+0x62e>
				}
				datetimeIndex++;
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <main+0x6c0>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <main+0x6c0>)
 8002744:	701a      	strb	r2, [r3, #0]
				break;
 8002746:	e000      	b.n	800274a <main+0x652>
			default:
				break;
 8002748:	bf00      	nop
			}
			printf("Button interrupt executed....\n");
 800274a:	481e      	ldr	r0, [pc, #120]	; (80027c4 <main+0x6cc>)
 800274c:	f009 fa9c 	bl	800bc88 <puts>
			fflush(stdout);
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <main+0x6d0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	4618      	mov	r0, r3
 8002758:	f008 fcbc 	bl	800b0d4 <fflush>
		}

		snprintf(debug_text, 25, "MENU:%u | active:%d", currentItem,
 800275c:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <main+0x6bc>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <main+0x6c8>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	4613      	mov	r3, r2
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <main+0x6d4>)
 800276e:	2119      	movs	r1, #25
 8002770:	4817      	ldr	r0, [pc, #92]	; (80027d0 <main+0x6d8>)
 8002772:	f009 faa1 	bl	800bcb8 <sniprintf>
				activeScreen);
		hagl_put_text(debug_text, 10, 145, rgb565(245, 245, 255), font6x9);
 8002776:	22ff      	movs	r2, #255	; 0xff
 8002778:	21f5      	movs	r1, #245	; 0xf5
 800277a:	20f5      	movs	r0, #245	; 0xf5
 800277c:	f008 fb92 	bl	800aea4 <rgb565>
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <main+0x6dc>)
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	2291      	movs	r2, #145	; 0x91
 800278c:	210a      	movs	r1, #10
 800278e:	4810      	ldr	r0, [pc, #64]	; (80027d0 <main+0x6d8>)
 8002790:	f008 f93e 	bl	800aa10 <hagl_put_text>
		lcd_copy();
 8002794:	f7ff fb32 	bl	8001dfc <lcd_copy>
		printf("Main while loop executed.............................\n");
 8002798:	480f      	ldr	r0, [pc, #60]	; (80027d8 <main+0x6e0>)
 800279a:	f009 fa75 	bl	800bc88 <puts>
		fflush(stdout);
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <main+0x6d0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f008 fc95 	bl	800b0d4 <fflush>
		HAL_Delay(100);
 80027aa:	2064      	movs	r0, #100	; 0x64
 80027ac:	f001 f95c 	bl	8003a68 <HAL_Delay>
		switch (activeScreen) {
 80027b0:	e4dc      	b.n	800216c <main+0x74>
 80027b2:	bf00      	nop
 80027b4:	2000a550 	.word	0x2000a550
 80027b8:	2000a252 	.word	0x2000a252
 80027bc:	2000a8e8 	.word	0x2000a8e8
 80027c0:	2000a0c0 	.word	0x2000a0c0
 80027c4:	0800c7d0 	.word	0x0800c7d0
 80027c8:	2000003c 	.word	0x2000003c
 80027cc:	0800c7f0 	.word	0x0800c7f0
 80027d0:	2000a788 	.word	0x2000a788
 80027d4:	0800ca40 	.word	0x0800ca40
 80027d8:	0800c804 	.word	0x0800c804

080027dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b094      	sub	sp, #80	; 0x50
 80027e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027e2:	f107 0320 	add.w	r3, r7, #32
 80027e6:	2230      	movs	r2, #48	; 0x30
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f008 fe26 	bl	800b43c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	4b29      	ldr	r3, [pc, #164]	; (80028ac <SystemClock_Config+0xd0>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	4a28      	ldr	r2, [pc, #160]	; (80028ac <SystemClock_Config+0xd0>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280e:	6413      	str	r3, [r2, #64]	; 0x40
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <SystemClock_Config+0xd0>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800281c:	2300      	movs	r3, #0
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <SystemClock_Config+0xd4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002828:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <SystemClock_Config+0xd4>)
 800282a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <SystemClock_Config+0xd4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800283c:	230a      	movs	r3, #10
 800283e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002840:	2301      	movs	r3, #1
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002844:	2310      	movs	r3, #16
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002848:	2301      	movs	r3, #1
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800284c:	2302      	movs	r3, #2
 800284e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002850:	2300      	movs	r3, #0
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002854:	2308      	movs	r3, #8
 8002856:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8002858:	2354      	movs	r3, #84	; 0x54
 800285a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800285c:	2302      	movs	r3, #2
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002860:	2304      	movs	r3, #4
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002864:	f107 0320 	add.w	r3, r7, #32
 8002868:	4618      	mov	r0, r3
 800286a:	f002 fca7 	bl	80051bc <HAL_RCC_OscConfig>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <SystemClock_Config+0x9c>
		Error_Handler();
 8002874:	f000 f84e 	bl	8002914 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002878:	230f      	movs	r3, #15
 800287a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800287c:	2302      	movs	r3, #2
 800287e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002888:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800288e:	f107 030c 	add.w	r3, r7, #12
 8002892:	2102      	movs	r1, #2
 8002894:	4618      	mov	r0, r3
 8002896:	f002 ff09 	bl	80056ac <HAL_RCC_ClockConfig>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <SystemClock_Config+0xc8>
		Error_Handler();
 80028a0:	f000 f838 	bl	8002914 <Error_Handler>
	}
}
 80028a4:	bf00      	nop
 80028a6:	3750      	adds	r7, #80	; 0x50
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40007000 	.word	0x40007000

080028b4 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <HAL_SPI_TxCpltCallback+0x1c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d101      	bne.n	80028c8 <HAL_SPI_TxCpltCallback+0x14>
		lcd_transfer_done();
 80028c4:	f7ff fac0 	bl	8001e48 <lcd_transfer_done>
	}
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	2000a82c 	.word	0x2000a82c

080028d4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENC_BTN_Pin) {
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e4:	d10e      	bne.n	8002904 <HAL_GPIO_EXTI_Callback+0x30>
		HAL_Delay(50); //basic debounce
 80028e6:	2032      	movs	r0, #50	; 0x32
 80028e8:	f001 f8be 	bl	8003a68 <HAL_Delay>
		while (HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)
 80028ec:	bf00      	nop
 80028ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028f2:	4806      	ldr	r0, [pc, #24]	; (800290c <HAL_GPIO_EXTI_Callback+0x38>)
 80028f4:	f002 fad4 	bl	8004ea0 <HAL_GPIO_ReadPin>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f7      	beq.n	80028ee <HAL_GPIO_EXTI_Callback+0x1a>
				== GPIO_PIN_RESET) {

		}
		encoderBtnFlag = 1;
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
	}
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40020400 	.word	0x40020400
 8002910:	2000a251 	.word	0x2000a251

08002914 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002918:	b672      	cpsid	i
}
 800291a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800291c:	e7fe      	b.n	800291c <Error_Handler+0x8>
	...

08002920 <show_main_menu>:
static uint16_t ch_buffer[4];
static uint16_t os_buffer[4];
static uint16_t datetime_buffer[20];
int status = 0;

void show_main_menu() {
 8002920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002924:	b085      	sub	sp, #20
 8002926:	af02      	add	r7, sp, #8
	hagl_clear_screen();
 8002928:	f008 f8f8 	bl	800ab1c <hagl_clear_screen>

	for (int i = 0; i < 5; ++i) {
 800292c:	2300      	movs	r3, #0
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	e028      	b.n	8002984 <show_main_menu+0x64>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	b21d      	sxth	r5, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	b21e      	sxth	r6, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	b29b      	uxth	r3, r3
 800293e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002942:	b29b      	uxth	r3, r3
 8002944:	fa0f f883 	sxth.w	r8, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	b29b      	uxth	r3, r3
 800294c:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002950:	b29b      	uxth	r3, r3
 8002952:	fa0f f983 	sxth.w	r9, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f1c3 0305 	rsb	r3, r3, #5
 800295e:	b29b      	uxth	r3, r3
 8002960:	b21c      	sxth	r4, r3
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	20ff      	movs	r0, #255	; 0xff
 8002968:	f008 fa9c 	bl	800aea4 <rgb565>
 800296c:	4603      	mov	r3, r0
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	9400      	str	r4, [sp, #0]
 8002972:	464b      	mov	r3, r9
 8002974:	4642      	mov	r2, r8
 8002976:	4631      	mov	r1, r6
 8002978:	4628      	mov	r0, r5
 800297a:	f008 f8f9 	bl	800ab70 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3301      	adds	r3, #1
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b04      	cmp	r3, #4
 8002988:	ddd3      	ble.n	8002932 <show_main_menu+0x12>
				rgb565(255, 0, 0));
	}
	hagl_put_text("USTAWIENIA", 10, 10, rgb565(255, 0, 0), font6x9);
 800298a:	2200      	movs	r2, #0
 800298c:	2100      	movs	r1, #0
 800298e:	20ff      	movs	r0, #255	; 0xff
 8002990:	f008 fa88 	bl	800aea4 <rgb565>
 8002994:	4603      	mov	r3, r0
 8002996:	461a      	mov	r2, r3
 8002998:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <show_main_menu+0x12c>)
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	220a      	movs	r2, #10
 80029a0:	210a      	movs	r1, #10
 80029a2:	482b      	ldr	r0, [pc, #172]	; (8002a50 <show_main_menu+0x130>)
 80029a4:	f008 f834 	bl	800aa10 <hagl_put_text>
	hagl_put_text("Ilosc kanalow:", 10, 30, rgb565(0, 102, 204), font5x7);
 80029a8:	22cc      	movs	r2, #204	; 0xcc
 80029aa:	2166      	movs	r1, #102	; 0x66
 80029ac:	2000      	movs	r0, #0
 80029ae:	f008 fa79 	bl	800aea4 <rgb565>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <show_main_menu+0x134>)
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	4613      	mov	r3, r2
 80029bc:	221e      	movs	r2, #30
 80029be:	210a      	movs	r1, #10
 80029c0:	4825      	ldr	r0, [pc, #148]	; (8002a58 <show_main_menu+0x138>)
 80029c2:	f008 f825 	bl	800aa10 <hagl_put_text>
	hagl_put_text("Oversampling:", 10, 50, rgb565(0, 102, 204), font5x7);
 80029c6:	22cc      	movs	r2, #204	; 0xcc
 80029c8:	2166      	movs	r1, #102	; 0x66
 80029ca:	2000      	movs	r0, #0
 80029cc:	f008 fa6a 	bl	800aea4 <rgb565>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461a      	mov	r2, r3
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <show_main_menu+0x134>)
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	2232      	movs	r2, #50	; 0x32
 80029dc:	210a      	movs	r1, #10
 80029de:	481f      	ldr	r0, [pc, #124]	; (8002a5c <show_main_menu+0x13c>)
 80029e0:	f008 f816 	bl	800aa10 <hagl_put_text>
	hagl_put_text("Kalibracja", 10, 70, rgb565(0, 102, 204), font5x7);
 80029e4:	22cc      	movs	r2, #204	; 0xcc
 80029e6:	2166      	movs	r1, #102	; 0x66
 80029e8:	2000      	movs	r0, #0
 80029ea:	f008 fa5b 	bl	800aea4 <rgb565>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <show_main_menu+0x134>)
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	2246      	movs	r2, #70	; 0x46
 80029fa:	210a      	movs	r1, #10
 80029fc:	4818      	ldr	r0, [pc, #96]	; (8002a60 <show_main_menu+0x140>)
 80029fe:	f008 f807 	bl	800aa10 <hagl_put_text>
	hagl_put_text("Inne", 10, 90, rgb565(0, 102, 204), font5x7);
 8002a02:	22cc      	movs	r2, #204	; 0xcc
 8002a04:	2166      	movs	r1, #102	; 0x66
 8002a06:	2000      	movs	r0, #0
 8002a08:	f008 fa4c 	bl	800aea4 <rgb565>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <show_main_menu+0x134>)
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	225a      	movs	r2, #90	; 0x5a
 8002a18:	210a      	movs	r1, #10
 8002a1a:	4812      	ldr	r0, [pc, #72]	; (8002a64 <show_main_menu+0x144>)
 8002a1c:	f007 fff8 	bl	800aa10 <hagl_put_text>
	hagl_put_text("Powrot", 10, 110, rgb565(102, 255, 102), font5x7);
 8002a20:	2266      	movs	r2, #102	; 0x66
 8002a22:	21ff      	movs	r1, #255	; 0xff
 8002a24:	2066      	movs	r0, #102	; 0x66
 8002a26:	f008 fa3d 	bl	800aea4 <rgb565>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <show_main_menu+0x134>)
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	4613      	mov	r3, r2
 8002a34:	226e      	movs	r2, #110	; 0x6e
 8002a36:	210a      	movs	r1, #10
 8002a38:	480b      	ldr	r0, [pc, #44]	; (8002a68 <show_main_menu+0x148>)
 8002a3a:	f007 ffe9 	bl	800aa10 <hagl_put_text>
	lcd_copy();
 8002a3e:	f7ff f9dd 	bl	8001dfc <lcd_copy>
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a4c:	0800fa00 	.word	0x0800fa00
 8002a50:	0800c83c 	.word	0x0800c83c
 8002a54:	080129b8 	.word	0x080129b8
 8002a58:	0800c848 	.word	0x0800c848
 8002a5c:	0800c858 	.word	0x0800c858
 8002a60:	0800c868 	.word	0x0800c868
 8002a64:	0800c874 	.word	0x0800c874
 8002a68:	0800c87c 	.word	0x0800c87c

08002a6c <show_misc_menu>:

void show_misc_menu() {
 8002a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a70:	b085      	sub	sp, #20
 8002a72:	af02      	add	r7, sp, #8
	hagl_clear_screen();
 8002a74:	f008 f852 	bl	800ab1c <hagl_clear_screen>

	for (int i = 0; i < 5; ++i) {
 8002a78:	2300      	movs	r3, #0
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	e028      	b.n	8002ad0 <show_misc_menu+0x64>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	b21d      	sxth	r5, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	b21e      	sxth	r6, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	fa0f f883 	sxth.w	r8, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	fa0f f983 	sxth.w	r9, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f1c3 0305 	rsb	r3, r3, #5
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	b21c      	sxth	r4, r3
 8002aae:	220a      	movs	r2, #10
 8002ab0:	21c3      	movs	r1, #195	; 0xc3
 8002ab2:	2060      	movs	r0, #96	; 0x60
 8002ab4:	f008 f9f6 	bl	800aea4 <rgb565>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	9400      	str	r4, [sp, #0]
 8002abe:	464b      	mov	r3, r9
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	4631      	mov	r1, r6
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f008 f853 	bl	800ab70 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3301      	adds	r3, #1
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	ddd3      	ble.n	8002a7e <show_misc_menu+0x12>
				rgb565(96, 195, 10));
	}
	hagl_put_text("INNE", 10, 10, rgb565(255, 0, 0), font6x9);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	20ff      	movs	r0, #255	; 0xff
 8002adc:	f008 f9e2 	bl	800aea4 <rgb565>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <show_misc_menu+0xf0>)
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	220a      	movs	r2, #10
 8002aec:	210a      	movs	r1, #10
 8002aee:	481c      	ldr	r0, [pc, #112]	; (8002b60 <show_misc_menu+0xf4>)
 8002af0:	f007 ff8e 	bl	800aa10 <hagl_put_text>
	hagl_put_text("Data/Godzina", 10, 30, rgb565(0, 102, 204), font5x7);
 8002af4:	22cc      	movs	r2, #204	; 0xcc
 8002af6:	2166      	movs	r1, #102	; 0x66
 8002af8:	2000      	movs	r0, #0
 8002afa:	f008 f9d3 	bl	800aea4 <rgb565>
 8002afe:	4603      	mov	r3, r0
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <show_misc_menu+0xf8>)
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	221e      	movs	r2, #30
 8002b0a:	210a      	movs	r1, #10
 8002b0c:	4816      	ldr	r0, [pc, #88]	; (8002b68 <show_misc_menu+0xfc>)
 8002b0e:	f007 ff7f 	bl	800aa10 <hagl_put_text>
	hagl_put_text("Status karty SD", 10, 50, rgb565(0, 102, 204), font5x7);
 8002b12:	22cc      	movs	r2, #204	; 0xcc
 8002b14:	2166      	movs	r1, #102	; 0x66
 8002b16:	2000      	movs	r0, #0
 8002b18:	f008 f9c4 	bl	800aea4 <rgb565>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <show_misc_menu+0xf8>)
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	2232      	movs	r2, #50	; 0x32
 8002b28:	210a      	movs	r1, #10
 8002b2a:	4810      	ldr	r0, [pc, #64]	; (8002b6c <show_misc_menu+0x100>)
 8002b2c:	f007 ff70 	bl	800aa10 <hagl_put_text>
	hagl_put_text("Powrot", 10, 70, rgb565(102, 255, 102), font5x7);
 8002b30:	2266      	movs	r2, #102	; 0x66
 8002b32:	21ff      	movs	r1, #255	; 0xff
 8002b34:	2066      	movs	r0, #102	; 0x66
 8002b36:	f008 f9b5 	bl	800aea4 <rgb565>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <show_misc_menu+0xf8>)
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	2246      	movs	r2, #70	; 0x46
 8002b46:	210a      	movs	r1, #10
 8002b48:	4809      	ldr	r0, [pc, #36]	; (8002b70 <show_misc_menu+0x104>)
 8002b4a:	f007 ff61 	bl	800aa10 <hagl_put_text>
	lcd_copy();
 8002b4e:	f7ff f955 	bl	8001dfc <lcd_copy>
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b5c:	0800fa00 	.word	0x0800fa00
 8002b60:	0800c884 	.word	0x0800c884
 8002b64:	080129b8 	.word	0x080129b8
 8002b68:	0800c88c 	.word	0x0800c88c
 8002b6c:	0800c89c 	.word	0x0800c89c
 8002b70:	0800c87c 	.word	0x0800c87c

08002b74 <set_channels_value>:

void set_channels_value(uint8_t activeChannels, uint16_t color) {
 8002b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b78:	b087      	sub	sp, #28
 8002b7a:	af02      	add	r7, sp, #8
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	460a      	mov	r2, r1
 8002b80:	71fb      	strb	r3, [r7, #7]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80bb      	strh	r3, [r7, #4]
	hagl_clear_screen();
 8002b86:	f007 ffc9 	bl	800ab1c <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	e028      	b.n	8002be2 <set_channels_value+0x6e>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	b21d      	sxth	r5, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	b21e      	sxth	r6, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	fa0f f883 	sxth.w	r8, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	fa0f f983 	sxth.w	r9, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f1c3 0305 	rsb	r3, r3, #5
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	b21c      	sxth	r4, r3
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	20ff      	movs	r0, #255	; 0xff
 8002bc6:	f008 f96d 	bl	800aea4 <rgb565>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	9400      	str	r4, [sp, #0]
 8002bd0:	464b      	mov	r3, r9
 8002bd2:	4642      	mov	r2, r8
 8002bd4:	4631      	mov	r1, r6
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	f007 ffca 	bl	800ab70 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3301      	adds	r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	ddd3      	ble.n	8002b90 <set_channels_value+0x1c>
				rgb565(255, 0, 0));
	}
	hagl_put_text("AKTYWNE KANALY", 20, 10, rgb565(255, 0, 0), font6x9);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2100      	movs	r1, #0
 8002bec:	20ff      	movs	r0, #255	; 0xff
 8002bee:	f008 f959 	bl	800aea4 <rgb565>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <set_channels_value+0xbc>)
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	220a      	movs	r2, #10
 8002bfe:	2114      	movs	r1, #20
 8002c00:	480c      	ldr	r0, [pc, #48]	; (8002c34 <set_channels_value+0xc0>)
 8002c02:	f007 ff05 	bl	800aa10 <hagl_put_text>
	snprintf((char*) ch_buffer, 4, "%u", activeChannels);
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <set_channels_value+0xc4>)
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	480b      	ldr	r0, [pc, #44]	; (8002c3c <set_channels_value+0xc8>)
 8002c0e:	f009 f853 	bl	800bcb8 <sniprintf>
	hagl_put_text((char*) ch_buffer, 60, 50, color, font6x9);
 8002c12:	88bb      	ldrh	r3, [r7, #4]
 8002c14:	4a06      	ldr	r2, [pc, #24]	; (8002c30 <set_channels_value+0xbc>)
 8002c16:	9200      	str	r2, [sp, #0]
 8002c18:	2232      	movs	r2, #50	; 0x32
 8002c1a:	213c      	movs	r1, #60	; 0x3c
 8002c1c:	4807      	ldr	r0, [pc, #28]	; (8002c3c <set_channels_value+0xc8>)
 8002c1e:	f007 fef7 	bl	800aa10 <hagl_put_text>
	lcd_copy();
 8002c22:	f7ff f8eb 	bl	8001dfc <lcd_copy>
}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c30:	0800fa00 	.word	0x0800fa00
 8002c34:	0800c8ac 	.word	0x0800c8ac
 8002c38:	0800c8bc 	.word	0x0800c8bc
 8002c3c:	2000a0c4 	.word	0x2000a0c4

08002c40 <set_oversampling_prescaler>:

void set_oversampling_prescaler(uint8_t oversamplingPrescaler, uint16_t color) {
 8002c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c44:	b087      	sub	sp, #28
 8002c46:	af02      	add	r7, sp, #8
 8002c48:	4603      	mov	r3, r0
 8002c4a:	460a      	mov	r2, r1
 8002c4c:	71fb      	strb	r3, [r7, #7]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80bb      	strh	r3, [r7, #4]
	hagl_clear_screen();
 8002c52:	f007 ff63 	bl	800ab1c <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	e028      	b.n	8002cae <set_oversampling_prescaler+0x6e>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	b21d      	sxth	r5, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	b21e      	sxth	r6, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	fa0f f883 	sxth.w	r8, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	fa0f f983 	sxth.w	r9, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f1c3 0305 	rsb	r3, r3, #5
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b21c      	sxth	r4, r3
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	20ff      	movs	r0, #255	; 0xff
 8002c92:	f008 f907 	bl	800aea4 <rgb565>
 8002c96:	4603      	mov	r3, r0
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	9400      	str	r4, [sp, #0]
 8002c9c:	464b      	mov	r3, r9
 8002c9e:	4642      	mov	r2, r8
 8002ca0:	4631      	mov	r1, r6
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f007 ff64 	bl	800ab70 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3301      	adds	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	ddd3      	ble.n	8002c5c <set_oversampling_prescaler+0x1c>
				rgb565(255, 0, 0));
	}
	hagl_put_text("OVERSAMPLING", 30, 10, rgb565(255, 0, 0), font6x9);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	20ff      	movs	r0, #255	; 0xff
 8002cba:	f008 f8f3 	bl	800aea4 <rgb565>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <set_oversampling_prescaler+0xf8>)
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	220a      	movs	r2, #10
 8002cca:	211e      	movs	r1, #30
 8002ccc:	481b      	ldr	r0, [pc, #108]	; (8002d3c <set_oversampling_prescaler+0xfc>)
 8002cce:	f007 fe9f 	bl	800aa10 <hagl_put_text>
	hagl_put_text("Wybierz z ilu probek ", 15, 30, rgb565(0, 102, 204),
 8002cd2:	22cc      	movs	r2, #204	; 0xcc
 8002cd4:	2166      	movs	r1, #102	; 0x66
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f008 f8e4 	bl	800aea4 <rgb565>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <set_oversampling_prescaler+0x100>)
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	221e      	movs	r2, #30
 8002ce8:	210f      	movs	r1, #15
 8002cea:	4816      	ldr	r0, [pc, #88]	; (8002d44 <set_oversampling_prescaler+0x104>)
 8002cec:	f007 fe90 	bl	800aa10 <hagl_put_text>
			font5x7);
	hagl_put_text("  usredniac pomiar", 15, 40, rgb565(0, 102, 204), font5x7);
 8002cf0:	22cc      	movs	r2, #204	; 0xcc
 8002cf2:	2166      	movs	r1, #102	; 0x66
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f008 f8d5 	bl	800aea4 <rgb565>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <set_oversampling_prescaler+0x100>)
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	2228      	movs	r2, #40	; 0x28
 8002d06:	210f      	movs	r1, #15
 8002d08:	480f      	ldr	r0, [pc, #60]	; (8002d48 <set_oversampling_prescaler+0x108>)
 8002d0a:	f007 fe81 	bl	800aa10 <hagl_put_text>
	snprintf((char*) os_buffer, 4, "%u", oversamplingPrescaler);
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <set_oversampling_prescaler+0x10c>)
 8002d12:	2104      	movs	r1, #4
 8002d14:	480e      	ldr	r0, [pc, #56]	; (8002d50 <set_oversampling_prescaler+0x110>)
 8002d16:	f008 ffcf 	bl	800bcb8 <sniprintf>
	hagl_put_text((char*) os_buffer, 60, 70, color, font6x9);
 8002d1a:	88bb      	ldrh	r3, [r7, #4]
 8002d1c:	4a06      	ldr	r2, [pc, #24]	; (8002d38 <set_oversampling_prescaler+0xf8>)
 8002d1e:	9200      	str	r2, [sp, #0]
 8002d20:	2246      	movs	r2, #70	; 0x46
 8002d22:	213c      	movs	r1, #60	; 0x3c
 8002d24:	480a      	ldr	r0, [pc, #40]	; (8002d50 <set_oversampling_prescaler+0x110>)
 8002d26:	f007 fe73 	bl	800aa10 <hagl_put_text>
	lcd_copy();
 8002d2a:	f7ff f867 	bl	8001dfc <lcd_copy>
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d38:	0800fa00 	.word	0x0800fa00
 8002d3c:	0800c8c0 	.word	0x0800c8c0
 8002d40:	080129b8 	.word	0x080129b8
 8002d44:	0800c8d0 	.word	0x0800c8d0
 8002d48:	0800c8e8 	.word	0x0800c8e8
 8002d4c:	0800c8bc 	.word	0x0800c8bc
 8002d50:	2000a0cc 	.word	0x2000a0cc

08002d54 <show_sensor_data>:

void show_sensor_data(uint16_t sensor_data[], uint8_t activeChannels) {
 8002d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d58:	b087      	sub	sp, #28
 8002d5a:	af02      	add	r7, sp, #8
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	70fb      	strb	r3, [r7, #3]
	hagl_clear_screen();
 8002d62:	f007 fedb 	bl	800ab1c <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	e028      	b.n	8002dbe <show_sensor_data+0x6a>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	b21d      	sxth	r5, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	b21e      	sxth	r6, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	fa0f f883 	sxth.w	r8, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	fa0f f983 	sxth.w	r9, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f1c3 0305 	rsb	r3, r3, #5
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	b21c      	sxth	r4, r3
 8002d9c:	2266      	movs	r2, #102	; 0x66
 8002d9e:	2133      	movs	r1, #51	; 0x33
 8002da0:	2000      	movs	r0, #0
 8002da2:	f008 f87f 	bl	800aea4 <rgb565>
 8002da6:	4603      	mov	r3, r0
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	9400      	str	r4, [sp, #0]
 8002dac:	464b      	mov	r3, r9
 8002dae:	4642      	mov	r2, r8
 8002db0:	4631      	mov	r1, r6
 8002db2:	4628      	mov	r0, r5
 8002db4:	f007 fedc 	bl	800ab70 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	ddd3      	ble.n	8002d6c <show_sensor_data+0x18>
				rgb565(0, 51, 102));
	}
	hagl_put_text("DANE Z CZUJNIKOW", 10, 10, rgb565(15, 127, 225), font6x9);
 8002dc4:	22e1      	movs	r2, #225	; 0xe1
 8002dc6:	217f      	movs	r1, #127	; 0x7f
 8002dc8:	200f      	movs	r0, #15
 8002dca:	f008 f86b 	bl	800aea4 <rgb565>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <show_sensor_data+0x114>)
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	220a      	movs	r2, #10
 8002dda:	210a      	movs	r1, #10
 8002ddc:	4823      	ldr	r0, [pc, #140]	; (8002e6c <show_sensor_data+0x118>)
 8002dde:	f007 fe17 	bl	800aa10 <hagl_put_text>
	hagl_fill_rectangle(7, 27, LCD_WIDTH - 7, LCD_HEIGHT - 7, rgb565(0, 0, 0));
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	2000      	movs	r0, #0
 8002de8:	f008 f85c 	bl	800aea4 <rgb565>
 8002dec:	4603      	mov	r3, r0
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2399      	movs	r3, #153	; 0x99
 8002df2:	2279      	movs	r2, #121	; 0x79
 8002df4:	211b      	movs	r1, #27
 8002df6:	2007      	movs	r0, #7
 8002df8:	f007 fc70 	bl	800a6dc <hagl_fill_rectangle>
	for (int var = 0; var < activeChannels; ++var) {
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	e026      	b.n	8002e50 <show_sensor_data+0xfc>
		snprintf(text_to_parse, 16, "Kanal %u: \t\t%u", var, sensor_data[var]);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <show_sensor_data+0x11c>)
 8002e12:	2110      	movs	r1, #16
 8002e14:	4817      	ldr	r0, [pc, #92]	; (8002e74 <show_sensor_data+0x120>)
 8002e16:	f008 ff4f 	bl	800bcb8 <sniprintf>
		hagl_put_text(text_to_parse, 10, 30 + var * 15, rgb565(15, 127, 225),
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	0112      	lsls	r2, r2, #4
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	331e      	adds	r3, #30
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	b21c      	sxth	r4, r3
 8002e2c:	22e1      	movs	r2, #225	; 0xe1
 8002e2e:	217f      	movs	r1, #127	; 0x7f
 8002e30:	200f      	movs	r0, #15
 8002e32:	f008 f837 	bl	800aea4 <rgb565>
 8002e36:	4603      	mov	r3, r0
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <show_sensor_data+0x124>)
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	4622      	mov	r2, r4
 8002e42:	210a      	movs	r1, #10
 8002e44:	480b      	ldr	r0, [pc, #44]	; (8002e74 <show_sensor_data+0x120>)
 8002e46:	f007 fde3 	bl	800aa10 <hagl_put_text>
	for (int var = 0; var < activeChannels; ++var) {
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	dbd4      	blt.n	8002e02 <show_sensor_data+0xae>
				font5x7);
	}
	lcd_copy();
 8002e58:	f7fe ffd0 	bl	8001dfc <lcd_copy>
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e66:	bf00      	nop
 8002e68:	0800fa00 	.word	0x0800fa00
 8002e6c:	0800c8fc 	.word	0x0800c8fc
 8002e70:	0800c910 	.word	0x0800c910
 8002e74:	2000a7a4 	.word	0x2000a7a4
 8002e78:	080129b8 	.word	0x080129b8

08002e7c <set_datetime_screen>:

void set_datetime_screen(uint8_t activeSymbol, uint8_t* datetime) {
 8002e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e80:	b095      	sub	sp, #84	; 0x54
 8002e82:	af0c      	add	r7, sp, #48	; 0x30
 8002e84:	4603      	mov	r3, r0
 8002e86:	6139      	str	r1, [r7, #16]
 8002e88:	75fb      	strb	r3, [r7, #23]
	hagl_clear_screen();
 8002e8a:	f007 fe47 	bl	800ab1c <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	e028      	b.n	8002ee6 <set_datetime_screen+0x6a>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	b21d      	sxth	r5, r3
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	b21e      	sxth	r6, r3
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	fa0f f883 	sxth.w	r8, r3
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	fa0f f983 	sxth.w	r9, r3
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f1c3 0305 	rsb	r3, r3, #5
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	b21c      	sxth	r4, r3
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	20ff      	movs	r0, #255	; 0xff
 8002eca:	f007 ffeb 	bl	800aea4 <rgb565>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	9400      	str	r4, [sp, #0]
 8002ed4:	464b      	mov	r3, r9
 8002ed6:	4642      	mov	r2, r8
 8002ed8:	4631      	mov	r1, r6
 8002eda:	4628      	mov	r0, r5
 8002edc:	f007 fe48 	bl	800ab70 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	ddd3      	ble.n	8002e94 <set_datetime_screen+0x18>
				rgb565(255, 0, 0));
	}
	hagl_put_text("Data/Godzina", 30, 10, rgb565(255, 0, 0), font6x9);
 8002eec:	2200      	movs	r2, #0
 8002eee:	2100      	movs	r1, #0
 8002ef0:	20ff      	movs	r0, #255	; 0xff
 8002ef2:	f007 ffd7 	bl	800aea4 <rgb565>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4b42      	ldr	r3, [pc, #264]	; (8003004 <set_datetime_screen+0x188>)
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	4613      	mov	r3, r2
 8002f00:	220a      	movs	r2, #10
 8002f02:	211e      	movs	r1, #30
 8002f04:	4840      	ldr	r0, [pc, #256]	; (8003008 <set_datetime_screen+0x18c>)
 8002f06:	f007 fd83 	bl	800aa10 <hagl_put_text>
	hagl_put_text("Wybierz aktualna date i godzine ", 15, 30,
 8002f0a:	22cc      	movs	r2, #204	; 0xcc
 8002f0c:	2166      	movs	r1, #102	; 0x66
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f007 ffc8 	bl	800aea4 <rgb565>
 8002f14:	4603      	mov	r3, r0
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b3c      	ldr	r3, [pc, #240]	; (800300c <set_datetime_screen+0x190>)
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	221e      	movs	r2, #30
 8002f20:	210f      	movs	r1, #15
 8002f22:	483b      	ldr	r0, [pc, #236]	; (8003010 <set_datetime_screen+0x194>)
 8002f24:	f007 fd74 	bl	800aa10 <hagl_put_text>
			rgb565(0, 102, 204), font5x7);

	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
			datetime[0], datetime[1], datetime[2], datetime[3], datetime[4],
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
 8002f2c:	469c      	mov	ip, r3
			datetime[0], datetime[1], datetime[2], datetime[3], datetime[4],
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	3301      	adds	r3, #1
 8002f32:	781b      	ldrb	r3, [r3, #0]
	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
 8002f34:	461a      	mov	r2, r3
			datetime[0], datetime[1], datetime[2], datetime[3], datetime[4],
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	3302      	adds	r3, #2
 8002f3a:	781b      	ldrb	r3, [r3, #0]
	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
 8002f3c:	4619      	mov	r1, r3
			datetime[0], datetime[1], datetime[2], datetime[3], datetime[4],
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	3303      	adds	r3, #3
 8002f42:	781b      	ldrb	r3, [r3, #0]
	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
 8002f44:	4618      	mov	r0, r3
			datetime[0], datetime[1], datetime[2], datetime[3], datetime[4],
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	781b      	ldrb	r3, [r3, #0]
	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
 8002f4c:	461c      	mov	r4, r3
			datetime[5], datetime[6], datetime[7], datetime[8], datetime[9],
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	3305      	adds	r3, #5
 8002f52:	781b      	ldrb	r3, [r3, #0]
	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
 8002f54:	461d      	mov	r5, r3
			datetime[5], datetime[6], datetime[7], datetime[8], datetime[9],
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	3306      	adds	r3, #6
 8002f5a:	781b      	ldrb	r3, [r3, #0]
	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
 8002f5c:	461e      	mov	r6, r3
			datetime[5], datetime[6], datetime[7], datetime[8], datetime[9],
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	3307      	adds	r3, #7
 8002f62:	781b      	ldrb	r3, [r3, #0]
	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
 8002f64:	60fb      	str	r3, [r7, #12]
			datetime[5], datetime[6], datetime[7], datetime[8], datetime[9],
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	3308      	adds	r3, #8
 8002f6a:	781b      	ldrb	r3, [r3, #0]
	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
 8002f6c:	60bb      	str	r3, [r7, #8]
			datetime[5], datetime[6], datetime[7], datetime[8], datetime[9],
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	3309      	adds	r3, #9
 8002f72:	781b      	ldrb	r3, [r3, #0]
	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
 8002f74:	607b      	str	r3, [r7, #4]
			datetime[10], datetime[11]);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	330a      	adds	r3, #10
 8002f7a:	781b      	ldrb	r3, [r3, #0]
	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
 8002f7c:	603b      	str	r3, [r7, #0]
			datetime[10], datetime[11]);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	330b      	adds	r3, #11
 8002f82:	781b      	ldrb	r3, [r3, #0]
	snprintf((char*) datetime_buffer, 20, "%u%u%u%u-%u%u-%u%u %u%u:%u%u",
 8002f84:	930a      	str	r3, [sp, #40]	; 0x28
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9309      	str	r3, [sp, #36]	; 0x24
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	9308      	str	r3, [sp, #32]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	9307      	str	r3, [sp, #28]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	9306      	str	r3, [sp, #24]
 8002f96:	9605      	str	r6, [sp, #20]
 8002f98:	9504      	str	r5, [sp, #16]
 8002f9a:	9403      	str	r4, [sp, #12]
 8002f9c:	9002      	str	r0, [sp, #8]
 8002f9e:	9101      	str	r1, [sp, #4]
 8002fa0:	9200      	str	r2, [sp, #0]
 8002fa2:	4663      	mov	r3, ip
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <set_datetime_screen+0x198>)
 8002fa6:	2114      	movs	r1, #20
 8002fa8:	481b      	ldr	r0, [pc, #108]	; (8003018 <set_datetime_screen+0x19c>)
 8002faa:	f008 fe85 	bl	800bcb8 <sniprintf>
	hagl_put_text((char*) os_buffer, 10, 70, rgb565(0, 102, 204), font6x9);
 8002fae:	22cc      	movs	r2, #204	; 0xcc
 8002fb0:	2166      	movs	r1, #102	; 0x66
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f007 ff76 	bl	800aea4 <rgb565>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <set_datetime_screen+0x188>)
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	2246      	movs	r2, #70	; 0x46
 8002fc4:	210a      	movs	r1, #10
 8002fc6:	4815      	ldr	r0, [pc, #84]	; (800301c <set_datetime_screen+0x1a0>)
 8002fc8:	f007 fd22 	bl	800aa10 <hagl_put_text>
	HAL_Delay(50);
 8002fcc:	2032      	movs	r0, #50	; 0x32
 8002fce:	f000 fd4b 	bl	8003a68 <HAL_Delay>
	hagl_put_text((char*) os_buffer, 10, 70, rgb565(0, 204, 102), font6x9);
 8002fd2:	2266      	movs	r2, #102	; 0x66
 8002fd4:	21cc      	movs	r1, #204	; 0xcc
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f007 ff64 	bl	800aea4 <rgb565>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <set_datetime_screen+0x188>)
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	2246      	movs	r2, #70	; 0x46
 8002fe8:	210a      	movs	r1, #10
 8002fea:	480c      	ldr	r0, [pc, #48]	; (800301c <set_datetime_screen+0x1a0>)
 8002fec:	f007 fd10 	bl	800aa10 <hagl_put_text>
	HAL_Delay(50);
 8002ff0:	2032      	movs	r0, #50	; 0x32
 8002ff2:	f000 fd39 	bl	8003a68 <HAL_Delay>

	lcd_copy();
 8002ff6:	f7fe ff01 	bl	8001dfc <lcd_copy>
}
 8002ffa:	bf00      	nop
 8002ffc:	3724      	adds	r7, #36	; 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003004:	0800fa00 	.word	0x0800fa00
 8003008:	0800c88c 	.word	0x0800c88c
 800300c:	080129b8 	.word	0x080129b8
 8003010:	0800c920 	.word	0x0800c920
 8003014:	0800c944 	.word	0x0800c944
 8003018:	2000a0d4 	.word	0x2000a0d4
 800301c:	2000a0cc 	.word	0x2000a0cc

08003020 <select_item>:

void select_item(int index) {
 8003020:	b5b0      	push	{r4, r5, r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af02      	add	r7, sp, #8
 8003026:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	b29b      	uxth	r3, r3
 8003036:	3328      	adds	r3, #40	; 0x28
 8003038:	b29b      	uxth	r3, r3
 800303a:	b21c      	sxth	r4, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	b29b      	uxth	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	0092      	lsls	r2, r2, #2
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	b29b      	uxth	r3, r3
 800304a:	3319      	adds	r3, #25
 800304c:	b29b      	uxth	r3, r3
 800304e:	b21d      	sxth	r5, r3
 8003050:	2200      	movs	r2, #0
 8003052:	21ff      	movs	r1, #255	; 0xff
 8003054:	20ff      	movs	r0, #255	; 0xff
 8003056:	f007 ff25 	bl	800aea4 <rgb565>
 800305a:	4603      	mov	r3, r0
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	462b      	mov	r3, r5
 8003060:	2278      	movs	r2, #120	; 0x78
 8003062:	4621      	mov	r1, r4
 8003064:	2008      	movs	r0, #8
 8003066:	f007 fab3 	bl	800a5d0 <hagl_draw_rectangle>
			rgb565(255, 255, 0));
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bdb0      	pop	{r4, r5, r7, pc}

08003072 <deselect_item>:

void deselect_item(int index) {
 8003072:	b5b0      	push	{r4, r5, r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af02      	add	r7, sp, #8
 8003078:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	b29b      	uxth	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	0092      	lsls	r2, r2, #2
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	b29b      	uxth	r3, r3
 8003088:	3328      	adds	r3, #40	; 0x28
 800308a:	b29b      	uxth	r3, r3
 800308c:	b21c      	sxth	r4, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	b29b      	uxth	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	0092      	lsls	r2, r2, #2
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	b29b      	uxth	r3, r3
 800309c:	3319      	adds	r3, #25
 800309e:	b29b      	uxth	r3, r3
 80030a0:	b21d      	sxth	r5, r3
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	2000      	movs	r0, #0
 80030a8:	f007 fefc 	bl	800aea4 <rgb565>
 80030ac:	4603      	mov	r3, r0
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	462b      	mov	r3, r5
 80030b2:	2278      	movs	r2, #120	; 0x78
 80030b4:	4621      	mov	r1, r4
 80030b6:	2008      	movs	r0, #8
 80030b8:	f007 fa8a 	bl	800a5d0 <hagl_draw_rectangle>
			rgb565(0, 0, 0));
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bdb0      	pop	{r4, r5, r7, pc}

080030c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <MX_RTC_Init+0x44>)
 80030ca:	4a10      	ldr	r2, [pc, #64]	; (800310c <MX_RTC_Init+0x48>)
 80030cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <MX_RTC_Init+0x44>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <MX_RTC_Init+0x44>)
 80030d6:	227f      	movs	r2, #127	; 0x7f
 80030d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <MX_RTC_Init+0x44>)
 80030dc:	22ff      	movs	r2, #255	; 0xff
 80030de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <MX_RTC_Init+0x44>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <MX_RTC_Init+0x44>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <MX_RTC_Init+0x44>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030f2:	4805      	ldr	r0, [pc, #20]	; (8003108 <MX_RTC_Init+0x44>)
 80030f4:	f002 fd98 	bl	8005c28 <HAL_RTC_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80030fe:	f7ff fc09 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	2000a7b4 	.word	0x2000a7b4
 800310c:	40002800 	.word	0x40002800

08003110 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0c      	ldr	r2, [pc, #48]	; (8003160 <HAL_RTC_MspInit+0x50>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d111      	bne.n	8003156 <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003132:	2302      	movs	r3, #2
 8003134:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800313a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800313c:	f107 030c 	add.w	r3, r7, #12
 8003140:	4618      	mov	r0, r3
 8003142:	f002 fc83 	bl	8005a4c <HAL_RCCEx_PeriphCLKConfig>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800314c:	f7ff fbe2 	bl	8002914 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <HAL_RTC_MspInit+0x54>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003156:	bf00      	nop
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40002800 	.word	0x40002800
 8003164:	42470e3c 	.word	0x42470e3c

08003168 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800316c:	4b17      	ldr	r3, [pc, #92]	; (80031cc <MX_SPI1_Init+0x64>)
 800316e:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <MX_SPI1_Init+0x68>)
 8003170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <MX_SPI1_Init+0x64>)
 8003174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800317a:	4b14      	ldr	r3, [pc, #80]	; (80031cc <MX_SPI1_Init+0x64>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003180:	4b12      	ldr	r3, [pc, #72]	; (80031cc <MX_SPI1_Init+0x64>)
 8003182:	2200      	movs	r2, #0
 8003184:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003186:	4b11      	ldr	r3, [pc, #68]	; (80031cc <MX_SPI1_Init+0x64>)
 8003188:	2200      	movs	r2, #0
 800318a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <MX_SPI1_Init+0x64>)
 800318e:	2200      	movs	r2, #0
 8003190:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003192:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <MX_SPI1_Init+0x64>)
 8003194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003198:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <MX_SPI1_Init+0x64>)
 800319c:	2218      	movs	r2, #24
 800319e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <MX_SPI1_Init+0x64>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <MX_SPI1_Init+0x64>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <MX_SPI1_Init+0x64>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <MX_SPI1_Init+0x64>)
 80031b4:	220a      	movs	r2, #10
 80031b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031b8:	4804      	ldr	r0, [pc, #16]	; (80031cc <MX_SPI1_Init+0x64>)
 80031ba:	f002 fe1a 	bl	8005df2 <HAL_SPI_Init>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80031c4:	f7ff fba6 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031c8:	bf00      	nop
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	2000a82c 	.word	0x2000a82c
 80031d0:	40013000 	.word	0x40013000

080031d4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80031d8:	4b17      	ldr	r3, [pc, #92]	; (8003238 <MX_SPI2_Init+0x64>)
 80031da:	4a18      	ldr	r2, [pc, #96]	; (800323c <MX_SPI2_Init+0x68>)
 80031dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <MX_SPI2_Init+0x64>)
 80031e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <MX_SPI2_Init+0x64>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <MX_SPI2_Init+0x64>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <MX_SPI2_Init+0x64>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <MX_SPI2_Init+0x64>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <MX_SPI2_Init+0x64>)
 8003200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003204:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <MX_SPI2_Init+0x64>)
 8003208:	2218      	movs	r2, #24
 800320a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <MX_SPI2_Init+0x64>)
 800320e:	2200      	movs	r2, #0
 8003210:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <MX_SPI2_Init+0x64>)
 8003214:	2200      	movs	r2, #0
 8003216:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003218:	4b07      	ldr	r3, [pc, #28]	; (8003238 <MX_SPI2_Init+0x64>)
 800321a:	2200      	movs	r2, #0
 800321c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <MX_SPI2_Init+0x64>)
 8003220:	220a      	movs	r2, #10
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003224:	4804      	ldr	r0, [pc, #16]	; (8003238 <MX_SPI2_Init+0x64>)
 8003226:	f002 fde4 	bl	8005df2 <HAL_SPI_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003230:	f7ff fb70 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003234:	bf00      	nop
 8003236:	bd80      	pop	{r7, pc}
 8003238:	2000a7d4 	.word	0x2000a7d4
 800323c:	40003800 	.word	0x40003800

08003240 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08c      	sub	sp, #48	; 0x30
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 031c 	add.w	r3, r7, #28
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a58      	ldr	r2, [pc, #352]	; (80033c0 <HAL_SPI_MspInit+0x180>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d178      	bne.n	8003354 <HAL_SPI_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	4b57      	ldr	r3, [pc, #348]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	4a56      	ldr	r2, [pc, #344]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 800326c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003270:	6453      	str	r3, [r2, #68]	; 0x44
 8003272:	4b54      	ldr	r3, [pc, #336]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	4b50      	ldr	r3, [pc, #320]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a4f      	ldr	r2, [pc, #316]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	4b49      	ldr	r3, [pc, #292]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a48      	ldr	r2, [pc, #288]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
 80032aa:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80032b6:	2320      	movs	r3, #32
 80032b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c2:	2303      	movs	r3, #3
 80032c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032c6:	2305      	movs	r3, #5
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ca:	f107 031c 	add.w	r3, r7, #28
 80032ce:	4619      	mov	r1, r3
 80032d0:	483d      	ldr	r0, [pc, #244]	; (80033c8 <HAL_SPI_MspInit+0x188>)
 80032d2:	f001 fc61 	bl	8004b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80032d6:	2320      	movs	r3, #32
 80032d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e2:	2303      	movs	r3, #3
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032e6:	2305      	movs	r3, #5
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ea:	f107 031c 	add.w	r3, r7, #28
 80032ee:	4619      	mov	r1, r3
 80032f0:	4836      	ldr	r0, [pc, #216]	; (80033cc <HAL_SPI_MspInit+0x18c>)
 80032f2:	f001 fc51 	bl	8004b98 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80032f6:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 80032f8:	4a36      	ldr	r2, [pc, #216]	; (80033d4 <HAL_SPI_MspInit+0x194>)
 80032fa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80032fc:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 80032fe:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003302:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003304:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 8003306:	2240      	movs	r2, #64	; 0x40
 8003308:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003310:	4b2f      	ldr	r3, [pc, #188]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 8003312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003316:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800331e:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003324:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 8003326:	2200      	movs	r2, #0
 8003328:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800332a:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 800332c:	2200      	movs	r2, #0
 800332e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003330:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 8003332:	2200      	movs	r2, #0
 8003334:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003336:	4826      	ldr	r0, [pc, #152]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 8003338:	f001 f8be 	bl	80044b8 <HAL_DMA_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8003342:	f7ff fae7 	bl	8002914 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a21      	ldr	r2, [pc, #132]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 800334a:	649a      	str	r2, [r3, #72]	; 0x48
 800334c:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <HAL_SPI_MspInit+0x190>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003352:	e031      	b.n	80033b8 <HAL_SPI_MspInit+0x178>
  else if(spiHandle->Instance==SPI2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_SPI_MspInit+0x198>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d12c      	bne.n	80033b8 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 8003368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4a10      	ldr	r2, [pc, #64]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 8003384:	f043 0302 	orr.w	r3, r3, #2
 8003388:	6313      	str	r3, [r2, #48]	; 0x30
 800338a:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <HAL_SPI_MspInit+0x184>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8003396:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800339a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a4:	2303      	movs	r3, #3
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033a8:	2305      	movs	r3, #5
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	4619      	mov	r1, r3
 80033b2:	4806      	ldr	r0, [pc, #24]	; (80033cc <HAL_SPI_MspInit+0x18c>)
 80033b4:	f001 fbf0 	bl	8004b98 <HAL_GPIO_Init>
}
 80033b8:	bf00      	nop
 80033ba:	3730      	adds	r7, #48	; 0x30
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40013000 	.word	0x40013000
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400
 80033d0:	2000a884 	.word	0x2000a884
 80033d4:	40026458 	.word	0x40026458
 80033d8:	40003800 	.word	0x40003800

080033dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_MspInit+0x4c>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4a0f      	ldr	r2, [pc, #60]	; (8003428 <HAL_MspInit+0x4c>)
 80033ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f0:	6453      	str	r3, [r2, #68]	; 0x44
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <HAL_MspInit+0x4c>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_MspInit+0x4c>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <HAL_MspInit+0x4c>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	6413      	str	r3, [r2, #64]	; 0x40
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_MspInit+0x4c>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800

0800342c <SDTimer_Handler>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void SDTimer_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003430:	4b0e      	ldr	r3, [pc, #56]	; (800346c <SDTimer_Handler+0x40>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d006      	beq.n	8003448 <SDTimer_Handler+0x1c>
    Timer1--;
 800343a:	4b0c      	ldr	r3, [pc, #48]	; (800346c <SDTimer_Handler+0x40>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <SDTimer_Handler+0x40>)
 8003446:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <SDTimer_Handler+0x44>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <SDTimer_Handler+0x34>
    Timer2--;
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <SDTimer_Handler+0x44>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <SDTimer_Handler+0x44>)
 800345e:	701a      	strb	r2, [r3, #0]
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	2000a8e5 	.word	0x2000a8e5
 8003470:	2000a8e4 	.word	0x2000a8e4

08003474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003478:	e7fe      	b.n	8003478 <NMI_Handler+0x4>

0800347a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800347e:	e7fe      	b.n	800347e <HardFault_Handler+0x4>

08003480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003484:	e7fe      	b.n	8003484 <MemManage_Handler+0x4>

08003486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800348a:	e7fe      	b.n	800348a <BusFault_Handler+0x4>

0800348c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003490:	e7fe      	b.n	8003490 <UsageFault_Handler+0x4>

08003492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ae:	b480      	push	{r7}
 80034b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <SysTick_Handler+0x30>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <SysTick_Handler+0x30>)
 80034cc:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <SysTick_Handler+0x30>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b09      	cmp	r3, #9
 80034d6:	d904      	bls.n	80034e2 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <SysTick_Handler+0x30>)
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80034de:	f7ff ffa5 	bl	800342c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034e2:	f000 faa1 	bl	8003a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2000a0fc 	.word	0x2000a0fc

080034f0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80034f4:	2001      	movs	r0, #1
 80034f6:	f001 fd05 	bl	8004f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}

080034fe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003502:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003506:	f001 fcfd 	bl	8004f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003514:	4802      	ldr	r0, [pc, #8]	; (8003520 <DMA2_Stream3_IRQHandler+0x10>)
 8003516:	f001 f8d5 	bl	80046c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	2000a884 	.word	0x2000a884

08003524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
	return 1;
 8003528:	2301      	movs	r3, #1
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <_kill>:

int _kill(int pid, int sig)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800353e:	f007 fd01 	bl	800af44 <__errno>
 8003542:	4603      	mov	r3, r0
 8003544:	2216      	movs	r2, #22
 8003546:	601a      	str	r2, [r3, #0]
	return -1;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <_exit>:

void _exit (int status)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ffe7 	bl	8003534 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003566:	e7fe      	b.n	8003566 <_exit+0x12>

08003568 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e00a      	b.n	8003590 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800357a:	f3af 8000 	nop.w
 800357e:	4601      	mov	r1, r0
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	60ba      	str	r2, [r7, #8]
 8003586:	b2ca      	uxtb	r2, r1
 8003588:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	3301      	adds	r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	dbf0      	blt.n	800357a <_read+0x12>
	}

return len;
 8003598:	687b      	ldr	r3, [r7, #4]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e009      	b.n	80035c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	60ba      	str	r2, [r7, #8]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe fc4f 	bl	8001e60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	3301      	adds	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	dbf1      	blt.n	80035b4 <_write+0x12>
	}
	return len;
 80035d0:	687b      	ldr	r3, [r7, #4]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <_close>:

int _close(int file)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
	return -1;
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003602:	605a      	str	r2, [r3, #4]
	return 0;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <_isatty>:

int _isatty(int file)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
	return 1;
 800361a:	2301      	movs	r3, #1
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
	return 0;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800364c:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <_sbrk+0x5c>)
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <_sbrk+0x60>)
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <_sbrk+0x64>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <_sbrk+0x64>)
 8003662:	4a12      	ldr	r2, [pc, #72]	; (80036ac <_sbrk+0x68>)
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <_sbrk+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d207      	bcs.n	8003684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003674:	f007 fc66 	bl	800af44 <__errno>
 8003678:	4603      	mov	r3, r0
 800367a:	220c      	movs	r2, #12
 800367c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	e009      	b.n	8003698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <_sbrk+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <_sbrk+0x64>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	4a05      	ldr	r2, [pc, #20]	; (80036a8 <_sbrk+0x64>)
 8003694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20010000 	.word	0x20010000
 80036a4:	00002000 	.word	0x00002000
 80036a8:	2000a100 	.word	0x2000a100
 80036ac:	2000adf0 	.word	0x2000adf0

080036b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036b4:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <SystemInit+0x28>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <SystemInit+0x28>)
 80036bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <SystemInit+0x28>)
 80036c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036ca:	609a      	str	r2, [r3, #8]
#endif
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	; 0x30
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036e2:	f107 030c 	add.w	r3, r7, #12
 80036e6:	2224      	movs	r2, #36	; 0x24
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f007 fea6 	bl	800b43c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f0:	1d3b      	adds	r3, r7, #4
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036f8:	4b20      	ldr	r3, [pc, #128]	; (800377c <MX_TIM2_Init+0xa0>)
 80036fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003700:	4b1e      	ldr	r3, [pc, #120]	; (800377c <MX_TIM2_Init+0xa0>)
 8003702:	2200      	movs	r2, #0
 8003704:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <MX_TIM2_Init+0xa0>)
 8003708:	2200      	movs	r2, #0
 800370a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <MX_TIM2_Init+0xa0>)
 800370e:	2227      	movs	r2, #39	; 0x27
 8003710:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <MX_TIM2_Init+0xa0>)
 8003714:	2200      	movs	r2, #0
 8003716:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <MX_TIM2_Init+0xa0>)
 800371a:	2200      	movs	r2, #0
 800371c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800371e:	2301      	movs	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003726:	2301      	movs	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003736:	2301      	movs	r3, #1
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800373a:	2300      	movs	r3, #0
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003742:	f107 030c 	add.w	r3, r7, #12
 8003746:	4619      	mov	r1, r3
 8003748:	480c      	ldr	r0, [pc, #48]	; (800377c <MX_TIM2_Init+0xa0>)
 800374a:	f003 f8cf 	bl	80068ec <HAL_TIM_Encoder_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003754:	f7ff f8de 	bl	8002914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003758:	2300      	movs	r3, #0
 800375a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4805      	ldr	r0, [pc, #20]	; (800377c <MX_TIM2_Init+0xa0>)
 8003766:	f003 fa9b 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003770:	f7ff f8d0 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003774:	bf00      	nop
 8003776:	3730      	adds	r7, #48	; 0x30
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	2000a8e8 	.word	0x2000a8e8

08003780 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a0:	d14a      	bne.n	8003838 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	4b26      	ldr	r3, [pc, #152]	; (8003840 <HAL_TIM_Encoder_MspInit+0xc0>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a25      	ldr	r2, [pc, #148]	; (8003840 <HAL_TIM_Encoder_MspInit+0xc0>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b23      	ldr	r3, [pc, #140]	; (8003840 <HAL_TIM_Encoder_MspInit+0xc0>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <HAL_TIM_Encoder_MspInit+0xc0>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4a1e      	ldr	r2, [pc, #120]	; (8003840 <HAL_TIM_Encoder_MspInit+0xc0>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6313      	str	r3, [r2, #48]	; 0x30
 80037ce:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <HAL_TIM_Encoder_MspInit+0xc0>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	4b18      	ldr	r3, [pc, #96]	; (8003840 <HAL_TIM_Encoder_MspInit+0xc0>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a17      	ldr	r2, [pc, #92]	; (8003840 <HAL_TIM_Encoder_MspInit+0xc0>)
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_TIM_Encoder_MspInit+0xc0>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80037f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fc:	2302      	movs	r3, #2
 80037fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003804:	2300      	movs	r3, #0
 8003806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003808:	2301      	movs	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380c:	f107 0314 	add.w	r3, r7, #20
 8003810:	4619      	mov	r1, r3
 8003812:	480c      	ldr	r0, [pc, #48]	; (8003844 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003814:	f001 f9c0 	bl	8004b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003818:	2308      	movs	r3, #8
 800381a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381c:	2302      	movs	r3, #2
 800381e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003824:	2300      	movs	r3, #0
 8003826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003828:	2301      	movs	r3, #1
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	4619      	mov	r1, r3
 8003832:	4805      	ldr	r0, [pc, #20]	; (8003848 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003834:	f001 f9b0 	bl	8004b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003838:	bf00      	nop
 800383a:	3728      	adds	r7, #40	; 0x28
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	40020000 	.word	0x40020000
 8003848:	40020400 	.word	0x40020400

0800384c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <MX_USART6_UART_Init+0x4c>)
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <MX_USART6_UART_Init+0x50>)
 8003854:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <MX_USART6_UART_Init+0x4c>)
 8003858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800385c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800385e:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <MX_USART6_UART_Init+0x4c>)
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <MX_USART6_UART_Init+0x4c>)
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <MX_USART6_UART_Init+0x4c>)
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <MX_USART6_UART_Init+0x4c>)
 8003872:	220c      	movs	r2, #12
 8003874:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <MX_USART6_UART_Init+0x4c>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <MX_USART6_UART_Init+0x4c>)
 800387e:	2200      	movs	r2, #0
 8003880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003882:	4805      	ldr	r0, [pc, #20]	; (8003898 <MX_USART6_UART_Init+0x4c>)
 8003884:	f003 fa7a 	bl	8006d7c <HAL_UART_Init>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800388e:	f7ff f841 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	2000a930 	.word	0x2000a930
 800389c:	40011400 	.word	0x40011400

080038a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_UART_MspInit+0x84>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d12c      	bne.n	800391c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <HAL_UART_MspInit+0x88>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	4a17      	ldr	r2, [pc, #92]	; (8003928 <HAL_UART_MspInit+0x88>)
 80038cc:	f043 0320 	orr.w	r3, r3, #32
 80038d0:	6453      	str	r3, [r2, #68]	; 0x44
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <HAL_UART_MspInit+0x88>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_UART_MspInit+0x88>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a10      	ldr	r2, [pc, #64]	; (8003928 <HAL_UART_MspInit+0x88>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <HAL_UART_MspInit+0x88>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80038fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80038fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	2302      	movs	r3, #2
 8003902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003908:	2303      	movs	r3, #3
 800390a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800390c:	2308      	movs	r3, #8
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003910:	f107 0314 	add.w	r3, r7, #20
 8003914:	4619      	mov	r1, r3
 8003916:	4805      	ldr	r0, [pc, #20]	; (800392c <HAL_UART_MspInit+0x8c>)
 8003918:	f001 f93e 	bl	8004b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800391c:	bf00      	nop
 800391e:	3728      	adds	r7, #40	; 0x28
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40011400 	.word	0x40011400
 8003928:	40023800 	.word	0x40023800
 800392c:	40020000 	.word	0x40020000

08003930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003968 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003934:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003936:	e003      	b.n	8003940 <LoopCopyDataInit>

08003938 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800393a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800393c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800393e:	3104      	adds	r1, #4

08003940 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003940:	480b      	ldr	r0, [pc, #44]	; (8003970 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003944:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003946:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003948:	d3f6      	bcc.n	8003938 <CopyDataInit>
  ldr  r2, =_sbss
 800394a:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800394c:	e002      	b.n	8003954 <LoopFillZerobss>

0800394e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800394e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003950:	f842 3b04 	str.w	r3, [r2], #4

08003954 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003956:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003958:	d3f9      	bcc.n	800394e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800395a:	f7ff fea9 	bl	80036b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800395e:	f007 fcd3 	bl	800b308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003962:	f7fe fbc9 	bl	80020f8 <main>
  bx  lr    
 8003966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003968:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800396c:	08016044 	.word	0x08016044
  ldr  r0, =_sdata
 8003970:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003974:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8003978:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 800397c:	2000adf0 	.word	0x2000adf0

08003980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003980:	e7fe      	b.n	8003980 <ADC_IRQHandler>
	...

08003984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <HAL_Init+0x40>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0d      	ldr	r2, [pc, #52]	; (80039c4 <HAL_Init+0x40>)
 800398e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_Init+0x40>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <HAL_Init+0x40>)
 800399a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800399e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <HAL_Init+0x40>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a07      	ldr	r2, [pc, #28]	; (80039c4 <HAL_Init+0x40>)
 80039a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039ac:	2003      	movs	r0, #3
 80039ae:	f000 fd41 	bl	8004434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039b2:	2000      	movs	r0, #0
 80039b4:	f000 f808 	bl	80039c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039b8:	f7ff fd10 	bl	80033dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023c00 	.word	0x40023c00

080039c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039d0:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_InitTick+0x54>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_InitTick+0x58>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	4619      	mov	r1, r3
 80039da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039de:	fbb3 f3f1 	udiv	r3, r3, r1
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fd59 	bl	800449e <HAL_SYSTICK_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00e      	b.n	8003a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b0f      	cmp	r3, #15
 80039fa:	d80a      	bhi.n	8003a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039fc:	2200      	movs	r2, #0
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	f000 fd21 	bl	800444a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a08:	4a06      	ldr	r2, [pc, #24]	; (8003a24 <HAL_InitTick+0x5c>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000014 	.word	0x20000014
 8003a20:	2000001c 	.word	0x2000001c
 8003a24:	20000018 	.word	0x20000018

08003a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_IncTick+0x20>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_IncTick+0x24>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4413      	add	r3, r2
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <HAL_IncTick+0x24>)
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	2000001c 	.word	0x2000001c
 8003a4c:	2000a974 	.word	0x2000a974

08003a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return uwTick;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_GetTick+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	2000a974 	.word	0x2000a974

08003a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff ffee 	bl	8003a50 <HAL_GetTick>
 8003a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d005      	beq.n	8003a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_Delay+0x44>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a8e:	bf00      	nop
 8003a90:	f7ff ffde 	bl	8003a50 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d8f7      	bhi.n	8003a90 <HAL_Delay+0x28>
  {
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	2000001c 	.word	0x2000001c

08003ab0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e033      	b.n	8003b2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd f9f4 	bl	8000ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d118      	bne.n	8003b20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003af6:	f023 0302 	bic.w	r3, r3, #2
 8003afa:	f043 0202 	orr.w	r2, r3, #2
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fa48 	bl	8003f98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	f043 0201 	orr.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
 8003b1e:	e001      	b.n	8003b24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_Start_DMA+0x1e>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e0ce      	b.n	8003cf4 <HAL_ADC_Start_DMA+0x1bc>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d018      	beq.n	8003b9e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b7c:	4b5f      	ldr	r3, [pc, #380]	; (8003cfc <HAL_ADC_Start_DMA+0x1c4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a5f      	ldr	r2, [pc, #380]	; (8003d00 <HAL_ADC_Start_DMA+0x1c8>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	0c9a      	lsrs	r2, r3, #18
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003b90:	e002      	b.n	8003b98 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f9      	bne.n	8003b92 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bac:	d107      	bne.n	8003bbe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	f040 8086 	bne.w	8003cda <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bf8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0c:	d106      	bne.n	8003c1c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f023 0206 	bic.w	r2, r3, #6
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
 8003c1a:	e002      	b.n	8003c22 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c2a:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <HAL_ADC_Start_DMA+0x1cc>)
 8003c2c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	4a35      	ldr	r2, [pc, #212]	; (8003d08 <HAL_ADC_Start_DMA+0x1d0>)
 8003c34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	4a34      	ldr	r2, [pc, #208]	; (8003d0c <HAL_ADC_Start_DMA+0x1d4>)
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	4a33      	ldr	r2, [pc, #204]	; (8003d10 <HAL_ADC_Start_DMA+0x1d8>)
 8003c44:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c4e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c5e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	334c      	adds	r3, #76	; 0x4c
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f000 fcc8 	bl	8004614 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10f      	bne.n	8003cb0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d129      	bne.n	8003cf2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	e020      	b.n	8003cf2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <HAL_ADC_Start_DMA+0x1dc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d11b      	bne.n	8003cf2 <HAL_ADC_Start_DMA+0x1ba>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d114      	bne.n	8003cf2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	e00b      	b.n	8003cf2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f043 0210 	orr.w	r2, r3, #16
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	f043 0201 	orr.w	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20000014 	.word	0x20000014
 8003d00:	431bde83 	.word	0x431bde83
 8003d04:	40012300 	.word	0x40012300
 8003d08:	08004191 	.word	0x08004191
 8003d0c:	0800424b 	.word	0x0800424b
 8003d10:	08004267 	.word	0x08004267
 8003d14:	40012000 	.word	0x40012000

08003d18 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x1c>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e105      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x228>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b09      	cmp	r3, #9
 8003d7e:	d925      	bls.n	8003dcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68d9      	ldr	r1, [r3, #12]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4613      	mov	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	4413      	add	r3, r2
 8003d94:	3b1e      	subs	r3, #30
 8003d96:	2207      	movs	r2, #7
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	400a      	ands	r2, r1
 8003da4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68d9      	ldr	r1, [r3, #12]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	4618      	mov	r0, r3
 8003db8:	4603      	mov	r3, r0
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	4403      	add	r3, r0
 8003dbe:	3b1e      	subs	r3, #30
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	60da      	str	r2, [r3, #12]
 8003dca:	e022      	b.n	8003e12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6919      	ldr	r1, [r3, #16]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	2207      	movs	r2, #7
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43da      	mvns	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	400a      	ands	r2, r1
 8003dee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6919      	ldr	r1, [r3, #16]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	4618      	mov	r0, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4403      	add	r3, r0
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b06      	cmp	r3, #6
 8003e18:	d824      	bhi.n	8003e64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	3b05      	subs	r3, #5
 8003e2c:	221f      	movs	r2, #31
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43da      	mvns	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	400a      	ands	r2, r1
 8003e3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	4618      	mov	r0, r3
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	3b05      	subs	r3, #5
 8003e56:	fa00 f203 	lsl.w	r2, r0, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	635a      	str	r2, [r3, #52]	; 0x34
 8003e62:	e04c      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	d824      	bhi.n	8003eb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3b23      	subs	r3, #35	; 0x23
 8003e7e:	221f      	movs	r2, #31
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43da      	mvns	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	400a      	ands	r2, r1
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3b23      	subs	r3, #35	; 0x23
 8003ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8003eb4:	e023      	b.n	8003efe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3b41      	subs	r3, #65	; 0x41
 8003ec8:	221f      	movs	r2, #31
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43da      	mvns	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	3b41      	subs	r3, #65	; 0x41
 8003ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003efe:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <HAL_ADC_ConfigChannel+0x234>)
 8003f00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a21      	ldr	r2, [pc, #132]	; (8003f8c <HAL_ADC_ConfigChannel+0x238>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d109      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x1cc>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b12      	cmp	r3, #18
 8003f12:	d105      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <HAL_ADC_ConfigChannel+0x238>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d123      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x21e>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b10      	cmp	r3, #16
 8003f30:	d003      	beq.n	8003f3a <HAL_ADC_ConfigChannel+0x1e6>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b11      	cmp	r3, #17
 8003f38:	d11b      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d111      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f4e:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <HAL_ADC_ConfigChannel+0x23c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <HAL_ADC_ConfigChannel+0x240>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	0c9a      	lsrs	r2, r3, #18
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f64:	e002      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f9      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40012300 	.word	0x40012300
 8003f8c:	40012000 	.word	0x40012000
 8003f90:	20000014 	.word	0x20000014
 8003f94:	431bde83 	.word	0x431bde83

08003f98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fa0:	4b79      	ldr	r3, [pc, #484]	; (8004188 <ADC_Init+0x1f0>)
 8003fa2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6859      	ldr	r1, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	021a      	lsls	r2, r3, #8
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ff0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004012:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6899      	ldr	r1, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	4a58      	ldr	r2, [pc, #352]	; (800418c <ADC_Init+0x1f4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d022      	beq.n	8004076 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800403e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6899      	ldr	r1, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6899      	ldr	r1, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	e00f      	b.n	8004096 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004094:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0202 	bic.w	r2, r2, #2
 80040a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6899      	ldr	r1, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	7e1b      	ldrb	r3, [r3, #24]
 80040b0:	005a      	lsls	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01b      	beq.n	80040fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	3b01      	subs	r3, #1
 80040f0:	035a      	lsls	r2, r3, #13
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	e007      	b.n	800410c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800410a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	3b01      	subs	r3, #1
 8004128:	051a      	lsls	r2, r3, #20
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6899      	ldr	r1, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800414e:	025a      	lsls	r2, r3, #9
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6899      	ldr	r1, [r3, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	029a      	lsls	r2, r3, #10
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	40012300 	.word	0x40012300
 800418c:	0f000001 	.word	0x0f000001

08004190 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d13c      	bne.n	8004224 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d12b      	bne.n	800421c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d127      	bne.n	800421c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d119      	bne.n	800421c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0220 	bic.w	r2, r2, #32
 80041f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	f043 0201 	orr.w	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff fd7b 	bl	8003d18 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004222:	e00e      	b.n	8004242 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff fd85 	bl	8003d40 <HAL_ADC_ErrorCallback>
}
 8004236:	e004      	b.n	8004242 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff fd67 	bl	8003d2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2240      	movs	r2, #64	; 0x40
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f043 0204 	orr.w	r2, r3, #4
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff fd5a 	bl	8003d40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <__NVIC_SetPriorityGrouping+0x44>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042b0:	4013      	ands	r3, r2
 80042b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042c6:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <__NVIC_SetPriorityGrouping+0x44>)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	60d3      	str	r3, [r2, #12]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000ed00 	.word	0xe000ed00

080042dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042e0:	4b04      	ldr	r3, [pc, #16]	; (80042f4 <__NVIC_GetPriorityGrouping+0x18>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	0a1b      	lsrs	r3, r3, #8
 80042e6:	f003 0307 	and.w	r3, r3, #7
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	2b00      	cmp	r3, #0
 8004308:	db0b      	blt.n	8004322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	f003 021f 	and.w	r2, r3, #31
 8004310:	4907      	ldr	r1, [pc, #28]	; (8004330 <__NVIC_EnableIRQ+0x38>)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	2001      	movs	r0, #1
 800431a:	fa00 f202 	lsl.w	r2, r0, r2
 800431e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	e000e100 	.word	0xe000e100

08004334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	6039      	str	r1, [r7, #0]
 800433e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004344:	2b00      	cmp	r3, #0
 8004346:	db0a      	blt.n	800435e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	b2da      	uxtb	r2, r3
 800434c:	490c      	ldr	r1, [pc, #48]	; (8004380 <__NVIC_SetPriority+0x4c>)
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	0112      	lsls	r2, r2, #4
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	440b      	add	r3, r1
 8004358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800435c:	e00a      	b.n	8004374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	4908      	ldr	r1, [pc, #32]	; (8004384 <__NVIC_SetPriority+0x50>)
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	3b04      	subs	r3, #4
 800436c:	0112      	lsls	r2, r2, #4
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	440b      	add	r3, r1
 8004372:	761a      	strb	r2, [r3, #24]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	e000e100 	.word	0xe000e100
 8004384:	e000ed00 	.word	0xe000ed00

08004388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004388:	b480      	push	{r7}
 800438a:	b089      	sub	sp, #36	; 0x24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f1c3 0307 	rsb	r3, r3, #7
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	bf28      	it	cs
 80043a6:	2304      	movcs	r3, #4
 80043a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	3304      	adds	r3, #4
 80043ae:	2b06      	cmp	r3, #6
 80043b0:	d902      	bls.n	80043b8 <NVIC_EncodePriority+0x30>
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3b03      	subs	r3, #3
 80043b6:	e000      	b.n	80043ba <NVIC_EncodePriority+0x32>
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043bc:	f04f 32ff 	mov.w	r2, #4294967295
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43da      	mvns	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	401a      	ands	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043d0:	f04f 31ff 	mov.w	r1, #4294967295
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	fa01 f303 	lsl.w	r3, r1, r3
 80043da:	43d9      	mvns	r1, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e0:	4313      	orrs	r3, r2
         );
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3724      	adds	r7, #36	; 0x24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004400:	d301      	bcc.n	8004406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004402:	2301      	movs	r3, #1
 8004404:	e00f      	b.n	8004426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004406:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <SysTick_Config+0x40>)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3b01      	subs	r3, #1
 800440c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800440e:	210f      	movs	r1, #15
 8004410:	f04f 30ff 	mov.w	r0, #4294967295
 8004414:	f7ff ff8e 	bl	8004334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <SysTick_Config+0x40>)
 800441a:	2200      	movs	r2, #0
 800441c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800441e:	4b04      	ldr	r3, [pc, #16]	; (8004430 <SysTick_Config+0x40>)
 8004420:	2207      	movs	r2, #7
 8004422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	e000e010 	.word	0xe000e010

08004434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff ff29 	bl	8004294 <__NVIC_SetPriorityGrouping>
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800444a:	b580      	push	{r7, lr}
 800444c:	b086      	sub	sp, #24
 800444e:	af00      	add	r7, sp, #0
 8004450:	4603      	mov	r3, r0
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800445c:	f7ff ff3e 	bl	80042dc <__NVIC_GetPriorityGrouping>
 8004460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	6978      	ldr	r0, [r7, #20]
 8004468:	f7ff ff8e 	bl	8004388 <NVIC_EncodePriority>
 800446c:	4602      	mov	r2, r0
 800446e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004472:	4611      	mov	r1, r2
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff ff5d 	bl	8004334 <__NVIC_SetPriority>
}
 800447a:	bf00      	nop
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	4603      	mov	r3, r0
 800448a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800448c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff ff31 	bl	80042f8 <__NVIC_EnableIRQ>
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff ffa2 	bl	80043f0 <SysTick_Config>
 80044ac:	4603      	mov	r3, r0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044c4:	f7ff fac4 	bl	8003a50 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e099      	b.n	8004608 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044f4:	e00f      	b.n	8004516 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044f6:	f7ff faab 	bl	8003a50 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b05      	cmp	r3, #5
 8004502:	d908      	bls.n	8004516 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2203      	movs	r2, #3
 800450e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e078      	b.n	8004608 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e8      	bne.n	80044f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4b38      	ldr	r3, [pc, #224]	; (8004610 <HAL_DMA_Init+0x158>)
 8004530:	4013      	ands	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004542:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800455a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2b04      	cmp	r3, #4
 800456e:	d107      	bne.n	8004580 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	4313      	orrs	r3, r2
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0307 	bic.w	r3, r3, #7
 8004596:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d117      	bne.n	80045da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00e      	beq.n	80045da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fa6f 	bl	8004aa0 <DMA_CheckFifoParam>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2240      	movs	r2, #64	; 0x40
 80045cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045d6:	2301      	movs	r3, #1
 80045d8:	e016      	b.n	8004608 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fa26 	bl	8004a34 <DMA_CalcBaseAndBitshift>
 80045e8:	4603      	mov	r3, r0
 80045ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f0:	223f      	movs	r2, #63	; 0x3f
 80045f2:	409a      	lsls	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	f010803f 	.word	0xf010803f

08004614 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_DMA_Start_IT+0x26>
 8004636:	2302      	movs	r3, #2
 8004638:	e040      	b.n	80046bc <HAL_DMA_Start_IT+0xa8>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d12f      	bne.n	80046ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2202      	movs	r2, #2
 8004652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f9b8 	bl	80049d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	223f      	movs	r2, #63	; 0x3f
 800466e:	409a      	lsls	r2, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0216 	orr.w	r2, r2, #22
 8004682:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0208 	orr.w	r2, r2, #8
 800469a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e005      	b.n	80046ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
 80046b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046d0:	4b92      	ldr	r3, [pc, #584]	; (800491c <HAL_DMA_IRQHandler+0x258>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a92      	ldr	r2, [pc, #584]	; (8004920 <HAL_DMA_IRQHandler+0x25c>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	0a9b      	lsrs	r3, r3, #10
 80046dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ee:	2208      	movs	r2, #8
 80046f0:	409a      	lsls	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01a      	beq.n	8004730 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d013      	beq.n	8004730 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0204 	bic.w	r2, r2, #4
 8004716:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471c:	2208      	movs	r2, #8
 800471e:	409a      	lsls	r2, r3
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004728:	f043 0201 	orr.w	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004734:	2201      	movs	r2, #1
 8004736:	409a      	lsls	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4013      	ands	r3, r2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d012      	beq.n	8004766 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004752:	2201      	movs	r2, #1
 8004754:	409a      	lsls	r2, r3
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	f043 0202 	orr.w	r2, r3, #2
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476a:	2204      	movs	r2, #4
 800476c:	409a      	lsls	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d012      	beq.n	800479c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00b      	beq.n	800479c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004788:	2204      	movs	r2, #4
 800478a:	409a      	lsls	r2, r3
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004794:	f043 0204 	orr.w	r2, r3, #4
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a0:	2210      	movs	r2, #16
 80047a2:	409a      	lsls	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d043      	beq.n	8004834 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d03c      	beq.n	8004834 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	2210      	movs	r2, #16
 80047c0:	409a      	lsls	r2, r3
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d018      	beq.n	8004806 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d108      	bne.n	80047f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d024      	beq.n	8004834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	4798      	blx	r3
 80047f2:	e01f      	b.n	8004834 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01b      	beq.n	8004834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
 8004804:	e016      	b.n	8004834 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d107      	bne.n	8004824 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0208 	bic.w	r2, r2, #8
 8004822:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	2220      	movs	r2, #32
 800483a:	409a      	lsls	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 808e 	beq.w	8004962 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8086 	beq.w	8004962 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485a:	2220      	movs	r2, #32
 800485c:	409a      	lsls	r2, r3
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b05      	cmp	r3, #5
 800486c:	d136      	bne.n	80048dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0216 	bic.w	r2, r2, #22
 800487c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800488c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d103      	bne.n	800489e <HAL_DMA_IRQHandler+0x1da>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0208 	bic.w	r2, r2, #8
 80048ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b2:	223f      	movs	r2, #63	; 0x3f
 80048b4:	409a      	lsls	r2, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d07d      	beq.n	80049ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
        }
        return;
 80048da:	e078      	b.n	80049ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d01c      	beq.n	8004924 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d108      	bne.n	800490a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d030      	beq.n	8004962 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4798      	blx	r3
 8004908:	e02b      	b.n	8004962 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d027      	beq.n	8004962 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
 800491a:	e022      	b.n	8004962 <HAL_DMA_IRQHandler+0x29e>
 800491c:	20000014 	.word	0x20000014
 8004920:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10f      	bne.n	8004952 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0210 	bic.w	r2, r2, #16
 8004940:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	2b00      	cmp	r3, #0
 8004968:	d032      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d022      	beq.n	80049bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2205      	movs	r2, #5
 800497a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	3301      	adds	r3, #1
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	429a      	cmp	r2, r3
 8004998:	d307      	bcc.n	80049aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f2      	bne.n	800498e <HAL_DMA_IRQHandler+0x2ca>
 80049a8:	e000      	b.n	80049ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80049aa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
 80049cc:	e000      	b.n	80049d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80049ce:	bf00      	nop
    }
  }
}
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop

080049d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b40      	cmp	r3, #64	; 0x40
 8004a04:	d108      	bne.n	8004a18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a16:	e007      	b.n	8004a28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	60da      	str	r2, [r3, #12]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	3b10      	subs	r3, #16
 8004a44:	4a14      	ldr	r2, [pc, #80]	; (8004a98 <DMA_CalcBaseAndBitshift+0x64>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	091b      	lsrs	r3, r3, #4
 8004a4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a4e:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <DMA_CalcBaseAndBitshift+0x68>)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d909      	bls.n	8004a76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a6a:	f023 0303 	bic.w	r3, r3, #3
 8004a6e:	1d1a      	adds	r2, r3, #4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	659a      	str	r2, [r3, #88]	; 0x58
 8004a74:	e007      	b.n	8004a86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a7e:	f023 0303 	bic.w	r3, r3, #3
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	aaaaaaab 	.word	0xaaaaaaab
 8004a9c:	08015ed8 	.word	0x08015ed8

08004aa0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d11f      	bne.n	8004afa <DMA_CheckFifoParam+0x5a>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d856      	bhi.n	8004b6e <DMA_CheckFifoParam+0xce>
 8004ac0:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <DMA_CheckFifoParam+0x28>)
 8004ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac6:	bf00      	nop
 8004ac8:	08004ad9 	.word	0x08004ad9
 8004acc:	08004aeb 	.word	0x08004aeb
 8004ad0:	08004ad9 	.word	0x08004ad9
 8004ad4:	08004b6f 	.word	0x08004b6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d046      	beq.n	8004b72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae8:	e043      	b.n	8004b72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004af2:	d140      	bne.n	8004b76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af8:	e03d      	b.n	8004b76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b02:	d121      	bne.n	8004b48 <DMA_CheckFifoParam+0xa8>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d837      	bhi.n	8004b7a <DMA_CheckFifoParam+0xda>
 8004b0a:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <DMA_CheckFifoParam+0x70>)
 8004b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004b27 	.word	0x08004b27
 8004b18:	08004b21 	.word	0x08004b21
 8004b1c:	08004b39 	.word	0x08004b39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
      break;
 8004b24:	e030      	b.n	8004b88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d025      	beq.n	8004b7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b36:	e022      	b.n	8004b7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b40:	d11f      	bne.n	8004b82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b46:	e01c      	b.n	8004b82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d903      	bls.n	8004b56 <DMA_CheckFifoParam+0xb6>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d003      	beq.n	8004b5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b54:	e018      	b.n	8004b88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
      break;
 8004b5a:	e015      	b.n	8004b88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00e      	beq.n	8004b86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6c:	e00b      	b.n	8004b86 <DMA_CheckFifoParam+0xe6>
      break;
 8004b6e:	bf00      	nop
 8004b70:	e00a      	b.n	8004b88 <DMA_CheckFifoParam+0xe8>
      break;
 8004b72:	bf00      	nop
 8004b74:	e008      	b.n	8004b88 <DMA_CheckFifoParam+0xe8>
      break;
 8004b76:	bf00      	nop
 8004b78:	e006      	b.n	8004b88 <DMA_CheckFifoParam+0xe8>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e004      	b.n	8004b88 <DMA_CheckFifoParam+0xe8>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e002      	b.n	8004b88 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b82:	bf00      	nop
 8004b84:	e000      	b.n	8004b88 <DMA_CheckFifoParam+0xe8>
      break;
 8004b86:	bf00      	nop
    }
  } 
  
  return status; 
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop

08004b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b089      	sub	sp, #36	; 0x24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	e159      	b.n	8004e68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	f040 8148 	bne.w	8004e62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d005      	beq.n	8004bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d130      	bne.n	8004c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c20:	2201      	movs	r2, #1
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	f003 0201 	and.w	r2, r3, #1
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d017      	beq.n	8004c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	2203      	movs	r2, #3
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d123      	bne.n	8004cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	08da      	lsrs	r2, r3, #3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3208      	adds	r2, #8
 8004c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	220f      	movs	r2, #15
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	08da      	lsrs	r2, r3, #3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3208      	adds	r2, #8
 8004cd6:	69b9      	ldr	r1, [r7, #24]
 8004cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	43db      	mvns	r3, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 0203 	and.w	r2, r3, #3
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80a2 	beq.w	8004e62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	4b57      	ldr	r3, [pc, #348]	; (8004e80 <HAL_GPIO_Init+0x2e8>)
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	4a56      	ldr	r2, [pc, #344]	; (8004e80 <HAL_GPIO_Init+0x2e8>)
 8004d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d2e:	4b54      	ldr	r3, [pc, #336]	; (8004e80 <HAL_GPIO_Init+0x2e8>)
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d3a:	4a52      	ldr	r2, [pc, #328]	; (8004e84 <HAL_GPIO_Init+0x2ec>)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	089b      	lsrs	r3, r3, #2
 8004d40:	3302      	adds	r3, #2
 8004d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	220f      	movs	r2, #15
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a49      	ldr	r2, [pc, #292]	; (8004e88 <HAL_GPIO_Init+0x2f0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d019      	beq.n	8004d9a <HAL_GPIO_Init+0x202>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a48      	ldr	r2, [pc, #288]	; (8004e8c <HAL_GPIO_Init+0x2f4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_GPIO_Init+0x1fe>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a47      	ldr	r2, [pc, #284]	; (8004e90 <HAL_GPIO_Init+0x2f8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00d      	beq.n	8004d92 <HAL_GPIO_Init+0x1fa>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a46      	ldr	r2, [pc, #280]	; (8004e94 <HAL_GPIO_Init+0x2fc>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d007      	beq.n	8004d8e <HAL_GPIO_Init+0x1f6>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a45      	ldr	r2, [pc, #276]	; (8004e98 <HAL_GPIO_Init+0x300>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d101      	bne.n	8004d8a <HAL_GPIO_Init+0x1f2>
 8004d86:	2304      	movs	r3, #4
 8004d88:	e008      	b.n	8004d9c <HAL_GPIO_Init+0x204>
 8004d8a:	2307      	movs	r3, #7
 8004d8c:	e006      	b.n	8004d9c <HAL_GPIO_Init+0x204>
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e004      	b.n	8004d9c <HAL_GPIO_Init+0x204>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e002      	b.n	8004d9c <HAL_GPIO_Init+0x204>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <HAL_GPIO_Init+0x204>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	f002 0203 	and.w	r2, r2, #3
 8004da2:	0092      	lsls	r2, r2, #2
 8004da4:	4093      	lsls	r3, r2
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dac:	4935      	ldr	r1, [pc, #212]	; (8004e84 <HAL_GPIO_Init+0x2ec>)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	089b      	lsrs	r3, r3, #2
 8004db2:	3302      	adds	r3, #2
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dba:	4b38      	ldr	r3, [pc, #224]	; (8004e9c <HAL_GPIO_Init+0x304>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dde:	4a2f      	ldr	r2, [pc, #188]	; (8004e9c <HAL_GPIO_Init+0x304>)
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004de4:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <HAL_GPIO_Init+0x304>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e08:	4a24      	ldr	r2, [pc, #144]	; (8004e9c <HAL_GPIO_Init+0x304>)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e0e:	4b23      	ldr	r3, [pc, #140]	; (8004e9c <HAL_GPIO_Init+0x304>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e32:	4a1a      	ldr	r2, [pc, #104]	; (8004e9c <HAL_GPIO_Init+0x304>)
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e38:	4b18      	ldr	r3, [pc, #96]	; (8004e9c <HAL_GPIO_Init+0x304>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	43db      	mvns	r3, r3
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4013      	ands	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e5c:	4a0f      	ldr	r2, [pc, #60]	; (8004e9c <HAL_GPIO_Init+0x304>)
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	3301      	adds	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	2b0f      	cmp	r3, #15
 8004e6c:	f67f aea2 	bls.w	8004bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	3724      	adds	r7, #36	; 0x24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40023800 	.word	0x40023800
 8004e84:	40013800 	.word	0x40013800
 8004e88:	40020000 	.word	0x40020000
 8004e8c:	40020400 	.word	0x40020400
 8004e90:	40020800 	.word	0x40020800
 8004e94:	40020c00 	.word	0x40020c00
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40013c00 	.word	0x40013c00

08004ea0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	887b      	ldrh	r3, [r7, #2]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	73fb      	strb	r3, [r7, #15]
 8004ebc:	e001      	b.n	8004ec2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	807b      	strh	r3, [r7, #2]
 8004edc:	4613      	mov	r3, r2
 8004ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ee0:	787b      	ldrb	r3, [r7, #1]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ee6:	887a      	ldrh	r2, [r7, #2]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004eec:	e003      	b.n	8004ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004eee:	887b      	ldrh	r3, [r7, #2]
 8004ef0:	041a      	lsls	r2, r3, #16
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	619a      	str	r2, [r3, #24]
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
	...

08004f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f0e:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d006      	beq.n	8004f28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f1a:	4a05      	ldr	r2, [pc, #20]	; (8004f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f20:	88fb      	ldrh	r3, [r7, #6]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fd fcd6 	bl	80028d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f28:	bf00      	nop
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40013c00 	.word	0x40013c00

08004f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e12b      	b.n	800519e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fc fe08 	bl	8001b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2224      	movs	r2, #36	; 0x24
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f98:	f000 fd30 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 8004f9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	4a81      	ldr	r2, [pc, #516]	; (80051a8 <HAL_I2C_Init+0x274>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d807      	bhi.n	8004fb8 <HAL_I2C_Init+0x84>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4a80      	ldr	r2, [pc, #512]	; (80051ac <HAL_I2C_Init+0x278>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	bf94      	ite	ls
 8004fb0:	2301      	movls	r3, #1
 8004fb2:	2300      	movhi	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	e006      	b.n	8004fc6 <HAL_I2C_Init+0x92>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4a7d      	ldr	r2, [pc, #500]	; (80051b0 <HAL_I2C_Init+0x27c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	bf94      	ite	ls
 8004fc0:	2301      	movls	r3, #1
 8004fc2:	2300      	movhi	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e0e7      	b.n	800519e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a78      	ldr	r2, [pc, #480]	; (80051b4 <HAL_I2C_Init+0x280>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	0c9b      	lsrs	r3, r3, #18
 8004fd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4a6a      	ldr	r2, [pc, #424]	; (80051a8 <HAL_I2C_Init+0x274>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d802      	bhi.n	8005008 <HAL_I2C_Init+0xd4>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	3301      	adds	r3, #1
 8005006:	e009      	b.n	800501c <HAL_I2C_Init+0xe8>
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800500e:	fb02 f303 	mul.w	r3, r2, r3
 8005012:	4a69      	ldr	r2, [pc, #420]	; (80051b8 <HAL_I2C_Init+0x284>)
 8005014:	fba2 2303 	umull	r2, r3, r2, r3
 8005018:	099b      	lsrs	r3, r3, #6
 800501a:	3301      	adds	r3, #1
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	430b      	orrs	r3, r1
 8005022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800502e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	495c      	ldr	r1, [pc, #368]	; (80051a8 <HAL_I2C_Init+0x274>)
 8005038:	428b      	cmp	r3, r1
 800503a:	d819      	bhi.n	8005070 <HAL_I2C_Init+0x13c>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	1e59      	subs	r1, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	fbb1 f3f3 	udiv	r3, r1, r3
 800504a:	1c59      	adds	r1, r3, #1
 800504c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005050:	400b      	ands	r3, r1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_I2C_Init+0x138>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1e59      	subs	r1, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	fbb1 f3f3 	udiv	r3, r1, r3
 8005064:	3301      	adds	r3, #1
 8005066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800506a:	e051      	b.n	8005110 <HAL_I2C_Init+0x1dc>
 800506c:	2304      	movs	r3, #4
 800506e:	e04f      	b.n	8005110 <HAL_I2C_Init+0x1dc>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d111      	bne.n	800509c <HAL_I2C_Init+0x168>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	1e58      	subs	r0, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6859      	ldr	r1, [r3, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	440b      	add	r3, r1
 8005086:	fbb0 f3f3 	udiv	r3, r0, r3
 800508a:	3301      	adds	r3, #1
 800508c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	e012      	b.n	80050c2 <HAL_I2C_Init+0x18e>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	1e58      	subs	r0, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6859      	ldr	r1, [r3, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	0099      	lsls	r1, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80050b2:	3301      	adds	r3, #1
 80050b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_I2C_Init+0x196>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e022      	b.n	8005110 <HAL_I2C_Init+0x1dc>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10e      	bne.n	80050f0 <HAL_I2C_Init+0x1bc>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1e58      	subs	r0, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6859      	ldr	r1, [r3, #4]
 80050da:	460b      	mov	r3, r1
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	440b      	add	r3, r1
 80050e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80050e4:	3301      	adds	r3, #1
 80050e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ee:	e00f      	b.n	8005110 <HAL_I2C_Init+0x1dc>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	1e58      	subs	r0, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	0099      	lsls	r1, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	fbb0 f3f3 	udiv	r3, r0, r3
 8005106:	3301      	adds	r3, #1
 8005108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800510c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	6809      	ldr	r1, [r1, #0]
 8005114:	4313      	orrs	r3, r2
 8005116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69da      	ldr	r2, [r3, #28]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800513e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6911      	ldr	r1, [r2, #16]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	68d2      	ldr	r2, [r2, #12]
 800514a:	4311      	orrs	r1, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	430b      	orrs	r3, r1
 8005152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695a      	ldr	r2, [r3, #20]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	000186a0 	.word	0x000186a0
 80051ac:	001e847f 	.word	0x001e847f
 80051b0:	003d08ff 	.word	0x003d08ff
 80051b4:	431bde83 	.word	0x431bde83
 80051b8:	10624dd3 	.word	0x10624dd3

080051bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e264      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d075      	beq.n	80052c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051da:	4ba3      	ldr	r3, [pc, #652]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d00c      	beq.n	8005200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051e6:	4ba0      	ldr	r3, [pc, #640]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d112      	bne.n	8005218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051f2:	4b9d      	ldr	r3, [pc, #628]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051fe:	d10b      	bne.n	8005218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005200:	4b99      	ldr	r3, [pc, #612]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d05b      	beq.n	80052c4 <HAL_RCC_OscConfig+0x108>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d157      	bne.n	80052c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e23f      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005220:	d106      	bne.n	8005230 <HAL_RCC_OscConfig+0x74>
 8005222:	4b91      	ldr	r3, [pc, #580]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a90      	ldr	r2, [pc, #576]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	e01d      	b.n	800526c <HAL_RCC_OscConfig+0xb0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005238:	d10c      	bne.n	8005254 <HAL_RCC_OscConfig+0x98>
 800523a:	4b8b      	ldr	r3, [pc, #556]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a8a      	ldr	r2, [pc, #552]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	4b88      	ldr	r3, [pc, #544]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a87      	ldr	r2, [pc, #540]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 800524c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e00b      	b.n	800526c <HAL_RCC_OscConfig+0xb0>
 8005254:	4b84      	ldr	r3, [pc, #528]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a83      	ldr	r2, [pc, #524]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 800525a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	4b81      	ldr	r3, [pc, #516]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a80      	ldr	r2, [pc, #512]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800526a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d013      	beq.n	800529c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005274:	f7fe fbec 	bl	8003a50 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800527c:	f7fe fbe8 	bl	8003a50 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b64      	cmp	r3, #100	; 0x64
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e204      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800528e:	4b76      	ldr	r3, [pc, #472]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0xc0>
 800529a:	e014      	b.n	80052c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529c:	f7fe fbd8 	bl	8003a50 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052a4:	f7fe fbd4 	bl	8003a50 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b64      	cmp	r3, #100	; 0x64
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e1f0      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052b6:	4b6c      	ldr	r3, [pc, #432]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0xe8>
 80052c2:	e000      	b.n	80052c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d063      	beq.n	800539a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052d2:	4b65      	ldr	r3, [pc, #404]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052de:	4b62      	ldr	r3, [pc, #392]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d11c      	bne.n	8005324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ea:	4b5f      	ldr	r3, [pc, #380]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d116      	bne.n	8005324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052f6:	4b5c      	ldr	r3, [pc, #368]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_RCC_OscConfig+0x152>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d001      	beq.n	800530e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e1c4      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530e:	4b56      	ldr	r3, [pc, #344]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	4952      	ldr	r1, [pc, #328]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 800531e:	4313      	orrs	r3, r2
 8005320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005322:	e03a      	b.n	800539a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d020      	beq.n	800536e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800532c:	4b4f      	ldr	r3, [pc, #316]	; (800546c <HAL_RCC_OscConfig+0x2b0>)
 800532e:	2201      	movs	r2, #1
 8005330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005332:	f7fe fb8d 	bl	8003a50 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800533a:	f7fe fb89 	bl	8003a50 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e1a5      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800534c:	4b46      	ldr	r3, [pc, #280]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0f0      	beq.n	800533a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005358:	4b43      	ldr	r3, [pc, #268]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4940      	ldr	r1, [pc, #256]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005368:	4313      	orrs	r3, r2
 800536a:	600b      	str	r3, [r1, #0]
 800536c:	e015      	b.n	800539a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800536e:	4b3f      	ldr	r3, [pc, #252]	; (800546c <HAL_RCC_OscConfig+0x2b0>)
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fe fb6c 	bl	8003a50 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800537c:	f7fe fb68 	bl	8003a50 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e184      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800538e:	4b36      	ldr	r3, [pc, #216]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f0      	bne.n	800537c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d030      	beq.n	8005408 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d016      	beq.n	80053dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ae:	4b30      	ldr	r3, [pc, #192]	; (8005470 <HAL_RCC_OscConfig+0x2b4>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b4:	f7fe fb4c 	bl	8003a50 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053bc:	f7fe fb48 	bl	8003a50 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e164      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ce:	4b26      	ldr	r3, [pc, #152]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 80053d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCC_OscConfig+0x200>
 80053da:	e015      	b.n	8005408 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053dc:	4b24      	ldr	r3, [pc, #144]	; (8005470 <HAL_RCC_OscConfig+0x2b4>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053e2:	f7fe fb35 	bl	8003a50 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ea:	f7fe fb31 	bl	8003a50 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e14d      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053fc:	4b1a      	ldr	r3, [pc, #104]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 80053fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1f0      	bne.n	80053ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80a0 	beq.w	8005556 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005416:	2300      	movs	r3, #0
 8005418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800541a:	4b13      	ldr	r3, [pc, #76]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10f      	bne.n	8005446 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005426:	2300      	movs	r3, #0
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	4b0f      	ldr	r3, [pc, #60]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	4a0e      	ldr	r2, [pc, #56]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005434:	6413      	str	r3, [r2, #64]	; 0x40
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <HAL_RCC_OscConfig+0x2ac>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005442:	2301      	movs	r3, #1
 8005444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <HAL_RCC_OscConfig+0x2b8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d121      	bne.n	8005496 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005452:	4b08      	ldr	r3, [pc, #32]	; (8005474 <HAL_RCC_OscConfig+0x2b8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a07      	ldr	r2, [pc, #28]	; (8005474 <HAL_RCC_OscConfig+0x2b8>)
 8005458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545e:	f7fe faf7 	bl	8003a50 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005464:	e011      	b.n	800548a <HAL_RCC_OscConfig+0x2ce>
 8005466:	bf00      	nop
 8005468:	40023800 	.word	0x40023800
 800546c:	42470000 	.word	0x42470000
 8005470:	42470e80 	.word	0x42470e80
 8005474:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005478:	f7fe faea 	bl	8003a50 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e106      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548a:	4b85      	ldr	r3, [pc, #532]	; (80056a0 <HAL_RCC_OscConfig+0x4e4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d106      	bne.n	80054ac <HAL_RCC_OscConfig+0x2f0>
 800549e:	4b81      	ldr	r3, [pc, #516]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 80054a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a2:	4a80      	ldr	r2, [pc, #512]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 80054a4:	f043 0301 	orr.w	r3, r3, #1
 80054a8:	6713      	str	r3, [r2, #112]	; 0x70
 80054aa:	e01c      	b.n	80054e6 <HAL_RCC_OscConfig+0x32a>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b05      	cmp	r3, #5
 80054b2:	d10c      	bne.n	80054ce <HAL_RCC_OscConfig+0x312>
 80054b4:	4b7b      	ldr	r3, [pc, #492]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	4a7a      	ldr	r2, [pc, #488]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 80054ba:	f043 0304 	orr.w	r3, r3, #4
 80054be:	6713      	str	r3, [r2, #112]	; 0x70
 80054c0:	4b78      	ldr	r3, [pc, #480]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 80054c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c4:	4a77      	ldr	r2, [pc, #476]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	6713      	str	r3, [r2, #112]	; 0x70
 80054cc:	e00b      	b.n	80054e6 <HAL_RCC_OscConfig+0x32a>
 80054ce:	4b75      	ldr	r3, [pc, #468]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 80054d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d2:	4a74      	ldr	r2, [pc, #464]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 80054d4:	f023 0301 	bic.w	r3, r3, #1
 80054d8:	6713      	str	r3, [r2, #112]	; 0x70
 80054da:	4b72      	ldr	r3, [pc, #456]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	4a71      	ldr	r2, [pc, #452]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 80054e0:	f023 0304 	bic.w	r3, r3, #4
 80054e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d015      	beq.n	800551a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ee:	f7fe faaf 	bl	8003a50 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f4:	e00a      	b.n	800550c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f6:	f7fe faab 	bl	8003a50 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	f241 3288 	movw	r2, #5000	; 0x1388
 8005504:	4293      	cmp	r3, r2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e0c5      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550c:	4b65      	ldr	r3, [pc, #404]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 800550e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0ee      	beq.n	80054f6 <HAL_RCC_OscConfig+0x33a>
 8005518:	e014      	b.n	8005544 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800551a:	f7fe fa99 	bl	8003a50 <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005520:	e00a      	b.n	8005538 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005522:	f7fe fa95 	bl	8003a50 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005530:	4293      	cmp	r3, r2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e0af      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005538:	4b5a      	ldr	r3, [pc, #360]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1ee      	bne.n	8005522 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005544:	7dfb      	ldrb	r3, [r7, #23]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d105      	bne.n	8005556 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800554a:	4b56      	ldr	r3, [pc, #344]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	4a55      	ldr	r2, [pc, #340]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 8005550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005554:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 809b 	beq.w	8005696 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005560:	4b50      	ldr	r3, [pc, #320]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 030c 	and.w	r3, r3, #12
 8005568:	2b08      	cmp	r3, #8
 800556a:	d05c      	beq.n	8005626 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	2b02      	cmp	r3, #2
 8005572:	d141      	bne.n	80055f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005574:	4b4c      	ldr	r3, [pc, #304]	; (80056a8 <HAL_RCC_OscConfig+0x4ec>)
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557a:	f7fe fa69 	bl	8003a50 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005582:	f7fe fa65 	bl	8003a50 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e081      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005594:	4b43      	ldr	r3, [pc, #268]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f0      	bne.n	8005582 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	019b      	lsls	r3, r3, #6
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	3b01      	subs	r3, #1
 80055ba:	041b      	lsls	r3, r3, #16
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	061b      	lsls	r3, r3, #24
 80055c4:	4937      	ldr	r1, [pc, #220]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055ca:	4b37      	ldr	r3, [pc, #220]	; (80056a8 <HAL_RCC_OscConfig+0x4ec>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d0:	f7fe fa3e 	bl	8003a50 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d8:	f7fe fa3a 	bl	8003a50 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e056      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ea:	4b2e      	ldr	r3, [pc, #184]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0x41c>
 80055f6:	e04e      	b.n	8005696 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f8:	4b2b      	ldr	r3, [pc, #172]	; (80056a8 <HAL_RCC_OscConfig+0x4ec>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fe:	f7fe fa27 	bl	8003a50 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005606:	f7fe fa23 	bl	8003a50 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e03f      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005618:	4b22      	ldr	r3, [pc, #136]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1f0      	bne.n	8005606 <HAL_RCC_OscConfig+0x44a>
 8005624:	e037      	b.n	8005696 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e032      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005632:	4b1c      	ldr	r3, [pc, #112]	; (80056a4 <HAL_RCC_OscConfig+0x4e8>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d028      	beq.n	8005692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d121      	bne.n	8005692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005658:	429a      	cmp	r2, r3
 800565a:	d11a      	bne.n	8005692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005662:	4013      	ands	r3, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005668:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800566a:	4293      	cmp	r3, r2
 800566c:	d111      	bne.n	8005692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	3b01      	subs	r3, #1
 800567c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800567e:	429a      	cmp	r2, r3
 8005680:	d107      	bne.n	8005692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800568e:	429a      	cmp	r2, r3
 8005690:	d001      	beq.n	8005696 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40007000 	.word	0x40007000
 80056a4:	40023800 	.word	0x40023800
 80056a8:	42470060 	.word	0x42470060

080056ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0cc      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056c0:	4b68      	ldr	r3, [pc, #416]	; (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d90c      	bls.n	80056e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ce:	4b65      	ldr	r3, [pc, #404]	; (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d6:	4b63      	ldr	r3, [pc, #396]	; (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0b8      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d020      	beq.n	8005736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005700:	4b59      	ldr	r3, [pc, #356]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	4a58      	ldr	r2, [pc, #352]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800570a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005718:	4b53      	ldr	r3, [pc, #332]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	4a52      	ldr	r2, [pc, #328]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005724:	4b50      	ldr	r3, [pc, #320]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	494d      	ldr	r1, [pc, #308]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d044      	beq.n	80057cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d107      	bne.n	800575a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800574a:	4b47      	ldr	r3, [pc, #284]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d119      	bne.n	800578a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e07f      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d003      	beq.n	800576a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005766:	2b03      	cmp	r3, #3
 8005768:	d107      	bne.n	800577a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576a:	4b3f      	ldr	r3, [pc, #252]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e06f      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577a:	4b3b      	ldr	r3, [pc, #236]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e067      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800578a:	4b37      	ldr	r3, [pc, #220]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f023 0203 	bic.w	r2, r3, #3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4934      	ldr	r1, [pc, #208]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005798:	4313      	orrs	r3, r2
 800579a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800579c:	f7fe f958 	bl	8003a50 <HAL_GetTick>
 80057a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a2:	e00a      	b.n	80057ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a4:	f7fe f954 	bl	8003a50 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e04f      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ba:	4b2b      	ldr	r3, [pc, #172]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 020c 	and.w	r2, r3, #12
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d1eb      	bne.n	80057a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057cc:	4b25      	ldr	r3, [pc, #148]	; (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d20c      	bcs.n	80057f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057da:	4b22      	ldr	r3, [pc, #136]	; (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e2:	4b20      	ldr	r3, [pc, #128]	; (8005864 <HAL_RCC_ClockConfig+0x1b8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d001      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e032      	b.n	800585a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d008      	beq.n	8005812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005800:	4b19      	ldr	r3, [pc, #100]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	4916      	ldr	r1, [pc, #88]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800581e:	4b12      	ldr	r3, [pc, #72]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	490e      	ldr	r1, [pc, #56]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	4313      	orrs	r3, r2
 8005830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005832:	f000 f821 	bl	8005878 <HAL_RCC_GetSysClockFreq>
 8005836:	4602      	mov	r2, r0
 8005838:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	091b      	lsrs	r3, r3, #4
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	490a      	ldr	r1, [pc, #40]	; (800586c <HAL_RCC_ClockConfig+0x1c0>)
 8005844:	5ccb      	ldrb	r3, [r1, r3]
 8005846:	fa22 f303 	lsr.w	r3, r2, r3
 800584a:	4a09      	ldr	r2, [pc, #36]	; (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 800584c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <HAL_RCC_ClockConfig+0x1c8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f7fe f8b8 	bl	80039c8 <HAL_InitTick>

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40023c00 	.word	0x40023c00
 8005868:	40023800 	.word	0x40023800
 800586c:	08015ec0 	.word	0x08015ec0
 8005870:	20000014 	.word	0x20000014
 8005874:	20000018 	.word	0x20000018

08005878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005878:	b5b0      	push	{r4, r5, r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800587e:	2100      	movs	r1, #0
 8005880:	6079      	str	r1, [r7, #4]
 8005882:	2100      	movs	r1, #0
 8005884:	60f9      	str	r1, [r7, #12]
 8005886:	2100      	movs	r1, #0
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800588a:	2100      	movs	r1, #0
 800588c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800588e:	4952      	ldr	r1, [pc, #328]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005890:	6889      	ldr	r1, [r1, #8]
 8005892:	f001 010c 	and.w	r1, r1, #12
 8005896:	2908      	cmp	r1, #8
 8005898:	d00d      	beq.n	80058b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800589a:	2908      	cmp	r1, #8
 800589c:	f200 8094 	bhi.w	80059c8 <HAL_RCC_GetSysClockFreq+0x150>
 80058a0:	2900      	cmp	r1, #0
 80058a2:	d002      	beq.n	80058aa <HAL_RCC_GetSysClockFreq+0x32>
 80058a4:	2904      	cmp	r1, #4
 80058a6:	d003      	beq.n	80058b0 <HAL_RCC_GetSysClockFreq+0x38>
 80058a8:	e08e      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058aa:	4b4c      	ldr	r3, [pc, #304]	; (80059dc <HAL_RCC_GetSysClockFreq+0x164>)
 80058ac:	60bb      	str	r3, [r7, #8]
       break;
 80058ae:	e08e      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058b0:	4b4b      	ldr	r3, [pc, #300]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80058b2:	60bb      	str	r3, [r7, #8]
      break;
 80058b4:	e08b      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058b6:	4948      	ldr	r1, [pc, #288]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80058b8:	6849      	ldr	r1, [r1, #4]
 80058ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80058be:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058c0:	4945      	ldr	r1, [pc, #276]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80058c2:	6849      	ldr	r1, [r1, #4]
 80058c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80058c8:	2900      	cmp	r1, #0
 80058ca:	d024      	beq.n	8005916 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058cc:	4942      	ldr	r1, [pc, #264]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80058ce:	6849      	ldr	r1, [r1, #4]
 80058d0:	0989      	lsrs	r1, r1, #6
 80058d2:	4608      	mov	r0, r1
 80058d4:	f04f 0100 	mov.w	r1, #0
 80058d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80058dc:	f04f 0500 	mov.w	r5, #0
 80058e0:	ea00 0204 	and.w	r2, r0, r4
 80058e4:	ea01 0305 	and.w	r3, r1, r5
 80058e8:	493d      	ldr	r1, [pc, #244]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80058ea:	fb01 f003 	mul.w	r0, r1, r3
 80058ee:	2100      	movs	r1, #0
 80058f0:	fb01 f102 	mul.w	r1, r1, r2
 80058f4:	1844      	adds	r4, r0, r1
 80058f6:	493a      	ldr	r1, [pc, #232]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80058f8:	fba2 0101 	umull	r0, r1, r2, r1
 80058fc:	1863      	adds	r3, r4, r1
 80058fe:	4619      	mov	r1, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	461a      	mov	r2, r3
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	f7fb f8a8 	bl	8000a5c <__aeabi_uldivmod>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4613      	mov	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	e04a      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005916:	4b30      	ldr	r3, [pc, #192]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	099b      	lsrs	r3, r3, #6
 800591c:	461a      	mov	r2, r3
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005926:	f04f 0100 	mov.w	r1, #0
 800592a:	ea02 0400 	and.w	r4, r2, r0
 800592e:	ea03 0501 	and.w	r5, r3, r1
 8005932:	4620      	mov	r0, r4
 8005934:	4629      	mov	r1, r5
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	014b      	lsls	r3, r1, #5
 8005940:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005944:	0142      	lsls	r2, r0, #5
 8005946:	4610      	mov	r0, r2
 8005948:	4619      	mov	r1, r3
 800594a:	1b00      	subs	r0, r0, r4
 800594c:	eb61 0105 	sbc.w	r1, r1, r5
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	018b      	lsls	r3, r1, #6
 800595a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800595e:	0182      	lsls	r2, r0, #6
 8005960:	1a12      	subs	r2, r2, r0
 8005962:	eb63 0301 	sbc.w	r3, r3, r1
 8005966:	f04f 0000 	mov.w	r0, #0
 800596a:	f04f 0100 	mov.w	r1, #0
 800596e:	00d9      	lsls	r1, r3, #3
 8005970:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005974:	00d0      	lsls	r0, r2, #3
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	1912      	adds	r2, r2, r4
 800597c:	eb45 0303 	adc.w	r3, r5, r3
 8005980:	f04f 0000 	mov.w	r0, #0
 8005984:	f04f 0100 	mov.w	r1, #0
 8005988:	0299      	lsls	r1, r3, #10
 800598a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800598e:	0290      	lsls	r0, r2, #10
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4610      	mov	r0, r2
 8005996:	4619      	mov	r1, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	461a      	mov	r2, r3
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	f7fb f85c 	bl	8000a5c <__aeabi_uldivmod>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4613      	mov	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	3301      	adds	r3, #1
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	60bb      	str	r3, [r7, #8]
      break;
 80059c6:	e002      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059c8:	4b04      	ldr	r3, [pc, #16]	; (80059dc <HAL_RCC_GetSysClockFreq+0x164>)
 80059ca:	60bb      	str	r3, [r7, #8]
      break;
 80059cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ce:	68bb      	ldr	r3, [r7, #8]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bdb0      	pop	{r4, r5, r7, pc}
 80059d8:	40023800 	.word	0x40023800
 80059dc:	00f42400 	.word	0x00f42400
 80059e0:	017d7840 	.word	0x017d7840

080059e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059e8:	4b03      	ldr	r3, [pc, #12]	; (80059f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80059ea:	681b      	ldr	r3, [r3, #0]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000014 	.word	0x20000014

080059fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a00:	f7ff fff0 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	0a9b      	lsrs	r3, r3, #10
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	4903      	ldr	r1, [pc, #12]	; (8005a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a12:	5ccb      	ldrb	r3, [r1, r3]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	08015ed0 	.word	0x08015ed0

08005a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a28:	f7ff ffdc 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	0b5b      	lsrs	r3, r3, #13
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	4903      	ldr	r1, [pc, #12]	; (8005a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a3a:	5ccb      	ldrb	r3, [r1, r3]
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40023800 	.word	0x40023800
 8005a48:	08015ed0 	.word	0x08015ed0

08005a4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d105      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d035      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a74:	4b67      	ldr	r3, [pc, #412]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a7a:	f7fd ffe9 	bl	8003a50 <HAL_GetTick>
 8005a7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a80:	e008      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a82:	f7fd ffe5 	bl	8003a50 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e0ba      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a94:	4b60      	ldr	r3, [pc, #384]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f0      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	019a      	lsls	r2, r3, #6
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	071b      	lsls	r3, r3, #28
 8005aac:	495a      	ldr	r1, [pc, #360]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ab4:	4b57      	ldr	r3, [pc, #348]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005aba:	f7fd ffc9 	bl	8003a50 <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ac2:	f7fd ffc5 	bl	8003a50 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e09a      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ad4:	4b50      	ldr	r3, [pc, #320]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f0      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 8083 	beq.w	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	4b49      	ldr	r3, [pc, #292]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	4a48      	ldr	r2, [pc, #288]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afc:	6413      	str	r3, [r2, #64]	; 0x40
 8005afe:	4b46      	ldr	r3, [pc, #280]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b0a:	4b44      	ldr	r3, [pc, #272]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a43      	ldr	r2, [pc, #268]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b16:	f7fd ff9b 	bl	8003a50 <HAL_GetTick>
 8005b1a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b1e:	f7fd ff97 	bl	8003a50 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e06c      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b30:	4b3a      	ldr	r3, [pc, #232]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0f0      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b3c:	4b36      	ldr	r3, [pc, #216]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b44:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d02f      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d028      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b64:	4b2e      	ldr	r3, [pc, #184]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b6a:	4b2d      	ldr	r3, [pc, #180]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b70:	4a29      	ldr	r2, [pc, #164]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b76:	4b28      	ldr	r3, [pc, #160]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d114      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b82:	f7fd ff65 	bl	8003a50 <HAL_GetTick>
 8005b86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b88:	e00a      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8a:	f7fd ff61 	bl	8003a50 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e034      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba0:	4b1d      	ldr	r3, [pc, #116]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0ee      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bb8:	d10d      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005bba:	4b17      	ldr	r3, [pc, #92]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bce:	4912      	ldr	r1, [pc, #72]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	608b      	str	r3, [r1, #8]
 8005bd4:	e005      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bd6:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	4a0f      	ldr	r2, [pc, #60]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bdc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005be0:	6093      	str	r3, [r2, #8]
 8005be2:	4b0d      	ldr	r3, [pc, #52]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005be4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bee:	490a      	ldr	r1, [pc, #40]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	7c1a      	ldrb	r2, [r3, #16]
 8005c04:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c06:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	42470068 	.word	0x42470068
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	40007000 	.word	0x40007000
 8005c20:	42470e40 	.word	0x42470e40
 8005c24:	424711e0 	.word	0x424711e0

08005c28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e083      	b.n	8005d42 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	7f5b      	ldrb	r3, [r3, #29]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d105      	bne.n	8005c50 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fd fa60 	bl	8003110 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	22ca      	movs	r2, #202	; 0xca
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2253      	movs	r2, #83	; 0x53
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f897 	bl	8005d9a <RTC_EnterInitMode>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	22ff      	movs	r2, #255	; 0xff
 8005c78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e05e      	b.n	8005d42 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c96:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6899      	ldr	r1, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	68d2      	ldr	r2, [r2, #12]
 8005cbe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6919      	ldr	r1, [r3, #16]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	041a      	lsls	r2, r3, #16
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ce2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10e      	bne.n	8005d10 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f829 	bl	8005d4a <HAL_RTC_WaitForSynchro>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d008      	beq.n	8005d10 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	22ff      	movs	r2, #255	; 0xff
 8005d04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2204      	movs	r2, #4
 8005d0a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e018      	b.n	8005d42 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d1e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	22ff      	movs	r2, #255	; 0xff
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005d40:	2300      	movs	r3, #0
  }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d66:	f7fd fe73 	bl	8003a50 <HAL_GetTick>
 8005d6a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005d6c:	e009      	b.n	8005d82 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d6e:	f7fd fe6f 	bl	8003a50 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d7c:	d901      	bls.n	8005d82 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e007      	b.n	8005d92 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0ee      	beq.n	8005d6e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d119      	bne.n	8005de8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dbe:	f7fd fe47 	bl	8003a50 <HAL_GetTick>
 8005dc2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005dc4:	e009      	b.n	8005dda <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005dc6:	f7fd fe43 	bl	8003a50 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dd4:	d901      	bls.n	8005dda <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e007      	b.n	8005dea <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0ee      	beq.n	8005dc6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e07b      	b.n	8005efc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d108      	bne.n	8005e1e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e14:	d009      	beq.n	8005e2a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	61da      	str	r2, [r3, #28]
 8005e1c:	e005      	b.n	8005e2a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7fd f9fb 	bl	8003240 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eae:	ea42 0103 	orr.w	r1, r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	0c1b      	lsrs	r3, r3, #16
 8005ec8:	f003 0104 	and.w	r1, r3, #4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	f003 0210 	and.w	r2, r3, #16
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69da      	ldr	r2, [r3, #28]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_SPI_Transmit+0x22>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e126      	b.n	8006174 <HAL_SPI_Transmit+0x270>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f2e:	f7fd fd8f 	bl	8003a50 <HAL_GetTick>
 8005f32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d002      	beq.n	8005f4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
 8005f46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f48:	e10b      	b.n	8006162 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <HAL_SPI_Transmit+0x52>
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f5a:	e102      	b.n	8006162 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2203      	movs	r2, #3
 8005f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	88fa      	ldrh	r2, [r7, #6]
 8005f74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	88fa      	ldrh	r2, [r7, #6]
 8005f7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa2:	d10f      	bne.n	8005fc4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fce:	2b40      	cmp	r3, #64	; 0x40
 8005fd0:	d007      	beq.n	8005fe2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fea:	d14b      	bne.n	8006084 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <HAL_SPI_Transmit+0xf6>
 8005ff4:	8afb      	ldrh	r3, [r7, #22]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d13e      	bne.n	8006078 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	881a      	ldrh	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	1c9a      	adds	r2, r3, #2
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800601e:	e02b      	b.n	8006078 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b02      	cmp	r3, #2
 800602c:	d112      	bne.n	8006054 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	881a      	ldrh	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603e:	1c9a      	adds	r2, r3, #2
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	86da      	strh	r2, [r3, #54]	; 0x36
 8006052:	e011      	b.n	8006078 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006054:	f7fd fcfc 	bl	8003a50 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d803      	bhi.n	800606c <HAL_SPI_Transmit+0x168>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d102      	bne.n	8006072 <HAL_SPI_Transmit+0x16e>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006076:	e074      	b.n	8006162 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1ce      	bne.n	8006020 <HAL_SPI_Transmit+0x11c>
 8006082:	e04c      	b.n	800611e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <HAL_SPI_Transmit+0x18e>
 800608c:	8afb      	ldrh	r3, [r7, #22]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d140      	bne.n	8006114 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	330c      	adds	r3, #12
 800609c:	7812      	ldrb	r2, [r2, #0]
 800609e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060b8:	e02c      	b.n	8006114 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d113      	bne.n	80060f0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	7812      	ldrb	r2, [r2, #0]
 80060d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80060ee:	e011      	b.n	8006114 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060f0:	f7fd fcae 	bl	8003a50 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d803      	bhi.n	8006108 <HAL_SPI_Transmit+0x204>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d102      	bne.n	800610e <HAL_SPI_Transmit+0x20a>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d102      	bne.n	8006114 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006112:	e026      	b.n	8006162 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1cd      	bne.n	80060ba <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 fba0 	bl	8006868 <SPI_EndRxTxTransaction>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800613c:	2300      	movs	r3, #0
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	613b      	str	r3, [r7, #16]
 8006150:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e000      	b.n	8006162 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006160:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006172:	7ffb      	ldrb	r3, [r7, #31]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3720      	adds	r7, #32
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08c      	sub	sp, #48	; 0x30
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800618a:	2301      	movs	r3, #1
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <HAL_SPI_TransmitReceive+0x26>
 800619e:	2302      	movs	r3, #2
 80061a0:	e18a      	b.n	80064b8 <HAL_SPI_TransmitReceive+0x33c>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061aa:	f7fd fc51 	bl	8003a50 <HAL_GetTick>
 80061ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061c0:	887b      	ldrh	r3, [r7, #2]
 80061c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d00f      	beq.n	80061ec <HAL_SPI_TransmitReceive+0x70>
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061d2:	d107      	bne.n	80061e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d103      	bne.n	80061e4 <HAL_SPI_TransmitReceive+0x68>
 80061dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d003      	beq.n	80061ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80061e4:	2302      	movs	r3, #2
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061ea:	e15b      	b.n	80064a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_SPI_TransmitReceive+0x82>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <HAL_SPI_TransmitReceive+0x82>
 80061f8:	887b      	ldrh	r3, [r7, #2]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006204:	e14e      	b.n	80064a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b04      	cmp	r3, #4
 8006210:	d003      	beq.n	800621a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2205      	movs	r2, #5
 8006216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	887a      	ldrh	r2, [r7, #2]
 800622a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	887a      	ldrh	r2, [r7, #2]
 8006230:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	887a      	ldrh	r2, [r7, #2]
 800623c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	887a      	ldrh	r2, [r7, #2]
 8006242:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	d007      	beq.n	800626e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800626c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006276:	d178      	bne.n	800636a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_SPI_TransmitReceive+0x10a>
 8006280:	8b7b      	ldrh	r3, [r7, #26]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d166      	bne.n	8006354 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	881a      	ldrh	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	1c9a      	adds	r2, r3, #2
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062aa:	e053      	b.n	8006354 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d11b      	bne.n	80062f2 <HAL_SPI_TransmitReceive+0x176>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d016      	beq.n	80062f2 <HAL_SPI_TransmitReceive+0x176>
 80062c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d113      	bne.n	80062f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ce:	881a      	ldrh	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062da:	1c9a      	adds	r2, r3, #2
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d119      	bne.n	8006334 <HAL_SPI_TransmitReceive+0x1b8>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d014      	beq.n	8006334 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	b292      	uxth	r2, r2
 8006316:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	1c9a      	adds	r2, r3, #2
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006330:	2301      	movs	r3, #1
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006334:	f7fd fb8c 	bl	8003a50 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006340:	429a      	cmp	r2, r3
 8006342:	d807      	bhi.n	8006354 <HAL_SPI_TransmitReceive+0x1d8>
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634a:	d003      	beq.n	8006354 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006352:	e0a7      	b.n	80064a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1a6      	bne.n	80062ac <HAL_SPI_TransmitReceive+0x130>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1a1      	bne.n	80062ac <HAL_SPI_TransmitReceive+0x130>
 8006368:	e07c      	b.n	8006464 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x1fc>
 8006372:	8b7b      	ldrh	r3, [r7, #26]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d16b      	bne.n	8006450 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	330c      	adds	r3, #12
 8006382:	7812      	ldrb	r2, [r2, #0]
 8006384:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800639e:	e057      	b.n	8006450 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d11c      	bne.n	80063e8 <HAL_SPI_TransmitReceive+0x26c>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d017      	beq.n	80063e8 <HAL_SPI_TransmitReceive+0x26c>
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d114      	bne.n	80063e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	330c      	adds	r3, #12
 80063c8:	7812      	ldrb	r2, [r2, #0]
 80063ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d119      	bne.n	800642a <HAL_SPI_TransmitReceive+0x2ae>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d014      	beq.n	800642a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006426:	2301      	movs	r3, #1
 8006428:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800642a:	f7fd fb11 	bl	8003a50 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006436:	429a      	cmp	r2, r3
 8006438:	d803      	bhi.n	8006442 <HAL_SPI_TransmitReceive+0x2c6>
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d102      	bne.n	8006448 <HAL_SPI_TransmitReceive+0x2cc>
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	2b00      	cmp	r3, #0
 8006446:	d103      	bne.n	8006450 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800644e:	e029      	b.n	80064a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1a2      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x224>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d19d      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006466:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f9fd 	bl	8006868 <SPI_EndRxTxTransaction>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d006      	beq.n	8006482 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2220      	movs	r2, #32
 800647e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006480:	e010      	b.n	80064a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	617b      	str	r3, [r7, #20]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	e000      	b.n	80064a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3730      	adds	r7, #48	; 0x30
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_SPI_Transmit_DMA+0x20>
 80064dc:	2302      	movs	r3, #2
 80064de:	e09b      	b.n	8006618 <HAL_SPI_Transmit_DMA+0x158>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d002      	beq.n	80064fa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80064f4:	2302      	movs	r3, #2
 80064f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064f8:	e089      	b.n	800660e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <HAL_SPI_Transmit_DMA+0x46>
 8006500:	88fb      	ldrh	r3, [r7, #6]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d102      	bne.n	800650c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	75fb      	strb	r3, [r7, #23]
    goto error;
 800650a:	e080      	b.n	800660e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2203      	movs	r2, #3
 8006510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	88fa      	ldrh	r2, [r7, #6]
 8006524:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	88fa      	ldrh	r2, [r7, #6]
 800652a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006552:	d10f      	bne.n	8006574 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006562:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006572:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006578:	4a29      	ldr	r2, [pc, #164]	; (8006620 <HAL_SPI_Transmit_DMA+0x160>)
 800657a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006580:	4a28      	ldr	r2, [pc, #160]	; (8006624 <HAL_SPI_Transmit_DMA+0x164>)
 8006582:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006588:	4a27      	ldr	r2, [pc, #156]	; (8006628 <HAL_SPI_Transmit_DMA+0x168>)
 800658a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006590:	2200      	movs	r2, #0
 8006592:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	4619      	mov	r1, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80065ac:	f7fe f832 	bl	8004614 <HAL_DMA_Start_IT>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00c      	beq.n	80065d0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ba:	f043 0210 	orr.w	r2, r3, #16
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80065ce:	e01e      	b.n	800660e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d007      	beq.n	80065ee <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0220 	orr.w	r2, r2, #32
 80065fc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0202 	orr.w	r2, r2, #2
 800660c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006616:	7dfb      	ldrb	r3, [r7, #23]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	080066fd 	.word	0x080066fd
 8006624:	08006655 	.word	0x08006655
 8006628:	08006719 	.word	0x08006719

0800662c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006662:	f7fd f9f5 	bl	8003a50 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006676:	d03b      	beq.n	80066f0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0220 	bic.w	r2, r2, #32
 8006686:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0202 	bic.w	r2, r2, #2
 8006696:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	2164      	movs	r1, #100	; 0x64
 800669c:	6978      	ldr	r0, [r7, #20]
 800669e:	f000 f8e3 	bl	8006868 <SPI_EndRxTxTransaction>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ac:	f043 0220 	orr.w	r2, r3, #32
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2200      	movs	r2, #0
 80066d6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80066e8:	6978      	ldr	r0, [r7, #20]
 80066ea:	f7ff ffa9 	bl	8006640 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80066ee:	e002      	b.n	80066f6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80066f0:	6978      	ldr	r0, [r7, #20]
 80066f2:	f7fc f8df 	bl	80028b4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff ff8e 	bl	800662c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0203 	bic.w	r2, r2, #3
 8006734:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673a:	f043 0210 	orr.w	r2, r3, #16
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff ff78 	bl	8006640 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	4613      	mov	r3, r2
 8006766:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006768:	f7fd f972 	bl	8003a50 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	1a9b      	subs	r3, r3, r2
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	4413      	add	r3, r2
 8006776:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006778:	f7fd f96a 	bl	8003a50 <HAL_GetTick>
 800677c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800677e:	4b39      	ldr	r3, [pc, #228]	; (8006864 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	015b      	lsls	r3, r3, #5
 8006784:	0d1b      	lsrs	r3, r3, #20
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	fb02 f303 	mul.w	r3, r2, r3
 800678c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800678e:	e054      	b.n	800683a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006796:	d050      	beq.n	800683a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006798:	f7fd f95a 	bl	8003a50 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d902      	bls.n	80067ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d13d      	bne.n	800682a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067c6:	d111      	bne.n	80067ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d0:	d004      	beq.n	80067dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067da:	d107      	bne.n	80067ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f4:	d10f      	bne.n	8006816 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006814:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e017      	b.n	800685a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	3b01      	subs	r3, #1
 8006838:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4013      	ands	r3, r2
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	429a      	cmp	r2, r3
 8006848:	bf0c      	ite	eq
 800684a:	2301      	moveq	r3, #1
 800684c:	2300      	movne	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	429a      	cmp	r2, r3
 8006856:	d19b      	bne.n	8006790 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3720      	adds	r7, #32
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20000014 	.word	0x20000014

08006868 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af02      	add	r7, sp, #8
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006874:	4b1b      	ldr	r3, [pc, #108]	; (80068e4 <SPI_EndRxTxTransaction+0x7c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <SPI_EndRxTxTransaction+0x80>)
 800687a:	fba2 2303 	umull	r2, r3, r2, r3
 800687e:	0d5b      	lsrs	r3, r3, #21
 8006880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006884:	fb02 f303 	mul.w	r3, r2, r3
 8006888:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006892:	d112      	bne.n	80068ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2200      	movs	r2, #0
 800689c:	2180      	movs	r1, #128	; 0x80
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7ff ff5a 	bl	8006758 <SPI_WaitFlagStateUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d016      	beq.n	80068d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ae:	f043 0220 	orr.w	r2, r3, #32
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e00f      	b.n	80068da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00a      	beq.n	80068d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d0:	2b80      	cmp	r3, #128	; 0x80
 80068d2:	d0f2      	beq.n	80068ba <SPI_EndRxTxTransaction+0x52>
 80068d4:	e000      	b.n	80068d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80068d6:	bf00      	nop
  }

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000014 	.word	0x20000014
 80068e8:	165e9f81 	.word	0x165e9f81

080068ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e097      	b.n	8006a30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d106      	bne.n	800691a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7fc ff33 	bl	8003780 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006930:	f023 0307 	bic.w	r3, r3, #7
 8006934:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3304      	adds	r3, #4
 800693e:	4619      	mov	r1, r3
 8006940:	4610      	mov	r0, r2
 8006942:	f000 f907 	bl	8006b54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696e:	f023 0303 	bic.w	r3, r3, #3
 8006972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	4313      	orrs	r3, r2
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	4313      	orrs	r3, r2
 8006984:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800698c:	f023 030c 	bic.w	r3, r3, #12
 8006990:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800699c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	4313      	orrs	r3, r2
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	011a      	lsls	r2, r3, #4
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	031b      	lsls	r3, r3, #12
 80069bc:	4313      	orrs	r3, r2
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80069ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80069d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	011b      	lsls	r3, r3, #4
 80069de:	4313      	orrs	r3, r2
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d110      	bne.n	8006a8a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d102      	bne.n	8006a74 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a6e:	7b7b      	ldrb	r3, [r7, #13]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d001      	beq.n	8006a78 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e069      	b.n	8006b4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a88:	e031      	b.n	8006aee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d110      	bne.n	8006ab2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d102      	bne.n	8006a9c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a96:	7b3b      	ldrb	r3, [r7, #12]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d001      	beq.n	8006aa0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e055      	b.n	8006b4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ab0:	e01d      	b.n	8006aee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d108      	bne.n	8006aca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d105      	bne.n	8006aca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006abe:	7b7b      	ldrb	r3, [r7, #13]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d102      	bne.n	8006aca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ac4:	7b3b      	ldrb	r3, [r7, #12]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d001      	beq.n	8006ace <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e03e      	b.n	8006b4c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_TIM_Encoder_Start+0xc4>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d008      	beq.n	8006b0c <HAL_TIM_Encoder_Start+0xd4>
 8006afa:	e00f      	b.n	8006b1c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2201      	movs	r2, #1
 8006b02:	2100      	movs	r1, #0
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 f8a5 	bl	8006c54 <TIM_CCxChannelCmd>
      break;
 8006b0a:	e016      	b.n	8006b3a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2201      	movs	r2, #1
 8006b12:	2104      	movs	r1, #4
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 f89d 	bl	8006c54 <TIM_CCxChannelCmd>
      break;
 8006b1a:	e00e      	b.n	8006b3a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2201      	movs	r2, #1
 8006b22:	2100      	movs	r1, #0
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 f895 	bl	8006c54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	2104      	movs	r1, #4
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 f88e 	bl	8006c54 <TIM_CCxChannelCmd>
      break;
 8006b38:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f042 0201 	orr.w	r2, r2, #1
 8006b48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a34      	ldr	r2, [pc, #208]	; (8006c38 <TIM_Base_SetConfig+0xe4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d00f      	beq.n	8006b8c <TIM_Base_SetConfig+0x38>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b72:	d00b      	beq.n	8006b8c <TIM_Base_SetConfig+0x38>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a31      	ldr	r2, [pc, #196]	; (8006c3c <TIM_Base_SetConfig+0xe8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d007      	beq.n	8006b8c <TIM_Base_SetConfig+0x38>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a30      	ldr	r2, [pc, #192]	; (8006c40 <TIM_Base_SetConfig+0xec>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d003      	beq.n	8006b8c <TIM_Base_SetConfig+0x38>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a2f      	ldr	r2, [pc, #188]	; (8006c44 <TIM_Base_SetConfig+0xf0>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d108      	bne.n	8006b9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a25      	ldr	r2, [pc, #148]	; (8006c38 <TIM_Base_SetConfig+0xe4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d01b      	beq.n	8006bde <TIM_Base_SetConfig+0x8a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bac:	d017      	beq.n	8006bde <TIM_Base_SetConfig+0x8a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a22      	ldr	r2, [pc, #136]	; (8006c3c <TIM_Base_SetConfig+0xe8>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d013      	beq.n	8006bde <TIM_Base_SetConfig+0x8a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a21      	ldr	r2, [pc, #132]	; (8006c40 <TIM_Base_SetConfig+0xec>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00f      	beq.n	8006bde <TIM_Base_SetConfig+0x8a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a20      	ldr	r2, [pc, #128]	; (8006c44 <TIM_Base_SetConfig+0xf0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00b      	beq.n	8006bde <TIM_Base_SetConfig+0x8a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a1f      	ldr	r2, [pc, #124]	; (8006c48 <TIM_Base_SetConfig+0xf4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d007      	beq.n	8006bde <TIM_Base_SetConfig+0x8a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a1e      	ldr	r2, [pc, #120]	; (8006c4c <TIM_Base_SetConfig+0xf8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d003      	beq.n	8006bde <TIM_Base_SetConfig+0x8a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a1d      	ldr	r2, [pc, #116]	; (8006c50 <TIM_Base_SetConfig+0xfc>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d108      	bne.n	8006bf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a08      	ldr	r2, [pc, #32]	; (8006c38 <TIM_Base_SetConfig+0xe4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d103      	bne.n	8006c24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	615a      	str	r2, [r3, #20]
}
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40000400 	.word	0x40000400
 8006c40:	40000800 	.word	0x40000800
 8006c44:	40000c00 	.word	0x40000c00
 8006c48:	40014000 	.word	0x40014000
 8006c4c:	40014400 	.word	0x40014400
 8006c50:	40014800 	.word	0x40014800

08006c54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f003 031f 	and.w	r3, r3, #31
 8006c66:	2201      	movs	r2, #1
 8006c68:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6a1a      	ldr	r2, [r3, #32]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	43db      	mvns	r3, r3
 8006c76:	401a      	ands	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a1a      	ldr	r2, [r3, #32]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	fa01 f303 	lsl.w	r3, r1, r3
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	621a      	str	r2, [r3, #32]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
	...

08006ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e050      	b.n	8006d5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1c      	ldr	r2, [pc, #112]	; (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d018      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d04:	d013      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a18      	ldr	r2, [pc, #96]	; (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a16      	ldr	r2, [pc, #88]	; (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a15      	ldr	r2, [pc, #84]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d10c      	bne.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40010000 	.word	0x40010000
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40000800 	.word	0x40000800
 8006d74:	40000c00 	.word	0x40000c00
 8006d78:	40014000 	.word	0x40014000

08006d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e03f      	b.n	8006e0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fc fd7c 	bl	80038a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2224      	movs	r2, #36	; 0x24
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f929 	bl	8007018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695a      	ldr	r2, [r3, #20]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b08a      	sub	sp, #40	; 0x28
 8006e1a:	af02      	add	r7, sp, #8
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	603b      	str	r3, [r7, #0]
 8006e22:	4613      	mov	r3, r2
 8006e24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	d17c      	bne.n	8006f30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <HAL_UART_Transmit+0x2c>
 8006e3c:	88fb      	ldrh	r3, [r7, #6]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e075      	b.n	8006f32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_UART_Transmit+0x3e>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e06e      	b.n	8006f32 <HAL_UART_Transmit+0x11c>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2221      	movs	r2, #33	; 0x21
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e6a:	f7fc fdf1 	bl	8003a50 <HAL_GetTick>
 8006e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	88fa      	ldrh	r2, [r7, #6]
 8006e74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	88fa      	ldrh	r2, [r7, #6]
 8006e7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e84:	d108      	bne.n	8006e98 <HAL_UART_Transmit+0x82>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d104      	bne.n	8006e98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	e003      	b.n	8006ea0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006ea8:	e02a      	b.n	8006f00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2180      	movs	r1, #128	; 0x80
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f840 	bl	8006f3a <UART_WaitOnFlagUntilTimeout>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e036      	b.n	8006f32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10b      	bne.n	8006ee2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ed8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	3302      	adds	r3, #2
 8006ede:	61bb      	str	r3, [r7, #24]
 8006ee0:	e007      	b.n	8006ef2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	781a      	ldrb	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1cf      	bne.n	8006eaa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2200      	movs	r2, #0
 8006f12:	2140      	movs	r1, #64	; 0x40
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 f810 	bl	8006f3a <UART_WaitOnFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e006      	b.n	8006f32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e000      	b.n	8006f32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
  }
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3720      	adds	r7, #32
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b090      	sub	sp, #64	; 0x40
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	60f8      	str	r0, [r7, #12]
 8006f42:	60b9      	str	r1, [r7, #8]
 8006f44:	603b      	str	r3, [r7, #0]
 8006f46:	4613      	mov	r3, r2
 8006f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f4a:	e050      	b.n	8006fee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d04c      	beq.n	8006fee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d007      	beq.n	8006f6a <UART_WaitOnFlagUntilTimeout+0x30>
 8006f5a:	f7fc fd79 	bl	8003a50 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d241      	bcs.n	8006fee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	330c      	adds	r3, #12
 8006f70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	330c      	adds	r3, #12
 8006f88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f8a:	637a      	str	r2, [r7, #52]	; 0x34
 8006f8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e5      	bne.n	8006f6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3314      	adds	r3, #20
 8006fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	613b      	str	r3, [r7, #16]
   return(result);
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f023 0301 	bic.w	r3, r3, #1
 8006fb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3314      	adds	r3, #20
 8006fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fbe:	623a      	str	r2, [r7, #32]
 8006fc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	69f9      	ldr	r1, [r7, #28]
 8006fc4:	6a3a      	ldr	r2, [r7, #32]
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e5      	bne.n	8006f9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e00f      	b.n	800700e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	bf0c      	ite	eq
 8006ffe:	2301      	moveq	r3, #1
 8007000:	2300      	movne	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	429a      	cmp	r2, r3
 800700a:	d09f      	beq.n	8006f4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3740      	adds	r7, #64	; 0x40
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701c:	b09f      	sub	sp, #124	; 0x7c
 800701e:	af00      	add	r7, sp, #0
 8007020:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800702c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702e:	68d9      	ldr	r1, [r3, #12]
 8007030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	ea40 0301 	orr.w	r3, r0, r1
 8007038:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800703a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	431a      	orrs	r2, r3
 8007044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	431a      	orrs	r2, r3
 800704a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	4313      	orrs	r3, r2
 8007050:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800705c:	f021 010c 	bic.w	r1, r1, #12
 8007060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007066:	430b      	orrs	r3, r1
 8007068:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800706a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007076:	6999      	ldr	r1, [r3, #24]
 8007078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	ea40 0301 	orr.w	r3, r0, r1
 8007080:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4bc5      	ldr	r3, [pc, #788]	; (800739c <UART_SetConfig+0x384>)
 8007088:	429a      	cmp	r2, r3
 800708a:	d004      	beq.n	8007096 <UART_SetConfig+0x7e>
 800708c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	4bc3      	ldr	r3, [pc, #780]	; (80073a0 <UART_SetConfig+0x388>)
 8007092:	429a      	cmp	r2, r3
 8007094:	d103      	bne.n	800709e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007096:	f7fe fcc5 	bl	8005a24 <HAL_RCC_GetPCLK2Freq>
 800709a:	6778      	str	r0, [r7, #116]	; 0x74
 800709c:	e002      	b.n	80070a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800709e:	f7fe fcad 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 80070a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ac:	f040 80b6 	bne.w	800721c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b2:	461c      	mov	r4, r3
 80070b4:	f04f 0500 	mov.w	r5, #0
 80070b8:	4622      	mov	r2, r4
 80070ba:	462b      	mov	r3, r5
 80070bc:	1891      	adds	r1, r2, r2
 80070be:	6439      	str	r1, [r7, #64]	; 0x40
 80070c0:	415b      	adcs	r3, r3
 80070c2:	647b      	str	r3, [r7, #68]	; 0x44
 80070c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070c8:	1912      	adds	r2, r2, r4
 80070ca:	eb45 0303 	adc.w	r3, r5, r3
 80070ce:	f04f 0000 	mov.w	r0, #0
 80070d2:	f04f 0100 	mov.w	r1, #0
 80070d6:	00d9      	lsls	r1, r3, #3
 80070d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070dc:	00d0      	lsls	r0, r2, #3
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	1911      	adds	r1, r2, r4
 80070e4:	6639      	str	r1, [r7, #96]	; 0x60
 80070e6:	416b      	adcs	r3, r5
 80070e8:	667b      	str	r3, [r7, #100]	; 0x64
 80070ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	1891      	adds	r1, r2, r2
 80070f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80070f8:	415b      	adcs	r3, r3
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007100:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007104:	f7f9 fcaa 	bl	8000a5c <__aeabi_uldivmod>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4ba5      	ldr	r3, [pc, #660]	; (80073a4 <UART_SetConfig+0x38c>)
 800710e:	fba3 2302 	umull	r2, r3, r3, r2
 8007112:	095b      	lsrs	r3, r3, #5
 8007114:	011e      	lsls	r6, r3, #4
 8007116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007118:	461c      	mov	r4, r3
 800711a:	f04f 0500 	mov.w	r5, #0
 800711e:	4622      	mov	r2, r4
 8007120:	462b      	mov	r3, r5
 8007122:	1891      	adds	r1, r2, r2
 8007124:	6339      	str	r1, [r7, #48]	; 0x30
 8007126:	415b      	adcs	r3, r3
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
 800712a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800712e:	1912      	adds	r2, r2, r4
 8007130:	eb45 0303 	adc.w	r3, r5, r3
 8007134:	f04f 0000 	mov.w	r0, #0
 8007138:	f04f 0100 	mov.w	r1, #0
 800713c:	00d9      	lsls	r1, r3, #3
 800713e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007142:	00d0      	lsls	r0, r2, #3
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	1911      	adds	r1, r2, r4
 800714a:	65b9      	str	r1, [r7, #88]	; 0x58
 800714c:	416b      	adcs	r3, r5
 800714e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	461a      	mov	r2, r3
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	1891      	adds	r1, r2, r2
 800715c:	62b9      	str	r1, [r7, #40]	; 0x28
 800715e:	415b      	adcs	r3, r3
 8007160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007166:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800716a:	f7f9 fc77 	bl	8000a5c <__aeabi_uldivmod>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	4b8c      	ldr	r3, [pc, #560]	; (80073a4 <UART_SetConfig+0x38c>)
 8007174:	fba3 1302 	umull	r1, r3, r3, r2
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	2164      	movs	r1, #100	; 0x64
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	3332      	adds	r3, #50	; 0x32
 8007186:	4a87      	ldr	r2, [pc, #540]	; (80073a4 <UART_SetConfig+0x38c>)
 8007188:	fba2 2303 	umull	r2, r3, r2, r3
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007194:	441e      	add	r6, r3
 8007196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007198:	4618      	mov	r0, r3
 800719a:	f04f 0100 	mov.w	r1, #0
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	1894      	adds	r4, r2, r2
 80071a4:	623c      	str	r4, [r7, #32]
 80071a6:	415b      	adcs	r3, r3
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
 80071aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071ae:	1812      	adds	r2, r2, r0
 80071b0:	eb41 0303 	adc.w	r3, r1, r3
 80071b4:	f04f 0400 	mov.w	r4, #0
 80071b8:	f04f 0500 	mov.w	r5, #0
 80071bc:	00dd      	lsls	r5, r3, #3
 80071be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071c2:	00d4      	lsls	r4, r2, #3
 80071c4:	4622      	mov	r2, r4
 80071c6:	462b      	mov	r3, r5
 80071c8:	1814      	adds	r4, r2, r0
 80071ca:	653c      	str	r4, [r7, #80]	; 0x50
 80071cc:	414b      	adcs	r3, r1
 80071ce:	657b      	str	r3, [r7, #84]	; 0x54
 80071d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	461a      	mov	r2, r3
 80071d6:	f04f 0300 	mov.w	r3, #0
 80071da:	1891      	adds	r1, r2, r2
 80071dc:	61b9      	str	r1, [r7, #24]
 80071de:	415b      	adcs	r3, r3
 80071e0:	61fb      	str	r3, [r7, #28]
 80071e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80071ea:	f7f9 fc37 	bl	8000a5c <__aeabi_uldivmod>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4b6c      	ldr	r3, [pc, #432]	; (80073a4 <UART_SetConfig+0x38c>)
 80071f4:	fba3 1302 	umull	r1, r3, r3, r2
 80071f8:	095b      	lsrs	r3, r3, #5
 80071fa:	2164      	movs	r1, #100	; 0x64
 80071fc:	fb01 f303 	mul.w	r3, r1, r3
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	3332      	adds	r3, #50	; 0x32
 8007206:	4a67      	ldr	r2, [pc, #412]	; (80073a4 <UART_SetConfig+0x38c>)
 8007208:	fba2 2303 	umull	r2, r3, r2, r3
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	f003 0207 	and.w	r2, r3, #7
 8007212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4432      	add	r2, r6
 8007218:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800721a:	e0b9      	b.n	8007390 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800721c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800721e:	461c      	mov	r4, r3
 8007220:	f04f 0500 	mov.w	r5, #0
 8007224:	4622      	mov	r2, r4
 8007226:	462b      	mov	r3, r5
 8007228:	1891      	adds	r1, r2, r2
 800722a:	6139      	str	r1, [r7, #16]
 800722c:	415b      	adcs	r3, r3
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007234:	1912      	adds	r2, r2, r4
 8007236:	eb45 0303 	adc.w	r3, r5, r3
 800723a:	f04f 0000 	mov.w	r0, #0
 800723e:	f04f 0100 	mov.w	r1, #0
 8007242:	00d9      	lsls	r1, r3, #3
 8007244:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007248:	00d0      	lsls	r0, r2, #3
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	eb12 0804 	adds.w	r8, r2, r4
 8007252:	eb43 0905 	adc.w	r9, r3, r5
 8007256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4618      	mov	r0, r3
 800725c:	f04f 0100 	mov.w	r1, #0
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	008b      	lsls	r3, r1, #2
 800726a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800726e:	0082      	lsls	r2, r0, #2
 8007270:	4640      	mov	r0, r8
 8007272:	4649      	mov	r1, r9
 8007274:	f7f9 fbf2 	bl	8000a5c <__aeabi_uldivmod>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4b49      	ldr	r3, [pc, #292]	; (80073a4 <UART_SetConfig+0x38c>)
 800727e:	fba3 2302 	umull	r2, r3, r3, r2
 8007282:	095b      	lsrs	r3, r3, #5
 8007284:	011e      	lsls	r6, r3, #4
 8007286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007288:	4618      	mov	r0, r3
 800728a:	f04f 0100 	mov.w	r1, #0
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	1894      	adds	r4, r2, r2
 8007294:	60bc      	str	r4, [r7, #8]
 8007296:	415b      	adcs	r3, r3
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800729e:	1812      	adds	r2, r2, r0
 80072a0:	eb41 0303 	adc.w	r3, r1, r3
 80072a4:	f04f 0400 	mov.w	r4, #0
 80072a8:	f04f 0500 	mov.w	r5, #0
 80072ac:	00dd      	lsls	r5, r3, #3
 80072ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072b2:	00d4      	lsls	r4, r2, #3
 80072b4:	4622      	mov	r2, r4
 80072b6:	462b      	mov	r3, r5
 80072b8:	1814      	adds	r4, r2, r0
 80072ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80072bc:	414b      	adcs	r3, r1
 80072be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f04f 0100 	mov.w	r1, #0
 80072ca:	f04f 0200 	mov.w	r2, #0
 80072ce:	f04f 0300 	mov.w	r3, #0
 80072d2:	008b      	lsls	r3, r1, #2
 80072d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072d8:	0082      	lsls	r2, r0, #2
 80072da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80072de:	f7f9 fbbd 	bl	8000a5c <__aeabi_uldivmod>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4b2f      	ldr	r3, [pc, #188]	; (80073a4 <UART_SetConfig+0x38c>)
 80072e8:	fba3 1302 	umull	r1, r3, r3, r2
 80072ec:	095b      	lsrs	r3, r3, #5
 80072ee:	2164      	movs	r1, #100	; 0x64
 80072f0:	fb01 f303 	mul.w	r3, r1, r3
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	3332      	adds	r3, #50	; 0x32
 80072fa:	4a2a      	ldr	r2, [pc, #168]	; (80073a4 <UART_SetConfig+0x38c>)
 80072fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007300:	095b      	lsrs	r3, r3, #5
 8007302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007306:	441e      	add	r6, r3
 8007308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800730a:	4618      	mov	r0, r3
 800730c:	f04f 0100 	mov.w	r1, #0
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	1894      	adds	r4, r2, r2
 8007316:	603c      	str	r4, [r7, #0]
 8007318:	415b      	adcs	r3, r3
 800731a:	607b      	str	r3, [r7, #4]
 800731c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007320:	1812      	adds	r2, r2, r0
 8007322:	eb41 0303 	adc.w	r3, r1, r3
 8007326:	f04f 0400 	mov.w	r4, #0
 800732a:	f04f 0500 	mov.w	r5, #0
 800732e:	00dd      	lsls	r5, r3, #3
 8007330:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007334:	00d4      	lsls	r4, r2, #3
 8007336:	4622      	mov	r2, r4
 8007338:	462b      	mov	r3, r5
 800733a:	eb12 0a00 	adds.w	sl, r2, r0
 800733e:	eb43 0b01 	adc.w	fp, r3, r1
 8007342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	4618      	mov	r0, r3
 8007348:	f04f 0100 	mov.w	r1, #0
 800734c:	f04f 0200 	mov.w	r2, #0
 8007350:	f04f 0300 	mov.w	r3, #0
 8007354:	008b      	lsls	r3, r1, #2
 8007356:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800735a:	0082      	lsls	r2, r0, #2
 800735c:	4650      	mov	r0, sl
 800735e:	4659      	mov	r1, fp
 8007360:	f7f9 fb7c 	bl	8000a5c <__aeabi_uldivmod>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <UART_SetConfig+0x38c>)
 800736a:	fba3 1302 	umull	r1, r3, r3, r2
 800736e:	095b      	lsrs	r3, r3, #5
 8007370:	2164      	movs	r1, #100	; 0x64
 8007372:	fb01 f303 	mul.w	r3, r1, r3
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	3332      	adds	r3, #50	; 0x32
 800737c:	4a09      	ldr	r2, [pc, #36]	; (80073a4 <UART_SetConfig+0x38c>)
 800737e:	fba2 2303 	umull	r2, r3, r2, r3
 8007382:	095b      	lsrs	r3, r3, #5
 8007384:	f003 020f 	and.w	r2, r3, #15
 8007388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4432      	add	r2, r6
 800738e:	609a      	str	r2, [r3, #8]
}
 8007390:	bf00      	nop
 8007392:	377c      	adds	r7, #124	; 0x7c
 8007394:	46bd      	mov	sp, r7
 8007396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739a:	bf00      	nop
 800739c:	40011000 	.word	0x40011000
 80073a0:	40011400 	.word	0x40011400
 80073a4:	51eb851f 	.word	0x51eb851f

080073a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80073ac:	4904      	ldr	r1, [pc, #16]	; (80073c0 <MX_FATFS_Init+0x18>)
 80073ae:	4805      	ldr	r0, [pc, #20]	; (80073c4 <MX_FATFS_Init+0x1c>)
 80073b0:	f002 fd6e 	bl	8009e90 <FATFS_LinkDriver>
 80073b4:	4603      	mov	r3, r0
 80073b6:	461a      	mov	r2, r3
 80073b8:	4b03      	ldr	r3, [pc, #12]	; (80073c8 <MX_FATFS_Init+0x20>)
 80073ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80073bc:	bf00      	nop
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	2000a978 	.word	0x2000a978
 80073c4:	20000020 	.word	0x20000020
 80073c8:	2000a97c 	.word	0x2000a97c

080073cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80073d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7f9 ffd5 	bl	8001398 <SD_disk_initialize>
 80073ee:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	4618      	mov	r0, r3
 8007406:	f7fa f8b3 	bl	8001570 <SD_disk_status>
 800740a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	607a      	str	r2, [r7, #4]
 800741e:	603b      	str	r3, [r7, #0]
 8007420:	4603      	mov	r3, r0
 8007422:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8007424:	7bf8      	ldrb	r0, [r7, #15]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	f7fa f8b6 	bl	800159c <SD_disk_read>
 8007430:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
 8007446:	4603      	mov	r3, r0
 8007448:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800744a:	7bf8      	ldrb	r0, [r7, #15]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	f7fa f90d 	bl	8001670 <SD_disk_write>
 8007456:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	603a      	str	r2, [r7, #0]
 800746a:	71fb      	strb	r3, [r7, #7]
 800746c:	460b      	mov	r3, r1
 800746e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8007470:	79b9      	ldrb	r1, [r7, #6]
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	4618      	mov	r0, r3
 8007478:	f7fa f97e 	bl	8001778 <SD_disk_ioctl>
 800747c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007492:	79fb      	ldrb	r3, [r7, #7]
 8007494:	4a08      	ldr	r2, [pc, #32]	; (80074b8 <disk_status+0x30>)
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	79fa      	ldrb	r2, [r7, #7]
 80074a0:	4905      	ldr	r1, [pc, #20]	; (80074b8 <disk_status+0x30>)
 80074a2:	440a      	add	r2, r1
 80074a4:	7a12      	ldrb	r2, [r2, #8]
 80074a6:	4610      	mov	r0, r2
 80074a8:	4798      	blx	r3
 80074aa:	4603      	mov	r3, r0
 80074ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	2000a12c 	.word	0x2000a12c

080074bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	4a0d      	ldr	r2, [pc, #52]	; (8007504 <disk_initialize+0x48>)
 80074ce:	5cd3      	ldrb	r3, [r2, r3]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d111      	bne.n	80074f8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	4a0b      	ldr	r2, [pc, #44]	; (8007504 <disk_initialize+0x48>)
 80074d8:	2101      	movs	r1, #1
 80074da:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	4a09      	ldr	r2, [pc, #36]	; (8007504 <disk_initialize+0x48>)
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	79fa      	ldrb	r2, [r7, #7]
 80074ea:	4906      	ldr	r1, [pc, #24]	; (8007504 <disk_initialize+0x48>)
 80074ec:	440a      	add	r2, r1
 80074ee:	7a12      	ldrb	r2, [r2, #8]
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
 80074f4:	4603      	mov	r3, r0
 80074f6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	2000a12c 	.word	0x2000a12c

08007508 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007508:	b590      	push	{r4, r7, lr}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
 8007512:	603b      	str	r3, [r7, #0]
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	4a0a      	ldr	r2, [pc, #40]	; (8007544 <disk_read+0x3c>)
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	689c      	ldr	r4, [r3, #8]
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	4a07      	ldr	r2, [pc, #28]	; (8007544 <disk_read+0x3c>)
 8007528:	4413      	add	r3, r2
 800752a:	7a18      	ldrb	r0, [r3, #8]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	68b9      	ldr	r1, [r7, #8]
 8007532:	47a0      	blx	r4
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]
  return res;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
}
 800753a:	4618      	mov	r0, r3
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	bd90      	pop	{r4, r7, pc}
 8007542:	bf00      	nop
 8007544:	2000a12c 	.word	0x2000a12c

08007548 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007548:	b590      	push	{r4, r7, lr}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	607a      	str	r2, [r7, #4]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	4a0a      	ldr	r2, [pc, #40]	; (8007584 <disk_write+0x3c>)
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	68dc      	ldr	r4, [r3, #12]
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	4a07      	ldr	r2, [pc, #28]	; (8007584 <disk_write+0x3c>)
 8007568:	4413      	add	r3, r2
 800756a:	7a18      	ldrb	r0, [r3, #8]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	47a0      	blx	r4
 8007574:	4603      	mov	r3, r0
 8007576:	75fb      	strb	r3, [r7, #23]
  return res;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
}
 800757a:	4618      	mov	r0, r3
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	bd90      	pop	{r4, r7, pc}
 8007582:	bf00      	nop
 8007584:	2000a12c 	.word	0x2000a12c

08007588 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	603a      	str	r2, [r7, #0]
 8007592:	71fb      	strb	r3, [r7, #7]
 8007594:	460b      	mov	r3, r1
 8007596:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <disk_ioctl+0x38>)
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	79fa      	ldrb	r2, [r7, #7]
 80075a6:	4906      	ldr	r1, [pc, #24]	; (80075c0 <disk_ioctl+0x38>)
 80075a8:	440a      	add	r2, r1
 80075aa:	7a10      	ldrb	r0, [r2, #8]
 80075ac:	79b9      	ldrb	r1, [r7, #6]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	4798      	blx	r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	73fb      	strb	r3, [r7, #15]
  return res;
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	2000a12c 	.word	0x2000a12c

080075c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3301      	adds	r3, #1
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80075d4:	89fb      	ldrh	r3, [r7, #14]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	b21a      	sxth	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	b21b      	sxth	r3, r3
 80075e0:	4313      	orrs	r3, r2
 80075e2:	b21b      	sxth	r3, r3
 80075e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80075e6:	89fb      	ldrh	r3, [r7, #14]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3303      	adds	r3, #3
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	3202      	adds	r2, #2
 800760c:	7812      	ldrb	r2, [r2, #0]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	3201      	adds	r2, #1
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	4313      	orrs	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	7812      	ldrb	r2, [r2, #0]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]
	return rv;
 800762c:	68fb      	ldr	r3, [r7, #12]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	460b      	mov	r3, r1
 8007644:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	887a      	ldrh	r2, [r7, #2]
 800764e:	b2d2      	uxtb	r2, r2
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	887b      	ldrh	r3, [r7, #2]
 8007654:	0a1b      	lsrs	r3, r3, #8
 8007656:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	887a      	ldrh	r2, [r7, #2]
 8007660:	b2d2      	uxtb	r2, r2
 8007662:	701a      	strb	r2, [r3, #0]
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	0a1b      	lsrs	r3, r3, #8
 800768a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	607a      	str	r2, [r7, #4]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	701a      	strb	r2, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	0a1b      	lsrs	r3, r3, #8
 800769c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	b2d2      	uxtb	r2, r2
 80076a8:	701a      	strb	r2, [r3, #0]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	0a1b      	lsrs	r3, r3, #8
 80076ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	607a      	str	r2, [r7, #4]
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	b2d2      	uxtb	r2, r2
 80076ba:	701a      	strb	r2, [r3, #0]
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00d      	beq.n	80076fe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	1c53      	adds	r3, r2, #1
 80076e6:	613b      	str	r3, [r7, #16]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	1c59      	adds	r1, r3, #1
 80076ec:	6179      	str	r1, [r7, #20]
 80076ee:	7812      	ldrb	r2, [r2, #0]
 80076f0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	607b      	str	r3, [r7, #4]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1f1      	bne.n	80076e2 <mem_cpy+0x1a>
	}
}
 80076fe:	bf00      	nop
 8007700:	371c      	adds	r7, #28
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800770a:	b480      	push	{r7}
 800770c:	b087      	sub	sp, #28
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	617a      	str	r2, [r7, #20]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3b01      	subs	r3, #1
 800772a:	607b      	str	r3, [r7, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f3      	bne.n	800771a <mem_set+0x10>
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	371c      	adds	r7, #28
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007740:	b480      	push	{r7}
 8007742:	b089      	sub	sp, #36	; 0x24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	61fb      	str	r3, [r7, #28]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	61fa      	str	r2, [r7, #28]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	4619      	mov	r1, r3
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	61ba      	str	r2, [r7, #24]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	1acb      	subs	r3, r1, r3
 800776c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3b01      	subs	r3, #1
 8007772:	607b      	str	r3, [r7, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <mem_cmp+0x40>
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0eb      	beq.n	8007758 <mem_cmp+0x18>

	return r;
 8007780:	697b      	ldr	r3, [r7, #20]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3724      	adds	r7, #36	; 0x24
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007798:	e002      	b.n	80077a0 <chk_chr+0x12>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3301      	adds	r3, #1
 800779e:	607b      	str	r3, [r7, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <chk_chr+0x26>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d1f2      	bne.n	800779a <chk_chr+0xc>
	return *str;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	781b      	ldrb	r3, [r3, #0]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80077ce:	2300      	movs	r3, #0
 80077d0:	60bb      	str	r3, [r7, #8]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	e029      	b.n	800782c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80077d8:	4a27      	ldr	r2, [pc, #156]	; (8007878 <chk_lock+0xb4>)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	4413      	add	r3, r2
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01d      	beq.n	8007822 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077e6:	4a24      	ldr	r2, [pc, #144]	; (8007878 <chk_lock+0xb4>)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	4413      	add	r3, r2
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d116      	bne.n	8007826 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80077f8:	4a1f      	ldr	r2, [pc, #124]	; (8007878 <chk_lock+0xb4>)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	4413      	add	r3, r2
 8007800:	3304      	adds	r3, #4
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007808:	429a      	cmp	r2, r3
 800780a:	d10c      	bne.n	8007826 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800780c:	4a1a      	ldr	r2, [pc, #104]	; (8007878 <chk_lock+0xb4>)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	4413      	add	r3, r2
 8007814:	3308      	adds	r3, #8
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800781c:	429a      	cmp	r2, r3
 800781e:	d102      	bne.n	8007826 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007820:	e007      	b.n	8007832 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007822:	2301      	movs	r3, #1
 8007824:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d9d2      	bls.n	80077d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b02      	cmp	r3, #2
 8007836:	d109      	bne.n	800784c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d102      	bne.n	8007844 <chk_lock+0x80>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d101      	bne.n	8007848 <chk_lock+0x84>
 8007844:	2300      	movs	r3, #0
 8007846:	e010      	b.n	800786a <chk_lock+0xa6>
 8007848:	2312      	movs	r3, #18
 800784a:	e00e      	b.n	800786a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d108      	bne.n	8007864 <chk_lock+0xa0>
 8007852:	4a09      	ldr	r2, [pc, #36]	; (8007878 <chk_lock+0xb4>)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	011b      	lsls	r3, r3, #4
 8007858:	4413      	add	r3, r2
 800785a:	330c      	adds	r3, #12
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007862:	d101      	bne.n	8007868 <chk_lock+0xa4>
 8007864:	2310      	movs	r3, #16
 8007866:	e000      	b.n	800786a <chk_lock+0xa6>
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	2000a10c 	.word	0x2000a10c

0800787c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007882:	2300      	movs	r3, #0
 8007884:	607b      	str	r3, [r7, #4]
 8007886:	e002      	b.n	800788e <enq_lock+0x12>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3301      	adds	r3, #1
 800788c:	607b      	str	r3, [r7, #4]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d806      	bhi.n	80078a2 <enq_lock+0x26>
 8007894:	4a09      	ldr	r2, [pc, #36]	; (80078bc <enq_lock+0x40>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	4413      	add	r3, r2
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1f2      	bne.n	8007888 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	bf14      	ite	ne
 80078a8:	2301      	movne	r3, #1
 80078aa:	2300      	moveq	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	2000a10c 	.word	0x2000a10c

080078c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	e01f      	b.n	8007910 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80078d0:	4a41      	ldr	r2, [pc, #260]	; (80079d8 <inc_lock+0x118>)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	011b      	lsls	r3, r3, #4
 80078d6:	4413      	add	r3, r2
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d113      	bne.n	800790a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80078e2:	4a3d      	ldr	r2, [pc, #244]	; (80079d8 <inc_lock+0x118>)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	4413      	add	r3, r2
 80078ea:	3304      	adds	r3, #4
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d109      	bne.n	800790a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80078f6:	4a38      	ldr	r2, [pc, #224]	; (80079d8 <inc_lock+0x118>)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	4413      	add	r3, r2
 80078fe:	3308      	adds	r3, #8
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007906:	429a      	cmp	r2, r3
 8007908:	d006      	beq.n	8007918 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3301      	adds	r3, #1
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d9dc      	bls.n	80078d0 <inc_lock+0x10>
 8007916:	e000      	b.n	800791a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007918:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d132      	bne.n	8007986 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007920:	2300      	movs	r3, #0
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e002      	b.n	800792c <inc_lock+0x6c>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3301      	adds	r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d806      	bhi.n	8007940 <inc_lock+0x80>
 8007932:	4a29      	ldr	r2, [pc, #164]	; (80079d8 <inc_lock+0x118>)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	4413      	add	r3, r2
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1f2      	bne.n	8007926 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d101      	bne.n	800794a <inc_lock+0x8a>
 8007946:	2300      	movs	r3, #0
 8007948:	e040      	b.n	80079cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	4922      	ldr	r1, [pc, #136]	; (80079d8 <inc_lock+0x118>)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	440b      	add	r3, r1
 8007956:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	491e      	ldr	r1, [pc, #120]	; (80079d8 <inc_lock+0x118>)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	440b      	add	r3, r1
 8007964:	3304      	adds	r3, #4
 8007966:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	695a      	ldr	r2, [r3, #20]
 800796c:	491a      	ldr	r1, [pc, #104]	; (80079d8 <inc_lock+0x118>)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	440b      	add	r3, r1
 8007974:	3308      	adds	r3, #8
 8007976:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007978:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <inc_lock+0x118>)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	4413      	add	r3, r2
 8007980:	330c      	adds	r3, #12
 8007982:	2200      	movs	r2, #0
 8007984:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d009      	beq.n	80079a0 <inc_lock+0xe0>
 800798c:	4a12      	ldr	r2, [pc, #72]	; (80079d8 <inc_lock+0x118>)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	4413      	add	r3, r2
 8007994:	330c      	adds	r3, #12
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <inc_lock+0xe0>
 800799c:	2300      	movs	r3, #0
 800799e:	e015      	b.n	80079cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d108      	bne.n	80079b8 <inc_lock+0xf8>
 80079a6:	4a0c      	ldr	r2, [pc, #48]	; (80079d8 <inc_lock+0x118>)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	4413      	add	r3, r2
 80079ae:	330c      	adds	r3, #12
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	3301      	adds	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	e001      	b.n	80079bc <inc_lock+0xfc>
 80079b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079bc:	4906      	ldr	r1, [pc, #24]	; (80079d8 <inc_lock+0x118>)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	011b      	lsls	r3, r3, #4
 80079c2:	440b      	add	r3, r1
 80079c4:	330c      	adds	r3, #12
 80079c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3301      	adds	r3, #1
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	2000a10c 	.word	0x2000a10c

080079dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	607b      	str	r3, [r7, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d825      	bhi.n	8007a3c <dec_lock+0x60>
		n = Files[i].ctr;
 80079f0:	4a17      	ldr	r2, [pc, #92]	; (8007a50 <dec_lock+0x74>)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	4413      	add	r3, r2
 80079f8:	330c      	adds	r3, #12
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80079fe:	89fb      	ldrh	r3, [r7, #14]
 8007a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a04:	d101      	bne.n	8007a0a <dec_lock+0x2e>
 8007a06:	2300      	movs	r3, #0
 8007a08:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007a0a:	89fb      	ldrh	r3, [r7, #14]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <dec_lock+0x3a>
 8007a10:	89fb      	ldrh	r3, [r7, #14]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007a16:	4a0e      	ldr	r2, [pc, #56]	; (8007a50 <dec_lock+0x74>)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	4413      	add	r3, r2
 8007a1e:	330c      	adds	r3, #12
 8007a20:	89fa      	ldrh	r2, [r7, #14]
 8007a22:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007a24:	89fb      	ldrh	r3, [r7, #14]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d105      	bne.n	8007a36 <dec_lock+0x5a>
 8007a2a:	4a09      	ldr	r2, [pc, #36]	; (8007a50 <dec_lock+0x74>)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	4413      	add	r3, r2
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	737b      	strb	r3, [r7, #13]
 8007a3a:	e001      	b.n	8007a40 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007a40:	7b7b      	ldrb	r3, [r7, #13]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	2000a10c 	.word	0x2000a10c

08007a54 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	e010      	b.n	8007a84 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007a62:	4a0d      	ldr	r2, [pc, #52]	; (8007a98 <clear_lock+0x44>)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	4413      	add	r3, r2
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d105      	bne.n	8007a7e <clear_lock+0x2a>
 8007a72:	4a09      	ldr	r2, [pc, #36]	; (8007a98 <clear_lock+0x44>)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	4413      	add	r3, r2
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3301      	adds	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d9eb      	bls.n	8007a62 <clear_lock+0xe>
	}
}
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	2000a10c 	.word	0x2000a10c

08007a9c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	78db      	ldrb	r3, [r3, #3]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d034      	beq.n	8007b1a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7858      	ldrb	r0, [r3, #1]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	f7ff fd40 	bl	8007548 <disk_write>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	73fb      	strb	r3, [r7, #15]
 8007ad2:	e022      	b.n	8007b1a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	1ad2      	subs	r2, r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d217      	bcs.n	8007b1a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	789b      	ldrb	r3, [r3, #2]
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	e010      	b.n	8007b14 <sync_window+0x78>
					wsect += fs->fsize;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	4413      	add	r3, r2
 8007afa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	7858      	ldrb	r0, [r3, #1]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b06:	2301      	movs	r3, #1
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	f7ff fd1d 	bl	8007548 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	613b      	str	r3, [r7, #16]
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d8eb      	bhi.n	8007af2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d01b      	beq.n	8007b74 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff ffad 	bl	8007a9c <sync_window>
 8007b42:	4603      	mov	r3, r0
 8007b44:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d113      	bne.n	8007b74 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7858      	ldrb	r0, [r3, #1]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b56:	2301      	movs	r3, #1
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	f7ff fcd5 	bl	8007508 <disk_read>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d004      	beq.n	8007b6e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007b64:	f04f 33ff 	mov.w	r3, #4294967295
 8007b68:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff ff87 	bl	8007a9c <sync_window>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d158      	bne.n	8007c4a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d148      	bne.n	8007c32 <sync_fs+0xb2>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	791b      	ldrb	r3, [r3, #4]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d144      	bne.n	8007c32 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3330      	adds	r3, #48	; 0x30
 8007bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff fda9 	bl	800770a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3330      	adds	r3, #48	; 0x30
 8007bbc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bc0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff fd38 	bl	800763a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3330      	adds	r3, #48	; 0x30
 8007bce:	4921      	ldr	r1, [pc, #132]	; (8007c54 <sync_fs+0xd4>)
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff fd4d 	bl	8007670 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3330      	adds	r3, #48	; 0x30
 8007bda:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007bde:	491e      	ldr	r1, [pc, #120]	; (8007c58 <sync_fs+0xd8>)
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7ff fd45 	bl	8007670 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3330      	adds	r3, #48	; 0x30
 8007bea:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f7ff fd3b 	bl	8007670 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3330      	adds	r3, #48	; 0x30
 8007bfe:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	4619      	mov	r1, r3
 8007c08:	4610      	mov	r0, r2
 8007c0a:	f7ff fd31 	bl	8007670 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	7858      	ldrb	r0, [r3, #1]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c26:	2301      	movs	r3, #1
 8007c28:	f7ff fc8e 	bl	8007548 <disk_write>
			fs->fsi_flag = 0;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	785b      	ldrb	r3, [r3, #1]
 8007c36:	2200      	movs	r2, #0
 8007c38:	2100      	movs	r1, #0
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff fca4 	bl	8007588 <disk_ioctl>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <sync_fs+0xca>
 8007c46:	2301      	movs	r3, #1
 8007c48:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	41615252 	.word	0x41615252
 8007c58:	61417272 	.word	0x61417272

08007c5c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	3b02      	subs	r3, #2
 8007c6a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	3b02      	subs	r3, #2
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d301      	bcc.n	8007c7c <clust2sect+0x20>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e008      	b.n	8007c8e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	895b      	ldrh	r3, [r3, #10]
 8007c80:	461a      	mov	r2, r3
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	fb03 f202 	mul.w	r2, r3, r2
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8c:	4413      	add	r3, r2
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b086      	sub	sp, #24
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d904      	bls.n	8007cba <get_fat+0x20>
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d302      	bcc.n	8007cc0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007cba:	2301      	movs	r3, #1
 8007cbc:	617b      	str	r3, [r7, #20]
 8007cbe:	e08f      	b.n	8007de0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d062      	beq.n	8007d94 <get_fat+0xfa>
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	dc7c      	bgt.n	8007dcc <get_fat+0x132>
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d002      	beq.n	8007cdc <get_fat+0x42>
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d042      	beq.n	8007d60 <get_fat+0xc6>
 8007cda:	e077      	b.n	8007dcc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	6a1a      	ldr	r2, [r3, #32]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	0a5b      	lsrs	r3, r3, #9
 8007cf2:	4413      	add	r3, r2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6938      	ldr	r0, [r7, #16]
 8007cf8:	f7ff ff14 	bl	8007b24 <move_window>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d167      	bne.n	8007dd2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	60fa      	str	r2, [r7, #12]
 8007d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d14:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	6a1a      	ldr	r2, [r3, #32]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	0a5b      	lsrs	r3, r3, #9
 8007d1e:	4413      	add	r3, r2
 8007d20:	4619      	mov	r1, r3
 8007d22:	6938      	ldr	r0, [r7, #16]
 8007d24:	f7ff fefe 	bl	8007b24 <move_window>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d153      	bne.n	8007dd6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	4413      	add	r3, r2
 8007d38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	461a      	mov	r2, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <get_fat+0xbc>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	091b      	lsrs	r3, r3, #4
 8007d54:	e002      	b.n	8007d5c <get_fat+0xc2>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d5c:	617b      	str	r3, [r7, #20]
			break;
 8007d5e:	e03f      	b.n	8007de0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	6a1a      	ldr	r2, [r3, #32]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	0a1b      	lsrs	r3, r3, #8
 8007d68:	4413      	add	r3, r2
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6938      	ldr	r0, [r7, #16]
 8007d6e:	f7ff fed9 	bl	8007b24 <move_window>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d130      	bne.n	8007dda <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007d86:	4413      	add	r3, r2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff fc1b 	bl	80075c4 <ld_word>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	617b      	str	r3, [r7, #20]
			break;
 8007d92:	e025      	b.n	8007de0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	6a1a      	ldr	r2, [r3, #32]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	09db      	lsrs	r3, r3, #7
 8007d9c:	4413      	add	r3, r2
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6938      	ldr	r0, [r7, #16]
 8007da2:	f7ff febf 	bl	8007b24 <move_window>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d118      	bne.n	8007dde <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007dba:	4413      	add	r3, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff fc19 	bl	80075f4 <ld_dword>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007dc8:	617b      	str	r3, [r7, #20]
			break;
 8007dca:	e009      	b.n	8007de0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007dcc:	2301      	movs	r3, #1
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	e006      	b.n	8007de0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dd2:	bf00      	nop
 8007dd4:	e004      	b.n	8007de0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dd6:	bf00      	nop
 8007dd8:	e002      	b.n	8007de0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007dda:	bf00      	nop
 8007ddc:	e000      	b.n	8007de0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007dde:	bf00      	nop
		}
	}

	return val;
 8007de0:	697b      	ldr	r3, [r7, #20]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007dea:	b590      	push	{r4, r7, lr}
 8007dec:	b089      	sub	sp, #36	; 0x24
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007df6:	2302      	movs	r3, #2
 8007df8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	f240 80d2 	bls.w	8007fa6 <put_fat+0x1bc>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	f080 80cc 	bcs.w	8007fa6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	f000 8096 	beq.w	8007f44 <put_fat+0x15a>
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	f300 80cd 	bgt.w	8007fb8 <put_fat+0x1ce>
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d002      	beq.n	8007e28 <put_fat+0x3e>
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d06e      	beq.n	8007f04 <put_fat+0x11a>
 8007e26:	e0c7      	b.n	8007fb8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	61bb      	str	r3, [r7, #24]
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	085b      	lsrs	r3, r3, #1
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	4413      	add	r3, r2
 8007e34:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a1a      	ldr	r2, [r3, #32]
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	0a5b      	lsrs	r3, r3, #9
 8007e3e:	4413      	add	r3, r2
 8007e40:	4619      	mov	r1, r3
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f7ff fe6e 	bl	8007b24 <move_window>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e4c:	7ffb      	ldrb	r3, [r7, #31]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f040 80ab 	bne.w	8007faa <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	1c59      	adds	r1, r3, #1
 8007e5e:	61b9      	str	r1, [r7, #24]
 8007e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e64:	4413      	add	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00d      	beq.n	8007e8e <put_fat+0xa4>
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	b25b      	sxtb	r3, r3
 8007e78:	f003 030f 	and.w	r3, r3, #15
 8007e7c:	b25a      	sxtb	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	b25b      	sxtb	r3, r3
 8007e86:	4313      	orrs	r3, r2
 8007e88:	b25b      	sxtb	r3, r3
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	e001      	b.n	8007e92 <put_fat+0xa8>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6a1a      	ldr	r2, [r3, #32]
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	0a5b      	lsrs	r3, r3, #9
 8007ea4:	4413      	add	r3, r2
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7ff fe3b 	bl	8007b24 <move_window>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007eb2:	7ffb      	ldrb	r3, [r7, #31]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d17a      	bne.n	8007fae <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec4:	4413      	add	r3, r2
 8007ec6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <put_fat+0xf0>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	091b      	lsrs	r3, r3, #4
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	e00e      	b.n	8007ef8 <put_fat+0x10e>
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	b25b      	sxtb	r3, r3
 8007ee0:	f023 030f 	bic.w	r3, r3, #15
 8007ee4:	b25a      	sxtb	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	b25b      	sxtb	r3, r3
 8007eec:	f003 030f 	and.w	r3, r3, #15
 8007ef0:	b25b      	sxtb	r3, r3
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	b25b      	sxtb	r3, r3
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2201      	movs	r2, #1
 8007f00:	70da      	strb	r2, [r3, #3]
			break;
 8007f02:	e059      	b.n	8007fb8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a1a      	ldr	r2, [r3, #32]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	0a1b      	lsrs	r3, r3, #8
 8007f0c:	4413      	add	r3, r2
 8007f0e:	4619      	mov	r1, r3
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f7ff fe07 	bl	8007b24 <move_window>
 8007f16:	4603      	mov	r3, r0
 8007f18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f1a:	7ffb      	ldrb	r3, [r7, #31]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d148      	bne.n	8007fb2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007f2e:	4413      	add	r3, r2
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	b292      	uxth	r2, r2
 8007f34:	4611      	mov	r1, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff fb7f 	bl	800763a <st_word>
			fs->wflag = 1;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	70da      	strb	r2, [r3, #3]
			break;
 8007f42:	e039      	b.n	8007fb8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6a1a      	ldr	r2, [r3, #32]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	09db      	lsrs	r3, r3, #7
 8007f4c:	4413      	add	r3, r2
 8007f4e:	4619      	mov	r1, r3
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff fde7 	bl	8007b24 <move_window>
 8007f56:	4603      	mov	r3, r0
 8007f58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f5a:	7ffb      	ldrb	r3, [r7, #31]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d12a      	bne.n	8007fb6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007f74:	4413      	add	r3, r2
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff fb3c 	bl	80075f4 <ld_dword>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f82:	4323      	orrs	r3, r4
 8007f84:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007f94:	4413      	add	r3, r2
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff fb69 	bl	8007670 <st_dword>
			fs->wflag = 1;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	70da      	strb	r2, [r3, #3]
			break;
 8007fa4:	e008      	b.n	8007fb8 <put_fat+0x1ce>
		}
	}
 8007fa6:	bf00      	nop
 8007fa8:	e006      	b.n	8007fb8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007faa:	bf00      	nop
 8007fac:	e004      	b.n	8007fb8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007fae:	bf00      	nop
 8007fb0:	e002      	b.n	8007fb8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007fb2:	bf00      	nop
 8007fb4:	e000      	b.n	8007fb8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007fb6:	bf00      	nop
	return res;
 8007fb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3724      	adds	r7, #36	; 0x24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd90      	pop	{r4, r7, pc}

08007fc2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b088      	sub	sp, #32
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d904      	bls.n	8007fe8 <remove_chain+0x26>
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d301      	bcc.n	8007fec <remove_chain+0x2a>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e04b      	b.n	8008084 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00c      	beq.n	800800c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	69b8      	ldr	r0, [r7, #24]
 8007ffa:	f7ff fef6 	bl	8007dea <put_fat>
 8007ffe:	4603      	mov	r3, r0
 8008000:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008002:	7ffb      	ldrb	r3, [r7, #31]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <remove_chain+0x4a>
 8008008:	7ffb      	ldrb	r3, [r7, #31]
 800800a:	e03b      	b.n	8008084 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7ff fe43 	bl	8007c9a <get_fat>
 8008014:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d031      	beq.n	8008080 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <remove_chain+0x64>
 8008022:	2302      	movs	r3, #2
 8008024:	e02e      	b.n	8008084 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802c:	d101      	bne.n	8008032 <remove_chain+0x70>
 800802e:	2301      	movs	r3, #1
 8008030:	e028      	b.n	8008084 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008032:	2200      	movs	r2, #0
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	69b8      	ldr	r0, [r7, #24]
 8008038:	f7ff fed7 	bl	8007dea <put_fat>
 800803c:	4603      	mov	r3, r0
 800803e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008040:	7ffb      	ldrb	r3, [r7, #31]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <remove_chain+0x88>
 8008046:	7ffb      	ldrb	r3, [r7, #31]
 8008048:	e01c      	b.n	8008084 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	691a      	ldr	r2, [r3, #16]
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	3b02      	subs	r3, #2
 8008054:	429a      	cmp	r2, r3
 8008056:	d20b      	bcs.n	8008070 <remove_chain+0xae>
			fs->free_clst++;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	791b      	ldrb	r3, [r3, #4]
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	429a      	cmp	r2, r3
 800807c:	d3c6      	bcc.n	800800c <remove_chain+0x4a>
 800807e:	e000      	b.n	8008082 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008080:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3720      	adds	r7, #32
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10d      	bne.n	80080be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d004      	beq.n	80080b8 <create_chain+0x2c>
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d31b      	bcc.n	80080f0 <create_chain+0x64>
 80080b8:	2301      	movs	r3, #1
 80080ba:	61bb      	str	r3, [r7, #24]
 80080bc:	e018      	b.n	80080f0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff fdea 	bl	8007c9a <get_fat>
 80080c6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d801      	bhi.n	80080d2 <create_chain+0x46>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e070      	b.n	80081b4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d8:	d101      	bne.n	80080de <create_chain+0x52>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	e06a      	b.n	80081b4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d201      	bcs.n	80080ec <create_chain+0x60>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	e063      	b.n	80081b4 <create_chain+0x128>
		scl = clst;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	3301      	adds	r3, #1
 80080f8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	429a      	cmp	r2, r3
 8008102:	d307      	bcc.n	8008114 <create_chain+0x88>
				ncl = 2;
 8008104:	2302      	movs	r3, #2
 8008106:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008108:	69fa      	ldr	r2, [r7, #28]
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	429a      	cmp	r2, r3
 800810e:	d901      	bls.n	8008114 <create_chain+0x88>
 8008110:	2300      	movs	r3, #0
 8008112:	e04f      	b.n	80081b4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008114:	69f9      	ldr	r1, [r7, #28]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fdbf 	bl	8007c9a <get_fat>
 800811c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00e      	beq.n	8008142 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d003      	beq.n	8008132 <create_chain+0xa6>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008130:	d101      	bne.n	8008136 <create_chain+0xaa>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	e03e      	b.n	80081b4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	429a      	cmp	r2, r3
 800813c:	d1da      	bne.n	80080f4 <create_chain+0x68>
 800813e:	2300      	movs	r3, #0
 8008140:	e038      	b.n	80081b4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008142:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008144:	f04f 32ff 	mov.w	r2, #4294967295
 8008148:	69f9      	ldr	r1, [r7, #28]
 800814a:	6938      	ldr	r0, [r7, #16]
 800814c:	f7ff fe4d 	bl	8007dea <put_fat>
 8008150:	4603      	mov	r3, r0
 8008152:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d109      	bne.n	800816e <create_chain+0xe2>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d006      	beq.n	800816e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008160:	69fa      	ldr	r2, [r7, #28]
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6938      	ldr	r0, [r7, #16]
 8008166:	f7ff fe40 	bl	8007dea <put_fat>
 800816a:	4603      	mov	r3, r0
 800816c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d116      	bne.n	80081a2 <create_chain+0x116>
		fs->last_clst = ncl;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	69fa      	ldr	r2, [r7, #28]
 8008178:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	691a      	ldr	r2, [r3, #16]
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	3b02      	subs	r3, #2
 8008184:	429a      	cmp	r2, r3
 8008186:	d804      	bhi.n	8008192 <create_chain+0x106>
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	1e5a      	subs	r2, r3, #1
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	791b      	ldrb	r3, [r3, #4]
 8008196:	f043 0301 	orr.w	r3, r3, #1
 800819a:	b2da      	uxtb	r2, r3
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	711a      	strb	r2, [r3, #4]
 80081a0:	e007      	b.n	80081b2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80081a2:	7dfb      	ldrb	r3, [r7, #23]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d102      	bne.n	80081ae <create_chain+0x122>
 80081a8:	f04f 33ff 	mov.w	r3, #4294967295
 80081ac:	e000      	b.n	80081b0 <create_chain+0x124>
 80081ae:	2301      	movs	r3, #1
 80081b0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80081b2:	69fb      	ldr	r3, [r7, #28]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3720      	adds	r7, #32
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	3304      	adds	r3, #4
 80081d2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	0a5b      	lsrs	r3, r3, #9
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	8952      	ldrh	r2, [r2, #10]
 80081dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80081e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	1d1a      	adds	r2, r3, #4
 80081e6:	613a      	str	r2, [r7, #16]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <clmt_clust+0x3a>
 80081f2:	2300      	movs	r3, #0
 80081f4:	e010      	b.n	8008218 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d307      	bcc.n	800820e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	3304      	adds	r3, #4
 800820a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800820c:	e7e9      	b.n	80081e2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800820e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	4413      	add	r3, r2
}
 8008218:	4618      	mov	r0, r3
 800821a:	371c      	adds	r7, #28
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800823a:	d204      	bcs.n	8008246 <dir_sdi+0x22>
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	f003 031f 	and.w	r3, r3, #31
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008246:	2302      	movs	r3, #2
 8008248:	e063      	b.n	8008312 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d106      	bne.n	800826a <dir_sdi+0x46>
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b02      	cmp	r3, #2
 8008262:	d902      	bls.n	800826a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10c      	bne.n	800828a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	095b      	lsrs	r3, r3, #5
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	8912      	ldrh	r2, [r2, #8]
 8008278:	4293      	cmp	r3, r2
 800827a:	d301      	bcc.n	8008280 <dir_sdi+0x5c>
 800827c:	2302      	movs	r3, #2
 800827e:	e048      	b.n	8008312 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	61da      	str	r2, [r3, #28]
 8008288:	e029      	b.n	80082de <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	895b      	ldrh	r3, [r3, #10]
 800828e:	025b      	lsls	r3, r3, #9
 8008290:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008292:	e019      	b.n	80082c8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6979      	ldr	r1, [r7, #20]
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff fcfe 	bl	8007c9a <get_fat>
 800829e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a6:	d101      	bne.n	80082ac <dir_sdi+0x88>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e032      	b.n	8008312 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d904      	bls.n	80082bc <dir_sdi+0x98>
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d301      	bcc.n	80082c0 <dir_sdi+0x9c>
 80082bc:	2302      	movs	r3, #2
 80082be:	e028      	b.n	8008312 <dir_sdi+0xee>
			ofs -= csz;
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d2e1      	bcs.n	8008294 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80082d0:	6979      	ldr	r1, [r7, #20]
 80082d2:	6938      	ldr	r0, [r7, #16]
 80082d4:	f7ff fcc2 	bl	8007c5c <clust2sect>
 80082d8:	4602      	mov	r2, r0
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <dir_sdi+0xcc>
 80082ec:	2302      	movs	r3, #2
 80082ee:	e010      	b.n	8008312 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	69da      	ldr	r2, [r3, #28]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	0a5b      	lsrs	r3, r3, #9
 80082f8:	441a      	add	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830a:	441a      	add	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b086      	sub	sp, #24
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	3320      	adds	r3, #32
 8008330:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <dir_next+0x28>
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008340:	d301      	bcc.n	8008346 <dir_next+0x2c>
 8008342:	2304      	movs	r3, #4
 8008344:	e0aa      	b.n	800849c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834c:	2b00      	cmp	r3, #0
 800834e:	f040 8098 	bne.w	8008482 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10b      	bne.n	800837c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	095b      	lsrs	r3, r3, #5
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	8912      	ldrh	r2, [r2, #8]
 800836c:	4293      	cmp	r3, r2
 800836e:	f0c0 8088 	bcc.w	8008482 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	61da      	str	r2, [r3, #28]
 8008378:	2304      	movs	r3, #4
 800837a:	e08f      	b.n	800849c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	0a5b      	lsrs	r3, r3, #9
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	8952      	ldrh	r2, [r2, #10]
 8008384:	3a01      	subs	r2, #1
 8008386:	4013      	ands	r3, r2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d17a      	bne.n	8008482 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	4619      	mov	r1, r3
 8008394:	4610      	mov	r0, r2
 8008396:	f7ff fc80 	bl	8007c9a <get_fat>
 800839a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d801      	bhi.n	80083a6 <dir_next+0x8c>
 80083a2:	2302      	movs	r3, #2
 80083a4:	e07a      	b.n	800849c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ac:	d101      	bne.n	80083b2 <dir_next+0x98>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e074      	b.n	800849c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d358      	bcc.n	800846e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d104      	bne.n	80083cc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	61da      	str	r2, [r3, #28]
 80083c8:	2304      	movs	r3, #4
 80083ca:	e067      	b.n	800849c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	4619      	mov	r1, r3
 80083d4:	4610      	mov	r0, r2
 80083d6:	f7ff fe59 	bl	800808c <create_chain>
 80083da:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <dir_next+0xcc>
 80083e2:	2307      	movs	r3, #7
 80083e4:	e05a      	b.n	800849c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <dir_next+0xd6>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e055      	b.n	800849c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f6:	d101      	bne.n	80083fc <dir_next+0xe2>
 80083f8:	2301      	movs	r3, #1
 80083fa:	e04f      	b.n	800849c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f7ff fb4d 	bl	8007a9c <sync_window>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <dir_next+0xf2>
 8008408:	2301      	movs	r3, #1
 800840a:	e047      	b.n	800849c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3330      	adds	r3, #48	; 0x30
 8008410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008414:	2100      	movs	r1, #0
 8008416:	4618      	mov	r0, r3
 8008418:	f7ff f977 	bl	800770a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800841c:	2300      	movs	r3, #0
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	6979      	ldr	r1, [r7, #20]
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff fc1a 	bl	8007c5c <clust2sect>
 8008428:	4602      	mov	r2, r0
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	62da      	str	r2, [r3, #44]	; 0x2c
 800842e:	e012      	b.n	8008456 <dir_next+0x13c>
						fs->wflag = 1;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2201      	movs	r2, #1
 8008434:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f7ff fb30 	bl	8007a9c <sync_window>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <dir_next+0x12c>
 8008442:	2301      	movs	r3, #1
 8008444:	e02a      	b.n	800849c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	3301      	adds	r3, #1
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	62da      	str	r2, [r3, #44]	; 0x2c
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	895b      	ldrh	r3, [r3, #10]
 800845a:	461a      	mov	r2, r3
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4293      	cmp	r3, r2
 8008460:	d3e6      	bcc.n	8008430 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad2      	subs	r2, r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008474:	6979      	ldr	r1, [r7, #20]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f7ff fbf0 	bl	8007c5c <clust2sect>
 800847c:	4602      	mov	r2, r0
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008494:	441a      	add	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80084b4:	2100      	movs	r1, #0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff feb4 	bl	8008224 <dir_sdi>
 80084bc:	4603      	mov	r3, r0
 80084be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d12b      	bne.n	800851e <dir_alloc+0x7a>
		n = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	4619      	mov	r1, r3
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7ff fb27 	bl	8007b24 <move_window>
 80084d6:	4603      	mov	r3, r0
 80084d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d11d      	bne.n	800851c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2be5      	cmp	r3, #229	; 0xe5
 80084e8:	d004      	beq.n	80084f4 <dir_alloc+0x50>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d107      	bne.n	8008504 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	3301      	adds	r3, #1
 80084f8:	613b      	str	r3, [r7, #16]
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d102      	bne.n	8008508 <dir_alloc+0x64>
 8008502:	e00c      	b.n	800851e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008504:	2300      	movs	r3, #0
 8008506:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008508:	2101      	movs	r1, #1
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff ff05 	bl	800831a <dir_next>
 8008510:	4603      	mov	r3, r0
 8008512:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d0d7      	beq.n	80084ca <dir_alloc+0x26>
 800851a:	e000      	b.n	800851e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800851c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800851e:	7dfb      	ldrb	r3, [r7, #23]
 8008520:	2b04      	cmp	r3, #4
 8008522:	d101      	bne.n	8008528 <dir_alloc+0x84>
 8008524:	2307      	movs	r3, #7
 8008526:	75fb      	strb	r3, [r7, #23]
	return res;
 8008528:	7dfb      	ldrb	r3, [r7, #23]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	331a      	adds	r3, #26
 8008540:	4618      	mov	r0, r3
 8008542:	f7ff f83f 	bl	80075c4 <ld_word>
 8008546:	4603      	mov	r3, r0
 8008548:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	2b03      	cmp	r3, #3
 8008550:	d109      	bne.n	8008566 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	3314      	adds	r3, #20
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff f834 	bl	80075c4 <ld_word>
 800855c:	4603      	mov	r3, r0
 800855e:	041b      	lsls	r3, r3, #16
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4313      	orrs	r3, r2
 8008564:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008566:	68fb      	ldr	r3, [r7, #12]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	331a      	adds	r3, #26
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	b292      	uxth	r2, r2
 8008584:	4611      	mov	r1, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff f857 	bl	800763a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b03      	cmp	r3, #3
 8008592:	d109      	bne.n	80085a8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f103 0214 	add.w	r2, r3, #20
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	0c1b      	lsrs	r3, r3, #16
 800859e:	b29b      	uxth	r3, r3
 80085a0:	4619      	mov	r1, r3
 80085a2:	4610      	mov	r0, r2
 80085a4:	f7ff f849 	bl	800763a <st_word>
	}
}
 80085a8:	bf00      	nop
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80085be:	2100      	movs	r1, #0
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff fe2f 	bl	8008224 <dir_sdi>
 80085c6:	4603      	mov	r3, r0
 80085c8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <dir_find+0x24>
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	e03e      	b.n	8008652 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	4619      	mov	r1, r3
 80085da:	6938      	ldr	r0, [r7, #16]
 80085dc:	f7ff faa2 	bl	8007b24 <move_window>
 80085e0:	4603      	mov	r3, r0
 80085e2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d12f      	bne.n	800864a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d102      	bne.n	80085fe <dir_find+0x4e>
 80085f8:	2304      	movs	r3, #4
 80085fa:	75fb      	strb	r3, [r7, #23]
 80085fc:	e028      	b.n	8008650 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	330b      	adds	r3, #11
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800860a:	b2da      	uxtb	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	330b      	adds	r3, #11
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	f003 0308 	and.w	r3, r3, #8
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10a      	bne.n	8008636 <dir_find+0x86>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a18      	ldr	r0, [r3, #32]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3324      	adds	r3, #36	; 0x24
 8008628:	220b      	movs	r2, #11
 800862a:	4619      	mov	r1, r3
 800862c:	f7ff f888 	bl	8007740 <mem_cmp>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00b      	beq.n	800864e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008636:	2100      	movs	r1, #0
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7ff fe6e 	bl	800831a <dir_next>
 800863e:	4603      	mov	r3, r0
 8008640:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008642:	7dfb      	ldrb	r3, [r7, #23]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0c5      	beq.n	80085d4 <dir_find+0x24>
 8008648:	e002      	b.n	8008650 <dir_find+0xa0>
		if (res != FR_OK) break;
 800864a:	bf00      	nop
 800864c:	e000      	b.n	8008650 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800864e:	bf00      	nop

	return res;
 8008650:	7dfb      	ldrb	r3, [r7, #23]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3718      	adds	r7, #24
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008668:	2101      	movs	r1, #1
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff ff1a 	bl	80084a4 <dir_alloc>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d11c      	bne.n	80086b4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	4619      	mov	r1, r3
 8008680:	68b8      	ldr	r0, [r7, #8]
 8008682:	f7ff fa4f 	bl	8007b24 <move_window>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d111      	bne.n	80086b4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	2220      	movs	r2, #32
 8008696:	2100      	movs	r1, #0
 8008698:	4618      	mov	r0, r3
 800869a:	f7ff f836 	bl	800770a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a18      	ldr	r0, [r3, #32]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3324      	adds	r3, #36	; 0x24
 80086a6:	220b      	movs	r2, #11
 80086a8:	4619      	mov	r1, r3
 80086aa:	f7ff f80d 	bl	80076c8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2201      	movs	r2, #1
 80086b2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3324      	adds	r3, #36	; 0x24
 80086d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80086d6:	220b      	movs	r2, #11
 80086d8:	2120      	movs	r1, #32
 80086da:	68b8      	ldr	r0, [r7, #8]
 80086dc:	f7ff f815 	bl	800770a <mem_set>
	si = i = 0; ni = 8;
 80086e0:	2300      	movs	r3, #0
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	61fb      	str	r3, [r7, #28]
 80086e8:	2308      	movs	r3, #8
 80086ea:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	61fa      	str	r2, [r7, #28]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	4413      	add	r3, r2
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80086fa:	7efb      	ldrb	r3, [r7, #27]
 80086fc:	2b20      	cmp	r3, #32
 80086fe:	d94e      	bls.n	800879e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008700:	7efb      	ldrb	r3, [r7, #27]
 8008702:	2b2f      	cmp	r3, #47	; 0x2f
 8008704:	d006      	beq.n	8008714 <create_name+0x54>
 8008706:	7efb      	ldrb	r3, [r7, #27]
 8008708:	2b5c      	cmp	r3, #92	; 0x5c
 800870a:	d110      	bne.n	800872e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800870c:	e002      	b.n	8008714 <create_name+0x54>
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	3301      	adds	r3, #1
 8008712:	61fb      	str	r3, [r7, #28]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	4413      	add	r3, r2
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2b2f      	cmp	r3, #47	; 0x2f
 800871e:	d0f6      	beq.n	800870e <create_name+0x4e>
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	4413      	add	r3, r2
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b5c      	cmp	r3, #92	; 0x5c
 800872a:	d0f0      	beq.n	800870e <create_name+0x4e>
			break;
 800872c:	e038      	b.n	80087a0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800872e:	7efb      	ldrb	r3, [r7, #27]
 8008730:	2b2e      	cmp	r3, #46	; 0x2e
 8008732:	d003      	beq.n	800873c <create_name+0x7c>
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	429a      	cmp	r2, r3
 800873a:	d30c      	bcc.n	8008756 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b0b      	cmp	r3, #11
 8008740:	d002      	beq.n	8008748 <create_name+0x88>
 8008742:	7efb      	ldrb	r3, [r7, #27]
 8008744:	2b2e      	cmp	r3, #46	; 0x2e
 8008746:	d001      	beq.n	800874c <create_name+0x8c>
 8008748:	2306      	movs	r3, #6
 800874a:	e044      	b.n	80087d6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800874c:	2308      	movs	r3, #8
 800874e:	613b      	str	r3, [r7, #16]
 8008750:	230b      	movs	r3, #11
 8008752:	617b      	str	r3, [r7, #20]
			continue;
 8008754:	e022      	b.n	800879c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008756:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800875a:	2b00      	cmp	r3, #0
 800875c:	da04      	bge.n	8008768 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800875e:	7efb      	ldrb	r3, [r7, #27]
 8008760:	3b80      	subs	r3, #128	; 0x80
 8008762:	4a1f      	ldr	r2, [pc, #124]	; (80087e0 <create_name+0x120>)
 8008764:	5cd3      	ldrb	r3, [r2, r3]
 8008766:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008768:	7efb      	ldrb	r3, [r7, #27]
 800876a:	4619      	mov	r1, r3
 800876c:	481d      	ldr	r0, [pc, #116]	; (80087e4 <create_name+0x124>)
 800876e:	f7ff f80e 	bl	800778e <chk_chr>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <create_name+0xbc>
 8008778:	2306      	movs	r3, #6
 800877a:	e02c      	b.n	80087d6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800877c:	7efb      	ldrb	r3, [r7, #27]
 800877e:	2b60      	cmp	r3, #96	; 0x60
 8008780:	d905      	bls.n	800878e <create_name+0xce>
 8008782:	7efb      	ldrb	r3, [r7, #27]
 8008784:	2b7a      	cmp	r3, #122	; 0x7a
 8008786:	d802      	bhi.n	800878e <create_name+0xce>
 8008788:	7efb      	ldrb	r3, [r7, #27]
 800878a:	3b20      	subs	r3, #32
 800878c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	613a      	str	r2, [r7, #16]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	4413      	add	r3, r2
 8008798:	7efa      	ldrb	r2, [r7, #27]
 800879a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800879c:	e7a6      	b.n	80086ec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800879e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	441a      	add	r2, r3
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <create_name+0xf4>
 80087b0:	2306      	movs	r3, #6
 80087b2:	e010      	b.n	80087d6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2be5      	cmp	r3, #229	; 0xe5
 80087ba:	d102      	bne.n	80087c2 <create_name+0x102>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2205      	movs	r2, #5
 80087c0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80087c2:	7efb      	ldrb	r3, [r7, #27]
 80087c4:	2b20      	cmp	r3, #32
 80087c6:	d801      	bhi.n	80087cc <create_name+0x10c>
 80087c8:	2204      	movs	r2, #4
 80087ca:	e000      	b.n	80087ce <create_name+0x10e>
 80087cc:	2200      	movs	r2, #0
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	330b      	adds	r3, #11
 80087d2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80087d4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3720      	adds	r7, #32
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	08015ee0 	.word	0x08015ee0
 80087e4:	0800c964 	.word	0x0800c964

080087e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80087fc:	e002      	b.n	8008804 <follow_path+0x1c>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	3301      	adds	r3, #1
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	2b2f      	cmp	r3, #47	; 0x2f
 800880a:	d0f8      	beq.n	80087fe <follow_path+0x16>
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b5c      	cmp	r3, #92	; 0x5c
 8008812:	d0f4      	beq.n	80087fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2200      	movs	r2, #0
 8008818:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2b1f      	cmp	r3, #31
 8008820:	d80a      	bhi.n	8008838 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2280      	movs	r2, #128	; 0x80
 8008826:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800882a:	2100      	movs	r1, #0
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff fcf9 	bl	8008224 <dir_sdi>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]
 8008836:	e043      	b.n	80088c0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008838:	463b      	mov	r3, r7
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff ff3f 	bl	80086c0 <create_name>
 8008842:	4603      	mov	r3, r0
 8008844:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d134      	bne.n	80088b6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff feaf 	bl	80085b0 <dir_find>
 8008852:	4603      	mov	r3, r0
 8008854:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800885c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00a      	beq.n	800887a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008864:	7dfb      	ldrb	r3, [r7, #23]
 8008866:	2b04      	cmp	r3, #4
 8008868:	d127      	bne.n	80088ba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800886a:	7afb      	ldrb	r3, [r7, #11]
 800886c:	f003 0304 	and.w	r3, r3, #4
 8008870:	2b00      	cmp	r3, #0
 8008872:	d122      	bne.n	80088ba <follow_path+0xd2>
 8008874:	2305      	movs	r3, #5
 8008876:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008878:	e01f      	b.n	80088ba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800887a:	7afb      	ldrb	r3, [r7, #11]
 800887c:	f003 0304 	and.w	r3, r3, #4
 8008880:	2b00      	cmp	r3, #0
 8008882:	d11c      	bne.n	80088be <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	799b      	ldrb	r3, [r3, #6]
 8008888:	f003 0310 	and.w	r3, r3, #16
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008890:	2305      	movs	r3, #5
 8008892:	75fb      	strb	r3, [r7, #23]
 8008894:	e014      	b.n	80088c0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a4:	4413      	add	r3, r2
 80088a6:	4619      	mov	r1, r3
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f7ff fe42 	bl	8008532 <ld_clust>
 80088ae:	4602      	mov	r2, r0
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80088b4:	e7c0      	b.n	8008838 <follow_path+0x50>
			if (res != FR_OK) break;
 80088b6:	bf00      	nop
 80088b8:	e002      	b.n	80088c0 <follow_path+0xd8>
				break;
 80088ba:	bf00      	nop
 80088bc:	e000      	b.n	80088c0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80088be:	bf00      	nop
			}
		}
	}

	return res;
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b087      	sub	sp, #28
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80088d2:	f04f 33ff 	mov.w	r3, #4294967295
 80088d6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d031      	beq.n	8008944 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	617b      	str	r3, [r7, #20]
 80088e6:	e002      	b.n	80088ee <get_ldnumber+0x24>
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	3301      	adds	r3, #1
 80088ec:	617b      	str	r3, [r7, #20]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	2b20      	cmp	r3, #32
 80088f4:	d903      	bls.n	80088fe <get_ldnumber+0x34>
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	2b3a      	cmp	r3, #58	; 0x3a
 80088fc:	d1f4      	bne.n	80088e8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b3a      	cmp	r3, #58	; 0x3a
 8008904:	d11c      	bne.n	8008940 <get_ldnumber+0x76>
			tp = *path;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	1c5a      	adds	r2, r3, #1
 8008910:	60fa      	str	r2, [r7, #12]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	3b30      	subs	r3, #48	; 0x30
 8008916:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b09      	cmp	r3, #9
 800891c:	d80e      	bhi.n	800893c <get_ldnumber+0x72>
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	429a      	cmp	r2, r3
 8008924:	d10a      	bne.n	800893c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d107      	bne.n	800893c <get_ldnumber+0x72>
					vol = (int)i;
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	3301      	adds	r3, #1
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	e002      	b.n	8008946 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008940:	2300      	movs	r3, #0
 8008942:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008944:	693b      	ldr	r3, [r7, #16]
}
 8008946:	4618      	mov	r0, r3
 8008948:	371c      	adds	r7, #28
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
	...

08008954 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	70da      	strb	r2, [r3, #3]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f04f 32ff 	mov.w	r2, #4294967295
 800896a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff f8d8 	bl	8007b24 <move_window>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <check_fs+0x2a>
 800897a:	2304      	movs	r3, #4
 800897c:	e038      	b.n	80089f0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3330      	adds	r3, #48	; 0x30
 8008982:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008986:	4618      	mov	r0, r3
 8008988:	f7fe fe1c 	bl	80075c4 <ld_word>
 800898c:	4603      	mov	r3, r0
 800898e:	461a      	mov	r2, r3
 8008990:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008994:	429a      	cmp	r2, r3
 8008996:	d001      	beq.n	800899c <check_fs+0x48>
 8008998:	2303      	movs	r3, #3
 800899a:	e029      	b.n	80089f0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089a2:	2be9      	cmp	r3, #233	; 0xe9
 80089a4:	d009      	beq.n	80089ba <check_fs+0x66>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089ac:	2beb      	cmp	r3, #235	; 0xeb
 80089ae:	d11e      	bne.n	80089ee <check_fs+0x9a>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80089b6:	2b90      	cmp	r3, #144	; 0x90
 80089b8:	d119      	bne.n	80089ee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3330      	adds	r3, #48	; 0x30
 80089be:	3336      	adds	r3, #54	; 0x36
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fe17 	bl	80075f4 <ld_dword>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089cc:	4a0a      	ldr	r2, [pc, #40]	; (80089f8 <check_fs+0xa4>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d101      	bne.n	80089d6 <check_fs+0x82>
 80089d2:	2300      	movs	r3, #0
 80089d4:	e00c      	b.n	80089f0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3330      	adds	r3, #48	; 0x30
 80089da:	3352      	adds	r3, #82	; 0x52
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fe fe09 	bl	80075f4 <ld_dword>
 80089e2:	4603      	mov	r3, r0
 80089e4:	4a05      	ldr	r2, [pc, #20]	; (80089fc <check_fs+0xa8>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d101      	bne.n	80089ee <check_fs+0x9a>
 80089ea:	2300      	movs	r3, #0
 80089ec:	e000      	b.n	80089f0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80089ee:	2302      	movs	r3, #2
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	00544146 	.word	0x00544146
 80089fc:	33544146 	.word	0x33544146

08008a00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b096      	sub	sp, #88	; 0x58
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f7ff ff58 	bl	80088ca <get_ldnumber>
 8008a1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	da01      	bge.n	8008a26 <find_volume+0x26>
 8008a22:	230b      	movs	r3, #11
 8008a24:	e22e      	b.n	8008e84 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008a26:	4aa8      	ldr	r2, [pc, #672]	; (8008cc8 <find_volume+0x2c8>)
 8008a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <find_volume+0x3a>
 8008a36:	230c      	movs	r3, #12
 8008a38:	e224      	b.n	8008e84 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a3e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	f023 0301 	bic.w	r3, r3, #1
 8008a46:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d01a      	beq.n	8008a86 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	785b      	ldrb	r3, [r3, #1]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe fd17 	bl	8007488 <disk_status>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008a60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10c      	bne.n	8008a86 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d007      	beq.n	8008a82 <find_volume+0x82>
 8008a72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008a7e:	230a      	movs	r3, #10
 8008a80:	e200      	b.n	8008e84 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8008a82:	2300      	movs	r3, #0
 8008a84:	e1fe      	b.n	8008e84 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	2200      	movs	r2, #0
 8008a8a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	785b      	ldrb	r3, [r3, #1]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe fd0f 	bl	80074bc <disk_initialize>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008aa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e1e7      	b.n	8008e84 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008ab4:	79fb      	ldrb	r3, [r7, #7]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d007      	beq.n	8008aca <find_volume+0xca>
 8008aba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008abe:	f003 0304 	and.w	r3, r3, #4
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008ac6:	230a      	movs	r3, #10
 8008ac8:	e1dc      	b.n	8008e84 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008ace:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ad2:	f7ff ff3f 	bl	8008954 <check_fs>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008adc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d14b      	bne.n	8008b7c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ae8:	e01f      	b.n	8008b2a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008af8:	4413      	add	r3, r2
 8008afa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	3304      	adds	r3, #4
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d006      	beq.n	8008b14 <find_volume+0x114>
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	3308      	adds	r3, #8
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe fd72 	bl	80075f4 <ld_dword>
 8008b10:	4602      	mov	r2, r0
 8008b12:	e000      	b.n	8008b16 <find_volume+0x116>
 8008b14:	2200      	movs	r2, #0
 8008b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008b1e:	440b      	add	r3, r1
 8008b20:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b26:	3301      	adds	r3, #1
 8008b28:	643b      	str	r3, [r7, #64]	; 0x40
 8008b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d9dc      	bls.n	8008aea <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008b30:	2300      	movs	r3, #0
 8008b32:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <find_volume+0x140>
 8008b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008b48:	4413      	add	r3, r2
 8008b4a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008b4e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d005      	beq.n	8008b62 <find_volume+0x162>
 8008b56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b5a:	f7ff fefb 	bl	8008954 <check_fs>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	e000      	b.n	8008b64 <find_volume+0x164>
 8008b62:	2303      	movs	r3, #3
 8008b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008b68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d905      	bls.n	8008b7c <find_volume+0x17c>
 8008b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b72:	3301      	adds	r3, #1
 8008b74:	643b      	str	r3, [r7, #64]	; 0x40
 8008b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d9e1      	bls.n	8008b40 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d101      	bne.n	8008b88 <find_volume+0x188>
 8008b84:	2301      	movs	r3, #1
 8008b86:	e17d      	b.n	8008e84 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008b88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d901      	bls.n	8008b94 <find_volume+0x194>
 8008b90:	230d      	movs	r3, #13
 8008b92:	e177      	b.n	8008e84 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b96:	3330      	adds	r3, #48	; 0x30
 8008b98:	330b      	adds	r3, #11
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fd12 	bl	80075c4 <ld_word>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba6:	d001      	beq.n	8008bac <find_volume+0x1ac>
 8008ba8:	230d      	movs	r3, #13
 8008baa:	e16b      	b.n	8008e84 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	3330      	adds	r3, #48	; 0x30
 8008bb0:	3316      	adds	r3, #22
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe fd06 	bl	80075c4 <ld_word>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d106      	bne.n	8008bd0 <find_volume+0x1d0>
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc4:	3330      	adds	r3, #48	; 0x30
 8008bc6:	3324      	adds	r3, #36	; 0x24
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fe fd13 	bl	80075f4 <ld_dword>
 8008bce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bd4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be2:	789b      	ldrb	r3, [r3, #2]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d005      	beq.n	8008bf4 <find_volume+0x1f4>
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	789b      	ldrb	r3, [r3, #2]
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d001      	beq.n	8008bf4 <find_volume+0x1f4>
 8008bf0:	230d      	movs	r3, #13
 8008bf2:	e147      	b.n	8008e84 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	789b      	ldrb	r3, [r3, #2]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bfc:	fb02 f303 	mul.w	r3, r2, r3
 8008c00:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c10:	895b      	ldrh	r3, [r3, #10]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d008      	beq.n	8008c28 <find_volume+0x228>
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	895b      	ldrh	r3, [r3, #10]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1e:	895b      	ldrh	r3, [r3, #10]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	4013      	ands	r3, r2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <find_volume+0x22c>
 8008c28:	230d      	movs	r3, #13
 8008c2a:	e12b      	b.n	8008e84 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	3330      	adds	r3, #48	; 0x30
 8008c30:	3311      	adds	r3, #17
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe fcc6 	bl	80075c4 <ld_word>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c42:	891b      	ldrh	r3, [r3, #8]
 8008c44:	f003 030f 	and.w	r3, r3, #15
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <find_volume+0x252>
 8008c4e:	230d      	movs	r3, #13
 8008c50:	e118      	b.n	8008e84 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	3330      	adds	r3, #48	; 0x30
 8008c56:	3313      	adds	r3, #19
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe fcb3 	bl	80075c4 <ld_word>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <find_volume+0x276>
 8008c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6a:	3330      	adds	r3, #48	; 0x30
 8008c6c:	3320      	adds	r3, #32
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fcc0 	bl	80075f4 <ld_dword>
 8008c74:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c78:	3330      	adds	r3, #48	; 0x30
 8008c7a:	330e      	adds	r3, #14
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fe fca1 	bl	80075c4 <ld_word>
 8008c82:	4603      	mov	r3, r0
 8008c84:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008c86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <find_volume+0x290>
 8008c8c:	230d      	movs	r3, #13
 8008c8e:	e0f9      	b.n	8008e84 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008c90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c94:	4413      	add	r3, r2
 8008c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c98:	8912      	ldrh	r2, [r2, #8]
 8008c9a:	0912      	lsrs	r2, r2, #4
 8008c9c:	b292      	uxth	r2, r2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d201      	bcs.n	8008cae <find_volume+0x2ae>
 8008caa:	230d      	movs	r3, #13
 8008cac:	e0ea      	b.n	8008e84 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cb6:	8952      	ldrh	r2, [r2, #10]
 8008cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cbc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d103      	bne.n	8008ccc <find_volume+0x2cc>
 8008cc4:	230d      	movs	r3, #13
 8008cc6:	e0dd      	b.n	8008e84 <find_volume+0x484>
 8008cc8:	2000a104 	.word	0x2000a104
		fmt = FS_FAT32;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d802      	bhi.n	8008ce2 <find_volume+0x2e2>
 8008cdc:	2302      	movs	r3, #2
 8008cde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d802      	bhi.n	8008cf2 <find_volume+0x2f2>
 8008cec:	2301      	movs	r3, #1
 8008cee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	1c9a      	adds	r2, r3, #2
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cfe:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008d00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d04:	441a      	add	r2, r3
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008d0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0e:	441a      	add	r2, r3
 8008d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d12:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008d14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d11e      	bne.n	8008d5a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1e:	3330      	adds	r3, #48	; 0x30
 8008d20:	332a      	adds	r3, #42	; 0x2a
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fc4e 	bl	80075c4 <ld_word>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <find_volume+0x332>
 8008d2e:	230d      	movs	r3, #13
 8008d30:	e0a8      	b.n	8008e84 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	891b      	ldrh	r3, [r3, #8]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <find_volume+0x33e>
 8008d3a:	230d      	movs	r3, #13
 8008d3c:	e0a2      	b.n	8008e84 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d40:	3330      	adds	r3, #48	; 0x30
 8008d42:	332c      	adds	r3, #44	; 0x2c
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fe fc55 	bl	80075f4 <ld_dword>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	647b      	str	r3, [r7, #68]	; 0x44
 8008d58:	e01f      	b.n	8008d9a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5c:	891b      	ldrh	r3, [r3, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <find_volume+0x366>
 8008d62:	230d      	movs	r3, #13
 8008d64:	e08e      	b.n	8008e84 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d68:	6a1a      	ldr	r2, [r3, #32]
 8008d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6c:	441a      	add	r2, r3
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d103      	bne.n	8008d82 <find_volume+0x382>
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	e00a      	b.n	8008d98 <find_volume+0x398>
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	695a      	ldr	r2, [r3, #20]
 8008d86:	4613      	mov	r3, r2
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	4413      	add	r3, r2
 8008d8c:	085a      	lsrs	r2, r3, #1
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008d98:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	699a      	ldr	r2, [r3, #24]
 8008d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008da4:	0a5b      	lsrs	r3, r3, #9
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d201      	bcs.n	8008dae <find_volume+0x3ae>
 8008daa:	230d      	movs	r3, #13
 8008dac:	e06a      	b.n	8008e84 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	f04f 32ff 	mov.w	r2, #4294967295
 8008db4:	611a      	str	r2, [r3, #16]
 8008db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db8:	691a      	ldr	r2, [r3, #16]
 8008dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc0:	2280      	movs	r2, #128	; 0x80
 8008dc2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d149      	bne.n	8008e60 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dce:	3330      	adds	r3, #48	; 0x30
 8008dd0:	3330      	adds	r3, #48	; 0x30
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe fbf6 	bl	80075c4 <ld_word>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d140      	bne.n	8008e60 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de0:	3301      	adds	r3, #1
 8008de2:	4619      	mov	r1, r3
 8008de4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008de6:	f7fe fe9d 	bl	8007b24 <move_window>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d137      	bne.n	8008e60 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df2:	2200      	movs	r2, #0
 8008df4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	3330      	adds	r3, #48	; 0x30
 8008dfa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fbe0 	bl	80075c4 <ld_word>
 8008e04:	4603      	mov	r3, r0
 8008e06:	461a      	mov	r2, r3
 8008e08:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d127      	bne.n	8008e60 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e12:	3330      	adds	r3, #48	; 0x30
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe fbed 	bl	80075f4 <ld_dword>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	4a1b      	ldr	r2, [pc, #108]	; (8008e8c <find_volume+0x48c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d11e      	bne.n	8008e60 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	3330      	adds	r3, #48	; 0x30
 8008e26:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fbe2 	bl	80075f4 <ld_dword>
 8008e30:	4603      	mov	r3, r0
 8008e32:	4a17      	ldr	r2, [pc, #92]	; (8008e90 <find_volume+0x490>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d113      	bne.n	8008e60 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	3330      	adds	r3, #48	; 0x30
 8008e3c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe fbd7 	bl	80075f4 <ld_dword>
 8008e46:	4602      	mov	r2, r0
 8008e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4e:	3330      	adds	r3, #48	; 0x30
 8008e50:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fe fbcd 	bl	80075f4 <ld_dword>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e62:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008e66:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008e68:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <find_volume+0x494>)
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	4b08      	ldr	r3, [pc, #32]	; (8008e94 <find_volume+0x494>)
 8008e72:	801a      	strh	r2, [r3, #0]
 8008e74:	4b07      	ldr	r3, [pc, #28]	; (8008e94 <find_volume+0x494>)
 8008e76:	881a      	ldrh	r2, [r3, #0]
 8008e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008e7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e7e:	f7fe fde9 	bl	8007a54 <clear_lock>
#endif
	return FR_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3758      	adds	r7, #88	; 0x58
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	41615252 	.word	0x41615252
 8008e90:	61417272 	.word	0x61417272
 8008e94:	2000a108 	.word	0x2000a108

08008e98 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008ea2:	2309      	movs	r3, #9
 8008ea4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01c      	beq.n	8008ee6 <validate+0x4e>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d018      	beq.n	8008ee6 <validate+0x4e>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d013      	beq.n	8008ee6 <validate+0x4e>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	889a      	ldrh	r2, [r3, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	88db      	ldrh	r3, [r3, #6]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d10c      	bne.n	8008ee6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fad8 	bl	8007488 <disk_status>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <validate+0x4e>
			res = FR_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d102      	bne.n	8008ef2 <validate+0x5a>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	e000      	b.n	8008ef4 <validate+0x5c>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	6013      	str	r3, [r2, #0]
	return res;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008f16:	f107 0310 	add.w	r3, r7, #16
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff fcd5 	bl	80088ca <get_ldnumber>
 8008f20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	da01      	bge.n	8008f2c <f_mount+0x28>
 8008f28:	230b      	movs	r3, #11
 8008f2a:	e02b      	b.n	8008f84 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008f2c:	4a17      	ldr	r2, [pc, #92]	; (8008f8c <f_mount+0x88>)
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f34:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008f3c:	69b8      	ldr	r0, [r7, #24]
 8008f3e:	f7fe fd89 	bl	8007a54 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	2200      	movs	r2, #0
 8008f46:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	490d      	ldr	r1, [pc, #52]	; (8008f8c <f_mount+0x88>)
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <f_mount+0x66>
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d001      	beq.n	8008f6e <f_mount+0x6a>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	e00a      	b.n	8008f84 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008f6e:	f107 010c 	add.w	r1, r7, #12
 8008f72:	f107 0308 	add.w	r3, r7, #8
 8008f76:	2200      	movs	r2, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7ff fd41 	bl	8008a00 <find_volume>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3720      	adds	r7, #32
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	2000a104 	.word	0x2000a104

08008f90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b098      	sub	sp, #96	; 0x60
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <f_open+0x18>
 8008fa4:	2309      	movs	r3, #9
 8008fa6:	e1ad      	b.n	8009304 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008fa8:	79fb      	ldrb	r3, [r7, #7]
 8008faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008fb0:	79fa      	ldrb	r2, [r7, #7]
 8008fb2:	f107 0110 	add.w	r1, r7, #16
 8008fb6:	f107 0308 	add.w	r3, r7, #8
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7ff fd20 	bl	8008a00 <find_volume>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008fc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f040 8191 	bne.w	80092f2 <f_open+0x362>
		dj.obj.fs = fs;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	f107 0314 	add.w	r3, r7, #20
 8008fda:	4611      	mov	r1, r2
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff fc03 	bl	80087e8 <follow_path>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008fe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d11a      	bne.n	8009026 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008ff0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ff4:	b25b      	sxtb	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	da03      	bge.n	8009002 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008ffa:	2306      	movs	r3, #6
 8008ffc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009000:	e011      	b.n	8009026 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	f023 0301 	bic.w	r3, r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	bf14      	ite	ne
 800900c:	2301      	movne	r3, #1
 800900e:	2300      	moveq	r3, #0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	461a      	mov	r2, r3
 8009014:	f107 0314 	add.w	r3, r7, #20
 8009018:	4611      	mov	r1, r2
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe fbd2 	bl	80077c4 <chk_lock>
 8009020:	4603      	mov	r3, r0
 8009022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	f003 031c 	and.w	r3, r3, #28
 800902c:	2b00      	cmp	r3, #0
 800902e:	d07f      	beq.n	8009130 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009034:	2b00      	cmp	r3, #0
 8009036:	d017      	beq.n	8009068 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800903c:	2b04      	cmp	r3, #4
 800903e:	d10e      	bne.n	800905e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009040:	f7fe fc1c 	bl	800787c <enq_lock>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d006      	beq.n	8009058 <f_open+0xc8>
 800904a:	f107 0314 	add.w	r3, r7, #20
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff fb03 	bl	800865a <dir_register>
 8009054:	4603      	mov	r3, r0
 8009056:	e000      	b.n	800905a <f_open+0xca>
 8009058:	2312      	movs	r3, #18
 800905a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	f043 0308 	orr.w	r3, r3, #8
 8009064:	71fb      	strb	r3, [r7, #7]
 8009066:	e010      	b.n	800908a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009068:	7ebb      	ldrb	r3, [r7, #26]
 800906a:	f003 0311 	and.w	r3, r3, #17
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <f_open+0xea>
					res = FR_DENIED;
 8009072:	2307      	movs	r3, #7
 8009074:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009078:	e007      	b.n	800908a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	f003 0304 	and.w	r3, r3, #4
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <f_open+0xfa>
 8009084:	2308      	movs	r3, #8
 8009086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800908a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800908e:	2b00      	cmp	r3, #0
 8009090:	d168      	bne.n	8009164 <f_open+0x1d4>
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	f003 0308 	and.w	r3, r3, #8
 8009098:	2b00      	cmp	r3, #0
 800909a:	d063      	beq.n	8009164 <f_open+0x1d4>
				dw = GET_FATTIME();
 800909c:	f7fe f996 	bl	80073cc <get_fattime>
 80090a0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80090a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a4:	330e      	adds	r3, #14
 80090a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fe fae1 	bl	8007670 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80090ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b0:	3316      	adds	r3, #22
 80090b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fe fadb 	bl	8007670 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80090ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090bc:	330b      	adds	r3, #11
 80090be:	2220      	movs	r2, #32
 80090c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090c6:	4611      	mov	r1, r2
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7ff fa32 	bl	8008532 <ld_clust>
 80090ce:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80090d4:	2200      	movs	r2, #0
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7ff fa4a 	bl	8008570 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80090dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090de:	331c      	adds	r3, #28
 80090e0:	2100      	movs	r1, #0
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fac4 	bl	8007670 <st_dword>
					fs->wflag = 1;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	2201      	movs	r2, #1
 80090ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80090ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d037      	beq.n	8009164 <f_open+0x1d4>
						dw = fs->winsect;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80090fa:	f107 0314 	add.w	r3, r7, #20
 80090fe:	2200      	movs	r2, #0
 8009100:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe ff5d 	bl	8007fc2 <remove_chain>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800910e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009112:	2b00      	cmp	r3, #0
 8009114:	d126      	bne.n	8009164 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fd02 	bl	8007b24 <move_window>
 8009120:	4603      	mov	r3, r0
 8009122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800912a:	3a01      	subs	r2, #1
 800912c:	60da      	str	r2, [r3, #12]
 800912e:	e019      	b.n	8009164 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009134:	2b00      	cmp	r3, #0
 8009136:	d115      	bne.n	8009164 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009138:	7ebb      	ldrb	r3, [r7, #26]
 800913a:	f003 0310 	and.w	r3, r3, #16
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009142:	2304      	movs	r3, #4
 8009144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009148:	e00c      	b.n	8009164 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800914a:	79fb      	ldrb	r3, [r7, #7]
 800914c:	f003 0302 	and.w	r3, r3, #2
 8009150:	2b00      	cmp	r3, #0
 8009152:	d007      	beq.n	8009164 <f_open+0x1d4>
 8009154:	7ebb      	ldrb	r3, [r7, #26]
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <f_open+0x1d4>
						res = FR_DENIED;
 800915e:	2307      	movs	r3, #7
 8009160:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009168:	2b00      	cmp	r3, #0
 800916a:	d128      	bne.n	80091be <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800917c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	f023 0301 	bic.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	bf14      	ite	ne
 8009196:	2301      	movne	r3, #1
 8009198:	2300      	moveq	r3, #0
 800919a:	b2db      	uxtb	r3, r3
 800919c:	461a      	mov	r2, r3
 800919e:	f107 0314 	add.w	r3, r7, #20
 80091a2:	4611      	mov	r1, r2
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fe fb8b 	bl	80078c0 <inc_lock>
 80091aa:	4602      	mov	r2, r0
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d102      	bne.n	80091be <f_open+0x22e>
 80091b8:	2302      	movs	r3, #2
 80091ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80091be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f040 8095 	bne.w	80092f2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091cc:	4611      	mov	r1, r2
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff f9af 	bl	8008532 <ld_clust>
 80091d4:	4602      	mov	r2, r0
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80091da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091dc:	331c      	adds	r3, #28
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fe fa08 	bl	80075f4 <ld_dword>
 80091e4:	4602      	mov	r2, r0
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	88da      	ldrh	r2, [r3, #6]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	79fa      	ldrb	r2, [r7, #7]
 8009202:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3330      	adds	r3, #48	; 0x30
 800921a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800921e:	2100      	movs	r1, #0
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fa72 	bl	800770a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	f003 0320 	and.w	r3, r3, #32
 800922c:	2b00      	cmp	r3, #0
 800922e:	d060      	beq.n	80092f2 <f_open+0x362>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d05c      	beq.n	80092f2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	68da      	ldr	r2, [r3, #12]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	895b      	ldrh	r3, [r3, #10]
 8009244:	025b      	lsls	r3, r3, #9
 8009246:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	657b      	str	r3, [r7, #84]	; 0x54
 8009254:	e016      	b.n	8009284 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800925a:	4618      	mov	r0, r3
 800925c:	f7fe fd1d 	bl	8007c9a <get_fat>
 8009260:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009264:	2b01      	cmp	r3, #1
 8009266:	d802      	bhi.n	800926e <f_open+0x2de>
 8009268:	2302      	movs	r3, #2
 800926a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800926e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009274:	d102      	bne.n	800927c <f_open+0x2ec>
 8009276:	2301      	movs	r3, #1
 8009278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800927c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800927e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	657b      	str	r3, [r7, #84]	; 0x54
 8009284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009288:	2b00      	cmp	r3, #0
 800928a:	d103      	bne.n	8009294 <f_open+0x304>
 800928c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800928e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009290:	429a      	cmp	r2, r3
 8009292:	d8e0      	bhi.n	8009256 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009298:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800929a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d127      	bne.n	80092f2 <f_open+0x362>
 80092a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d022      	beq.n	80092f2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fe fcd3 	bl	8007c5c <clust2sect>
 80092b6:	6478      	str	r0, [r7, #68]	; 0x44
 80092b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d103      	bne.n	80092c6 <f_open+0x336>
						res = FR_INT_ERR;
 80092be:	2302      	movs	r3, #2
 80092c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80092c4:	e015      	b.n	80092f2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80092c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092c8:	0a5a      	lsrs	r2, r3, #9
 80092ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092cc:	441a      	add	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	7858      	ldrb	r0, [r3, #1]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6a1a      	ldr	r2, [r3, #32]
 80092e0:	2301      	movs	r3, #1
 80092e2:	f7fe f911 	bl	8007508 <disk_read>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <f_open+0x362>
 80092ec:	2301      	movs	r3, #1
 80092ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80092f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <f_open+0x370>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009304:	4618      	mov	r0, r3
 8009306:	3760      	adds	r7, #96	; 0x60
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08c      	sub	sp, #48	; 0x30
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2200      	movs	r2, #0
 8009322:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f107 0210 	add.w	r2, r7, #16
 800932a:	4611      	mov	r1, r2
 800932c:	4618      	mov	r0, r3
 800932e:	f7ff fdb3 	bl	8008e98 <validate>
 8009332:	4603      	mov	r3, r0
 8009334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009338:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800933c:	2b00      	cmp	r3, #0
 800933e:	d107      	bne.n	8009350 <f_write+0x44>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	7d5b      	ldrb	r3, [r3, #21]
 8009344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <f_write+0x4a>
 8009350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009354:	e14b      	b.n	80095ee <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	7d1b      	ldrb	r3, [r3, #20]
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <f_write+0x5a>
 8009362:	2307      	movs	r3, #7
 8009364:	e143      	b.n	80095ee <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	699a      	ldr	r2, [r3, #24]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	441a      	add	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	429a      	cmp	r2, r3
 8009374:	f080 812d 	bcs.w	80095d2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	43db      	mvns	r3, r3
 800937e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009380:	e127      	b.n	80095d2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938a:	2b00      	cmp	r3, #0
 800938c:	f040 80e3 	bne.w	8009556 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	0a5b      	lsrs	r3, r3, #9
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	8952      	ldrh	r2, [r2, #10]
 800939a:	3a01      	subs	r2, #1
 800939c:	4013      	ands	r3, r2
 800939e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d143      	bne.n	800942e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10c      	bne.n	80093c8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d11a      	bne.n	80093f0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2100      	movs	r1, #0
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe fe64 	bl	800808c <create_chain>
 80093c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80093c6:	e013      	b.n	80093f0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d007      	beq.n	80093e0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	4619      	mov	r1, r3
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f7fe fef0 	bl	80081bc <clmt_clust>
 80093dc:	62b8      	str	r0, [r7, #40]	; 0x28
 80093de:	e007      	b.n	80093f0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	4619      	mov	r1, r3
 80093e8:	4610      	mov	r0, r2
 80093ea:	f7fe fe4f 	bl	800808c <create_chain>
 80093ee:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 80f2 	beq.w	80095dc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d104      	bne.n	8009408 <f_write+0xfc>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2202      	movs	r2, #2
 8009402:	755a      	strb	r2, [r3, #21]
 8009404:	2302      	movs	r3, #2
 8009406:	e0f2      	b.n	80095ee <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940e:	d104      	bne.n	800941a <f_write+0x10e>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2201      	movs	r2, #1
 8009414:	755a      	strb	r2, [r3, #21]
 8009416:	2301      	movs	r3, #1
 8009418:	e0e9      	b.n	80095ee <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800941e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d102      	bne.n	800942e <f_write+0x122>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800942c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	7d1b      	ldrb	r3, [r3, #20]
 8009432:	b25b      	sxtb	r3, r3
 8009434:	2b00      	cmp	r3, #0
 8009436:	da18      	bge.n	800946a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	7858      	ldrb	r0, [r3, #1]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6a1a      	ldr	r2, [r3, #32]
 8009446:	2301      	movs	r3, #1
 8009448:	f7fe f87e 	bl	8007548 <disk_write>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d004      	beq.n	800945c <f_write+0x150>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2201      	movs	r2, #1
 8009456:	755a      	strb	r2, [r3, #21]
 8009458:	2301      	movs	r3, #1
 800945a:	e0c8      	b.n	80095ee <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	7d1b      	ldrb	r3, [r3, #20]
 8009460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009464:	b2da      	uxtb	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	69db      	ldr	r3, [r3, #28]
 8009470:	4619      	mov	r1, r3
 8009472:	4610      	mov	r0, r2
 8009474:	f7fe fbf2 	bl	8007c5c <clust2sect>
 8009478:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d104      	bne.n	800948a <f_write+0x17e>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2202      	movs	r2, #2
 8009484:	755a      	strb	r2, [r3, #21]
 8009486:	2302      	movs	r3, #2
 8009488:	e0b1      	b.n	80095ee <f_write+0x2e2>
			sect += csect;
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	4413      	add	r3, r2
 8009490:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	0a5b      	lsrs	r3, r3, #9
 8009496:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009498:	6a3b      	ldr	r3, [r7, #32]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d03c      	beq.n	8009518 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	4413      	add	r3, r2
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	8952      	ldrh	r2, [r2, #10]
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d905      	bls.n	80094b8 <f_write+0x1ac>
					cc = fs->csize - csect;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	895b      	ldrh	r3, [r3, #10]
 80094b0:	461a      	mov	r2, r3
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	7858      	ldrb	r0, [r3, #1]
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	69f9      	ldr	r1, [r7, #28]
 80094c2:	f7fe f841 	bl	8007548 <disk_write>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d004      	beq.n	80094d6 <f_write+0x1ca>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2201      	movs	r2, #1
 80094d0:	755a      	strb	r2, [r3, #21]
 80094d2:	2301      	movs	r3, #1
 80094d4:	e08b      	b.n	80095ee <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a1a      	ldr	r2, [r3, #32]
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	6a3a      	ldr	r2, [r7, #32]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d915      	bls.n	8009510 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a1a      	ldr	r2, [r3, #32]
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	025b      	lsls	r3, r3, #9
 80094f4:	69fa      	ldr	r2, [r7, #28]
 80094f6:	4413      	add	r3, r2
 80094f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094fc:	4619      	mov	r1, r3
 80094fe:	f7fe f8e3 	bl	80076c8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	7d1b      	ldrb	r3, [r3, #20]
 8009506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800950a:	b2da      	uxtb	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	025b      	lsls	r3, r3, #9
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009516:	e03f      	b.n	8009598 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	429a      	cmp	r2, r3
 8009520:	d016      	beq.n	8009550 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	699a      	ldr	r2, [r3, #24]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800952a:	429a      	cmp	r2, r3
 800952c:	d210      	bcs.n	8009550 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	7858      	ldrb	r0, [r3, #1]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009538:	2301      	movs	r3, #1
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	f7fd ffe4 	bl	8007508 <disk_read>
 8009540:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009542:	2b00      	cmp	r3, #0
 8009544:	d004      	beq.n	8009550 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2201      	movs	r2, #1
 800954a:	755a      	strb	r2, [r3, #21]
 800954c:	2301      	movs	r3, #1
 800954e:	e04e      	b.n	80095ee <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800955e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009562:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	429a      	cmp	r2, r3
 800956a:	d901      	bls.n	8009570 <f_write+0x264>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800957e:	4413      	add	r3, r2
 8009580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009582:	69f9      	ldr	r1, [r7, #28]
 8009584:	4618      	mov	r0, r3
 8009586:	f7fe f89f 	bl	80076c8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	7d1b      	ldrb	r3, [r3, #20]
 800958e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009592:	b2da      	uxtb	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009598:	69fa      	ldr	r2, [r7, #28]
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	4413      	add	r3, r2
 800959e:	61fb      	str	r3, [r7, #28]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	699a      	ldr	r2, [r3, #24]
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	441a      	add	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	619a      	str	r2, [r3, #24]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	68da      	ldr	r2, [r3, #12]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	bf38      	it	cc
 80095b8:	461a      	movcc	r2, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	60da      	str	r2, [r3, #12]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c4:	441a      	add	r2, r3
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f47f aed4 	bne.w	8009382 <f_write+0x76>
 80095da:	e000      	b.n	80095de <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095dc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	7d1b      	ldrb	r3, [r3, #20]
 80095e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3730      	adds	r7, #48	; 0x30
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b086      	sub	sp, #24
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f107 0208 	add.w	r2, r7, #8
 8009604:	4611      	mov	r1, r2
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff fc46 	bl	8008e98 <validate>
 800960c:	4603      	mov	r3, r0
 800960e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d168      	bne.n	80096e8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	7d1b      	ldrb	r3, [r3, #20]
 800961a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961e:	2b00      	cmp	r3, #0
 8009620:	d062      	beq.n	80096e8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	7d1b      	ldrb	r3, [r3, #20]
 8009626:	b25b      	sxtb	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	da15      	bge.n	8009658 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	7858      	ldrb	r0, [r3, #1]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1a      	ldr	r2, [r3, #32]
 800963a:	2301      	movs	r3, #1
 800963c:	f7fd ff84 	bl	8007548 <disk_write>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <f_sync+0x54>
 8009646:	2301      	movs	r3, #1
 8009648:	e04f      	b.n	80096ea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	7d1b      	ldrb	r3, [r3, #20]
 800964e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009652:	b2da      	uxtb	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009658:	f7fd feb8 	bl	80073cc <get_fattime>
 800965c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f7fe fa5c 	bl	8007b24 <move_window>
 800966c:	4603      	mov	r3, r0
 800966e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d138      	bne.n	80096e8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	330b      	adds	r3, #11
 8009680:	781a      	ldrb	r2, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	330b      	adds	r3, #11
 8009686:	f042 0220 	orr.w	r2, r2, #32
 800968a:	b2d2      	uxtb	r2, r2
 800968c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	461a      	mov	r2, r3
 8009698:	68f9      	ldr	r1, [r7, #12]
 800969a:	f7fe ff69 	bl	8008570 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f103 021c 	add.w	r2, r3, #28
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4619      	mov	r1, r3
 80096aa:	4610      	mov	r0, r2
 80096ac:	f7fd ffe0 	bl	8007670 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3316      	adds	r3, #22
 80096b4:	6939      	ldr	r1, [r7, #16]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fd ffda 	bl	8007670 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3312      	adds	r3, #18
 80096c0:	2100      	movs	r1, #0
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fd ffb9 	bl	800763a <st_word>
					fs->wflag = 1;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2201      	movs	r2, #1
 80096cc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fe fa55 	bl	8007b80 <sync_fs>
 80096d6:	4603      	mov	r3, r0
 80096d8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	7d1b      	ldrb	r3, [r3, #20]
 80096de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff ff7b 	bl	80095f6 <f_sync>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d118      	bne.n	800973c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f107 0208 	add.w	r2, r7, #8
 8009710:	4611      	mov	r1, r2
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff fbc0 	bl	8008e98 <validate>
 8009718:	4603      	mov	r3, r0
 800971a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10c      	bne.n	800973c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe f958 	bl	80079dc <dec_lock>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d102      	bne.n	800973c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800973c:	7bfb      	ldrb	r3, [r7, #15]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b090      	sub	sp, #64	; 0x40
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f107 0208 	add.w	r2, r7, #8
 8009756:	4611      	mov	r1, r2
 8009758:	4618      	mov	r0, r3
 800975a:	f7ff fb9d 	bl	8008e98 <validate>
 800975e:	4603      	mov	r3, r0
 8009760:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009764:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009768:	2b00      	cmp	r3, #0
 800976a:	d103      	bne.n	8009774 <f_lseek+0x2e>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	7d5b      	ldrb	r3, [r3, #21]
 8009770:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009774:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <f_lseek+0x3c>
 800977c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009780:	e1e6      	b.n	8009b50 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 80d1 	beq.w	800992e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009792:	d15a      	bne.n	800984a <f_lseek+0x104>
			tbl = fp->cltbl;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009798:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	1d1a      	adds	r2, r3, #4
 800979e:	627a      	str	r2, [r7, #36]	; 0x24
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	617b      	str	r3, [r7, #20]
 80097a4:	2302      	movs	r3, #2
 80097a6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80097ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d03a      	beq.n	800982a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	613b      	str	r3, [r7, #16]
 80097b8:	2300      	movs	r3, #0
 80097ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097be:	3302      	adds	r3, #2
 80097c0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c8:	3301      	adds	r3, #1
 80097ca:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fa62 	bl	8007c9a <get_fat>
 80097d6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80097d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d804      	bhi.n	80097e8 <f_lseek+0xa2>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2202      	movs	r2, #2
 80097e2:	755a      	strb	r2, [r3, #21]
 80097e4:	2302      	movs	r3, #2
 80097e6:	e1b3      	b.n	8009b50 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ee:	d104      	bne.n	80097fa <f_lseek+0xb4>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	755a      	strb	r2, [r3, #21]
 80097f6:	2301      	movs	r3, #1
 80097f8:	e1aa      	b.n	8009b50 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3301      	adds	r3, #1
 80097fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009800:	429a      	cmp	r2, r3
 8009802:	d0de      	beq.n	80097c2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	429a      	cmp	r2, r3
 800980a:	d809      	bhi.n	8009820 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	1d1a      	adds	r2, r3, #4
 8009810:	627a      	str	r2, [r7, #36]	; 0x24
 8009812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	1d1a      	adds	r2, r3, #4
 800981a:	627a      	str	r2, [r7, #36]	; 0x24
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009826:	429a      	cmp	r2, r3
 8009828:	d3c4      	bcc.n	80097b4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009830:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	429a      	cmp	r2, r3
 8009838:	d803      	bhi.n	8009842 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	2200      	movs	r2, #0
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	e184      	b.n	8009b4c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009842:	2311      	movs	r3, #17
 8009844:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009848:	e180      	b.n	8009b4c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	429a      	cmp	r2, r3
 8009852:	d902      	bls.n	800985a <f_lseek+0x114>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 8172 	beq.w	8009b4c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	3b01      	subs	r3, #1
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7fe fca4 	bl	80081bc <clmt_clust>
 8009874:	4602      	mov	r2, r0
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	4619      	mov	r1, r3
 8009882:	4610      	mov	r0, r2
 8009884:	f7fe f9ea 	bl	8007c5c <clust2sect>
 8009888:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <f_lseek+0x154>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2202      	movs	r2, #2
 8009894:	755a      	strb	r2, [r3, #21]
 8009896:	2302      	movs	r3, #2
 8009898:	e15a      	b.n	8009b50 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	3b01      	subs	r3, #1
 800989e:	0a5b      	lsrs	r3, r3, #9
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	8952      	ldrh	r2, [r2, #10]
 80098a4:	3a01      	subs	r2, #1
 80098a6:	4013      	ands	r3, r2
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	4413      	add	r3, r2
 80098ac:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 8148 	beq.w	8009b4c <f_lseek+0x406>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	69ba      	ldr	r2, [r7, #24]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	f000 8142 	beq.w	8009b4c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	7d1b      	ldrb	r3, [r3, #20]
 80098cc:	b25b      	sxtb	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	da18      	bge.n	8009904 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	7858      	ldrb	r0, [r3, #1]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a1a      	ldr	r2, [r3, #32]
 80098e0:	2301      	movs	r3, #1
 80098e2:	f7fd fe31 	bl	8007548 <disk_write>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <f_lseek+0x1b0>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	755a      	strb	r2, [r3, #21]
 80098f2:	2301      	movs	r3, #1
 80098f4:	e12c      	b.n	8009b50 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	7d1b      	ldrb	r3, [r3, #20]
 80098fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	7858      	ldrb	r0, [r3, #1]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800990e:	2301      	movs	r3, #1
 8009910:	69ba      	ldr	r2, [r7, #24]
 8009912:	f7fd fdf9 	bl	8007508 <disk_read>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d004      	beq.n	8009926 <f_lseek+0x1e0>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	755a      	strb	r2, [r3, #21]
 8009922:	2301      	movs	r3, #1
 8009924:	e114      	b.n	8009b50 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	621a      	str	r2, [r3, #32]
 800992c:	e10e      	b.n	8009b4c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	429a      	cmp	r2, r3
 8009936:	d908      	bls.n	800994a <f_lseek+0x204>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	7d1b      	ldrb	r3, [r3, #20]
 800993c:	f003 0302 	and.w	r3, r3, #2
 8009940:	2b00      	cmp	r3, #0
 8009942:	d102      	bne.n	800994a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009950:	2300      	movs	r3, #0
 8009952:	637b      	str	r3, [r7, #52]	; 0x34
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009958:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 80a7 	beq.w	8009ab0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	895b      	ldrh	r3, [r3, #10]
 8009966:	025b      	lsls	r3, r3, #9
 8009968:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d01b      	beq.n	80099a8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	1e5a      	subs	r2, r3, #1
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	fbb2 f2f3 	udiv	r2, r2, r3
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	1e59      	subs	r1, r3, #1
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009984:	429a      	cmp	r2, r3
 8009986:	d30f      	bcc.n	80099a8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	1e5a      	subs	r2, r3, #1
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	425b      	negs	r3, r3
 8009990:	401a      	ands	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80099a6:	e022      	b.n	80099ee <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80099ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d119      	bne.n	80099e8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2100      	movs	r1, #0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe fb67 	bl	800808c <create_chain>
 80099be:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80099c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d104      	bne.n	80099d0 <f_lseek+0x28a>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2202      	movs	r2, #2
 80099ca:	755a      	strb	r2, [r3, #21]
 80099cc:	2302      	movs	r3, #2
 80099ce:	e0bf      	b.n	8009b50 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d6:	d104      	bne.n	80099e2 <f_lseek+0x29c>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	755a      	strb	r2, [r3, #21]
 80099de:	2301      	movs	r3, #1
 80099e0:	e0b6      	b.n	8009b50 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099e6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099ec:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d05d      	beq.n	8009ab0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80099f4:	e03a      	b.n	8009a6c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	603b      	str	r3, [r7, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	699a      	ldr	r2, [r3, #24]
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	441a      	add	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	7d1b      	ldrb	r3, [r3, #20]
 8009a0e:	f003 0302 	and.w	r3, r3, #2
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00b      	beq.n	8009a2e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fb36 	bl	800808c <create_chain>
 8009a20:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d108      	bne.n	8009a3a <f_lseek+0x2f4>
							ofs = 0; break;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	e022      	b.n	8009a74 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe f931 	bl	8007c9a <get_fat>
 8009a38:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a40:	d104      	bne.n	8009a4c <f_lseek+0x306>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	755a      	strb	r2, [r3, #21]
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e081      	b.n	8009b50 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d904      	bls.n	8009a5c <f_lseek+0x316>
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d304      	bcc.n	8009a66 <f_lseek+0x320>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	755a      	strb	r2, [r3, #21]
 8009a62:	2302      	movs	r3, #2
 8009a64:	e074      	b.n	8009b50 <f_lseek+0x40a>
					fp->clust = clst;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a6a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d8c0      	bhi.n	80099f6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	699a      	ldr	r2, [r3, #24]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	441a      	add	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d012      	beq.n	8009ab0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe f8e4 	bl	8007c5c <clust2sect>
 8009a94:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d104      	bne.n	8009aa6 <f_lseek+0x360>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	755a      	strb	r2, [r3, #21]
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	e054      	b.n	8009b50 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	0a5b      	lsrs	r3, r3, #9
 8009aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aac:	4413      	add	r3, r2
 8009aae:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	699a      	ldr	r2, [r3, #24]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d90a      	bls.n	8009ad2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	699a      	ldr	r2, [r3, #24]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	7d1b      	ldrb	r3, [r3, #20]
 8009ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d036      	beq.n	8009b4c <f_lseek+0x406>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d031      	beq.n	8009b4c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	7d1b      	ldrb	r3, [r3, #20]
 8009aec:	b25b      	sxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	da18      	bge.n	8009b24 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	7858      	ldrb	r0, [r3, #1]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a1a      	ldr	r2, [r3, #32]
 8009b00:	2301      	movs	r3, #1
 8009b02:	f7fd fd21 	bl	8007548 <disk_write>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d004      	beq.n	8009b16 <f_lseek+0x3d0>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	755a      	strb	r2, [r3, #21]
 8009b12:	2301      	movs	r3, #1
 8009b14:	e01c      	b.n	8009b50 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	7d1b      	ldrb	r3, [r3, #20]
 8009b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	7858      	ldrb	r0, [r3, #1]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b2e:	2301      	movs	r3, #1
 8009b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b32:	f7fd fce9 	bl	8007508 <disk_read>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d004      	beq.n	8009b46 <f_lseek+0x400>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	755a      	strb	r2, [r3, #21]
 8009b42:	2301      	movs	r3, #1
 8009b44:	e004      	b.n	8009b50 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b4a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3740      	adds	r7, #64	; 0x40
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b092      	sub	sp, #72	; 0x48
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009b64:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009b68:	f107 030c 	add.w	r3, r7, #12
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fe ff46 	bl	8008a00 <find_volume>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009b7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f040 8099 	bne.w	8009cb6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8c:	691a      	ldr	r2, [r3, #16]
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	3b02      	subs	r3, #2
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d804      	bhi.n	8009ba2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9a:	691a      	ldr	r2, [r3, #16]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	e089      	b.n	8009cb6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d128      	bne.n	8009c00 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009bae:	2302      	movs	r3, #2
 8009bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009bb6:	f107 0314 	add.w	r3, r7, #20
 8009bba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7fe f86c 	bl	8007c9a <get_fat>
 8009bc2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bca:	d103      	bne.n	8009bd4 <f_getfree+0x7c>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009bd2:	e063      	b.n	8009c9c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d103      	bne.n	8009be2 <f_getfree+0x8a>
 8009bda:	2302      	movs	r3, #2
 8009bdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009be0:	e05c      	b.n	8009c9c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <f_getfree+0x96>
 8009be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bea:	3301      	adds	r3, #1
 8009bec:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d3db      	bcc.n	8009bb6 <f_getfree+0x5e>
 8009bfe:	e04d      	b.n	8009c9c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8009c10:	2300      	movs	r3, #0
 8009c12:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d113      	bne.n	8009c42 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	63ba      	str	r2, [r7, #56]	; 0x38
 8009c22:	4619      	mov	r1, r3
 8009c24:	f7fd ff7e 	bl	8007b24 <move_window>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009c2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d131      	bne.n	8009c9a <f_getfree+0x142>
							p = fs->win;
 8009c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c38:	3330      	adds	r3, #48	; 0x30
 8009c3a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c40:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	d10f      	bne.n	8009c6a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c4c:	f7fd fcba 	bl	80075c4 <ld_word>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d102      	bne.n	8009c5c <f_getfree+0x104>
 8009c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c58:	3301      	adds	r3, #1
 8009c5a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5e:	3302      	adds	r3, #2
 8009c60:	633b      	str	r3, [r7, #48]	; 0x30
 8009c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c64:	3b02      	subs	r3, #2
 8009c66:	637b      	str	r3, [r7, #52]	; 0x34
 8009c68:	e010      	b.n	8009c8c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c6c:	f7fd fcc2 	bl	80075f4 <ld_dword>
 8009c70:	4603      	mov	r3, r0
 8009c72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d102      	bne.n	8009c80 <f_getfree+0x128>
 8009c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c82:	3304      	adds	r3, #4
 8009c84:	633b      	str	r3, [r7, #48]	; 0x30
 8009c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c88:	3b04      	subs	r3, #4
 8009c8a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1bd      	bne.n	8009c14 <f_getfree+0xbc>
 8009c98:	e000      	b.n	8009c9c <f_getfree+0x144>
							if (res != FR_OK) break;
 8009c9a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ca0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ca6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	791a      	ldrb	r2, [r3, #4]
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	f042 0201 	orr.w	r2, r2, #1
 8009cb2:	b2d2      	uxtb	r2, r2
 8009cb4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009cb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3748      	adds	r7, #72	; 0x48
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b084      	sub	sp, #16
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	460b      	mov	r3, r1
 8009ccc:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009cce:	78fb      	ldrb	r3, [r7, #3]
 8009cd0:	2b0a      	cmp	r3, #10
 8009cd2:	d103      	bne.n	8009cdc <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009cd4:	210d      	movs	r1, #13
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff fff3 	bl	8009cc2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	db25      	blt.n	8009d34 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	60fa      	str	r2, [r7, #12]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	78fa      	ldrb	r2, [r7, #3]
 8009cf4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2b3c      	cmp	r3, #60	; 0x3c
 8009cfa:	dd12      	ble.n	8009d22 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f103 010c 	add.w	r1, r3, #12
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	f107 0308 	add.w	r3, r7, #8
 8009d0c:	f7ff fafe 	bl	800930c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d101      	bne.n	8009d1c <putc_bfd+0x5a>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e001      	b.n	8009d20 <putc_bfd+0x5e>
 8009d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d20:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	1c5a      	adds	r2, r3, #1
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	609a      	str	r2, [r3, #8]
 8009d32:	e000      	b.n	8009d36 <putc_bfd+0x74>
	if (i < 0) return;
 8009d34:	bf00      	nop
}
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	db16      	blt.n	8009d7a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6818      	ldr	r0, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f103 010c 	add.w	r1, r3, #12
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f107 030c 	add.w	r3, r7, #12
 8009d60:	f7ff fad4 	bl	800930c <f_write>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d107      	bne.n	8009d7a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d102      	bne.n	8009d7a <putc_flush+0x3e>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	e001      	b.n	8009d7e <putc_flush+0x42>
	return EOF;
 8009d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009d86:	b480      	push	{r7}
 8009d88:	b083      	sub	sp, #12
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	605a      	str	r2, [r3, #4]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	609a      	str	r2, [r3, #8]
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b096      	sub	sp, #88	; 0x58
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009dba:	f107 030c 	add.w	r3, r7, #12
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff ffe0 	bl	8009d86 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009dc6:	e009      	b.n	8009ddc <f_puts+0x2c>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	607a      	str	r2, [r7, #4]
 8009dce:	781a      	ldrb	r2, [r3, #0]
 8009dd0:	f107 030c 	add.w	r3, r7, #12
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7ff ff73 	bl	8009cc2 <putc_bfd>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1f1      	bne.n	8009dc8 <f_puts+0x18>
	return putc_flush(&pb);
 8009de4:	f107 030c 	add.w	r3, r7, #12
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7ff ffa7 	bl	8009d3c <putc_flush>
 8009dee:	4603      	mov	r3, r0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3758      	adds	r7, #88	; 0x58
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	4613      	mov	r3, r2
 8009e04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009e06:	2301      	movs	r3, #1
 8009e08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009e0e:	4b1f      	ldr	r3, [pc, #124]	; (8009e8c <FATFS_LinkDriverEx+0x94>)
 8009e10:	7a5b      	ldrb	r3, [r3, #9]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d131      	bne.n	8009e7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009e18:	4b1c      	ldr	r3, [pc, #112]	; (8009e8c <FATFS_LinkDriverEx+0x94>)
 8009e1a:	7a5b      	ldrb	r3, [r3, #9]
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	461a      	mov	r2, r3
 8009e20:	4b1a      	ldr	r3, [pc, #104]	; (8009e8c <FATFS_LinkDriverEx+0x94>)
 8009e22:	2100      	movs	r1, #0
 8009e24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009e26:	4b19      	ldr	r3, [pc, #100]	; (8009e8c <FATFS_LinkDriverEx+0x94>)
 8009e28:	7a5b      	ldrb	r3, [r3, #9]
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	4a17      	ldr	r2, [pc, #92]	; (8009e8c <FATFS_LinkDriverEx+0x94>)
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4413      	add	r3, r2
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009e36:	4b15      	ldr	r3, [pc, #84]	; (8009e8c <FATFS_LinkDriverEx+0x94>)
 8009e38:	7a5b      	ldrb	r3, [r3, #9]
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	4b13      	ldr	r3, [pc, #76]	; (8009e8c <FATFS_LinkDriverEx+0x94>)
 8009e40:	4413      	add	r3, r2
 8009e42:	79fa      	ldrb	r2, [r7, #7]
 8009e44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009e46:	4b11      	ldr	r3, [pc, #68]	; (8009e8c <FATFS_LinkDriverEx+0x94>)
 8009e48:	7a5b      	ldrb	r3, [r3, #9]
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	b2d1      	uxtb	r1, r2
 8009e50:	4a0e      	ldr	r2, [pc, #56]	; (8009e8c <FATFS_LinkDriverEx+0x94>)
 8009e52:	7251      	strb	r1, [r2, #9]
 8009e54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009e56:	7dbb      	ldrb	r3, [r7, #22]
 8009e58:	3330      	adds	r3, #48	; 0x30
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	3301      	adds	r3, #1
 8009e64:	223a      	movs	r2, #58	; 0x3a
 8009e66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	3302      	adds	r3, #2
 8009e6c:	222f      	movs	r2, #47	; 0x2f
 8009e6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	3303      	adds	r3, #3
 8009e74:	2200      	movs	r2, #0
 8009e76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	2000a12c 	.word	0x2000a12c

08009e90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7ff ffaa 	bl	8009df8 <FATFS_LinkDriverEx>
 8009ea4:	4603      	mov	r3, r0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	881a      	ldrh	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	799b      	ldrb	r3, [r3, #6]
 8009ec0:	08db      	lsrs	r3, r3, #3
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	fb12 f303 	smulbb	r3, r2, r3
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	889b      	ldrh	r3, [r3, #4]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	885b      	ldrh	r3, [r3, #2]
 8009eda:	fb03 f302 	mul.w	r3, r3, r2
 8009ede:	461a      	mov	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	60da      	str	r2, [r3, #12]
}
 8009eea:	bf00      	nop
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8009ef6:	b490      	push	{r4, r7}
 8009ef8:	b086      	sub	sp, #24
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	4604      	mov	r4, r0
 8009efe:	4608      	mov	r0, r1
 8009f00:	1d39      	adds	r1, r7, #4
 8009f02:	e881 000c 	stmia.w	r1, {r2, r3}
 8009f06:	4623      	mov	r3, r4
 8009f08:	81fb      	strh	r3, [r7, #14]
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8009f12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009f16:	88ba      	ldrh	r2, [r7, #4]
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	da04      	bge.n	8009f26 <code+0x30>
        code |= LEFT;
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	7dfb      	ldrb	r3, [r7, #23]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	75fb      	strb	r3, [r7, #23]
 8009f24:	e008      	b.n	8009f38 <code+0x42>
    } else if (x0 > window.x1) {
 8009f26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009f2a:	893a      	ldrh	r2, [r7, #8]
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	dd03      	ble.n	8009f38 <code+0x42>
        code |= RIGHT;
 8009f30:	2202      	movs	r2, #2
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8009f38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009f3c:	88fa      	ldrh	r2, [r7, #6]
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	da04      	bge.n	8009f4c <code+0x56>
        code |= BOTTOM;
 8009f42:	2204      	movs	r2, #4
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	75fb      	strb	r3, [r7, #23]
 8009f4a:	e008      	b.n	8009f5e <code+0x68>
    } else if (y0 > window.y1) {
 8009f4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009f50:	897a      	ldrh	r2, [r7, #10]
 8009f52:	4293      	cmp	r3, r2
 8009f54:	dd03      	ble.n	8009f5e <code+0x68>
        code |= TOP;
 8009f56:	2208      	movs	r2, #8
 8009f58:	7dfb      	ldrb	r3, [r7, #23]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8009f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bc90      	pop	{r4, r7}
 8009f68:	4770      	bx	lr

08009f6a <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b088      	sub	sp, #32
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f88:	cb0c      	ldmia	r3, {r2, r3}
 8009f8a:	f7ff ffb4 	bl	8009ef6 <code>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f9b3 0000 	ldrsh.w	r0, [r3]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fa2:	cb0c      	ldmia	r3, {r2, r3}
 8009fa4:	f7ff ffa7 	bl	8009ef6 <code>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8009fac:	2300      	movs	r3, #0
 8009fae:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8009fb0:	7ffa      	ldrb	r2, [r7, #31]
 8009fb2:	7fbb      	ldrb	r3, [r7, #30]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d102      	bne.n	8009fc2 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	777b      	strb	r3, [r7, #29]
            break;
 8009fc0:	e0e9      	b.n	800a196 <clip_line+0x22c>
        } else if (code0 & code1) {
 8009fc2:	7ffa      	ldrb	r2, [r7, #31]
 8009fc4:	7fbb      	ldrb	r3, [r7, #30]
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f040 80e2 	bne.w	800a194 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8009fd8:	7ffb      	ldrb	r3, [r7, #31]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <clip_line+0x78>
 8009fde:	7ffb      	ldrb	r3, [r7, #31]
 8009fe0:	e000      	b.n	8009fe4 <clip_line+0x7a>
 8009fe2:	7fbb      	ldrb	r3, [r7, #30]
 8009fe4:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8009fe6:	2208      	movs	r2, #8
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	4013      	ands	r3, r2
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d024      	beq.n	800a03c <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a000:	4619      	mov	r1, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a008:	1acb      	subs	r3, r1, r3
 800a00a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800a00c:	4608      	mov	r0, r1
 800a00e:	68b9      	ldr	r1, [r7, #8]
 800a010:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a014:	1a41      	subs	r1, r0, r1
 800a016:	fb01 f103 	mul.w	r1, r1, r3
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a020:	4618      	mov	r0, r3
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a028:	1ac3      	subs	r3, r0, r3
 800a02a:	fb91 f3f3 	sdiv	r3, r1, r3
 800a02e:	b29b      	uxth	r3, r3
 800a030:	4413      	add	r3, r2
 800a032:	b29b      	uxth	r3, r3
 800a034:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 800a036:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a038:	833b      	strh	r3, [r7, #24]
 800a03a:	e07f      	b.n	800a13c <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 800a03c:	2204      	movs	r2, #4
 800a03e:	7dfb      	ldrb	r3, [r7, #23]
 800a040:	4013      	ands	r3, r2
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b00      	cmp	r3, #0
 800a046:	d024      	beq.n	800a092 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a04e:	b29a      	uxth	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a056:	4619      	mov	r1, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a05e:	1acb      	subs	r3, r1, r3
 800a060:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800a062:	4608      	mov	r0, r1
 800a064:	68b9      	ldr	r1, [r7, #8]
 800a066:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a06a:	1a41      	subs	r1, r0, r1
 800a06c:	fb01 f103 	mul.w	r1, r1, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a076:	4618      	mov	r0, r3
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a07e:	1ac3      	subs	r3, r0, r3
 800a080:	fb91 f3f3 	sdiv	r3, r1, r3
 800a084:	b29b      	uxth	r3, r3
 800a086:	4413      	add	r3, r2
 800a088:	b29b      	uxth	r3, r3
 800a08a:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 800a08c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a08e:	833b      	strh	r3, [r7, #24]
 800a090:	e054      	b.n	800a13c <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 800a092:	2202      	movs	r2, #2
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	4013      	ands	r3, r2
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d024      	beq.n	800a0e8 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0b4:	1acb      	subs	r3, r1, r3
 800a0b6:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	68f9      	ldr	r1, [r7, #12]
 800a0bc:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a0c0:	1a41      	subs	r1, r0, r1
 800a0c2:	fb01 f103 	mul.w	r1, r1, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0d4:	1ac3      	subs	r3, r0, r3
 800a0d6:	fb91 f3f3 	sdiv	r3, r1, r3
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	4413      	add	r3, r2
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 800a0e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a0e4:	837b      	strh	r3, [r7, #26]
 800a0e6:	e029      	b.n	800a13c <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d023      	beq.n	800a13c <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a102:	4619      	mov	r1, r3
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a10a:	1acb      	subs	r3, r1, r3
 800a10c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800a10e:	4608      	mov	r0, r1
 800a110:	68f9      	ldr	r1, [r7, #12]
 800a112:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a116:	1a41      	subs	r1, r0, r1
 800a118:	fb01 f103 	mul.w	r1, r1, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a122:	4618      	mov	r0, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a12a:	1ac3      	subs	r3, r0, r3
 800a12c:	fb91 f3f3 	sdiv	r3, r1, r3
 800a130:	b29b      	uxth	r3, r3
 800a132:	4413      	add	r3, r2
 800a134:	b29b      	uxth	r3, r3
 800a136:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 800a138:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a13a:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 800a13c:	7dfa      	ldrb	r2, [r7, #23]
 800a13e:	7ffb      	ldrb	r3, [r7, #31]
 800a140:	429a      	cmp	r2, r3
 800a142:	d113      	bne.n	800a16c <clip_line+0x202>
                *x0 = x;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	8b7a      	ldrh	r2, [r7, #26]
 800a148:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	8b3a      	ldrh	r2, [r7, #24]
 800a14e:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f9b3 0000 	ldrsh.w	r0, [r3]
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a15c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a160:	cb0c      	ldmia	r3, {r2, r3}
 800a162:	f7ff fec8 	bl	8009ef6 <code>
 800a166:	4603      	mov	r3, r0
 800a168:	77fb      	strb	r3, [r7, #31]
 800a16a:	e721      	b.n	8009fb0 <clip_line+0x46>
            } else {
                *x1 = x;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	8b7a      	ldrh	r2, [r7, #26]
 800a170:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	8b3a      	ldrh	r2, [r7, #24]
 800a176:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a188:	cb0c      	ldmia	r3, {r2, r3}
 800a18a:	f7ff feb4 	bl	8009ef6 <code>
 800a18e:	4603      	mov	r3, r0
 800a190:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 800a192:	e70d      	b.n	8009fb0 <clip_line+0x46>
            break;
 800a194:	bf00      	nop
            }
        }
    }

    return accept;
 800a196:	7f7b      	ldrb	r3, [r7, #29]
 800a198:	4618      	mov	r0, r3
 800a19a:	3720      	adds	r7, #32
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	3306      	adds	r3, #6
 800a1b0:	2208      	movs	r2, #8
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	f001 f934 	bl	800b420 <memcpy>
    meta->width = font[FONTX_WIDTH];
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	7b9a      	ldrb	r2, [r3, #14]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	7bda      	ldrb	r2, [r3, #15]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	7c1a      	ldrb	r2, [r3, #16]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	72da      	strb	r2, [r3, #11]

    return 0;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b08e      	sub	sp, #56	; 0x38
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	60b9      	str	r1, [r7, #8]
 800a1e4:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800a1e6:	f107 0314 	add.w	r3, r7, #20
 800a1ea:	6879      	ldr	r1, [r7, #4]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7ff ffd7 	bl	800a1a0 <fontx_meta>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 800a1f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d002      	beq.n	800a206 <fontx_glyph+0x2c>
        return status;
 800a200:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a204:	e077      	b.n	800a2f6 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 800a206:	7f7a      	ldrb	r2, [r7, #29]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 800a20c:	7fba      	ldrb	r2, [r7, #30]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 800a212:	7f7b      	ldrb	r3, [r7, #29]
 800a214:	3307      	adds	r3, #7
 800a216:	2b00      	cmp	r3, #0
 800a218:	da00      	bge.n	800a21c <fontx_glyph+0x42>
 800a21a:	3307      	adds	r3, #7
 800a21c:	10db      	asrs	r3, r3, #3
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	78da      	ldrb	r2, [r3, #3]
 800a228:	7fbb      	ldrb	r3, [r7, #30]
 800a22a:	fb12 f303 	smulbb	r3, r2, r3
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 800a234:	7ffb      	ldrb	r3, [r7, #31]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10f      	bne.n	800a25a <fontx_glyph+0x80>
        if (code < 0x100) {
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2bff      	cmp	r3, #255	; 0xff
 800a23e:	d859      	bhi.n	800a2f4 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	789b      	ldrb	r3, [r3, #2]
 800a244:	461a      	mov	r2, r3
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	fb03 f302 	mul.w	r3, r3, r2
 800a24c:	3311      	adds	r3, #17
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	441a      	add	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	e04d      	b.n	800a2f6 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3312      	adds	r3, #18
 800a25e:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3311      	adds	r3, #17
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 800a26c:	e03d      	b.n	800a2ea <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a276:	3301      	adds	r3, #1
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	021b      	lsls	r3, r3, #8
 800a27c:	4413      	add	r3, r2
 800a27e:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	3302      	adds	r3, #2
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28a:	3303      	adds	r3, #3
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	021b      	lsls	r3, r3, #8
 800a290:	4413      	add	r3, r2
 800a292:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	429a      	cmp	r2, r3
 800a29a:	d31c      	bcc.n	800a2d6 <fontx_glyph+0xfc>
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d818      	bhi.n	800a2d6 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2ac:	4413      	add	r3, r2
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3311      	adds	r3, #17
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	461a      	mov	r2, r3
                    nc * glyph->size
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	789b      	ldrb	r3, [r3, #2]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c2:	fb03 f301 	mul.w	r3, r3, r1
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800a2c6:	4413      	add	r3, r2
 800a2c8:	3312      	adds	r3, #18
                glyph->buffer = &font[
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	441a      	add	r2, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e00f      	b.n	800a2f6 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 800a2d6:	6a3a      	ldr	r2, [r7, #32]
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	1ad2      	subs	r2, r2, r3
 800a2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2de:	4413      	add	r3, r2
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 800a2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	1e5a      	subs	r2, r3, #1
 800a2ee:	633a      	str	r2, [r7, #48]	; 0x30
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1bc      	bne.n	800a26e <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3738      	adds	r7, #56	; 0x38
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 800a2fe:	b480      	push	{r7}
 800a300:	b083      	sub	sp, #12
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	dd01      	ble.n	800a314 <min+0x16>
        return b;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	e000      	b.n	800a316 <min+0x18>
    };
    return a;
 800a314:	687b      	ldr	r3, [r7, #4]
}
 800a316:	4618      	mov	r0, r3
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <max>:

static inline int max(int a, int b) {
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	429a      	cmp	r2, r3
 800a332:	dd01      	ble.n	800a338 <max+0x16>
        return a;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	e000      	b.n	800a33a <max+0x18>
    }
    return b;
 800a338:	683b      	ldr	r3, [r7, #0]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800a348:	b490      	push	{r4, r7}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	4604      	mov	r4, r0
 800a350:	4608      	mov	r0, r1
 800a352:	4611      	mov	r1, r2
 800a354:	461a      	mov	r2, r3
 800a356:	4623      	mov	r3, r4
 800a358:	80fb      	strh	r3, [r7, #6]
 800a35a:	4603      	mov	r3, r0
 800a35c:	80bb      	strh	r3, [r7, #4]
 800a35e:	460b      	mov	r3, r1
 800a360:	807b      	strh	r3, [r7, #2]
 800a362:	4613      	mov	r3, r2
 800a364:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 800a366:	4a08      	ldr	r2, [pc, #32]	; (800a388 <hagl_set_clip_window+0x40>)
 800a368:	88fb      	ldrh	r3, [r7, #6]
 800a36a:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 800a36c:	4a06      	ldr	r2, [pc, #24]	; (800a388 <hagl_set_clip_window+0x40>)
 800a36e:	88bb      	ldrh	r3, [r7, #4]
 800a370:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 800a372:	4a05      	ldr	r2, [pc, #20]	; (800a388 <hagl_set_clip_window+0x40>)
 800a374:	887b      	ldrh	r3, [r7, #2]
 800a376:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 800a378:	4a03      	ldr	r2, [pc, #12]	; (800a388 <hagl_set_clip_window+0x40>)
 800a37a:	883b      	ldrh	r3, [r7, #0]
 800a37c:	80d3      	strh	r3, [r2, #6]
}
 800a37e:	bf00      	nop
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bc90      	pop	{r4, r7}
 800a386:	4770      	bx	lr
 800a388:	20000034 	.word	0x20000034

0800a38c <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	80fb      	strh	r3, [r7, #6]
 800a396:	460b      	mov	r3, r1
 800a398:	80bb      	strh	r3, [r7, #4]
 800a39a:	4613      	mov	r3, r2
 800a39c:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800a39e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3a2:	4a12      	ldr	r2, [pc, #72]	; (800a3ec <hagl_put_pixel+0x60>)
 800a3a4:	8812      	ldrh	r2, [r2, #0]
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	db1a      	blt.n	800a3e0 <hagl_put_pixel+0x54>
 800a3aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a3ae:	4a0f      	ldr	r2, [pc, #60]	; (800a3ec <hagl_put_pixel+0x60>)
 800a3b0:	8852      	ldrh	r2, [r2, #2]
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	db14      	blt.n	800a3e0 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a3b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3ba:	4a0c      	ldr	r2, [pc, #48]	; (800a3ec <hagl_put_pixel+0x60>)
 800a3bc:	8892      	ldrh	r2, [r2, #4]
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	dc10      	bgt.n	800a3e4 <hagl_put_pixel+0x58>
 800a3c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a3c6:	4a09      	ldr	r2, [pc, #36]	; (800a3ec <hagl_put_pixel+0x60>)
 800a3c8:	88d2      	ldrh	r2, [r2, #6]
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	dc0a      	bgt.n	800a3e4 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 800a3ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a3d6:	887a      	ldrh	r2, [r7, #2]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7f7 fcf7 	bl	8001dcc <lcd_put_pixel>
 800a3de:	e002      	b.n	800a3e6 <hagl_put_pixel+0x5a>
        return;
 800a3e0:	bf00      	nop
 800a3e2:	e000      	b.n	800a3e6 <hagl_put_pixel+0x5a>
        return;
 800a3e4:	bf00      	nop
}
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	20000034 	.word	0x20000034

0800a3f0 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 800a3f0:	b590      	push	{r4, r7, lr}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af02      	add	r7, sp, #8
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	4623      	mov	r3, r4
 800a400:	80fb      	strh	r3, [r7, #6]
 800a402:	4603      	mov	r3, r0
 800a404:	80bb      	strh	r3, [r7, #4]
 800a406:	460b      	mov	r3, r1
 800a408:	807b      	strh	r3, [r7, #2]
 800a40a:	4613      	mov	r3, r2
 800a40c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800a40e:	88fa      	ldrh	r2, [r7, #6]
 800a410:	887b      	ldrh	r3, [r7, #2]
 800a412:	4413      	add	r3, r2
 800a414:	b29b      	uxth	r3, r3
 800a416:	b21a      	sxth	r2, r3
 800a418:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800a41c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a420:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a424:	883b      	ldrh	r3, [r7, #0]
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	4623      	mov	r3, r4
 800a42a:	f000 f827 	bl	800a47c <hagl_draw_line>
#endif
}
 800a42e:	bf00      	nop
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	bd90      	pop	{r4, r7, pc}

0800a436 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 800a436:	b590      	push	{r4, r7, lr}
 800a438:	b085      	sub	sp, #20
 800a43a:	af02      	add	r7, sp, #8
 800a43c:	4604      	mov	r4, r0
 800a43e:	4608      	mov	r0, r1
 800a440:	4611      	mov	r1, r2
 800a442:	461a      	mov	r2, r3
 800a444:	4623      	mov	r3, r4
 800a446:	80fb      	strh	r3, [r7, #6]
 800a448:	4603      	mov	r3, r0
 800a44a:	80bb      	strh	r3, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	807b      	strh	r3, [r7, #2]
 800a450:	4613      	mov	r3, r2
 800a452:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 800a454:	88ba      	ldrh	r2, [r7, #4]
 800a456:	887b      	ldrh	r3, [r7, #2]
 800a458:	4413      	add	r3, r2
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	b21c      	sxth	r4, r3
 800a45e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a462:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a466:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a46a:	883b      	ldrh	r3, [r7, #0]
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	4623      	mov	r3, r4
 800a470:	f000 f804 	bl	800a47c <hagl_draw_line>
#endif
}
 800a474:	bf00      	nop
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd90      	pop	{r4, r7, pc}

0800a47c <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800a47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47e:	b089      	sub	sp, #36	; 0x24
 800a480:	af02      	add	r7, sp, #8
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	4611      	mov	r1, r2
 800a488:	461a      	mov	r2, r3
 800a48a:	4623      	mov	r3, r4
 800a48c:	80fb      	strh	r3, [r7, #6]
 800a48e:	4603      	mov	r3, r0
 800a490:	80bb      	strh	r3, [r7, #4]
 800a492:	460b      	mov	r3, r1
 800a494:	807b      	strh	r3, [r7, #2]
 800a496:	4613      	mov	r3, r2
 800a498:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 800a49a:	463b      	mov	r3, r7
 800a49c:	1cba      	adds	r2, r7, #2
 800a49e:	1d3d      	adds	r5, r7, #4
 800a4a0:	1dbc      	adds	r4, r7, #6
 800a4a2:	494a      	ldr	r1, [pc, #296]	; (800a5cc <hagl_draw_line+0x150>)
 800a4a4:	466e      	mov	r6, sp
 800a4a6:	c903      	ldmia	r1, {r0, r1}
 800a4a8:	e886 0003 	stmia.w	r6, {r0, r1}
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f7ff fd5b 	bl	8009f6a <clip_line>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	f083 0301 	eor.w	r3, r3, #1
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d17e      	bne.n	800a5be <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 800a4c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	bfb8      	it	lt
 800a4d0:	425b      	neglt	r3, r3
 800a4d2:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 800a4d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a4d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	da01      	bge.n	800a4e4 <hagl_draw_line+0x68>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e001      	b.n	800a4e8 <hagl_draw_line+0x6c>
 800a4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e8:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 800a4ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	bfb8      	it	lt
 800a4fa:	425b      	neglt	r3, r3
 800a4fc:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800a4fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a502:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a506:	429a      	cmp	r2, r3
 800a508:	da01      	bge.n	800a50e <hagl_draw_line+0x92>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e001      	b.n	800a512 <hagl_draw_line+0x96>
 800a50e:	f04f 33ff 	mov.w	r3, #4294967295
 800a512:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 800a514:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a518:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	dd06      	ble.n	800a52e <hagl_draw_line+0xb2>
 800a520:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a524:	0fda      	lsrs	r2, r3, #31
 800a526:	4413      	add	r3, r2
 800a528:	105b      	asrs	r3, r3, #1
 800a52a:	b21b      	sxth	r3, r3
 800a52c:	e006      	b.n	800a53c <hagl_draw_line+0xc0>
 800a52e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a532:	0fda      	lsrs	r2, r3, #31
 800a534:	4413      	add	r3, r2
 800a536:	105b      	asrs	r3, r3, #1
 800a538:	425b      	negs	r3, r3
 800a53a:	b21b      	sxth	r3, r3
 800a53c:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 800a53e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a542:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a546:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a548:	4618      	mov	r0, r3
 800a54a:	f7ff ff1f 	bl	800a38c <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 800a54e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a552:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a556:	429a      	cmp	r2, r3
 800a558:	d105      	bne.n	800a566 <hagl_draw_line+0xea>
 800a55a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a55e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a562:	429a      	cmp	r2, r3
 800a564:	d02d      	beq.n	800a5c2 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 800a566:	8afb      	ldrh	r3, [r7, #22]
 800a568:	005b      	lsls	r3, r3, #1
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 800a56e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a572:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a576:	425b      	negs	r3, r3
 800a578:	429a      	cmp	r2, r3
 800a57a:	dd0c      	ble.n	800a596 <hagl_draw_line+0x11a>
            err -= dy;
 800a57c:	8afa      	ldrh	r2, [r7, #22]
 800a57e:	8a3b      	ldrh	r3, [r7, #16]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	b29b      	uxth	r3, r3
 800a584:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 800a586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	8a7b      	ldrh	r3, [r7, #18]
 800a58e:	4413      	add	r3, r2
 800a590:	b29b      	uxth	r3, r3
 800a592:	b21b      	sxth	r3, r3
 800a594:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 800a596:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a59a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	dacd      	bge.n	800a53e <hagl_draw_line+0xc2>
            err += dx;
 800a5a2:	8afa      	ldrh	r2, [r7, #22]
 800a5a4:	8abb      	ldrh	r3, [r7, #20]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 800a5ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	89fb      	ldrh	r3, [r7, #14]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	b21b      	sxth	r3, r3
 800a5ba:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 800a5bc:	e7bf      	b.n	800a53e <hagl_draw_line+0xc2>
        return;
 800a5be:	bf00      	nop
 800a5c0:	e000      	b.n	800a5c4 <hagl_draw_line+0x148>
            break;
 800a5c2:	bf00      	nop
        }
    }
}
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20000034 	.word	0x20000034

0800a5d0 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800a5d0:	b590      	push	{r4, r7, lr}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4608      	mov	r0, r1
 800a5da:	4611      	mov	r1, r2
 800a5dc:	461a      	mov	r2, r3
 800a5de:	4623      	mov	r3, r4
 800a5e0:	80fb      	strh	r3, [r7, #6]
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	80bb      	strh	r3, [r7, #4]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	807b      	strh	r3, [r7, #2]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800a5ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a5f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	dd0e      	ble.n	800a618 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 800a5fa:	88fa      	ldrh	r2, [r7, #6]
 800a5fc:	887b      	ldrh	r3, [r7, #2]
 800a5fe:	4413      	add	r3, r2
 800a600:	b29b      	uxth	r3, r3
 800a602:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800a604:	88fa      	ldrh	r2, [r7, #6]
 800a606:	887b      	ldrh	r3, [r7, #2]
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800a60e:	88fa      	ldrh	r2, [r7, #6]
 800a610:	887b      	ldrh	r3, [r7, #2]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	b29b      	uxth	r3, r3
 800a616:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800a618:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a61c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a620:	429a      	cmp	r2, r3
 800a622:	dd0e      	ble.n	800a642 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 800a624:	88ba      	ldrh	r2, [r7, #4]
 800a626:	883b      	ldrh	r3, [r7, #0]
 800a628:	4413      	add	r3, r2
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800a62e:	88ba      	ldrh	r2, [r7, #4]
 800a630:	883b      	ldrh	r3, [r7, #0]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	b29b      	uxth	r3, r3
 800a636:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800a638:	88ba      	ldrh	r2, [r7, #4]
 800a63a:	883b      	ldrh	r3, [r7, #0]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	b29b      	uxth	r3, r3
 800a640:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800a642:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a646:	4a24      	ldr	r2, [pc, #144]	; (800a6d8 <hagl_draw_rectangle+0x108>)
 800a648:	8812      	ldrh	r2, [r2, #0]
 800a64a:	4293      	cmp	r3, r2
 800a64c:	db3e      	blt.n	800a6cc <hagl_draw_rectangle+0xfc>
 800a64e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a652:	4a21      	ldr	r2, [pc, #132]	; (800a6d8 <hagl_draw_rectangle+0x108>)
 800a654:	8852      	ldrh	r2, [r2, #2]
 800a656:	4293      	cmp	r3, r2
 800a658:	db38      	blt.n	800a6cc <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a65a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a65e:	4a1e      	ldr	r2, [pc, #120]	; (800a6d8 <hagl_draw_rectangle+0x108>)
 800a660:	8892      	ldrh	r2, [r2, #4]
 800a662:	4293      	cmp	r3, r2
 800a664:	dc34      	bgt.n	800a6d0 <hagl_draw_rectangle+0x100>
 800a666:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a66a:	4a1b      	ldr	r2, [pc, #108]	; (800a6d8 <hagl_draw_rectangle+0x108>)
 800a66c:	88d2      	ldrh	r2, [r2, #6]
 800a66e:	4293      	cmp	r3, r2
 800a670:	dc2e      	bgt.n	800a6d0 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 800a672:	887a      	ldrh	r2, [r7, #2]
 800a674:	88fb      	ldrh	r3, [r7, #6]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	b29b      	uxth	r3, r3
 800a67a:	3301      	adds	r3, #1
 800a67c:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 800a67e:	883a      	ldrh	r2, [r7, #0]
 800a680:	88bb      	ldrh	r3, [r7, #4]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	b29b      	uxth	r3, r3
 800a686:	3301      	adds	r3, #1
 800a688:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 800a68a:	8c3b      	ldrh	r3, [r7, #32]
 800a68c:	89fa      	ldrh	r2, [r7, #14]
 800a68e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a692:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a696:	f7ff feab 	bl	800a3f0 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 800a69a:	8c3b      	ldrh	r3, [r7, #32]
 800a69c:	89fa      	ldrh	r2, [r7, #14]
 800a69e:	f9b7 1000 	ldrsh.w	r1, [r7]
 800a6a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a6a6:	f7ff fea3 	bl	800a3f0 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 800a6aa:	8c3b      	ldrh	r3, [r7, #32]
 800a6ac:	89ba      	ldrh	r2, [r7, #12]
 800a6ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a6b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a6b6:	f7ff febe 	bl	800a436 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 800a6ba:	8c3b      	ldrh	r3, [r7, #32]
 800a6bc:	89ba      	ldrh	r2, [r7, #12]
 800a6be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a6c2:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800a6c6:	f7ff feb6 	bl	800a436 <hagl_draw_vline>
 800a6ca:	e002      	b.n	800a6d2 <hagl_draw_rectangle+0x102>
        return;
 800a6cc:	bf00      	nop
 800a6ce:	e000      	b.n	800a6d2 <hagl_draw_rectangle+0x102>
        return;
 800a6d0:	bf00      	nop
}
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd90      	pop	{r4, r7, pc}
 800a6d8:	20000034 	.word	0x20000034

0800a6dc <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800a6dc:	b590      	push	{r4, r7, lr}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	4608      	mov	r0, r1
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	4623      	mov	r3, r4
 800a6ec:	80fb      	strh	r3, [r7, #6]
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	80bb      	strh	r3, [r7, #4]
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	807b      	strh	r3, [r7, #2]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800a6fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a6fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a702:	429a      	cmp	r2, r3
 800a704:	dd0e      	ble.n	800a724 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 800a706:	88fa      	ldrh	r2, [r7, #6]
 800a708:	887b      	ldrh	r3, [r7, #2]
 800a70a:	4413      	add	r3, r2
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800a710:	88fa      	ldrh	r2, [r7, #6]
 800a712:	887b      	ldrh	r3, [r7, #2]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	b29b      	uxth	r3, r3
 800a718:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800a71a:	88fa      	ldrh	r2, [r7, #6]
 800a71c:	887b      	ldrh	r3, [r7, #2]
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	b29b      	uxth	r3, r3
 800a722:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800a724:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a728:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	dd0e      	ble.n	800a74e <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 800a730:	88ba      	ldrh	r2, [r7, #4]
 800a732:	883b      	ldrh	r3, [r7, #0]
 800a734:	4413      	add	r3, r2
 800a736:	b29b      	uxth	r3, r3
 800a738:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800a73a:	88ba      	ldrh	r2, [r7, #4]
 800a73c:	883b      	ldrh	r3, [r7, #0]
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	b29b      	uxth	r3, r3
 800a742:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800a744:	88ba      	ldrh	r2, [r7, #4]
 800a746:	883b      	ldrh	r3, [r7, #0]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800a74e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a752:	4a33      	ldr	r2, [pc, #204]	; (800a820 <hagl_fill_rectangle+0x144>)
 800a754:	8812      	ldrh	r2, [r2, #0]
 800a756:	4293      	cmp	r3, r2
 800a758:	db5b      	blt.n	800a812 <hagl_fill_rectangle+0x136>
 800a75a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a75e:	4a30      	ldr	r2, [pc, #192]	; (800a820 <hagl_fill_rectangle+0x144>)
 800a760:	8852      	ldrh	r2, [r2, #2]
 800a762:	4293      	cmp	r3, r2
 800a764:	db55      	blt.n	800a812 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a76a:	4a2d      	ldr	r2, [pc, #180]	; (800a820 <hagl_fill_rectangle+0x144>)
 800a76c:	8892      	ldrh	r2, [r2, #4]
 800a76e:	4293      	cmp	r3, r2
 800a770:	dc51      	bgt.n	800a816 <hagl_fill_rectangle+0x13a>
 800a772:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a776:	4a2a      	ldr	r2, [pc, #168]	; (800a820 <hagl_fill_rectangle+0x144>)
 800a778:	88d2      	ldrh	r2, [r2, #6]
 800a77a:	4293      	cmp	r3, r2
 800a77c:	dc4b      	bgt.n	800a816 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 800a77e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a782:	4a27      	ldr	r2, [pc, #156]	; (800a820 <hagl_fill_rectangle+0x144>)
 800a784:	8812      	ldrh	r2, [r2, #0]
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f7ff fdca 	bl	800a322 <max>
 800a78e:	4603      	mov	r3, r0
 800a790:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 800a792:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a796:	4a22      	ldr	r2, [pc, #136]	; (800a820 <hagl_fill_rectangle+0x144>)
 800a798:	8852      	ldrh	r2, [r2, #2]
 800a79a:	4611      	mov	r1, r2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff fdc0 	bl	800a322 <max>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800a7a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a7aa:	4a1d      	ldr	r2, [pc, #116]	; (800a820 <hagl_fill_rectangle+0x144>)
 800a7ac:	8892      	ldrh	r2, [r2, #4]
 800a7ae:	4611      	mov	r1, r2
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7ff fda4 	bl	800a2fe <min>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800a7ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a7be:	4a18      	ldr	r2, [pc, #96]	; (800a820 <hagl_fill_rectangle+0x144>)
 800a7c0:	88d2      	ldrh	r2, [r2, #6]
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7ff fd9a 	bl	800a2fe <min>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 800a7ce:	887a      	ldrh	r2, [r7, #2]
 800a7d0:	88fb      	ldrh	r3, [r7, #6]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800a7da:	883a      	ldrh	r2, [r7, #0]
 800a7dc:	88bb      	ldrh	r3, [r7, #4]
 800a7de:	1ad3      	subs	r3, r2, r3
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	81fb      	strh	r3, [r7, #14]
 800a7ea:	e00d      	b.n	800a808 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 800a7ec:	88ba      	ldrh	r2, [r7, #4]
 800a7ee:	89fb      	ldrh	r3, [r7, #14]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	b219      	sxth	r1, r3
 800a7f6:	8c3b      	ldrh	r3, [r7, #32]
 800a7f8:	89ba      	ldrh	r2, [r7, #12]
 800a7fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a7fe:	f7ff fdf7 	bl	800a3f0 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800a802:	89fb      	ldrh	r3, [r7, #14]
 800a804:	3301      	adds	r3, #1
 800a806:	81fb      	strh	r3, [r7, #14]
 800a808:	89fa      	ldrh	r2, [r7, #14]
 800a80a:	897b      	ldrh	r3, [r7, #10]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d3ed      	bcc.n	800a7ec <hagl_fill_rectangle+0x110>
 800a810:	e002      	b.n	800a818 <hagl_fill_rectangle+0x13c>
        return;
 800a812:	bf00      	nop
 800a814:	e000      	b.n	800a818 <hagl_fill_rectangle+0x13c>
        return;
 800a816:	bf00      	nop
#endif
    }
}
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd90      	pop	{r4, r7, pc}
 800a81e:	bf00      	nop
 800a820:	20000034 	.word	0x20000034

0800a824 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 800a824:	b590      	push	{r4, r7, lr}
 800a826:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	f107 0410 	add.w	r4, r7, #16
 800a832:	3c04      	subs	r4, #4
 800a834:	6020      	str	r0, [r4, #0]
 800a836:	460c      	mov	r4, r1
 800a838:	4610      	mov	r0, r2
 800a83a:	4619      	mov	r1, r3
 800a83c:	f107 0310 	add.w	r3, r7, #16
 800a840:	3b06      	subs	r3, #6
 800a842:	4622      	mov	r2, r4
 800a844:	801a      	strh	r2, [r3, #0]
 800a846:	f107 0310 	add.w	r3, r7, #16
 800a84a:	3b08      	subs	r3, #8
 800a84c:	4602      	mov	r2, r0
 800a84e:	801a      	strh	r2, [r3, #0]
 800a850:	f107 0310 	add.w	r3, r7, #16
 800a854:	3b0a      	subs	r3, #10
 800a856:	460a      	mov	r2, r1
 800a858:	801a      	strh	r2, [r3, #0]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800a85a:	f107 0310 	add.w	r3, r7, #16
 800a85e:	3b04      	subs	r3, #4
 800a860:	f107 0010 	add.w	r0, r7, #16
 800a864:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a868:	6812      	ldr	r2, [r2, #0]
 800a86a:	6819      	ldr	r1, [r3, #0]
 800a86c:	f7ff fcb5 	bl	800a1da <fontx_glyph>
 800a870:	4603      	mov	r3, r0
 800a872:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a876:	f102 0209 	add.w	r2, r2, #9
 800a87a:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 800a87c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a880:	f103 0309 	add.w	r3, r3, #9
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d001      	beq.n	800a88e <hagl_put_char+0x6a>
        return 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	e0ba      	b.n	800aa04 <hagl_put_char+0x1e0>
    }

    bitmap.width = glyph.width,
 800a88e:	f107 0310 	add.w	r3, r7, #16
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	b29a      	uxth	r2, r3
 800a896:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a89a:	3b18      	subs	r3, #24
 800a89c:	801a      	strh	r2, [r3, #0]
    bitmap.height = glyph.height,
 800a89e:	f107 0310 	add.w	r3, r7, #16
 800a8a2:	785b      	ldrb	r3, [r3, #1]
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8aa:	3b18      	subs	r3, #24
 800a8ac:	805a      	strh	r2, [r3, #2]
    bitmap.depth = DISPLAY_DEPTH,
 800a8ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8b2:	3b18      	subs	r3, #24
 800a8b4:	2210      	movs	r2, #16
 800a8b6:	719a      	strb	r2, [r3, #6]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 800a8b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a8bc:	3a08      	subs	r2, #8
 800a8be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8c2:	3b18      	subs	r3, #24
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff faf1 	bl	8009eae <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 800a8cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8d0:	3b18      	subs	r3, #24
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a8d8:	f102 020c 	add.w	r2, r2, #12
 800a8dc:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800a8de:	2300      	movs	r3, #0
 800a8e0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a8e4:	f102 020b 	add.w	r2, r2, #11
 800a8e8:	7013      	strb	r3, [r2, #0]
 800a8ea:	e06c      	b.n	800a9c6 <hagl_put_char+0x1a2>
        for (uint8_t x = 0; x < glyph.width; x++) {
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a8f2:	f102 020a 	add.w	r2, r2, #10
 800a8f6:	7013      	strb	r3, [r2, #0]
 800a8f8:	e046      	b.n	800a988 <hagl_put_char+0x164>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800a8fa:	f107 0310 	add.w	r3, r7, #16
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	b25a      	sxtb	r2, r3
 800a904:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a908:	f103 030a 	add.w	r3, r3, #10
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	f003 0307 	and.w	r3, r3, #7
 800a912:	2180      	movs	r1, #128	; 0x80
 800a914:	fa41 f303 	asr.w	r3, r1, r3
 800a918:	b25b      	sxtb	r3, r3
 800a91a:	4013      	ands	r3, r2
 800a91c:	b25b      	sxtb	r3, r3
 800a91e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a922:	f102 0208 	add.w	r2, r2, #8
 800a926:	7013      	strb	r3, [r2, #0]
            if (set) {
 800a928:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a92c:	f103 0308 	add.w	r3, r3, #8
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d010      	beq.n	800a958 <hagl_put_char+0x134>
                *(ptr++) = color;
 800a936:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a93a:	f103 030c 	add.w	r3, r3, #12
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	1c93      	adds	r3, r2, #2
 800a942:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800a946:	f101 010c 	add.w	r1, r1, #12
 800a94a:	600b      	str	r3, [r1, #0]
 800a94c:	f107 0310 	add.w	r3, r7, #16
 800a950:	3b0a      	subs	r3, #10
 800a952:	881b      	ldrh	r3, [r3, #0]
 800a954:	8013      	strh	r3, [r2, #0]
 800a956:	e00c      	b.n	800a972 <hagl_put_char+0x14e>
            } else {
                *(ptr++) = 0x0000;
 800a958:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a95c:	f103 030c 	add.w	r3, r3, #12
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	1c9a      	adds	r2, r3, #2
 800a964:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800a968:	f101 010c 	add.w	r1, r1, #12
 800a96c:	600a      	str	r2, [r1, #0]
 800a96e:	2200      	movs	r2, #0
 800a970:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 800a972:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a976:	f103 030a 	add.w	r3, r3, #10
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	3301      	adds	r3, #1
 800a97e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a982:	f102 020a 	add.w	r2, r2, #10
 800a986:	7013      	strb	r3, [r2, #0]
 800a988:	f107 0310 	add.w	r3, r7, #16
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a992:	f102 020a 	add.w	r2, r2, #10
 800a996:	7812      	ldrb	r2, [r2, #0]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d3ae      	bcc.n	800a8fa <hagl_put_char+0xd6>
            }
        }
        glyph.buffer += glyph.pitch;
 800a99c:	f107 0310 	add.w	r3, r7, #16
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	f107 0210 	add.w	r2, r7, #16
 800a9a6:	78d2      	ldrb	r2, [r2, #3]
 800a9a8:	441a      	add	r2, r3
 800a9aa:	f107 0310 	add.w	r3, r7, #16
 800a9ae:	605a      	str	r2, [r3, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 800a9b0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a9b4:	f103 030b 	add.w	r3, r3, #11
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a9c0:	f102 020b 	add.w	r2, r2, #11
 800a9c4:	7013      	strb	r3, [r2, #0]
 800a9c6:	f107 0310 	add.w	r3, r7, #16
 800a9ca:	785b      	ldrb	r3, [r3, #1]
 800a9cc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a9d0:	f102 020b 	add.w	r2, r2, #11
 800a9d4:	7812      	ldrb	r2, [r2, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d388      	bcc.n	800a8ec <hagl_put_char+0xc8>
    }

    hagl_blit(x0, y0, &bitmap);
 800a9da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a9de:	3a18      	subs	r2, #24
 800a9e0:	f107 0310 	add.w	r3, r7, #16
 800a9e4:	3b08      	subs	r3, #8
 800a9e6:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a9ea:	f107 0310 	add.w	r3, r7, #16
 800a9ee:	3b06      	subs	r3, #6
 800a9f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 f858 	bl	800aaaa <hagl_blit>

    return bitmap.width;
 800a9fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9fe:	3b18      	subs	r3, #24
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	b2db      	uxtb	r3, r3
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd90      	pop	{r4, r7, pc}

0800aa10 <hagl_put_text>:
 * continue from the next line.
 */

//uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
uint16_t hagl_put_text(const char *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800aa10:	b590      	push	{r4, r7, lr}
 800aa12:	b08b      	sub	sp, #44	; 0x2c
 800aa14:	af02      	add	r7, sp, #8
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	4608      	mov	r0, r1
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	4603      	mov	r3, r0
 800aa20:	817b      	strh	r3, [r7, #10]
 800aa22:	460b      	mov	r3, r1
 800aa24:	813b      	strh	r3, [r7, #8]
 800aa26:	4613      	mov	r3, r2
 800aa28:	80fb      	strh	r3, [r7, #6]
    char temp;
    uint8_t status;
    uint16_t original = x0;
 800aa2a:	897b      	ldrh	r3, [r7, #10]
 800aa2c:	83fb      	strh	r3, [r7, #30]
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800aa2e:	f107 0310 	add.w	r3, r7, #16
 800aa32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff fbb3 	bl	800a1a0 <fontx_meta>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	777b      	strb	r3, [r7, #29]
    if (0 != status) {
 800aa3e:	7f7b      	ldrb	r3, [r7, #29]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <hagl_put_text+0x38>
        return 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	e02c      	b.n	800aaa2 <hagl_put_text+0x92>
    }

    do {
        temp = *str++;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	1c5a      	adds	r2, r3, #1
 800aa4c:	60fa      	str	r2, [r7, #12]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	773b      	strb	r3, [r7, #28]
        if (13 == temp || 10 == temp) {
 800aa52:	7f3b      	ldrb	r3, [r7, #28]
 800aa54:	2b0d      	cmp	r3, #13
 800aa56:	d002      	beq.n	800aa5e <hagl_put_text+0x4e>
 800aa58:	7f3b      	ldrb	r3, [r7, #28]
 800aa5a:	2b0a      	cmp	r3, #10
 800aa5c:	d108      	bne.n	800aa70 <hagl_put_text+0x60>
            x0 = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 800aa62:	7ebb      	ldrb	r3, [r7, #26]
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	893b      	ldrh	r3, [r7, #8]
 800aa68:	4413      	add	r3, r2
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	813b      	strh	r3, [r7, #8]
 800aa6e:	e010      	b.n	800aa92 <hagl_put_text+0x82>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 800aa70:	7f38      	ldrb	r0, [r7, #28]
 800aa72:	88fc      	ldrh	r4, [r7, #6]
 800aa74:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800aa78:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	4623      	mov	r3, r4
 800aa82:	f7ff fecf 	bl	800a824 <hagl_put_char>
 800aa86:	4603      	mov	r3, r0
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	897b      	ldrh	r3, [r7, #10]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1d6      	bne.n	800aa48 <hagl_put_text+0x38>

    return x0 - original;
 800aa9a:	897a      	ldrh	r2, [r7, #10]
 800aa9c:	8bfb      	ldrh	r3, [r7, #30]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	b29b      	uxth	r3, r3
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3724      	adds	r7, #36	; 0x24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd90      	pop	{r4, r7, pc}

0800aaaa <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b086      	sub	sp, #24
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	4603      	mov	r3, r0
 800aab2:	603a      	str	r2, [r7, #0]
 800aab4:	80fb      	strh	r3, [r7, #6]
 800aab6:	460b      	mov	r3, r1
 800aab8:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 800aac0:	2300      	movs	r3, #0
 800aac2:	827b      	strh	r3, [r7, #18]
 800aac4:	e020      	b.n	800ab08 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800aac6:	2300      	movs	r3, #0
 800aac8:	823b      	strh	r3, [r7, #16]
 800aaca:	e015      	b.n	800aaf8 <hagl_blit+0x4e>
            color = *(ptr++);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	1c9a      	adds	r2, r3, #2
 800aad0:	617a      	str	r2, [r7, #20]
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800aad6:	88fa      	ldrh	r2, [r7, #6]
 800aad8:	8a3b      	ldrh	r3, [r7, #16]
 800aada:	4413      	add	r3, r2
 800aadc:	b29b      	uxth	r3, r3
 800aade:	b218      	sxth	r0, r3
 800aae0:	88ba      	ldrh	r2, [r7, #4]
 800aae2:	8a7b      	ldrh	r3, [r7, #18]
 800aae4:	4413      	add	r3, r2
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	b21b      	sxth	r3, r3
 800aaea:	89fa      	ldrh	r2, [r7, #14]
 800aaec:	4619      	mov	r1, r3
 800aaee:	f7ff fc4d 	bl	800a38c <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800aaf2:	8a3b      	ldrh	r3, [r7, #16]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	823b      	strh	r3, [r7, #16]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	8a3a      	ldrh	r2, [r7, #16]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d3e4      	bcc.n	800aacc <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800ab02:	8a7b      	ldrh	r3, [r7, #18]
 800ab04:	3301      	adds	r3, #1
 800ab06:	827b      	strh	r3, [r7, #18]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	885b      	ldrh	r3, [r3, #2]
 800ab0c:	8a7a      	ldrh	r2, [r7, #18]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d3d9      	bcc.n	800aac6 <hagl_blit+0x1c>
        }
    }
#endif
};
 800ab12:	bf00      	nop
 800ab14:	bf00      	nop
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 800ab22:	4b12      	ldr	r3, [pc, #72]	; (800ab6c <hagl_clear_screen+0x50>)
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 800ab28:	4b10      	ldr	r3, [pc, #64]	; (800ab6c <hagl_clear_screen+0x50>)
 800ab2a:	885b      	ldrh	r3, [r3, #2]
 800ab2c:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 800ab2e:	4b0f      	ldr	r3, [pc, #60]	; (800ab6c <hagl_clear_screen+0x50>)
 800ab30:	889b      	ldrh	r3, [r3, #4]
 800ab32:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 800ab34:	4b0d      	ldr	r3, [pc, #52]	; (800ab6c <hagl_clear_screen+0x50>)
 800ab36:	88db      	ldrh	r3, [r3, #6]
 800ab38:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 800ab3a:	239f      	movs	r3, #159	; 0x9f
 800ab3c:	227f      	movs	r2, #127	; 0x7f
 800ab3e:	2100      	movs	r1, #0
 800ab40:	2000      	movs	r0, #0
 800ab42:	f7ff fc01 	bl	800a348 <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 800ab46:	2300      	movs	r3, #0
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	239f      	movs	r3, #159	; 0x9f
 800ab4c:	227f      	movs	r2, #127	; 0x7f
 800ab4e:	2100      	movs	r1, #0
 800ab50:	2000      	movs	r0, #0
 800ab52:	f7ff fdc3 	bl	800a6dc <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 800ab56:	883b      	ldrh	r3, [r7, #0]
 800ab58:	887a      	ldrh	r2, [r7, #2]
 800ab5a:	88b9      	ldrh	r1, [r7, #4]
 800ab5c:	88f8      	ldrh	r0, [r7, #6]
 800ab5e:	f7ff fbf3 	bl	800a348 <hagl_set_clip_window>
#endif
}
 800ab62:	bf00      	nop
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20000034 	.word	0x20000034

0800ab70 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 800ab70:	b590      	push	{r4, r7, lr}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	4604      	mov	r4, r0
 800ab78:	4608      	mov	r0, r1
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	4623      	mov	r3, r4
 800ab80:	80fb      	strh	r3, [r7, #6]
 800ab82:	4603      	mov	r3, r0
 800ab84:	80bb      	strh	r3, [r7, #4]
 800ab86:	460b      	mov	r3, r1
 800ab88:	807b      	strh	r3, [r7, #2]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800ab8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ab92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	dd0e      	ble.n	800abb8 <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 800ab9a:	88fa      	ldrh	r2, [r7, #6]
 800ab9c:	887b      	ldrh	r3, [r7, #2]
 800ab9e:	4413      	add	r3, r2
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800aba4:	88fa      	ldrh	r2, [r7, #6]
 800aba6:	887b      	ldrh	r3, [r7, #2]
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	b29b      	uxth	r3, r3
 800abac:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800abae:	88fa      	ldrh	r2, [r7, #6]
 800abb0:	887b      	ldrh	r3, [r7, #2]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800abb8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800abbc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	dd0e      	ble.n	800abe2 <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 800abc4:	88ba      	ldrh	r2, [r7, #4]
 800abc6:	883b      	ldrh	r3, [r7, #0]
 800abc8:	4413      	add	r3, r2
 800abca:	b29b      	uxth	r3, r3
 800abcc:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800abce:	88ba      	ldrh	r2, [r7, #4]
 800abd0:	883b      	ldrh	r3, [r7, #0]
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800abd8:	88ba      	ldrh	r2, [r7, #4]
 800abda:	883b      	ldrh	r3, [r7, #0]
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	b29b      	uxth	r3, r3
 800abe0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800abe2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800abe6:	4a52      	ldr	r2, [pc, #328]	; (800ad30 <hagl_draw_rounded_rectangle+0x1c0>)
 800abe8:	8812      	ldrh	r2, [r2, #0]
 800abea:	4293      	cmp	r3, r2
 800abec:	f2c0 8153 	blt.w	800ae96 <hagl_draw_rounded_rectangle+0x326>
 800abf0:	f9b7 3000 	ldrsh.w	r3, [r7]
 800abf4:	4a4e      	ldr	r2, [pc, #312]	; (800ad30 <hagl_draw_rounded_rectangle+0x1c0>)
 800abf6:	8852      	ldrh	r2, [r2, #2]
 800abf8:	4293      	cmp	r3, r2
 800abfa:	f2c0 814c 	blt.w	800ae96 <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800abfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac02:	4a4b      	ldr	r2, [pc, #300]	; (800ad30 <hagl_draw_rounded_rectangle+0x1c0>)
 800ac04:	8892      	ldrh	r2, [r2, #4]
 800ac06:	4293      	cmp	r3, r2
 800ac08:	f300 8147 	bgt.w	800ae9a <hagl_draw_rounded_rectangle+0x32a>
 800ac0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ac10:	4a47      	ldr	r2, [pc, #284]	; (800ad30 <hagl_draw_rounded_rectangle+0x1c0>)
 800ac12:	88d2      	ldrh	r2, [r2, #6]
 800ac14:	4293      	cmp	r3, r2
 800ac16:	f300 8140 	bgt.w	800ae9a <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 800ac1a:	887a      	ldrh	r2, [r7, #2]
 800ac1c:	88fb      	ldrh	r3, [r7, #6]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	3301      	adds	r3, #1
 800ac24:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 800ac26:	883a      	ldrh	r2, [r7, #0]
 800ac28:	88bb      	ldrh	r3, [r7, #4]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	3301      	adds	r3, #1
 800ac30:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 800ac32:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800ac36:	8a3b      	ldrh	r3, [r7, #16]
 800ac38:	085b      	lsrs	r3, r3, #1
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	89fb      	ldrh	r3, [r7, #14]
 800ac40:	085b      	lsrs	r3, r3, #1
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	4619      	mov	r1, r3
 800ac46:	4610      	mov	r0, r2
 800ac48:	f7ff fb59 	bl	800a2fe <min>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4620      	mov	r0, r4
 800ac52:	f7ff fb54 	bl	800a2fe <min>
 800ac56:	4603      	mov	r3, r0
 800ac58:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 800ac5a:	88fa      	ldrh	r2, [r7, #6]
 800ac5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac5e:	4413      	add	r3, r2
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	b218      	sxth	r0, r3
 800ac64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	8a3a      	ldrh	r2, [r7, #16]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ac72:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800ac76:	f7ff fbbb 	bl	800a3f0 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 800ac7a:	88fa      	ldrh	r2, [r7, #6]
 800ac7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac7e:	4413      	add	r3, r2
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	b218      	sxth	r0, r3
 800ac84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	8a3a      	ldrh	r2, [r7, #16]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ac92:	f9b7 1000 	ldrsh.w	r1, [r7]
 800ac96:	f7ff fbab 	bl	800a3f0 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 800ac9a:	88ba      	ldrh	r2, [r7, #4]
 800ac9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac9e:	4413      	add	r3, r2
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	b219      	sxth	r1, r3
 800aca4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aca6:	005b      	lsls	r3, r3, #1
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	89fa      	ldrh	r2, [r7, #14]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	b29a      	uxth	r2, r3
 800acb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800acb2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800acb6:	f7ff fbbe 	bl	800a436 <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 800acba:	88ba      	ldrh	r2, [r7, #4]
 800acbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acbe:	4413      	add	r3, r2
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	b219      	sxth	r1, r3
 800acc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acc6:	005b      	lsls	r3, r3, #1
 800acc8:	b29b      	uxth	r3, r3
 800acca:	89fa      	ldrh	r2, [r7, #14]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	b29a      	uxth	r2, r3
 800acd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800acd2:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800acd6:	f7ff fbae 	bl	800a436 <hagl_draw_vline>

    x = 0;
 800acda:	2300      	movs	r3, #0
 800acdc:	82fb      	strh	r3, [r7, #22]
    y = r;
 800acde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ace0:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 800ace2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	f1c3 0303 	rsb	r3, r3, #3
 800acec:	b29b      	uxth	r3, r3
 800acee:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 800acf0:	e0c9      	b.n	800ae86 <hagl_draw_rounded_rectangle+0x316>
        x++;
 800acf2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	3301      	adds	r3, #1
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 800acfe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	dd16      	ble.n	800ad34 <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 800ad06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 800ad12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	8a7b      	ldrh	r3, [r7, #18]
 800ad24:	4413      	add	r3, r2
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	330a      	adds	r3, #10
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	827b      	strh	r3, [r7, #18]
 800ad2e:	e00a      	b.n	800ad46 <hagl_draw_rounded_rectangle+0x1d6>
 800ad30:	20000034 	.word	0x20000034
        } else {
            d = d + 4 * x + 6;
 800ad34:	8afb      	ldrh	r3, [r7, #22]
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	8a7b      	ldrh	r3, [r7, #18]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	3306      	adds	r3, #6
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 800ad46:	887a      	ldrh	r2, [r7, #2]
 800ad48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad4a:	1ad3      	subs	r3, r2, r3
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	8afb      	ldrh	r3, [r7, #22]
 800ad50:	4413      	add	r3, r2
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	b218      	sxth	r0, r3
 800ad56:	88ba      	ldrh	r2, [r7, #4]
 800ad58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad5a:	4413      	add	r3, r2
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	8abb      	ldrh	r3, [r7, #20]
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	b21b      	sxth	r3, r3
 800ad66:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ad68:	4619      	mov	r1, r3
 800ad6a:	f7ff fb0f 	bl	800a38c <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 800ad6e:	887a      	ldrh	r2, [r7, #2]
 800ad70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	8abb      	ldrh	r3, [r7, #20]
 800ad78:	4413      	add	r3, r2
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	b218      	sxth	r0, r3
 800ad7e:	88ba      	ldrh	r2, [r7, #4]
 800ad80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad82:	4413      	add	r3, r2
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	8afb      	ldrh	r3, [r7, #22]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	b21b      	sxth	r3, r3
 800ad8e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ad90:	4619      	mov	r1, r3
 800ad92:	f7ff fafb 	bl	800a38c <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 800ad96:	88fa      	ldrh	r2, [r7, #6]
 800ad98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad9a:	4413      	add	r3, r2
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	8afb      	ldrh	r3, [r7, #22]
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	b218      	sxth	r0, r3
 800ada6:	88ba      	ldrh	r2, [r7, #4]
 800ada8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adaa:	4413      	add	r3, r2
 800adac:	b29a      	uxth	r2, r3
 800adae:	8abb      	ldrh	r3, [r7, #20]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	b21b      	sxth	r3, r3
 800adb6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800adb8:	4619      	mov	r1, r3
 800adba:	f7ff fae7 	bl	800a38c <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 800adbe:	88fa      	ldrh	r2, [r7, #6]
 800adc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adc2:	4413      	add	r3, r2
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	8abb      	ldrh	r3, [r7, #20]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	b29b      	uxth	r3, r3
 800adcc:	b218      	sxth	r0, r3
 800adce:	88ba      	ldrh	r2, [r7, #4]
 800add0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800add2:	4413      	add	r3, r2
 800add4:	b29a      	uxth	r2, r3
 800add6:	8afb      	ldrh	r3, [r7, #22]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	b29b      	uxth	r3, r3
 800addc:	b21b      	sxth	r3, r3
 800adde:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ade0:	4619      	mov	r1, r3
 800ade2:	f7ff fad3 	bl	800a38c <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 800ade6:	887a      	ldrh	r2, [r7, #2]
 800ade8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adea:	1ad3      	subs	r3, r2, r3
 800adec:	b29a      	uxth	r2, r3
 800adee:	8afb      	ldrh	r3, [r7, #22]
 800adf0:	4413      	add	r3, r2
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	b218      	sxth	r0, r3
 800adf6:	883a      	ldrh	r2, [r7, #0]
 800adf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	8abb      	ldrh	r3, [r7, #20]
 800ae00:	4413      	add	r3, r2
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	b21b      	sxth	r3, r3
 800ae06:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ae08:	4619      	mov	r1, r3
 800ae0a:	f7ff fabf 	bl	800a38c <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 800ae0e:	887a      	ldrh	r2, [r7, #2]
 800ae10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	8abb      	ldrh	r3, [r7, #20]
 800ae18:	4413      	add	r3, r2
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	b218      	sxth	r0, r3
 800ae1e:	883a      	ldrh	r2, [r7, #0]
 800ae20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	8afb      	ldrh	r3, [r7, #22]
 800ae28:	4413      	add	r3, r2
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	b21b      	sxth	r3, r3
 800ae2e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ae30:	4619      	mov	r1, r3
 800ae32:	f7ff faab 	bl	800a38c <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 800ae36:	88fa      	ldrh	r2, [r7, #6]
 800ae38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae3a:	4413      	add	r3, r2
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	8afb      	ldrh	r3, [r7, #22]
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	b218      	sxth	r0, r3
 800ae46:	883a      	ldrh	r2, [r7, #0]
 800ae48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	8abb      	ldrh	r3, [r7, #20]
 800ae50:	4413      	add	r3, r2
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	b21b      	sxth	r3, r3
 800ae56:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ae58:	4619      	mov	r1, r3
 800ae5a:	f7ff fa97 	bl	800a38c <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 800ae5e:	88fa      	ldrh	r2, [r7, #6]
 800ae60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae62:	4413      	add	r3, r2
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	8abb      	ldrh	r3, [r7, #20]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	b218      	sxth	r0, r3
 800ae6e:	883a      	ldrh	r2, [r7, #0]
 800ae70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	8afb      	ldrh	r3, [r7, #22]
 800ae78:	4413      	add	r3, r2
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	b21b      	sxth	r3, r3
 800ae7e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ae80:	4619      	mov	r1, r3
 800ae82:	f7ff fa83 	bl	800a38c <hagl_put_pixel>
    while (y >= x) {
 800ae86:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800ae8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	f6bf af2f 	bge.w	800acf2 <hagl_draw_rounded_rectangle+0x182>
 800ae94:	e002      	b.n	800ae9c <hagl_draw_rounded_rectangle+0x32c>
        return;
 800ae96:	bf00      	nop
 800ae98:	e000      	b.n	800ae9c <hagl_draw_rounded_rectangle+0x32c>
        return;
 800ae9a:	bf00      	nop
    }
};
 800ae9c:	371c      	adds	r7, #28
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd90      	pop	{r4, r7, pc}
 800aea2:	bf00      	nop

0800aea4 <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	4603      	mov	r3, r0
 800aeac:	71fb      	strb	r3, [r7, #7]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	71bb      	strb	r3, [r7, #6]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 800aeb6:	79fb      	ldrb	r3, [r7, #7]
 800aeb8:	021b      	lsls	r3, r3, #8
 800aeba:	b21b      	sxth	r3, r3
 800aebc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aec0:	f023 0307 	bic.w	r3, r3, #7
 800aec4:	b21a      	sxth	r2, r3
 800aec6:	79bb      	ldrb	r3, [r7, #6]
 800aec8:	00db      	lsls	r3, r3, #3
 800aeca:	b21b      	sxth	r3, r3
 800aecc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800aed0:	b21b      	sxth	r3, r3
 800aed2:	4313      	orrs	r3, r2
 800aed4:	b21a      	sxth	r2, r3
 800aed6:	797b      	ldrb	r3, [r7, #5]
 800aed8:	08db      	lsrs	r3, r3, #3
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	b21b      	sxth	r3, r3
 800aede:	4313      	orrs	r3, r2
 800aee0:	b21b      	sxth	r3, r3
 800aee2:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 800aee4:	89fb      	ldrh	r3, [r7, #14]
 800aee6:	021b      	lsls	r3, r3, #8
 800aee8:	b21a      	sxth	r2, r3
 800aeea:	89fb      	ldrh	r3, [r7, #14]
 800aeec:	0a1b      	lsrs	r3, r3, #8
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	b21b      	sxth	r3, r3
 800aef2:	4313      	orrs	r3, r2
 800aef4:	b21b      	sxth	r3, r3
 800aef6:	81fb      	strh	r3, [r7, #14]

    return rgb;
 800aef8:	89fb      	ldrh	r3, [r7, #14]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
	...

0800af08 <__assert_func>:
 800af08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af0a:	4614      	mov	r4, r2
 800af0c:	461a      	mov	r2, r3
 800af0e:	4b09      	ldr	r3, [pc, #36]	; (800af34 <__assert_func+0x2c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4605      	mov	r5, r0
 800af14:	68d8      	ldr	r0, [r3, #12]
 800af16:	b14c      	cbz	r4, 800af2c <__assert_func+0x24>
 800af18:	4b07      	ldr	r3, [pc, #28]	; (800af38 <__assert_func+0x30>)
 800af1a:	9100      	str	r1, [sp, #0]
 800af1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af20:	4906      	ldr	r1, [pc, #24]	; (800af3c <__assert_func+0x34>)
 800af22:	462b      	mov	r3, r5
 800af24:	f000 f9be 	bl	800b2a4 <fiprintf>
 800af28:	f001 f830 	bl	800bf8c <abort>
 800af2c:	4b04      	ldr	r3, [pc, #16]	; (800af40 <__assert_func+0x38>)
 800af2e:	461c      	mov	r4, r3
 800af30:	e7f3      	b.n	800af1a <__assert_func+0x12>
 800af32:	bf00      	nop
 800af34:	2000003c 	.word	0x2000003c
 800af38:	08015f60 	.word	0x08015f60
 800af3c:	08015f6d 	.word	0x08015f6d
 800af40:	08015f9b 	.word	0x08015f9b

0800af44 <__errno>:
 800af44:	4b01      	ldr	r3, [pc, #4]	; (800af4c <__errno+0x8>)
 800af46:	6818      	ldr	r0, [r3, #0]
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	2000003c 	.word	0x2000003c

0800af50 <__sflush_r>:
 800af50:	898a      	ldrh	r2, [r1, #12]
 800af52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af56:	4605      	mov	r5, r0
 800af58:	0710      	lsls	r0, r2, #28
 800af5a:	460c      	mov	r4, r1
 800af5c:	d458      	bmi.n	800b010 <__sflush_r+0xc0>
 800af5e:	684b      	ldr	r3, [r1, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	dc05      	bgt.n	800af70 <__sflush_r+0x20>
 800af64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af66:	2b00      	cmp	r3, #0
 800af68:	dc02      	bgt.n	800af70 <__sflush_r+0x20>
 800af6a:	2000      	movs	r0, #0
 800af6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af72:	2e00      	cmp	r6, #0
 800af74:	d0f9      	beq.n	800af6a <__sflush_r+0x1a>
 800af76:	2300      	movs	r3, #0
 800af78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af7c:	682f      	ldr	r7, [r5, #0]
 800af7e:	602b      	str	r3, [r5, #0]
 800af80:	d032      	beq.n	800afe8 <__sflush_r+0x98>
 800af82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	075a      	lsls	r2, r3, #29
 800af88:	d505      	bpl.n	800af96 <__sflush_r+0x46>
 800af8a:	6863      	ldr	r3, [r4, #4]
 800af8c:	1ac0      	subs	r0, r0, r3
 800af8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af90:	b10b      	cbz	r3, 800af96 <__sflush_r+0x46>
 800af92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af94:	1ac0      	subs	r0, r0, r3
 800af96:	2300      	movs	r3, #0
 800af98:	4602      	mov	r2, r0
 800af9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af9c:	6a21      	ldr	r1, [r4, #32]
 800af9e:	4628      	mov	r0, r5
 800afa0:	47b0      	blx	r6
 800afa2:	1c43      	adds	r3, r0, #1
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	d106      	bne.n	800afb6 <__sflush_r+0x66>
 800afa8:	6829      	ldr	r1, [r5, #0]
 800afaa:	291d      	cmp	r1, #29
 800afac:	d82c      	bhi.n	800b008 <__sflush_r+0xb8>
 800afae:	4a2a      	ldr	r2, [pc, #168]	; (800b058 <__sflush_r+0x108>)
 800afb0:	40ca      	lsrs	r2, r1
 800afb2:	07d6      	lsls	r6, r2, #31
 800afb4:	d528      	bpl.n	800b008 <__sflush_r+0xb8>
 800afb6:	2200      	movs	r2, #0
 800afb8:	6062      	str	r2, [r4, #4]
 800afba:	04d9      	lsls	r1, r3, #19
 800afbc:	6922      	ldr	r2, [r4, #16]
 800afbe:	6022      	str	r2, [r4, #0]
 800afc0:	d504      	bpl.n	800afcc <__sflush_r+0x7c>
 800afc2:	1c42      	adds	r2, r0, #1
 800afc4:	d101      	bne.n	800afca <__sflush_r+0x7a>
 800afc6:	682b      	ldr	r3, [r5, #0]
 800afc8:	b903      	cbnz	r3, 800afcc <__sflush_r+0x7c>
 800afca:	6560      	str	r0, [r4, #84]	; 0x54
 800afcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afce:	602f      	str	r7, [r5, #0]
 800afd0:	2900      	cmp	r1, #0
 800afd2:	d0ca      	beq.n	800af6a <__sflush_r+0x1a>
 800afd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afd8:	4299      	cmp	r1, r3
 800afda:	d002      	beq.n	800afe2 <__sflush_r+0x92>
 800afdc:	4628      	mov	r0, r5
 800afde:	f000 fa35 	bl	800b44c <_free_r>
 800afe2:	2000      	movs	r0, #0
 800afe4:	6360      	str	r0, [r4, #52]	; 0x34
 800afe6:	e7c1      	b.n	800af6c <__sflush_r+0x1c>
 800afe8:	6a21      	ldr	r1, [r4, #32]
 800afea:	2301      	movs	r3, #1
 800afec:	4628      	mov	r0, r5
 800afee:	47b0      	blx	r6
 800aff0:	1c41      	adds	r1, r0, #1
 800aff2:	d1c7      	bne.n	800af84 <__sflush_r+0x34>
 800aff4:	682b      	ldr	r3, [r5, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d0c4      	beq.n	800af84 <__sflush_r+0x34>
 800affa:	2b1d      	cmp	r3, #29
 800affc:	d001      	beq.n	800b002 <__sflush_r+0xb2>
 800affe:	2b16      	cmp	r3, #22
 800b000:	d101      	bne.n	800b006 <__sflush_r+0xb6>
 800b002:	602f      	str	r7, [r5, #0]
 800b004:	e7b1      	b.n	800af6a <__sflush_r+0x1a>
 800b006:	89a3      	ldrh	r3, [r4, #12]
 800b008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b00c:	81a3      	strh	r3, [r4, #12]
 800b00e:	e7ad      	b.n	800af6c <__sflush_r+0x1c>
 800b010:	690f      	ldr	r7, [r1, #16]
 800b012:	2f00      	cmp	r7, #0
 800b014:	d0a9      	beq.n	800af6a <__sflush_r+0x1a>
 800b016:	0793      	lsls	r3, r2, #30
 800b018:	680e      	ldr	r6, [r1, #0]
 800b01a:	bf08      	it	eq
 800b01c:	694b      	ldreq	r3, [r1, #20]
 800b01e:	600f      	str	r7, [r1, #0]
 800b020:	bf18      	it	ne
 800b022:	2300      	movne	r3, #0
 800b024:	eba6 0807 	sub.w	r8, r6, r7
 800b028:	608b      	str	r3, [r1, #8]
 800b02a:	f1b8 0f00 	cmp.w	r8, #0
 800b02e:	dd9c      	ble.n	800af6a <__sflush_r+0x1a>
 800b030:	6a21      	ldr	r1, [r4, #32]
 800b032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b034:	4643      	mov	r3, r8
 800b036:	463a      	mov	r2, r7
 800b038:	4628      	mov	r0, r5
 800b03a:	47b0      	blx	r6
 800b03c:	2800      	cmp	r0, #0
 800b03e:	dc06      	bgt.n	800b04e <__sflush_r+0xfe>
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b046:	81a3      	strh	r3, [r4, #12]
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	e78e      	b.n	800af6c <__sflush_r+0x1c>
 800b04e:	4407      	add	r7, r0
 800b050:	eba8 0800 	sub.w	r8, r8, r0
 800b054:	e7e9      	b.n	800b02a <__sflush_r+0xda>
 800b056:	bf00      	nop
 800b058:	20400001 	.word	0x20400001

0800b05c <_fflush_r>:
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	690b      	ldr	r3, [r1, #16]
 800b060:	4605      	mov	r5, r0
 800b062:	460c      	mov	r4, r1
 800b064:	b913      	cbnz	r3, 800b06c <_fflush_r+0x10>
 800b066:	2500      	movs	r5, #0
 800b068:	4628      	mov	r0, r5
 800b06a:	bd38      	pop	{r3, r4, r5, pc}
 800b06c:	b118      	cbz	r0, 800b076 <_fflush_r+0x1a>
 800b06e:	6983      	ldr	r3, [r0, #24]
 800b070:	b90b      	cbnz	r3, 800b076 <_fflush_r+0x1a>
 800b072:	f000 f899 	bl	800b1a8 <__sinit>
 800b076:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <_fflush_r+0x6c>)
 800b078:	429c      	cmp	r4, r3
 800b07a:	d11b      	bne.n	800b0b4 <_fflush_r+0x58>
 800b07c:	686c      	ldr	r4, [r5, #4]
 800b07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d0ef      	beq.n	800b066 <_fflush_r+0xa>
 800b086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b088:	07d0      	lsls	r0, r2, #31
 800b08a:	d404      	bmi.n	800b096 <_fflush_r+0x3a>
 800b08c:	0599      	lsls	r1, r3, #22
 800b08e:	d402      	bmi.n	800b096 <_fflush_r+0x3a>
 800b090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b092:	f000 f95e 	bl	800b352 <__retarget_lock_acquire_recursive>
 800b096:	4628      	mov	r0, r5
 800b098:	4621      	mov	r1, r4
 800b09a:	f7ff ff59 	bl	800af50 <__sflush_r>
 800b09e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0a0:	07da      	lsls	r2, r3, #31
 800b0a2:	4605      	mov	r5, r0
 800b0a4:	d4e0      	bmi.n	800b068 <_fflush_r+0xc>
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	059b      	lsls	r3, r3, #22
 800b0aa:	d4dd      	bmi.n	800b068 <_fflush_r+0xc>
 800b0ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0ae:	f000 f951 	bl	800b354 <__retarget_lock_release_recursive>
 800b0b2:	e7d9      	b.n	800b068 <_fflush_r+0xc>
 800b0b4:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <_fflush_r+0x70>)
 800b0b6:	429c      	cmp	r4, r3
 800b0b8:	d101      	bne.n	800b0be <_fflush_r+0x62>
 800b0ba:	68ac      	ldr	r4, [r5, #8]
 800b0bc:	e7df      	b.n	800b07e <_fflush_r+0x22>
 800b0be:	4b04      	ldr	r3, [pc, #16]	; (800b0d0 <_fflush_r+0x74>)
 800b0c0:	429c      	cmp	r4, r3
 800b0c2:	bf08      	it	eq
 800b0c4:	68ec      	ldreq	r4, [r5, #12]
 800b0c6:	e7da      	b.n	800b07e <_fflush_r+0x22>
 800b0c8:	08015fbc 	.word	0x08015fbc
 800b0cc:	08015fdc 	.word	0x08015fdc
 800b0d0:	08015f9c 	.word	0x08015f9c

0800b0d4 <fflush>:
 800b0d4:	4601      	mov	r1, r0
 800b0d6:	b920      	cbnz	r0, 800b0e2 <fflush+0xe>
 800b0d8:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <fflush+0x18>)
 800b0da:	4905      	ldr	r1, [pc, #20]	; (800b0f0 <fflush+0x1c>)
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	f000 b8f3 	b.w	800b2c8 <_fwalk_reent>
 800b0e2:	4b04      	ldr	r3, [pc, #16]	; (800b0f4 <fflush+0x20>)
 800b0e4:	6818      	ldr	r0, [r3, #0]
 800b0e6:	f7ff bfb9 	b.w	800b05c <_fflush_r>
 800b0ea:	bf00      	nop
 800b0ec:	08015ffc 	.word	0x08015ffc
 800b0f0:	0800b05d 	.word	0x0800b05d
 800b0f4:	2000003c 	.word	0x2000003c

0800b0f8 <std>:
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	b510      	push	{r4, lr}
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b106:	6083      	str	r3, [r0, #8]
 800b108:	8181      	strh	r1, [r0, #12]
 800b10a:	6643      	str	r3, [r0, #100]	; 0x64
 800b10c:	81c2      	strh	r2, [r0, #14]
 800b10e:	6183      	str	r3, [r0, #24]
 800b110:	4619      	mov	r1, r3
 800b112:	2208      	movs	r2, #8
 800b114:	305c      	adds	r0, #92	; 0x5c
 800b116:	f000 f991 	bl	800b43c <memset>
 800b11a:	4b05      	ldr	r3, [pc, #20]	; (800b130 <std+0x38>)
 800b11c:	6263      	str	r3, [r4, #36]	; 0x24
 800b11e:	4b05      	ldr	r3, [pc, #20]	; (800b134 <std+0x3c>)
 800b120:	62a3      	str	r3, [r4, #40]	; 0x28
 800b122:	4b05      	ldr	r3, [pc, #20]	; (800b138 <std+0x40>)
 800b124:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b126:	4b05      	ldr	r3, [pc, #20]	; (800b13c <std+0x44>)
 800b128:	6224      	str	r4, [r4, #32]
 800b12a:	6323      	str	r3, [r4, #48]	; 0x30
 800b12c:	bd10      	pop	{r4, pc}
 800b12e:	bf00      	nop
 800b130:	0800bd61 	.word	0x0800bd61
 800b134:	0800bd83 	.word	0x0800bd83
 800b138:	0800bdbb 	.word	0x0800bdbb
 800b13c:	0800bddf 	.word	0x0800bddf

0800b140 <_cleanup_r>:
 800b140:	4901      	ldr	r1, [pc, #4]	; (800b148 <_cleanup_r+0x8>)
 800b142:	f000 b8c1 	b.w	800b2c8 <_fwalk_reent>
 800b146:	bf00      	nop
 800b148:	0800b05d 	.word	0x0800b05d

0800b14c <__sfmoreglue>:
 800b14c:	b570      	push	{r4, r5, r6, lr}
 800b14e:	1e4a      	subs	r2, r1, #1
 800b150:	2568      	movs	r5, #104	; 0x68
 800b152:	4355      	muls	r5, r2
 800b154:	460e      	mov	r6, r1
 800b156:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b15a:	f000 f9c7 	bl	800b4ec <_malloc_r>
 800b15e:	4604      	mov	r4, r0
 800b160:	b140      	cbz	r0, 800b174 <__sfmoreglue+0x28>
 800b162:	2100      	movs	r1, #0
 800b164:	e9c0 1600 	strd	r1, r6, [r0]
 800b168:	300c      	adds	r0, #12
 800b16a:	60a0      	str	r0, [r4, #8]
 800b16c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b170:	f000 f964 	bl	800b43c <memset>
 800b174:	4620      	mov	r0, r4
 800b176:	bd70      	pop	{r4, r5, r6, pc}

0800b178 <__sfp_lock_acquire>:
 800b178:	4801      	ldr	r0, [pc, #4]	; (800b180 <__sfp_lock_acquire+0x8>)
 800b17a:	f000 b8ea 	b.w	800b352 <__retarget_lock_acquire_recursive>
 800b17e:	bf00      	nop
 800b180:	2000ade8 	.word	0x2000ade8

0800b184 <__sfp_lock_release>:
 800b184:	4801      	ldr	r0, [pc, #4]	; (800b18c <__sfp_lock_release+0x8>)
 800b186:	f000 b8e5 	b.w	800b354 <__retarget_lock_release_recursive>
 800b18a:	bf00      	nop
 800b18c:	2000ade8 	.word	0x2000ade8

0800b190 <__sinit_lock_acquire>:
 800b190:	4801      	ldr	r0, [pc, #4]	; (800b198 <__sinit_lock_acquire+0x8>)
 800b192:	f000 b8de 	b.w	800b352 <__retarget_lock_acquire_recursive>
 800b196:	bf00      	nop
 800b198:	2000ade3 	.word	0x2000ade3

0800b19c <__sinit_lock_release>:
 800b19c:	4801      	ldr	r0, [pc, #4]	; (800b1a4 <__sinit_lock_release+0x8>)
 800b19e:	f000 b8d9 	b.w	800b354 <__retarget_lock_release_recursive>
 800b1a2:	bf00      	nop
 800b1a4:	2000ade3 	.word	0x2000ade3

0800b1a8 <__sinit>:
 800b1a8:	b510      	push	{r4, lr}
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	f7ff fff0 	bl	800b190 <__sinit_lock_acquire>
 800b1b0:	69a3      	ldr	r3, [r4, #24]
 800b1b2:	b11b      	cbz	r3, 800b1bc <__sinit+0x14>
 800b1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b8:	f7ff bff0 	b.w	800b19c <__sinit_lock_release>
 800b1bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1c0:	6523      	str	r3, [r4, #80]	; 0x50
 800b1c2:	4b13      	ldr	r3, [pc, #76]	; (800b210 <__sinit+0x68>)
 800b1c4:	4a13      	ldr	r2, [pc, #76]	; (800b214 <__sinit+0x6c>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1ca:	42a3      	cmp	r3, r4
 800b1cc:	bf04      	itt	eq
 800b1ce:	2301      	moveq	r3, #1
 800b1d0:	61a3      	streq	r3, [r4, #24]
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 f820 	bl	800b218 <__sfp>
 800b1d8:	6060      	str	r0, [r4, #4]
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 f81c 	bl	800b218 <__sfp>
 800b1e0:	60a0      	str	r0, [r4, #8]
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f000 f818 	bl	800b218 <__sfp>
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	60e0      	str	r0, [r4, #12]
 800b1ec:	2104      	movs	r1, #4
 800b1ee:	6860      	ldr	r0, [r4, #4]
 800b1f0:	f7ff ff82 	bl	800b0f8 <std>
 800b1f4:	68a0      	ldr	r0, [r4, #8]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	2109      	movs	r1, #9
 800b1fa:	f7ff ff7d 	bl	800b0f8 <std>
 800b1fe:	68e0      	ldr	r0, [r4, #12]
 800b200:	2202      	movs	r2, #2
 800b202:	2112      	movs	r1, #18
 800b204:	f7ff ff78 	bl	800b0f8 <std>
 800b208:	2301      	movs	r3, #1
 800b20a:	61a3      	str	r3, [r4, #24]
 800b20c:	e7d2      	b.n	800b1b4 <__sinit+0xc>
 800b20e:	bf00      	nop
 800b210:	08015ffc 	.word	0x08015ffc
 800b214:	0800b141 	.word	0x0800b141

0800b218 <__sfp>:
 800b218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21a:	4607      	mov	r7, r0
 800b21c:	f7ff ffac 	bl	800b178 <__sfp_lock_acquire>
 800b220:	4b1e      	ldr	r3, [pc, #120]	; (800b29c <__sfp+0x84>)
 800b222:	681e      	ldr	r6, [r3, #0]
 800b224:	69b3      	ldr	r3, [r6, #24]
 800b226:	b913      	cbnz	r3, 800b22e <__sfp+0x16>
 800b228:	4630      	mov	r0, r6
 800b22a:	f7ff ffbd 	bl	800b1a8 <__sinit>
 800b22e:	3648      	adds	r6, #72	; 0x48
 800b230:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b234:	3b01      	subs	r3, #1
 800b236:	d503      	bpl.n	800b240 <__sfp+0x28>
 800b238:	6833      	ldr	r3, [r6, #0]
 800b23a:	b30b      	cbz	r3, 800b280 <__sfp+0x68>
 800b23c:	6836      	ldr	r6, [r6, #0]
 800b23e:	e7f7      	b.n	800b230 <__sfp+0x18>
 800b240:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b244:	b9d5      	cbnz	r5, 800b27c <__sfp+0x64>
 800b246:	4b16      	ldr	r3, [pc, #88]	; (800b2a0 <__sfp+0x88>)
 800b248:	60e3      	str	r3, [r4, #12]
 800b24a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b24e:	6665      	str	r5, [r4, #100]	; 0x64
 800b250:	f000 f87e 	bl	800b350 <__retarget_lock_init_recursive>
 800b254:	f7ff ff96 	bl	800b184 <__sfp_lock_release>
 800b258:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b25c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b260:	6025      	str	r5, [r4, #0]
 800b262:	61a5      	str	r5, [r4, #24]
 800b264:	2208      	movs	r2, #8
 800b266:	4629      	mov	r1, r5
 800b268:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b26c:	f000 f8e6 	bl	800b43c <memset>
 800b270:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b274:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b278:	4620      	mov	r0, r4
 800b27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b27c:	3468      	adds	r4, #104	; 0x68
 800b27e:	e7d9      	b.n	800b234 <__sfp+0x1c>
 800b280:	2104      	movs	r1, #4
 800b282:	4638      	mov	r0, r7
 800b284:	f7ff ff62 	bl	800b14c <__sfmoreglue>
 800b288:	4604      	mov	r4, r0
 800b28a:	6030      	str	r0, [r6, #0]
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d1d5      	bne.n	800b23c <__sfp+0x24>
 800b290:	f7ff ff78 	bl	800b184 <__sfp_lock_release>
 800b294:	230c      	movs	r3, #12
 800b296:	603b      	str	r3, [r7, #0]
 800b298:	e7ee      	b.n	800b278 <__sfp+0x60>
 800b29a:	bf00      	nop
 800b29c:	08015ffc 	.word	0x08015ffc
 800b2a0:	ffff0001 	.word	0xffff0001

0800b2a4 <fiprintf>:
 800b2a4:	b40e      	push	{r1, r2, r3}
 800b2a6:	b503      	push	{r0, r1, lr}
 800b2a8:	4601      	mov	r1, r0
 800b2aa:	ab03      	add	r3, sp, #12
 800b2ac:	4805      	ldr	r0, [pc, #20]	; (800b2c4 <fiprintf+0x20>)
 800b2ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2b2:	6800      	ldr	r0, [r0, #0]
 800b2b4:	9301      	str	r3, [sp, #4]
 800b2b6:	f000 f99d 	bl	800b5f4 <_vfiprintf_r>
 800b2ba:	b002      	add	sp, #8
 800b2bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2c0:	b003      	add	sp, #12
 800b2c2:	4770      	bx	lr
 800b2c4:	2000003c 	.word	0x2000003c

0800b2c8 <_fwalk_reent>:
 800b2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	4688      	mov	r8, r1
 800b2d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2d4:	2700      	movs	r7, #0
 800b2d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2da:	f1b9 0901 	subs.w	r9, r9, #1
 800b2de:	d505      	bpl.n	800b2ec <_fwalk_reent+0x24>
 800b2e0:	6824      	ldr	r4, [r4, #0]
 800b2e2:	2c00      	cmp	r4, #0
 800b2e4:	d1f7      	bne.n	800b2d6 <_fwalk_reent+0xe>
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ec:	89ab      	ldrh	r3, [r5, #12]
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d907      	bls.n	800b302 <_fwalk_reent+0x3a>
 800b2f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	d003      	beq.n	800b302 <_fwalk_reent+0x3a>
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	47c0      	blx	r8
 800b300:	4307      	orrs	r7, r0
 800b302:	3568      	adds	r5, #104	; 0x68
 800b304:	e7e9      	b.n	800b2da <_fwalk_reent+0x12>
	...

0800b308 <__libc_init_array>:
 800b308:	b570      	push	{r4, r5, r6, lr}
 800b30a:	4d0d      	ldr	r5, [pc, #52]	; (800b340 <__libc_init_array+0x38>)
 800b30c:	4c0d      	ldr	r4, [pc, #52]	; (800b344 <__libc_init_array+0x3c>)
 800b30e:	1b64      	subs	r4, r4, r5
 800b310:	10a4      	asrs	r4, r4, #2
 800b312:	2600      	movs	r6, #0
 800b314:	42a6      	cmp	r6, r4
 800b316:	d109      	bne.n	800b32c <__libc_init_array+0x24>
 800b318:	4d0b      	ldr	r5, [pc, #44]	; (800b348 <__libc_init_array+0x40>)
 800b31a:	4c0c      	ldr	r4, [pc, #48]	; (800b34c <__libc_init_array+0x44>)
 800b31c:	f001 f888 	bl	800c430 <_init>
 800b320:	1b64      	subs	r4, r4, r5
 800b322:	10a4      	asrs	r4, r4, #2
 800b324:	2600      	movs	r6, #0
 800b326:	42a6      	cmp	r6, r4
 800b328:	d105      	bne.n	800b336 <__libc_init_array+0x2e>
 800b32a:	bd70      	pop	{r4, r5, r6, pc}
 800b32c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b330:	4798      	blx	r3
 800b332:	3601      	adds	r6, #1
 800b334:	e7ee      	b.n	800b314 <__libc_init_array+0xc>
 800b336:	f855 3b04 	ldr.w	r3, [r5], #4
 800b33a:	4798      	blx	r3
 800b33c:	3601      	adds	r6, #1
 800b33e:	e7f2      	b.n	800b326 <__libc_init_array+0x1e>
 800b340:	0801603c 	.word	0x0801603c
 800b344:	0801603c 	.word	0x0801603c
 800b348:	0801603c 	.word	0x0801603c
 800b34c:	08016040 	.word	0x08016040

0800b350 <__retarget_lock_init_recursive>:
 800b350:	4770      	bx	lr

0800b352 <__retarget_lock_acquire_recursive>:
 800b352:	4770      	bx	lr

0800b354 <__retarget_lock_release_recursive>:
 800b354:	4770      	bx	lr

0800b356 <__swhatbuf_r>:
 800b356:	b570      	push	{r4, r5, r6, lr}
 800b358:	460e      	mov	r6, r1
 800b35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b35e:	2900      	cmp	r1, #0
 800b360:	b096      	sub	sp, #88	; 0x58
 800b362:	4614      	mov	r4, r2
 800b364:	461d      	mov	r5, r3
 800b366:	da07      	bge.n	800b378 <__swhatbuf_r+0x22>
 800b368:	2300      	movs	r3, #0
 800b36a:	602b      	str	r3, [r5, #0]
 800b36c:	89b3      	ldrh	r3, [r6, #12]
 800b36e:	061a      	lsls	r2, r3, #24
 800b370:	d410      	bmi.n	800b394 <__swhatbuf_r+0x3e>
 800b372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b376:	e00e      	b.n	800b396 <__swhatbuf_r+0x40>
 800b378:	466a      	mov	r2, sp
 800b37a:	f000 fe1f 	bl	800bfbc <_fstat_r>
 800b37e:	2800      	cmp	r0, #0
 800b380:	dbf2      	blt.n	800b368 <__swhatbuf_r+0x12>
 800b382:	9a01      	ldr	r2, [sp, #4]
 800b384:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b388:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b38c:	425a      	negs	r2, r3
 800b38e:	415a      	adcs	r2, r3
 800b390:	602a      	str	r2, [r5, #0]
 800b392:	e7ee      	b.n	800b372 <__swhatbuf_r+0x1c>
 800b394:	2340      	movs	r3, #64	; 0x40
 800b396:	2000      	movs	r0, #0
 800b398:	6023      	str	r3, [r4, #0]
 800b39a:	b016      	add	sp, #88	; 0x58
 800b39c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3a0 <__smakebuf_r>:
 800b3a0:	898b      	ldrh	r3, [r1, #12]
 800b3a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3a4:	079d      	lsls	r5, r3, #30
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	d507      	bpl.n	800b3bc <__smakebuf_r+0x1c>
 800b3ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	6123      	str	r3, [r4, #16]
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	6163      	str	r3, [r4, #20]
 800b3b8:	b002      	add	sp, #8
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
 800b3bc:	ab01      	add	r3, sp, #4
 800b3be:	466a      	mov	r2, sp
 800b3c0:	f7ff ffc9 	bl	800b356 <__swhatbuf_r>
 800b3c4:	9900      	ldr	r1, [sp, #0]
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f000 f88f 	bl	800b4ec <_malloc_r>
 800b3ce:	b948      	cbnz	r0, 800b3e4 <__smakebuf_r+0x44>
 800b3d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3d4:	059a      	lsls	r2, r3, #22
 800b3d6:	d4ef      	bmi.n	800b3b8 <__smakebuf_r+0x18>
 800b3d8:	f023 0303 	bic.w	r3, r3, #3
 800b3dc:	f043 0302 	orr.w	r3, r3, #2
 800b3e0:	81a3      	strh	r3, [r4, #12]
 800b3e2:	e7e3      	b.n	800b3ac <__smakebuf_r+0xc>
 800b3e4:	4b0d      	ldr	r3, [pc, #52]	; (800b41c <__smakebuf_r+0x7c>)
 800b3e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	6020      	str	r0, [r4, #0]
 800b3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f0:	81a3      	strh	r3, [r4, #12]
 800b3f2:	9b00      	ldr	r3, [sp, #0]
 800b3f4:	6163      	str	r3, [r4, #20]
 800b3f6:	9b01      	ldr	r3, [sp, #4]
 800b3f8:	6120      	str	r0, [r4, #16]
 800b3fa:	b15b      	cbz	r3, 800b414 <__smakebuf_r+0x74>
 800b3fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b400:	4630      	mov	r0, r6
 800b402:	f000 fded 	bl	800bfe0 <_isatty_r>
 800b406:	b128      	cbz	r0, 800b414 <__smakebuf_r+0x74>
 800b408:	89a3      	ldrh	r3, [r4, #12]
 800b40a:	f023 0303 	bic.w	r3, r3, #3
 800b40e:	f043 0301 	orr.w	r3, r3, #1
 800b412:	81a3      	strh	r3, [r4, #12]
 800b414:	89a0      	ldrh	r0, [r4, #12]
 800b416:	4305      	orrs	r5, r0
 800b418:	81a5      	strh	r5, [r4, #12]
 800b41a:	e7cd      	b.n	800b3b8 <__smakebuf_r+0x18>
 800b41c:	0800b141 	.word	0x0800b141

0800b420 <memcpy>:
 800b420:	440a      	add	r2, r1
 800b422:	4291      	cmp	r1, r2
 800b424:	f100 33ff 	add.w	r3, r0, #4294967295
 800b428:	d100      	bne.n	800b42c <memcpy+0xc>
 800b42a:	4770      	bx	lr
 800b42c:	b510      	push	{r4, lr}
 800b42e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b432:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b436:	4291      	cmp	r1, r2
 800b438:	d1f9      	bne.n	800b42e <memcpy+0xe>
 800b43a:	bd10      	pop	{r4, pc}

0800b43c <memset>:
 800b43c:	4402      	add	r2, r0
 800b43e:	4603      	mov	r3, r0
 800b440:	4293      	cmp	r3, r2
 800b442:	d100      	bne.n	800b446 <memset+0xa>
 800b444:	4770      	bx	lr
 800b446:	f803 1b01 	strb.w	r1, [r3], #1
 800b44a:	e7f9      	b.n	800b440 <memset+0x4>

0800b44c <_free_r>:
 800b44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b44e:	2900      	cmp	r1, #0
 800b450:	d048      	beq.n	800b4e4 <_free_r+0x98>
 800b452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b456:	9001      	str	r0, [sp, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f1a1 0404 	sub.w	r4, r1, #4
 800b45e:	bfb8      	it	lt
 800b460:	18e4      	addlt	r4, r4, r3
 800b462:	f000 fdf9 	bl	800c058 <__malloc_lock>
 800b466:	4a20      	ldr	r2, [pc, #128]	; (800b4e8 <_free_r+0x9c>)
 800b468:	9801      	ldr	r0, [sp, #4]
 800b46a:	6813      	ldr	r3, [r2, #0]
 800b46c:	4615      	mov	r5, r2
 800b46e:	b933      	cbnz	r3, 800b47e <_free_r+0x32>
 800b470:	6063      	str	r3, [r4, #4]
 800b472:	6014      	str	r4, [r2, #0]
 800b474:	b003      	add	sp, #12
 800b476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b47a:	f000 bdf3 	b.w	800c064 <__malloc_unlock>
 800b47e:	42a3      	cmp	r3, r4
 800b480:	d90b      	bls.n	800b49a <_free_r+0x4e>
 800b482:	6821      	ldr	r1, [r4, #0]
 800b484:	1862      	adds	r2, r4, r1
 800b486:	4293      	cmp	r3, r2
 800b488:	bf04      	itt	eq
 800b48a:	681a      	ldreq	r2, [r3, #0]
 800b48c:	685b      	ldreq	r3, [r3, #4]
 800b48e:	6063      	str	r3, [r4, #4]
 800b490:	bf04      	itt	eq
 800b492:	1852      	addeq	r2, r2, r1
 800b494:	6022      	streq	r2, [r4, #0]
 800b496:	602c      	str	r4, [r5, #0]
 800b498:	e7ec      	b.n	800b474 <_free_r+0x28>
 800b49a:	461a      	mov	r2, r3
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	b10b      	cbz	r3, 800b4a4 <_free_r+0x58>
 800b4a0:	42a3      	cmp	r3, r4
 800b4a2:	d9fa      	bls.n	800b49a <_free_r+0x4e>
 800b4a4:	6811      	ldr	r1, [r2, #0]
 800b4a6:	1855      	adds	r5, r2, r1
 800b4a8:	42a5      	cmp	r5, r4
 800b4aa:	d10b      	bne.n	800b4c4 <_free_r+0x78>
 800b4ac:	6824      	ldr	r4, [r4, #0]
 800b4ae:	4421      	add	r1, r4
 800b4b0:	1854      	adds	r4, r2, r1
 800b4b2:	42a3      	cmp	r3, r4
 800b4b4:	6011      	str	r1, [r2, #0]
 800b4b6:	d1dd      	bne.n	800b474 <_free_r+0x28>
 800b4b8:	681c      	ldr	r4, [r3, #0]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	6053      	str	r3, [r2, #4]
 800b4be:	4421      	add	r1, r4
 800b4c0:	6011      	str	r1, [r2, #0]
 800b4c2:	e7d7      	b.n	800b474 <_free_r+0x28>
 800b4c4:	d902      	bls.n	800b4cc <_free_r+0x80>
 800b4c6:	230c      	movs	r3, #12
 800b4c8:	6003      	str	r3, [r0, #0]
 800b4ca:	e7d3      	b.n	800b474 <_free_r+0x28>
 800b4cc:	6825      	ldr	r5, [r4, #0]
 800b4ce:	1961      	adds	r1, r4, r5
 800b4d0:	428b      	cmp	r3, r1
 800b4d2:	bf04      	itt	eq
 800b4d4:	6819      	ldreq	r1, [r3, #0]
 800b4d6:	685b      	ldreq	r3, [r3, #4]
 800b4d8:	6063      	str	r3, [r4, #4]
 800b4da:	bf04      	itt	eq
 800b4dc:	1949      	addeq	r1, r1, r5
 800b4de:	6021      	streq	r1, [r4, #0]
 800b4e0:	6054      	str	r4, [r2, #4]
 800b4e2:	e7c7      	b.n	800b474 <_free_r+0x28>
 800b4e4:	b003      	add	sp, #12
 800b4e6:	bd30      	pop	{r4, r5, pc}
 800b4e8:	2000a138 	.word	0x2000a138

0800b4ec <_malloc_r>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	1ccd      	adds	r5, r1, #3
 800b4f0:	f025 0503 	bic.w	r5, r5, #3
 800b4f4:	3508      	adds	r5, #8
 800b4f6:	2d0c      	cmp	r5, #12
 800b4f8:	bf38      	it	cc
 800b4fa:	250c      	movcc	r5, #12
 800b4fc:	2d00      	cmp	r5, #0
 800b4fe:	4606      	mov	r6, r0
 800b500:	db01      	blt.n	800b506 <_malloc_r+0x1a>
 800b502:	42a9      	cmp	r1, r5
 800b504:	d903      	bls.n	800b50e <_malloc_r+0x22>
 800b506:	230c      	movs	r3, #12
 800b508:	6033      	str	r3, [r6, #0]
 800b50a:	2000      	movs	r0, #0
 800b50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b50e:	f000 fda3 	bl	800c058 <__malloc_lock>
 800b512:	4921      	ldr	r1, [pc, #132]	; (800b598 <_malloc_r+0xac>)
 800b514:	680a      	ldr	r2, [r1, #0]
 800b516:	4614      	mov	r4, r2
 800b518:	b99c      	cbnz	r4, 800b542 <_malloc_r+0x56>
 800b51a:	4f20      	ldr	r7, [pc, #128]	; (800b59c <_malloc_r+0xb0>)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	b923      	cbnz	r3, 800b52a <_malloc_r+0x3e>
 800b520:	4621      	mov	r1, r4
 800b522:	4630      	mov	r0, r6
 800b524:	f000 fbb8 	bl	800bc98 <_sbrk_r>
 800b528:	6038      	str	r0, [r7, #0]
 800b52a:	4629      	mov	r1, r5
 800b52c:	4630      	mov	r0, r6
 800b52e:	f000 fbb3 	bl	800bc98 <_sbrk_r>
 800b532:	1c43      	adds	r3, r0, #1
 800b534:	d123      	bne.n	800b57e <_malloc_r+0x92>
 800b536:	230c      	movs	r3, #12
 800b538:	6033      	str	r3, [r6, #0]
 800b53a:	4630      	mov	r0, r6
 800b53c:	f000 fd92 	bl	800c064 <__malloc_unlock>
 800b540:	e7e3      	b.n	800b50a <_malloc_r+0x1e>
 800b542:	6823      	ldr	r3, [r4, #0]
 800b544:	1b5b      	subs	r3, r3, r5
 800b546:	d417      	bmi.n	800b578 <_malloc_r+0x8c>
 800b548:	2b0b      	cmp	r3, #11
 800b54a:	d903      	bls.n	800b554 <_malloc_r+0x68>
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	441c      	add	r4, r3
 800b550:	6025      	str	r5, [r4, #0]
 800b552:	e004      	b.n	800b55e <_malloc_r+0x72>
 800b554:	6863      	ldr	r3, [r4, #4]
 800b556:	42a2      	cmp	r2, r4
 800b558:	bf0c      	ite	eq
 800b55a:	600b      	streq	r3, [r1, #0]
 800b55c:	6053      	strne	r3, [r2, #4]
 800b55e:	4630      	mov	r0, r6
 800b560:	f000 fd80 	bl	800c064 <__malloc_unlock>
 800b564:	f104 000b 	add.w	r0, r4, #11
 800b568:	1d23      	adds	r3, r4, #4
 800b56a:	f020 0007 	bic.w	r0, r0, #7
 800b56e:	1ac2      	subs	r2, r0, r3
 800b570:	d0cc      	beq.n	800b50c <_malloc_r+0x20>
 800b572:	1a1b      	subs	r3, r3, r0
 800b574:	50a3      	str	r3, [r4, r2]
 800b576:	e7c9      	b.n	800b50c <_malloc_r+0x20>
 800b578:	4622      	mov	r2, r4
 800b57a:	6864      	ldr	r4, [r4, #4]
 800b57c:	e7cc      	b.n	800b518 <_malloc_r+0x2c>
 800b57e:	1cc4      	adds	r4, r0, #3
 800b580:	f024 0403 	bic.w	r4, r4, #3
 800b584:	42a0      	cmp	r0, r4
 800b586:	d0e3      	beq.n	800b550 <_malloc_r+0x64>
 800b588:	1a21      	subs	r1, r4, r0
 800b58a:	4630      	mov	r0, r6
 800b58c:	f000 fb84 	bl	800bc98 <_sbrk_r>
 800b590:	3001      	adds	r0, #1
 800b592:	d1dd      	bne.n	800b550 <_malloc_r+0x64>
 800b594:	e7cf      	b.n	800b536 <_malloc_r+0x4a>
 800b596:	bf00      	nop
 800b598:	2000a138 	.word	0x2000a138
 800b59c:	2000a13c 	.word	0x2000a13c

0800b5a0 <__sfputc_r>:
 800b5a0:	6893      	ldr	r3, [r2, #8]
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	b410      	push	{r4}
 800b5a8:	6093      	str	r3, [r2, #8]
 800b5aa:	da08      	bge.n	800b5be <__sfputc_r+0x1e>
 800b5ac:	6994      	ldr	r4, [r2, #24]
 800b5ae:	42a3      	cmp	r3, r4
 800b5b0:	db01      	blt.n	800b5b6 <__sfputc_r+0x16>
 800b5b2:	290a      	cmp	r1, #10
 800b5b4:	d103      	bne.n	800b5be <__sfputc_r+0x1e>
 800b5b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5ba:	f000 bc15 	b.w	800bde8 <__swbuf_r>
 800b5be:	6813      	ldr	r3, [r2, #0]
 800b5c0:	1c58      	adds	r0, r3, #1
 800b5c2:	6010      	str	r0, [r2, #0]
 800b5c4:	7019      	strb	r1, [r3, #0]
 800b5c6:	4608      	mov	r0, r1
 800b5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5cc:	4770      	bx	lr

0800b5ce <__sfputs_r>:
 800b5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	460f      	mov	r7, r1
 800b5d4:	4614      	mov	r4, r2
 800b5d6:	18d5      	adds	r5, r2, r3
 800b5d8:	42ac      	cmp	r4, r5
 800b5da:	d101      	bne.n	800b5e0 <__sfputs_r+0x12>
 800b5dc:	2000      	movs	r0, #0
 800b5de:	e007      	b.n	800b5f0 <__sfputs_r+0x22>
 800b5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e4:	463a      	mov	r2, r7
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f7ff ffda 	bl	800b5a0 <__sfputc_r>
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	d1f3      	bne.n	800b5d8 <__sfputs_r+0xa>
 800b5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5f4 <_vfiprintf_r>:
 800b5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f8:	460d      	mov	r5, r1
 800b5fa:	b09d      	sub	sp, #116	; 0x74
 800b5fc:	4614      	mov	r4, r2
 800b5fe:	4698      	mov	r8, r3
 800b600:	4606      	mov	r6, r0
 800b602:	b118      	cbz	r0, 800b60c <_vfiprintf_r+0x18>
 800b604:	6983      	ldr	r3, [r0, #24]
 800b606:	b90b      	cbnz	r3, 800b60c <_vfiprintf_r+0x18>
 800b608:	f7ff fdce 	bl	800b1a8 <__sinit>
 800b60c:	4b89      	ldr	r3, [pc, #548]	; (800b834 <_vfiprintf_r+0x240>)
 800b60e:	429d      	cmp	r5, r3
 800b610:	d11b      	bne.n	800b64a <_vfiprintf_r+0x56>
 800b612:	6875      	ldr	r5, [r6, #4]
 800b614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b616:	07d9      	lsls	r1, r3, #31
 800b618:	d405      	bmi.n	800b626 <_vfiprintf_r+0x32>
 800b61a:	89ab      	ldrh	r3, [r5, #12]
 800b61c:	059a      	lsls	r2, r3, #22
 800b61e:	d402      	bmi.n	800b626 <_vfiprintf_r+0x32>
 800b620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b622:	f7ff fe96 	bl	800b352 <__retarget_lock_acquire_recursive>
 800b626:	89ab      	ldrh	r3, [r5, #12]
 800b628:	071b      	lsls	r3, r3, #28
 800b62a:	d501      	bpl.n	800b630 <_vfiprintf_r+0x3c>
 800b62c:	692b      	ldr	r3, [r5, #16]
 800b62e:	b9eb      	cbnz	r3, 800b66c <_vfiprintf_r+0x78>
 800b630:	4629      	mov	r1, r5
 800b632:	4630      	mov	r0, r6
 800b634:	f000 fc3c 	bl	800beb0 <__swsetup_r>
 800b638:	b1c0      	cbz	r0, 800b66c <_vfiprintf_r+0x78>
 800b63a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b63c:	07dc      	lsls	r4, r3, #31
 800b63e:	d50e      	bpl.n	800b65e <_vfiprintf_r+0x6a>
 800b640:	f04f 30ff 	mov.w	r0, #4294967295
 800b644:	b01d      	add	sp, #116	; 0x74
 800b646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64a:	4b7b      	ldr	r3, [pc, #492]	; (800b838 <_vfiprintf_r+0x244>)
 800b64c:	429d      	cmp	r5, r3
 800b64e:	d101      	bne.n	800b654 <_vfiprintf_r+0x60>
 800b650:	68b5      	ldr	r5, [r6, #8]
 800b652:	e7df      	b.n	800b614 <_vfiprintf_r+0x20>
 800b654:	4b79      	ldr	r3, [pc, #484]	; (800b83c <_vfiprintf_r+0x248>)
 800b656:	429d      	cmp	r5, r3
 800b658:	bf08      	it	eq
 800b65a:	68f5      	ldreq	r5, [r6, #12]
 800b65c:	e7da      	b.n	800b614 <_vfiprintf_r+0x20>
 800b65e:	89ab      	ldrh	r3, [r5, #12]
 800b660:	0598      	lsls	r0, r3, #22
 800b662:	d4ed      	bmi.n	800b640 <_vfiprintf_r+0x4c>
 800b664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b666:	f7ff fe75 	bl	800b354 <__retarget_lock_release_recursive>
 800b66a:	e7e9      	b.n	800b640 <_vfiprintf_r+0x4c>
 800b66c:	2300      	movs	r3, #0
 800b66e:	9309      	str	r3, [sp, #36]	; 0x24
 800b670:	2320      	movs	r3, #32
 800b672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b676:	f8cd 800c 	str.w	r8, [sp, #12]
 800b67a:	2330      	movs	r3, #48	; 0x30
 800b67c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b840 <_vfiprintf_r+0x24c>
 800b680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b684:	f04f 0901 	mov.w	r9, #1
 800b688:	4623      	mov	r3, r4
 800b68a:	469a      	mov	sl, r3
 800b68c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b690:	b10a      	cbz	r2, 800b696 <_vfiprintf_r+0xa2>
 800b692:	2a25      	cmp	r2, #37	; 0x25
 800b694:	d1f9      	bne.n	800b68a <_vfiprintf_r+0x96>
 800b696:	ebba 0b04 	subs.w	fp, sl, r4
 800b69a:	d00b      	beq.n	800b6b4 <_vfiprintf_r+0xc0>
 800b69c:	465b      	mov	r3, fp
 800b69e:	4622      	mov	r2, r4
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	f7ff ff93 	bl	800b5ce <__sfputs_r>
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	f000 80aa 	beq.w	800b802 <_vfiprintf_r+0x20e>
 800b6ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6b0:	445a      	add	r2, fp
 800b6b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b6b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 80a2 	beq.w	800b802 <_vfiprintf_r+0x20e>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6c8:	f10a 0a01 	add.w	sl, sl, #1
 800b6cc:	9304      	str	r3, [sp, #16]
 800b6ce:	9307      	str	r3, [sp, #28]
 800b6d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6d4:	931a      	str	r3, [sp, #104]	; 0x68
 800b6d6:	4654      	mov	r4, sl
 800b6d8:	2205      	movs	r2, #5
 800b6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6de:	4858      	ldr	r0, [pc, #352]	; (800b840 <_vfiprintf_r+0x24c>)
 800b6e0:	f7f4 fd7e 	bl	80001e0 <memchr>
 800b6e4:	9a04      	ldr	r2, [sp, #16]
 800b6e6:	b9d8      	cbnz	r0, 800b720 <_vfiprintf_r+0x12c>
 800b6e8:	06d1      	lsls	r1, r2, #27
 800b6ea:	bf44      	itt	mi
 800b6ec:	2320      	movmi	r3, #32
 800b6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6f2:	0713      	lsls	r3, r2, #28
 800b6f4:	bf44      	itt	mi
 800b6f6:	232b      	movmi	r3, #43	; 0x2b
 800b6f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b700:	2b2a      	cmp	r3, #42	; 0x2a
 800b702:	d015      	beq.n	800b730 <_vfiprintf_r+0x13c>
 800b704:	9a07      	ldr	r2, [sp, #28]
 800b706:	4654      	mov	r4, sl
 800b708:	2000      	movs	r0, #0
 800b70a:	f04f 0c0a 	mov.w	ip, #10
 800b70e:	4621      	mov	r1, r4
 800b710:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b714:	3b30      	subs	r3, #48	; 0x30
 800b716:	2b09      	cmp	r3, #9
 800b718:	d94e      	bls.n	800b7b8 <_vfiprintf_r+0x1c4>
 800b71a:	b1b0      	cbz	r0, 800b74a <_vfiprintf_r+0x156>
 800b71c:	9207      	str	r2, [sp, #28]
 800b71e:	e014      	b.n	800b74a <_vfiprintf_r+0x156>
 800b720:	eba0 0308 	sub.w	r3, r0, r8
 800b724:	fa09 f303 	lsl.w	r3, r9, r3
 800b728:	4313      	orrs	r3, r2
 800b72a:	9304      	str	r3, [sp, #16]
 800b72c:	46a2      	mov	sl, r4
 800b72e:	e7d2      	b.n	800b6d6 <_vfiprintf_r+0xe2>
 800b730:	9b03      	ldr	r3, [sp, #12]
 800b732:	1d19      	adds	r1, r3, #4
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	9103      	str	r1, [sp, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	bfbb      	ittet	lt
 800b73c:	425b      	neglt	r3, r3
 800b73e:	f042 0202 	orrlt.w	r2, r2, #2
 800b742:	9307      	strge	r3, [sp, #28]
 800b744:	9307      	strlt	r3, [sp, #28]
 800b746:	bfb8      	it	lt
 800b748:	9204      	strlt	r2, [sp, #16]
 800b74a:	7823      	ldrb	r3, [r4, #0]
 800b74c:	2b2e      	cmp	r3, #46	; 0x2e
 800b74e:	d10c      	bne.n	800b76a <_vfiprintf_r+0x176>
 800b750:	7863      	ldrb	r3, [r4, #1]
 800b752:	2b2a      	cmp	r3, #42	; 0x2a
 800b754:	d135      	bne.n	800b7c2 <_vfiprintf_r+0x1ce>
 800b756:	9b03      	ldr	r3, [sp, #12]
 800b758:	1d1a      	adds	r2, r3, #4
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	9203      	str	r2, [sp, #12]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	bfb8      	it	lt
 800b762:	f04f 33ff 	movlt.w	r3, #4294967295
 800b766:	3402      	adds	r4, #2
 800b768:	9305      	str	r3, [sp, #20]
 800b76a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b850 <_vfiprintf_r+0x25c>
 800b76e:	7821      	ldrb	r1, [r4, #0]
 800b770:	2203      	movs	r2, #3
 800b772:	4650      	mov	r0, sl
 800b774:	f7f4 fd34 	bl	80001e0 <memchr>
 800b778:	b140      	cbz	r0, 800b78c <_vfiprintf_r+0x198>
 800b77a:	2340      	movs	r3, #64	; 0x40
 800b77c:	eba0 000a 	sub.w	r0, r0, sl
 800b780:	fa03 f000 	lsl.w	r0, r3, r0
 800b784:	9b04      	ldr	r3, [sp, #16]
 800b786:	4303      	orrs	r3, r0
 800b788:	3401      	adds	r4, #1
 800b78a:	9304      	str	r3, [sp, #16]
 800b78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b790:	482c      	ldr	r0, [pc, #176]	; (800b844 <_vfiprintf_r+0x250>)
 800b792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b796:	2206      	movs	r2, #6
 800b798:	f7f4 fd22 	bl	80001e0 <memchr>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d03f      	beq.n	800b820 <_vfiprintf_r+0x22c>
 800b7a0:	4b29      	ldr	r3, [pc, #164]	; (800b848 <_vfiprintf_r+0x254>)
 800b7a2:	bb1b      	cbnz	r3, 800b7ec <_vfiprintf_r+0x1f8>
 800b7a4:	9b03      	ldr	r3, [sp, #12]
 800b7a6:	3307      	adds	r3, #7
 800b7a8:	f023 0307 	bic.w	r3, r3, #7
 800b7ac:	3308      	adds	r3, #8
 800b7ae:	9303      	str	r3, [sp, #12]
 800b7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b2:	443b      	add	r3, r7
 800b7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b6:	e767      	b.n	800b688 <_vfiprintf_r+0x94>
 800b7b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7bc:	460c      	mov	r4, r1
 800b7be:	2001      	movs	r0, #1
 800b7c0:	e7a5      	b.n	800b70e <_vfiprintf_r+0x11a>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	3401      	adds	r4, #1
 800b7c6:	9305      	str	r3, [sp, #20]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	f04f 0c0a 	mov.w	ip, #10
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7d4:	3a30      	subs	r2, #48	; 0x30
 800b7d6:	2a09      	cmp	r2, #9
 800b7d8:	d903      	bls.n	800b7e2 <_vfiprintf_r+0x1ee>
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d0c5      	beq.n	800b76a <_vfiprintf_r+0x176>
 800b7de:	9105      	str	r1, [sp, #20]
 800b7e0:	e7c3      	b.n	800b76a <_vfiprintf_r+0x176>
 800b7e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e7f0      	b.n	800b7ce <_vfiprintf_r+0x1da>
 800b7ec:	ab03      	add	r3, sp, #12
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	462a      	mov	r2, r5
 800b7f2:	4b16      	ldr	r3, [pc, #88]	; (800b84c <_vfiprintf_r+0x258>)
 800b7f4:	a904      	add	r1, sp, #16
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f3af 8000 	nop.w
 800b7fc:	4607      	mov	r7, r0
 800b7fe:	1c78      	adds	r0, r7, #1
 800b800:	d1d6      	bne.n	800b7b0 <_vfiprintf_r+0x1bc>
 800b802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b804:	07d9      	lsls	r1, r3, #31
 800b806:	d405      	bmi.n	800b814 <_vfiprintf_r+0x220>
 800b808:	89ab      	ldrh	r3, [r5, #12]
 800b80a:	059a      	lsls	r2, r3, #22
 800b80c:	d402      	bmi.n	800b814 <_vfiprintf_r+0x220>
 800b80e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b810:	f7ff fda0 	bl	800b354 <__retarget_lock_release_recursive>
 800b814:	89ab      	ldrh	r3, [r5, #12]
 800b816:	065b      	lsls	r3, r3, #25
 800b818:	f53f af12 	bmi.w	800b640 <_vfiprintf_r+0x4c>
 800b81c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b81e:	e711      	b.n	800b644 <_vfiprintf_r+0x50>
 800b820:	ab03      	add	r3, sp, #12
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	462a      	mov	r2, r5
 800b826:	4b09      	ldr	r3, [pc, #36]	; (800b84c <_vfiprintf_r+0x258>)
 800b828:	a904      	add	r1, sp, #16
 800b82a:	4630      	mov	r0, r6
 800b82c:	f000 f880 	bl	800b930 <_printf_i>
 800b830:	e7e4      	b.n	800b7fc <_vfiprintf_r+0x208>
 800b832:	bf00      	nop
 800b834:	08015fbc 	.word	0x08015fbc
 800b838:	08015fdc 	.word	0x08015fdc
 800b83c:	08015f9c 	.word	0x08015f9c
 800b840:	08016000 	.word	0x08016000
 800b844:	0801600a 	.word	0x0801600a
 800b848:	00000000 	.word	0x00000000
 800b84c:	0800b5cf 	.word	0x0800b5cf
 800b850:	08016006 	.word	0x08016006

0800b854 <_printf_common>:
 800b854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b858:	4616      	mov	r6, r2
 800b85a:	4699      	mov	r9, r3
 800b85c:	688a      	ldr	r2, [r1, #8]
 800b85e:	690b      	ldr	r3, [r1, #16]
 800b860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b864:	4293      	cmp	r3, r2
 800b866:	bfb8      	it	lt
 800b868:	4613      	movlt	r3, r2
 800b86a:	6033      	str	r3, [r6, #0]
 800b86c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b870:	4607      	mov	r7, r0
 800b872:	460c      	mov	r4, r1
 800b874:	b10a      	cbz	r2, 800b87a <_printf_common+0x26>
 800b876:	3301      	adds	r3, #1
 800b878:	6033      	str	r3, [r6, #0]
 800b87a:	6823      	ldr	r3, [r4, #0]
 800b87c:	0699      	lsls	r1, r3, #26
 800b87e:	bf42      	ittt	mi
 800b880:	6833      	ldrmi	r3, [r6, #0]
 800b882:	3302      	addmi	r3, #2
 800b884:	6033      	strmi	r3, [r6, #0]
 800b886:	6825      	ldr	r5, [r4, #0]
 800b888:	f015 0506 	ands.w	r5, r5, #6
 800b88c:	d106      	bne.n	800b89c <_printf_common+0x48>
 800b88e:	f104 0a19 	add.w	sl, r4, #25
 800b892:	68e3      	ldr	r3, [r4, #12]
 800b894:	6832      	ldr	r2, [r6, #0]
 800b896:	1a9b      	subs	r3, r3, r2
 800b898:	42ab      	cmp	r3, r5
 800b89a:	dc26      	bgt.n	800b8ea <_printf_common+0x96>
 800b89c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8a0:	1e13      	subs	r3, r2, #0
 800b8a2:	6822      	ldr	r2, [r4, #0]
 800b8a4:	bf18      	it	ne
 800b8a6:	2301      	movne	r3, #1
 800b8a8:	0692      	lsls	r2, r2, #26
 800b8aa:	d42b      	bmi.n	800b904 <_printf_common+0xb0>
 800b8ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8b0:	4649      	mov	r1, r9
 800b8b2:	4638      	mov	r0, r7
 800b8b4:	47c0      	blx	r8
 800b8b6:	3001      	adds	r0, #1
 800b8b8:	d01e      	beq.n	800b8f8 <_printf_common+0xa4>
 800b8ba:	6823      	ldr	r3, [r4, #0]
 800b8bc:	68e5      	ldr	r5, [r4, #12]
 800b8be:	6832      	ldr	r2, [r6, #0]
 800b8c0:	f003 0306 	and.w	r3, r3, #6
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	bf08      	it	eq
 800b8c8:	1aad      	subeq	r5, r5, r2
 800b8ca:	68a3      	ldr	r3, [r4, #8]
 800b8cc:	6922      	ldr	r2, [r4, #16]
 800b8ce:	bf0c      	ite	eq
 800b8d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8d4:	2500      	movne	r5, #0
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	bfc4      	itt	gt
 800b8da:	1a9b      	subgt	r3, r3, r2
 800b8dc:	18ed      	addgt	r5, r5, r3
 800b8de:	2600      	movs	r6, #0
 800b8e0:	341a      	adds	r4, #26
 800b8e2:	42b5      	cmp	r5, r6
 800b8e4:	d11a      	bne.n	800b91c <_printf_common+0xc8>
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	e008      	b.n	800b8fc <_printf_common+0xa8>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	4652      	mov	r2, sl
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	4638      	mov	r0, r7
 800b8f2:	47c0      	blx	r8
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d103      	bne.n	800b900 <_printf_common+0xac>
 800b8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b900:	3501      	adds	r5, #1
 800b902:	e7c6      	b.n	800b892 <_printf_common+0x3e>
 800b904:	18e1      	adds	r1, r4, r3
 800b906:	1c5a      	adds	r2, r3, #1
 800b908:	2030      	movs	r0, #48	; 0x30
 800b90a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b90e:	4422      	add	r2, r4
 800b910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b918:	3302      	adds	r3, #2
 800b91a:	e7c7      	b.n	800b8ac <_printf_common+0x58>
 800b91c:	2301      	movs	r3, #1
 800b91e:	4622      	mov	r2, r4
 800b920:	4649      	mov	r1, r9
 800b922:	4638      	mov	r0, r7
 800b924:	47c0      	blx	r8
 800b926:	3001      	adds	r0, #1
 800b928:	d0e6      	beq.n	800b8f8 <_printf_common+0xa4>
 800b92a:	3601      	adds	r6, #1
 800b92c:	e7d9      	b.n	800b8e2 <_printf_common+0x8e>
	...

0800b930 <_printf_i>:
 800b930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b934:	460c      	mov	r4, r1
 800b936:	4691      	mov	r9, r2
 800b938:	7e27      	ldrb	r7, [r4, #24]
 800b93a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b93c:	2f78      	cmp	r7, #120	; 0x78
 800b93e:	4680      	mov	r8, r0
 800b940:	469a      	mov	sl, r3
 800b942:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b946:	d807      	bhi.n	800b958 <_printf_i+0x28>
 800b948:	2f62      	cmp	r7, #98	; 0x62
 800b94a:	d80a      	bhi.n	800b962 <_printf_i+0x32>
 800b94c:	2f00      	cmp	r7, #0
 800b94e:	f000 80d8 	beq.w	800bb02 <_printf_i+0x1d2>
 800b952:	2f58      	cmp	r7, #88	; 0x58
 800b954:	f000 80a3 	beq.w	800ba9e <_printf_i+0x16e>
 800b958:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b95c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b960:	e03a      	b.n	800b9d8 <_printf_i+0xa8>
 800b962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b966:	2b15      	cmp	r3, #21
 800b968:	d8f6      	bhi.n	800b958 <_printf_i+0x28>
 800b96a:	a001      	add	r0, pc, #4	; (adr r0, 800b970 <_printf_i+0x40>)
 800b96c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b970:	0800b9c9 	.word	0x0800b9c9
 800b974:	0800b9dd 	.word	0x0800b9dd
 800b978:	0800b959 	.word	0x0800b959
 800b97c:	0800b959 	.word	0x0800b959
 800b980:	0800b959 	.word	0x0800b959
 800b984:	0800b959 	.word	0x0800b959
 800b988:	0800b9dd 	.word	0x0800b9dd
 800b98c:	0800b959 	.word	0x0800b959
 800b990:	0800b959 	.word	0x0800b959
 800b994:	0800b959 	.word	0x0800b959
 800b998:	0800b959 	.word	0x0800b959
 800b99c:	0800bae9 	.word	0x0800bae9
 800b9a0:	0800ba0d 	.word	0x0800ba0d
 800b9a4:	0800bacb 	.word	0x0800bacb
 800b9a8:	0800b959 	.word	0x0800b959
 800b9ac:	0800b959 	.word	0x0800b959
 800b9b0:	0800bb0b 	.word	0x0800bb0b
 800b9b4:	0800b959 	.word	0x0800b959
 800b9b8:	0800ba0d 	.word	0x0800ba0d
 800b9bc:	0800b959 	.word	0x0800b959
 800b9c0:	0800b959 	.word	0x0800b959
 800b9c4:	0800bad3 	.word	0x0800bad3
 800b9c8:	680b      	ldr	r3, [r1, #0]
 800b9ca:	1d1a      	adds	r2, r3, #4
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	600a      	str	r2, [r1, #0]
 800b9d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b9d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e0a3      	b.n	800bb24 <_printf_i+0x1f4>
 800b9dc:	6825      	ldr	r5, [r4, #0]
 800b9de:	6808      	ldr	r0, [r1, #0]
 800b9e0:	062e      	lsls	r6, r5, #24
 800b9e2:	f100 0304 	add.w	r3, r0, #4
 800b9e6:	d50a      	bpl.n	800b9fe <_printf_i+0xce>
 800b9e8:	6805      	ldr	r5, [r0, #0]
 800b9ea:	600b      	str	r3, [r1, #0]
 800b9ec:	2d00      	cmp	r5, #0
 800b9ee:	da03      	bge.n	800b9f8 <_printf_i+0xc8>
 800b9f0:	232d      	movs	r3, #45	; 0x2d
 800b9f2:	426d      	negs	r5, r5
 800b9f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9f8:	485e      	ldr	r0, [pc, #376]	; (800bb74 <_printf_i+0x244>)
 800b9fa:	230a      	movs	r3, #10
 800b9fc:	e019      	b.n	800ba32 <_printf_i+0x102>
 800b9fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ba02:	6805      	ldr	r5, [r0, #0]
 800ba04:	600b      	str	r3, [r1, #0]
 800ba06:	bf18      	it	ne
 800ba08:	b22d      	sxthne	r5, r5
 800ba0a:	e7ef      	b.n	800b9ec <_printf_i+0xbc>
 800ba0c:	680b      	ldr	r3, [r1, #0]
 800ba0e:	6825      	ldr	r5, [r4, #0]
 800ba10:	1d18      	adds	r0, r3, #4
 800ba12:	6008      	str	r0, [r1, #0]
 800ba14:	0628      	lsls	r0, r5, #24
 800ba16:	d501      	bpl.n	800ba1c <_printf_i+0xec>
 800ba18:	681d      	ldr	r5, [r3, #0]
 800ba1a:	e002      	b.n	800ba22 <_printf_i+0xf2>
 800ba1c:	0669      	lsls	r1, r5, #25
 800ba1e:	d5fb      	bpl.n	800ba18 <_printf_i+0xe8>
 800ba20:	881d      	ldrh	r5, [r3, #0]
 800ba22:	4854      	ldr	r0, [pc, #336]	; (800bb74 <_printf_i+0x244>)
 800ba24:	2f6f      	cmp	r7, #111	; 0x6f
 800ba26:	bf0c      	ite	eq
 800ba28:	2308      	moveq	r3, #8
 800ba2a:	230a      	movne	r3, #10
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba32:	6866      	ldr	r6, [r4, #4]
 800ba34:	60a6      	str	r6, [r4, #8]
 800ba36:	2e00      	cmp	r6, #0
 800ba38:	bfa2      	ittt	ge
 800ba3a:	6821      	ldrge	r1, [r4, #0]
 800ba3c:	f021 0104 	bicge.w	r1, r1, #4
 800ba40:	6021      	strge	r1, [r4, #0]
 800ba42:	b90d      	cbnz	r5, 800ba48 <_printf_i+0x118>
 800ba44:	2e00      	cmp	r6, #0
 800ba46:	d04d      	beq.n	800bae4 <_printf_i+0x1b4>
 800ba48:	4616      	mov	r6, r2
 800ba4a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba4e:	fb03 5711 	mls	r7, r3, r1, r5
 800ba52:	5dc7      	ldrb	r7, [r0, r7]
 800ba54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba58:	462f      	mov	r7, r5
 800ba5a:	42bb      	cmp	r3, r7
 800ba5c:	460d      	mov	r5, r1
 800ba5e:	d9f4      	bls.n	800ba4a <_printf_i+0x11a>
 800ba60:	2b08      	cmp	r3, #8
 800ba62:	d10b      	bne.n	800ba7c <_printf_i+0x14c>
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	07df      	lsls	r7, r3, #31
 800ba68:	d508      	bpl.n	800ba7c <_printf_i+0x14c>
 800ba6a:	6923      	ldr	r3, [r4, #16]
 800ba6c:	6861      	ldr	r1, [r4, #4]
 800ba6e:	4299      	cmp	r1, r3
 800ba70:	bfde      	ittt	le
 800ba72:	2330      	movle	r3, #48	; 0x30
 800ba74:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba78:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba7c:	1b92      	subs	r2, r2, r6
 800ba7e:	6122      	str	r2, [r4, #16]
 800ba80:	f8cd a000 	str.w	sl, [sp]
 800ba84:	464b      	mov	r3, r9
 800ba86:	aa03      	add	r2, sp, #12
 800ba88:	4621      	mov	r1, r4
 800ba8a:	4640      	mov	r0, r8
 800ba8c:	f7ff fee2 	bl	800b854 <_printf_common>
 800ba90:	3001      	adds	r0, #1
 800ba92:	d14c      	bne.n	800bb2e <_printf_i+0x1fe>
 800ba94:	f04f 30ff 	mov.w	r0, #4294967295
 800ba98:	b004      	add	sp, #16
 800ba9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba9e:	4835      	ldr	r0, [pc, #212]	; (800bb74 <_printf_i+0x244>)
 800baa0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800baa4:	6823      	ldr	r3, [r4, #0]
 800baa6:	680e      	ldr	r6, [r1, #0]
 800baa8:	061f      	lsls	r7, r3, #24
 800baaa:	f856 5b04 	ldr.w	r5, [r6], #4
 800baae:	600e      	str	r6, [r1, #0]
 800bab0:	d514      	bpl.n	800badc <_printf_i+0x1ac>
 800bab2:	07d9      	lsls	r1, r3, #31
 800bab4:	bf44      	itt	mi
 800bab6:	f043 0320 	orrmi.w	r3, r3, #32
 800baba:	6023      	strmi	r3, [r4, #0]
 800babc:	b91d      	cbnz	r5, 800bac6 <_printf_i+0x196>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	f023 0320 	bic.w	r3, r3, #32
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	2310      	movs	r3, #16
 800bac8:	e7b0      	b.n	800ba2c <_printf_i+0xfc>
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	f043 0320 	orr.w	r3, r3, #32
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	2378      	movs	r3, #120	; 0x78
 800bad4:	4828      	ldr	r0, [pc, #160]	; (800bb78 <_printf_i+0x248>)
 800bad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bada:	e7e3      	b.n	800baa4 <_printf_i+0x174>
 800badc:	065e      	lsls	r6, r3, #25
 800bade:	bf48      	it	mi
 800bae0:	b2ad      	uxthmi	r5, r5
 800bae2:	e7e6      	b.n	800bab2 <_printf_i+0x182>
 800bae4:	4616      	mov	r6, r2
 800bae6:	e7bb      	b.n	800ba60 <_printf_i+0x130>
 800bae8:	680b      	ldr	r3, [r1, #0]
 800baea:	6826      	ldr	r6, [r4, #0]
 800baec:	6960      	ldr	r0, [r4, #20]
 800baee:	1d1d      	adds	r5, r3, #4
 800baf0:	600d      	str	r5, [r1, #0]
 800baf2:	0635      	lsls	r5, r6, #24
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	d501      	bpl.n	800bafc <_printf_i+0x1cc>
 800baf8:	6018      	str	r0, [r3, #0]
 800bafa:	e002      	b.n	800bb02 <_printf_i+0x1d2>
 800bafc:	0671      	lsls	r1, r6, #25
 800bafe:	d5fb      	bpl.n	800baf8 <_printf_i+0x1c8>
 800bb00:	8018      	strh	r0, [r3, #0]
 800bb02:	2300      	movs	r3, #0
 800bb04:	6123      	str	r3, [r4, #16]
 800bb06:	4616      	mov	r6, r2
 800bb08:	e7ba      	b.n	800ba80 <_printf_i+0x150>
 800bb0a:	680b      	ldr	r3, [r1, #0]
 800bb0c:	1d1a      	adds	r2, r3, #4
 800bb0e:	600a      	str	r2, [r1, #0]
 800bb10:	681e      	ldr	r6, [r3, #0]
 800bb12:	6862      	ldr	r2, [r4, #4]
 800bb14:	2100      	movs	r1, #0
 800bb16:	4630      	mov	r0, r6
 800bb18:	f7f4 fb62 	bl	80001e0 <memchr>
 800bb1c:	b108      	cbz	r0, 800bb22 <_printf_i+0x1f2>
 800bb1e:	1b80      	subs	r0, r0, r6
 800bb20:	6060      	str	r0, [r4, #4]
 800bb22:	6863      	ldr	r3, [r4, #4]
 800bb24:	6123      	str	r3, [r4, #16]
 800bb26:	2300      	movs	r3, #0
 800bb28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb2c:	e7a8      	b.n	800ba80 <_printf_i+0x150>
 800bb2e:	6923      	ldr	r3, [r4, #16]
 800bb30:	4632      	mov	r2, r6
 800bb32:	4649      	mov	r1, r9
 800bb34:	4640      	mov	r0, r8
 800bb36:	47d0      	blx	sl
 800bb38:	3001      	adds	r0, #1
 800bb3a:	d0ab      	beq.n	800ba94 <_printf_i+0x164>
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	079b      	lsls	r3, r3, #30
 800bb40:	d413      	bmi.n	800bb6a <_printf_i+0x23a>
 800bb42:	68e0      	ldr	r0, [r4, #12]
 800bb44:	9b03      	ldr	r3, [sp, #12]
 800bb46:	4298      	cmp	r0, r3
 800bb48:	bfb8      	it	lt
 800bb4a:	4618      	movlt	r0, r3
 800bb4c:	e7a4      	b.n	800ba98 <_printf_i+0x168>
 800bb4e:	2301      	movs	r3, #1
 800bb50:	4632      	mov	r2, r6
 800bb52:	4649      	mov	r1, r9
 800bb54:	4640      	mov	r0, r8
 800bb56:	47d0      	blx	sl
 800bb58:	3001      	adds	r0, #1
 800bb5a:	d09b      	beq.n	800ba94 <_printf_i+0x164>
 800bb5c:	3501      	adds	r5, #1
 800bb5e:	68e3      	ldr	r3, [r4, #12]
 800bb60:	9903      	ldr	r1, [sp, #12]
 800bb62:	1a5b      	subs	r3, r3, r1
 800bb64:	42ab      	cmp	r3, r5
 800bb66:	dcf2      	bgt.n	800bb4e <_printf_i+0x21e>
 800bb68:	e7eb      	b.n	800bb42 <_printf_i+0x212>
 800bb6a:	2500      	movs	r5, #0
 800bb6c:	f104 0619 	add.w	r6, r4, #25
 800bb70:	e7f5      	b.n	800bb5e <_printf_i+0x22e>
 800bb72:	bf00      	nop
 800bb74:	08016011 	.word	0x08016011
 800bb78:	08016022 	.word	0x08016022

0800bb7c <iprintf>:
 800bb7c:	b40f      	push	{r0, r1, r2, r3}
 800bb7e:	4b0a      	ldr	r3, [pc, #40]	; (800bba8 <iprintf+0x2c>)
 800bb80:	b513      	push	{r0, r1, r4, lr}
 800bb82:	681c      	ldr	r4, [r3, #0]
 800bb84:	b124      	cbz	r4, 800bb90 <iprintf+0x14>
 800bb86:	69a3      	ldr	r3, [r4, #24]
 800bb88:	b913      	cbnz	r3, 800bb90 <iprintf+0x14>
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f7ff fb0c 	bl	800b1a8 <__sinit>
 800bb90:	ab05      	add	r3, sp, #20
 800bb92:	9a04      	ldr	r2, [sp, #16]
 800bb94:	68a1      	ldr	r1, [r4, #8]
 800bb96:	9301      	str	r3, [sp, #4]
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f7ff fd2b 	bl	800b5f4 <_vfiprintf_r>
 800bb9e:	b002      	add	sp, #8
 800bba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bba4:	b004      	add	sp, #16
 800bba6:	4770      	bx	lr
 800bba8:	2000003c 	.word	0x2000003c

0800bbac <_puts_r>:
 800bbac:	b570      	push	{r4, r5, r6, lr}
 800bbae:	460e      	mov	r6, r1
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	b118      	cbz	r0, 800bbbc <_puts_r+0x10>
 800bbb4:	6983      	ldr	r3, [r0, #24]
 800bbb6:	b90b      	cbnz	r3, 800bbbc <_puts_r+0x10>
 800bbb8:	f7ff faf6 	bl	800b1a8 <__sinit>
 800bbbc:	69ab      	ldr	r3, [r5, #24]
 800bbbe:	68ac      	ldr	r4, [r5, #8]
 800bbc0:	b913      	cbnz	r3, 800bbc8 <_puts_r+0x1c>
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	f7ff faf0 	bl	800b1a8 <__sinit>
 800bbc8:	4b2c      	ldr	r3, [pc, #176]	; (800bc7c <_puts_r+0xd0>)
 800bbca:	429c      	cmp	r4, r3
 800bbcc:	d120      	bne.n	800bc10 <_puts_r+0x64>
 800bbce:	686c      	ldr	r4, [r5, #4]
 800bbd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbd2:	07db      	lsls	r3, r3, #31
 800bbd4:	d405      	bmi.n	800bbe2 <_puts_r+0x36>
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	0598      	lsls	r0, r3, #22
 800bbda:	d402      	bmi.n	800bbe2 <_puts_r+0x36>
 800bbdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbde:	f7ff fbb8 	bl	800b352 <__retarget_lock_acquire_recursive>
 800bbe2:	89a3      	ldrh	r3, [r4, #12]
 800bbe4:	0719      	lsls	r1, r3, #28
 800bbe6:	d51d      	bpl.n	800bc24 <_puts_r+0x78>
 800bbe8:	6923      	ldr	r3, [r4, #16]
 800bbea:	b1db      	cbz	r3, 800bc24 <_puts_r+0x78>
 800bbec:	3e01      	subs	r6, #1
 800bbee:	68a3      	ldr	r3, [r4, #8]
 800bbf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	60a3      	str	r3, [r4, #8]
 800bbf8:	bb39      	cbnz	r1, 800bc4a <_puts_r+0x9e>
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	da38      	bge.n	800bc70 <_puts_r+0xc4>
 800bbfe:	4622      	mov	r2, r4
 800bc00:	210a      	movs	r1, #10
 800bc02:	4628      	mov	r0, r5
 800bc04:	f000 f8f0 	bl	800bde8 <__swbuf_r>
 800bc08:	3001      	adds	r0, #1
 800bc0a:	d011      	beq.n	800bc30 <_puts_r+0x84>
 800bc0c:	250a      	movs	r5, #10
 800bc0e:	e011      	b.n	800bc34 <_puts_r+0x88>
 800bc10:	4b1b      	ldr	r3, [pc, #108]	; (800bc80 <_puts_r+0xd4>)
 800bc12:	429c      	cmp	r4, r3
 800bc14:	d101      	bne.n	800bc1a <_puts_r+0x6e>
 800bc16:	68ac      	ldr	r4, [r5, #8]
 800bc18:	e7da      	b.n	800bbd0 <_puts_r+0x24>
 800bc1a:	4b1a      	ldr	r3, [pc, #104]	; (800bc84 <_puts_r+0xd8>)
 800bc1c:	429c      	cmp	r4, r3
 800bc1e:	bf08      	it	eq
 800bc20:	68ec      	ldreq	r4, [r5, #12]
 800bc22:	e7d5      	b.n	800bbd0 <_puts_r+0x24>
 800bc24:	4621      	mov	r1, r4
 800bc26:	4628      	mov	r0, r5
 800bc28:	f000 f942 	bl	800beb0 <__swsetup_r>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d0dd      	beq.n	800bbec <_puts_r+0x40>
 800bc30:	f04f 35ff 	mov.w	r5, #4294967295
 800bc34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc36:	07da      	lsls	r2, r3, #31
 800bc38:	d405      	bmi.n	800bc46 <_puts_r+0x9a>
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	059b      	lsls	r3, r3, #22
 800bc3e:	d402      	bmi.n	800bc46 <_puts_r+0x9a>
 800bc40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc42:	f7ff fb87 	bl	800b354 <__retarget_lock_release_recursive>
 800bc46:	4628      	mov	r0, r5
 800bc48:	bd70      	pop	{r4, r5, r6, pc}
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	da04      	bge.n	800bc58 <_puts_r+0xac>
 800bc4e:	69a2      	ldr	r2, [r4, #24]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	dc06      	bgt.n	800bc62 <_puts_r+0xb6>
 800bc54:	290a      	cmp	r1, #10
 800bc56:	d004      	beq.n	800bc62 <_puts_r+0xb6>
 800bc58:	6823      	ldr	r3, [r4, #0]
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	6022      	str	r2, [r4, #0]
 800bc5e:	7019      	strb	r1, [r3, #0]
 800bc60:	e7c5      	b.n	800bbee <_puts_r+0x42>
 800bc62:	4622      	mov	r2, r4
 800bc64:	4628      	mov	r0, r5
 800bc66:	f000 f8bf 	bl	800bde8 <__swbuf_r>
 800bc6a:	3001      	adds	r0, #1
 800bc6c:	d1bf      	bne.n	800bbee <_puts_r+0x42>
 800bc6e:	e7df      	b.n	800bc30 <_puts_r+0x84>
 800bc70:	6823      	ldr	r3, [r4, #0]
 800bc72:	250a      	movs	r5, #10
 800bc74:	1c5a      	adds	r2, r3, #1
 800bc76:	6022      	str	r2, [r4, #0]
 800bc78:	701d      	strb	r5, [r3, #0]
 800bc7a:	e7db      	b.n	800bc34 <_puts_r+0x88>
 800bc7c:	08015fbc 	.word	0x08015fbc
 800bc80:	08015fdc 	.word	0x08015fdc
 800bc84:	08015f9c 	.word	0x08015f9c

0800bc88 <puts>:
 800bc88:	4b02      	ldr	r3, [pc, #8]	; (800bc94 <puts+0xc>)
 800bc8a:	4601      	mov	r1, r0
 800bc8c:	6818      	ldr	r0, [r3, #0]
 800bc8e:	f7ff bf8d 	b.w	800bbac <_puts_r>
 800bc92:	bf00      	nop
 800bc94:	2000003c 	.word	0x2000003c

0800bc98 <_sbrk_r>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	4d06      	ldr	r5, [pc, #24]	; (800bcb4 <_sbrk_r+0x1c>)
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	4604      	mov	r4, r0
 800bca0:	4608      	mov	r0, r1
 800bca2:	602b      	str	r3, [r5, #0]
 800bca4:	f7f7 fcce 	bl	8003644 <_sbrk>
 800bca8:	1c43      	adds	r3, r0, #1
 800bcaa:	d102      	bne.n	800bcb2 <_sbrk_r+0x1a>
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	b103      	cbz	r3, 800bcb2 <_sbrk_r+0x1a>
 800bcb0:	6023      	str	r3, [r4, #0]
 800bcb2:	bd38      	pop	{r3, r4, r5, pc}
 800bcb4:	2000adec 	.word	0x2000adec

0800bcb8 <sniprintf>:
 800bcb8:	b40c      	push	{r2, r3}
 800bcba:	b530      	push	{r4, r5, lr}
 800bcbc:	4b17      	ldr	r3, [pc, #92]	; (800bd1c <sniprintf+0x64>)
 800bcbe:	1e0c      	subs	r4, r1, #0
 800bcc0:	681d      	ldr	r5, [r3, #0]
 800bcc2:	b09d      	sub	sp, #116	; 0x74
 800bcc4:	da08      	bge.n	800bcd8 <sniprintf+0x20>
 800bcc6:	238b      	movs	r3, #139	; 0x8b
 800bcc8:	602b      	str	r3, [r5, #0]
 800bcca:	f04f 30ff 	mov.w	r0, #4294967295
 800bcce:	b01d      	add	sp, #116	; 0x74
 800bcd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcd4:	b002      	add	sp, #8
 800bcd6:	4770      	bx	lr
 800bcd8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bcdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bce0:	bf14      	ite	ne
 800bce2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bce6:	4623      	moveq	r3, r4
 800bce8:	9304      	str	r3, [sp, #16]
 800bcea:	9307      	str	r3, [sp, #28]
 800bcec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcf0:	9002      	str	r0, [sp, #8]
 800bcf2:	9006      	str	r0, [sp, #24]
 800bcf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bcf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bcfa:	ab21      	add	r3, sp, #132	; 0x84
 800bcfc:	a902      	add	r1, sp, #8
 800bcfe:	4628      	mov	r0, r5
 800bd00:	9301      	str	r3, [sp, #4]
 800bd02:	f000 fa37 	bl	800c174 <_svfiprintf_r>
 800bd06:	1c43      	adds	r3, r0, #1
 800bd08:	bfbc      	itt	lt
 800bd0a:	238b      	movlt	r3, #139	; 0x8b
 800bd0c:	602b      	strlt	r3, [r5, #0]
 800bd0e:	2c00      	cmp	r4, #0
 800bd10:	d0dd      	beq.n	800bcce <sniprintf+0x16>
 800bd12:	9b02      	ldr	r3, [sp, #8]
 800bd14:	2200      	movs	r2, #0
 800bd16:	701a      	strb	r2, [r3, #0]
 800bd18:	e7d9      	b.n	800bcce <sniprintf+0x16>
 800bd1a:	bf00      	nop
 800bd1c:	2000003c 	.word	0x2000003c

0800bd20 <siprintf>:
 800bd20:	b40e      	push	{r1, r2, r3}
 800bd22:	b500      	push	{lr}
 800bd24:	b09c      	sub	sp, #112	; 0x70
 800bd26:	ab1d      	add	r3, sp, #116	; 0x74
 800bd28:	9002      	str	r0, [sp, #8]
 800bd2a:	9006      	str	r0, [sp, #24]
 800bd2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd30:	4809      	ldr	r0, [pc, #36]	; (800bd58 <siprintf+0x38>)
 800bd32:	9107      	str	r1, [sp, #28]
 800bd34:	9104      	str	r1, [sp, #16]
 800bd36:	4909      	ldr	r1, [pc, #36]	; (800bd5c <siprintf+0x3c>)
 800bd38:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd3c:	9105      	str	r1, [sp, #20]
 800bd3e:	6800      	ldr	r0, [r0, #0]
 800bd40:	9301      	str	r3, [sp, #4]
 800bd42:	a902      	add	r1, sp, #8
 800bd44:	f000 fa16 	bl	800c174 <_svfiprintf_r>
 800bd48:	9b02      	ldr	r3, [sp, #8]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	701a      	strb	r2, [r3, #0]
 800bd4e:	b01c      	add	sp, #112	; 0x70
 800bd50:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd54:	b003      	add	sp, #12
 800bd56:	4770      	bx	lr
 800bd58:	2000003c 	.word	0x2000003c
 800bd5c:	ffff0208 	.word	0xffff0208

0800bd60 <__sread>:
 800bd60:	b510      	push	{r4, lr}
 800bd62:	460c      	mov	r4, r1
 800bd64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd68:	f000 fb04 	bl	800c374 <_read_r>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	bfab      	itete	ge
 800bd70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd72:	89a3      	ldrhlt	r3, [r4, #12]
 800bd74:	181b      	addge	r3, r3, r0
 800bd76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd7a:	bfac      	ite	ge
 800bd7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd7e:	81a3      	strhlt	r3, [r4, #12]
 800bd80:	bd10      	pop	{r4, pc}

0800bd82 <__swrite>:
 800bd82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd86:	461f      	mov	r7, r3
 800bd88:	898b      	ldrh	r3, [r1, #12]
 800bd8a:	05db      	lsls	r3, r3, #23
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	4616      	mov	r6, r2
 800bd92:	d505      	bpl.n	800bda0 <__swrite+0x1e>
 800bd94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd98:	2302      	movs	r3, #2
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f000 f930 	bl	800c000 <_lseek_r>
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdaa:	81a3      	strh	r3, [r4, #12]
 800bdac:	4632      	mov	r2, r6
 800bdae:	463b      	mov	r3, r7
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb6:	f000 b869 	b.w	800be8c <_write_r>

0800bdba <__sseek>:
 800bdba:	b510      	push	{r4, lr}
 800bdbc:	460c      	mov	r4, r1
 800bdbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc2:	f000 f91d 	bl	800c000 <_lseek_r>
 800bdc6:	1c43      	adds	r3, r0, #1
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	bf15      	itete	ne
 800bdcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdd6:	81a3      	strheq	r3, [r4, #12]
 800bdd8:	bf18      	it	ne
 800bdda:	81a3      	strhne	r3, [r4, #12]
 800bddc:	bd10      	pop	{r4, pc}

0800bdde <__sclose>:
 800bdde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde2:	f000 b8db 	b.w	800bf9c <_close_r>
	...

0800bde8 <__swbuf_r>:
 800bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdea:	460e      	mov	r6, r1
 800bdec:	4614      	mov	r4, r2
 800bdee:	4605      	mov	r5, r0
 800bdf0:	b118      	cbz	r0, 800bdfa <__swbuf_r+0x12>
 800bdf2:	6983      	ldr	r3, [r0, #24]
 800bdf4:	b90b      	cbnz	r3, 800bdfa <__swbuf_r+0x12>
 800bdf6:	f7ff f9d7 	bl	800b1a8 <__sinit>
 800bdfa:	4b21      	ldr	r3, [pc, #132]	; (800be80 <__swbuf_r+0x98>)
 800bdfc:	429c      	cmp	r4, r3
 800bdfe:	d12b      	bne.n	800be58 <__swbuf_r+0x70>
 800be00:	686c      	ldr	r4, [r5, #4]
 800be02:	69a3      	ldr	r3, [r4, #24]
 800be04:	60a3      	str	r3, [r4, #8]
 800be06:	89a3      	ldrh	r3, [r4, #12]
 800be08:	071a      	lsls	r2, r3, #28
 800be0a:	d52f      	bpl.n	800be6c <__swbuf_r+0x84>
 800be0c:	6923      	ldr	r3, [r4, #16]
 800be0e:	b36b      	cbz	r3, 800be6c <__swbuf_r+0x84>
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	6820      	ldr	r0, [r4, #0]
 800be14:	1ac0      	subs	r0, r0, r3
 800be16:	6963      	ldr	r3, [r4, #20]
 800be18:	b2f6      	uxtb	r6, r6
 800be1a:	4283      	cmp	r3, r0
 800be1c:	4637      	mov	r7, r6
 800be1e:	dc04      	bgt.n	800be2a <__swbuf_r+0x42>
 800be20:	4621      	mov	r1, r4
 800be22:	4628      	mov	r0, r5
 800be24:	f7ff f91a 	bl	800b05c <_fflush_r>
 800be28:	bb30      	cbnz	r0, 800be78 <__swbuf_r+0x90>
 800be2a:	68a3      	ldr	r3, [r4, #8]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	60a3      	str	r3, [r4, #8]
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	1c5a      	adds	r2, r3, #1
 800be34:	6022      	str	r2, [r4, #0]
 800be36:	701e      	strb	r6, [r3, #0]
 800be38:	6963      	ldr	r3, [r4, #20]
 800be3a:	3001      	adds	r0, #1
 800be3c:	4283      	cmp	r3, r0
 800be3e:	d004      	beq.n	800be4a <__swbuf_r+0x62>
 800be40:	89a3      	ldrh	r3, [r4, #12]
 800be42:	07db      	lsls	r3, r3, #31
 800be44:	d506      	bpl.n	800be54 <__swbuf_r+0x6c>
 800be46:	2e0a      	cmp	r6, #10
 800be48:	d104      	bne.n	800be54 <__swbuf_r+0x6c>
 800be4a:	4621      	mov	r1, r4
 800be4c:	4628      	mov	r0, r5
 800be4e:	f7ff f905 	bl	800b05c <_fflush_r>
 800be52:	b988      	cbnz	r0, 800be78 <__swbuf_r+0x90>
 800be54:	4638      	mov	r0, r7
 800be56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be58:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <__swbuf_r+0x9c>)
 800be5a:	429c      	cmp	r4, r3
 800be5c:	d101      	bne.n	800be62 <__swbuf_r+0x7a>
 800be5e:	68ac      	ldr	r4, [r5, #8]
 800be60:	e7cf      	b.n	800be02 <__swbuf_r+0x1a>
 800be62:	4b09      	ldr	r3, [pc, #36]	; (800be88 <__swbuf_r+0xa0>)
 800be64:	429c      	cmp	r4, r3
 800be66:	bf08      	it	eq
 800be68:	68ec      	ldreq	r4, [r5, #12]
 800be6a:	e7ca      	b.n	800be02 <__swbuf_r+0x1a>
 800be6c:	4621      	mov	r1, r4
 800be6e:	4628      	mov	r0, r5
 800be70:	f000 f81e 	bl	800beb0 <__swsetup_r>
 800be74:	2800      	cmp	r0, #0
 800be76:	d0cb      	beq.n	800be10 <__swbuf_r+0x28>
 800be78:	f04f 37ff 	mov.w	r7, #4294967295
 800be7c:	e7ea      	b.n	800be54 <__swbuf_r+0x6c>
 800be7e:	bf00      	nop
 800be80:	08015fbc 	.word	0x08015fbc
 800be84:	08015fdc 	.word	0x08015fdc
 800be88:	08015f9c 	.word	0x08015f9c

0800be8c <_write_r>:
 800be8c:	b538      	push	{r3, r4, r5, lr}
 800be8e:	4d07      	ldr	r5, [pc, #28]	; (800beac <_write_r+0x20>)
 800be90:	4604      	mov	r4, r0
 800be92:	4608      	mov	r0, r1
 800be94:	4611      	mov	r1, r2
 800be96:	2200      	movs	r2, #0
 800be98:	602a      	str	r2, [r5, #0]
 800be9a:	461a      	mov	r2, r3
 800be9c:	f7f7 fb81 	bl	80035a2 <_write>
 800bea0:	1c43      	adds	r3, r0, #1
 800bea2:	d102      	bne.n	800beaa <_write_r+0x1e>
 800bea4:	682b      	ldr	r3, [r5, #0]
 800bea6:	b103      	cbz	r3, 800beaa <_write_r+0x1e>
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	2000adec 	.word	0x2000adec

0800beb0 <__swsetup_r>:
 800beb0:	4b32      	ldr	r3, [pc, #200]	; (800bf7c <__swsetup_r+0xcc>)
 800beb2:	b570      	push	{r4, r5, r6, lr}
 800beb4:	681d      	ldr	r5, [r3, #0]
 800beb6:	4606      	mov	r6, r0
 800beb8:	460c      	mov	r4, r1
 800beba:	b125      	cbz	r5, 800bec6 <__swsetup_r+0x16>
 800bebc:	69ab      	ldr	r3, [r5, #24]
 800bebe:	b913      	cbnz	r3, 800bec6 <__swsetup_r+0x16>
 800bec0:	4628      	mov	r0, r5
 800bec2:	f7ff f971 	bl	800b1a8 <__sinit>
 800bec6:	4b2e      	ldr	r3, [pc, #184]	; (800bf80 <__swsetup_r+0xd0>)
 800bec8:	429c      	cmp	r4, r3
 800beca:	d10f      	bne.n	800beec <__swsetup_r+0x3c>
 800becc:	686c      	ldr	r4, [r5, #4]
 800bece:	89a3      	ldrh	r3, [r4, #12]
 800bed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bed4:	0719      	lsls	r1, r3, #28
 800bed6:	d42c      	bmi.n	800bf32 <__swsetup_r+0x82>
 800bed8:	06dd      	lsls	r5, r3, #27
 800beda:	d411      	bmi.n	800bf00 <__swsetup_r+0x50>
 800bedc:	2309      	movs	r3, #9
 800bede:	6033      	str	r3, [r6, #0]
 800bee0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bee4:	81a3      	strh	r3, [r4, #12]
 800bee6:	f04f 30ff 	mov.w	r0, #4294967295
 800beea:	e03e      	b.n	800bf6a <__swsetup_r+0xba>
 800beec:	4b25      	ldr	r3, [pc, #148]	; (800bf84 <__swsetup_r+0xd4>)
 800beee:	429c      	cmp	r4, r3
 800bef0:	d101      	bne.n	800bef6 <__swsetup_r+0x46>
 800bef2:	68ac      	ldr	r4, [r5, #8]
 800bef4:	e7eb      	b.n	800bece <__swsetup_r+0x1e>
 800bef6:	4b24      	ldr	r3, [pc, #144]	; (800bf88 <__swsetup_r+0xd8>)
 800bef8:	429c      	cmp	r4, r3
 800befa:	bf08      	it	eq
 800befc:	68ec      	ldreq	r4, [r5, #12]
 800befe:	e7e6      	b.n	800bece <__swsetup_r+0x1e>
 800bf00:	0758      	lsls	r0, r3, #29
 800bf02:	d512      	bpl.n	800bf2a <__swsetup_r+0x7a>
 800bf04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf06:	b141      	cbz	r1, 800bf1a <__swsetup_r+0x6a>
 800bf08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf0c:	4299      	cmp	r1, r3
 800bf0e:	d002      	beq.n	800bf16 <__swsetup_r+0x66>
 800bf10:	4630      	mov	r0, r6
 800bf12:	f7ff fa9b 	bl	800b44c <_free_r>
 800bf16:	2300      	movs	r3, #0
 800bf18:	6363      	str	r3, [r4, #52]	; 0x34
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf20:	81a3      	strh	r3, [r4, #12]
 800bf22:	2300      	movs	r3, #0
 800bf24:	6063      	str	r3, [r4, #4]
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	f043 0308 	orr.w	r3, r3, #8
 800bf30:	81a3      	strh	r3, [r4, #12]
 800bf32:	6923      	ldr	r3, [r4, #16]
 800bf34:	b94b      	cbnz	r3, 800bf4a <__swsetup_r+0x9a>
 800bf36:	89a3      	ldrh	r3, [r4, #12]
 800bf38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf40:	d003      	beq.n	800bf4a <__swsetup_r+0x9a>
 800bf42:	4621      	mov	r1, r4
 800bf44:	4630      	mov	r0, r6
 800bf46:	f7ff fa2b 	bl	800b3a0 <__smakebuf_r>
 800bf4a:	89a0      	ldrh	r0, [r4, #12]
 800bf4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf50:	f010 0301 	ands.w	r3, r0, #1
 800bf54:	d00a      	beq.n	800bf6c <__swsetup_r+0xbc>
 800bf56:	2300      	movs	r3, #0
 800bf58:	60a3      	str	r3, [r4, #8]
 800bf5a:	6963      	ldr	r3, [r4, #20]
 800bf5c:	425b      	negs	r3, r3
 800bf5e:	61a3      	str	r3, [r4, #24]
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	b943      	cbnz	r3, 800bf76 <__swsetup_r+0xc6>
 800bf64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf68:	d1ba      	bne.n	800bee0 <__swsetup_r+0x30>
 800bf6a:	bd70      	pop	{r4, r5, r6, pc}
 800bf6c:	0781      	lsls	r1, r0, #30
 800bf6e:	bf58      	it	pl
 800bf70:	6963      	ldrpl	r3, [r4, #20]
 800bf72:	60a3      	str	r3, [r4, #8]
 800bf74:	e7f4      	b.n	800bf60 <__swsetup_r+0xb0>
 800bf76:	2000      	movs	r0, #0
 800bf78:	e7f7      	b.n	800bf6a <__swsetup_r+0xba>
 800bf7a:	bf00      	nop
 800bf7c:	2000003c 	.word	0x2000003c
 800bf80:	08015fbc 	.word	0x08015fbc
 800bf84:	08015fdc 	.word	0x08015fdc
 800bf88:	08015f9c 	.word	0x08015f9c

0800bf8c <abort>:
 800bf8c:	b508      	push	{r3, lr}
 800bf8e:	2006      	movs	r0, #6
 800bf90:	f000 fa2a 	bl	800c3e8 <raise>
 800bf94:	2001      	movs	r0, #1
 800bf96:	f7f7 fadd 	bl	8003554 <_exit>
	...

0800bf9c <_close_r>:
 800bf9c:	b538      	push	{r3, r4, r5, lr}
 800bf9e:	4d06      	ldr	r5, [pc, #24]	; (800bfb8 <_close_r+0x1c>)
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	4608      	mov	r0, r1
 800bfa6:	602b      	str	r3, [r5, #0]
 800bfa8:	f7f7 fb17 	bl	80035da <_close>
 800bfac:	1c43      	adds	r3, r0, #1
 800bfae:	d102      	bne.n	800bfb6 <_close_r+0x1a>
 800bfb0:	682b      	ldr	r3, [r5, #0]
 800bfb2:	b103      	cbz	r3, 800bfb6 <_close_r+0x1a>
 800bfb4:	6023      	str	r3, [r4, #0]
 800bfb6:	bd38      	pop	{r3, r4, r5, pc}
 800bfb8:	2000adec 	.word	0x2000adec

0800bfbc <_fstat_r>:
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	4d07      	ldr	r5, [pc, #28]	; (800bfdc <_fstat_r+0x20>)
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	4608      	mov	r0, r1
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	602b      	str	r3, [r5, #0]
 800bfca:	f7f7 fb12 	bl	80035f2 <_fstat>
 800bfce:	1c43      	adds	r3, r0, #1
 800bfd0:	d102      	bne.n	800bfd8 <_fstat_r+0x1c>
 800bfd2:	682b      	ldr	r3, [r5, #0]
 800bfd4:	b103      	cbz	r3, 800bfd8 <_fstat_r+0x1c>
 800bfd6:	6023      	str	r3, [r4, #0]
 800bfd8:	bd38      	pop	{r3, r4, r5, pc}
 800bfda:	bf00      	nop
 800bfdc:	2000adec 	.word	0x2000adec

0800bfe0 <_isatty_r>:
 800bfe0:	b538      	push	{r3, r4, r5, lr}
 800bfe2:	4d06      	ldr	r5, [pc, #24]	; (800bffc <_isatty_r+0x1c>)
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	4608      	mov	r0, r1
 800bfea:	602b      	str	r3, [r5, #0]
 800bfec:	f7f7 fb11 	bl	8003612 <_isatty>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d102      	bne.n	800bffa <_isatty_r+0x1a>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	b103      	cbz	r3, 800bffa <_isatty_r+0x1a>
 800bff8:	6023      	str	r3, [r4, #0]
 800bffa:	bd38      	pop	{r3, r4, r5, pc}
 800bffc:	2000adec 	.word	0x2000adec

0800c000 <_lseek_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4d07      	ldr	r5, [pc, #28]	; (800c020 <_lseek_r+0x20>)
 800c004:	4604      	mov	r4, r0
 800c006:	4608      	mov	r0, r1
 800c008:	4611      	mov	r1, r2
 800c00a:	2200      	movs	r2, #0
 800c00c:	602a      	str	r2, [r5, #0]
 800c00e:	461a      	mov	r2, r3
 800c010:	f7f7 fb0a 	bl	8003628 <_lseek>
 800c014:	1c43      	adds	r3, r0, #1
 800c016:	d102      	bne.n	800c01e <_lseek_r+0x1e>
 800c018:	682b      	ldr	r3, [r5, #0]
 800c01a:	b103      	cbz	r3, 800c01e <_lseek_r+0x1e>
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	bd38      	pop	{r3, r4, r5, pc}
 800c020:	2000adec 	.word	0x2000adec

0800c024 <memmove>:
 800c024:	4288      	cmp	r0, r1
 800c026:	b510      	push	{r4, lr}
 800c028:	eb01 0402 	add.w	r4, r1, r2
 800c02c:	d902      	bls.n	800c034 <memmove+0x10>
 800c02e:	4284      	cmp	r4, r0
 800c030:	4623      	mov	r3, r4
 800c032:	d807      	bhi.n	800c044 <memmove+0x20>
 800c034:	1e43      	subs	r3, r0, #1
 800c036:	42a1      	cmp	r1, r4
 800c038:	d008      	beq.n	800c04c <memmove+0x28>
 800c03a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c03e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c042:	e7f8      	b.n	800c036 <memmove+0x12>
 800c044:	4402      	add	r2, r0
 800c046:	4601      	mov	r1, r0
 800c048:	428a      	cmp	r2, r1
 800c04a:	d100      	bne.n	800c04e <memmove+0x2a>
 800c04c:	bd10      	pop	{r4, pc}
 800c04e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c056:	e7f7      	b.n	800c048 <memmove+0x24>

0800c058 <__malloc_lock>:
 800c058:	4801      	ldr	r0, [pc, #4]	; (800c060 <__malloc_lock+0x8>)
 800c05a:	f7ff b97a 	b.w	800b352 <__retarget_lock_acquire_recursive>
 800c05e:	bf00      	nop
 800c060:	2000ade4 	.word	0x2000ade4

0800c064 <__malloc_unlock>:
 800c064:	4801      	ldr	r0, [pc, #4]	; (800c06c <__malloc_unlock+0x8>)
 800c066:	f7ff b975 	b.w	800b354 <__retarget_lock_release_recursive>
 800c06a:	bf00      	nop
 800c06c:	2000ade4 	.word	0x2000ade4

0800c070 <_realloc_r>:
 800c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c072:	4607      	mov	r7, r0
 800c074:	4614      	mov	r4, r2
 800c076:	460e      	mov	r6, r1
 800c078:	b921      	cbnz	r1, 800c084 <_realloc_r+0x14>
 800c07a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c07e:	4611      	mov	r1, r2
 800c080:	f7ff ba34 	b.w	800b4ec <_malloc_r>
 800c084:	b922      	cbnz	r2, 800c090 <_realloc_r+0x20>
 800c086:	f7ff f9e1 	bl	800b44c <_free_r>
 800c08a:	4625      	mov	r5, r4
 800c08c:	4628      	mov	r0, r5
 800c08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c090:	f000 f9c6 	bl	800c420 <_malloc_usable_size_r>
 800c094:	42a0      	cmp	r0, r4
 800c096:	d20f      	bcs.n	800c0b8 <_realloc_r+0x48>
 800c098:	4621      	mov	r1, r4
 800c09a:	4638      	mov	r0, r7
 800c09c:	f7ff fa26 	bl	800b4ec <_malloc_r>
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d0f2      	beq.n	800c08c <_realloc_r+0x1c>
 800c0a6:	4631      	mov	r1, r6
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	f7ff f9b9 	bl	800b420 <memcpy>
 800c0ae:	4631      	mov	r1, r6
 800c0b0:	4638      	mov	r0, r7
 800c0b2:	f7ff f9cb 	bl	800b44c <_free_r>
 800c0b6:	e7e9      	b.n	800c08c <_realloc_r+0x1c>
 800c0b8:	4635      	mov	r5, r6
 800c0ba:	e7e7      	b.n	800c08c <_realloc_r+0x1c>

0800c0bc <__ssputs_r>:
 800c0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c0:	688e      	ldr	r6, [r1, #8]
 800c0c2:	429e      	cmp	r6, r3
 800c0c4:	4682      	mov	sl, r0
 800c0c6:	460c      	mov	r4, r1
 800c0c8:	4690      	mov	r8, r2
 800c0ca:	461f      	mov	r7, r3
 800c0cc:	d838      	bhi.n	800c140 <__ssputs_r+0x84>
 800c0ce:	898a      	ldrh	r2, [r1, #12]
 800c0d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0d4:	d032      	beq.n	800c13c <__ssputs_r+0x80>
 800c0d6:	6825      	ldr	r5, [r4, #0]
 800c0d8:	6909      	ldr	r1, [r1, #16]
 800c0da:	eba5 0901 	sub.w	r9, r5, r1
 800c0de:	6965      	ldr	r5, [r4, #20]
 800c0e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	444b      	add	r3, r9
 800c0ec:	106d      	asrs	r5, r5, #1
 800c0ee:	429d      	cmp	r5, r3
 800c0f0:	bf38      	it	cc
 800c0f2:	461d      	movcc	r5, r3
 800c0f4:	0553      	lsls	r3, r2, #21
 800c0f6:	d531      	bpl.n	800c15c <__ssputs_r+0xa0>
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	f7ff f9f7 	bl	800b4ec <_malloc_r>
 800c0fe:	4606      	mov	r6, r0
 800c100:	b950      	cbnz	r0, 800c118 <__ssputs_r+0x5c>
 800c102:	230c      	movs	r3, #12
 800c104:	f8ca 3000 	str.w	r3, [sl]
 800c108:	89a3      	ldrh	r3, [r4, #12]
 800c10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c10e:	81a3      	strh	r3, [r4, #12]
 800c110:	f04f 30ff 	mov.w	r0, #4294967295
 800c114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c118:	6921      	ldr	r1, [r4, #16]
 800c11a:	464a      	mov	r2, r9
 800c11c:	f7ff f980 	bl	800b420 <memcpy>
 800c120:	89a3      	ldrh	r3, [r4, #12]
 800c122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c12a:	81a3      	strh	r3, [r4, #12]
 800c12c:	6126      	str	r6, [r4, #16]
 800c12e:	6165      	str	r5, [r4, #20]
 800c130:	444e      	add	r6, r9
 800c132:	eba5 0509 	sub.w	r5, r5, r9
 800c136:	6026      	str	r6, [r4, #0]
 800c138:	60a5      	str	r5, [r4, #8]
 800c13a:	463e      	mov	r6, r7
 800c13c:	42be      	cmp	r6, r7
 800c13e:	d900      	bls.n	800c142 <__ssputs_r+0x86>
 800c140:	463e      	mov	r6, r7
 800c142:	4632      	mov	r2, r6
 800c144:	6820      	ldr	r0, [r4, #0]
 800c146:	4641      	mov	r1, r8
 800c148:	f7ff ff6c 	bl	800c024 <memmove>
 800c14c:	68a3      	ldr	r3, [r4, #8]
 800c14e:	6822      	ldr	r2, [r4, #0]
 800c150:	1b9b      	subs	r3, r3, r6
 800c152:	4432      	add	r2, r6
 800c154:	60a3      	str	r3, [r4, #8]
 800c156:	6022      	str	r2, [r4, #0]
 800c158:	2000      	movs	r0, #0
 800c15a:	e7db      	b.n	800c114 <__ssputs_r+0x58>
 800c15c:	462a      	mov	r2, r5
 800c15e:	f7ff ff87 	bl	800c070 <_realloc_r>
 800c162:	4606      	mov	r6, r0
 800c164:	2800      	cmp	r0, #0
 800c166:	d1e1      	bne.n	800c12c <__ssputs_r+0x70>
 800c168:	6921      	ldr	r1, [r4, #16]
 800c16a:	4650      	mov	r0, sl
 800c16c:	f7ff f96e 	bl	800b44c <_free_r>
 800c170:	e7c7      	b.n	800c102 <__ssputs_r+0x46>
	...

0800c174 <_svfiprintf_r>:
 800c174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c178:	4698      	mov	r8, r3
 800c17a:	898b      	ldrh	r3, [r1, #12]
 800c17c:	061b      	lsls	r3, r3, #24
 800c17e:	b09d      	sub	sp, #116	; 0x74
 800c180:	4607      	mov	r7, r0
 800c182:	460d      	mov	r5, r1
 800c184:	4614      	mov	r4, r2
 800c186:	d50e      	bpl.n	800c1a6 <_svfiprintf_r+0x32>
 800c188:	690b      	ldr	r3, [r1, #16]
 800c18a:	b963      	cbnz	r3, 800c1a6 <_svfiprintf_r+0x32>
 800c18c:	2140      	movs	r1, #64	; 0x40
 800c18e:	f7ff f9ad 	bl	800b4ec <_malloc_r>
 800c192:	6028      	str	r0, [r5, #0]
 800c194:	6128      	str	r0, [r5, #16]
 800c196:	b920      	cbnz	r0, 800c1a2 <_svfiprintf_r+0x2e>
 800c198:	230c      	movs	r3, #12
 800c19a:	603b      	str	r3, [r7, #0]
 800c19c:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a0:	e0d1      	b.n	800c346 <_svfiprintf_r+0x1d2>
 800c1a2:	2340      	movs	r3, #64	; 0x40
 800c1a4:	616b      	str	r3, [r5, #20]
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c1aa:	2320      	movs	r3, #32
 800c1ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1b4:	2330      	movs	r3, #48	; 0x30
 800c1b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c360 <_svfiprintf_r+0x1ec>
 800c1ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1be:	f04f 0901 	mov.w	r9, #1
 800c1c2:	4623      	mov	r3, r4
 800c1c4:	469a      	mov	sl, r3
 800c1c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1ca:	b10a      	cbz	r2, 800c1d0 <_svfiprintf_r+0x5c>
 800c1cc:	2a25      	cmp	r2, #37	; 0x25
 800c1ce:	d1f9      	bne.n	800c1c4 <_svfiprintf_r+0x50>
 800c1d0:	ebba 0b04 	subs.w	fp, sl, r4
 800c1d4:	d00b      	beq.n	800c1ee <_svfiprintf_r+0x7a>
 800c1d6:	465b      	mov	r3, fp
 800c1d8:	4622      	mov	r2, r4
 800c1da:	4629      	mov	r1, r5
 800c1dc:	4638      	mov	r0, r7
 800c1de:	f7ff ff6d 	bl	800c0bc <__ssputs_r>
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	f000 80aa 	beq.w	800c33c <_svfiprintf_r+0x1c8>
 800c1e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1ea:	445a      	add	r2, fp
 800c1ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c1ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f000 80a2 	beq.w	800c33c <_svfiprintf_r+0x1c8>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c1fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c202:	f10a 0a01 	add.w	sl, sl, #1
 800c206:	9304      	str	r3, [sp, #16]
 800c208:	9307      	str	r3, [sp, #28]
 800c20a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c20e:	931a      	str	r3, [sp, #104]	; 0x68
 800c210:	4654      	mov	r4, sl
 800c212:	2205      	movs	r2, #5
 800c214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c218:	4851      	ldr	r0, [pc, #324]	; (800c360 <_svfiprintf_r+0x1ec>)
 800c21a:	f7f3 ffe1 	bl	80001e0 <memchr>
 800c21e:	9a04      	ldr	r2, [sp, #16]
 800c220:	b9d8      	cbnz	r0, 800c25a <_svfiprintf_r+0xe6>
 800c222:	06d0      	lsls	r0, r2, #27
 800c224:	bf44      	itt	mi
 800c226:	2320      	movmi	r3, #32
 800c228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c22c:	0711      	lsls	r1, r2, #28
 800c22e:	bf44      	itt	mi
 800c230:	232b      	movmi	r3, #43	; 0x2b
 800c232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c236:	f89a 3000 	ldrb.w	r3, [sl]
 800c23a:	2b2a      	cmp	r3, #42	; 0x2a
 800c23c:	d015      	beq.n	800c26a <_svfiprintf_r+0xf6>
 800c23e:	9a07      	ldr	r2, [sp, #28]
 800c240:	4654      	mov	r4, sl
 800c242:	2000      	movs	r0, #0
 800c244:	f04f 0c0a 	mov.w	ip, #10
 800c248:	4621      	mov	r1, r4
 800c24a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c24e:	3b30      	subs	r3, #48	; 0x30
 800c250:	2b09      	cmp	r3, #9
 800c252:	d94e      	bls.n	800c2f2 <_svfiprintf_r+0x17e>
 800c254:	b1b0      	cbz	r0, 800c284 <_svfiprintf_r+0x110>
 800c256:	9207      	str	r2, [sp, #28]
 800c258:	e014      	b.n	800c284 <_svfiprintf_r+0x110>
 800c25a:	eba0 0308 	sub.w	r3, r0, r8
 800c25e:	fa09 f303 	lsl.w	r3, r9, r3
 800c262:	4313      	orrs	r3, r2
 800c264:	9304      	str	r3, [sp, #16]
 800c266:	46a2      	mov	sl, r4
 800c268:	e7d2      	b.n	800c210 <_svfiprintf_r+0x9c>
 800c26a:	9b03      	ldr	r3, [sp, #12]
 800c26c:	1d19      	adds	r1, r3, #4
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	9103      	str	r1, [sp, #12]
 800c272:	2b00      	cmp	r3, #0
 800c274:	bfbb      	ittet	lt
 800c276:	425b      	neglt	r3, r3
 800c278:	f042 0202 	orrlt.w	r2, r2, #2
 800c27c:	9307      	strge	r3, [sp, #28]
 800c27e:	9307      	strlt	r3, [sp, #28]
 800c280:	bfb8      	it	lt
 800c282:	9204      	strlt	r2, [sp, #16]
 800c284:	7823      	ldrb	r3, [r4, #0]
 800c286:	2b2e      	cmp	r3, #46	; 0x2e
 800c288:	d10c      	bne.n	800c2a4 <_svfiprintf_r+0x130>
 800c28a:	7863      	ldrb	r3, [r4, #1]
 800c28c:	2b2a      	cmp	r3, #42	; 0x2a
 800c28e:	d135      	bne.n	800c2fc <_svfiprintf_r+0x188>
 800c290:	9b03      	ldr	r3, [sp, #12]
 800c292:	1d1a      	adds	r2, r3, #4
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	9203      	str	r2, [sp, #12]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	bfb8      	it	lt
 800c29c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2a0:	3402      	adds	r4, #2
 800c2a2:	9305      	str	r3, [sp, #20]
 800c2a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c370 <_svfiprintf_r+0x1fc>
 800c2a8:	7821      	ldrb	r1, [r4, #0]
 800c2aa:	2203      	movs	r2, #3
 800c2ac:	4650      	mov	r0, sl
 800c2ae:	f7f3 ff97 	bl	80001e0 <memchr>
 800c2b2:	b140      	cbz	r0, 800c2c6 <_svfiprintf_r+0x152>
 800c2b4:	2340      	movs	r3, #64	; 0x40
 800c2b6:	eba0 000a 	sub.w	r0, r0, sl
 800c2ba:	fa03 f000 	lsl.w	r0, r3, r0
 800c2be:	9b04      	ldr	r3, [sp, #16]
 800c2c0:	4303      	orrs	r3, r0
 800c2c2:	3401      	adds	r4, #1
 800c2c4:	9304      	str	r3, [sp, #16]
 800c2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ca:	4826      	ldr	r0, [pc, #152]	; (800c364 <_svfiprintf_r+0x1f0>)
 800c2cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2d0:	2206      	movs	r2, #6
 800c2d2:	f7f3 ff85 	bl	80001e0 <memchr>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d038      	beq.n	800c34c <_svfiprintf_r+0x1d8>
 800c2da:	4b23      	ldr	r3, [pc, #140]	; (800c368 <_svfiprintf_r+0x1f4>)
 800c2dc:	bb1b      	cbnz	r3, 800c326 <_svfiprintf_r+0x1b2>
 800c2de:	9b03      	ldr	r3, [sp, #12]
 800c2e0:	3307      	adds	r3, #7
 800c2e2:	f023 0307 	bic.w	r3, r3, #7
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	9303      	str	r3, [sp, #12]
 800c2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2ec:	4433      	add	r3, r6
 800c2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c2f0:	e767      	b.n	800c1c2 <_svfiprintf_r+0x4e>
 800c2f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	2001      	movs	r0, #1
 800c2fa:	e7a5      	b.n	800c248 <_svfiprintf_r+0xd4>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	3401      	adds	r4, #1
 800c300:	9305      	str	r3, [sp, #20]
 800c302:	4619      	mov	r1, r3
 800c304:	f04f 0c0a 	mov.w	ip, #10
 800c308:	4620      	mov	r0, r4
 800c30a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c30e:	3a30      	subs	r2, #48	; 0x30
 800c310:	2a09      	cmp	r2, #9
 800c312:	d903      	bls.n	800c31c <_svfiprintf_r+0x1a8>
 800c314:	2b00      	cmp	r3, #0
 800c316:	d0c5      	beq.n	800c2a4 <_svfiprintf_r+0x130>
 800c318:	9105      	str	r1, [sp, #20]
 800c31a:	e7c3      	b.n	800c2a4 <_svfiprintf_r+0x130>
 800c31c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c320:	4604      	mov	r4, r0
 800c322:	2301      	movs	r3, #1
 800c324:	e7f0      	b.n	800c308 <_svfiprintf_r+0x194>
 800c326:	ab03      	add	r3, sp, #12
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	462a      	mov	r2, r5
 800c32c:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <_svfiprintf_r+0x1f8>)
 800c32e:	a904      	add	r1, sp, #16
 800c330:	4638      	mov	r0, r7
 800c332:	f3af 8000 	nop.w
 800c336:	1c42      	adds	r2, r0, #1
 800c338:	4606      	mov	r6, r0
 800c33a:	d1d6      	bne.n	800c2ea <_svfiprintf_r+0x176>
 800c33c:	89ab      	ldrh	r3, [r5, #12]
 800c33e:	065b      	lsls	r3, r3, #25
 800c340:	f53f af2c 	bmi.w	800c19c <_svfiprintf_r+0x28>
 800c344:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c346:	b01d      	add	sp, #116	; 0x74
 800c348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c34c:	ab03      	add	r3, sp, #12
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	462a      	mov	r2, r5
 800c352:	4b06      	ldr	r3, [pc, #24]	; (800c36c <_svfiprintf_r+0x1f8>)
 800c354:	a904      	add	r1, sp, #16
 800c356:	4638      	mov	r0, r7
 800c358:	f7ff faea 	bl	800b930 <_printf_i>
 800c35c:	e7eb      	b.n	800c336 <_svfiprintf_r+0x1c2>
 800c35e:	bf00      	nop
 800c360:	08016000 	.word	0x08016000
 800c364:	0801600a 	.word	0x0801600a
 800c368:	00000000 	.word	0x00000000
 800c36c:	0800c0bd 	.word	0x0800c0bd
 800c370:	08016006 	.word	0x08016006

0800c374 <_read_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d07      	ldr	r5, [pc, #28]	; (800c394 <_read_r+0x20>)
 800c378:	4604      	mov	r4, r0
 800c37a:	4608      	mov	r0, r1
 800c37c:	4611      	mov	r1, r2
 800c37e:	2200      	movs	r2, #0
 800c380:	602a      	str	r2, [r5, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	f7f7 f8f0 	bl	8003568 <_read>
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	d102      	bne.n	800c392 <_read_r+0x1e>
 800c38c:	682b      	ldr	r3, [r5, #0]
 800c38e:	b103      	cbz	r3, 800c392 <_read_r+0x1e>
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	2000adec 	.word	0x2000adec

0800c398 <_raise_r>:
 800c398:	291f      	cmp	r1, #31
 800c39a:	b538      	push	{r3, r4, r5, lr}
 800c39c:	4604      	mov	r4, r0
 800c39e:	460d      	mov	r5, r1
 800c3a0:	d904      	bls.n	800c3ac <_raise_r+0x14>
 800c3a2:	2316      	movs	r3, #22
 800c3a4:	6003      	str	r3, [r0, #0]
 800c3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3aa:	bd38      	pop	{r3, r4, r5, pc}
 800c3ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3ae:	b112      	cbz	r2, 800c3b6 <_raise_r+0x1e>
 800c3b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3b4:	b94b      	cbnz	r3, 800c3ca <_raise_r+0x32>
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f000 f830 	bl	800c41c <_getpid_r>
 800c3bc:	462a      	mov	r2, r5
 800c3be:	4601      	mov	r1, r0
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3c6:	f000 b817 	b.w	800c3f8 <_kill_r>
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d00a      	beq.n	800c3e4 <_raise_r+0x4c>
 800c3ce:	1c59      	adds	r1, r3, #1
 800c3d0:	d103      	bne.n	800c3da <_raise_r+0x42>
 800c3d2:	2316      	movs	r3, #22
 800c3d4:	6003      	str	r3, [r0, #0]
 800c3d6:	2001      	movs	r0, #1
 800c3d8:	e7e7      	b.n	800c3aa <_raise_r+0x12>
 800c3da:	2400      	movs	r4, #0
 800c3dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	4798      	blx	r3
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	e7e0      	b.n	800c3aa <_raise_r+0x12>

0800c3e8 <raise>:
 800c3e8:	4b02      	ldr	r3, [pc, #8]	; (800c3f4 <raise+0xc>)
 800c3ea:	4601      	mov	r1, r0
 800c3ec:	6818      	ldr	r0, [r3, #0]
 800c3ee:	f7ff bfd3 	b.w	800c398 <_raise_r>
 800c3f2:	bf00      	nop
 800c3f4:	2000003c 	.word	0x2000003c

0800c3f8 <_kill_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	4d07      	ldr	r5, [pc, #28]	; (800c418 <_kill_r+0x20>)
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	4604      	mov	r4, r0
 800c400:	4608      	mov	r0, r1
 800c402:	4611      	mov	r1, r2
 800c404:	602b      	str	r3, [r5, #0]
 800c406:	f7f7 f895 	bl	8003534 <_kill>
 800c40a:	1c43      	adds	r3, r0, #1
 800c40c:	d102      	bne.n	800c414 <_kill_r+0x1c>
 800c40e:	682b      	ldr	r3, [r5, #0]
 800c410:	b103      	cbz	r3, 800c414 <_kill_r+0x1c>
 800c412:	6023      	str	r3, [r4, #0]
 800c414:	bd38      	pop	{r3, r4, r5, pc}
 800c416:	bf00      	nop
 800c418:	2000adec 	.word	0x2000adec

0800c41c <_getpid_r>:
 800c41c:	f7f7 b882 	b.w	8003524 <_getpid>

0800c420 <_malloc_usable_size_r>:
 800c420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c424:	1f18      	subs	r0, r3, #4
 800c426:	2b00      	cmp	r3, #0
 800c428:	bfbc      	itt	lt
 800c42a:	580b      	ldrlt	r3, [r1, r0]
 800c42c:	18c0      	addlt	r0, r0, r3
 800c42e:	4770      	bx	lr

0800c430 <_init>:
 800c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c432:	bf00      	nop
 800c434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c436:	bc08      	pop	{r3}
 800c438:	469e      	mov	lr, r3
 800c43a:	4770      	bx	lr

0800c43c <_fini>:
 800c43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43e:	bf00      	nop
 800c440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c442:	bc08      	pop	{r3}
 800c444:	469e      	mov	lr, r3
 800c446:	4770      	bx	lr

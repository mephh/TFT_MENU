
LCD_MENU_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006678  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6a8  0800c6a8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6a8  0800c6a8  0001c6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6b0  0800c6b0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6b0  0800c6b0  0001c6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6b4  0800c6b4  0001c6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c6b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a2f0  20000078  0800c730  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  2000a368  0800c730  0002a368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173ee  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003682  00000000  00000000  00037496  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  0003ab18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  0003bee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a06b  00000000  00000000  0003d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012bcc  00000000  00000000  00057143  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a79e  00000000  00000000  00069d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001044ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c0  00000000  00000000  00104528  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006018 	.word	0x08006018

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006018 	.word	0x08006018

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	463b      	mov	r3, r7
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000592:	4b52      	ldr	r3, [pc, #328]	; (80006dc <MX_ADC1_Init+0x15c>)
 8000594:	4a52      	ldr	r2, [pc, #328]	; (80006e0 <MX_ADC1_Init+0x160>)
 8000596:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000598:	4b50      	ldr	r3, [pc, #320]	; (80006dc <MX_ADC1_Init+0x15c>)
 800059a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800059e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a0:	4b4e      	ldr	r3, [pc, #312]	; (80006dc <MX_ADC1_Init+0x15c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005a6:	4b4d      	ldr	r3, [pc, #308]	; (80006dc <MX_ADC1_Init+0x15c>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ac:	4b4b      	ldr	r3, [pc, #300]	; (80006dc <MX_ADC1_Init+0x15c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b2:	4b4a      	ldr	r3, [pc, #296]	; (80006dc <MX_ADC1_Init+0x15c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ba:	4b48      	ldr	r3, [pc, #288]	; (80006dc <MX_ADC1_Init+0x15c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c0:	4b46      	ldr	r3, [pc, #280]	; (80006dc <MX_ADC1_Init+0x15c>)
 80005c2:	4a48      	ldr	r2, [pc, #288]	; (80006e4 <MX_ADC1_Init+0x164>)
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c6:	4b45      	ldr	r3, [pc, #276]	; (80006dc <MX_ADC1_Init+0x15c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80005cc:	4b43      	ldr	r3, [pc, #268]	; (80006dc <MX_ADC1_Init+0x15c>)
 80005ce:	2208      	movs	r2, #8
 80005d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005d2:	4b42      	ldr	r3, [pc, #264]	; (80006dc <MX_ADC1_Init+0x15c>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005da:	4b40      	ldr	r3, [pc, #256]	; (80006dc <MX_ADC1_Init+0x15c>)
 80005dc:	2201      	movs	r2, #1
 80005de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e0:	483e      	ldr	r0, [pc, #248]	; (80006dc <MX_ADC1_Init+0x15c>)
 80005e2:	f001 f9e3 	bl	80019ac <HAL_ADC_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005ec:	f000 fca2 	bl	8000f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005f8:	2307      	movs	r3, #7
 80005fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	4619      	mov	r1, r3
 8000600:	4836      	ldr	r0, [pc, #216]	; (80006dc <MX_ADC1_Init+0x15c>)
 8000602:	f001 fb09 	bl	8001c18 <HAL_ADC_ConfigChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800060c:	f000 fc92 	bl	8000f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000610:	2302      	movs	r3, #2
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	482f      	ldr	r0, [pc, #188]	; (80006dc <MX_ADC1_Init+0x15c>)
 800061e:	f001 fafb 	bl	8001c18 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000628:	f000 fc84 	bl	8000f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800062c:	2303      	movs	r3, #3
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000630:	2303      	movs	r3, #3
 8000632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	4619      	mov	r1, r3
 8000638:	4828      	ldr	r0, [pc, #160]	; (80006dc <MX_ADC1_Init+0x15c>)
 800063a:	f001 faed 	bl	8001c18 <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000644:	f000 fc76 	bl	8000f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000648:	2304      	movs	r3, #4
 800064a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	4821      	ldr	r0, [pc, #132]	; (80006dc <MX_ADC1_Init+0x15c>)
 8000656:	f001 fadf 	bl	8001c18 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000660:	f000 fc68 	bl	8000f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000664:	2306      	movs	r3, #6
 8000666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000668:	2305      	movs	r3, #5
 800066a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	481a      	ldr	r0, [pc, #104]	; (80006dc <MX_ADC1_Init+0x15c>)
 8000672:	f001 fad1 	bl	8001c18 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800067c:	f000 fc5a 	bl	8000f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000680:	2307      	movs	r3, #7
 8000682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000684:	2306      	movs	r3, #6
 8000686:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4813      	ldr	r0, [pc, #76]	; (80006dc <MX_ADC1_Init+0x15c>)
 800068e:	f001 fac3 	bl	8001c18 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000698:	f000 fc4c 	bl	8000f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800069c:	2308      	movs	r3, #8
 800069e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <MX_ADC1_Init+0x15c>)
 80006aa:	f001 fab5 	bl	8001c18 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80006b4:	f000 fc3e 	bl	8000f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006b8:	2309      	movs	r3, #9
 80006ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_ADC1_Init+0x15c>)
 80006c6:	f001 faa7 	bl	8001c18 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80006d0:	f000 fc30 	bl	8000f34 <Error_Handler>
  }

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000a0a8 	.word	0x2000a0a8
 80006e0:	40012000 	.word	0x40012000
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a3c      	ldr	r2, [pc, #240]	; (80007f8 <HAL_ADC_MspInit+0x110>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d171      	bne.n	80007ee <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <HAL_ADC_MspInit+0x114>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	4a3a      	ldr	r2, [pc, #232]	; (80007fc <HAL_ADC_MspInit+0x114>)
 8000714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000718:	6453      	str	r3, [r2, #68]	; 0x44
 800071a:	4b38      	ldr	r3, [pc, #224]	; (80007fc <HAL_ADC_MspInit+0x114>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b34      	ldr	r3, [pc, #208]	; (80007fc <HAL_ADC_MspInit+0x114>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a33      	ldr	r2, [pc, #204]	; (80007fc <HAL_ADC_MspInit+0x114>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b31      	ldr	r3, [pc, #196]	; (80007fc <HAL_ADC_MspInit+0x114>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <HAL_ADC_MspInit+0x114>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a2c      	ldr	r2, [pc, #176]	; (80007fc <HAL_ADC_MspInit+0x114>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <HAL_ADC_MspInit+0x114>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800075e:	23de      	movs	r3, #222	; 0xde
 8000760:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000762:	2303      	movs	r3, #3
 8000764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4823      	ldr	r0, [pc, #140]	; (8000800 <HAL_ADC_MspInit+0x118>)
 8000772:	f002 f971 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000776:	2303      	movs	r3, #3
 8000778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800077a:	2303      	movs	r3, #3
 800077c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	481e      	ldr	r0, [pc, #120]	; (8000804 <HAL_ADC_MspInit+0x11c>)
 800078a:	f002 f965 	bl	8002a58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <HAL_ADC_MspInit+0x120>)
 8000790:	4a1e      	ldr	r2, [pc, #120]	; (800080c <HAL_ADC_MspInit+0x124>)
 8000792:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <HAL_ADC_MspInit+0x120>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <HAL_ADC_MspInit+0x120>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <HAL_ADC_MspInit+0x120>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <HAL_ADC_MspInit+0x120>)
 80007a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <HAL_ADC_MspInit+0x120>)
 80007b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <HAL_ADC_MspInit+0x120>)
 80007b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_ADC_MspInit+0x120>)
 80007c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <HAL_ADC_MspInit+0x120>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <HAL_ADC_MspInit+0x120>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <HAL_ADC_MspInit+0x120>)
 80007d4:	f001 fdd2 	bl	800237c <HAL_DMA_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80007de:	f000 fba9 	bl	8000f34 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_ADC_MspInit+0x120>)
 80007e6:	639a      	str	r2, [r3, #56]	; 0x38
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_ADC_MspInit+0x120>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	; 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40012000 	.word	0x40012000
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020000 	.word	0x40020000
 8000804:	40020400 	.word	0x40020400
 8000808:	2000a0f0 	.word	0x2000a0f0
 800080c:	40026410 	.word	0x40026410

08000810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_DMA_Init+0x3c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <MX_DMA_Init+0x3c>)
 8000820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_DMA_Init+0x3c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	203b      	movs	r0, #59	; 0x3b
 8000838:	f001 fd69 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800083c:	203b      	movs	r0, #59	; 0x3b
 800083e:	f001 fd82 	bl	8002346 <HAL_NVIC_EnableIRQ>

}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <MX_GPIO_Init+0x114>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a3d      	ldr	r2, [pc, #244]	; (8000964 <MX_GPIO_Init+0x114>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <MX_GPIO_Init+0x114>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b37      	ldr	r3, [pc, #220]	; (8000964 <MX_GPIO_Init+0x114>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a36      	ldr	r2, [pc, #216]	; (8000964 <MX_GPIO_Init+0x114>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b34      	ldr	r3, [pc, #208]	; (8000964 <MX_GPIO_Init+0x114>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <MX_GPIO_Init+0x114>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <MX_GPIO_Init+0x114>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <MX_GPIO_Init+0x114>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80008c0:	4829      	ldr	r0, [pc, #164]	; (8000968 <MX_GPIO_Init+0x118>)
 80008c2:	f002 fa63 	bl	8002d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	4828      	ldr	r0, [pc, #160]	; (800096c <MX_GPIO_Init+0x11c>)
 80008cc:	f002 fa5e 	bl	8002d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WKUP_Pin;
 80008d0:	2301      	movs	r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <MX_GPIO_Init+0x120>)
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d8:	2301      	movs	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	4821      	ldr	r0, [pc, #132]	; (8000968 <MX_GPIO_Init+0x118>)
 80008e4:	f002 f8b8 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80008e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_GPIO_Init+0x124>)
 80008f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	481b      	ldr	r0, [pc, #108]	; (800096c <MX_GPIO_Init+0x11c>)
 80008fe:	f002 f8ab 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 8000902:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	4619      	mov	r1, r3
 800091a:	4813      	ldr	r0, [pc, #76]	; (8000968 <MX_GPIO_Init+0x118>)
 800091c:	f002 f89c 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_GPIO_Init+0x11c>)
 8000938:	f002 f88e 	bl	8002a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2102      	movs	r1, #2
 8000940:	2006      	movs	r0, #6
 8000942:	f001 fce4 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000946:	2006      	movs	r0, #6
 8000948:	f001 fcfd 	bl	8002346 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2028      	movs	r0, #40	; 0x28
 8000952:	f001 fcdc 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000956:	2028      	movs	r0, #40	; 0x28
 8000958:	f001 fcf5 	bl	8002346 <HAL_NVIC_EnableIRQ>

}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000
 800096c:	40020400 	.word	0x40020400
 8000970:	10210000 	.word	0x10210000
 8000974:	10110000 	.word	0x10110000

08000978 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_I2C1_Init+0x50>)
 800097e:	4a13      	ldr	r2, [pc, #76]	; (80009cc <MX_I2C1_Init+0x54>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_I2C1_Init+0x50>)
 8000984:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_I2C1_Init+0x58>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_I2C1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_I2C1_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_I2C1_Init+0x50>)
 8000996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800099a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_I2C1_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_I2C1_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_I2C1_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_I2C1_Init+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_I2C1_Init+0x50>)
 80009b6:	f002 fa1b 	bl	8002df0 <HAL_I2C_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009c0:	f000 fab8 	bl	8000f34 <Error_Handler>
  }

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2000a150 	.word	0x2000a150
 80009cc:	40005400 	.word	0x40005400
 80009d0:	000186a0 	.word	0x000186a0

080009d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <HAL_I2C_MspInit+0x84>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d12c      	bne.n	8000a50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a12:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a18:	2312      	movs	r3, #18
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a24:	2304      	movs	r3, #4
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <HAL_I2C_MspInit+0x8c>)
 8000a30:	f002 f812 	bl	8002a58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020400 	.word	0x40020400

08000a64 <lcd_cmd>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


static void lcd_cmd(uint8_t cmd) //send any command to st7735
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a74:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <lcd_cmd+0x40>)
 8000a76:	f002 f989 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <lcd_cmd+0x44>)
 8000a80:	f002 f984 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000a84:	1df9      	adds	r1, r7, #7
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <lcd_cmd+0x48>)
 8000a8e:	f003 f946 	bl	8003d1e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2140      	movs	r1, #64	; 0x40
 8000a96:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <lcd_cmd+0x44>)
 8000a98:	f002 f978 	bl	8002d8c <HAL_GPIO_WritePin>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	2000a268 	.word	0x2000a268

08000ab0 <lcd_data>:

static void lcd_data(uint8_t data)//send data(value for command) to st7735, spi always uses 8bit data
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac0:	480b      	ldr	r0, [pc, #44]	; (8000af0 <lcd_data+0x40>)
 8000ac2:	f002 f963 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	480a      	ldr	r0, [pc, #40]	; (8000af4 <lcd_data+0x44>)
 8000acc:	f002 f95e 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000ad0:	1df9      	adds	r1, r7, #7
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <lcd_data+0x48>)
 8000ada:	f003 f920 	bl	8003d1e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2140      	movs	r1, #64	; 0x40
 8000ae2:	4804      	ldr	r0, [pc, #16]	; (8000af4 <lcd_data+0x44>)
 8000ae4:	f002 f952 	bl	8002d8c <HAL_GPIO_WritePin>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40020000 	.word	0x40020000
 8000af4:	40020400 	.word	0x40020400
 8000af8:	2000a268 	.word	0x2000a268

08000afc <lcd_data16>:

static void lcd_data16(uint16_t value)//function that allows to send 16bit data as 2x 8bit
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ffce 	bl	8000ab0 <lcd_data>
	lcd_data(value);
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ffc9 	bl	8000ab0 <lcd_data>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height) {
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);	//command to set window columns
 8000b34:	202a      	movs	r0, #42	; 0x2a
 8000b36:	f7ff ff95 	bl	8000a64 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);	//start col
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ffdc 	bl	8000afc <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);	//end col
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4413      	add	r3, r2
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	3b01      	subs	r3, #1
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ffd1 	bl	8000afc <lcd_data16>

	lcd_cmd(ST7735S_RASET);	//command to set window rows
 8000b5a:	202b      	movs	r0, #43	; 0x2b
 8000b5c:	f7ff ff82 	bl	8000a64 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);	//start row
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ffc9 	bl	8000afc <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height - 1);	//end row
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	3b01      	subs	r3, #1
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ffbe 	bl	8000afc <lcd_data16>
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <lcd_send>:

static void lcd_send(uint16_t value) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) { //checks if value is a command (9th bit is 1) or data (9th bit is 0)
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d005      	beq.n	8000ba8 <lcd_send+0x20>
		lcd_cmd(value);
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff5f 	bl	8000a64 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8000ba6:	e004      	b.n	8000bb2 <lcd_send+0x2a>
		lcd_data(value);
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff7f 	bl	8000ab0 <lcd_data>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <lcd_init>:
		0x22, 0x1f, 0x1b, 0x23, 0x37, 0x00, 0x07, 0x02, 0x10, CMD(
				ST7735S_GAMCTRN1), 0x0f, 0x1b, 0x0f, 0x17, 0x33, 0x2c, 0x29,
		0x2e, 0x30, 0x30, 0x39, 0x3f, 0x00, 0x07, 0x03, 0x10, CMD(0xf0), 0x01,
		CMD(0xf6), 0x00, CMD(ST7735S_COLMOD), 0x05, CMD(ST7735S_MADCTL), 0x00, };

void lcd_init(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	int i;

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc8:	4817      	ldr	r0, [pc, #92]	; (8000c28 <lcd_init+0x6c>)
 8000bca:	f002 f8df 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000bce:	2064      	movs	r0, #100	; 0x64
 8000bd0:	f000 feca 	bl	8001968 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bda:	4813      	ldr	r0, [pc, #76]	; (8000c28 <lcd_init+0x6c>)
 8000bdc:	f002 f8d6 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000be0:	2064      	movs	r0, #100	; 0x64
 8000be2:	f000 fec1 	bl	8001968 <HAL_Delay>

	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	e009      	b.n	8000c00 <lcd_init+0x44>
		lcd_send(init_table[i]);
 8000bec:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <lcd_init+0x70>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffc7 	bl	8000b88 <lcd_send>
	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b4b      	cmp	r3, #75	; 0x4b
 8000c04:	d9f2      	bls.n	8000bec <lcd_init+0x30>
	}

	HAL_Delay(200);
 8000c06:	20c8      	movs	r0, #200	; 0xc8
 8000c08:	f000 feae 	bl	8001968 <HAL_Delay>

	lcd_cmd(ST7735S_SLPOUT);
 8000c0c:	2011      	movs	r0, #17
 8000c0e:	f7ff ff29 	bl	8000a64 <lcd_cmd>
	HAL_Delay(120);
 8000c12:	2078      	movs	r0, #120	; 0x78
 8000c14:	f000 fea8 	bl	8001968 <HAL_Delay>

	lcd_cmd(ST7735S_DISPON);
 8000c18:	2029      	movs	r0, #41	; 0x29
 8000c1a:	f7ff ff23 	bl	8000a64 <lcd_cmd>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	0800609c 	.word	0x0800609c

08000c30 <lcd_put_pixel>:


void lcd_put_pixel(int x, int y, uint16_t color) {
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	01da      	lsls	r2, r3, #7
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4413      	add	r3, r2
 8000c46:	4905      	ldr	r1, [pc, #20]	; (8000c5c <lcd_put_pixel+0x2c>)
 8000c48:	88fa      	ldrh	r2, [r7, #6]
 8000c4a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000094 	.word	0x20000094

08000c60 <lcd_copy>:


void lcd_copy(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000c64:	23a0      	movs	r3, #160	; 0xa0
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff ff5b 	bl	8000b26 <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 8000c70:	202c      	movs	r0, #44	; 0x2c
 8000c72:	f7ff fef7 	bl	8000a64 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <lcd_copy+0x3c>)
 8000c7e:	f002 f885 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2140      	movs	r1, #64	; 0x40
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <lcd_copy+0x40>)
 8000c88:	f002 f880 	bl	8002d8c <HAL_GPIO_WritePin>
//	HAL_SPI_Transmit(&hspi2, (uint8_t *)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)frame_buffer, sizeof(frame_buffer));
 8000c8c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000c90:	4904      	ldr	r1, [pc, #16]	; (8000ca4 <lcd_copy+0x44>)
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <lcd_copy+0x48>)
 8000c94:	f003 f978 	bl	8003f88 <HAL_SPI_Transmit_DMA>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	20000094 	.word	0x20000094
 8000ca8:	2000a268 	.word	0x2000a268

08000cac <lcd_transfer_done>:


void lcd_transfer_done(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2140      	movs	r1, #64	; 0x40
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <lcd_transfer_done+0x14>)
 8000cb6:	f002 f869 	bl	8002d8c <HAL_GPIO_WritePin>
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40020400 	.word	0x40020400

08000cc4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cc8:	f000 fddc 	bl	8001884 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ccc:	f000 f860 	bl	8000d90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cd0:	f7ff fdbe 	bl	8000850 <MX_GPIO_Init>
	MX_DMA_Init();
 8000cd4:	f7ff fd9c 	bl	8000810 <MX_DMA_Init>
	MX_SPI1_Init();
 8000cd8:	f000 fafe 	bl	80012d8 <MX_SPI1_Init>
	MX_ADC1_Init();
 8000cdc:	f7ff fc50 	bl	8000580 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000ce0:	f7ff fe4a 	bl	8000978 <MX_I2C1_Init>
	MX_RTC_Init();
 8000ce4:	f000 fabc 	bl	8001260 <MX_RTC_Init>
	MX_SPI2_Init();
 8000ce8:	f000 fb2c 	bl	8001344 <MX_SPI2_Init>
	MX_TIM2_Init();
 8000cec:	f000 fce6 	bl	80016bc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensor_data, sizeof(sensor_data) / sizeof(int16_t));
 8000cf0:	2208      	movs	r2, #8
 8000cf2:	4921      	ldr	r1, [pc, #132]	; (8000d78 <main+0xb4>)
 8000cf4:	4821      	ldr	r0, [pc, #132]	; (8000d7c <main+0xb8>)
 8000cf6:	f000 fe9d 	bl	8001a34 <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000cfa:	213c      	movs	r1, #60	; 0x3c
 8000cfc:	4820      	ldr	r0, [pc, #128]	; (8000d80 <main+0xbc>)
 8000cfe:	f003 fbc5 	bl	800448c <HAL_TIM_Encoder_Start>
	lcd_init();
 8000d02:	f7ff ff5b 	bl	8000bbc <lcd_init>
//	show_main_menu(5, rgb565(255, 0, 0));
	show_sensor_window();
 8000d06:	f000 f9bf 	bl	8001088 <show_sensor_window>
	lcd_copy();
 8000d0a:	f7ff ffa9 	bl	8000c60 <lcd_copy>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (activeScreen == 0) {
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <main+0xc0>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d106      	bne.n	8000d26 <main+0x62>
			show_sensor_data(sensor_data);
 8000d18:	4817      	ldr	r0, [pc, #92]	; (8000d78 <main+0xb4>)
 8000d1a:	f000 fa05 	bl	8001128 <show_sensor_data>
//			snprintf(tim_data, 10, "Tim:%u", htim2.Instance ->CNT);
//			hagl_put_text(tim_data, 80, 50, rgb565(65, 95, 175), font6x9);
			HAL_Delay(1000);
 8000d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d22:	f000 fe21 	bl	8001968 <HAL_Delay>
		}
		if (activeScreen == 1) {
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <main+0xc0>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d1ee      	bne.n	8000d0e <main+0x4a>
			//pozostaje problem przejscia przez 0
			menuMaxIndex = 5;
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <main+0xc4>)
 8000d32:	2205      	movs	r2, #5
 8000d34:	801a      	strh	r2, [r3, #0]
			menuIndex = (htim2.Instance->CNT / 2) % menuMaxIndex;
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <main+0xbc>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3c:	085b      	lsrs	r3, r3, #1
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <main+0xc4>)
 8000d40:	8812      	ldrh	r2, [r2, #0]
 8000d42:	b212      	sxth	r2, r2
 8000d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d48:	fb02 f201 	mul.w	r2, r2, r1
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	b21a      	sxth	r2, r3
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <main+0xc8>)
 8000d52:	801a      	strh	r2, [r3, #0]
//			snprintf(menu_pos, 10, "Tim:%d", (htim2.Instance->CNT / 2) % menuMaxIndex );
//			hagl_put_text(menu_pos, 80, 50, rgb565(65, 95, 175), font6x9);
//			if (lastMenuPos != menuIndex) deselect_item(lastMenuPos);
//			select_item(menuIndex);
//			lcd_copy();
			select_item(menuIndex);
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <main+0xc8>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fa2e 	bl	80011bc <select_item>
			lcd_copy();
 8000d60:	f7ff ff7e 	bl	8000c60 <lcd_copy>
			HAL_Delay(50);
 8000d64:	2032      	movs	r0, #50	; 0x32
 8000d66:	f000 fdff 	bl	8001968 <HAL_Delay>
			deselect_item(menuIndex);
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <main+0xc8>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fa4c 	bl	800120e <deselect_item>
		if (activeScreen == 0) {
 8000d76:	e7ca      	b.n	8000d0e <main+0x4a>
 8000d78:	2000a1a4 	.word	0x2000a1a4
 8000d7c:	2000a0a8 	.word	0x2000a0a8
 8000d80:	2000a320 	.word	0x2000a320
 8000d84:	2000a098 	.word	0x2000a098
 8000d88:	2000a096 	.word	0x2000a096
 8000d8c:	2000a094 	.word	0x2000a094

08000d90 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b098      	sub	sp, #96	; 0x60
 8000d94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d9a:	2230      	movs	r2, #48	; 0x30
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f004 fd21 	bl	80057e6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <SystemClock_Config+0x100>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	4a30      	ldr	r2, [pc, #192]	; (8000e90 <SystemClock_Config+0x100>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd4:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <SystemClock_Config+0x100>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000de0:	2300      	movs	r3, #0
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <SystemClock_Config+0x104>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dec:	4a29      	ldr	r2, [pc, #164]	; (8000e94 <SystemClock_Config+0x104>)
 8000dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <SystemClock_Config+0x104>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000e00:	230a      	movs	r3, #10
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e14:	2300      	movs	r3, #0
 8000e16:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 84;
 8000e1c:	2354      	movs	r3, #84	; 0x54
 8000e1e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e24:	2304      	movs	r3, #4
 8000e26:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f002 f917 	bl	8003060 <HAL_RCC_OscConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xac>
		Error_Handler();
 8000e38:	f000 f87c 	bl	8000f34 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e40:	2302      	movs	r3, #2
 8000e42:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	2102      	movs	r1, #2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 fb71 	bl	8003540 <HAL_RCC_ClockConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0xd8>
		Error_Handler();
 8000e64:	f000 f866 	bl	8000f34 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e70:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 fd1a 	bl	80038b0 <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0xf6>
		Error_Handler();
 8000e82:	f000 f857 	bl	8000f34 <Error_Handler>
	}
}
 8000e86:	bf00      	nop
 8000e88:	3760      	adds	r7, #96	; 0x60
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40007000 	.word	0x40007000

08000e98 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_SPI_TxCpltCallback+0x1c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d101      	bne.n	8000eac <HAL_SPI_TxCpltCallback+0x14>
		lcd_transfer_done();
 8000ea8:	f7ff ff00 	bl	8000cac <lcd_transfer_done>
	}
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	2000a268 	.word	0x2000a268

08000eb8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENC_BTN_Pin) {
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ec8:	d127      	bne.n	8000f1a <HAL_GPIO_EXTI_Callback+0x62>
		while (HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)
 8000eca:	bf00      	nop
 8000ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed0:	4814      	ldr	r0, [pc, #80]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000ed2:	f001 ff43 	bl	8002d5c <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0f7      	beq.n	8000ecc <HAL_GPIO_EXTI_Callback+0x14>
				== GPIO_PIN_RESET)
			;
		if (activeScreen == 0) {
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d105      	bne.n	8000ef2 <HAL_GPIO_EXTI_Callback+0x3a>
			show_menu_window();
 8000ee6:	f000 f829 	bl	8000f3c <show_menu_window>
			activeScreen = 1;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x70>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
				show_sensor_window();
				activeScreen = 0;
			}
		}
	}
}
 8000ef0:	e013      	b.n	8000f1a <HAL_GPIO_EXTI_Callback+0x62>
		} else if (activeScreen == 1) {
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d10e      	bne.n	8000f1a <HAL_GPIO_EXTI_Callback+0x62>
			if (menuIndex == menuMaxIndex - 1) {
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x74>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x78>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d104      	bne.n	8000f1a <HAL_GPIO_EXTI_Callback+0x62>
				show_sensor_window();
 8000f10:	f000 f8ba 	bl	8001088 <show_sensor_window>
				activeScreen = 0;
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x70>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40020400 	.word	0x40020400
 8000f28:	2000a098 	.word	0x2000a098
 8000f2c:	2000a094 	.word	0x2000a094
 8000f30:	2000a096 	.word	0x2000a096

08000f34 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f3a:	e7fe      	b.n	8000f3a <Error_Handler+0x6>

08000f3c <show_menu_window>:
#include "font6x9.h"
#include "font5x7.h"

char text_to_parse[16];

void show_menu_window() {
 8000f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af02      	add	r7, sp, #8
	hagl_clear_screen();
 8000f44:	f004 fa24 	bl	8005390 <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	e028      	b.n	8000fa0 <show_menu_window+0x64>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	b21d      	sxth	r5, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	b21e      	sxth	r6, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	fa0f f883 	sxth.w	r8, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	fa0f f983 	sxth.w	r9, r3
				5 - i, rgb565(255, 0, 0));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	f1c3 0305 	rsb	r3, r3, #5
 8000f7a:	b29b      	uxth	r3, r3
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i,
 8000f7c:	b21c      	sxth	r4, r3
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	20ff      	movs	r0, #255	; 0xff
 8000f84:	f004 fbc8 	bl	8005718 <rgb565>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	9400      	str	r4, [sp, #0]
 8000f8e:	464b      	mov	r3, r9
 8000f90:	4642      	mov	r2, r8
 8000f92:	4631      	mov	r1, r6
 8000f94:	4628      	mov	r0, r5
 8000f96:	f004 fa25 	bl	80053e4 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	ddd3      	ble.n	8000f4e <show_menu_window+0x12>
	}
	hagl_put_text("USTAWIENIA", 10, 10, rgb565(255, 0, 0), font6x9);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	20ff      	movs	r0, #255	; 0xff
 8000fac:	f004 fbb4 	bl	8005718 <rgb565>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <show_menu_window+0x12c>)
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	220a      	movs	r2, #10
 8000fbc:	210a      	movs	r1, #10
 8000fbe:	482b      	ldr	r0, [pc, #172]	; (800106c <show_menu_window+0x130>)
 8000fc0:	f004 f960 	bl	8005284 <hagl_put_text>
	hagl_put_text("Ilosc kanalow:", 10, 30, rgb565(0, 102, 204), font5x7);
 8000fc4:	22cc      	movs	r2, #204	; 0xcc
 8000fc6:	2166      	movs	r1, #102	; 0x66
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f004 fba5 	bl	8005718 <rgb565>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b27      	ldr	r3, [pc, #156]	; (8001070 <show_menu_window+0x134>)
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	221e      	movs	r2, #30
 8000fda:	210a      	movs	r1, #10
 8000fdc:	4825      	ldr	r0, [pc, #148]	; (8001074 <show_menu_window+0x138>)
 8000fde:	f004 f951 	bl	8005284 <hagl_put_text>
	hagl_put_text("Oversampling:", 10, 50, rgb565(0, 102, 204), font5x7);
 8000fe2:	22cc      	movs	r2, #204	; 0xcc
 8000fe4:	2166      	movs	r1, #102	; 0x66
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f004 fb96 	bl	8005718 <rgb565>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <show_menu_window+0x134>)
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	2232      	movs	r2, #50	; 0x32
 8000ff8:	210a      	movs	r1, #10
 8000ffa:	481f      	ldr	r0, [pc, #124]	; (8001078 <show_menu_window+0x13c>)
 8000ffc:	f004 f942 	bl	8005284 <hagl_put_text>
	hagl_put_text("Kalibracja", 10, 70, rgb565(0, 102, 204), font5x7);
 8001000:	22cc      	movs	r2, #204	; 0xcc
 8001002:	2166      	movs	r1, #102	; 0x66
 8001004:	2000      	movs	r0, #0
 8001006:	f004 fb87 	bl	8005718 <rgb565>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <show_menu_window+0x134>)
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	4613      	mov	r3, r2
 8001014:	2246      	movs	r2, #70	; 0x46
 8001016:	210a      	movs	r1, #10
 8001018:	4818      	ldr	r0, [pc, #96]	; (800107c <show_menu_window+0x140>)
 800101a:	f004 f933 	bl	8005284 <hagl_put_text>
	hagl_put_text("Inne", 10, 90, rgb565(0, 102, 204), font5x7);
 800101e:	22cc      	movs	r2, #204	; 0xcc
 8001020:	2166      	movs	r1, #102	; 0x66
 8001022:	2000      	movs	r0, #0
 8001024:	f004 fb78 	bl	8005718 <rgb565>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <show_menu_window+0x134>)
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4613      	mov	r3, r2
 8001032:	225a      	movs	r2, #90	; 0x5a
 8001034:	210a      	movs	r1, #10
 8001036:	4812      	ldr	r0, [pc, #72]	; (8001080 <show_menu_window+0x144>)
 8001038:	f004 f924 	bl	8005284 <hagl_put_text>
	hagl_put_text("Powrot", 10, 110, rgb565(102, 255, 102), font5x7);
 800103c:	2266      	movs	r2, #102	; 0x66
 800103e:	21ff      	movs	r1, #255	; 0xff
 8001040:	2066      	movs	r0, #102	; 0x66
 8001042:	f004 fb69 	bl	8005718 <rgb565>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <show_menu_window+0x134>)
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	4613      	mov	r3, r2
 8001050:	226e      	movs	r2, #110	; 0x6e
 8001052:	210a      	movs	r1, #10
 8001054:	480b      	ldr	r0, [pc, #44]	; (8001084 <show_menu_window+0x148>)
 8001056:	f004 f915 	bl	8005284 <hagl_put_text>
	lcd_copy();
 800105a:	f7ff fe01 	bl	8000c60 <lcd_copy>
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001068:	08006134 	.word	0x08006134
 800106c:	08006030 	.word	0x08006030
 8001070:	080090ec 	.word	0x080090ec
 8001074:	0800603c 	.word	0x0800603c
 8001078:	0800604c 	.word	0x0800604c
 800107c:	0800605c 	.word	0x0800605c
 8001080:	08006068 	.word	0x08006068
 8001084:	08006070 	.word	0x08006070

08001088 <show_sensor_window>:


void show_sensor_window() {
 8001088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800108c:	b085      	sub	sp, #20
 800108e:	af02      	add	r7, sp, #8
	hagl_clear_screen();
 8001090:	f004 f97e 	bl	8005390 <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	e028      	b.n	80010ec <show_sensor_window+0x64>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	b21d      	sxth	r5, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	b21e      	sxth	r6, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	fa0f f883 	sxth.w	r8, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	fa0f f983 	sxth.w	r9, r3
				5 - i, rgb565(0, 51, 102));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f1c3 0305 	rsb	r3, r3, #5
 80010c6:	b29b      	uxth	r3, r3
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i,
 80010c8:	b21c      	sxth	r4, r3
 80010ca:	2266      	movs	r2, #102	; 0x66
 80010cc:	2133      	movs	r1, #51	; 0x33
 80010ce:	2000      	movs	r0, #0
 80010d0:	f004 fb22 	bl	8005718 <rgb565>
 80010d4:	4603      	mov	r3, r0
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	9400      	str	r4, [sp, #0]
 80010da:	464b      	mov	r3, r9
 80010dc:	4642      	mov	r2, r8
 80010de:	4631      	mov	r1, r6
 80010e0:	4628      	mov	r0, r5
 80010e2:	f004 f97f 	bl	80053e4 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3301      	adds	r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	ddd3      	ble.n	800109a <show_sensor_window+0x12>
	}
	hagl_put_text("DANE Z CZUJNIKOW", 10, 10, rgb565(15, 127, 225), font6x9);
 80010f2:	22e1      	movs	r2, #225	; 0xe1
 80010f4:	217f      	movs	r1, #127	; 0x7f
 80010f6:	200f      	movs	r0, #15
 80010f8:	f004 fb0e 	bl	8005718 <rgb565>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <show_sensor_window+0x98>)
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4613      	mov	r3, r2
 8001106:	220a      	movs	r2, #10
 8001108:	210a      	movs	r1, #10
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <show_sensor_window+0x9c>)
 800110c:	f004 f8ba 	bl	8005284 <hagl_put_text>
	lcd_copy();
 8001110:	f7ff fda6 	bl	8000c60 <lcd_copy>
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800111e:	bf00      	nop
 8001120:	08006134 	.word	0x08006134
 8001124:	08006078 	.word	0x08006078

08001128 <show_sensor_data>:


void show_sensor_data(uint16_t sensor_data[]) {
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b087      	sub	sp, #28
 800112c:	af02      	add	r7, sp, #8
 800112e:	6078      	str	r0, [r7, #4]
//	show_sensor_window();
	hagl_fill_rectangle(7, 27, LCD_WIDTH-7, LCD_HEIGHT-7, rgb565(0, 0, 0));
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2000      	movs	r0, #0
 8001136:	f004 faef 	bl	8005718 <rgb565>
 800113a:	4603      	mov	r3, r0
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2399      	movs	r3, #153	; 0x99
 8001140:	2279      	movs	r2, #121	; 0x79
 8001142:	211b      	movs	r1, #27
 8001144:	2007      	movs	r0, #7
 8001146:	f003 ff03 	bl	8004f50 <hagl_fill_rectangle>
	for (int var = 0; var < 8; ++var) {
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e026      	b.n	800119e <show_sensor_data+0x76>
		snprintf(text_to_parse, 16, "Kanal %u: \t\t%u", var,	sensor_data[var]);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <show_sensor_data+0x88>)
 8001160:	2110      	movs	r1, #16
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <show_sensor_data+0x8c>)
 8001164:	f004 fc00 	bl	8005968 <sniprintf>
		hagl_put_text(text_to_parse, 10, 30 + var * 15, rgb565(15, 127, 225), font5x7);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	b29b      	uxth	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	331e      	adds	r3, #30
 8001176:	b29b      	uxth	r3, r3
 8001178:	b21c      	sxth	r4, r3
 800117a:	22e1      	movs	r2, #225	; 0xe1
 800117c:	217f      	movs	r1, #127	; 0x7f
 800117e:	200f      	movs	r0, #15
 8001180:	f004 faca 	bl	8005718 <rgb565>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <show_sensor_data+0x90>)
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	4613      	mov	r3, r2
 800118e:	4622      	mov	r2, r4
 8001190:	210a      	movs	r1, #10
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <show_sensor_data+0x8c>)
 8001194:	f004 f876 	bl	8005284 <hagl_put_text>
	for (int var = 0; var < 8; ++var) {
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3301      	adds	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b07      	cmp	r3, #7
 80011a2:	ddd5      	ble.n	8001150 <show_sensor_data+0x28>
	}
	lcd_copy();
 80011a4:	f7ff fd5c 	bl	8000c60 <lcd_copy>
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd90      	pop	{r4, r7, pc}
 80011b0:	0800608c 	.word	0x0800608c
 80011b4:	2000a1e0 	.word	0x2000a1e0
 80011b8:	080090ec 	.word	0x080090ec

080011bc <select_item>:


void select_item(int index) {
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3328      	adds	r3, #40	; 0x28
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b21c      	sxth	r4, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	3319      	adds	r3, #25
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	b21d      	sxth	r5, r3
 80011ec:	2200      	movs	r2, #0
 80011ee:	21ff      	movs	r1, #255	; 0xff
 80011f0:	20ff      	movs	r0, #255	; 0xff
 80011f2:	f004 fa91 	bl	8005718 <rgb565>
 80011f6:	4603      	mov	r3, r0
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	462b      	mov	r3, r5
 80011fc:	2278      	movs	r2, #120	; 0x78
 80011fe:	4621      	mov	r1, r4
 8001200:	2008      	movs	r0, #8
 8001202:	f003 fe1f 	bl	8004e44 <hagl_draw_rectangle>
			rgb565(255, 255, 0));
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bdb0      	pop	{r4, r5, r7, pc}

0800120e <deselect_item>:


void deselect_item(int index) {
 800120e:	b5b0      	push	{r4, r5, r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af02      	add	r7, sp, #8
 8001214:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	b29b      	uxth	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	b29b      	uxth	r3, r3
 8001224:	3328      	adds	r3, #40	; 0x28
 8001226:	b29b      	uxth	r3, r3
 8001228:	b21c      	sxth	r4, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	b29b      	uxth	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	b29b      	uxth	r3, r3
 8001238:	3319      	adds	r3, #25
 800123a:	b29b      	uxth	r3, r3
 800123c:	b21d      	sxth	r5, r3
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2000      	movs	r0, #0
 8001244:	f004 fa68 	bl	8005718 <rgb565>
 8001248:	4603      	mov	r3, r0
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	462b      	mov	r3, r5
 800124e:	2278      	movs	r2, #120	; 0x78
 8001250:	4621      	mov	r1, r4
 8001252:	2008      	movs	r0, #8
 8001254:	f003 fdf6 	bl	8004e44 <hagl_draw_rectangle>
			rgb565(0, 0, 0));
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bdb0      	pop	{r4, r5, r7, pc}

08001260 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_RTC_Init+0x44>)
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <MX_RTC_Init+0x48>)
 8001268:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_RTC_Init+0x44>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_RTC_Init+0x44>)
 8001272:	227f      	movs	r2, #127	; 0x7f
 8001274:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_RTC_Init+0x44>)
 8001278:	22ff      	movs	r2, #255	; 0xff
 800127a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_RTC_Init+0x44>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_RTC_Init+0x44>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_RTC_Init+0x44>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_RTC_Init+0x44>)
 8001290:	f002 fbfc 	bl	8003a8c <HAL_RTC_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800129a:	f7ff fe4b 	bl	8000f34 <Error_Handler>
  }

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000a1f0 	.word	0x2000a1f0
 80012a8:	40002800 	.word	0x40002800

080012ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <HAL_RTC_MspInit+0x24>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d102      	bne.n	80012c4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_RTC_MspInit+0x28>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40002800 	.word	0x40002800
 80012d4:	42470e3c 	.word	0x42470e3c

080012d8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_SPI1_Init+0x64>)
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <MX_SPI1_Init+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_SPI1_Init+0x64>)
 80012e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_SPI1_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_SPI1_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_SPI1_Init+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_SPI1_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_SPI1_Init+0x64>)
 8001304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001308:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_SPI1_Init+0x64>)
 800130c:	2210      	movs	r2, #16
 800130e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_SPI1_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_SPI1_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_SPI1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_SPI1_Init+0x64>)
 8001324:	220a      	movs	r2, #10
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_SPI1_Init+0x64>)
 800132a:	f002 fc94 	bl	8003c56 <HAL_SPI_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001334:	f7ff fdfe 	bl	8000f34 <Error_Handler>
  }

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000a268 	.word	0x2000a268
 8001340:	40013000 	.word	0x40013000

08001344 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_SPI2_Init+0x64>)
 800134a:	4a18      	ldr	r2, [pc, #96]	; (80013ac <MX_SPI2_Init+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001354:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_SPI2_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_SPI2_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001374:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <MX_SPI2_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <MX_SPI2_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001390:	220a      	movs	r2, #10
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <MX_SPI2_Init+0x64>)
 8001396:	f002 fc5e 	bl	8003c56 <HAL_SPI_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013a0:	f7ff fdc8 	bl	8000f34 <Error_Handler>
  }

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000a210 	.word	0x2000a210
 80013ac:	40003800 	.word	0x40003800

080013b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a58      	ldr	r2, [pc, #352]	; (8001530 <HAL_SPI_MspInit+0x180>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d178      	bne.n	80014c4 <HAL_SPI_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	4b57      	ldr	r3, [pc, #348]	; (8001534 <HAL_SPI_MspInit+0x184>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a56      	ldr	r2, [pc, #344]	; (8001534 <HAL_SPI_MspInit+0x184>)
 80013dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b54      	ldr	r3, [pc, #336]	; (8001534 <HAL_SPI_MspInit+0x184>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ea:	61bb      	str	r3, [r7, #24]
 80013ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	4b50      	ldr	r3, [pc, #320]	; (8001534 <HAL_SPI_MspInit+0x184>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a4f      	ldr	r2, [pc, #316]	; (8001534 <HAL_SPI_MspInit+0x184>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <HAL_SPI_MspInit+0x184>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b49      	ldr	r3, [pc, #292]	; (8001534 <HAL_SPI_MspInit+0x184>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a48      	ldr	r2, [pc, #288]	; (8001534 <HAL_SPI_MspInit+0x184>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <HAL_SPI_MspInit+0x184>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001426:	2320      	movs	r3, #32
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001436:	2305      	movs	r3, #5
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	483d      	ldr	r0, [pc, #244]	; (8001538 <HAL_SPI_MspInit+0x188>)
 8001442:	f001 fb09 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001446:	2320      	movs	r3, #32
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001456:	2305      	movs	r3, #5
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	4836      	ldr	r0, [pc, #216]	; (800153c <HAL_SPI_MspInit+0x18c>)
 8001462:	f001 faf9 	bl	8002a58 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001466:	4b36      	ldr	r3, [pc, #216]	; (8001540 <HAL_SPI_MspInit+0x190>)
 8001468:	4a36      	ldr	r2, [pc, #216]	; (8001544 <HAL_SPI_MspInit+0x194>)
 800146a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800146c:	4b34      	ldr	r3, [pc, #208]	; (8001540 <HAL_SPI_MspInit+0x190>)
 800146e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001472:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001474:	4b32      	ldr	r3, [pc, #200]	; (8001540 <HAL_SPI_MspInit+0x190>)
 8001476:	2240      	movs	r2, #64	; 0x40
 8001478:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <HAL_SPI_MspInit+0x190>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <HAL_SPI_MspInit+0x190>)
 8001482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001486:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001488:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_SPI_MspInit+0x190>)
 800148a:	2200      	movs	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <HAL_SPI_MspInit+0x190>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_SPI_MspInit+0x190>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <HAL_SPI_MspInit+0x190>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_SPI_MspInit+0x190>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014a6:	4826      	ldr	r0, [pc, #152]	; (8001540 <HAL_SPI_MspInit+0x190>)
 80014a8:	f000 ff68 	bl	800237c <HAL_DMA_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80014b2:	f7ff fd3f 	bl	8000f34 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a21      	ldr	r2, [pc, #132]	; (8001540 <HAL_SPI_MspInit+0x190>)
 80014ba:	649a      	str	r2, [r3, #72]	; 0x48
 80014bc:	4a20      	ldr	r2, [pc, #128]	; (8001540 <HAL_SPI_MspInit+0x190>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80014c2:	e031      	b.n	8001528 <HAL_SPI_MspInit+0x178>
  else if(spiHandle->Instance==SPI2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <HAL_SPI_MspInit+0x198>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12c      	bne.n	8001528 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_SPI_MspInit+0x184>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_SPI_MspInit+0x184>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_SPI_MspInit+0x184>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_SPI_MspInit+0x184>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_SPI_MspInit+0x184>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_SPI_MspInit+0x184>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001506:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001518:	2305      	movs	r3, #5
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <HAL_SPI_MspInit+0x18c>)
 8001524:	f001 fa98 	bl	8002a58 <HAL_GPIO_Init>
}
 8001528:	bf00      	nop
 800152a:	3730      	adds	r7, #48	; 0x30
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40013000 	.word	0x40013000
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	2000a2c0 	.word	0x2000a2c0
 8001544:	40026458 	.word	0x40026458
 8001548:	40003800 	.word	0x40003800

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_MspInit+0x4c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <HAL_MspInit+0x4c>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_MspInit+0x4c>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <NMI_Handler+0x4>

080015a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <MemManage_Handler+0x4>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <UsageFault_Handler+0x4>

080015ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e8:	f000 f99e 	bl	8001928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f001 fbe3 	bl	8002dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}

080015fe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001602:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001606:	f001 fbdb 	bl	8002dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <DMA2_Stream3_IRQHandler+0x10>)
 8001616:	f000 ffb7 	bl	8002588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000a2c0 	.word	0x2000a2c0

08001624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <_sbrk+0x5c>)
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <_sbrk+0x60>)
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <_sbrk+0x64>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <_sbrk+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	429a      	cmp	r2, r3
 8001652:	d207      	bcs.n	8001664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001654:	f004 f892 	bl	800577c <__errno>
 8001658:	4602      	mov	r2, r0
 800165a:	230c      	movs	r3, #12
 800165c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	e009      	b.n	8001678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <_sbrk+0x64>)
 8001674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20010000 	.word	0x20010000
 8001684:	00002000 	.word	0x00002000
 8001688:	2000a09c 	.word	0x2000a09c
 800168c:	2000a368 	.word	0x2000a368

08001690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <SystemInit+0x28>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <SystemInit+0x28>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SystemInit+0x28>)
 80016a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016aa:	609a      	str	r2, [r3, #8]
#endif
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	; 0x30
 80016c0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	2224      	movs	r2, #36	; 0x24
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f004 f88b 	bl	80057e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <MX_TIM2_Init+0xa4>)
 80016da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <MX_TIM2_Init+0xa4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <MX_TIM2_Init+0xa4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <MX_TIM2_Init+0xa4>)
 80016ee:	f04f 32ff 	mov.w	r2, #4294967295
 80016f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_TIM2_Init+0xa4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <MX_TIM2_Init+0xa4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001700:	2301      	movs	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001708:	2301      	movs	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001718:	2301      	movs	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800171c:	2300      	movs	r3, #0
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4619      	mov	r1, r3
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <MX_TIM2_Init+0xa4>)
 800172c:	f002 fe1c 	bl	8004368 <HAL_TIM_Encoder_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001736:	f7ff fbfd 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <MX_TIM2_Init+0xa4>)
 8001748:	f002 ff7e 	bl	8004648 <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001752:	f7ff fbef 	bl	8000f34 <Error_Handler>
  }

}
 8001756:	bf00      	nop
 8001758:	3730      	adds	r7, #48	; 0x30
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000a320 	.word	0x2000a320

08001764 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001784:	d14a      	bne.n	800181c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_TIM_Encoder_MspInit+0xc0>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a25      	ldr	r2, [pc, #148]	; (8001824 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ec:	2301      	movs	r3, #1
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	480c      	ldr	r0, [pc, #48]	; (8001828 <HAL_TIM_Encoder_MspInit+0xc4>)
 80017f8:	f001 f92e 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017fc:	2308      	movs	r3, #8
 80017fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800180c:	2301      	movs	r3, #1
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001818:	f001 f91e 	bl	8002a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000
 800182c:	40020400 	.word	0x40020400

08001830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001868 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001834:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001836:	e003      	b.n	8001840 <LoopCopyDataInit>

08001838 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800183a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800183c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800183e:	3104      	adds	r1, #4

08001840 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001844:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001846:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001848:	d3f6      	bcc.n	8001838 <CopyDataInit>
  ldr  r2, =_sbss
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800184c:	e002      	b.n	8001854 <LoopFillZerobss>

0800184e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800184e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001850:	f842 3b04 	str.w	r3, [r2], #4

08001854 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001856:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001858:	d3f9      	bcc.n	800184e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800185a:	f7ff ff19 	bl	8001690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185e:	f003 ff93 	bl	8005788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001862:	f7ff fa2f 	bl	8000cc4 <main>
  bx  lr    
 8001866:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001868:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800186c:	0800c6b8 	.word	0x0800c6b8
  ldr  r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001874:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001878:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800187c:	2000a368 	.word	0x2000a368

08001880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC_IRQHandler>
	...

08001884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <HAL_Init+0x40>)
 800188e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_Init+0x40>)
 800189a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_Init+0x40>)
 80018a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f000 fd23 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 f808 	bl	80018c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b8:	f7ff fe48 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x54>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x58>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fd3b 	bl	8002362 <HAL_SYSTICK_Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00e      	b.n	8001914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d80a      	bhi.n	8001912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	2200      	movs	r2, #0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f000 fd03 	bl	800230e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <HAL_InitTick+0x5c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000000 	.word	0x20000000
 8001920:	20000008 	.word	0x20000008
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000008 	.word	0x20000008
 800194c:	2000a360 	.word	0x2000a360

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	2000a360 	.word	0x2000a360

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff ffee 	bl	8001950 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_Delay+0x40>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffde 	bl	8001950 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000008 	.word	0x20000008

080019ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e033      	b.n	8001a2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7fe fe8c 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019f2:	f023 0302 	bic.w	r3, r3, #2
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fa2c 	bl	8001e5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f023 0303 	bic.w	r3, r3, #3
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
 8001a1a:	e001      	b.n	8001a20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_Start_DMA+0x1e>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e0b1      	b.n	8001bb6 <HAL_ADC_Start_DMA+0x182>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d018      	beq.n	8001a9a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a78:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <HAL_ADC_Start_DMA+0x18c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a51      	ldr	r2, [pc, #324]	; (8001bc4 <HAL_ADC_Start_DMA+0x190>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0c9a      	lsrs	r2, r3, #18
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a8c:	e002      	b.n	8001a94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f9      	bne.n	8001a8e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	f040 8085 	bne.w	8001bb4 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d007      	beq.n	8001adc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ad4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae8:	d106      	bne.n	8001af8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f023 0206 	bic.w	r2, r3, #6
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	645a      	str	r2, [r3, #68]	; 0x44
 8001af6:	e002      	b.n	8001afe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b06:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_ADC_Start_DMA+0x194>)
 8001b08:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	4a2f      	ldr	r2, [pc, #188]	; (8001bcc <HAL_ADC_Start_DMA+0x198>)
 8001b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b16:	4a2e      	ldr	r2, [pc, #184]	; (8001bd0 <HAL_ADC_Start_DMA+0x19c>)
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1e:	4a2d      	ldr	r2, [pc, #180]	; (8001bd4 <HAL_ADC_Start_DMA+0x1a0>)
 8001b20:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b3a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b4a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	334c      	adds	r3, #76	; 0x4c
 8001b56:	4619      	mov	r1, r3
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f000 fcbc 	bl	80024d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10f      	bne.n	8001b8c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d11c      	bne.n	8001bb4 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	e013      	b.n	8001bb4 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <HAL_ADC_Start_DMA+0x1a4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10e      	bne.n	8001bb4 <HAL_ADC_Start_DMA+0x180>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d107      	bne.n	8001bb4 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bb2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	431bde83 	.word	0x431bde83
 8001bc8:	40012300 	.word	0x40012300
 8001bcc:	08002055 	.word	0x08002055
 8001bd0:	0800210f 	.word	0x0800210f
 8001bd4:	0800212b 	.word	0x0800212b
 8001bd8:	40012000 	.word	0x40012000

08001bdc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1c>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e105      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x228>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b09      	cmp	r3, #9
 8001c42:	d925      	bls.n	8001c90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68d9      	ldr	r1, [r3, #12]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	3b1e      	subs	r3, #30
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43da      	mvns	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	400a      	ands	r2, r1
 8001c68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68d9      	ldr	r1, [r3, #12]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4403      	add	r3, r0
 8001c82:	3b1e      	subs	r3, #30
 8001c84:	409a      	lsls	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	e022      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6919      	ldr	r1, [r3, #16]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6919      	ldr	r1, [r3, #16]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4403      	add	r3, r0
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d824      	bhi.n	8001d28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	3b05      	subs	r3, #5
 8001cf0:	221f      	movs	r2, #31
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	3b05      	subs	r3, #5
 8001d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	635a      	str	r2, [r3, #52]	; 0x34
 8001d26:	e04c      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b0c      	cmp	r3, #12
 8001d2e:	d824      	bhi.n	8001d7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b23      	subs	r3, #35	; 0x23
 8001d42:	221f      	movs	r2, #31
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	400a      	ands	r2, r1
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b23      	subs	r3, #35	; 0x23
 8001d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
 8001d78:	e023      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b41      	subs	r3, #65	; 0x41
 8001d8c:	221f      	movs	r2, #31
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	3b41      	subs	r3, #65	; 0x41
 8001db6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_ADC_ConfigChannel+0x234>)
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <HAL_ADC_ConfigChannel+0x238>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d109      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x1cc>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b12      	cmp	r3, #18
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_ADC_ConfigChannel+0x238>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d123      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x21e>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b10      	cmp	r3, #16
 8001df4:	d003      	beq.n	8001dfe <HAL_ADC_ConfigChannel+0x1e6>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b11      	cmp	r3, #17
 8001dfc:	d11b      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b10      	cmp	r3, #16
 8001e10:	d111      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_ADC_ConfigChannel+0x23c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_ADC_ConfigChannel+0x240>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	0c9a      	lsrs	r2, r3, #18
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e28:	e002      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f9      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	40012300 	.word	0x40012300
 8001e50:	40012000 	.word	0x40012000
 8001e54:	20000000 	.word	0x20000000
 8001e58:	431bde83 	.word	0x431bde83

08001e5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e64:	4b79      	ldr	r3, [pc, #484]	; (800204c <ADC_Init+0x1f0>)
 8001e66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	021a      	lsls	r2, r3, #8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6899      	ldr	r1, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	4a58      	ldr	r2, [pc, #352]	; (8002050 <ADC_Init+0x1f4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d022      	beq.n	8001f3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6899      	ldr	r1, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6899      	ldr	r1, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e00f      	b.n	8001f5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0202 	bic.w	r2, r2, #2
 8001f68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6899      	ldr	r1, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7e1b      	ldrb	r3, [r3, #24]
 8001f74:	005a      	lsls	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01b      	beq.n	8001fc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fa6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	035a      	lsls	r2, r3, #13
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	e007      	b.n	8001fd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	051a      	lsls	r2, r3, #20
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002004:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6899      	ldr	r1, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002012:	025a      	lsls	r2, r3, #9
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6899      	ldr	r1, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	029a      	lsls	r2, r3, #10
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	609a      	str	r2, [r3, #8]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40012300 	.word	0x40012300
 8002050:	0f000001 	.word	0x0f000001

08002054 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800206a:	2b00      	cmp	r3, #0
 800206c:	d13c      	bne.n	80020e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d12b      	bne.n	80020e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800208c:	2b00      	cmp	r3, #0
 800208e:	d127      	bne.n	80020e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d006      	beq.n	80020ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d119      	bne.n	80020e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0220 	bic.w	r2, r2, #32
 80020ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d105      	bne.n	80020e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7ff fd7b 	bl	8001bdc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020e6:	e00e      	b.n	8002106 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff fd85 	bl	8001c04 <HAL_ADC_ErrorCallback>
}
 80020fa:	e004      	b.n	8002106 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fd67 	bl	8001bf0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2240      	movs	r2, #64	; 0x40
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f043 0204 	orr.w	r2, r3, #4
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f7ff fd5a 	bl	8001c04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <__NVIC_GetPriorityGrouping+0x18>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0307 	and.w	r3, r3, #7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db0b      	blt.n	80021e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4907      	ldr	r1, [pc, #28]	; (80021f4 <__NVIC_EnableIRQ+0x38>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2001      	movs	r0, #1
 80021de:	fa00 f202 	lsl.w	r2, r0, r2
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000e100 	.word	0xe000e100

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	bf28      	it	cs
 800226a:	2304      	movcs	r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	2b06      	cmp	r3, #6
 8002274:	d902      	bls.n	800227c <NVIC_EncodePriority+0x30>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b03      	subs	r3, #3
 800227a:	e000      	b.n	800227e <NVIC_EncodePriority+0x32>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43d9      	mvns	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	4313      	orrs	r3, r2
         );
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c4:	d301      	bcc.n	80022ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00f      	b.n	80022ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <SysTick_Config+0x40>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d2:	210f      	movs	r1, #15
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f7ff ff8e 	bl	80021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SysTick_Config+0x40>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <SysTick_Config+0x40>)
 80022e4:	2207      	movs	r2, #7
 80022e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000e010 	.word	0xe000e010

080022f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff29 	bl	8002158 <__NVIC_SetPriorityGrouping>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002320:	f7ff ff3e 	bl	80021a0 <__NVIC_GetPriorityGrouping>
 8002324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff ff8e 	bl	800224c <NVIC_EncodePriority>
 8002330:	4602      	mov	r2, r0
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff5d 	bl	80021f8 <__NVIC_SetPriority>
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff31 	bl	80021bc <__NVIC_EnableIRQ>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffa2 	bl	80022b4 <SysTick_Config>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff fae2 	bl	8001950 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e099      	b.n	80024cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b8:	e00f      	b.n	80023da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ba:	f7ff fac9 	bl	8001950 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d908      	bls.n	80023da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2203      	movs	r2, #3
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e078      	b.n	80024cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e8      	bne.n	80023ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <HAL_DMA_Init+0x158>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002406:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	2b04      	cmp	r3, #4
 8002432:	d107      	bne.n	8002444 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	4313      	orrs	r3, r2
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f023 0307 	bic.w	r3, r3, #7
 800245a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	2b04      	cmp	r3, #4
 800246c:	d117      	bne.n	800249e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00e      	beq.n	800249e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fa6f 	bl	8002964 <DMA_CheckFifoParam>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2240      	movs	r2, #64	; 0x40
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800249a:	2301      	movs	r3, #1
 800249c:	e016      	b.n	80024cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa26 	bl	80028f8 <DMA_CalcBaseAndBitshift>
 80024ac:	4603      	mov	r3, r0
 80024ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	223f      	movs	r2, #63	; 0x3f
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	f010803f 	.word	0xf010803f

080024d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_DMA_Start_IT+0x26>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e040      	b.n	8002580 <HAL_DMA_Start_IT+0xa8>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d12f      	bne.n	8002572 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f9b8 	bl	800289c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	223f      	movs	r2, #63	; 0x3f
 8002532:	409a      	lsls	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0216 	orr.w	r2, r2, #22
 8002546:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0208 	orr.w	r2, r2, #8
 800255e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e005      	b.n	800257e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800257a:	2302      	movs	r3, #2
 800257c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800257e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002594:	4b92      	ldr	r3, [pc, #584]	; (80027e0 <HAL_DMA_IRQHandler+0x258>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a92      	ldr	r2, [pc, #584]	; (80027e4 <HAL_DMA_IRQHandler+0x25c>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0a9b      	lsrs	r3, r3, #10
 80025a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	2208      	movs	r2, #8
 80025b4:	409a      	lsls	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01a      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0204 	bic.w	r2, r2, #4
 80025da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	2208      	movs	r2, #8
 80025e2:	409a      	lsls	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	2201      	movs	r2, #1
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d012      	beq.n	800262a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	2201      	movs	r2, #1
 8002618:	409a      	lsls	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f043 0202 	orr.w	r2, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	2204      	movs	r2, #4
 8002630:	409a      	lsls	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d012      	beq.n	8002660 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00b      	beq.n	8002660 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	2204      	movs	r2, #4
 800264e:	409a      	lsls	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	2210      	movs	r2, #16
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d043      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d03c      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	2210      	movs	r2, #16
 8002684:	409a      	lsls	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d018      	beq.n	80026ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d108      	bne.n	80026b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d024      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
 80026b6:	e01f      	b.n	80026f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01b      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
 80026c8:	e016      	b.n	80026f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d107      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0208 	bic.w	r2, r2, #8
 80026e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2220      	movs	r2, #32
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 808e 	beq.w	8002826 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8086 	beq.w	8002826 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	2220      	movs	r2, #32
 8002720:	409a      	lsls	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b05      	cmp	r3, #5
 8002730:	d136      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0216 	bic.w	r2, r2, #22
 8002740:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002750:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <HAL_DMA_IRQHandler+0x1da>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0208 	bic.w	r2, r2, #8
 8002770:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	223f      	movs	r2, #63	; 0x3f
 8002778:	409a      	lsls	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002792:	2b00      	cmp	r3, #0
 8002794:	d07d      	beq.n	8002892 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
        }
        return;
 800279e:	e078      	b.n	8002892 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01c      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d108      	bne.n	80027ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d030      	beq.n	8002826 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
 80027cc:	e02b      	b.n	8002826 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
 80027de:	e022      	b.n	8002826 <HAL_DMA_IRQHandler+0x29e>
 80027e0:	20000000 	.word	0x20000000
 80027e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10f      	bne.n	8002816 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0210 	bic.w	r2, r2, #16
 8002804:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	2b00      	cmp	r3, #0
 800282c:	d032      	beq.n	8002894 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d022      	beq.n	8002880 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2205      	movs	r2, #5
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3301      	adds	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	429a      	cmp	r2, r3
 800285c:	d307      	bcc.n	800286e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f2      	bne.n	8002852 <HAL_DMA_IRQHandler+0x2ca>
 800286c:	e000      	b.n	8002870 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800286e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
 8002890:	e000      	b.n	8002894 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002892:	bf00      	nop
    }
  }
}
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop

0800289c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b40      	cmp	r3, #64	; 0x40
 80028c8:	d108      	bne.n	80028dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028da:	e007      	b.n	80028ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	60da      	str	r2, [r3, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3b10      	subs	r3, #16
 8002908:	4a14      	ldr	r2, [pc, #80]	; (800295c <DMA_CalcBaseAndBitshift+0x64>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <DMA_CalcBaseAndBitshift+0x68>)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d909      	bls.n	800293a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800292e:	f023 0303 	bic.w	r3, r3, #3
 8002932:	1d1a      	adds	r2, r3, #4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	659a      	str	r2, [r3, #88]	; 0x58
 8002938:	e007      	b.n	800294a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002942:	f023 0303 	bic.w	r3, r3, #3
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	aaaaaaab 	.word	0xaaaaaaab
 8002960:	0800c60c 	.word	0x0800c60c

08002964 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d11f      	bne.n	80029be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d855      	bhi.n	8002a30 <DMA_CheckFifoParam+0xcc>
 8002984:	a201      	add	r2, pc, #4	; (adr r2, 800298c <DMA_CheckFifoParam+0x28>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	0800299d 	.word	0x0800299d
 8002990:	080029af 	.word	0x080029af
 8002994:	0800299d 	.word	0x0800299d
 8002998:	08002a31 	.word	0x08002a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d045      	beq.n	8002a34 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ac:	e042      	b.n	8002a34 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029b6:	d13f      	bne.n	8002a38 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029bc:	e03c      	b.n	8002a38 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c6:	d121      	bne.n	8002a0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d836      	bhi.n	8002a3c <DMA_CheckFifoParam+0xd8>
 80029ce:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <DMA_CheckFifoParam+0x70>)
 80029d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	080029eb 	.word	0x080029eb
 80029dc:	080029e5 	.word	0x080029e5
 80029e0:	080029fd 	.word	0x080029fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      break;
 80029e8:	e02f      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d024      	beq.n	8002a40 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fa:	e021      	b.n	8002a40 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a04:	d11e      	bne.n	8002a44 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a0a:	e01b      	b.n	8002a44 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d902      	bls.n	8002a18 <DMA_CheckFifoParam+0xb4>
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d003      	beq.n	8002a1e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a16:	e018      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e015      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00e      	beq.n	8002a48 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2e:	e00b      	b.n	8002a48 <DMA_CheckFifoParam+0xe4>
      break;
 8002a30:	bf00      	nop
 8002a32:	e00a      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;
 8002a34:	bf00      	nop
 8002a36:	e008      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;
 8002a38:	bf00      	nop
 8002a3a:	e006      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;
 8002a3c:	bf00      	nop
 8002a3e:	e004      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;
 8002a40:	bf00      	nop
 8002a42:	e002      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;   
 8002a44:	bf00      	nop
 8002a46:	e000      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;
 8002a48:	bf00      	nop
    }
  } 
  
  return status; 
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e159      	b.n	8002d28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f040 8148 	bne.w	8002d22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d00b      	beq.n	8002ab2 <HAL_GPIO_Init+0x5a>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aa6:	2b11      	cmp	r3, #17
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b12      	cmp	r3, #18
 8002ab0:	d130      	bne.n	8002b14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 0201 	and.w	r2, r3, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0xfc>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b12      	cmp	r3, #18
 8002b52:	d123      	bne.n	8002b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80a2 	beq.w	8002d22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b56      	ldr	r3, [pc, #344]	; (8002d3c <HAL_GPIO_Init+0x2e4>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4a55      	ldr	r2, [pc, #340]	; (8002d3c <HAL_GPIO_Init+0x2e4>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	; 0x44
 8002bee:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <HAL_GPIO_Init+0x2e4>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfa:	4a51      	ldr	r2, [pc, #324]	; (8002d40 <HAL_GPIO_Init+0x2e8>)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3302      	adds	r3, #2
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a48      	ldr	r2, [pc, #288]	; (8002d44 <HAL_GPIO_Init+0x2ec>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d019      	beq.n	8002c5a <HAL_GPIO_Init+0x202>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a47      	ldr	r2, [pc, #284]	; (8002d48 <HAL_GPIO_Init+0x2f0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <HAL_GPIO_Init+0x1fe>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a46      	ldr	r2, [pc, #280]	; (8002d4c <HAL_GPIO_Init+0x2f4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00d      	beq.n	8002c52 <HAL_GPIO_Init+0x1fa>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a45      	ldr	r2, [pc, #276]	; (8002d50 <HAL_GPIO_Init+0x2f8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d007      	beq.n	8002c4e <HAL_GPIO_Init+0x1f6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a44      	ldr	r2, [pc, #272]	; (8002d54 <HAL_GPIO_Init+0x2fc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_GPIO_Init+0x1f2>
 8002c46:	2304      	movs	r3, #4
 8002c48:	e008      	b.n	8002c5c <HAL_GPIO_Init+0x204>
 8002c4a:	2307      	movs	r3, #7
 8002c4c:	e006      	b.n	8002c5c <HAL_GPIO_Init+0x204>
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e004      	b.n	8002c5c <HAL_GPIO_Init+0x204>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e002      	b.n	8002c5c <HAL_GPIO_Init+0x204>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_GPIO_Init+0x204>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	f002 0203 	and.w	r2, r2, #3
 8002c62:	0092      	lsls	r2, r2, #2
 8002c64:	4093      	lsls	r3, r2
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c6c:	4934      	ldr	r1, [pc, #208]	; (8002d40 <HAL_GPIO_Init+0x2e8>)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	3302      	adds	r3, #2
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c7a:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c9e:	4a2e      	ldr	r2, [pc, #184]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ca4:	4b2c      	ldr	r3, [pc, #176]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cc8:	4a23      	ldr	r2, [pc, #140]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cf2:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d1c:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3301      	adds	r3, #1
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	f67f aea2 	bls.w	8002a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d30:	bf00      	nop
 8002d32:	3724      	adds	r7, #36	; 0x24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40013800 	.word	0x40013800
 8002d44:	40020000 	.word	0x40020000
 8002d48:	40020400 	.word	0x40020400
 8002d4c:	40020800 	.word	0x40020800
 8002d50:	40020c00 	.word	0x40020c00
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40013c00 	.word	0x40013c00

08002d5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	887b      	ldrh	r3, [r7, #2]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e001      	b.n	8002d7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d9c:	787b      	ldrb	r3, [r7, #1]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002da8:	e003      	b.n	8002db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	041a      	lsls	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	619a      	str	r2, [r3, #24]
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dd6:	4a05      	ldr	r2, [pc, #20]	; (8002dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe f86a 	bl	8000eb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40013c00 	.word	0x40013c00

08002df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e11f      	b.n	8003042 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd fddc 	bl	80009d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	; 0x24
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e54:	f000 fd18 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8002e58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4a7b      	ldr	r2, [pc, #492]	; (800304c <HAL_I2C_Init+0x25c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d807      	bhi.n	8002e74 <HAL_I2C_Init+0x84>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4a7a      	ldr	r2, [pc, #488]	; (8003050 <HAL_I2C_Init+0x260>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	bf94      	ite	ls
 8002e6c:	2301      	movls	r3, #1
 8002e6e:	2300      	movhi	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	e006      	b.n	8002e82 <HAL_I2C_Init+0x92>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a77      	ldr	r2, [pc, #476]	; (8003054 <HAL_I2C_Init+0x264>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	bf94      	ite	ls
 8002e7c:	2301      	movls	r3, #1
 8002e7e:	2300      	movhi	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0db      	b.n	8003042 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a72      	ldr	r2, [pc, #456]	; (8003058 <HAL_I2C_Init+0x268>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	0c9b      	lsrs	r3, r3, #18
 8002e94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a64      	ldr	r2, [pc, #400]	; (800304c <HAL_I2C_Init+0x25c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d802      	bhi.n	8002ec4 <HAL_I2C_Init+0xd4>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	e009      	b.n	8002ed8 <HAL_I2C_Init+0xe8>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	4a63      	ldr	r2, [pc, #396]	; (800305c <HAL_I2C_Init+0x26c>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4956      	ldr	r1, [pc, #344]	; (800304c <HAL_I2C_Init+0x25c>)
 8002ef4:	428b      	cmp	r3, r1
 8002ef6:	d80d      	bhi.n	8002f14 <HAL_I2C_Init+0x124>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e59      	subs	r1, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	bf38      	it	cc
 8002f10:	2304      	movcc	r3, #4
 8002f12:	e04f      	b.n	8002fb4 <HAL_I2C_Init+0x1c4>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d111      	bne.n	8002f40 <HAL_I2C_Init+0x150>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	440b      	add	r3, r1
 8002f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e012      	b.n	8002f66 <HAL_I2C_Init+0x176>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	0099      	lsls	r1, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Init+0x17e>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e022      	b.n	8002fb4 <HAL_I2C_Init+0x1c4>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10e      	bne.n	8002f94 <HAL_I2C_Init+0x1a4>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1e58      	subs	r0, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	440b      	add	r3, r1
 8002f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f92:	e00f      	b.n	8002fb4 <HAL_I2C_Init+0x1c4>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1e58      	subs	r0, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	0099      	lsls	r1, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002faa:	3301      	adds	r3, #1
 8002fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	6809      	ldr	r1, [r1, #0]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6911      	ldr	r1, [r2, #16]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68d2      	ldr	r2, [r2, #12]
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	000186a0 	.word	0x000186a0
 8003050:	001e847f 	.word	0x001e847f
 8003054:	003d08ff 	.word	0x003d08ff
 8003058:	431bde83 	.word	0x431bde83
 800305c:	10624dd3 	.word	0x10624dd3

08003060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e25b      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d075      	beq.n	800316a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800307e:	4ba3      	ldr	r3, [pc, #652]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b04      	cmp	r3, #4
 8003088:	d00c      	beq.n	80030a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308a:	4ba0      	ldr	r3, [pc, #640]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003092:	2b08      	cmp	r3, #8
 8003094:	d112      	bne.n	80030bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003096:	4b9d      	ldr	r3, [pc, #628]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a2:	d10b      	bne.n	80030bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a4:	4b99      	ldr	r3, [pc, #612]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d05b      	beq.n	8003168 <HAL_RCC_OscConfig+0x108>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d157      	bne.n	8003168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e236      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c4:	d106      	bne.n	80030d4 <HAL_RCC_OscConfig+0x74>
 80030c6:	4b91      	ldr	r3, [pc, #580]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a90      	ldr	r2, [pc, #576]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e01d      	b.n	8003110 <HAL_RCC_OscConfig+0xb0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x98>
 80030de:	4b8b      	ldr	r3, [pc, #556]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a8a      	ldr	r2, [pc, #552]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b88      	ldr	r3, [pc, #544]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a87      	ldr	r2, [pc, #540]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_OscConfig+0xb0>
 80030f8:	4b84      	ldr	r3, [pc, #528]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a83      	ldr	r2, [pc, #524]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80030fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b81      	ldr	r3, [pc, #516]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a80      	ldr	r2, [pc, #512]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 800310a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d013      	beq.n	8003140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe fc1a 	bl	8001950 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003120:	f7fe fc16 	bl	8001950 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1fb      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b76      	ldr	r3, [pc, #472]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0xc0>
 800313e:	e014      	b.n	800316a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fc06 	bl	8001950 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fc02 	bl	8001950 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1e7      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315a:	4b6c      	ldr	r3, [pc, #432]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0xe8>
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d063      	beq.n	800323e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003176:	4b65      	ldr	r3, [pc, #404]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003182:	4b62      	ldr	r3, [pc, #392]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800318a:	2b08      	cmp	r3, #8
 800318c:	d11c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318e:	4b5f      	ldr	r3, [pc, #380]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d116      	bne.n	80031c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319a:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_RCC_OscConfig+0x152>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e1bb      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	4b56      	ldr	r3, [pc, #344]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4952      	ldr	r1, [pc, #328]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c6:	e03a      	b.n	800323e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d0:	4b4f      	ldr	r3, [pc, #316]	; (8003310 <HAL_RCC_OscConfig+0x2b0>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fe fbbb 	bl	8001950 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031de:	f7fe fbb7 	bl	8001950 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e19c      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f0:	4b46      	ldr	r3, [pc, #280]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b43      	ldr	r3, [pc, #268]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4940      	ldr	r1, [pc, #256]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]
 8003210:	e015      	b.n	800323e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003212:	4b3f      	ldr	r3, [pc, #252]	; (8003310 <HAL_RCC_OscConfig+0x2b0>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe fb9a 	bl	8001950 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003220:	f7fe fb96 	bl	8001950 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e17b      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d030      	beq.n	80032ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d016      	beq.n	8003280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003252:	4b30      	ldr	r3, [pc, #192]	; (8003314 <HAL_RCC_OscConfig+0x2b4>)
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe fb7a 	bl	8001950 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003260:	f7fe fb76 	bl	8001950 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e15b      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003272:	4b26      	ldr	r3, [pc, #152]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 8003274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x200>
 800327e:	e015      	b.n	80032ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003280:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_RCC_OscConfig+0x2b4>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7fe fb63 	bl	8001950 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328e:	f7fe fb5f 	bl	8001950 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e144      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a0:	4b1a      	ldr	r3, [pc, #104]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80032a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f0      	bne.n	800328e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80a0 	beq.w	80033fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ba:	2300      	movs	r3, #0
 80032bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10f      	bne.n	80032ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	4a0e      	ldr	r2, [pc, #56]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d8:	6413      	str	r3, [r2, #64]	; 0x40
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_OscConfig+0x2b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d121      	bne.n	800333a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <HAL_RCC_OscConfig+0x2b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a07      	ldr	r2, [pc, #28]	; (8003318 <HAL_RCC_OscConfig+0x2b8>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003302:	f7fe fb25 	bl	8001950 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	e011      	b.n	800332e <HAL_RCC_OscConfig+0x2ce>
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	42470000 	.word	0x42470000
 8003314:	42470e80 	.word	0x42470e80
 8003318:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331c:	f7fe fb18 	bl	8001950 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e0fd      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	4b81      	ldr	r3, [pc, #516]	; (8003534 <HAL_RCC_OscConfig+0x4d4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d106      	bne.n	8003350 <HAL_RCC_OscConfig+0x2f0>
 8003342:	4b7d      	ldr	r3, [pc, #500]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	4a7c      	ldr	r2, [pc, #496]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6713      	str	r3, [r2, #112]	; 0x70
 800334e:	e01c      	b.n	800338a <HAL_RCC_OscConfig+0x32a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b05      	cmp	r3, #5
 8003356:	d10c      	bne.n	8003372 <HAL_RCC_OscConfig+0x312>
 8003358:	4b77      	ldr	r3, [pc, #476]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a76      	ldr	r2, [pc, #472]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
 8003364:	4b74      	ldr	r3, [pc, #464]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a73      	ldr	r2, [pc, #460]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	e00b      	b.n	800338a <HAL_RCC_OscConfig+0x32a>
 8003372:	4b71      	ldr	r3, [pc, #452]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4a70      	ldr	r2, [pc, #448]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6713      	str	r3, [r2, #112]	; 0x70
 800337e:	4b6e      	ldr	r3, [pc, #440]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a6d      	ldr	r2, [pc, #436]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d015      	beq.n	80033be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fe fadd 	bl	8001950 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fe fad9 	bl	8001950 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0bc      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b0:	4b61      	ldr	r3, [pc, #388]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ee      	beq.n	800339a <HAL_RCC_OscConfig+0x33a>
 80033bc:	e014      	b.n	80033e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033be:	f7fe fac7 	bl	8001950 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fe fac3 	bl	8001950 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e0a6      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033dc:	4b56      	ldr	r3, [pc, #344]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1ee      	bne.n	80033c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d105      	bne.n	80033fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ee:	4b52      	ldr	r3, [pc, #328]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a51      	ldr	r2, [pc, #324]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 80033f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 8092 	beq.w	8003528 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003404:	4b4c      	ldr	r3, [pc, #304]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b08      	cmp	r3, #8
 800340e:	d05c      	beq.n	80034ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d141      	bne.n	800349c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003418:	4b48      	ldr	r3, [pc, #288]	; (800353c <HAL_RCC_OscConfig+0x4dc>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fe fa97 	bl	8001950 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003426:	f7fe fa93 	bl	8001950 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e078      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003438:	4b3f      	ldr	r3, [pc, #252]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f0      	bne.n	8003426 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	019b      	lsls	r3, r3, #6
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	3b01      	subs	r3, #1
 800345e:	041b      	lsls	r3, r3, #16
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	061b      	lsls	r3, r3, #24
 8003468:	4933      	ldr	r1, [pc, #204]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 800346a:	4313      	orrs	r3, r2
 800346c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800346e:	4b33      	ldr	r3, [pc, #204]	; (800353c <HAL_RCC_OscConfig+0x4dc>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe fa6c 	bl	8001950 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe fa68 	bl	8001950 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e04d      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348e:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x41c>
 800349a:	e045      	b.n	8003528 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_RCC_OscConfig+0x4dc>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a2:	f7fe fa55 	bl	8001950 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fe fa51 	bl	8001950 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e036      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034bc:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x44a>
 80034c8:	e02e      	b.n	8003528 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e029      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034d6:	4b18      	ldr	r3, [pc, #96]	; (8003538 <HAL_RCC_OscConfig+0x4d8>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d11c      	bne.n	8003524 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d115      	bne.n	8003524 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034fe:	4013      	ands	r3, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003504:	4293      	cmp	r3, r2
 8003506:	d10d      	bne.n	8003524 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d106      	bne.n	8003524 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40007000 	.word	0x40007000
 8003538:	40023800 	.word	0x40023800
 800353c:	42470060 	.word	0x42470060

08003540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cc      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d90c      	bls.n	800357c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b65      	ldr	r3, [pc, #404]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800359e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d044      	beq.n	8003660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d119      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e067      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4934      	ldr	r1, [pc, #208]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003630:	f7fe f98e 	bl	8001950 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fe f98a 	bl	8001950 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e04f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d20c      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 f821 	bl	800370c <HAL_RCC_GetSysClockFreq>
 80036ca:	4601      	mov	r1, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	5cd3      	ldrb	r3, [r2, r3]
 80036da:	fa21 f303 	lsr.w	r3, r1, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe f8ee 	bl	80018c8 <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	0800c5f4 	.word	0x0800c5f4
 8003704:	20000000 	.word	0x20000000
 8003708:	20000004 	.word	0x20000004

0800370c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	607b      	str	r3, [r7, #4]
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	2300      	movs	r3, #0
 800371c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003722:	4b50      	ldr	r3, [pc, #320]	; (8003864 <HAL_RCC_GetSysClockFreq+0x158>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b04      	cmp	r3, #4
 800372c:	d007      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0x32>
 800372e:	2b08      	cmp	r3, #8
 8003730:	d008      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x38>
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 808d 	bne.w	8003852 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003738:	4b4b      	ldr	r3, [pc, #300]	; (8003868 <HAL_RCC_GetSysClockFreq+0x15c>)
 800373a:	60bb      	str	r3, [r7, #8]
       break;
 800373c:	e08c      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800373e:	4b4b      	ldr	r3, [pc, #300]	; (800386c <HAL_RCC_GetSysClockFreq+0x160>)
 8003740:	60bb      	str	r3, [r7, #8]
      break;
 8003742:	e089      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003744:	4b47      	ldr	r3, [pc, #284]	; (8003864 <HAL_RCC_GetSysClockFreq+0x158>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800374c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800374e:	4b45      	ldr	r3, [pc, #276]	; (8003864 <HAL_RCC_GetSysClockFreq+0x158>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d023      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375a:	4b42      	ldr	r3, [pc, #264]	; (8003864 <HAL_RCC_GetSysClockFreq+0x158>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	099b      	lsrs	r3, r3, #6
 8003760:	f04f 0400 	mov.w	r4, #0
 8003764:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	ea03 0501 	and.w	r5, r3, r1
 8003770:	ea04 0602 	and.w	r6, r4, r2
 8003774:	4a3d      	ldr	r2, [pc, #244]	; (800386c <HAL_RCC_GetSysClockFreq+0x160>)
 8003776:	fb02 f106 	mul.w	r1, r2, r6
 800377a:	2200      	movs	r2, #0
 800377c:	fb02 f205 	mul.w	r2, r2, r5
 8003780:	440a      	add	r2, r1
 8003782:	493a      	ldr	r1, [pc, #232]	; (800386c <HAL_RCC_GetSysClockFreq+0x160>)
 8003784:	fba5 0101 	umull	r0, r1, r5, r1
 8003788:	1853      	adds	r3, r2, r1
 800378a:	4619      	mov	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f04f 0400 	mov.w	r4, #0
 8003792:	461a      	mov	r2, r3
 8003794:	4623      	mov	r3, r4
 8003796:	f7fc fd73 	bl	8000280 <__aeabi_uldivmod>
 800379a:	4603      	mov	r3, r0
 800379c:	460c      	mov	r4, r1
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e049      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a2:	4b30      	ldr	r3, [pc, #192]	; (8003864 <HAL_RCC_GetSysClockFreq+0x158>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	ea03 0501 	and.w	r5, r3, r1
 80037b8:	ea04 0602 	and.w	r6, r4, r2
 80037bc:	4629      	mov	r1, r5
 80037be:	4632      	mov	r2, r6
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	f04f 0400 	mov.w	r4, #0
 80037c8:	0154      	lsls	r4, r2, #5
 80037ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037ce:	014b      	lsls	r3, r1, #5
 80037d0:	4619      	mov	r1, r3
 80037d2:	4622      	mov	r2, r4
 80037d4:	1b49      	subs	r1, r1, r5
 80037d6:	eb62 0206 	sbc.w	r2, r2, r6
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	f04f 0400 	mov.w	r4, #0
 80037e2:	0194      	lsls	r4, r2, #6
 80037e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037e8:	018b      	lsls	r3, r1, #6
 80037ea:	1a5b      	subs	r3, r3, r1
 80037ec:	eb64 0402 	sbc.w	r4, r4, r2
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	00e2      	lsls	r2, r4, #3
 80037fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037fe:	00d9      	lsls	r1, r3, #3
 8003800:	460b      	mov	r3, r1
 8003802:	4614      	mov	r4, r2
 8003804:	195b      	adds	r3, r3, r5
 8003806:	eb44 0406 	adc.w	r4, r4, r6
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	02a2      	lsls	r2, r4, #10
 8003814:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003818:	0299      	lsls	r1, r3, #10
 800381a:	460b      	mov	r3, r1
 800381c:	4614      	mov	r4, r2
 800381e:	4618      	mov	r0, r3
 8003820:	4621      	mov	r1, r4
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f04f 0400 	mov.w	r4, #0
 8003828:	461a      	mov	r2, r3
 800382a:	4623      	mov	r3, r4
 800382c:	f7fc fd28 	bl	8000280 <__aeabi_uldivmod>
 8003830:	4603      	mov	r3, r0
 8003832:	460c      	mov	r4, r1
 8003834:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_RCC_GetSysClockFreq+0x158>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	3301      	adds	r3, #1
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	60bb      	str	r3, [r7, #8]
      break;
 8003850:	e002      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003854:	60bb      	str	r3, [r7, #8]
      break;
 8003856:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003858:	68bb      	ldr	r3, [r7, #8]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800
 8003868:	00f42400 	.word	0x00f42400
 800386c:	017d7840 	.word	0x017d7840

08003870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_RCC_GetHCLKFreq+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000000 	.word	0x20000000

08003888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800388c:	f7ff fff0 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8003890:	4601      	mov	r1, r0
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	0a9b      	lsrs	r3, r3, #10
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	4a03      	ldr	r2, [pc, #12]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800389e:	5cd3      	ldrb	r3, [r2, r3]
 80038a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40023800 	.word	0x40023800
 80038ac:	0800c604 	.word	0x0800c604

080038b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d035      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038d8:	4b67      	ldr	r3, [pc, #412]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038de:	f7fe f837 	bl	8001950 <HAL_GetTick>
 80038e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038e6:	f7fe f833 	bl	8001950 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e0ba      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038f8:	4b60      	ldr	r3, [pc, #384]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	019a      	lsls	r2, r3, #6
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	071b      	lsls	r3, r3, #28
 8003910:	495a      	ldr	r1, [pc, #360]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003918:	4b57      	ldr	r3, [pc, #348]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800391e:	f7fe f817 	bl	8001950 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003926:	f7fe f813 	bl	8001950 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e09a      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 8083 	beq.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	4a48      	ldr	r2, [pc, #288]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003960:	6413      	str	r3, [r2, #64]	; 0x40
 8003962:	4b46      	ldr	r3, [pc, #280]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800396e:	4b44      	ldr	r3, [pc, #272]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a43      	ldr	r2, [pc, #268]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003978:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800397a:	f7fd ffe9 	bl	8001950 <HAL_GetTick>
 800397e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003982:	f7fd ffe5 	bl	8001950 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e06c      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003994:	4b3a      	ldr	r3, [pc, #232]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039a0:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02f      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d028      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039be:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039c8:	4b2e      	ldr	r3, [pc, #184]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ce:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80039d4:	4a29      	ldr	r2, [pc, #164]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039da:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d114      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039e6:	f7fd ffb3 	bl	8001950 <HAL_GetTick>
 80039ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ee:	f7fd ffaf 	bl	8001950 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e034      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a04:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ee      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a1c:	d10d      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a32:	4912      	ldr	r1, [pc, #72]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	608b      	str	r3, [r1, #8]
 8003a38:	e005      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	4a0f      	ldr	r2, [pc, #60]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a44:	6093      	str	r3, [r2, #8]
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a52:	490a      	ldr	r1, [pc, #40]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7c1a      	ldrb	r2, [r3, #16]
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a6a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	42470068 	.word	0x42470068
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40007000 	.word	0x40007000
 8003a84:	42470e40 	.word	0x42470e40
 8003a88:	424711e0 	.word	0x424711e0

08003a8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e083      	b.n	8003ba6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	7f5b      	ldrb	r3, [r3, #29]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd fbfc 	bl	80012ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	22ca      	movs	r2, #202	; 0xca
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2253      	movs	r2, #83	; 0x53
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f897 	bl	8003bfe <RTC_EnterInitMode>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	22ff      	movs	r2, #255	; 0xff
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e05e      	b.n	8003ba6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003afa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6899      	ldr	r1, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68d2      	ldr	r2, [r2, #12]
 8003b22:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6919      	ldr	r1, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	041a      	lsls	r2, r3, #16
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b46:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10e      	bne.n	8003b74 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f829 	bl	8003bae <HAL_RTC_WaitForSynchro>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	22ff      	movs	r2, #255	; 0xff
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e018      	b.n	8003ba6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	22ff      	movs	r2, #255	; 0xff
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bc8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bca:	f7fd fec1 	bl	8001950 <HAL_GetTick>
 8003bce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003bd0:	e009      	b.n	8003be6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003bd2:	f7fd febd 	bl	8001950 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003be0:	d901      	bls.n	8003be6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e007      	b.n	8003bf6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ee      	beq.n	8003bd2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d119      	bne.n	8003c4c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c22:	f7fd fe95 	bl	8001950 <HAL_GetTick>
 8003c26:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c28:	e009      	b.n	8003c3e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c2a:	f7fd fe91 	bl	8001950 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c38:	d901      	bls.n	8003c3e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e007      	b.n	8003c4e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0ee      	beq.n	8003c2a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e056      	b.n	8003d16 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd fb94 	bl	80013b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	ea42 0103 	orr.w	r1, r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	f003 0104 	and.w	r1, r3, #4
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b088      	sub	sp, #32
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_SPI_Transmit+0x22>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e11e      	b.n	8003f7e <HAL_SPI_Transmit+0x260>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d48:	f7fd fe02 	bl	8001950 <HAL_GetTick>
 8003d4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d002      	beq.n	8003d64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d62:	e103      	b.n	8003f6c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_SPI_Transmit+0x52>
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d74:	e0fa      	b.n	8003f6c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	88fa      	ldrh	r2, [r7, #6]
 8003d8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbc:	d107      	bne.n	8003dce <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	d007      	beq.n	8003dec <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df4:	d14b      	bne.n	8003e8e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_SPI_Transmit+0xe6>
 8003dfe:	8afb      	ldrh	r3, [r7, #22]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d13e      	bne.n	8003e82 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	881a      	ldrh	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	1c9a      	adds	r2, r3, #2
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e28:	e02b      	b.n	8003e82 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d112      	bne.n	8003e5e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	881a      	ldrh	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	1c9a      	adds	r2, r3, #2
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e5c:	e011      	b.n	8003e82 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e5e:	f7fd fd77 	bl	8001950 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d803      	bhi.n	8003e76 <HAL_SPI_Transmit+0x158>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d102      	bne.n	8003e7c <HAL_SPI_Transmit+0x15e>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e80:	e074      	b.n	8003f6c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ce      	bne.n	8003e2a <HAL_SPI_Transmit+0x10c>
 8003e8c:	e04c      	b.n	8003f28 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_SPI_Transmit+0x17e>
 8003e96:	8afb      	ldrh	r3, [r7, #22]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d140      	bne.n	8003f1e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	7812      	ldrb	r2, [r2, #0]
 8003ea8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ec2:	e02c      	b.n	8003f1e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d113      	bne.n	8003efa <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	7812      	ldrb	r2, [r2, #0]
 8003ede:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ef8:	e011      	b.n	8003f1e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003efa:	f7fd fd29 	bl	8001950 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d803      	bhi.n	8003f12 <HAL_SPI_Transmit+0x1f4>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f10:	d102      	bne.n	8003f18 <HAL_SPI_Transmit+0x1fa>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f1c:	e026      	b.n	8003f6c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1cd      	bne.n	8003ec4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	6839      	ldr	r1, [r7, #0]
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f9d9 	bl	80042e4 <SPI_EndRxTxTransaction>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e000      	b.n	8003f6c <HAL_SPI_Transmit+0x24e>
  }

error:
 8003f6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_SPI_Transmit_DMA+0x20>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e093      	b.n	80040d0 <HAL_SPI_Transmit_DMA+0x148>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d002      	beq.n	8003fc2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fc0:	e081      	b.n	80040c6 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_SPI_Transmit_DMA+0x46>
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fd2:	e078      	b.n	80040c6 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401a:	d107      	bne.n	800402c <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800402a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004030:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <HAL_SPI_Transmit_DMA+0x150>)
 8004032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004038:	4a28      	ldr	r2, [pc, #160]	; (80040dc <HAL_SPI_Transmit_DMA+0x154>)
 800403a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004040:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <HAL_SPI_Transmit_DMA+0x158>)
 8004042:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004048:	2200      	movs	r2, #0
 800404a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	4619      	mov	r1, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	330c      	adds	r3, #12
 800405c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004062:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004064:	f7fe fa38 	bl	80024d8 <HAL_DMA_Start_IT>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00c      	beq.n	8004088 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	f043 0210 	orr.w	r2, r3, #16
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004086:	e01e      	b.n	80040c6 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	d007      	beq.n	80040a6 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0220 	orr.w	r2, r2, #32
 80040b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0202 	orr.w	r2, r2, #2
 80040c4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	080041b5 	.word	0x080041b5
 80040dc:	0800410d 	.word	0x0800410d
 80040e0:	080041d1 	.word	0x080041d1

080040e4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800411a:	f7fd fc19 	bl	8001950 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412e:	d03b      	beq.n	80041a8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0220 	bic.w	r2, r2, #32
 800413e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0202 	bic.w	r2, r2, #2
 800414e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	2164      	movs	r1, #100	; 0x64
 8004154:	6978      	ldr	r0, [r7, #20]
 8004156:	f000 f8c5 	bl	80042e4 <SPI_EndRxTxTransaction>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	f043 0220 	orr.w	r2, r3, #32
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2200      	movs	r2, #0
 800418e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80041a0:	6978      	ldr	r0, [r7, #20]
 80041a2:	f7ff ffa9 	bl	80040f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80041a6:	e002      	b.n	80041ae <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80041a8:	6978      	ldr	r0, [r7, #20]
 80041aa:	f7fc fe75 	bl	8000e98 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff ff8e 	bl	80040e4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0203 	bic.w	r2, r2, #3
 80041ec:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	f043 0210 	orr.w	r2, r3, #16
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7ff ff78 	bl	80040f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004220:	e04c      	b.n	80042bc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d048      	beq.n	80042bc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800422a:	f7fd fb91 	bl	8001950 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d902      	bls.n	8004240 <SPI_WaitFlagStateUntilTimeout+0x30>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d13d      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800424e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004258:	d111      	bne.n	800427e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004262:	d004      	beq.n	800426e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426c:	d107      	bne.n	800427e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800427c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004286:	d10f      	bne.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e00f      	b.n	80042dc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	4013      	ands	r3, r2
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d1a3      	bne.n	8004222 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <SPI_EndRxTxTransaction+0x7c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <SPI_EndRxTxTransaction+0x80>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	0d5b      	lsrs	r3, r3, #21
 80042fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004300:	fb02 f303 	mul.w	r3, r2, r3
 8004304:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800430e:	d112      	bne.n	8004336 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2200      	movs	r2, #0
 8004318:	2180      	movs	r1, #128	; 0x80
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff ff78 	bl	8004210 <SPI_WaitFlagStateUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d016      	beq.n	8004354 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e00f      	b.n	8004356 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	3b01      	subs	r3, #1
 8004340:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434c:	2b80      	cmp	r3, #128	; 0x80
 800434e:	d0f2      	beq.n	8004336 <SPI_EndRxTxTransaction+0x52>
 8004350:	e000      	b.n	8004354 <SPI_EndRxTxTransaction+0x70>
        break;
 8004352:	bf00      	nop
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000000 	.word	0x20000000
 8004364:	165e9f81 	.word	0x165e9f81

08004368 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e083      	b.n	8004484 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7fd f9e7 	bl	8001764 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ac:	f023 0307 	bic.w	r3, r3, #7
 80043b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f000 f89d 	bl	80044fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	4313      	orrs	r3, r2
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004408:	f023 030c 	bic.w	r3, r3, #12
 800440c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	4313      	orrs	r3, r2
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	011a      	lsls	r2, r3, #4
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	031b      	lsls	r3, r3, #12
 8004438:	4313      	orrs	r3, r2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800444e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	4313      	orrs	r3, r2
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_TIM_Encoder_Start+0x16>
 800449c:	2b04      	cmp	r3, #4
 800449e:	d008      	beq.n	80044b2 <HAL_TIM_Encoder_Start+0x26>
 80044a0:	e00f      	b.n	80044c2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2201      	movs	r2, #1
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f8a6 	bl	80045fc <TIM_CCxChannelCmd>
      break;
 80044b0:	e016      	b.n	80044e0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2201      	movs	r2, #1
 80044b8:	2104      	movs	r1, #4
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f89e 	bl	80045fc <TIM_CCxChannelCmd>
      break;
 80044c0:	e00e      	b.n	80044e0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2201      	movs	r2, #1
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f896 	bl	80045fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2201      	movs	r2, #1
 80044d6:	2104      	movs	r1, #4
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 f88f 	bl	80045fc <TIM_CCxChannelCmd>
      break;
 80044de:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a34      	ldr	r2, [pc, #208]	; (80045e0 <TIM_Base_SetConfig+0xe4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00f      	beq.n	8004534 <TIM_Base_SetConfig+0x38>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451a:	d00b      	beq.n	8004534 <TIM_Base_SetConfig+0x38>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a31      	ldr	r2, [pc, #196]	; (80045e4 <TIM_Base_SetConfig+0xe8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d007      	beq.n	8004534 <TIM_Base_SetConfig+0x38>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a30      	ldr	r2, [pc, #192]	; (80045e8 <TIM_Base_SetConfig+0xec>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_Base_SetConfig+0x38>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a2f      	ldr	r2, [pc, #188]	; (80045ec <TIM_Base_SetConfig+0xf0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d108      	bne.n	8004546 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a25      	ldr	r2, [pc, #148]	; (80045e0 <TIM_Base_SetConfig+0xe4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01b      	beq.n	8004586 <TIM_Base_SetConfig+0x8a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004554:	d017      	beq.n	8004586 <TIM_Base_SetConfig+0x8a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a22      	ldr	r2, [pc, #136]	; (80045e4 <TIM_Base_SetConfig+0xe8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d013      	beq.n	8004586 <TIM_Base_SetConfig+0x8a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a21      	ldr	r2, [pc, #132]	; (80045e8 <TIM_Base_SetConfig+0xec>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00f      	beq.n	8004586 <TIM_Base_SetConfig+0x8a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a20      	ldr	r2, [pc, #128]	; (80045ec <TIM_Base_SetConfig+0xf0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00b      	beq.n	8004586 <TIM_Base_SetConfig+0x8a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a1f      	ldr	r2, [pc, #124]	; (80045f0 <TIM_Base_SetConfig+0xf4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d007      	beq.n	8004586 <TIM_Base_SetConfig+0x8a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a1e      	ldr	r2, [pc, #120]	; (80045f4 <TIM_Base_SetConfig+0xf8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_Base_SetConfig+0x8a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a1d      	ldr	r2, [pc, #116]	; (80045f8 <TIM_Base_SetConfig+0xfc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d108      	bne.n	8004598 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <TIM_Base_SetConfig+0xe4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d103      	bne.n	80045cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	615a      	str	r2, [r3, #20]
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40014400 	.word	0x40014400
 80045f8:	40014800 	.word	0x40014800

080045fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	2201      	movs	r2, #1
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1a      	ldr	r2, [r3, #32]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	43db      	mvns	r3, r3
 800461e:	401a      	ands	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	fa01 f303 	lsl.w	r3, r1, r3
 8004634:	431a      	orrs	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800465c:	2302      	movs	r3, #2
 800465e:	e050      	b.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a1c      	ldr	r2, [pc, #112]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d018      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ac:	d013      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a18      	ldr	r2, [pc, #96]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00e      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a16      	ldr	r2, [pc, #88]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d009      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a15      	ldr	r2, [pc, #84]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d004      	beq.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d10c      	bne.n	80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40010000 	.word	0x40010000
 8004714:	40000400 	.word	0x40000400
 8004718:	40000800 	.word	0x40000800
 800471c:	40000c00 	.word	0x40000c00
 8004720:	40014000 	.word	0x40014000

08004724 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	881a      	ldrh	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	799b      	ldrb	r3, [r3, #6]
 8004736:	08db      	lsrs	r3, r3, #3
 8004738:	b2db      	uxtb	r3, r3
 800473a:	b29b      	uxth	r3, r3
 800473c:	fb12 f303 	smulbb	r3, r2, r3
 8004740:	b29a      	uxth	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	889b      	ldrh	r3, [r3, #4]
 800474a:	461a      	mov	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	885b      	ldrh	r3, [r3, #2]
 8004750:	fb03 f302 	mul.w	r3, r3, r2
 8004754:	461a      	mov	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	60da      	str	r2, [r3, #12]
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 800476c:	b490      	push	{r4, r7}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	4604      	mov	r4, r0
 8004774:	4608      	mov	r0, r1
 8004776:	1d39      	adds	r1, r7, #4
 8004778:	e881 000c 	stmia.w	r1, {r2, r3}
 800477c:	4623      	mov	r3, r4
 800477e:	81fb      	strh	r3, [r7, #14]
 8004780:	4603      	mov	r3, r0
 8004782:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8004784:	2300      	movs	r3, #0
 8004786:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8004788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800478c:	88ba      	ldrh	r2, [r7, #4]
 800478e:	4293      	cmp	r3, r2
 8004790:	da04      	bge.n	800479c <code+0x30>
        code |= LEFT;
 8004792:	2201      	movs	r2, #1
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	4313      	orrs	r3, r2
 8004798:	75fb      	strb	r3, [r7, #23]
 800479a:	e008      	b.n	80047ae <code+0x42>
    } else if (x0 > window.x1) {
 800479c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047a0:	893a      	ldrh	r2, [r7, #8]
 80047a2:	4293      	cmp	r3, r2
 80047a4:	dd03      	ble.n	80047ae <code+0x42>
        code |= RIGHT;
 80047a6:	2202      	movs	r2, #2
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 80047ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047b2:	88fa      	ldrh	r2, [r7, #6]
 80047b4:	4293      	cmp	r3, r2
 80047b6:	da04      	bge.n	80047c2 <code+0x56>
        code |= BOTTOM;
 80047b8:	2204      	movs	r2, #4
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
 80047bc:	4313      	orrs	r3, r2
 80047be:	75fb      	strb	r3, [r7, #23]
 80047c0:	e008      	b.n	80047d4 <code+0x68>
    } else if (y0 > window.y1) {
 80047c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047c6:	897a      	ldrh	r2, [r7, #10]
 80047c8:	4293      	cmp	r3, r2
 80047ca:	dd03      	ble.n	80047d4 <code+0x68>
        code |= TOP;
 80047cc:	2208      	movs	r2, #8
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc90      	pop	{r4, r7}
 80047de:	4770      	bx	lr

080047e0 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80047fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047fe:	cb0c      	ldmia	r3, {r2, r3}
 8004800:	f7ff ffb4 	bl	800476c <code>
 8004804:	4603      	mov	r3, r0
 8004806:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004818:	cb0c      	ldmia	r3, {r2, r3}
 800481a:	f7ff ffa7 	bl	800476c <code>
 800481e:	4603      	mov	r3, r0
 8004820:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8004822:	2300      	movs	r3, #0
 8004824:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8004826:	7ffa      	ldrb	r2, [r7, #31]
 8004828:	7fbb      	ldrb	r3, [r7, #30]
 800482a:	4313      	orrs	r3, r2
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8004832:	2301      	movs	r3, #1
 8004834:	777b      	strb	r3, [r7, #29]
            break;
 8004836:	e0e9      	b.n	8004a0c <clip_line+0x22c>
        } else if (code0 & code1) {
 8004838:	7ffa      	ldrb	r2, [r7, #31]
 800483a:	7fbb      	ldrb	r3, [r7, #30]
 800483c:	4013      	ands	r3, r2
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	f040 80e2 	bne.w	8004a0a <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 800484e:	7ffb      	ldrb	r3, [r7, #31]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <clip_line+0x78>
 8004854:	7ffb      	ldrb	r3, [r7, #31]
 8004856:	e000      	b.n	800485a <clip_line+0x7a>
 8004858:	7fbb      	ldrb	r3, [r7, #30]
 800485a:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 800485c:	2208      	movs	r2, #8
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	4013      	ands	r3, r2
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d024      	beq.n	80048b2 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800486e:	b29a      	uxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004876:	4619      	mov	r1, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800487e:	1acb      	subs	r3, r1, r3
 8004880:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8004882:	4608      	mov	r0, r1
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	f9b1 1000 	ldrsh.w	r1, [r1]
 800488a:	1a41      	subs	r1, r0, r1
 800488c:	fb01 f103 	mul.w	r1, r1, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004896:	4618      	mov	r0, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800489e:	1ac3      	subs	r3, r0, r3
 80048a0:	fb91 f3f3 	sdiv	r3, r1, r3
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 80048ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048ae:	833b      	strh	r3, [r7, #24]
 80048b0:	e07f      	b.n	80049b2 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 80048b2:	2204      	movs	r2, #4
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
 80048b6:	4013      	ands	r3, r2
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d024      	beq.n	8004908 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048cc:	4619      	mov	r1, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048d4:	1acb      	subs	r3, r1, r3
 80048d6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80048d8:	4608      	mov	r0, r1
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	f9b1 1000 	ldrsh.w	r1, [r1]
 80048e0:	1a41      	subs	r1, r0, r1
 80048e2:	fb01 f103 	mul.w	r1, r1, r3
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048ec:	4618      	mov	r0, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048f4:	1ac3      	subs	r3, r0, r3
 80048f6:	fb91 f3f3 	sdiv	r3, r1, r3
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	4413      	add	r3, r2
 80048fe:	b29b      	uxth	r3, r3
 8004900:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8004902:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004904:	833b      	strh	r3, [r7, #24]
 8004906:	e054      	b.n	80049b2 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8004908:	2202      	movs	r2, #2
 800490a:	7dfb      	ldrb	r3, [r7, #23]
 800490c:	4013      	ands	r3, r2
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d024      	beq.n	800495e <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800491a:	b29a      	uxth	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004922:	4619      	mov	r1, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800492a:	1acb      	subs	r3, r1, r3
 800492c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800492e:	4608      	mov	r0, r1
 8004930:	68f9      	ldr	r1, [r7, #12]
 8004932:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004936:	1a41      	subs	r1, r0, r1
 8004938:	fb01 f103 	mul.w	r1, r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004942:	4618      	mov	r0, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800494a:	1ac3      	subs	r3, r0, r3
 800494c:	fb91 f3f3 	sdiv	r3, r1, r3
 8004950:	b29b      	uxth	r3, r3
 8004952:	4413      	add	r3, r2
 8004954:	b29b      	uxth	r3, r3
 8004956:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8004958:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800495a:	837b      	strh	r3, [r7, #26]
 800495c:	e029      	b.n	80049b2 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 800495e:	2201      	movs	r2, #1
 8004960:	7dfb      	ldrb	r3, [r7, #23]
 8004962:	4013      	ands	r3, r2
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d023      	beq.n	80049b2 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004970:	b29a      	uxth	r2, r3
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004978:	4619      	mov	r1, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004980:	1acb      	subs	r3, r1, r3
 8004982:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004984:	4608      	mov	r0, r1
 8004986:	68f9      	ldr	r1, [r7, #12]
 8004988:	f9b1 1000 	ldrsh.w	r1, [r1]
 800498c:	1a41      	subs	r1, r0, r1
 800498e:	fb01 f103 	mul.w	r1, r1, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004998:	4618      	mov	r0, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049a0:	1ac3      	subs	r3, r0, r3
 80049a2:	fb91 f3f3 	sdiv	r3, r1, r3
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 80049ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80049b0:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 80049b2:	7dfa      	ldrb	r2, [r7, #23]
 80049b4:	7ffb      	ldrb	r3, [r7, #31]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d113      	bne.n	80049e2 <clip_line+0x202>
                *x0 = x;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8b7a      	ldrh	r2, [r7, #26]
 80049be:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	8b3a      	ldrh	r2, [r7, #24]
 80049c4:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f9b3 0000 	ldrsh.w	r0, [r3]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f9b3 1000 	ldrsh.w	r1, [r3]
 80049d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049d6:	cb0c      	ldmia	r3, {r2, r3}
 80049d8:	f7ff fec8 	bl	800476c <code>
 80049dc:	4603      	mov	r3, r0
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e721      	b.n	8004826 <clip_line+0x46>
            } else {
                *x1 = x;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8b7a      	ldrh	r2, [r7, #26]
 80049e6:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	8b3a      	ldrh	r2, [r7, #24]
 80049ec:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80049fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049fe:	cb0c      	ldmia	r3, {r2, r3}
 8004a00:	f7ff feb4 	bl	800476c <code>
 8004a04:	4603      	mov	r3, r0
 8004a06:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8004a08:	e70d      	b.n	8004826 <clip_line+0x46>
            break;
 8004a0a:	bf00      	nop
            }
        }
    }

    return accept;
 8004a0c:	7f7b      	ldrb	r3, [r7, #29]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	3306      	adds	r3, #6
 8004a26:	2208      	movs	r2, #8
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f000 fed1 	bl	80057d0 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	7b9a      	ldrb	r2, [r3, #14]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	7bda      	ldrb	r2, [r3, #15]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	7c1a      	ldrb	r2, [r3, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	72da      	strb	r2, [r3, #11]

    return 0;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08e      	sub	sp, #56	; 0x38
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8004a5c:	f107 0314 	add.w	r3, r7, #20
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff ffd7 	bl	8004a16 <fontx_meta>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8004a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <fontx_glyph+0x2c>
        return status;
 8004a76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a7a:	e077      	b.n	8004b6c <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8004a7c:	7f7a      	ldrb	r2, [r7, #29]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8004a82:	7fba      	ldrb	r2, [r7, #30]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8004a88:	7f7b      	ldrb	r3, [r7, #29]
 8004a8a:	3307      	adds	r3, #7
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	da00      	bge.n	8004a92 <fontx_glyph+0x42>
 8004a90:	3307      	adds	r3, #7
 8004a92:	10db      	asrs	r3, r3, #3
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	78da      	ldrb	r2, [r3, #3]
 8004a9e:	7fbb      	ldrb	r3, [r7, #30]
 8004aa0:	fb12 f303 	smulbb	r3, r2, r3
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8004aaa:	7ffb      	ldrb	r3, [r7, #31]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10f      	bne.n	8004ad0 <fontx_glyph+0x80>
        if (code < 0x100) {
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2bff      	cmp	r3, #255	; 0xff
 8004ab4:	d859      	bhi.n	8004b6a <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	789b      	ldrb	r3, [r3, #2]
 8004aba:	461a      	mov	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	fb03 f302 	mul.w	r3, r3, r2
 8004ac2:	3311      	adds	r3, #17
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	441a      	add	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e04d      	b.n	8004b6c <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3312      	adds	r3, #18
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3311      	adds	r3, #17
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8004ae2:	e03d      	b.n	8004b60 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	3301      	adds	r3, #1
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	4413      	add	r3, r2
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	3302      	adds	r3, #2
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	3303      	adds	r3, #3
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	4413      	add	r3, r2
 8004b08:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d31c      	bcc.n	8004b4c <fontx_glyph+0xfc>
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d818      	bhi.n	8004b4c <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b22:	4413      	add	r3, r2
 8004b24:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3311      	adds	r3, #17
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	461a      	mov	r2, r3
                    nc * glyph->size
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	789b      	ldrb	r3, [r3, #2]
 8004b34:	4619      	mov	r1, r3
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	fb03 f301 	mul.w	r3, r3, r1
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	441a      	add	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e00f      	b.n	8004b6c <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8004b4c:	6a3a      	ldr	r2, [r7, #32]
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	1ad2      	subs	r2, r2, r3
 8004b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b54:	4413      	add	r3, r2
 8004b56:	3301      	adds	r3, #1
 8004b58:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	1e5a      	subs	r2, r3, #1
 8004b64:	633a      	str	r2, [r7, #48]	; 0x30
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1bc      	bne.n	8004ae4 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3738      	adds	r7, #56	; 0x38
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	dd01      	ble.n	8004b8a <min+0x16>
        return b;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	e000      	b.n	8004b8c <min+0x18>
    };
    return a;
 8004b8a:	687b      	ldr	r3, [r7, #4]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <max>:

static inline int max(int a, int b) {
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	dd01      	ble.n	8004bae <max+0x16>
        return a;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	e000      	b.n	8004bb0 <max+0x18>
    }
    return b;
 8004bae:	683b      	ldr	r3, [r7, #0]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8004bbc:	b490      	push	{r4, r7}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4623      	mov	r3, r4
 8004bcc:	80fb      	strh	r3, [r7, #6]
 8004bce:	4603      	mov	r3, r0
 8004bd0:	80bb      	strh	r3, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	807b      	strh	r3, [r7, #2]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 8004bda:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <hagl_set_clip_window+0x40>)
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 8004be0:	4a06      	ldr	r2, [pc, #24]	; (8004bfc <hagl_set_clip_window+0x40>)
 8004be2:	88bb      	ldrh	r3, [r7, #4]
 8004be4:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 8004be6:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <hagl_set_clip_window+0x40>)
 8004be8:	887b      	ldrh	r3, [r7, #2]
 8004bea:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 8004bec:	4a03      	ldr	r2, [pc, #12]	; (8004bfc <hagl_set_clip_window+0x40>)
 8004bee:	883b      	ldrh	r3, [r7, #0]
 8004bf0:	80d3      	strh	r3, [r2, #6]
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc90      	pop	{r4, r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	2000000c 	.word	0x2000000c

08004c00 <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	80fb      	strh	r3, [r7, #6]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	80bb      	strh	r3, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8004c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c16:	4a12      	ldr	r2, [pc, #72]	; (8004c60 <hagl_put_pixel+0x60>)
 8004c18:	8812      	ldrh	r2, [r2, #0]
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	db1a      	blt.n	8004c54 <hagl_put_pixel+0x54>
 8004c1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c22:	4a0f      	ldr	r2, [pc, #60]	; (8004c60 <hagl_put_pixel+0x60>)
 8004c24:	8852      	ldrh	r2, [r2, #2]
 8004c26:	4293      	cmp	r3, r2
 8004c28:	db14      	blt.n	8004c54 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8004c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c2e:	4a0c      	ldr	r2, [pc, #48]	; (8004c60 <hagl_put_pixel+0x60>)
 8004c30:	8892      	ldrh	r2, [r2, #4]
 8004c32:	4293      	cmp	r3, r2
 8004c34:	dc10      	bgt.n	8004c58 <hagl_put_pixel+0x58>
 8004c36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c3a:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <hagl_put_pixel+0x60>)
 8004c3c:	88d2      	ldrh	r2, [r2, #6]
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	dc0a      	bgt.n	8004c58 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8004c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004c4a:	887a      	ldrh	r2, [r7, #2]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fb ffef 	bl	8000c30 <lcd_put_pixel>
 8004c52:	e002      	b.n	8004c5a <hagl_put_pixel+0x5a>
        return;
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <hagl_put_pixel+0x5a>
        return;
 8004c58:	bf00      	nop
}
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	2000000c 	.word	0x2000000c

08004c64 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	4623      	mov	r3, r4
 8004c74:	80fb      	strh	r3, [r7, #6]
 8004c76:	4603      	mov	r3, r0
 8004c78:	80bb      	strh	r3, [r7, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	807b      	strh	r3, [r7, #2]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8004c82:	88fa      	ldrh	r2, [r7, #6]
 8004c84:	887b      	ldrh	r3, [r7, #2]
 8004c86:	4413      	add	r3, r2
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	b21a      	sxth	r2, r3
 8004c8c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004c90:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004c94:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004c98:	883b      	ldrh	r3, [r7, #0]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	f000 f827 	bl	8004cf0 <hagl_draw_line>
#endif
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd90      	pop	{r4, r7, pc}

08004caa <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8004caa:	b590      	push	{r4, r7, lr}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af02      	add	r7, sp, #8
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	4608      	mov	r0, r1
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	4623      	mov	r3, r4
 8004cba:	80fb      	strh	r3, [r7, #6]
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	80bb      	strh	r3, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	807b      	strh	r3, [r7, #2]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8004cc8:	88ba      	ldrh	r2, [r7, #4]
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	4413      	add	r3, r2
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	b21c      	sxth	r4, r3
 8004cd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004cd6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004cda:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004cde:	883b      	ldrh	r3, [r7, #0]
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	f000 f804 	bl	8004cf0 <hagl_draw_line>
#endif
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd90      	pop	{r4, r7, pc}

08004cf0 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8004cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf2:	b089      	sub	sp, #36	; 0x24
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	4608      	mov	r0, r1
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4623      	mov	r3, r4
 8004d00:	80fb      	strh	r3, [r7, #6]
 8004d02:	4603      	mov	r3, r0
 8004d04:	80bb      	strh	r3, [r7, #4]
 8004d06:	460b      	mov	r3, r1
 8004d08:	807b      	strh	r3, [r7, #2]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8004d0e:	463b      	mov	r3, r7
 8004d10:	1cba      	adds	r2, r7, #2
 8004d12:	1d3d      	adds	r5, r7, #4
 8004d14:	1dbc      	adds	r4, r7, #6
 8004d16:	494a      	ldr	r1, [pc, #296]	; (8004e40 <hagl_draw_line+0x150>)
 8004d18:	466e      	mov	r6, sp
 8004d1a:	c903      	ldmia	r1, {r0, r1}
 8004d1c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004d20:	4629      	mov	r1, r5
 8004d22:	4620      	mov	r0, r4
 8004d24:	f7ff fd5c 	bl	80047e0 <clip_line>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f083 0301 	eor.w	r3, r3, #1
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d17e      	bne.n	8004e32 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8004d34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bfb8      	it	lt
 8004d44:	425b      	neglt	r3, r3
 8004d46:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8004d48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	da01      	bge.n	8004d58 <hagl_draw_line+0x68>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e001      	b.n	8004d5c <hagl_draw_line+0x6c>
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5c:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8004d5e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bfb8      	it	lt
 8004d6e:	425b      	neglt	r3, r3
 8004d70:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8004d72:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004d76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	da01      	bge.n	8004d82 <hagl_draw_line+0x92>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e001      	b.n	8004d86 <hagl_draw_line+0x96>
 8004d82:	f04f 33ff 	mov.w	r3, #4294967295
 8004d86:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8004d88:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004d8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	dd06      	ble.n	8004da2 <hagl_draw_line+0xb2>
 8004d94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d98:	0fda      	lsrs	r2, r3, #31
 8004d9a:	4413      	add	r3, r2
 8004d9c:	105b      	asrs	r3, r3, #1
 8004d9e:	b21b      	sxth	r3, r3
 8004da0:	e006      	b.n	8004db0 <hagl_draw_line+0xc0>
 8004da2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004da6:	425b      	negs	r3, r3
 8004da8:	0fda      	lsrs	r2, r3, #31
 8004daa:	4413      	add	r3, r2
 8004dac:	105b      	asrs	r3, r3, #1
 8004dae:	b21b      	sxth	r3, r3
 8004db0:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8004db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004db6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004dba:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff ff1f 	bl	8004c00 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8004dc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004dc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d105      	bne.n	8004dda <hagl_draw_line+0xea>
 8004dce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004dd2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d02d      	beq.n	8004e36 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8004dda:	8afb      	ldrh	r3, [r7, #22]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8004de2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004de6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004dea:	425b      	negs	r3, r3
 8004dec:	429a      	cmp	r2, r3
 8004dee:	dd0c      	ble.n	8004e0a <hagl_draw_line+0x11a>
            err -= dy;
 8004df0:	8afa      	ldrh	r2, [r7, #22]
 8004df2:	8a3b      	ldrh	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8004dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	8a7b      	ldrh	r3, [r7, #18]
 8004e02:	4413      	add	r3, r2
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	b21b      	sxth	r3, r3
 8004e08:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8004e0a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004e0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	dacd      	bge.n	8004db2 <hagl_draw_line+0xc2>
            err += dx;
 8004e16:	8afa      	ldrh	r2, [r7, #22]
 8004e18:	8abb      	ldrh	r3, [r7, #20]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8004e20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	89fb      	ldrh	r3, [r7, #14]
 8004e28:	4413      	add	r3, r2
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	b21b      	sxth	r3, r3
 8004e2e:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8004e30:	e7bf      	b.n	8004db2 <hagl_draw_line+0xc2>
        return;
 8004e32:	bf00      	nop
 8004e34:	e000      	b.n	8004e38 <hagl_draw_line+0x148>
            break;
 8004e36:	bf00      	nop
        }
    }
}
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	2000000c 	.word	0x2000000c

08004e44 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8004e44:	b590      	push	{r4, r7, lr}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	461a      	mov	r2, r3
 8004e52:	4623      	mov	r3, r4
 8004e54:	80fb      	strh	r3, [r7, #6]
 8004e56:	4603      	mov	r3, r0
 8004e58:	80bb      	strh	r3, [r7, #4]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	807b      	strh	r3, [r7, #2]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8004e62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	dd0e      	ble.n	8004e8c <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	887b      	ldrh	r3, [r7, #2]
 8004e72:	4413      	add	r3, r2
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8004e78:	88fa      	ldrh	r2, [r7, #6]
 8004e7a:	887b      	ldrh	r3, [r7, #2]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8004e82:	88fa      	ldrh	r2, [r7, #6]
 8004e84:	887b      	ldrh	r3, [r7, #2]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8004e8c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004e90:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	dd0e      	ble.n	8004eb6 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8004e98:	88ba      	ldrh	r2, [r7, #4]
 8004e9a:	883b      	ldrh	r3, [r7, #0]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8004ea2:	88ba      	ldrh	r2, [r7, #4]
 8004ea4:	883b      	ldrh	r3, [r7, #0]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8004eac:	88ba      	ldrh	r2, [r7, #4]
 8004eae:	883b      	ldrh	r3, [r7, #0]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8004eb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004eba:	4a24      	ldr	r2, [pc, #144]	; (8004f4c <hagl_draw_rectangle+0x108>)
 8004ebc:	8812      	ldrh	r2, [r2, #0]
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	db3e      	blt.n	8004f40 <hagl_draw_rectangle+0xfc>
 8004ec2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004ec6:	4a21      	ldr	r2, [pc, #132]	; (8004f4c <hagl_draw_rectangle+0x108>)
 8004ec8:	8852      	ldrh	r2, [r2, #2]
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	db38      	blt.n	8004f40 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8004ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ed2:	4a1e      	ldr	r2, [pc, #120]	; (8004f4c <hagl_draw_rectangle+0x108>)
 8004ed4:	8892      	ldrh	r2, [r2, #4]
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	dc34      	bgt.n	8004f44 <hagl_draw_rectangle+0x100>
 8004eda:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ede:	4a1b      	ldr	r2, [pc, #108]	; (8004f4c <hagl_draw_rectangle+0x108>)
 8004ee0:	88d2      	ldrh	r2, [r2, #6]
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	dc2e      	bgt.n	8004f44 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 8004ee6:	887a      	ldrh	r2, [r7, #2]
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 8004ef2:	883a      	ldrh	r2, [r7, #0]
 8004ef4:	88bb      	ldrh	r3, [r7, #4]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3301      	adds	r3, #1
 8004efc:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 8004efe:	8c3b      	ldrh	r3, [r7, #32]
 8004f00:	89fa      	ldrh	r2, [r7, #14]
 8004f02:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004f06:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004f0a:	f7ff feab 	bl	8004c64 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 8004f0e:	8c3b      	ldrh	r3, [r7, #32]
 8004f10:	89fa      	ldrh	r2, [r7, #14]
 8004f12:	f9b7 1000 	ldrsh.w	r1, [r7]
 8004f16:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004f1a:	f7ff fea3 	bl	8004c64 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 8004f1e:	8c3b      	ldrh	r3, [r7, #32]
 8004f20:	89ba      	ldrh	r2, [r7, #12]
 8004f22:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004f26:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004f2a:	f7ff febe 	bl	8004caa <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 8004f2e:	8c3b      	ldrh	r3, [r7, #32]
 8004f30:	89ba      	ldrh	r2, [r7, #12]
 8004f32:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004f36:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8004f3a:	f7ff feb6 	bl	8004caa <hagl_draw_vline>
 8004f3e:	e002      	b.n	8004f46 <hagl_draw_rectangle+0x102>
        return;
 8004f40:	bf00      	nop
 8004f42:	e000      	b.n	8004f46 <hagl_draw_rectangle+0x102>
        return;
 8004f44:	bf00      	nop
}
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd90      	pop	{r4, r7, pc}
 8004f4c:	2000000c 	.word	0x2000000c

08004f50 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4604      	mov	r4, r0
 8004f58:	4608      	mov	r0, r1
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4623      	mov	r3, r4
 8004f60:	80fb      	strh	r3, [r7, #6]
 8004f62:	4603      	mov	r3, r0
 8004f64:	80bb      	strh	r3, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	807b      	strh	r3, [r7, #2]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8004f6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	dd0e      	ble.n	8004f98 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	4413      	add	r3, r2
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	887b      	ldrh	r3, [r7, #2]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8004f8e:	88fa      	ldrh	r2, [r7, #6]
 8004f90:	887b      	ldrh	r3, [r7, #2]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8004f98:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004f9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	dd0e      	ble.n	8004fc2 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8004fa4:	88ba      	ldrh	r2, [r7, #4]
 8004fa6:	883b      	ldrh	r3, [r7, #0]
 8004fa8:	4413      	add	r3, r2
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8004fae:	88ba      	ldrh	r2, [r7, #4]
 8004fb0:	883b      	ldrh	r3, [r7, #0]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8004fb8:	88ba      	ldrh	r2, [r7, #4]
 8004fba:	883b      	ldrh	r3, [r7, #0]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8004fc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fc6:	4a33      	ldr	r2, [pc, #204]	; (8005094 <hagl_fill_rectangle+0x144>)
 8004fc8:	8812      	ldrh	r2, [r2, #0]
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	db5b      	blt.n	8005086 <hagl_fill_rectangle+0x136>
 8004fce:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004fd2:	4a30      	ldr	r2, [pc, #192]	; (8005094 <hagl_fill_rectangle+0x144>)
 8004fd4:	8852      	ldrh	r2, [r2, #2]
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	db55      	blt.n	8005086 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8004fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fde:	4a2d      	ldr	r2, [pc, #180]	; (8005094 <hagl_fill_rectangle+0x144>)
 8004fe0:	8892      	ldrh	r2, [r2, #4]
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	dc51      	bgt.n	800508a <hagl_fill_rectangle+0x13a>
 8004fe6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004fea:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <hagl_fill_rectangle+0x144>)
 8004fec:	88d2      	ldrh	r2, [r2, #6]
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	dc4b      	bgt.n	800508a <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8004ff2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ff6:	4b27      	ldr	r3, [pc, #156]	; (8005094 <hagl_fill_rectangle+0x144>)
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	f7ff fdcb 	bl	8004b98 <max>
 8005002:	4603      	mov	r3, r0
 8005004:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8005006:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800500a:	4b22      	ldr	r3, [pc, #136]	; (8005094 <hagl_fill_rectangle+0x144>)
 800500c:	885b      	ldrh	r3, [r3, #2]
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f7ff fdc1 	bl	8004b98 <max>
 8005016:	4603      	mov	r3, r0
 8005018:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800501a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800501e:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <hagl_fill_rectangle+0x144>)
 8005020:	889b      	ldrh	r3, [r3, #4]
 8005022:	4619      	mov	r1, r3
 8005024:	4610      	mov	r0, r2
 8005026:	f7ff fda5 	bl	8004b74 <min>
 800502a:	4603      	mov	r3, r0
 800502c:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800502e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005032:	4b18      	ldr	r3, [pc, #96]	; (8005094 <hagl_fill_rectangle+0x144>)
 8005034:	88db      	ldrh	r3, [r3, #6]
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f7ff fd9b 	bl	8004b74 <min>
 800503e:	4603      	mov	r3, r0
 8005040:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8005042:	887a      	ldrh	r2, [r7, #2]
 8005044:	88fb      	ldrh	r3, [r7, #6]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	b29b      	uxth	r3, r3
 800504a:	3301      	adds	r3, #1
 800504c:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800504e:	883a      	ldrh	r2, [r7, #0]
 8005050:	88bb      	ldrh	r3, [r7, #4]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	b29b      	uxth	r3, r3
 8005056:	3301      	adds	r3, #1
 8005058:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 800505a:	2300      	movs	r3, #0
 800505c:	81fb      	strh	r3, [r7, #14]
 800505e:	e00d      	b.n	800507c <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8005060:	88ba      	ldrh	r2, [r7, #4]
 8005062:	89fb      	ldrh	r3, [r7, #14]
 8005064:	4413      	add	r3, r2
 8005066:	b29b      	uxth	r3, r3
 8005068:	b219      	sxth	r1, r3
 800506a:	8c3b      	ldrh	r3, [r7, #32]
 800506c:	89ba      	ldrh	r2, [r7, #12]
 800506e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005072:	f7ff fdf7 	bl	8004c64 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8005076:	89fb      	ldrh	r3, [r7, #14]
 8005078:	3301      	adds	r3, #1
 800507a:	81fb      	strh	r3, [r7, #14]
 800507c:	89fa      	ldrh	r2, [r7, #14]
 800507e:	897b      	ldrh	r3, [r7, #10]
 8005080:	429a      	cmp	r2, r3
 8005082:	d3ed      	bcc.n	8005060 <hagl_fill_rectangle+0x110>
 8005084:	e002      	b.n	800508c <hagl_fill_rectangle+0x13c>
        return;
 8005086:	bf00      	nop
 8005088:	e000      	b.n	800508c <hagl_fill_rectangle+0x13c>
        return;
 800508a:	bf00      	nop
#endif
    }
}
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	bf00      	nop
 8005094:	2000000c 	.word	0x2000000c

08005098 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	f107 0410 	add.w	r4, r7, #16
 80050a6:	3c04      	subs	r4, #4
 80050a8:	6020      	str	r0, [r4, #0]
 80050aa:	460c      	mov	r4, r1
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	f107 0310 	add.w	r3, r7, #16
 80050b4:	3b06      	subs	r3, #6
 80050b6:	4622      	mov	r2, r4
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	f107 0310 	add.w	r3, r7, #16
 80050be:	3b08      	subs	r3, #8
 80050c0:	4602      	mov	r2, r0
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	f107 0310 	add.w	r3, r7, #16
 80050c8:	3b0a      	subs	r3, #10
 80050ca:	460a      	mov	r2, r1
 80050cc:	801a      	strh	r2, [r3, #0]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80050ce:	f107 0310 	add.w	r3, r7, #16
 80050d2:	3b04      	subs	r3, #4
 80050d4:	f107 0010 	add.w	r0, r7, #16
 80050d8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	6819      	ldr	r1, [r3, #0]
 80050e0:	f7ff fcb6 	bl	8004a50 <fontx_glyph>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80050ea:	f102 0209 	add.w	r2, r2, #9
 80050ee:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80050f0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80050f4:	f103 0309 	add.w	r3, r3, #9
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <hagl_put_char+0x6a>
        return 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	e0ba      	b.n	8005278 <hagl_put_char+0x1e0>
    }

    bitmap.width = glyph.width,
 8005102:	f107 0310 	add.w	r3, r7, #16
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	b29a      	uxth	r2, r3
 800510a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800510e:	3b18      	subs	r3, #24
 8005110:	801a      	strh	r2, [r3, #0]
    bitmap.height = glyph.height,
 8005112:	f107 0310 	add.w	r3, r7, #16
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	b29a      	uxth	r2, r3
 800511a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800511e:	3b18      	subs	r3, #24
 8005120:	805a      	strh	r2, [r3, #2]
    bitmap.depth = DISPLAY_DEPTH,
 8005122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005126:	3b18      	subs	r3, #24
 8005128:	2210      	movs	r2, #16
 800512a:	719a      	strb	r2, [r3, #6]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 800512c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005130:	3a08      	subs	r2, #8
 8005132:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005136:	3b18      	subs	r3, #24
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff faf2 	bl	8004724 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8005140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005144:	3b18      	subs	r3, #24
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800514c:	f102 020c 	add.w	r2, r2, #12
 8005150:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8005152:	2300      	movs	r3, #0
 8005154:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005158:	f102 020b 	add.w	r2, r2, #11
 800515c:	7013      	strb	r3, [r2, #0]
 800515e:	e06c      	b.n	800523a <hagl_put_char+0x1a2>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8005160:	2300      	movs	r3, #0
 8005162:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005166:	f102 020a 	add.w	r2, r2, #10
 800516a:	7013      	strb	r3, [r2, #0]
 800516c:	e046      	b.n	80051fc <hagl_put_char+0x164>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800516e:	f107 0310 	add.w	r3, r7, #16
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	b25a      	sxtb	r2, r3
 8005178:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800517c:	f103 030a 	add.w	r3, r3, #10
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2180      	movs	r1, #128	; 0x80
 8005188:	fa41 f303 	asr.w	r3, r1, r3
 800518c:	b25b      	sxtb	r3, r3
 800518e:	4013      	ands	r3, r2
 8005190:	b25b      	sxtb	r3, r3
 8005192:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005196:	f102 0208 	add.w	r2, r2, #8
 800519a:	7013      	strb	r3, [r2, #0]
            if (set) {
 800519c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80051a0:	f103 0308 	add.w	r3, r3, #8
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d010      	beq.n	80051cc <hagl_put_char+0x134>
                *(ptr++) = color;
 80051aa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80051ae:	f103 030c 	add.w	r3, r3, #12
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	1c93      	adds	r3, r2, #2
 80051b6:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80051ba:	f101 010c 	add.w	r1, r1, #12
 80051be:	600b      	str	r3, [r1, #0]
 80051c0:	f107 0310 	add.w	r3, r7, #16
 80051c4:	3b0a      	subs	r3, #10
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	8013      	strh	r3, [r2, #0]
 80051ca:	e00c      	b.n	80051e6 <hagl_put_char+0x14e>
            } else {
                *(ptr++) = 0x0000;
 80051cc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80051d0:	f103 030c 	add.w	r3, r3, #12
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	1c9a      	adds	r2, r3, #2
 80051d8:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80051dc:	f101 010c 	add.w	r1, r1, #12
 80051e0:	600a      	str	r2, [r1, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80051e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80051ea:	f103 030a 	add.w	r3, r3, #10
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80051f6:	f102 020a 	add.w	r2, r2, #10
 80051fa:	7013      	strb	r3, [r2, #0]
 80051fc:	f107 0310 	add.w	r3, r7, #16
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005206:	f102 020a 	add.w	r2, r2, #10
 800520a:	7812      	ldrb	r2, [r2, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d3ae      	bcc.n	800516e <hagl_put_char+0xd6>
            }
        }
        glyph.buffer += glyph.pitch;
 8005210:	f107 0310 	add.w	r3, r7, #16
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f107 0210 	add.w	r2, r7, #16
 800521a:	78d2      	ldrb	r2, [r2, #3]
 800521c:	441a      	add	r2, r3
 800521e:	f107 0310 	add.w	r3, r7, #16
 8005222:	605a      	str	r2, [r3, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8005224:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005228:	f103 030b 	add.w	r3, r3, #11
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	3301      	adds	r3, #1
 8005230:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005234:	f102 020b 	add.w	r2, r2, #11
 8005238:	7013      	strb	r3, [r2, #0]
 800523a:	f107 0310 	add.w	r3, r7, #16
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005244:	f102 020b 	add.w	r2, r2, #11
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d388      	bcc.n	8005160 <hagl_put_char+0xc8>
    }

    hagl_blit(x0, y0, &bitmap);
 800524e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005252:	3a18      	subs	r2, #24
 8005254:	f107 0310 	add.w	r3, r7, #16
 8005258:	3b08      	subs	r3, #8
 800525a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800525e:	f107 0310 	add.w	r3, r7, #16
 8005262:	3b06      	subs	r3, #6
 8005264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005268:	4618      	mov	r0, r3
 800526a:	f000 f858 	bl	800531e <hagl_blit>

    return bitmap.width;
 800526e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005272:	3b18      	subs	r3, #24
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b2db      	uxtb	r3, r3
}
 8005278:	4618      	mov	r0, r3
 800527a:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	bd90      	pop	{r4, r7, pc}

08005284 <hagl_put_text>:
 * continue from the next line.
 */

//uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
uint16_t hagl_put_text(const char *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8005284:	b590      	push	{r4, r7, lr}
 8005286:	b08b      	sub	sp, #44	; 0x2c
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	4608      	mov	r0, r1
 800528e:	4611      	mov	r1, r2
 8005290:	461a      	mov	r2, r3
 8005292:	4603      	mov	r3, r0
 8005294:	817b      	strh	r3, [r7, #10]
 8005296:	460b      	mov	r3, r1
 8005298:	813b      	strh	r3, [r7, #8]
 800529a:	4613      	mov	r3, r2
 800529c:	80fb      	strh	r3, [r7, #6]
    char temp;
    uint8_t status;
    uint16_t original = x0;
 800529e:	897b      	ldrh	r3, [r7, #10]
 80052a0:	83fb      	strh	r3, [r7, #30]
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80052a2:	f107 0310 	add.w	r3, r7, #16
 80052a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fbb4 	bl	8004a16 <fontx_meta>
 80052ae:	4603      	mov	r3, r0
 80052b0:	777b      	strb	r3, [r7, #29]
    if (0 != status) {
 80052b2:	7f7b      	ldrb	r3, [r7, #29]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <hagl_put_text+0x38>
        return 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e02c      	b.n	8005316 <hagl_put_text+0x92>
    }

    do {
        temp = *str++;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	60fa      	str	r2, [r7, #12]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	773b      	strb	r3, [r7, #28]
        if (13 == temp || 10 == temp) {
 80052c6:	7f3b      	ldrb	r3, [r7, #28]
 80052c8:	2b0d      	cmp	r3, #13
 80052ca:	d002      	beq.n	80052d2 <hagl_put_text+0x4e>
 80052cc:	7f3b      	ldrb	r3, [r7, #28]
 80052ce:	2b0a      	cmp	r3, #10
 80052d0:	d108      	bne.n	80052e4 <hagl_put_text+0x60>
            x0 = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80052d6:	7ebb      	ldrb	r3, [r7, #26]
 80052d8:	b29a      	uxth	r2, r3
 80052da:	893b      	ldrh	r3, [r7, #8]
 80052dc:	4413      	add	r3, r2
 80052de:	b29b      	uxth	r3, r3
 80052e0:	813b      	strh	r3, [r7, #8]
 80052e2:	e010      	b.n	8005306 <hagl_put_text+0x82>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80052e4:	7f38      	ldrb	r0, [r7, #28]
 80052e6:	88fc      	ldrh	r4, [r7, #6]
 80052e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80052ec:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	4623      	mov	r3, r4
 80052f6:	f7ff fecf 	bl	8005098 <hagl_put_char>
 80052fa:	4603      	mov	r3, r0
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	897b      	ldrh	r3, [r7, #10]
 8005300:	4413      	add	r3, r2
 8005302:	b29b      	uxth	r3, r3
 8005304:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1d6      	bne.n	80052bc <hagl_put_text+0x38>

    return x0 - original;
 800530e:	897a      	ldrh	r2, [r7, #10]
 8005310:	8bfb      	ldrh	r3, [r7, #30]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	b29b      	uxth	r3, r3
}
 8005316:	4618      	mov	r0, r3
 8005318:	3724      	adds	r7, #36	; 0x24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd90      	pop	{r4, r7, pc}

0800531e <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800531e:	b580      	push	{r7, lr}
 8005320:	b086      	sub	sp, #24
 8005322:	af00      	add	r7, sp, #0
 8005324:	4603      	mov	r3, r0
 8005326:	603a      	str	r2, [r7, #0]
 8005328:	80fb      	strh	r3, [r7, #6]
 800532a:	460b      	mov	r3, r1
 800532c:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8005334:	2300      	movs	r3, #0
 8005336:	827b      	strh	r3, [r7, #18]
 8005338:	e020      	b.n	800537c <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800533a:	2300      	movs	r3, #0
 800533c:	823b      	strh	r3, [r7, #16]
 800533e:	e015      	b.n	800536c <hagl_blit+0x4e>
            color = *(ptr++);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1c9a      	adds	r2, r3, #2
 8005344:	617a      	str	r2, [r7, #20]
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800534a:	88fa      	ldrh	r2, [r7, #6]
 800534c:	8a3b      	ldrh	r3, [r7, #16]
 800534e:	4413      	add	r3, r2
 8005350:	b29b      	uxth	r3, r3
 8005352:	b218      	sxth	r0, r3
 8005354:	88ba      	ldrh	r2, [r7, #4]
 8005356:	8a7b      	ldrh	r3, [r7, #18]
 8005358:	4413      	add	r3, r2
 800535a:	b29b      	uxth	r3, r3
 800535c:	b21b      	sxth	r3, r3
 800535e:	89fa      	ldrh	r2, [r7, #14]
 8005360:	4619      	mov	r1, r3
 8005362:	f7ff fc4d 	bl	8004c00 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8005366:	8a3b      	ldrh	r3, [r7, #16]
 8005368:	3301      	adds	r3, #1
 800536a:	823b      	strh	r3, [r7, #16]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	8a3a      	ldrh	r2, [r7, #16]
 8005372:	429a      	cmp	r2, r3
 8005374:	d3e4      	bcc.n	8005340 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8005376:	8a7b      	ldrh	r3, [r7, #18]
 8005378:	3301      	adds	r3, #1
 800537a:	827b      	strh	r3, [r7, #18]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	885b      	ldrh	r3, [r3, #2]
 8005380:	8a7a      	ldrh	r2, [r7, #18]
 8005382:	429a      	cmp	r2, r3
 8005384:	d3d9      	bcc.n	800533a <hagl_blit+0x1c>
        }
    }
#endif
};
 8005386:	bf00      	nop
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 8005396:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <hagl_clear_screen+0x50>)
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 800539c:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <hagl_clear_screen+0x50>)
 800539e:	885b      	ldrh	r3, [r3, #2]
 80053a0:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 80053a2:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <hagl_clear_screen+0x50>)
 80053a4:	889b      	ldrh	r3, [r3, #4]
 80053a6:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 80053a8:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <hagl_clear_screen+0x50>)
 80053aa:	88db      	ldrh	r3, [r3, #6]
 80053ac:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 80053ae:	239f      	movs	r3, #159	; 0x9f
 80053b0:	227f      	movs	r2, #127	; 0x7f
 80053b2:	2100      	movs	r1, #0
 80053b4:	2000      	movs	r0, #0
 80053b6:	f7ff fc01 	bl	8004bbc <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 80053ba:	2300      	movs	r3, #0
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	239f      	movs	r3, #159	; 0x9f
 80053c0:	227f      	movs	r2, #127	; 0x7f
 80053c2:	2100      	movs	r1, #0
 80053c4:	2000      	movs	r0, #0
 80053c6:	f7ff fdc3 	bl	8004f50 <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 80053ca:	883b      	ldrh	r3, [r7, #0]
 80053cc:	887a      	ldrh	r2, [r7, #2]
 80053ce:	88b9      	ldrh	r1, [r7, #4]
 80053d0:	88f8      	ldrh	r0, [r7, #6]
 80053d2:	f7ff fbf3 	bl	8004bbc <hagl_set_clip_window>
#endif
}
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	2000000c 	.word	0x2000000c

080053e4 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4604      	mov	r4, r0
 80053ec:	4608      	mov	r0, r1
 80053ee:	4611      	mov	r1, r2
 80053f0:	461a      	mov	r2, r3
 80053f2:	4623      	mov	r3, r4
 80053f4:	80fb      	strh	r3, [r7, #6]
 80053f6:	4603      	mov	r3, r0
 80053f8:	80bb      	strh	r3, [r7, #4]
 80053fa:	460b      	mov	r3, r1
 80053fc:	807b      	strh	r3, [r7, #2]
 80053fe:	4613      	mov	r3, r2
 8005400:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8005402:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005406:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800540a:	429a      	cmp	r2, r3
 800540c:	dd0e      	ble.n	800542c <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 800540e:	88fa      	ldrh	r2, [r7, #6]
 8005410:	887b      	ldrh	r3, [r7, #2]
 8005412:	4413      	add	r3, r2
 8005414:	b29b      	uxth	r3, r3
 8005416:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	887b      	ldrh	r3, [r7, #2]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	b29b      	uxth	r3, r3
 800542a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800542c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005430:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005434:	429a      	cmp	r2, r3
 8005436:	dd0e      	ble.n	8005456 <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 8005438:	88ba      	ldrh	r2, [r7, #4]
 800543a:	883b      	ldrh	r3, [r7, #0]
 800543c:	4413      	add	r3, r2
 800543e:	b29b      	uxth	r3, r3
 8005440:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8005442:	88ba      	ldrh	r2, [r7, #4]
 8005444:	883b      	ldrh	r3, [r7, #0]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	b29b      	uxth	r3, r3
 800544a:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800544c:	88ba      	ldrh	r2, [r7, #4]
 800544e:	883b      	ldrh	r3, [r7, #0]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	b29b      	uxth	r3, r3
 8005454:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8005456:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800545a:	4a52      	ldr	r2, [pc, #328]	; (80055a4 <hagl_draw_rounded_rectangle+0x1c0>)
 800545c:	8812      	ldrh	r2, [r2, #0]
 800545e:	4293      	cmp	r3, r2
 8005460:	f2c0 8153 	blt.w	800570a <hagl_draw_rounded_rectangle+0x326>
 8005464:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005468:	4a4e      	ldr	r2, [pc, #312]	; (80055a4 <hagl_draw_rounded_rectangle+0x1c0>)
 800546a:	8852      	ldrh	r2, [r2, #2]
 800546c:	4293      	cmp	r3, r2
 800546e:	f2c0 814c 	blt.w	800570a <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8005472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005476:	4a4b      	ldr	r2, [pc, #300]	; (80055a4 <hagl_draw_rounded_rectangle+0x1c0>)
 8005478:	8892      	ldrh	r2, [r2, #4]
 800547a:	4293      	cmp	r3, r2
 800547c:	f300 8147 	bgt.w	800570e <hagl_draw_rounded_rectangle+0x32a>
 8005480:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005484:	4a47      	ldr	r2, [pc, #284]	; (80055a4 <hagl_draw_rounded_rectangle+0x1c0>)
 8005486:	88d2      	ldrh	r2, [r2, #6]
 8005488:	4293      	cmp	r3, r2
 800548a:	f300 8140 	bgt.w	800570e <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 800548e:	887a      	ldrh	r2, [r7, #2]
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	b29b      	uxth	r3, r3
 8005496:	3301      	adds	r3, #1
 8005498:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 800549a:	883a      	ldrh	r2, [r7, #0]
 800549c:	88bb      	ldrh	r3, [r7, #4]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3301      	adds	r3, #1
 80054a4:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 80054a6:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 80054aa:	8a3b      	ldrh	r3, [r7, #16]
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	89fb      	ldrh	r3, [r7, #14]
 80054b4:	085b      	lsrs	r3, r3, #1
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	4619      	mov	r1, r3
 80054ba:	4610      	mov	r0, r2
 80054bc:	f7ff fb5a 	bl	8004b74 <min>
 80054c0:	4603      	mov	r3, r0
 80054c2:	4619      	mov	r1, r3
 80054c4:	4620      	mov	r0, r4
 80054c6:	f7ff fb55 	bl	8004b74 <min>
 80054ca:	4603      	mov	r3, r0
 80054cc:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054d2:	4413      	add	r3, r2
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	b218      	sxth	r0, r3
 80054d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	b29b      	uxth	r3, r3
 80054de:	8a3a      	ldrh	r2, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80054ea:	f7ff fbbb 	bl	8004c64 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054f2:	4413      	add	r3, r2
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	b218      	sxth	r0, r3
 80054f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	8a3a      	ldrh	r2, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	b29a      	uxth	r2, r3
 8005504:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005506:	f9b7 1000 	ldrsh.w	r1, [r7]
 800550a:	f7ff fbab 	bl	8004c64 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 800550e:	88ba      	ldrh	r2, [r7, #4]
 8005510:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005512:	4413      	add	r3, r2
 8005514:	b29b      	uxth	r3, r3
 8005516:	b219      	sxth	r1, r3
 8005518:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	b29b      	uxth	r3, r3
 800551e:	89fa      	ldrh	r2, [r7, #14]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	b29a      	uxth	r2, r3
 8005524:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005526:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800552a:	f7ff fbbe 	bl	8004caa <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 800552e:	88ba      	ldrh	r2, [r7, #4]
 8005530:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005532:	4413      	add	r3, r2
 8005534:	b29b      	uxth	r3, r3
 8005536:	b219      	sxth	r1, r3
 8005538:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	b29b      	uxth	r3, r3
 800553e:	89fa      	ldrh	r2, [r7, #14]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	b29a      	uxth	r2, r3
 8005544:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005546:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800554a:	f7ff fbae 	bl	8004caa <hagl_draw_vline>

    x = 0;
 800554e:	2300      	movs	r3, #0
 8005550:	82fb      	strh	r3, [r7, #22]
    y = r;
 8005552:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005554:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 8005556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	b29b      	uxth	r3, r3
 800555c:	f1c3 0303 	rsb	r3, r3, #3
 8005560:	b29b      	uxth	r3, r3
 8005562:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 8005564:	e0c9      	b.n	80056fa <hagl_draw_rounded_rectangle+0x316>
        x++;
 8005566:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800556a:	b29b      	uxth	r3, r3
 800556c:	3301      	adds	r3, #1
 800556e:	b29b      	uxth	r3, r3
 8005570:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 8005572:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005576:	2b00      	cmp	r3, #0
 8005578:	dd16      	ble.n	80055a8 <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 800557a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29b      	uxth	r3, r3
 8005584:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 8005586:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800558a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	b29b      	uxth	r3, r3
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	b29a      	uxth	r2, r3
 8005596:	8a7b      	ldrh	r3, [r7, #18]
 8005598:	4413      	add	r3, r2
 800559a:	b29b      	uxth	r3, r3
 800559c:	330a      	adds	r3, #10
 800559e:	b29b      	uxth	r3, r3
 80055a0:	827b      	strh	r3, [r7, #18]
 80055a2:	e00a      	b.n	80055ba <hagl_draw_rounded_rectangle+0x1d6>
 80055a4:	2000000c 	.word	0x2000000c
        } else {
            d = d + 4 * x + 6;
 80055a8:	8afb      	ldrh	r3, [r7, #22]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	8a7b      	ldrh	r3, [r7, #18]
 80055b0:	4413      	add	r3, r2
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3306      	adds	r3, #6
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 80055ba:	887a      	ldrh	r2, [r7, #2]
 80055bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	8afb      	ldrh	r3, [r7, #22]
 80055c4:	4413      	add	r3, r2
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	b218      	sxth	r0, r3
 80055ca:	88ba      	ldrh	r2, [r7, #4]
 80055cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055ce:	4413      	add	r3, r2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	8abb      	ldrh	r3, [r7, #20]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	b21b      	sxth	r3, r3
 80055da:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80055dc:	4619      	mov	r1, r3
 80055de:	f7ff fb0f 	bl	8004c00 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 80055e2:	887a      	ldrh	r2, [r7, #2]
 80055e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	8abb      	ldrh	r3, [r7, #20]
 80055ec:	4413      	add	r3, r2
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	b218      	sxth	r0, r3
 80055f2:	88ba      	ldrh	r2, [r7, #4]
 80055f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055f6:	4413      	add	r3, r2
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	8afb      	ldrh	r3, [r7, #22]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	b29b      	uxth	r3, r3
 8005600:	b21b      	sxth	r3, r3
 8005602:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005604:	4619      	mov	r1, r3
 8005606:	f7ff fafb 	bl	8004c00 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800560e:	4413      	add	r3, r2
 8005610:	b29a      	uxth	r2, r3
 8005612:	8afb      	ldrh	r3, [r7, #22]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	b29b      	uxth	r3, r3
 8005618:	b218      	sxth	r0, r3
 800561a:	88ba      	ldrh	r2, [r7, #4]
 800561c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800561e:	4413      	add	r3, r2
 8005620:	b29a      	uxth	r2, r3
 8005622:	8abb      	ldrh	r3, [r7, #20]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	b29b      	uxth	r3, r3
 8005628:	b21b      	sxth	r3, r3
 800562a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800562c:	4619      	mov	r1, r3
 800562e:	f7ff fae7 	bl	8004c00 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005636:	4413      	add	r3, r2
 8005638:	b29a      	uxth	r2, r3
 800563a:	8abb      	ldrh	r3, [r7, #20]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	b29b      	uxth	r3, r3
 8005640:	b218      	sxth	r0, r3
 8005642:	88ba      	ldrh	r2, [r7, #4]
 8005644:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005646:	4413      	add	r3, r2
 8005648:	b29a      	uxth	r2, r3
 800564a:	8afb      	ldrh	r3, [r7, #22]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	b29b      	uxth	r3, r3
 8005650:	b21b      	sxth	r3, r3
 8005652:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005654:	4619      	mov	r1, r3
 8005656:	f7ff fad3 	bl	8004c00 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 800565a:	887a      	ldrh	r2, [r7, #2]
 800565c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	b29a      	uxth	r2, r3
 8005662:	8afb      	ldrh	r3, [r7, #22]
 8005664:	4413      	add	r3, r2
 8005666:	b29b      	uxth	r3, r3
 8005668:	b218      	sxth	r0, r3
 800566a:	883a      	ldrh	r2, [r7, #0]
 800566c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	b29a      	uxth	r2, r3
 8005672:	8abb      	ldrh	r3, [r7, #20]
 8005674:	4413      	add	r3, r2
 8005676:	b29b      	uxth	r3, r3
 8005678:	b21b      	sxth	r3, r3
 800567a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800567c:	4619      	mov	r1, r3
 800567e:	f7ff fabf 	bl	8004c00 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 8005682:	887a      	ldrh	r2, [r7, #2]
 8005684:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	b29a      	uxth	r2, r3
 800568a:	8abb      	ldrh	r3, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	b29b      	uxth	r3, r3
 8005690:	b218      	sxth	r0, r3
 8005692:	883a      	ldrh	r2, [r7, #0]
 8005694:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	b29a      	uxth	r2, r3
 800569a:	8afb      	ldrh	r3, [r7, #22]
 800569c:	4413      	add	r3, r2
 800569e:	b29b      	uxth	r3, r3
 80056a0:	b21b      	sxth	r3, r3
 80056a2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80056a4:	4619      	mov	r1, r3
 80056a6:	f7ff faab 	bl	8004c00 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 80056aa:	88fa      	ldrh	r2, [r7, #6]
 80056ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056ae:	4413      	add	r3, r2
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	8afb      	ldrh	r3, [r7, #22]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	b218      	sxth	r0, r3
 80056ba:	883a      	ldrh	r2, [r7, #0]
 80056bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	8abb      	ldrh	r3, [r7, #20]
 80056c4:	4413      	add	r3, r2
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	b21b      	sxth	r3, r3
 80056ca:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80056cc:	4619      	mov	r1, r3
 80056ce:	f7ff fa97 	bl	8004c00 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056d6:	4413      	add	r3, r2
 80056d8:	b29a      	uxth	r2, r3
 80056da:	8abb      	ldrh	r3, [r7, #20]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	b29b      	uxth	r3, r3
 80056e0:	b218      	sxth	r0, r3
 80056e2:	883a      	ldrh	r2, [r7, #0]
 80056e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	8afb      	ldrh	r3, [r7, #22]
 80056ec:	4413      	add	r3, r2
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	b21b      	sxth	r3, r3
 80056f2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80056f4:	4619      	mov	r1, r3
 80056f6:	f7ff fa83 	bl	8004c00 <hagl_put_pixel>
    while (y >= x) {
 80056fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80056fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005702:	429a      	cmp	r2, r3
 8005704:	f6bf af2f 	bge.w	8005566 <hagl_draw_rounded_rectangle+0x182>
 8005708:	e002      	b.n	8005710 <hagl_draw_rounded_rectangle+0x32c>
        return;
 800570a:	bf00      	nop
 800570c:	e000      	b.n	8005710 <hagl_draw_rounded_rectangle+0x32c>
        return;
 800570e:	bf00      	nop
    }
};
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	bd90      	pop	{r4, r7, pc}
 8005716:	bf00      	nop

08005718 <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	71fb      	strb	r3, [r7, #7]
 8005722:	460b      	mov	r3, r1
 8005724:	71bb      	strb	r3, [r7, #6]
 8005726:	4613      	mov	r3, r2
 8005728:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	b21b      	sxth	r3, r3
 8005730:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005734:	f023 0307 	bic.w	r3, r3, #7
 8005738:	b21a      	sxth	r2, r3
 800573a:	79bb      	ldrb	r3, [r7, #6]
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	b21b      	sxth	r3, r3
 8005740:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8005744:	b21b      	sxth	r3, r3
 8005746:	4313      	orrs	r3, r2
 8005748:	b21a      	sxth	r2, r3
 800574a:	797b      	ldrb	r3, [r7, #5]
 800574c:	08db      	lsrs	r3, r3, #3
 800574e:	b2db      	uxtb	r3, r3
 8005750:	b21b      	sxth	r3, r3
 8005752:	4313      	orrs	r3, r2
 8005754:	b21b      	sxth	r3, r3
 8005756:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 8005758:	89fb      	ldrh	r3, [r7, #14]
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	b21a      	sxth	r2, r3
 800575e:	89fb      	ldrh	r3, [r7, #14]
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	b29b      	uxth	r3, r3
 8005764:	b21b      	sxth	r3, r3
 8005766:	4313      	orrs	r3, r2
 8005768:	b21b      	sxth	r3, r3
 800576a:	81fb      	strh	r3, [r7, #14]

    return rgb;
 800576c:	89fb      	ldrh	r3, [r7, #14]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
	...

0800577c <__errno>:
 800577c:	4b01      	ldr	r3, [pc, #4]	; (8005784 <__errno+0x8>)
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20000014 	.word	0x20000014

08005788 <__libc_init_array>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	4e0d      	ldr	r6, [pc, #52]	; (80057c0 <__libc_init_array+0x38>)
 800578c:	4c0d      	ldr	r4, [pc, #52]	; (80057c4 <__libc_init_array+0x3c>)
 800578e:	1ba4      	subs	r4, r4, r6
 8005790:	10a4      	asrs	r4, r4, #2
 8005792:	2500      	movs	r5, #0
 8005794:	42a5      	cmp	r5, r4
 8005796:	d109      	bne.n	80057ac <__libc_init_array+0x24>
 8005798:	4e0b      	ldr	r6, [pc, #44]	; (80057c8 <__libc_init_array+0x40>)
 800579a:	4c0c      	ldr	r4, [pc, #48]	; (80057cc <__libc_init_array+0x44>)
 800579c:	f000 fc3c 	bl	8006018 <_init>
 80057a0:	1ba4      	subs	r4, r4, r6
 80057a2:	10a4      	asrs	r4, r4, #2
 80057a4:	2500      	movs	r5, #0
 80057a6:	42a5      	cmp	r5, r4
 80057a8:	d105      	bne.n	80057b6 <__libc_init_array+0x2e>
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057b0:	4798      	blx	r3
 80057b2:	3501      	adds	r5, #1
 80057b4:	e7ee      	b.n	8005794 <__libc_init_array+0xc>
 80057b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057ba:	4798      	blx	r3
 80057bc:	3501      	adds	r5, #1
 80057be:	e7f2      	b.n	80057a6 <__libc_init_array+0x1e>
 80057c0:	0800c6b0 	.word	0x0800c6b0
 80057c4:	0800c6b0 	.word	0x0800c6b0
 80057c8:	0800c6b0 	.word	0x0800c6b0
 80057cc:	0800c6b4 	.word	0x0800c6b4

080057d0 <memcpy>:
 80057d0:	b510      	push	{r4, lr}
 80057d2:	1e43      	subs	r3, r0, #1
 80057d4:	440a      	add	r2, r1
 80057d6:	4291      	cmp	r1, r2
 80057d8:	d100      	bne.n	80057dc <memcpy+0xc>
 80057da:	bd10      	pop	{r4, pc}
 80057dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057e4:	e7f7      	b.n	80057d6 <memcpy+0x6>

080057e6 <memset>:
 80057e6:	4402      	add	r2, r0
 80057e8:	4603      	mov	r3, r0
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d100      	bne.n	80057f0 <memset+0xa>
 80057ee:	4770      	bx	lr
 80057f0:	f803 1b01 	strb.w	r1, [r3], #1
 80057f4:	e7f9      	b.n	80057ea <memset+0x4>
	...

080057f8 <_free_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4605      	mov	r5, r0
 80057fc:	2900      	cmp	r1, #0
 80057fe:	d045      	beq.n	800588c <_free_r+0x94>
 8005800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005804:	1f0c      	subs	r4, r1, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	bfb8      	it	lt
 800580a:	18e4      	addlt	r4, r4, r3
 800580c:	f000 f8e0 	bl	80059d0 <__malloc_lock>
 8005810:	4a1f      	ldr	r2, [pc, #124]	; (8005890 <_free_r+0x98>)
 8005812:	6813      	ldr	r3, [r2, #0]
 8005814:	4610      	mov	r0, r2
 8005816:	b933      	cbnz	r3, 8005826 <_free_r+0x2e>
 8005818:	6063      	str	r3, [r4, #4]
 800581a:	6014      	str	r4, [r2, #0]
 800581c:	4628      	mov	r0, r5
 800581e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005822:	f000 b8d6 	b.w	80059d2 <__malloc_unlock>
 8005826:	42a3      	cmp	r3, r4
 8005828:	d90c      	bls.n	8005844 <_free_r+0x4c>
 800582a:	6821      	ldr	r1, [r4, #0]
 800582c:	1862      	adds	r2, r4, r1
 800582e:	4293      	cmp	r3, r2
 8005830:	bf04      	itt	eq
 8005832:	681a      	ldreq	r2, [r3, #0]
 8005834:	685b      	ldreq	r3, [r3, #4]
 8005836:	6063      	str	r3, [r4, #4]
 8005838:	bf04      	itt	eq
 800583a:	1852      	addeq	r2, r2, r1
 800583c:	6022      	streq	r2, [r4, #0]
 800583e:	6004      	str	r4, [r0, #0]
 8005840:	e7ec      	b.n	800581c <_free_r+0x24>
 8005842:	4613      	mov	r3, r2
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	b10a      	cbz	r2, 800584c <_free_r+0x54>
 8005848:	42a2      	cmp	r2, r4
 800584a:	d9fa      	bls.n	8005842 <_free_r+0x4a>
 800584c:	6819      	ldr	r1, [r3, #0]
 800584e:	1858      	adds	r0, r3, r1
 8005850:	42a0      	cmp	r0, r4
 8005852:	d10b      	bne.n	800586c <_free_r+0x74>
 8005854:	6820      	ldr	r0, [r4, #0]
 8005856:	4401      	add	r1, r0
 8005858:	1858      	adds	r0, r3, r1
 800585a:	4282      	cmp	r2, r0
 800585c:	6019      	str	r1, [r3, #0]
 800585e:	d1dd      	bne.n	800581c <_free_r+0x24>
 8005860:	6810      	ldr	r0, [r2, #0]
 8005862:	6852      	ldr	r2, [r2, #4]
 8005864:	605a      	str	r2, [r3, #4]
 8005866:	4401      	add	r1, r0
 8005868:	6019      	str	r1, [r3, #0]
 800586a:	e7d7      	b.n	800581c <_free_r+0x24>
 800586c:	d902      	bls.n	8005874 <_free_r+0x7c>
 800586e:	230c      	movs	r3, #12
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	e7d3      	b.n	800581c <_free_r+0x24>
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	1821      	adds	r1, r4, r0
 8005878:	428a      	cmp	r2, r1
 800587a:	bf04      	itt	eq
 800587c:	6811      	ldreq	r1, [r2, #0]
 800587e:	6852      	ldreq	r2, [r2, #4]
 8005880:	6062      	str	r2, [r4, #4]
 8005882:	bf04      	itt	eq
 8005884:	1809      	addeq	r1, r1, r0
 8005886:	6021      	streq	r1, [r4, #0]
 8005888:	605c      	str	r4, [r3, #4]
 800588a:	e7c7      	b.n	800581c <_free_r+0x24>
 800588c:	bd38      	pop	{r3, r4, r5, pc}
 800588e:	bf00      	nop
 8005890:	2000a0a0 	.word	0x2000a0a0

08005894 <_malloc_r>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	1ccd      	adds	r5, r1, #3
 8005898:	f025 0503 	bic.w	r5, r5, #3
 800589c:	3508      	adds	r5, #8
 800589e:	2d0c      	cmp	r5, #12
 80058a0:	bf38      	it	cc
 80058a2:	250c      	movcc	r5, #12
 80058a4:	2d00      	cmp	r5, #0
 80058a6:	4606      	mov	r6, r0
 80058a8:	db01      	blt.n	80058ae <_malloc_r+0x1a>
 80058aa:	42a9      	cmp	r1, r5
 80058ac:	d903      	bls.n	80058b6 <_malloc_r+0x22>
 80058ae:	230c      	movs	r3, #12
 80058b0:	6033      	str	r3, [r6, #0]
 80058b2:	2000      	movs	r0, #0
 80058b4:	bd70      	pop	{r4, r5, r6, pc}
 80058b6:	f000 f88b 	bl	80059d0 <__malloc_lock>
 80058ba:	4a21      	ldr	r2, [pc, #132]	; (8005940 <_malloc_r+0xac>)
 80058bc:	6814      	ldr	r4, [r2, #0]
 80058be:	4621      	mov	r1, r4
 80058c0:	b991      	cbnz	r1, 80058e8 <_malloc_r+0x54>
 80058c2:	4c20      	ldr	r4, [pc, #128]	; (8005944 <_malloc_r+0xb0>)
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	b91b      	cbnz	r3, 80058d0 <_malloc_r+0x3c>
 80058c8:	4630      	mov	r0, r6
 80058ca:	f000 f83d 	bl	8005948 <_sbrk_r>
 80058ce:	6020      	str	r0, [r4, #0]
 80058d0:	4629      	mov	r1, r5
 80058d2:	4630      	mov	r0, r6
 80058d4:	f000 f838 	bl	8005948 <_sbrk_r>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d124      	bne.n	8005926 <_malloc_r+0x92>
 80058dc:	230c      	movs	r3, #12
 80058de:	6033      	str	r3, [r6, #0]
 80058e0:	4630      	mov	r0, r6
 80058e2:	f000 f876 	bl	80059d2 <__malloc_unlock>
 80058e6:	e7e4      	b.n	80058b2 <_malloc_r+0x1e>
 80058e8:	680b      	ldr	r3, [r1, #0]
 80058ea:	1b5b      	subs	r3, r3, r5
 80058ec:	d418      	bmi.n	8005920 <_malloc_r+0x8c>
 80058ee:	2b0b      	cmp	r3, #11
 80058f0:	d90f      	bls.n	8005912 <_malloc_r+0x7e>
 80058f2:	600b      	str	r3, [r1, #0]
 80058f4:	50cd      	str	r5, [r1, r3]
 80058f6:	18cc      	adds	r4, r1, r3
 80058f8:	4630      	mov	r0, r6
 80058fa:	f000 f86a 	bl	80059d2 <__malloc_unlock>
 80058fe:	f104 000b 	add.w	r0, r4, #11
 8005902:	1d23      	adds	r3, r4, #4
 8005904:	f020 0007 	bic.w	r0, r0, #7
 8005908:	1ac3      	subs	r3, r0, r3
 800590a:	d0d3      	beq.n	80058b4 <_malloc_r+0x20>
 800590c:	425a      	negs	r2, r3
 800590e:	50e2      	str	r2, [r4, r3]
 8005910:	e7d0      	b.n	80058b4 <_malloc_r+0x20>
 8005912:	428c      	cmp	r4, r1
 8005914:	684b      	ldr	r3, [r1, #4]
 8005916:	bf16      	itet	ne
 8005918:	6063      	strne	r3, [r4, #4]
 800591a:	6013      	streq	r3, [r2, #0]
 800591c:	460c      	movne	r4, r1
 800591e:	e7eb      	b.n	80058f8 <_malloc_r+0x64>
 8005920:	460c      	mov	r4, r1
 8005922:	6849      	ldr	r1, [r1, #4]
 8005924:	e7cc      	b.n	80058c0 <_malloc_r+0x2c>
 8005926:	1cc4      	adds	r4, r0, #3
 8005928:	f024 0403 	bic.w	r4, r4, #3
 800592c:	42a0      	cmp	r0, r4
 800592e:	d005      	beq.n	800593c <_malloc_r+0xa8>
 8005930:	1a21      	subs	r1, r4, r0
 8005932:	4630      	mov	r0, r6
 8005934:	f000 f808 	bl	8005948 <_sbrk_r>
 8005938:	3001      	adds	r0, #1
 800593a:	d0cf      	beq.n	80058dc <_malloc_r+0x48>
 800593c:	6025      	str	r5, [r4, #0]
 800593e:	e7db      	b.n	80058f8 <_malloc_r+0x64>
 8005940:	2000a0a0 	.word	0x2000a0a0
 8005944:	2000a0a4 	.word	0x2000a0a4

08005948 <_sbrk_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	4c06      	ldr	r4, [pc, #24]	; (8005964 <_sbrk_r+0x1c>)
 800594c:	2300      	movs	r3, #0
 800594e:	4605      	mov	r5, r0
 8005950:	4608      	mov	r0, r1
 8005952:	6023      	str	r3, [r4, #0]
 8005954:	f7fb fe66 	bl	8001624 <_sbrk>
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	d102      	bne.n	8005962 <_sbrk_r+0x1a>
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	b103      	cbz	r3, 8005962 <_sbrk_r+0x1a>
 8005960:	602b      	str	r3, [r5, #0]
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	2000a364 	.word	0x2000a364

08005968 <sniprintf>:
 8005968:	b40c      	push	{r2, r3}
 800596a:	b530      	push	{r4, r5, lr}
 800596c:	4b17      	ldr	r3, [pc, #92]	; (80059cc <sniprintf+0x64>)
 800596e:	1e0c      	subs	r4, r1, #0
 8005970:	b09d      	sub	sp, #116	; 0x74
 8005972:	681d      	ldr	r5, [r3, #0]
 8005974:	da08      	bge.n	8005988 <sniprintf+0x20>
 8005976:	238b      	movs	r3, #139	; 0x8b
 8005978:	602b      	str	r3, [r5, #0]
 800597a:	f04f 30ff 	mov.w	r0, #4294967295
 800597e:	b01d      	add	sp, #116	; 0x74
 8005980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005984:	b002      	add	sp, #8
 8005986:	4770      	bx	lr
 8005988:	f44f 7302 	mov.w	r3, #520	; 0x208
 800598c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005990:	bf14      	ite	ne
 8005992:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005996:	4623      	moveq	r3, r4
 8005998:	9304      	str	r3, [sp, #16]
 800599a:	9307      	str	r3, [sp, #28]
 800599c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059a0:	9002      	str	r0, [sp, #8]
 80059a2:	9006      	str	r0, [sp, #24]
 80059a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80059a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059aa:	ab21      	add	r3, sp, #132	; 0x84
 80059ac:	a902      	add	r1, sp, #8
 80059ae:	4628      	mov	r0, r5
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	f000 f869 	bl	8005a88 <_svfiprintf_r>
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	bfbc      	itt	lt
 80059ba:	238b      	movlt	r3, #139	; 0x8b
 80059bc:	602b      	strlt	r3, [r5, #0]
 80059be:	2c00      	cmp	r4, #0
 80059c0:	d0dd      	beq.n	800597e <sniprintf+0x16>
 80059c2:	9b02      	ldr	r3, [sp, #8]
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	e7d9      	b.n	800597e <sniprintf+0x16>
 80059ca:	bf00      	nop
 80059cc:	20000014 	.word	0x20000014

080059d0 <__malloc_lock>:
 80059d0:	4770      	bx	lr

080059d2 <__malloc_unlock>:
 80059d2:	4770      	bx	lr

080059d4 <__ssputs_r>:
 80059d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	688e      	ldr	r6, [r1, #8]
 80059da:	429e      	cmp	r6, r3
 80059dc:	4682      	mov	sl, r0
 80059de:	460c      	mov	r4, r1
 80059e0:	4690      	mov	r8, r2
 80059e2:	4699      	mov	r9, r3
 80059e4:	d837      	bhi.n	8005a56 <__ssputs_r+0x82>
 80059e6:	898a      	ldrh	r2, [r1, #12]
 80059e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059ec:	d031      	beq.n	8005a52 <__ssputs_r+0x7e>
 80059ee:	6825      	ldr	r5, [r4, #0]
 80059f0:	6909      	ldr	r1, [r1, #16]
 80059f2:	1a6f      	subs	r7, r5, r1
 80059f4:	6965      	ldr	r5, [r4, #20]
 80059f6:	2302      	movs	r3, #2
 80059f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8005a00:	f109 0301 	add.w	r3, r9, #1
 8005a04:	443b      	add	r3, r7
 8005a06:	429d      	cmp	r5, r3
 8005a08:	bf38      	it	cc
 8005a0a:	461d      	movcc	r5, r3
 8005a0c:	0553      	lsls	r3, r2, #21
 8005a0e:	d530      	bpl.n	8005a72 <__ssputs_r+0x9e>
 8005a10:	4629      	mov	r1, r5
 8005a12:	f7ff ff3f 	bl	8005894 <_malloc_r>
 8005a16:	4606      	mov	r6, r0
 8005a18:	b950      	cbnz	r0, 8005a30 <__ssputs_r+0x5c>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	f8ca 3000 	str.w	r3, [sl]
 8005a20:	89a3      	ldrh	r3, [r4, #12]
 8005a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a26:	81a3      	strh	r3, [r4, #12]
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a30:	463a      	mov	r2, r7
 8005a32:	6921      	ldr	r1, [r4, #16]
 8005a34:	f7ff fecc 	bl	80057d0 <memcpy>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	6126      	str	r6, [r4, #16]
 8005a46:	6165      	str	r5, [r4, #20]
 8005a48:	443e      	add	r6, r7
 8005a4a:	1bed      	subs	r5, r5, r7
 8005a4c:	6026      	str	r6, [r4, #0]
 8005a4e:	60a5      	str	r5, [r4, #8]
 8005a50:	464e      	mov	r6, r9
 8005a52:	454e      	cmp	r6, r9
 8005a54:	d900      	bls.n	8005a58 <__ssputs_r+0x84>
 8005a56:	464e      	mov	r6, r9
 8005a58:	4632      	mov	r2, r6
 8005a5a:	4641      	mov	r1, r8
 8005a5c:	6820      	ldr	r0, [r4, #0]
 8005a5e:	f000 fa93 	bl	8005f88 <memmove>
 8005a62:	68a3      	ldr	r3, [r4, #8]
 8005a64:	1b9b      	subs	r3, r3, r6
 8005a66:	60a3      	str	r3, [r4, #8]
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	441e      	add	r6, r3
 8005a6c:	6026      	str	r6, [r4, #0]
 8005a6e:	2000      	movs	r0, #0
 8005a70:	e7dc      	b.n	8005a2c <__ssputs_r+0x58>
 8005a72:	462a      	mov	r2, r5
 8005a74:	f000 faa1 	bl	8005fba <_realloc_r>
 8005a78:	4606      	mov	r6, r0
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d1e2      	bne.n	8005a44 <__ssputs_r+0x70>
 8005a7e:	6921      	ldr	r1, [r4, #16]
 8005a80:	4650      	mov	r0, sl
 8005a82:	f7ff feb9 	bl	80057f8 <_free_r>
 8005a86:	e7c8      	b.n	8005a1a <__ssputs_r+0x46>

08005a88 <_svfiprintf_r>:
 8005a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8c:	461d      	mov	r5, r3
 8005a8e:	898b      	ldrh	r3, [r1, #12]
 8005a90:	061f      	lsls	r7, r3, #24
 8005a92:	b09d      	sub	sp, #116	; 0x74
 8005a94:	4680      	mov	r8, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	4616      	mov	r6, r2
 8005a9a:	d50f      	bpl.n	8005abc <_svfiprintf_r+0x34>
 8005a9c:	690b      	ldr	r3, [r1, #16]
 8005a9e:	b96b      	cbnz	r3, 8005abc <_svfiprintf_r+0x34>
 8005aa0:	2140      	movs	r1, #64	; 0x40
 8005aa2:	f7ff fef7 	bl	8005894 <_malloc_r>
 8005aa6:	6020      	str	r0, [r4, #0]
 8005aa8:	6120      	str	r0, [r4, #16]
 8005aaa:	b928      	cbnz	r0, 8005ab8 <_svfiprintf_r+0x30>
 8005aac:	230c      	movs	r3, #12
 8005aae:	f8c8 3000 	str.w	r3, [r8]
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab6:	e0c8      	b.n	8005c4a <_svfiprintf_r+0x1c2>
 8005ab8:	2340      	movs	r3, #64	; 0x40
 8005aba:	6163      	str	r3, [r4, #20]
 8005abc:	2300      	movs	r3, #0
 8005abe:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac0:	2320      	movs	r3, #32
 8005ac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ac6:	2330      	movs	r3, #48	; 0x30
 8005ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005acc:	9503      	str	r5, [sp, #12]
 8005ace:	f04f 0b01 	mov.w	fp, #1
 8005ad2:	4637      	mov	r7, r6
 8005ad4:	463d      	mov	r5, r7
 8005ad6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ada:	b10b      	cbz	r3, 8005ae0 <_svfiprintf_r+0x58>
 8005adc:	2b25      	cmp	r3, #37	; 0x25
 8005ade:	d13e      	bne.n	8005b5e <_svfiprintf_r+0xd6>
 8005ae0:	ebb7 0a06 	subs.w	sl, r7, r6
 8005ae4:	d00b      	beq.n	8005afe <_svfiprintf_r+0x76>
 8005ae6:	4653      	mov	r3, sl
 8005ae8:	4632      	mov	r2, r6
 8005aea:	4621      	mov	r1, r4
 8005aec:	4640      	mov	r0, r8
 8005aee:	f7ff ff71 	bl	80059d4 <__ssputs_r>
 8005af2:	3001      	adds	r0, #1
 8005af4:	f000 80a4 	beq.w	8005c40 <_svfiprintf_r+0x1b8>
 8005af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005afa:	4453      	add	r3, sl
 8005afc:	9309      	str	r3, [sp, #36]	; 0x24
 8005afe:	783b      	ldrb	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 809d 	beq.w	8005c40 <_svfiprintf_r+0x1b8>
 8005b06:	2300      	movs	r3, #0
 8005b08:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b10:	9304      	str	r3, [sp, #16]
 8005b12:	9307      	str	r3, [sp, #28]
 8005b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b18:	931a      	str	r3, [sp, #104]	; 0x68
 8005b1a:	462f      	mov	r7, r5
 8005b1c:	2205      	movs	r2, #5
 8005b1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005b22:	4850      	ldr	r0, [pc, #320]	; (8005c64 <_svfiprintf_r+0x1dc>)
 8005b24:	f7fa fb5c 	bl	80001e0 <memchr>
 8005b28:	9b04      	ldr	r3, [sp, #16]
 8005b2a:	b9d0      	cbnz	r0, 8005b62 <_svfiprintf_r+0xda>
 8005b2c:	06d9      	lsls	r1, r3, #27
 8005b2e:	bf44      	itt	mi
 8005b30:	2220      	movmi	r2, #32
 8005b32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b36:	071a      	lsls	r2, r3, #28
 8005b38:	bf44      	itt	mi
 8005b3a:	222b      	movmi	r2, #43	; 0x2b
 8005b3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b40:	782a      	ldrb	r2, [r5, #0]
 8005b42:	2a2a      	cmp	r2, #42	; 0x2a
 8005b44:	d015      	beq.n	8005b72 <_svfiprintf_r+0xea>
 8005b46:	9a07      	ldr	r2, [sp, #28]
 8005b48:	462f      	mov	r7, r5
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	250a      	movs	r5, #10
 8005b4e:	4639      	mov	r1, r7
 8005b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b54:	3b30      	subs	r3, #48	; 0x30
 8005b56:	2b09      	cmp	r3, #9
 8005b58:	d94d      	bls.n	8005bf6 <_svfiprintf_r+0x16e>
 8005b5a:	b1b8      	cbz	r0, 8005b8c <_svfiprintf_r+0x104>
 8005b5c:	e00f      	b.n	8005b7e <_svfiprintf_r+0xf6>
 8005b5e:	462f      	mov	r7, r5
 8005b60:	e7b8      	b.n	8005ad4 <_svfiprintf_r+0x4c>
 8005b62:	4a40      	ldr	r2, [pc, #256]	; (8005c64 <_svfiprintf_r+0x1dc>)
 8005b64:	1a80      	subs	r0, r0, r2
 8005b66:	fa0b f000 	lsl.w	r0, fp, r0
 8005b6a:	4318      	orrs	r0, r3
 8005b6c:	9004      	str	r0, [sp, #16]
 8005b6e:	463d      	mov	r5, r7
 8005b70:	e7d3      	b.n	8005b1a <_svfiprintf_r+0x92>
 8005b72:	9a03      	ldr	r2, [sp, #12]
 8005b74:	1d11      	adds	r1, r2, #4
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	9103      	str	r1, [sp, #12]
 8005b7a:	2a00      	cmp	r2, #0
 8005b7c:	db01      	blt.n	8005b82 <_svfiprintf_r+0xfa>
 8005b7e:	9207      	str	r2, [sp, #28]
 8005b80:	e004      	b.n	8005b8c <_svfiprintf_r+0x104>
 8005b82:	4252      	negs	r2, r2
 8005b84:	f043 0302 	orr.w	r3, r3, #2
 8005b88:	9207      	str	r2, [sp, #28]
 8005b8a:	9304      	str	r3, [sp, #16]
 8005b8c:	783b      	ldrb	r3, [r7, #0]
 8005b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005b90:	d10c      	bne.n	8005bac <_svfiprintf_r+0x124>
 8005b92:	787b      	ldrb	r3, [r7, #1]
 8005b94:	2b2a      	cmp	r3, #42	; 0x2a
 8005b96:	d133      	bne.n	8005c00 <_svfiprintf_r+0x178>
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	1d1a      	adds	r2, r3, #4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	9203      	str	r2, [sp, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bfb8      	it	lt
 8005ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ba8:	3702      	adds	r7, #2
 8005baa:	9305      	str	r3, [sp, #20]
 8005bac:	4d2e      	ldr	r5, [pc, #184]	; (8005c68 <_svfiprintf_r+0x1e0>)
 8005bae:	7839      	ldrb	r1, [r7, #0]
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f7fa fb14 	bl	80001e0 <memchr>
 8005bb8:	b138      	cbz	r0, 8005bca <_svfiprintf_r+0x142>
 8005bba:	2340      	movs	r3, #64	; 0x40
 8005bbc:	1b40      	subs	r0, r0, r5
 8005bbe:	fa03 f000 	lsl.w	r0, r3, r0
 8005bc2:	9b04      	ldr	r3, [sp, #16]
 8005bc4:	4303      	orrs	r3, r0
 8005bc6:	3701      	adds	r7, #1
 8005bc8:	9304      	str	r3, [sp, #16]
 8005bca:	7839      	ldrb	r1, [r7, #0]
 8005bcc:	4827      	ldr	r0, [pc, #156]	; (8005c6c <_svfiprintf_r+0x1e4>)
 8005bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bd2:	2206      	movs	r2, #6
 8005bd4:	1c7e      	adds	r6, r7, #1
 8005bd6:	f7fa fb03 	bl	80001e0 <memchr>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d038      	beq.n	8005c50 <_svfiprintf_r+0x1c8>
 8005bde:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <_svfiprintf_r+0x1e8>)
 8005be0:	bb13      	cbnz	r3, 8005c28 <_svfiprintf_r+0x1a0>
 8005be2:	9b03      	ldr	r3, [sp, #12]
 8005be4:	3307      	adds	r3, #7
 8005be6:	f023 0307 	bic.w	r3, r3, #7
 8005bea:	3308      	adds	r3, #8
 8005bec:	9303      	str	r3, [sp, #12]
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	444b      	add	r3, r9
 8005bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf4:	e76d      	b.n	8005ad2 <_svfiprintf_r+0x4a>
 8005bf6:	fb05 3202 	mla	r2, r5, r2, r3
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	460f      	mov	r7, r1
 8005bfe:	e7a6      	b.n	8005b4e <_svfiprintf_r+0xc6>
 8005c00:	2300      	movs	r3, #0
 8005c02:	3701      	adds	r7, #1
 8005c04:	9305      	str	r3, [sp, #20]
 8005c06:	4619      	mov	r1, r3
 8005c08:	250a      	movs	r5, #10
 8005c0a:	4638      	mov	r0, r7
 8005c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c10:	3a30      	subs	r2, #48	; 0x30
 8005c12:	2a09      	cmp	r2, #9
 8005c14:	d903      	bls.n	8005c1e <_svfiprintf_r+0x196>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0c8      	beq.n	8005bac <_svfiprintf_r+0x124>
 8005c1a:	9105      	str	r1, [sp, #20]
 8005c1c:	e7c6      	b.n	8005bac <_svfiprintf_r+0x124>
 8005c1e:	fb05 2101 	mla	r1, r5, r1, r2
 8005c22:	2301      	movs	r3, #1
 8005c24:	4607      	mov	r7, r0
 8005c26:	e7f0      	b.n	8005c0a <_svfiprintf_r+0x182>
 8005c28:	ab03      	add	r3, sp, #12
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <_svfiprintf_r+0x1ec>)
 8005c30:	a904      	add	r1, sp, #16
 8005c32:	4640      	mov	r0, r8
 8005c34:	f3af 8000 	nop.w
 8005c38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c3c:	4681      	mov	r9, r0
 8005c3e:	d1d6      	bne.n	8005bee <_svfiprintf_r+0x166>
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	065b      	lsls	r3, r3, #25
 8005c44:	f53f af35 	bmi.w	8005ab2 <_svfiprintf_r+0x2a>
 8005c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c4a:	b01d      	add	sp, #116	; 0x74
 8005c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c50:	ab03      	add	r3, sp, #12
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	4622      	mov	r2, r4
 8005c56:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <_svfiprintf_r+0x1ec>)
 8005c58:	a904      	add	r1, sp, #16
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	f000 f882 	bl	8005d64 <_printf_i>
 8005c60:	e7ea      	b.n	8005c38 <_svfiprintf_r+0x1b0>
 8005c62:	bf00      	nop
 8005c64:	0800c674 	.word	0x0800c674
 8005c68:	0800c67a 	.word	0x0800c67a
 8005c6c:	0800c67e 	.word	0x0800c67e
 8005c70:	00000000 	.word	0x00000000
 8005c74:	080059d5 	.word	0x080059d5

08005c78 <_printf_common>:
 8005c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7c:	4691      	mov	r9, r2
 8005c7e:	461f      	mov	r7, r3
 8005c80:	688a      	ldr	r2, [r1, #8]
 8005c82:	690b      	ldr	r3, [r1, #16]
 8005c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	bfb8      	it	lt
 8005c8c:	4613      	movlt	r3, r2
 8005c8e:	f8c9 3000 	str.w	r3, [r9]
 8005c92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c96:	4606      	mov	r6, r0
 8005c98:	460c      	mov	r4, r1
 8005c9a:	b112      	cbz	r2, 8005ca2 <_printf_common+0x2a>
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	f8c9 3000 	str.w	r3, [r9]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	0699      	lsls	r1, r3, #26
 8005ca6:	bf42      	ittt	mi
 8005ca8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005cac:	3302      	addmi	r3, #2
 8005cae:	f8c9 3000 	strmi.w	r3, [r9]
 8005cb2:	6825      	ldr	r5, [r4, #0]
 8005cb4:	f015 0506 	ands.w	r5, r5, #6
 8005cb8:	d107      	bne.n	8005cca <_printf_common+0x52>
 8005cba:	f104 0a19 	add.w	sl, r4, #25
 8005cbe:	68e3      	ldr	r3, [r4, #12]
 8005cc0:	f8d9 2000 	ldr.w	r2, [r9]
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	42ab      	cmp	r3, r5
 8005cc8:	dc28      	bgt.n	8005d1c <_printf_common+0xa4>
 8005cca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005cce:	6822      	ldr	r2, [r4, #0]
 8005cd0:	3300      	adds	r3, #0
 8005cd2:	bf18      	it	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	0692      	lsls	r2, r2, #26
 8005cd8:	d42d      	bmi.n	8005d36 <_printf_common+0xbe>
 8005cda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cde:	4639      	mov	r1, r7
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	47c0      	blx	r8
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d020      	beq.n	8005d2a <_printf_common+0xb2>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	68e5      	ldr	r5, [r4, #12]
 8005cec:	f8d9 2000 	ldr.w	r2, [r9]
 8005cf0:	f003 0306 	and.w	r3, r3, #6
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	bf08      	it	eq
 8005cf8:	1aad      	subeq	r5, r5, r2
 8005cfa:	68a3      	ldr	r3, [r4, #8]
 8005cfc:	6922      	ldr	r2, [r4, #16]
 8005cfe:	bf0c      	ite	eq
 8005d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d04:	2500      	movne	r5, #0
 8005d06:	4293      	cmp	r3, r2
 8005d08:	bfc4      	itt	gt
 8005d0a:	1a9b      	subgt	r3, r3, r2
 8005d0c:	18ed      	addgt	r5, r5, r3
 8005d0e:	f04f 0900 	mov.w	r9, #0
 8005d12:	341a      	adds	r4, #26
 8005d14:	454d      	cmp	r5, r9
 8005d16:	d11a      	bne.n	8005d4e <_printf_common+0xd6>
 8005d18:	2000      	movs	r0, #0
 8005d1a:	e008      	b.n	8005d2e <_printf_common+0xb6>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	4652      	mov	r2, sl
 8005d20:	4639      	mov	r1, r7
 8005d22:	4630      	mov	r0, r6
 8005d24:	47c0      	blx	r8
 8005d26:	3001      	adds	r0, #1
 8005d28:	d103      	bne.n	8005d32 <_printf_common+0xba>
 8005d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d32:	3501      	adds	r5, #1
 8005d34:	e7c3      	b.n	8005cbe <_printf_common+0x46>
 8005d36:	18e1      	adds	r1, r4, r3
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	2030      	movs	r0, #48	; 0x30
 8005d3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d40:	4422      	add	r2, r4
 8005d42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	e7c5      	b.n	8005cda <_printf_common+0x62>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	4622      	mov	r2, r4
 8005d52:	4639      	mov	r1, r7
 8005d54:	4630      	mov	r0, r6
 8005d56:	47c0      	blx	r8
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d0e6      	beq.n	8005d2a <_printf_common+0xb2>
 8005d5c:	f109 0901 	add.w	r9, r9, #1
 8005d60:	e7d8      	b.n	8005d14 <_printf_common+0x9c>
	...

08005d64 <_printf_i>:
 8005d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005d6c:	460c      	mov	r4, r1
 8005d6e:	7e09      	ldrb	r1, [r1, #24]
 8005d70:	b085      	sub	sp, #20
 8005d72:	296e      	cmp	r1, #110	; 0x6e
 8005d74:	4617      	mov	r7, r2
 8005d76:	4606      	mov	r6, r0
 8005d78:	4698      	mov	r8, r3
 8005d7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d7c:	f000 80b3 	beq.w	8005ee6 <_printf_i+0x182>
 8005d80:	d822      	bhi.n	8005dc8 <_printf_i+0x64>
 8005d82:	2963      	cmp	r1, #99	; 0x63
 8005d84:	d036      	beq.n	8005df4 <_printf_i+0x90>
 8005d86:	d80a      	bhi.n	8005d9e <_printf_i+0x3a>
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	f000 80b9 	beq.w	8005f00 <_printf_i+0x19c>
 8005d8e:	2958      	cmp	r1, #88	; 0x58
 8005d90:	f000 8083 	beq.w	8005e9a <_printf_i+0x136>
 8005d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d9c:	e032      	b.n	8005e04 <_printf_i+0xa0>
 8005d9e:	2964      	cmp	r1, #100	; 0x64
 8005da0:	d001      	beq.n	8005da6 <_printf_i+0x42>
 8005da2:	2969      	cmp	r1, #105	; 0x69
 8005da4:	d1f6      	bne.n	8005d94 <_printf_i+0x30>
 8005da6:	6820      	ldr	r0, [r4, #0]
 8005da8:	6813      	ldr	r3, [r2, #0]
 8005daa:	0605      	lsls	r5, r0, #24
 8005dac:	f103 0104 	add.w	r1, r3, #4
 8005db0:	d52a      	bpl.n	8005e08 <_printf_i+0xa4>
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6011      	str	r1, [r2, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	da03      	bge.n	8005dc2 <_printf_i+0x5e>
 8005dba:	222d      	movs	r2, #45	; 0x2d
 8005dbc:	425b      	negs	r3, r3
 8005dbe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005dc2:	486f      	ldr	r0, [pc, #444]	; (8005f80 <_printf_i+0x21c>)
 8005dc4:	220a      	movs	r2, #10
 8005dc6:	e039      	b.n	8005e3c <_printf_i+0xd8>
 8005dc8:	2973      	cmp	r1, #115	; 0x73
 8005dca:	f000 809d 	beq.w	8005f08 <_printf_i+0x1a4>
 8005dce:	d808      	bhi.n	8005de2 <_printf_i+0x7e>
 8005dd0:	296f      	cmp	r1, #111	; 0x6f
 8005dd2:	d020      	beq.n	8005e16 <_printf_i+0xb2>
 8005dd4:	2970      	cmp	r1, #112	; 0x70
 8005dd6:	d1dd      	bne.n	8005d94 <_printf_i+0x30>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	f043 0320 	orr.w	r3, r3, #32
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	e003      	b.n	8005dea <_printf_i+0x86>
 8005de2:	2975      	cmp	r1, #117	; 0x75
 8005de4:	d017      	beq.n	8005e16 <_printf_i+0xb2>
 8005de6:	2978      	cmp	r1, #120	; 0x78
 8005de8:	d1d4      	bne.n	8005d94 <_printf_i+0x30>
 8005dea:	2378      	movs	r3, #120	; 0x78
 8005dec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005df0:	4864      	ldr	r0, [pc, #400]	; (8005f84 <_printf_i+0x220>)
 8005df2:	e055      	b.n	8005ea0 <_printf_i+0x13c>
 8005df4:	6813      	ldr	r3, [r2, #0]
 8005df6:	1d19      	adds	r1, r3, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6011      	str	r1, [r2, #0]
 8005dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e04:	2301      	movs	r3, #1
 8005e06:	e08c      	b.n	8005f22 <_printf_i+0x1be>
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6011      	str	r1, [r2, #0]
 8005e0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e10:	bf18      	it	ne
 8005e12:	b21b      	sxthne	r3, r3
 8005e14:	e7cf      	b.n	8005db6 <_printf_i+0x52>
 8005e16:	6813      	ldr	r3, [r2, #0]
 8005e18:	6825      	ldr	r5, [r4, #0]
 8005e1a:	1d18      	adds	r0, r3, #4
 8005e1c:	6010      	str	r0, [r2, #0]
 8005e1e:	0628      	lsls	r0, r5, #24
 8005e20:	d501      	bpl.n	8005e26 <_printf_i+0xc2>
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	e002      	b.n	8005e2c <_printf_i+0xc8>
 8005e26:	0668      	lsls	r0, r5, #25
 8005e28:	d5fb      	bpl.n	8005e22 <_printf_i+0xbe>
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	4854      	ldr	r0, [pc, #336]	; (8005f80 <_printf_i+0x21c>)
 8005e2e:	296f      	cmp	r1, #111	; 0x6f
 8005e30:	bf14      	ite	ne
 8005e32:	220a      	movne	r2, #10
 8005e34:	2208      	moveq	r2, #8
 8005e36:	2100      	movs	r1, #0
 8005e38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e3c:	6865      	ldr	r5, [r4, #4]
 8005e3e:	60a5      	str	r5, [r4, #8]
 8005e40:	2d00      	cmp	r5, #0
 8005e42:	f2c0 8095 	blt.w	8005f70 <_printf_i+0x20c>
 8005e46:	6821      	ldr	r1, [r4, #0]
 8005e48:	f021 0104 	bic.w	r1, r1, #4
 8005e4c:	6021      	str	r1, [r4, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d13d      	bne.n	8005ece <_printf_i+0x16a>
 8005e52:	2d00      	cmp	r5, #0
 8005e54:	f040 808e 	bne.w	8005f74 <_printf_i+0x210>
 8005e58:	4665      	mov	r5, ip
 8005e5a:	2a08      	cmp	r2, #8
 8005e5c:	d10b      	bne.n	8005e76 <_printf_i+0x112>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	07db      	lsls	r3, r3, #31
 8005e62:	d508      	bpl.n	8005e76 <_printf_i+0x112>
 8005e64:	6923      	ldr	r3, [r4, #16]
 8005e66:	6862      	ldr	r2, [r4, #4]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	bfde      	ittt	le
 8005e6c:	2330      	movle	r3, #48	; 0x30
 8005e6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e76:	ebac 0305 	sub.w	r3, ip, r5
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	f8cd 8000 	str.w	r8, [sp]
 8005e80:	463b      	mov	r3, r7
 8005e82:	aa03      	add	r2, sp, #12
 8005e84:	4621      	mov	r1, r4
 8005e86:	4630      	mov	r0, r6
 8005e88:	f7ff fef6 	bl	8005c78 <_printf_common>
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d14d      	bne.n	8005f2c <_printf_i+0x1c8>
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295
 8005e94:	b005      	add	sp, #20
 8005e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e9a:	4839      	ldr	r0, [pc, #228]	; (8005f80 <_printf_i+0x21c>)
 8005e9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ea0:	6813      	ldr	r3, [r2, #0]
 8005ea2:	6821      	ldr	r1, [r4, #0]
 8005ea4:	1d1d      	adds	r5, r3, #4
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6015      	str	r5, [r2, #0]
 8005eaa:	060a      	lsls	r2, r1, #24
 8005eac:	d50b      	bpl.n	8005ec6 <_printf_i+0x162>
 8005eae:	07ca      	lsls	r2, r1, #31
 8005eb0:	bf44      	itt	mi
 8005eb2:	f041 0120 	orrmi.w	r1, r1, #32
 8005eb6:	6021      	strmi	r1, [r4, #0]
 8005eb8:	b91b      	cbnz	r3, 8005ec2 <_printf_i+0x15e>
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	f022 0220 	bic.w	r2, r2, #32
 8005ec0:	6022      	str	r2, [r4, #0]
 8005ec2:	2210      	movs	r2, #16
 8005ec4:	e7b7      	b.n	8005e36 <_printf_i+0xd2>
 8005ec6:	064d      	lsls	r5, r1, #25
 8005ec8:	bf48      	it	mi
 8005eca:	b29b      	uxthmi	r3, r3
 8005ecc:	e7ef      	b.n	8005eae <_printf_i+0x14a>
 8005ece:	4665      	mov	r5, ip
 8005ed0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ed4:	fb02 3311 	mls	r3, r2, r1, r3
 8005ed8:	5cc3      	ldrb	r3, [r0, r3]
 8005eda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ede:	460b      	mov	r3, r1
 8005ee0:	2900      	cmp	r1, #0
 8005ee2:	d1f5      	bne.n	8005ed0 <_printf_i+0x16c>
 8005ee4:	e7b9      	b.n	8005e5a <_printf_i+0xf6>
 8005ee6:	6813      	ldr	r3, [r2, #0]
 8005ee8:	6825      	ldr	r5, [r4, #0]
 8005eea:	6961      	ldr	r1, [r4, #20]
 8005eec:	1d18      	adds	r0, r3, #4
 8005eee:	6010      	str	r0, [r2, #0]
 8005ef0:	0628      	lsls	r0, r5, #24
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	d501      	bpl.n	8005efa <_printf_i+0x196>
 8005ef6:	6019      	str	r1, [r3, #0]
 8005ef8:	e002      	b.n	8005f00 <_printf_i+0x19c>
 8005efa:	066a      	lsls	r2, r5, #25
 8005efc:	d5fb      	bpl.n	8005ef6 <_printf_i+0x192>
 8005efe:	8019      	strh	r1, [r3, #0]
 8005f00:	2300      	movs	r3, #0
 8005f02:	6123      	str	r3, [r4, #16]
 8005f04:	4665      	mov	r5, ip
 8005f06:	e7b9      	b.n	8005e7c <_printf_i+0x118>
 8005f08:	6813      	ldr	r3, [r2, #0]
 8005f0a:	1d19      	adds	r1, r3, #4
 8005f0c:	6011      	str	r1, [r2, #0]
 8005f0e:	681d      	ldr	r5, [r3, #0]
 8005f10:	6862      	ldr	r2, [r4, #4]
 8005f12:	2100      	movs	r1, #0
 8005f14:	4628      	mov	r0, r5
 8005f16:	f7fa f963 	bl	80001e0 <memchr>
 8005f1a:	b108      	cbz	r0, 8005f20 <_printf_i+0x1bc>
 8005f1c:	1b40      	subs	r0, r0, r5
 8005f1e:	6060      	str	r0, [r4, #4]
 8005f20:	6863      	ldr	r3, [r4, #4]
 8005f22:	6123      	str	r3, [r4, #16]
 8005f24:	2300      	movs	r3, #0
 8005f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f2a:	e7a7      	b.n	8005e7c <_printf_i+0x118>
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	462a      	mov	r2, r5
 8005f30:	4639      	mov	r1, r7
 8005f32:	4630      	mov	r0, r6
 8005f34:	47c0      	blx	r8
 8005f36:	3001      	adds	r0, #1
 8005f38:	d0aa      	beq.n	8005e90 <_printf_i+0x12c>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	079b      	lsls	r3, r3, #30
 8005f3e:	d413      	bmi.n	8005f68 <_printf_i+0x204>
 8005f40:	68e0      	ldr	r0, [r4, #12]
 8005f42:	9b03      	ldr	r3, [sp, #12]
 8005f44:	4298      	cmp	r0, r3
 8005f46:	bfb8      	it	lt
 8005f48:	4618      	movlt	r0, r3
 8005f4a:	e7a3      	b.n	8005e94 <_printf_i+0x130>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	464a      	mov	r2, r9
 8005f50:	4639      	mov	r1, r7
 8005f52:	4630      	mov	r0, r6
 8005f54:	47c0      	blx	r8
 8005f56:	3001      	adds	r0, #1
 8005f58:	d09a      	beq.n	8005e90 <_printf_i+0x12c>
 8005f5a:	3501      	adds	r5, #1
 8005f5c:	68e3      	ldr	r3, [r4, #12]
 8005f5e:	9a03      	ldr	r2, [sp, #12]
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	42ab      	cmp	r3, r5
 8005f64:	dcf2      	bgt.n	8005f4c <_printf_i+0x1e8>
 8005f66:	e7eb      	b.n	8005f40 <_printf_i+0x1dc>
 8005f68:	2500      	movs	r5, #0
 8005f6a:	f104 0919 	add.w	r9, r4, #25
 8005f6e:	e7f5      	b.n	8005f5c <_printf_i+0x1f8>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1ac      	bne.n	8005ece <_printf_i+0x16a>
 8005f74:	7803      	ldrb	r3, [r0, #0]
 8005f76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f7e:	e76c      	b.n	8005e5a <_printf_i+0xf6>
 8005f80:	0800c685 	.word	0x0800c685
 8005f84:	0800c696 	.word	0x0800c696

08005f88 <memmove>:
 8005f88:	4288      	cmp	r0, r1
 8005f8a:	b510      	push	{r4, lr}
 8005f8c:	eb01 0302 	add.w	r3, r1, r2
 8005f90:	d807      	bhi.n	8005fa2 <memmove+0x1a>
 8005f92:	1e42      	subs	r2, r0, #1
 8005f94:	4299      	cmp	r1, r3
 8005f96:	d00a      	beq.n	8005fae <memmove+0x26>
 8005f98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f9c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005fa0:	e7f8      	b.n	8005f94 <memmove+0xc>
 8005fa2:	4283      	cmp	r3, r0
 8005fa4:	d9f5      	bls.n	8005f92 <memmove+0xa>
 8005fa6:	1881      	adds	r1, r0, r2
 8005fa8:	1ad2      	subs	r2, r2, r3
 8005faa:	42d3      	cmn	r3, r2
 8005fac:	d100      	bne.n	8005fb0 <memmove+0x28>
 8005fae:	bd10      	pop	{r4, pc}
 8005fb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fb4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005fb8:	e7f7      	b.n	8005faa <memmove+0x22>

08005fba <_realloc_r>:
 8005fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbc:	4607      	mov	r7, r0
 8005fbe:	4614      	mov	r4, r2
 8005fc0:	460e      	mov	r6, r1
 8005fc2:	b921      	cbnz	r1, 8005fce <_realloc_r+0x14>
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005fca:	f7ff bc63 	b.w	8005894 <_malloc_r>
 8005fce:	b922      	cbnz	r2, 8005fda <_realloc_r+0x20>
 8005fd0:	f7ff fc12 	bl	80057f8 <_free_r>
 8005fd4:	4625      	mov	r5, r4
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fda:	f000 f814 	bl	8006006 <_malloc_usable_size_r>
 8005fde:	42a0      	cmp	r0, r4
 8005fe0:	d20f      	bcs.n	8006002 <_realloc_r+0x48>
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	f7ff fc55 	bl	8005894 <_malloc_r>
 8005fea:	4605      	mov	r5, r0
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d0f2      	beq.n	8005fd6 <_realloc_r+0x1c>
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	f7ff fbec 	bl	80057d0 <memcpy>
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	f7ff fbfc 	bl	80057f8 <_free_r>
 8006000:	e7e9      	b.n	8005fd6 <_realloc_r+0x1c>
 8006002:	4635      	mov	r5, r6
 8006004:	e7e7      	b.n	8005fd6 <_realloc_r+0x1c>

08006006 <_malloc_usable_size_r>:
 8006006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600a:	1f18      	subs	r0, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	bfbc      	itt	lt
 8006010:	580b      	ldrlt	r3, [r1, r0]
 8006012:	18c0      	addlt	r0, r0, r3
 8006014:	4770      	bx	lr
	...

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr

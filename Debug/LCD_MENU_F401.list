
LCD_MENU_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003094  08003778  08003778  00013778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800680c  0800680c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006814  08006814  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006818  08006818  00016818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800681c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a0d8  20000014  08006830  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a0ec  08006830  0002a0ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bef0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000220d  00000000  00000000  0002bf34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000930  00000000  00000000  0002e148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e8  00000000  00000000  0002ea78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016857  00000000  00000000  0002f260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c3c  00000000  00000000  00045ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085ae2  00000000  00000000  0004f6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d51d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002258  00000000  00000000  000d5250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003760 	.word	0x08003760

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08003760 	.word	0x08003760

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_DMA_Init+0x3c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <MX_DMA_Init+0x3c>)
 80004e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_DMA_Init+0x3c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	203b      	movs	r0, #59	; 0x3b
 80004fc:	f000 fd5d 	bl	8000fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000500:	203b      	movs	r0, #59	; 0x3b
 8000502:	f000 fd76 	bl	8000ff2 <HAL_NVIC_EnableIRQ>

}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023800 	.word	0x40023800

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	4b34      	ldr	r3, [pc, #208]	; (8000600 <MX_GPIO_Init+0xec>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a33      	ldr	r2, [pc, #204]	; (8000600 <MX_GPIO_Init+0xec>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b31      	ldr	r3, [pc, #196]	; (8000600 <MX_GPIO_Init+0xec>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <MX_GPIO_Init+0xec>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a2c      	ldr	r2, [pc, #176]	; (8000600 <MX_GPIO_Init+0xec>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <MX_GPIO_Init+0xec>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	4b26      	ldr	r3, [pc, #152]	; (8000600 <MX_GPIO_Init+0xec>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a25      	ldr	r2, [pc, #148]	; (8000600 <MX_GPIO_Init+0xec>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MX_GPIO_Init+0xec>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000584:	481f      	ldr	r0, [pc, #124]	; (8000604 <MX_GPIO_Init+0xf0>)
 8000586:	f001 fa3f 	bl	8001a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2140      	movs	r1, #64	; 0x40
 800058e:	481e      	ldr	r0, [pc, #120]	; (8000608 <MX_GPIO_Init+0xf4>)
 8000590:	f001 fa3a 	bl	8001a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000594:	2301      	movs	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <MX_GPIO_Init+0xf8>)
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800059c:	2302      	movs	r3, #2
 800059e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4619      	mov	r1, r3
 80005a6:	4817      	ldr	r0, [pc, #92]	; (8000604 <MX_GPIO_Init+0xf0>)
 80005a8:	f001 f8ac 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 80005ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	480f      	ldr	r0, [pc, #60]	; (8000604 <MX_GPIO_Init+0xf0>)
 80005c6:	f001 f89d 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80005ca:	2340      	movs	r3, #64	; 0x40
 80005cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4619      	mov	r1, r3
 80005e0:	4809      	ldr	r0, [pc, #36]	; (8000608 <MX_GPIO_Init+0xf4>)
 80005e2:	f001 f88f 	bl	8001704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2006      	movs	r0, #6
 80005ec:	f000 fce5 	bl	8000fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005f0:	2006      	movs	r0, #6
 80005f2:	f000 fcfe 	bl	8000ff2 <HAL_NVIC_EnableIRQ>

}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000
 8000608:	40020400 	.word	0x40020400
 800060c:	10110000 	.word	0x10110000

08000610 <lcd_cmd>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


static void lcd_cmd(uint8_t cmd) //send any command to st7735
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <lcd_cmd+0x40>)
 8000622:	f001 f9f1 	bl	8001a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2140      	movs	r1, #64	; 0x40
 800062a:	480a      	ldr	r0, [pc, #40]	; (8000654 <lcd_cmd+0x44>)
 800062c:	f001 f9ec 	bl	8001a08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000630:	1df9      	adds	r1, r7, #7
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	2201      	movs	r2, #1
 8000638:	4807      	ldr	r0, [pc, #28]	; (8000658 <lcd_cmd+0x48>)
 800063a:	f001 fe8f 	bl	800235c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <lcd_cmd+0x44>)
 8000644:	f001 f9e0 	bl	8001a08 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020000 	.word	0x40020000
 8000654:	40020400 	.word	0x40020400
 8000658:	2000a030 	.word	0x2000a030

0800065c <lcd_data>:

static void lcd_data(uint8_t data)//send data(value for command) to st7735, spi always uses 8bit data
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <lcd_data+0x40>)
 800066e:	f001 f9cb 	bl	8001a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2140      	movs	r1, #64	; 0x40
 8000676:	480a      	ldr	r0, [pc, #40]	; (80006a0 <lcd_data+0x44>)
 8000678:	f001 f9c6 	bl	8001a08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800067c:	1df9      	adds	r1, r7, #7
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	2201      	movs	r2, #1
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <lcd_data+0x48>)
 8000686:	f001 fe69 	bl	800235c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	4804      	ldr	r0, [pc, #16]	; (80006a0 <lcd_data+0x44>)
 8000690:	f001 f9ba 	bl	8001a08 <HAL_GPIO_WritePin>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020400 	.word	0x40020400
 80006a4:	2000a030 	.word	0x2000a030

080006a8 <lcd_data16>:

static void lcd_data16(uint16_t value)//function that allows to send 16bit data as 2x 8bit
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 80006b2:	88fb      	ldrh	r3, [r7, #6]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffce 	bl	800065c <lcd_data>
	lcd_data(value);
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ffc9 	bl	800065c <lcd_data>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height) {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b084      	sub	sp, #16
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
 80006de:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);	//command to set window columns
 80006e0:	202a      	movs	r0, #42	; 0x2a
 80006e2:	f7ff ff95 	bl	8000610 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);	//start col
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ffdc 	bl	80006a8 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);	//end col
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	4413      	add	r3, r2
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	3b01      	subs	r3, #1
 80006fe:	b29b      	uxth	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ffd1 	bl	80006a8 <lcd_data16>

	lcd_cmd(ST7735S_RASET);	//command to set window rows
 8000706:	202b      	movs	r0, #43	; 0x2b
 8000708:	f7ff ff82 	bl	8000610 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);	//start row
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	b29b      	uxth	r3, r3
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ffc9 	bl	80006a8 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height - 1);	//end row
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	b29a      	uxth	r2, r3
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	b29b      	uxth	r3, r3
 800071e:	4413      	add	r3, r2
 8000720:	b29b      	uxth	r3, r3
 8000722:	3b01      	subs	r3, #1
 8000724:	b29b      	uxth	r3, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffbe 	bl	80006a8 <lcd_data16>
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <lcd_send>:

static void lcd_send(uint16_t value) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) { //checks if value is a command (9th bit is 1) or data (9th bit is 0)
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <lcd_send+0x20>
		lcd_cmd(value);
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff5f 	bl	8000610 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8000752:	e004      	b.n	800075e <lcd_send+0x2a>
		lcd_data(value);
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff7f 	bl	800065c <lcd_data>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <lcd_init>:
		0x22, 0x1f, 0x1b, 0x23, 0x37, 0x00, 0x07, 0x02, 0x10, CMD(
				ST7735S_GAMCTRN1), 0x0f, 0x1b, 0x0f, 0x17, 0x33, 0x2c, 0x29,
		0x2e, 0x30, 0x30, 0x39, 0x3f, 0x00, 0x07, 0x03, 0x10, CMD(0xf0), 0x01,
		CMD(0xf6), 0x00, CMD(ST7735S_COLMOD), 0x05, CMD(ST7735S_MADCTL), 0x00, };

void lcd_init(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
	int i;

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4817      	ldr	r0, [pc, #92]	; (80007d4 <lcd_init+0x6c>)
 8000776:	f001 f947 	bl	8001a08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800077a:	2064      	movs	r0, #100	; 0x64
 800077c:	f000 fb20 	bl	8000dc0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	4813      	ldr	r0, [pc, #76]	; (80007d4 <lcd_init+0x6c>)
 8000788:	f001 f93e 	bl	8001a08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	f000 fb17 	bl	8000dc0 <HAL_Delay>

	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	e009      	b.n	80007ac <lcd_init+0x44>
		lcd_send(init_table[i]);
 8000798:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <lcd_init+0x70>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ffc7 	bl	8000734 <lcd_send>
	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3301      	adds	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b4b      	cmp	r3, #75	; 0x4b
 80007b0:	d9f2      	bls.n	8000798 <lcd_init+0x30>
	}

	HAL_Delay(200);
 80007b2:	20c8      	movs	r0, #200	; 0xc8
 80007b4:	f000 fb04 	bl	8000dc0 <HAL_Delay>

	lcd_cmd(ST7735S_SLPOUT);
 80007b8:	2011      	movs	r0, #17
 80007ba:	f7ff ff29 	bl	8000610 <lcd_cmd>
	HAL_Delay(120);
 80007be:	2078      	movs	r0, #120	; 0x78
 80007c0:	f000 fafe 	bl	8000dc0 <HAL_Delay>

	lcd_cmd(ST7735S_DISPON);
 80007c4:	2029      	movs	r0, #41	; 0x29
 80007c6:	f7ff ff23 	bl	8000610 <lcd_cmd>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40020000 	.word	0x40020000
 80007d8:	080037a4 	.word	0x080037a4

080007dc <lcd_put_pixel>:


void lcd_put_pixel(int x, int y, uint16_t color) {
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	4613      	mov	r3, r2
 80007e8:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	01da      	lsls	r2, r3, #7
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	4413      	add	r3, r2
 80007f2:	4905      	ldr	r1, [pc, #20]	; (8000808 <lcd_put_pixel+0x2c>)
 80007f4:	88fa      	ldrh	r2, [r7, #6]
 80007f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000030 	.word	0x20000030

0800080c <lcd_copy>:


void lcd_copy(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000810:	23a0      	movs	r3, #160	; 0xa0
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	2100      	movs	r1, #0
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff ff5b 	bl	80006d2 <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 800081c:	202c      	movs	r0, #44	; 0x2c
 800081e:	f7ff fef7 	bl	8000610 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000828:	4807      	ldr	r0, [pc, #28]	; (8000848 <lcd_copy+0x3c>)
 800082a:	f001 f8ed 	bl	8001a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <lcd_copy+0x40>)
 8000834:	f001 f8e8 	bl	8001a08 <HAL_GPIO_WritePin>
//	HAL_SPI_Transmit(&hspi2, (uint8_t *)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)frame_buffer, sizeof(frame_buffer));
 8000838:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800083c:	4904      	ldr	r1, [pc, #16]	; (8000850 <lcd_copy+0x44>)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <lcd_copy+0x48>)
 8000840:	f001 fec0 	bl	80025c4 <HAL_SPI_Transmit_DMA>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40020000 	.word	0x40020000
 800084c:	40020400 	.word	0x40020400
 8000850:	20000030 	.word	0x20000030
 8000854:	2000a030 	.word	0x2000a030

08000858 <lcd_transfer_done>:


void lcd_transfer_done(void){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2140      	movs	r1, #64	; 0x40
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <lcd_transfer_done+0x14>)
 8000862:	f001 f8d1 	bl	8001a08 <HAL_GPIO_WritePin>
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40020400 	.word	0x40020400

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f000 fa32 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f816 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f7ff fe4a 	bl	8000514 <MX_GPIO_Init>
  MX_DMA_Init();
 8000880:	f7ff fe28 	bl	80004d4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000884:	f000 f8d6 	bl	8000a34 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 8000888:	f7ff ff6e 	bl	8000768 <lcd_init>
	show_main_menu(5, rgb565(255, 0, 0));
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	20ff      	movs	r0, #255	; 0xff
 8000892:	f002 fefb 	bl	800368c <rgb565>
 8000896:	4603      	mov	r3, r0
 8000898:	4619      	mov	r1, r3
 800089a:	2005      	movs	r0, #5
 800089c:	f000 f882 	bl	80009a4 <show_main_menu>
//	for (int i = 0; i < 8; ++i) {
//		hagl_draw_rounded_rectangle(2 + i, 2 + i, 158 - i, 126 - i, 8 - i,
//				rgb565(0, 0, i * 16));
//	}
//	hagl_put_text(L"Cos tu niby dziala", 20, 55, RED, font6x9);
	lcd_copy();
 80008a0:	f7ff ffb4 	bl	800080c <lcd_copy>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <main+0x34>
	...

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	; 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	2230      	movs	r2, #48	; 0x30
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 ff49 	bl	800374e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <SystemClock_Config+0xcc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a27      	ldr	r2, [pc, #156]	; (8000974 <SystemClock_Config+0xcc>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <SystemClock_Config+0xcc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <SystemClock_Config+0xd0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f4:	4a20      	ldr	r2, [pc, #128]	; (8000978 <SystemClock_Config+0xd0>)
 80008f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <SystemClock_Config+0xd0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090c:	2301      	movs	r3, #1
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000910:	2310      	movs	r3, #16
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000914:	2302      	movs	r3, #2
 8000916:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000918:	2300      	movs	r3, #0
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800091c:	2308      	movs	r3, #8
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000920:	2354      	movs	r3, #84	; 0x54
 8000922:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000928:	2304      	movs	r3, #4
 800092a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	4618      	mov	r0, r3
 8000932:	f001 f8a7 	bl	8001a84 <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800093c:	f000 f82e 	bl	800099c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000940:	230f      	movs	r3, #15
 8000942:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000944:	2302      	movs	r3, #2
 8000946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2102      	movs	r1, #2
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fb01 	bl	8001f64 <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000968:	f000 f818 	bl	800099c <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	3750      	adds	r7, #80	; 0x50
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_SPI_TxCpltCallback+0x1c>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d101      	bne.n	8000990 <HAL_SPI_TxCpltCallback+0x14>
		lcd_transfer_done();
 800098c:	f7ff ff64 	bl	8000858 <lcd_transfer_done>
	}
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000a030 	.word	0x2000a030

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <Error_Handler+0x6>

080009a4 <show_main_menu>:
#include "lcd.h"
#include "hagl.h"
#include "rgb565.h"
#include "font6x9.h"

void show_main_menu(int border_width, uint16_t color){
 80009a4:	b5b0      	push	{r4, r5, r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < border_width; ++i) {
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	e020      	b.n	80009f8 <show_main_menu+0x54>
		hagl_draw_rounded_rectangle(i, i, 128 - i, 160 - i, border_width - i, color);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	b218      	sxth	r0, r3
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	b219      	sxth	r1, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	b21c      	sxth	r4, r3
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	b21d      	sxth	r5, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	887a      	ldrh	r2, [r7, #2]
 80009e6:	9201      	str	r2, [sp, #4]
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	462b      	mov	r3, r5
 80009ec:	4622      	mov	r2, r4
 80009ee:	f002 fcb3 	bl	8003358 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < border_width; ++i) {
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	dbda      	blt.n	80009b6 <show_main_menu+0x12>
	}
	hagl_put_text(L"USTAWIENIA", 40, 30, rgb565(color, 0, 0), font6x9);
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 fe3f 	bl	800368c <rgb565>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <show_main_menu+0x88>)
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	4613      	mov	r3, r2
 8000a18:	221e      	movs	r2, #30
 8000a1a:	2128      	movs	r1, #40	; 0x28
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <show_main_menu+0x8c>)
 8000a1e:	f002 fc13 	bl	8003248 <hagl_put_text>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bdb0      	pop	{r4, r5, r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	0800383c 	.word	0x0800383c
 8000a30:	08003778 	.word	0x08003778

08000a34 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <MX_SPI1_Init+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a68:	2210      	movs	r2, #16
 8000a6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a80:	220a      	movs	r2, #10
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a86:	f001 fc05 	bl	8002294 <HAL_SPI_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a90:	f7ff ff84 	bl	800099c <Error_Handler>
  }

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000a030 	.word	0x2000a030
 8000a9c:	40013000 	.word	0x40013000

08000aa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <HAL_SPI_MspInit+0xe0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d159      	bne.n	8000b76 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <HAL_SPI_MspInit+0xe4>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a2e      	ldr	r2, [pc, #184]	; (8000b84 <HAL_SPI_MspInit+0xe4>)
 8000acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <HAL_SPI_MspInit+0xe4>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <HAL_SPI_MspInit+0xe4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <HAL_SPI_MspInit+0xe4>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <HAL_SPI_MspInit+0xe4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000afa:	23a0      	movs	r3, #160	; 0xa0
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	481c      	ldr	r0, [pc, #112]	; (8000b88 <HAL_SPI_MspInit+0xe8>)
 8000b16:	f000 fdf5 	bl	8001704 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b1c:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <HAL_SPI_MspInit+0xf0>)
 8000b1e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b22:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b26:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b2a:	2240      	movs	r2, #64	; 0x40
 8000b2c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b3a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b5c:	f000 fa64 	bl	8001028 <HAL_DMA_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000b66:	f7ff ff19 	bl	800099c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b6e:	649a      	str	r2, [r3, #72]	; 0x48
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_SPI_MspInit+0xec>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40013000 	.word	0x40013000
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	2000a088 	.word	0x2000a088
 8000b90:	40026458 	.word	0x40026458

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f000 f8a6 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f000 fefd 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <DMA2_Stream3_IRQHandler+0x10>)
 8000c4e:	f000 faf1 	bl	8001234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000a088 	.word	0x2000a088

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <SystemInit+0x28>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <SystemInit+0x28>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SystemInit+0x28>)
 8000c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c76:	609a      	str	r2, [r3, #8]
#endif
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c8e:	e003      	b.n	8000c98 <LoopCopyDataInit>

08000c90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c96:	3104      	adds	r1, #4

08000c98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ca0:	d3f6      	bcc.n	8000c90 <CopyDataInit>
  ldr  r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ca4:	e002      	b.n	8000cac <LoopFillZerobss>

08000ca6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ca6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ca8:	f842 3b04 	str.w	r3, [r2], #4

08000cac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cb0:	d3f9      	bcc.n	8000ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cb2:	f7ff ffd3 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f002 fd1b 	bl	80036f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fdd9 	bl	8000870 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000cc4:	0800681c 	.word	0x0800681c
  ldr  r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ccc:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000cd0:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000cd4:	2000a0ec 	.word	0x2000a0ec

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <HAL_Init+0x40>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_Init+0x40>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x40>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f94d 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff ff40 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023c00 	.word	0x40023c00

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f965 	bl	800100e <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f92d 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	2000a0e8 	.word	0x2000a0e8

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000a0e8 	.word	0x2000a0e8

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_Delay+0x40>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000008 	.word	0x20000008

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff3e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff31 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa2 	bl	8000f60 <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff feb8 	bl	8000da8 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e099      	b.n	8001178 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2202      	movs	r2, #2
 8001050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0201 	bic.w	r2, r2, #1
 8001062:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001064:	e00f      	b.n	8001086 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001066:	f7ff fe9f 	bl	8000da8 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b05      	cmp	r3, #5
 8001072:	d908      	bls.n	8001086 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2220      	movs	r2, #32
 8001078:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2203      	movs	r2, #3
 800107e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e078      	b.n	8001178 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1e8      	bne.n	8001066 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	4b38      	ldr	r3, [pc, #224]	; (8001180 <HAL_DMA_Init+0x158>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d107      	bne.n	80010f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4313      	orrs	r3, r2
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f023 0307 	bic.w	r3, r3, #7
 8001106:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	4313      	orrs	r3, r2
 8001110:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	2b04      	cmp	r3, #4
 8001118:	d117      	bne.n	800114a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4313      	orrs	r3, r2
 8001122:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00e      	beq.n	800114a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 fa6f 	bl	8001610 <DMA_CheckFifoParam>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d008      	beq.n	800114a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2240      	movs	r2, #64	; 0x40
 800113c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001146:	2301      	movs	r3, #1
 8001148:	e016      	b.n	8001178 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 fa26 	bl	80015a4 <DMA_CalcBaseAndBitshift>
 8001158:	4603      	mov	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001160:	223f      	movs	r2, #63	; 0x3f
 8001162:	409a      	lsls	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	f010803f 	.word	0xf010803f

08001184 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <HAL_DMA_Start_IT+0x26>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e040      	b.n	800122c <HAL_DMA_Start_IT+0xa8>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d12f      	bne.n	800121e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2202      	movs	r2, #2
 80011c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f000 f9b8 	bl	8001548 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011dc:	223f      	movs	r2, #63	; 0x3f
 80011de:	409a      	lsls	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0216 	orr.w	r2, r2, #22
 80011f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0208 	orr.w	r2, r2, #8
 800120a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0201 	orr.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e005      	b.n	800122a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001226:	2302      	movs	r3, #2
 8001228:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800122a:	7dfb      	ldrb	r3, [r7, #23]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001240:	4b92      	ldr	r3, [pc, #584]	; (800148c <HAL_DMA_IRQHandler+0x258>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a92      	ldr	r2, [pc, #584]	; (8001490 <HAL_DMA_IRQHandler+0x25c>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0a9b      	lsrs	r3, r3, #10
 800124c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125e:	2208      	movs	r2, #8
 8001260:	409a      	lsls	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4013      	ands	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d01a      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d013      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0204 	bic.w	r2, r2, #4
 8001286:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128c:	2208      	movs	r2, #8
 800128e:	409a      	lsls	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a4:	2201      	movs	r2, #1
 80012a6:	409a      	lsls	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d012      	beq.n	80012d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00b      	beq.n	80012d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c2:	2201      	movs	r2, #1
 80012c4:	409a      	lsls	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ce:	f043 0202 	orr.w	r2, r3, #2
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012da:	2204      	movs	r2, #4
 80012dc:	409a      	lsls	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d012      	beq.n	800130c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00b      	beq.n	800130c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f8:	2204      	movs	r2, #4
 80012fa:	409a      	lsls	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001304:	f043 0204 	orr.w	r2, r3, #4
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001310:	2210      	movs	r2, #16
 8001312:	409a      	lsls	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d043      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d03c      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132e:	2210      	movs	r2, #16
 8001330:	409a      	lsls	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d018      	beq.n	8001376 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d108      	bne.n	8001364 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	2b00      	cmp	r3, #0
 8001358:	d024      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	4798      	blx	r3
 8001362:	e01f      	b.n	80013a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001368:	2b00      	cmp	r3, #0
 800136a:	d01b      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
 8001374:	e016      	b.n	80013a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d107      	bne.n	8001394 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0208 	bic.w	r2, r2, #8
 8001392:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a8:	2220      	movs	r2, #32
 80013aa:	409a      	lsls	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 808e 	beq.w	80014d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8086 	beq.w	80014d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ca:	2220      	movs	r2, #32
 80013cc:	409a      	lsls	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b05      	cmp	r3, #5
 80013dc:	d136      	bne.n	800144c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0216 	bic.w	r2, r2, #22
 80013ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	695a      	ldr	r2, [r3, #20]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	2b00      	cmp	r3, #0
 8001404:	d103      	bne.n	800140e <HAL_DMA_IRQHandler+0x1da>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0208 	bic.w	r2, r2, #8
 800141c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	223f      	movs	r2, #63	; 0x3f
 8001424:	409a      	lsls	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800143e:	2b00      	cmp	r3, #0
 8001440:	d07d      	beq.n	800153e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	4798      	blx	r3
        }
        return;
 800144a:	e078      	b.n	800153e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d01c      	beq.n	8001494 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d108      	bne.n	800147a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	2b00      	cmp	r3, #0
 800146e:	d030      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	4798      	blx	r3
 8001478:	e02b      	b.n	80014d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147e:	2b00      	cmp	r3, #0
 8001480:	d027      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	4798      	blx	r3
 800148a:	e022      	b.n	80014d2 <HAL_DMA_IRQHandler+0x29e>
 800148c:	20000000 	.word	0x20000000
 8001490:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10f      	bne.n	80014c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0210 	bic.w	r2, r2, #16
 80014b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d032      	beq.n	8001540 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d022      	beq.n	800152c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2205      	movs	r2, #5
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0201 	bic.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	3301      	adds	r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	429a      	cmp	r2, r3
 8001508:	d307      	bcc.n	800151a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f2      	bne.n	80014fe <HAL_DMA_IRQHandler+0x2ca>
 8001518:	e000      	b.n	800151c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800151a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
 800153c:	e000      	b.n	8001540 <HAL_DMA_IRQHandler+0x30c>
        return;
 800153e:	bf00      	nop
    }
  }
}
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop

08001548 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001564:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b40      	cmp	r3, #64	; 0x40
 8001574:	d108      	bne.n	8001588 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001586:	e007      	b.n	8001598 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	3b10      	subs	r3, #16
 80015b4:	4a14      	ldr	r2, [pc, #80]	; (8001608 <DMA_CalcBaseAndBitshift+0x64>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <DMA_CalcBaseAndBitshift+0x68>)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d909      	bls.n	80015e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015da:	f023 0303 	bic.w	r3, r3, #3
 80015de:	1d1a      	adds	r2, r3, #4
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	659a      	str	r2, [r3, #88]	; 0x58
 80015e4:	e007      	b.n	80015f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015ee:	f023 0303 	bic.w	r3, r3, #3
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	aaaaaaab 	.word	0xaaaaaaab
 800160c:	08006804 	.word	0x08006804

08001610 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d11f      	bne.n	800166a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d855      	bhi.n	80016dc <DMA_CheckFifoParam+0xcc>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <DMA_CheckFifoParam+0x28>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001649 	.word	0x08001649
 800163c:	0800165b 	.word	0x0800165b
 8001640:	08001649 	.word	0x08001649
 8001644:	080016dd 	.word	0x080016dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d045      	beq.n	80016e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001658:	e042      	b.n	80016e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001662:	d13f      	bne.n	80016e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001668:	e03c      	b.n	80016e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001672:	d121      	bne.n	80016b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d836      	bhi.n	80016e8 <DMA_CheckFifoParam+0xd8>
 800167a:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <DMA_CheckFifoParam+0x70>)
 800167c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001680:	08001691 	.word	0x08001691
 8001684:	08001697 	.word	0x08001697
 8001688:	08001691 	.word	0x08001691
 800168c:	080016a9 	.word	0x080016a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
      break;
 8001694:	e02f      	b.n	80016f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d024      	beq.n	80016ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016a6:	e021      	b.n	80016ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016b0:	d11e      	bne.n	80016f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016b6:	e01b      	b.n	80016f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d902      	bls.n	80016c4 <DMA_CheckFifoParam+0xb4>
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d003      	beq.n	80016ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016c2:	e018      	b.n	80016f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
      break;
 80016c8:	e015      	b.n	80016f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00e      	beq.n	80016f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
      break;
 80016da:	e00b      	b.n	80016f4 <DMA_CheckFifoParam+0xe4>
      break;
 80016dc:	bf00      	nop
 80016de:	e00a      	b.n	80016f6 <DMA_CheckFifoParam+0xe6>
      break;
 80016e0:	bf00      	nop
 80016e2:	e008      	b.n	80016f6 <DMA_CheckFifoParam+0xe6>
      break;
 80016e4:	bf00      	nop
 80016e6:	e006      	b.n	80016f6 <DMA_CheckFifoParam+0xe6>
      break;
 80016e8:	bf00      	nop
 80016ea:	e004      	b.n	80016f6 <DMA_CheckFifoParam+0xe6>
      break;
 80016ec:	bf00      	nop
 80016ee:	e002      	b.n	80016f6 <DMA_CheckFifoParam+0xe6>
      break;   
 80016f0:	bf00      	nop
 80016f2:	e000      	b.n	80016f6 <DMA_CheckFifoParam+0xe6>
      break;
 80016f4:	bf00      	nop
    }
  } 
  
  return status; 
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	e159      	b.n	80019d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	429a      	cmp	r2, r3
 800173a:	f040 8148 	bne.w	80019ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d00b      	beq.n	800175e <HAL_GPIO_Init+0x5a>
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d007      	beq.n	800175e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001752:	2b11      	cmp	r3, #17
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b12      	cmp	r3, #18
 800175c:	d130      	bne.n	80017c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 0201 	and.w	r2, r3, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0xfc>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b12      	cmp	r3, #18
 80017fe:	d123      	bne.n	8001848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	08da      	lsrs	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3208      	adds	r2, #8
 8001842:	69b9      	ldr	r1, [r7, #24]
 8001844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0203 	and.w	r2, r3, #3
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 80a2 	beq.w	80019ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b56      	ldr	r3, [pc, #344]	; (80019e8 <HAL_GPIO_Init+0x2e4>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	4a55      	ldr	r2, [pc, #340]	; (80019e8 <HAL_GPIO_Init+0x2e4>)
 8001894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001898:	6453      	str	r3, [r2, #68]	; 0x44
 800189a:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_GPIO_Init+0x2e4>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a6:	4a51      	ldr	r2, [pc, #324]	; (80019ec <HAL_GPIO_Init+0x2e8>)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	3302      	adds	r3, #2
 80018ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a48      	ldr	r2, [pc, #288]	; (80019f0 <HAL_GPIO_Init+0x2ec>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d019      	beq.n	8001906 <HAL_GPIO_Init+0x202>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a47      	ldr	r2, [pc, #284]	; (80019f4 <HAL_GPIO_Init+0x2f0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x1fe>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a46      	ldr	r2, [pc, #280]	; (80019f8 <HAL_GPIO_Init+0x2f4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x1fa>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a45      	ldr	r2, [pc, #276]	; (80019fc <HAL_GPIO_Init+0x2f8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x1f6>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a44      	ldr	r2, [pc, #272]	; (8001a00 <HAL_GPIO_Init+0x2fc>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x1f2>
 80018f2:	2304      	movs	r3, #4
 80018f4:	e008      	b.n	8001908 <HAL_GPIO_Init+0x204>
 80018f6:	2307      	movs	r3, #7
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x204>
 80018fa:	2303      	movs	r3, #3
 80018fc:	e004      	b.n	8001908 <HAL_GPIO_Init+0x204>
 80018fe:	2302      	movs	r3, #2
 8001900:	e002      	b.n	8001908 <HAL_GPIO_Init+0x204>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x204>
 8001906:	2300      	movs	r3, #0
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f002 0203 	and.w	r2, r2, #3
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	4093      	lsls	r3, r2
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001918:	4934      	ldr	r1, [pc, #208]	; (80019ec <HAL_GPIO_Init+0x2e8>)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_GPIO_Init+0x300>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800194a:	4a2e      	ldr	r2, [pc, #184]	; (8001a04 <HAL_GPIO_Init+0x300>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001950:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <HAL_GPIO_Init+0x300>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001974:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <HAL_GPIO_Init+0x300>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_GPIO_Init+0x300>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199e:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_GPIO_Init+0x300>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_GPIO_Init+0x300>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_GPIO_Init+0x300>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b0f      	cmp	r3, #15
 80019d8:	f67f aea2 	bls.w	8001720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019dc:	bf00      	nop
 80019de:	3724      	adds	r7, #36	; 0x24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40013800 	.word	0x40013800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40020800 	.word	0x40020800
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40013c00 	.word	0x40013c00

08001a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
 8001a14:	4613      	mov	r3, r2
 8001a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a18:	787b      	ldrb	r3, [r7, #1]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1e:	887a      	ldrh	r2, [r7, #2]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a24:	e003      	b.n	8001a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	041a      	lsls	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	619a      	str	r2, [r3, #24]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f806 	bl	8001a6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40013c00 	.word	0x40013c00

08001a6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e25b      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d075      	beq.n	8001b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aa2:	4ba3      	ldr	r3, [pc, #652]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d00c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aae:	4ba0      	ldr	r3, [pc, #640]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d112      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aba:	4b9d      	ldr	r3, [pc, #628]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	4b99      	ldr	r3, [pc, #612]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d05b      	beq.n	8001b8c <HAL_RCC_OscConfig+0x108>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d157      	bne.n	8001b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e236      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_OscConfig+0x74>
 8001aea:	4b91      	ldr	r3, [pc, #580]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a90      	ldr	r2, [pc, #576]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xb0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x98>
 8001b02:	4b8b      	ldr	r3, [pc, #556]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a8a      	ldr	r2, [pc, #552]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b88      	ldr	r3, [pc, #544]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a87      	ldr	r2, [pc, #540]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xb0>
 8001b1c:	4b84      	ldr	r3, [pc, #528]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a83      	ldr	r2, [pc, #524]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b81      	ldr	r3, [pc, #516]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a80      	ldr	r2, [pc, #512]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f934 	bl	8000da8 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f930 	bl	8000da8 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1fb      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xc0>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f920 	bl	8000da8 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f91c 	bl	8000da8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1e7      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	4b6c      	ldr	r3, [pc, #432]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0xe8>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d063      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b9a:	4b65      	ldr	r3, [pc, #404]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba6:	4b62      	ldr	r3, [pc, #392]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d11c      	bne.n	8001bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb2:	4b5f      	ldr	r3, [pc, #380]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	4b5c      	ldr	r3, [pc, #368]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x152>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e1bb      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b56      	ldr	r3, [pc, #344]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4952      	ldr	r1, [pc, #328]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	e03a      	b.n	8001c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf4:	4b4f      	ldr	r3, [pc, #316]	; (8001d34 <HAL_RCC_OscConfig+0x2b0>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f8d5 	bl	8000da8 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff f8d1 	bl	8000da8 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e19c      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c14:	4b46      	ldr	r3, [pc, #280]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4940      	ldr	r1, [pc, #256]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
 8001c34:	e015      	b.n	8001c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c36:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <HAL_RCC_OscConfig+0x2b0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f8b4 	bl	8000da8 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c44:	f7ff f8b0 	bl	8000da8 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e17b      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d030      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d016      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_RCC_OscConfig+0x2b4>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f894 	bl	8000da8 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff f890 	bl	8000da8 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e15b      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x200>
 8001ca2:	e015      	b.n	8001cd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_RCC_OscConfig+0x2b4>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7ff f87d 	bl	8000da8 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb2:	f7ff f879 	bl	8000da8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e144      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80a0 	beq.w	8001e1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10f      	bne.n	8001d0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_OscConfig+0x2b8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d121      	bne.n	8001d5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <HAL_RCC_OscConfig+0x2b8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <HAL_RCC_OscConfig+0x2b8>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d26:	f7ff f83f 	bl	8000da8 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	e011      	b.n	8001d52 <HAL_RCC_OscConfig+0x2ce>
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	42470000 	.word	0x42470000
 8001d38:	42470e80 	.word	0x42470e80
 8001d3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d40:	f7ff f832 	bl	8000da8 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0fd      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	4b81      	ldr	r3, [pc, #516]	; (8001f58 <HAL_RCC_OscConfig+0x4d4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d106      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2f0>
 8001d66:	4b7d      	ldr	r3, [pc, #500]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	4a7c      	ldr	r2, [pc, #496]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6713      	str	r3, [r2, #112]	; 0x70
 8001d72:	e01c      	b.n	8001dae <HAL_RCC_OscConfig+0x32a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d10c      	bne.n	8001d96 <HAL_RCC_OscConfig+0x312>
 8001d7c:	4b77      	ldr	r3, [pc, #476]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	4a76      	ldr	r2, [pc, #472]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	6713      	str	r3, [r2, #112]	; 0x70
 8001d88:	4b74      	ldr	r3, [pc, #464]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	4a73      	ldr	r2, [pc, #460]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6713      	str	r3, [r2, #112]	; 0x70
 8001d94:	e00b      	b.n	8001dae <HAL_RCC_OscConfig+0x32a>
 8001d96:	4b71      	ldr	r3, [pc, #452]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9a:	4a70      	ldr	r2, [pc, #448]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6713      	str	r3, [r2, #112]	; 0x70
 8001da2:	4b6e      	ldr	r3, [pc, #440]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da6:	4a6d      	ldr	r2, [pc, #436]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d015      	beq.n	8001de2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db6:	f7fe fff7 	bl	8000da8 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7fe fff3 	bl	8000da8 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e0bc      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd4:	4b61      	ldr	r3, [pc, #388]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0ee      	beq.n	8001dbe <HAL_RCC_OscConfig+0x33a>
 8001de0:	e014      	b.n	8001e0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7fe ffe1 	bl	8000da8 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7fe ffdd 	bl	8000da8 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0a6      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	4b56      	ldr	r3, [pc, #344]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1ee      	bne.n	8001dea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d105      	bne.n	8001e1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e12:	4b52      	ldr	r3, [pc, #328]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a51      	ldr	r2, [pc, #324]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8092 	beq.w	8001f4c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e28:	4b4c      	ldr	r3, [pc, #304]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d05c      	beq.n	8001eee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d141      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3c:	4b48      	ldr	r3, [pc, #288]	; (8001f60 <HAL_RCC_OscConfig+0x4dc>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe ffb1 	bl	8000da8 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7fe ffad 	bl	8000da8 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e078      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f0      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	019b      	lsls	r3, r3, #6
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	085b      	lsrs	r3, r3, #1
 8001e80:	3b01      	subs	r3, #1
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	061b      	lsls	r3, r3, #24
 8001e8c:	4933      	ldr	r1, [pc, #204]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e92:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <HAL_RCC_OscConfig+0x4dc>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7fe ff86 	bl	8000da8 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7fe ff82 	bl	8000da8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e04d      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x41c>
 8001ebe:	e045      	b.n	8001f4c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_RCC_OscConfig+0x4dc>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7fe ff6f 	bl	8000da8 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe ff6b 	bl	8000da8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e036      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x44a>
 8001eec:	e02e      	b.n	8001f4c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e029      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_RCC_OscConfig+0x4d8>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d11c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d115      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f22:	4013      	ands	r3, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d10d      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d106      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	42470060 	.word	0x42470060

08001f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0cc      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b68      	ldr	r3, [pc, #416]	; (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d90c      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b65      	ldr	r3, [pc, #404]	; (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b63      	ldr	r3, [pc, #396]	; (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0b8      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb8:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a58      	ldr	r2, [pc, #352]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd0:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a52      	ldr	r2, [pc, #328]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fdc:	4b50      	ldr	r3, [pc, #320]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	494d      	ldr	r1, [pc, #308]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d044      	beq.n	8002084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b47      	ldr	r3, [pc, #284]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d119      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e07f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d003      	beq.n	8002022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201e:	2b03      	cmp	r3, #3
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b3f      	ldr	r3, [pc, #252]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e06f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e067      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b37      	ldr	r3, [pc, #220]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4934      	ldr	r1, [pc, #208]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002054:	f7fe fea8 	bl	8000da8 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7fe fea4 	bl	8000da8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e04f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b25      	ldr	r3, [pc, #148]	; (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d20c      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e032      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4916      	ldr	r1, [pc, #88]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	490e      	ldr	r1, [pc, #56]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ea:	f000 f821 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020ee:	4601      	mov	r1, r0
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	5cd3      	ldrb	r3, [r2, r3]
 80020fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fe08 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023c00 	.word	0x40023c00
 8002120:	40023800 	.word	0x40023800
 8002124:	080067f4 	.word	0x080067f4
 8002128:	20000000 	.word	0x20000000
 800212c:	20000004 	.word	0x20000004

08002130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	2300      	movs	r3, #0
 8002140:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002146:	4b50      	ldr	r3, [pc, #320]	; (8002288 <HAL_RCC_GetSysClockFreq+0x158>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b04      	cmp	r3, #4
 8002150:	d007      	beq.n	8002162 <HAL_RCC_GetSysClockFreq+0x32>
 8002152:	2b08      	cmp	r3, #8
 8002154:	d008      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x38>
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 808d 	bne.w	8002276 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800215c:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_RCC_GetSysClockFreq+0x15c>)
 800215e:	60bb      	str	r3, [r7, #8]
       break;
 8002160:	e08c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002162:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <HAL_RCC_GetSysClockFreq+0x160>)
 8002164:	60bb      	str	r3, [r7, #8]
      break;
 8002166:	e089      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002168:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCC_GetSysClockFreq+0x158>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002170:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002172:	4b45      	ldr	r3, [pc, #276]	; (8002288 <HAL_RCC_GetSysClockFreq+0x158>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d023      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800217e:	4b42      	ldr	r3, [pc, #264]	; (8002288 <HAL_RCC_GetSysClockFreq+0x158>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	099b      	lsrs	r3, r3, #6
 8002184:	f04f 0400 	mov.w	r4, #0
 8002188:	f240 11ff 	movw	r1, #511	; 0x1ff
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	ea03 0501 	and.w	r5, r3, r1
 8002194:	ea04 0602 	and.w	r6, r4, r2
 8002198:	4a3d      	ldr	r2, [pc, #244]	; (8002290 <HAL_RCC_GetSysClockFreq+0x160>)
 800219a:	fb02 f106 	mul.w	r1, r2, r6
 800219e:	2200      	movs	r2, #0
 80021a0:	fb02 f205 	mul.w	r2, r2, r5
 80021a4:	440a      	add	r2, r1
 80021a6:	493a      	ldr	r1, [pc, #232]	; (8002290 <HAL_RCC_GetSysClockFreq+0x160>)
 80021a8:	fba5 0101 	umull	r0, r1, r5, r1
 80021ac:	1853      	adds	r3, r2, r1
 80021ae:	4619      	mov	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f04f 0400 	mov.w	r4, #0
 80021b6:	461a      	mov	r2, r3
 80021b8:	4623      	mov	r3, r4
 80021ba:	f7fe f80b 	bl	80001d4 <__aeabi_uldivmod>
 80021be:	4603      	mov	r3, r0
 80021c0:	460c      	mov	r4, r1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e049      	b.n	800225a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c6:	4b30      	ldr	r3, [pc, #192]	; (8002288 <HAL_RCC_GetSysClockFreq+0x158>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	099b      	lsrs	r3, r3, #6
 80021cc:	f04f 0400 	mov.w	r4, #0
 80021d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	ea03 0501 	and.w	r5, r3, r1
 80021dc:	ea04 0602 	and.w	r6, r4, r2
 80021e0:	4629      	mov	r1, r5
 80021e2:	4632      	mov	r2, r6
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	f04f 0400 	mov.w	r4, #0
 80021ec:	0154      	lsls	r4, r2, #5
 80021ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021f2:	014b      	lsls	r3, r1, #5
 80021f4:	4619      	mov	r1, r3
 80021f6:	4622      	mov	r2, r4
 80021f8:	1b49      	subs	r1, r1, r5
 80021fa:	eb62 0206 	sbc.w	r2, r2, r6
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	f04f 0400 	mov.w	r4, #0
 8002206:	0194      	lsls	r4, r2, #6
 8002208:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800220c:	018b      	lsls	r3, r1, #6
 800220e:	1a5b      	subs	r3, r3, r1
 8002210:	eb64 0402 	sbc.w	r4, r4, r2
 8002214:	f04f 0100 	mov.w	r1, #0
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	00e2      	lsls	r2, r4, #3
 800221e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002222:	00d9      	lsls	r1, r3, #3
 8002224:	460b      	mov	r3, r1
 8002226:	4614      	mov	r4, r2
 8002228:	195b      	adds	r3, r3, r5
 800222a:	eb44 0406 	adc.w	r4, r4, r6
 800222e:	f04f 0100 	mov.w	r1, #0
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	02a2      	lsls	r2, r4, #10
 8002238:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800223c:	0299      	lsls	r1, r3, #10
 800223e:	460b      	mov	r3, r1
 8002240:	4614      	mov	r4, r2
 8002242:	4618      	mov	r0, r3
 8002244:	4621      	mov	r1, r4
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f04f 0400 	mov.w	r4, #0
 800224c:	461a      	mov	r2, r3
 800224e:	4623      	mov	r3, r4
 8002250:	f7fd ffc0 	bl	80001d4 <__aeabi_uldivmod>
 8002254:	4603      	mov	r3, r0
 8002256:	460c      	mov	r4, r1
 8002258:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_GetSysClockFreq+0x158>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	3301      	adds	r3, #1
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	60bb      	str	r3, [r7, #8]
      break;
 8002274:	e002      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002278:	60bb      	str	r3, [r7, #8]
      break;
 800227a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227c:	68bb      	ldr	r3, [r7, #8]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	00f42400 	.word	0x00f42400
 8002290:	017d7840 	.word	0x017d7840

08002294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e056      	b.n	8002354 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7fe fbed 	bl	8000aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	ea42 0103 	orr.w	r1, r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	0c1b      	lsrs	r3, r3, #16
 8002324:	f003 0104 	and.w	r1, r3, #4
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002342:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_SPI_Transmit+0x22>
 800237a:	2302      	movs	r3, #2
 800237c:	e11e      	b.n	80025bc <HAL_SPI_Transmit+0x260>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002386:	f7fe fd0f 	bl	8000da8 <HAL_GetTick>
 800238a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d002      	beq.n	80023a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800239c:	2302      	movs	r3, #2
 800239e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023a0:	e103      	b.n	80025aa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_SPI_Transmit+0x52>
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023b2:	e0fa      	b.n	80025aa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2203      	movs	r2, #3
 80023b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	88fa      	ldrh	r2, [r7, #6]
 80023cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	88fa      	ldrh	r2, [r7, #6]
 80023d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fa:	d107      	bne.n	800240c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800240a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b40      	cmp	r3, #64	; 0x40
 8002418:	d007      	beq.n	800242a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002432:	d14b      	bne.n	80024cc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_SPI_Transmit+0xe6>
 800243c:	8afb      	ldrh	r3, [r7, #22]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d13e      	bne.n	80024c0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	881a      	ldrh	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	1c9a      	adds	r2, r3, #2
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002466:	e02b      	b.n	80024c0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d112      	bne.n	800249c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	881a      	ldrh	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	1c9a      	adds	r2, r3, #2
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	86da      	strh	r2, [r3, #54]	; 0x36
 800249a:	e011      	b.n	80024c0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800249c:	f7fe fc84 	bl	8000da8 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d803      	bhi.n	80024b4 <HAL_SPI_Transmit+0x158>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b2:	d102      	bne.n	80024ba <HAL_SPI_Transmit+0x15e>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024be:	e074      	b.n	80025aa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1ce      	bne.n	8002468 <HAL_SPI_Transmit+0x10c>
 80024ca:	e04c      	b.n	8002566 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_SPI_Transmit+0x17e>
 80024d4:	8afb      	ldrh	r3, [r7, #22]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d140      	bne.n	800255c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	330c      	adds	r3, #12
 80024e4:	7812      	ldrb	r2, [r2, #0]
 80024e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002500:	e02c      	b.n	800255c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b02      	cmp	r3, #2
 800250e:	d113      	bne.n	8002538 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	330c      	adds	r3, #12
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252c:	b29b      	uxth	r3, r3
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	86da      	strh	r2, [r3, #54]	; 0x36
 8002536:	e011      	b.n	800255c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002538:	f7fe fc36 	bl	8000da8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d803      	bhi.n	8002550 <HAL_SPI_Transmit+0x1f4>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d102      	bne.n	8002556 <HAL_SPI_Transmit+0x1fa>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	77fb      	strb	r3, [r7, #31]
          goto error;
 800255a:	e026      	b.n	80025aa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1cd      	bne.n	8002502 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f9d8 	bl	8002920 <SPI_EndRxTxTransaction>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	77fb      	strb	r3, [r7, #31]
 80025a6:	e000      	b.n	80025aa <HAL_SPI_Transmit+0x24e>
  }

error:
 80025a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	4613      	mov	r3, r2
 80025d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_SPI_Transmit_DMA+0x20>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e093      	b.n	800270c <HAL_SPI_Transmit_DMA+0x148>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d002      	beq.n	80025fe <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
 80025fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025fc:	e081      	b.n	8002702 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_SPI_Transmit_DMA+0x46>
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d102      	bne.n	8002610 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800260e:	e078      	b.n	8002702 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2203      	movs	r2, #3
 8002614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	88fa      	ldrh	r2, [r7, #6]
 8002628:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	88fa      	ldrh	r2, [r7, #6]
 800262e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002656:	d107      	bne.n	8002668 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002666:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266c:	4a29      	ldr	r2, [pc, #164]	; (8002714 <HAL_SPI_Transmit_DMA+0x150>)
 800266e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <HAL_SPI_Transmit_DMA+0x154>)
 8002676:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267c:	4a27      	ldr	r2, [pc, #156]	; (800271c <HAL_SPI_Transmit_DMA+0x158>)
 800267e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002684:	2200      	movs	r2, #0
 8002686:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	4619      	mov	r1, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	330c      	adds	r3, #12
 8002698:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80026a0:	f7fe fd70 	bl	8001184 <HAL_DMA_Start_IT>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00c      	beq.n	80026c4 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	f043 0210 	orr.w	r2, r3, #16
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80026c2:	e01e      	b.n	8002702 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d007      	beq.n	80026e2 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0220 	orr.w	r2, r2, #32
 80026f0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0202 	orr.w	r2, r2, #2
 8002700:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800270a:	7dfb      	ldrb	r3, [r7, #23]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	080027f1 	.word	0x080027f1
 8002718:	08002749 	.word	0x08002749
 800271c:	0800280d 	.word	0x0800280d

08002720 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002756:	f7fe fb27 	bl	8000da8 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800276a:	d03b      	beq.n	80027e4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0220 	bic.w	r2, r2, #32
 800277a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0202 	bic.w	r2, r2, #2
 800278a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	2164      	movs	r1, #100	; 0x64
 8002790:	6978      	ldr	r0, [r7, #20]
 8002792:	f000 f8c5 	bl	8002920 <SPI_EndRxTxTransaction>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10a      	bne.n	80027c6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2200      	movs	r2, #0
 80027ca:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80027dc:	6978      	ldr	r0, [r7, #20]
 80027de:	f7ff ffa9 	bl	8002734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80027e2:	e002      	b.n	80027ea <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80027e4:	6978      	ldr	r0, [r7, #20]
 80027e6:	f7fe f8c9 	bl	800097c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f7ff ff8e 	bl	8002720 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0203 	bic.w	r2, r2, #3
 8002828:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	f043 0210 	orr.w	r2, r3, #16
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff ff78 	bl	8002734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800285c:	e04c      	b.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d048      	beq.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002866:	f7fe fa9f 	bl	8000da8 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d902      	bls.n	800287c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d13d      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800288a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002894:	d111      	bne.n	80028ba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800289e:	d004      	beq.n	80028aa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a8:	d107      	bne.n	80028ba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c2:	d10f      	bne.n	80028e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e00f      	b.n	8002918 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	429a      	cmp	r2, r3
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	429a      	cmp	r2, r3
 8002914:	d1a3      	bne.n	800285e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <SPI_EndRxTxTransaction+0x7c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <SPI_EndRxTxTransaction+0x80>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0d5b      	lsrs	r3, r3, #21
 8002938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800294a:	d112      	bne.n	8002972 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2200      	movs	r2, #0
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f7ff ff78 	bl	800284c <SPI_WaitFlagStateUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f043 0220 	orr.w	r2, r3, #32
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e00f      	b.n	8002992 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3b01      	subs	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002988:	2b80      	cmp	r3, #128	; 0x80
 800298a:	d0f2      	beq.n	8002972 <SPI_EndRxTxTransaction+0x52>
 800298c:	e000      	b.n	8002990 <SPI_EndRxTxTransaction+0x70>
        break;
 800298e:	bf00      	nop
  }

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000000 	.word	0x20000000
 80029a0:	165e9f81 	.word	0x165e9f81

080029a4 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	881a      	ldrh	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	799b      	ldrb	r3, [r3, #6]
 80029b6:	08db      	lsrs	r3, r3, #3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	fb12 f303 	smulbb	r3, r2, r3
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	889b      	ldrh	r3, [r3, #4]
 80029ca:	461a      	mov	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	885b      	ldrh	r3, [r3, #2]
 80029d0:	fb03 f302 	mul.w	r3, r3, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	60da      	str	r2, [r3, #12]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 80029ec:	b490      	push	{r4, r7}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4604      	mov	r4, r0
 80029f4:	4608      	mov	r0, r1
 80029f6:	1d39      	adds	r1, r7, #4
 80029f8:	e881 000c 	stmia.w	r1, {r2, r3}
 80029fc:	4623      	mov	r3, r4
 80029fe:	81fb      	strh	r3, [r7, #14]
 8002a00:	4603      	mov	r3, r0
 8002a02:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8002a08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a0c:	88ba      	ldrh	r2, [r7, #4]
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	da04      	bge.n	8002a1c <code+0x30>
        code |= LEFT;
 8002a12:	2201      	movs	r2, #1
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	75fb      	strb	r3, [r7, #23]
 8002a1a:	e008      	b.n	8002a2e <code+0x42>
    } else if (x0 > window.x1) {
 8002a1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a20:	893a      	ldrh	r2, [r7, #8]
 8002a22:	4293      	cmp	r3, r2
 8002a24:	dd03      	ble.n	8002a2e <code+0x42>
        code |= RIGHT;
 8002a26:	2202      	movs	r2, #2
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8002a2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	4293      	cmp	r3, r2
 8002a36:	da04      	bge.n	8002a42 <code+0x56>
        code |= BOTTOM;
 8002a38:	2204      	movs	r2, #4
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	75fb      	strb	r3, [r7, #23]
 8002a40:	e008      	b.n	8002a54 <code+0x68>
    } else if (y0 > window.y1) {
 8002a42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a46:	897a      	ldrh	r2, [r7, #10]
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	dd03      	ble.n	8002a54 <code+0x68>
        code |= TOP;
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc90      	pop	{r4, r7}
 8002a5e:	4770      	bx	lr

08002a60 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a7e:	cb0c      	ldmia	r3, {r2, r3}
 8002a80:	f7ff ffb4 	bl	80029ec <code>
 8002a84:	4603      	mov	r3, r0
 8002a86:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002a94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a98:	cb0c      	ldmia	r3, {r2, r3}
 8002a9a:	f7ff ffa7 	bl	80029ec <code>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8002aa6:	7ffa      	ldrb	r2, [r7, #31]
 8002aa8:	7fbb      	ldrb	r3, [r7, #30]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	777b      	strb	r3, [r7, #29]
            break;
 8002ab6:	e0e9      	b.n	8002c8c <clip_line+0x22c>
        } else if (code0 & code1) {
 8002ab8:	7ffa      	ldrb	r2, [r7, #31]
 8002aba:	7fbb      	ldrb	r3, [r7, #30]
 8002abc:	4013      	ands	r3, r2
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f040 80e2 	bne.w	8002c8a <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8002ace:	7ffb      	ldrb	r3, [r7, #31]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <clip_line+0x78>
 8002ad4:	7ffb      	ldrb	r3, [r7, #31]
 8002ad6:	e000      	b.n	8002ada <clip_line+0x7a>
 8002ad8:	7fbb      	ldrb	r3, [r7, #30]
 8002ada:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8002adc:	2208      	movs	r2, #8
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d024      	beq.n	8002b32 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af6:	4619      	mov	r1, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002afe:	1acb      	subs	r3, r1, r3
 8002b00:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8002b02:	4608      	mov	r0, r1
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002b0a:	1a41      	subs	r1, r0, r1
 8002b0c:	fb01 f103 	mul.w	r1, r1, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b16:	4618      	mov	r0, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b1e:	1ac3      	subs	r3, r0, r3
 8002b20:	fb91 f3f3 	sdiv	r3, r1, r3
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8002b2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b2e:	833b      	strh	r3, [r7, #24]
 8002b30:	e07f      	b.n	8002c32 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8002b32:	2204      	movs	r2, #4
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	4013      	ands	r3, r2
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d024      	beq.n	8002b88 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b54:	1acb      	subs	r3, r1, r3
 8002b56:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8002b58:	4608      	mov	r0, r1
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002b60:	1a41      	subs	r1, r0, r1
 8002b62:	fb01 f103 	mul.w	r1, r1, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b74:	1ac3      	subs	r3, r0, r3
 8002b76:	fb91 f3f3 	sdiv	r3, r1, r3
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8002b82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b84:	833b      	strh	r3, [r7, #24]
 8002b86:	e054      	b.n	8002c32 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8002b88:	2202      	movs	r2, #2
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d024      	beq.n	8002bde <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002baa:	1acb      	subs	r3, r1, r3
 8002bac:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8002bae:	4608      	mov	r0, r1
 8002bb0:	68f9      	ldr	r1, [r7, #12]
 8002bb2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002bb6:	1a41      	subs	r1, r0, r1
 8002bb8:	fb01 f103 	mul.w	r1, r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bca:	1ac3      	subs	r3, r0, r3
 8002bcc:	fb91 f3f3 	sdiv	r3, r1, r3
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8002bd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002bda:	837b      	strh	r3, [r7, #26]
 8002bdc:	e029      	b.n	8002c32 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8002bde:	2201      	movs	r2, #1
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	4013      	ands	r3, r2
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d023      	beq.n	8002c32 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c00:	1acb      	subs	r3, r1, r3
 8002c02:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002c04:	4608      	mov	r0, r1
 8002c06:	68f9      	ldr	r1, [r7, #12]
 8002c08:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002c0c:	1a41      	subs	r1, r0, r1
 8002c0e:	fb01 f103 	mul.w	r1, r1, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c20:	1ac3      	subs	r3, r0, r3
 8002c22:	fb91 f3f3 	sdiv	r3, r1, r3
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8002c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c30:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8002c32:	7dfa      	ldrb	r2, [r7, #23]
 8002c34:	7ffb      	ldrb	r3, [r7, #31]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d113      	bne.n	8002c62 <clip_line+0x202>
                *x0 = x;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8b7a      	ldrh	r2, [r7, #26]
 8002c3e:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	8b3a      	ldrh	r2, [r7, #24]
 8002c44:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c56:	cb0c      	ldmia	r3, {r2, r3}
 8002c58:	f7ff fec8 	bl	80029ec <code>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	77fb      	strb	r3, [r7, #31]
 8002c60:	e721      	b.n	8002aa6 <clip_line+0x46>
            } else {
                *x1 = x;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8b7a      	ldrh	r2, [r7, #26]
 8002c66:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	8b3a      	ldrh	r2, [r7, #24]
 8002c6c:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c7e:	cb0c      	ldmia	r3, {r2, r3}
 8002c80:	f7ff feb4 	bl	80029ec <code>
 8002c84:	4603      	mov	r3, r0
 8002c86:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8002c88:	e70d      	b.n	8002aa6 <clip_line+0x46>
            break;
 8002c8a:	bf00      	nop
            }
        }
    }

    return accept;
 8002c8c:	7f7b      	ldrb	r3, [r7, #29]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3720      	adds	r7, #32
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	3306      	adds	r3, #6
 8002ca6:	2208      	movs	r2, #8
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f000 fd45 	bl	8003738 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	7b9a      	ldrb	r2, [r3, #14]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	7bda      	ldrb	r2, [r3, #15]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	7c1a      	ldrb	r2, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	72da      	strb	r2, [r3, #11]

    return 0;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08e      	sub	sp, #56	; 0x38
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ffd7 	bl	8002c96 <fontx_meta>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8002cee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <fontx_glyph+0x2c>
        return status;
 8002cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cfa:	e077      	b.n	8002dec <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8002cfc:	7f7a      	ldrb	r2, [r7, #29]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8002d02:	7fba      	ldrb	r2, [r7, #30]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8002d08:	7f7b      	ldrb	r3, [r7, #29]
 8002d0a:	3307      	adds	r3, #7
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	da00      	bge.n	8002d12 <fontx_glyph+0x42>
 8002d10:	3307      	adds	r3, #7
 8002d12:	10db      	asrs	r3, r3, #3
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	78da      	ldrb	r2, [r3, #3]
 8002d1e:	7fbb      	ldrb	r3, [r7, #30]
 8002d20:	fb12 f303 	smulbb	r3, r2, r3
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8002d2a:	7ffb      	ldrb	r3, [r7, #31]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10f      	bne.n	8002d50 <fontx_glyph+0x80>
        if (code < 0x100) {
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2bff      	cmp	r3, #255	; 0xff
 8002d34:	d859      	bhi.n	8002dea <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	789b      	ldrb	r3, [r3, #2]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	fb03 f302 	mul.w	r3, r3, r2
 8002d42:	3311      	adds	r3, #17
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	441a      	add	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e04d      	b.n	8002dec <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3312      	adds	r3, #18
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3311      	adds	r3, #17
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8002d62:	e03d      	b.n	8002de0 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8002d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	4413      	add	r3, r2
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8002d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d78:	3302      	adds	r3, #2
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	3303      	adds	r3, #3
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	4413      	add	r3, r2
 8002d88:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d31c      	bcc.n	8002dcc <fontx_glyph+0xfc>
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d818      	bhi.n	8002dcc <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da2:	4413      	add	r3, r2
 8002da4:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3311      	adds	r3, #17
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	461a      	mov	r2, r3
                    nc * glyph->size
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	789b      	ldrb	r3, [r3, #2]
 8002db4:	4619      	mov	r1, r3
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	fb03 f301 	mul.w	r3, r3, r1
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	441a      	add	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e00f      	b.n	8002dec <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8002dcc:	6a3a      	ldr	r2, [r7, #32]
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	1ad2      	subs	r2, r2, r3
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	3304      	adds	r3, #4
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	1e5a      	subs	r2, r3, #1
 8002de4:	633a      	str	r2, [r7, #48]	; 0x30
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1bc      	bne.n	8002d64 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8002dea:	2301      	movs	r3, #1
 8002dec:	4618      	mov	r0, r3
 8002dee:	3738      	adds	r7, #56	; 0x38
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	dd01      	ble.n	8002e0a <min+0x16>
        return b;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	e000      	b.n	8002e0c <min+0x18>
    };
    return a;
 8002e0a:	687b      	ldr	r3, [r7, #4]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	80fb      	strh	r3, [r7, #6]
 8002e22:	460b      	mov	r3, r1
 8002e24:	80bb      	strh	r3, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8002e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e2e:	4a12      	ldr	r2, [pc, #72]	; (8002e78 <hagl_put_pixel+0x60>)
 8002e30:	8812      	ldrh	r2, [r2, #0]
 8002e32:	4293      	cmp	r3, r2
 8002e34:	db1a      	blt.n	8002e6c <hagl_put_pixel+0x54>
 8002e36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e3a:	4a0f      	ldr	r2, [pc, #60]	; (8002e78 <hagl_put_pixel+0x60>)
 8002e3c:	8852      	ldrh	r2, [r2, #2]
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	db14      	blt.n	8002e6c <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8002e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e46:	4a0c      	ldr	r2, [pc, #48]	; (8002e78 <hagl_put_pixel+0x60>)
 8002e48:	8892      	ldrh	r2, [r2, #4]
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	dc10      	bgt.n	8002e70 <hagl_put_pixel+0x58>
 8002e4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e52:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <hagl_put_pixel+0x60>)
 8002e54:	88d2      	ldrh	r2, [r2, #6]
 8002e56:	4293      	cmp	r3, r2
 8002e58:	dc0a      	bgt.n	8002e70 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8002e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e5e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd fcb9 	bl	80007dc <lcd_put_pixel>
 8002e6a:	e002      	b.n	8002e72 <hagl_put_pixel+0x5a>
        return;
 8002e6c:	bf00      	nop
 8002e6e:	e000      	b.n	8002e72 <hagl_put_pixel+0x5a>
        return;
 8002e70:	bf00      	nop
}
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	2000000c 	.word	0x2000000c

08002e7c <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	4604      	mov	r4, r0
 8002e84:	4608      	mov	r0, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	80fb      	strh	r3, [r7, #6]
 8002e8e:	4603      	mov	r3, r0
 8002e90:	80bb      	strh	r3, [r7, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	807b      	strh	r3, [r7, #2]
 8002e96:	4613      	mov	r3, r2
 8002e98:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8002e9a:	88fa      	ldrh	r2, [r7, #6]
 8002e9c:	887b      	ldrh	r3, [r7, #2]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	b21a      	sxth	r2, r3
 8002ea4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002ea8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002eac:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002eb0:	883b      	ldrh	r3, [r7, #0]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	4623      	mov	r3, r4
 8002eb6:	f000 f827 	bl	8002f08 <hagl_draw_line>
#endif
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd90      	pop	{r4, r7, pc}

08002ec2 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8002ec2:	b590      	push	{r4, r7, lr}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af02      	add	r7, sp, #8
 8002ec8:	4604      	mov	r4, r0
 8002eca:	4608      	mov	r0, r1
 8002ecc:	4611      	mov	r1, r2
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	80fb      	strh	r3, [r7, #6]
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	80bb      	strh	r3, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
 8002edc:	4613      	mov	r3, r2
 8002ede:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8002ee0:	88ba      	ldrh	r2, [r7, #4]
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	b21c      	sxth	r4, r3
 8002eea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002eee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002ef2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002ef6:	883b      	ldrh	r3, [r7, #0]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	4623      	mov	r3, r4
 8002efc:	f000 f804 	bl	8002f08 <hagl_draw_line>
#endif
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd90      	pop	{r4, r7, pc}

08002f08 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8002f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	4604      	mov	r4, r0
 8002f10:	4608      	mov	r0, r1
 8002f12:	4611      	mov	r1, r2
 8002f14:	461a      	mov	r2, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	80fb      	strh	r3, [r7, #6]
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	80bb      	strh	r3, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	807b      	strh	r3, [r7, #2]
 8002f22:	4613      	mov	r3, r2
 8002f24:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8002f26:	463b      	mov	r3, r7
 8002f28:	1cba      	adds	r2, r7, #2
 8002f2a:	1d3d      	adds	r5, r7, #4
 8002f2c:	1dbc      	adds	r4, r7, #6
 8002f2e:	494a      	ldr	r1, [pc, #296]	; (8003058 <hagl_draw_line+0x150>)
 8002f30:	466e      	mov	r6, sp
 8002f32:	c903      	ldmia	r1, {r0, r1}
 8002f34:	e886 0003 	stmia.w	r6, {r0, r1}
 8002f38:	4629      	mov	r1, r5
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f7ff fd90 	bl	8002a60 <clip_line>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f083 0301 	eor.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d17e      	bne.n	800304a <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8002f4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f50:	461a      	mov	r2, r3
 8002f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bfb8      	it	lt
 8002f5c:	425b      	neglt	r3, r3
 8002f5e:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8002f60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	da01      	bge.n	8002f70 <hagl_draw_line+0x68>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e001      	b.n	8002f74 <hagl_draw_line+0x6c>
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8002f76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	bfb8      	it	lt
 8002f86:	425b      	neglt	r3, r3
 8002f88:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8002f8a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002f8e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	da01      	bge.n	8002f9a <hagl_draw_line+0x92>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e001      	b.n	8002f9e <hagl_draw_line+0x96>
 8002f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9e:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8002fa0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002fa4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	dd06      	ble.n	8002fba <hagl_draw_line+0xb2>
 8002fac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fb0:	0fda      	lsrs	r2, r3, #31
 8002fb2:	4413      	add	r3, r2
 8002fb4:	105b      	asrs	r3, r3, #1
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	e006      	b.n	8002fc8 <hagl_draw_line+0xc0>
 8002fba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fbe:	425b      	negs	r3, r3
 8002fc0:	0fda      	lsrs	r2, r3, #31
 8002fc2:	4413      	add	r3, r2
 8002fc4:	105b      	asrs	r3, r3, #1
 8002fc6:	b21b      	sxth	r3, r3
 8002fc8:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8002fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002fd2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff1f 	bl	8002e18 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8002fda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002fde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d105      	bne.n	8002ff2 <hagl_draw_line+0xea>
 8002fe6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002fea:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d02d      	beq.n	800304e <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8002ff2:	8afb      	ldrh	r3, [r7, #22]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8002ffa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002ffe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003002:	425b      	negs	r3, r3
 8003004:	429a      	cmp	r2, r3
 8003006:	dd0c      	ble.n	8003022 <hagl_draw_line+0x11a>
            err -= dy;
 8003008:	8afa      	ldrh	r2, [r7, #22]
 800300a:	8a3b      	ldrh	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	b29b      	uxth	r3, r3
 8003010:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8003012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003016:	b29a      	uxth	r2, r3
 8003018:	8a7b      	ldrh	r3, [r7, #18]
 800301a:	4413      	add	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	b21b      	sxth	r3, r3
 8003020:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8003022:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003026:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800302a:	429a      	cmp	r2, r3
 800302c:	dacd      	bge.n	8002fca <hagl_draw_line+0xc2>
            err += dx;
 800302e:	8afa      	ldrh	r2, [r7, #22]
 8003030:	8abb      	ldrh	r3, [r7, #20]
 8003032:	4413      	add	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8003038:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800303c:	b29a      	uxth	r2, r3
 800303e:	89fb      	ldrh	r3, [r7, #14]
 8003040:	4413      	add	r3, r2
 8003042:	b29b      	uxth	r3, r3
 8003044:	b21b      	sxth	r3, r3
 8003046:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8003048:	e7bf      	b.n	8002fca <hagl_draw_line+0xc2>
        return;
 800304a:	bf00      	nop
 800304c:	e000      	b.n	8003050 <hagl_draw_line+0x148>
            break;
 800304e:	bf00      	nop
        }
    }
}
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003056:	bf00      	nop
 8003058:	2000000c 	.word	0x2000000c

0800305c <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 800305c:	b590      	push	{r4, r7, lr}
 800305e:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	f107 0410 	add.w	r4, r7, #16
 800306a:	3c04      	subs	r4, #4
 800306c:	6020      	str	r0, [r4, #0]
 800306e:	460c      	mov	r4, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	3b06      	subs	r3, #6
 800307a:	4622      	mov	r2, r4
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	f107 0310 	add.w	r3, r7, #16
 8003082:	3b08      	subs	r3, #8
 8003084:	4602      	mov	r2, r0
 8003086:	801a      	strh	r2, [r3, #0]
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	3b0a      	subs	r3, #10
 800308e:	460a      	mov	r2, r1
 8003090:	801a      	strh	r2, [r3, #0]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8003092:	f107 0310 	add.w	r3, r7, #16
 8003096:	3b04      	subs	r3, #4
 8003098:	f107 0010 	add.w	r0, r7, #16
 800309c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	f7ff fe14 	bl	8002cd0 <fontx_glyph>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80030ae:	f102 0209 	add.w	r2, r2, #9
 80030b2:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80030b4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80030b8:	f103 0309 	add.w	r3, r3, #9
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <hagl_put_char+0x6a>
        return 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e0ba      	b.n	800323c <hagl_put_char+0x1e0>
    }

    bitmap.width = glyph.width,
 80030c6:	f107 0310 	add.w	r3, r7, #16
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030d2:	3b18      	subs	r3, #24
 80030d4:	801a      	strh	r2, [r3, #0]
    bitmap.height = glyph.height,
 80030d6:	f107 0310 	add.w	r3, r7, #16
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030e2:	3b18      	subs	r3, #24
 80030e4:	805a      	strh	r2, [r3, #2]
    bitmap.depth = DISPLAY_DEPTH,
 80030e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030ea:	3b18      	subs	r3, #24
 80030ec:	2210      	movs	r2, #16
 80030ee:	719a      	strb	r2, [r3, #6]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80030f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80030f4:	3a08      	subs	r2, #8
 80030f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030fa:	3b18      	subs	r3, #24
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fc50 	bl	80029a4 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8003104:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003108:	3b18      	subs	r3, #24
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003110:	f102 020c 	add.w	r2, r2, #12
 8003114:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8003116:	2300      	movs	r3, #0
 8003118:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800311c:	f102 020b 	add.w	r2, r2, #11
 8003120:	7013      	strb	r3, [r2, #0]
 8003122:	e06c      	b.n	80031fe <hagl_put_char+0x1a2>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8003124:	2300      	movs	r3, #0
 8003126:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800312a:	f102 020a 	add.w	r2, r2, #10
 800312e:	7013      	strb	r3, [r2, #0]
 8003130:	e046      	b.n	80031c0 <hagl_put_char+0x164>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8003132:	f107 0310 	add.w	r3, r7, #16
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	b25a      	sxtb	r2, r3
 800313c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003140:	f103 030a 	add.w	r3, r3, #10
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	2180      	movs	r1, #128	; 0x80
 800314c:	fa41 f303 	asr.w	r3, r1, r3
 8003150:	b25b      	sxtb	r3, r3
 8003152:	4013      	ands	r3, r2
 8003154:	b25b      	sxtb	r3, r3
 8003156:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800315a:	f102 0208 	add.w	r2, r2, #8
 800315e:	7013      	strb	r3, [r2, #0]
            if (set) {
 8003160:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003164:	f103 0308 	add.w	r3, r3, #8
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d010      	beq.n	8003190 <hagl_put_char+0x134>
                *(ptr++) = color;
 800316e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003172:	f103 030c 	add.w	r3, r3, #12
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	1c93      	adds	r3, r2, #2
 800317a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800317e:	f101 010c 	add.w	r1, r1, #12
 8003182:	600b      	str	r3, [r1, #0]
 8003184:	f107 0310 	add.w	r3, r7, #16
 8003188:	3b0a      	subs	r3, #10
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	8013      	strh	r3, [r2, #0]
 800318e:	e00c      	b.n	80031aa <hagl_put_char+0x14e>
            } else {
                *(ptr++) = 0x0000;
 8003190:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003194:	f103 030c 	add.w	r3, r3, #12
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	1c9a      	adds	r2, r3, #2
 800319c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80031a0:	f101 010c 	add.w	r1, r1, #12
 80031a4:	600a      	str	r2, [r1, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80031aa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80031ae:	f103 030a 	add.w	r3, r3, #10
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80031ba:	f102 020a 	add.w	r2, r2, #10
 80031be:	7013      	strb	r3, [r2, #0]
 80031c0:	f107 0310 	add.w	r3, r7, #16
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80031ca:	f102 020a 	add.w	r2, r2, #10
 80031ce:	7812      	ldrb	r2, [r2, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d3ae      	bcc.n	8003132 <hagl_put_char+0xd6>
            }
        }
        glyph.buffer += glyph.pitch;
 80031d4:	f107 0310 	add.w	r3, r7, #16
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f107 0210 	add.w	r2, r7, #16
 80031de:	78d2      	ldrb	r2, [r2, #3]
 80031e0:	441a      	add	r2, r3
 80031e2:	f107 0310 	add.w	r3, r7, #16
 80031e6:	605a      	str	r2, [r3, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80031e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80031ec:	f103 030b 	add.w	r3, r3, #11
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80031f8:	f102 020b 	add.w	r2, r2, #11
 80031fc:	7013      	strb	r3, [r2, #0]
 80031fe:	f107 0310 	add.w	r3, r7, #16
 8003202:	785b      	ldrb	r3, [r3, #1]
 8003204:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003208:	f102 020b 	add.w	r2, r2, #11
 800320c:	7812      	ldrb	r2, [r2, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d388      	bcc.n	8003124 <hagl_put_char+0xc8>
    }

    hagl_blit(x0, y0, &bitmap);
 8003212:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003216:	3a18      	subs	r2, #24
 8003218:	f107 0310 	add.w	r3, r7, #16
 800321c:	3b08      	subs	r3, #8
 800321e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003222:	f107 0310 	add.w	r3, r7, #16
 8003226:	3b06      	subs	r3, #6
 8003228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 f85a 	bl	80032e6 <hagl_blit>

    return bitmap.width;
 8003232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003236:	3b18      	subs	r3, #24
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b2db      	uxtb	r3, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bd90      	pop	{r4, r7, pc}

08003248 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08c      	sub	sp, #48	; 0x30
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	4603      	mov	r3, r0
 8003258:	817b      	strh	r3, [r7, #10]
 800325a:	460b      	mov	r3, r1
 800325c:	813b      	strh	r3, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8003262:	897b      	ldrh	r3, [r7, #10]
 8003264:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8003266:	f107 0314 	add.w	r3, r7, #20
 800326a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fd12 	bl	8002c96 <fontx_meta>
 8003272:	4603      	mov	r3, r0
 8003274:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8003278:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <hagl_put_text+0x3c>
        return 0;
 8003280:	2300      	movs	r3, #0
 8003282:	e02c      	b.n	80032de <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1d1a      	adds	r2, r3, #4
 8003288:	60fa      	str	r2, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	2b0d      	cmp	r3, #13
 8003292:	d002      	beq.n	800329a <hagl_put_text+0x52>
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	2b0a      	cmp	r3, #10
 8003298:	d108      	bne.n	80032ac <hagl_put_text+0x64>
            x0 = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 800329e:	7fbb      	ldrb	r3, [r7, #30]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	893b      	ldrh	r3, [r7, #8]
 80032a4:	4413      	add	r3, r2
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	813b      	strh	r3, [r7, #8]
 80032aa:	e010      	b.n	80032ce <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80032ac:	88f8      	ldrh	r0, [r7, #6]
 80032ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80032b2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	4603      	mov	r3, r0
 80032bc:	6a38      	ldr	r0, [r7, #32]
 80032be:	f7ff fecd 	bl	800305c <hagl_put_char>
 80032c2:	4603      	mov	r3, r0
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	897b      	ldrh	r3, [r7, #10]
 80032c8:	4413      	add	r3, r2
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1d6      	bne.n	8003284 <hagl_put_text+0x3c>

    return x0 - original;
 80032d6:	897a      	ldrh	r2, [r7, #10]
 80032d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	b29b      	uxth	r3, r3
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3728      	adds	r7, #40	; 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	603a      	str	r2, [r7, #0]
 80032f0:	80fb      	strh	r3, [r7, #6]
 80032f2:	460b      	mov	r3, r1
 80032f4:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 80032fc:	2300      	movs	r3, #0
 80032fe:	827b      	strh	r3, [r7, #18]
 8003300:	e020      	b.n	8003344 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8003302:	2300      	movs	r3, #0
 8003304:	823b      	strh	r3, [r7, #16]
 8003306:	e015      	b.n	8003334 <hagl_blit+0x4e>
            color = *(ptr++);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	1c9a      	adds	r2, r3, #2
 800330c:	617a      	str	r2, [r7, #20]
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	8a3b      	ldrh	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	b218      	sxth	r0, r3
 800331c:	88ba      	ldrh	r2, [r7, #4]
 800331e:	8a7b      	ldrh	r3, [r7, #18]
 8003320:	4413      	add	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	b21b      	sxth	r3, r3
 8003326:	89fa      	ldrh	r2, [r7, #14]
 8003328:	4619      	mov	r1, r3
 800332a:	f7ff fd75 	bl	8002e18 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800332e:	8a3b      	ldrh	r3, [r7, #16]
 8003330:	3301      	adds	r3, #1
 8003332:	823b      	strh	r3, [r7, #16]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	8a3a      	ldrh	r2, [r7, #16]
 800333a:	429a      	cmp	r2, r3
 800333c:	d3e4      	bcc.n	8003308 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800333e:	8a7b      	ldrh	r3, [r7, #18]
 8003340:	3301      	adds	r3, #1
 8003342:	827b      	strh	r3, [r7, #18]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	885b      	ldrh	r3, [r3, #2]
 8003348:	8a7a      	ldrh	r2, [r7, #18]
 800334a:	429a      	cmp	r2, r3
 800334c:	d3d9      	bcc.n	8003302 <hagl_blit+0x1c>
        }
    }
#endif
};
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	4604      	mov	r4, r0
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	461a      	mov	r2, r3
 8003366:	4623      	mov	r3, r4
 8003368:	80fb      	strh	r3, [r7, #6]
 800336a:	4603      	mov	r3, r0
 800336c:	80bb      	strh	r3, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	807b      	strh	r3, [r7, #2]
 8003372:	4613      	mov	r3, r2
 8003374:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8003376:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800337a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800337e:	429a      	cmp	r2, r3
 8003380:	dd0e      	ble.n	80033a0 <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 8003382:	88fa      	ldrh	r2, [r7, #6]
 8003384:	887b      	ldrh	r3, [r7, #2]
 8003386:	4413      	add	r3, r2
 8003388:	b29b      	uxth	r3, r3
 800338a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800338c:	88fa      	ldrh	r2, [r7, #6]
 800338e:	887b      	ldrh	r3, [r7, #2]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	b29b      	uxth	r3, r3
 8003394:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	b29b      	uxth	r3, r3
 800339e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 80033a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80033a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	dd0e      	ble.n	80033ca <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 80033ac:	88ba      	ldrh	r2, [r7, #4]
 80033ae:	883b      	ldrh	r3, [r7, #0]
 80033b0:	4413      	add	r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80033b6:	88ba      	ldrh	r2, [r7, #4]
 80033b8:	883b      	ldrh	r3, [r7, #0]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	b29b      	uxth	r3, r3
 80033be:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80033c0:	88ba      	ldrh	r2, [r7, #4]
 80033c2:	883b      	ldrh	r3, [r7, #0]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80033ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033ce:	4a52      	ldr	r2, [pc, #328]	; (8003518 <hagl_draw_rounded_rectangle+0x1c0>)
 80033d0:	8812      	ldrh	r2, [r2, #0]
 80033d2:	4293      	cmp	r3, r2
 80033d4:	f2c0 8153 	blt.w	800367e <hagl_draw_rounded_rectangle+0x326>
 80033d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80033dc:	4a4e      	ldr	r2, [pc, #312]	; (8003518 <hagl_draw_rounded_rectangle+0x1c0>)
 80033de:	8852      	ldrh	r2, [r2, #2]
 80033e0:	4293      	cmp	r3, r2
 80033e2:	f2c0 814c 	blt.w	800367e <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80033e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ea:	4a4b      	ldr	r2, [pc, #300]	; (8003518 <hagl_draw_rounded_rectangle+0x1c0>)
 80033ec:	8892      	ldrh	r2, [r2, #4]
 80033ee:	4293      	cmp	r3, r2
 80033f0:	f300 8147 	bgt.w	8003682 <hagl_draw_rounded_rectangle+0x32a>
 80033f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033f8:	4a47      	ldr	r2, [pc, #284]	; (8003518 <hagl_draw_rounded_rectangle+0x1c0>)
 80033fa:	88d2      	ldrh	r2, [r2, #6]
 80033fc:	4293      	cmp	r3, r2
 80033fe:	f300 8140 	bgt.w	8003682 <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	b29b      	uxth	r3, r3
 800340a:	3301      	adds	r3, #1
 800340c:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 800340e:	883a      	ldrh	r2, [r7, #0]
 8003410:	88bb      	ldrh	r3, [r7, #4]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	b29b      	uxth	r3, r3
 8003416:	3301      	adds	r3, #1
 8003418:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 800341a:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800341e:	8a3b      	ldrh	r3, [r7, #16]
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	89fb      	ldrh	r3, [r7, #14]
 8003428:	085b      	lsrs	r3, r3, #1
 800342a:	b29b      	uxth	r3, r3
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f7ff fce0 	bl	8002df4 <min>
 8003434:	4603      	mov	r3, r0
 8003436:	4619      	mov	r1, r3
 8003438:	4620      	mov	r0, r4
 800343a:	f7ff fcdb 	bl	8002df4 <min>
 800343e:	4603      	mov	r3, r0
 8003440:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 8003442:	88fa      	ldrh	r2, [r7, #6]
 8003444:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003446:	4413      	add	r3, r2
 8003448:	b29b      	uxth	r3, r3
 800344a:	b218      	sxth	r0, r3
 800344c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	b29b      	uxth	r3, r3
 8003452:	8a3a      	ldrh	r2, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	b29a      	uxth	r2, r3
 8003458:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800345a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800345e:	f7ff fd0d 	bl	8002e7c <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003466:	4413      	add	r3, r2
 8003468:	b29b      	uxth	r3, r3
 800346a:	b218      	sxth	r0, r3
 800346c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	b29b      	uxth	r3, r3
 8003472:	8a3a      	ldrh	r2, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	b29a      	uxth	r2, r3
 8003478:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800347a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800347e:	f7ff fcfd 	bl	8002e7c <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 8003482:	88ba      	ldrh	r2, [r7, #4]
 8003484:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003486:	4413      	add	r3, r2
 8003488:	b29b      	uxth	r3, r3
 800348a:	b219      	sxth	r1, r3
 800348c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	b29b      	uxth	r3, r3
 8003492:	89fa      	ldrh	r2, [r7, #14]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	b29a      	uxth	r2, r3
 8003498:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800349a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800349e:	f7ff fd10 	bl	8002ec2 <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 80034a2:	88ba      	ldrh	r2, [r7, #4]
 80034a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034a6:	4413      	add	r3, r2
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	b219      	sxth	r1, r3
 80034ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	89fa      	ldrh	r2, [r7, #14]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034ba:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80034be:	f7ff fd00 	bl	8002ec2 <hagl_draw_vline>

    x = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	82fb      	strh	r3, [r7, #22]
    y = r;
 80034c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034c8:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 80034ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f1c3 0303 	rsb	r3, r3, #3
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 80034d8:	e0c9      	b.n	800366e <hagl_draw_rounded_rectangle+0x316>
        x++;
 80034da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3301      	adds	r3, #1
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 80034e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	dd16      	ble.n	800351c <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 80034ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 80034fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	b29b      	uxth	r3, r3
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	b29a      	uxth	r2, r3
 800350a:	8a7b      	ldrh	r3, [r7, #18]
 800350c:	4413      	add	r3, r2
 800350e:	b29b      	uxth	r3, r3
 8003510:	330a      	adds	r3, #10
 8003512:	b29b      	uxth	r3, r3
 8003514:	827b      	strh	r3, [r7, #18]
 8003516:	e00a      	b.n	800352e <hagl_draw_rounded_rectangle+0x1d6>
 8003518:	2000000c 	.word	0x2000000c
        } else {
            d = d + 4 * x + 6;
 800351c:	8afb      	ldrh	r3, [r7, #22]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	b29a      	uxth	r2, r3
 8003522:	8a7b      	ldrh	r3, [r7, #18]
 8003524:	4413      	add	r3, r2
 8003526:	b29b      	uxth	r3, r3
 8003528:	3306      	adds	r3, #6
 800352a:	b29b      	uxth	r3, r3
 800352c:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 800352e:	887a      	ldrh	r2, [r7, #2]
 8003530:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	b29a      	uxth	r2, r3
 8003536:	8afb      	ldrh	r3, [r7, #22]
 8003538:	4413      	add	r3, r2
 800353a:	b29b      	uxth	r3, r3
 800353c:	b218      	sxth	r0, r3
 800353e:	88ba      	ldrh	r2, [r7, #4]
 8003540:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003542:	4413      	add	r3, r2
 8003544:	b29a      	uxth	r2, r3
 8003546:	8abb      	ldrh	r3, [r7, #20]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	b29b      	uxth	r3, r3
 800354c:	b21b      	sxth	r3, r3
 800354e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003550:	4619      	mov	r1, r3
 8003552:	f7ff fc61 	bl	8002e18 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	b29a      	uxth	r2, r3
 800355e:	8abb      	ldrh	r3, [r7, #20]
 8003560:	4413      	add	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	b218      	sxth	r0, r3
 8003566:	88ba      	ldrh	r2, [r7, #4]
 8003568:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800356a:	4413      	add	r3, r2
 800356c:	b29a      	uxth	r2, r3
 800356e:	8afb      	ldrh	r3, [r7, #22]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	b29b      	uxth	r3, r3
 8003574:	b21b      	sxth	r3, r3
 8003576:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003578:	4619      	mov	r1, r3
 800357a:	f7ff fc4d 	bl	8002e18 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 800357e:	88fa      	ldrh	r2, [r7, #6]
 8003580:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003582:	4413      	add	r3, r2
 8003584:	b29a      	uxth	r2, r3
 8003586:	8afb      	ldrh	r3, [r7, #22]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	b29b      	uxth	r3, r3
 800358c:	b218      	sxth	r0, r3
 800358e:	88ba      	ldrh	r2, [r7, #4]
 8003590:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003592:	4413      	add	r3, r2
 8003594:	b29a      	uxth	r2, r3
 8003596:	8abb      	ldrh	r3, [r7, #20]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	b29b      	uxth	r3, r3
 800359c:	b21b      	sxth	r3, r3
 800359e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80035a0:	4619      	mov	r1, r3
 80035a2:	f7ff fc39 	bl	8002e18 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035aa:	4413      	add	r3, r2
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	8abb      	ldrh	r3, [r7, #20]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	b218      	sxth	r0, r3
 80035b6:	88ba      	ldrh	r2, [r7, #4]
 80035b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035ba:	4413      	add	r3, r2
 80035bc:	b29a      	uxth	r2, r3
 80035be:	8afb      	ldrh	r3, [r7, #22]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	b21b      	sxth	r3, r3
 80035c6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80035c8:	4619      	mov	r1, r3
 80035ca:	f7ff fc25 	bl	8002e18 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	8afb      	ldrh	r3, [r7, #22]
 80035d8:	4413      	add	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	b218      	sxth	r0, r3
 80035de:	883a      	ldrh	r2, [r7, #0]
 80035e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	8abb      	ldrh	r3, [r7, #20]
 80035e8:	4413      	add	r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	b21b      	sxth	r3, r3
 80035ee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80035f0:	4619      	mov	r1, r3
 80035f2:	f7ff fc11 	bl	8002e18 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	8abb      	ldrh	r3, [r7, #20]
 8003600:	4413      	add	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	b218      	sxth	r0, r3
 8003606:	883a      	ldrh	r2, [r7, #0]
 8003608:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	b29a      	uxth	r2, r3
 800360e:	8afb      	ldrh	r3, [r7, #22]
 8003610:	4413      	add	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	b21b      	sxth	r3, r3
 8003616:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003618:	4619      	mov	r1, r3
 800361a:	f7ff fbfd 	bl	8002e18 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003622:	4413      	add	r3, r2
 8003624:	b29a      	uxth	r2, r3
 8003626:	8afb      	ldrh	r3, [r7, #22]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	b29b      	uxth	r3, r3
 800362c:	b218      	sxth	r0, r3
 800362e:	883a      	ldrh	r2, [r7, #0]
 8003630:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	b29a      	uxth	r2, r3
 8003636:	8abb      	ldrh	r3, [r7, #20]
 8003638:	4413      	add	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	b21b      	sxth	r3, r3
 800363e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003640:	4619      	mov	r1, r3
 8003642:	f7ff fbe9 	bl	8002e18 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 8003646:	88fa      	ldrh	r2, [r7, #6]
 8003648:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800364a:	4413      	add	r3, r2
 800364c:	b29a      	uxth	r2, r3
 800364e:	8abb      	ldrh	r3, [r7, #20]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	b29b      	uxth	r3, r3
 8003654:	b218      	sxth	r0, r3
 8003656:	883a      	ldrh	r2, [r7, #0]
 8003658:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	b29a      	uxth	r2, r3
 800365e:	8afb      	ldrh	r3, [r7, #22]
 8003660:	4413      	add	r3, r2
 8003662:	b29b      	uxth	r3, r3
 8003664:	b21b      	sxth	r3, r3
 8003666:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003668:	4619      	mov	r1, r3
 800366a:	f7ff fbd5 	bl	8002e18 <hagl_put_pixel>
    while (y >= x) {
 800366e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003672:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003676:	429a      	cmp	r2, r3
 8003678:	f6bf af2f 	bge.w	80034da <hagl_draw_rounded_rectangle+0x182>
 800367c:	e002      	b.n	8003684 <hagl_draw_rounded_rectangle+0x32c>
        return;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <hagl_draw_rounded_rectangle+0x32c>
        return;
 8003682:	bf00      	nop
    }
};
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd90      	pop	{r4, r7, pc}
 800368a:	bf00      	nop

0800368c <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
 8003696:	460b      	mov	r3, r1
 8003698:	71bb      	strb	r3, [r7, #6]
 800369a:	4613      	mov	r3, r2
 800369c:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	b21b      	sxth	r3, r3
 80036a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80036a8:	f023 0307 	bic.w	r3, r3, #7
 80036ac:	b21a      	sxth	r2, r3
 80036ae:	79bb      	ldrb	r3, [r7, #6]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	b21b      	sxth	r3, r3
 80036b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80036b8:	b21b      	sxth	r3, r3
 80036ba:	4313      	orrs	r3, r2
 80036bc:	b21a      	sxth	r2, r3
 80036be:	797b      	ldrb	r3, [r7, #5]
 80036c0:	08db      	lsrs	r3, r3, #3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	b21b      	sxth	r3, r3
 80036c6:	4313      	orrs	r3, r2
 80036c8:	b21b      	sxth	r3, r3
 80036ca:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 80036cc:	89fb      	ldrh	r3, [r7, #14]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	b21a      	sxth	r2, r3
 80036d2:	89fb      	ldrh	r3, [r7, #14]
 80036d4:	0a1b      	lsrs	r3, r3, #8
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	b21b      	sxth	r3, r3
 80036da:	4313      	orrs	r3, r2
 80036dc:	b21b      	sxth	r3, r3
 80036de:	81fb      	strh	r3, [r7, #14]

    return rgb;
 80036e0:	89fb      	ldrh	r3, [r7, #14]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <__libc_init_array>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	4e0d      	ldr	r6, [pc, #52]	; (8003728 <__libc_init_array+0x38>)
 80036f4:	4c0d      	ldr	r4, [pc, #52]	; (800372c <__libc_init_array+0x3c>)
 80036f6:	1ba4      	subs	r4, r4, r6
 80036f8:	10a4      	asrs	r4, r4, #2
 80036fa:	2500      	movs	r5, #0
 80036fc:	42a5      	cmp	r5, r4
 80036fe:	d109      	bne.n	8003714 <__libc_init_array+0x24>
 8003700:	4e0b      	ldr	r6, [pc, #44]	; (8003730 <__libc_init_array+0x40>)
 8003702:	4c0c      	ldr	r4, [pc, #48]	; (8003734 <__libc_init_array+0x44>)
 8003704:	f000 f82c 	bl	8003760 <_init>
 8003708:	1ba4      	subs	r4, r4, r6
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	2500      	movs	r5, #0
 800370e:	42a5      	cmp	r5, r4
 8003710:	d105      	bne.n	800371e <__libc_init_array+0x2e>
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003718:	4798      	blx	r3
 800371a:	3501      	adds	r5, #1
 800371c:	e7ee      	b.n	80036fc <__libc_init_array+0xc>
 800371e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003722:	4798      	blx	r3
 8003724:	3501      	adds	r5, #1
 8003726:	e7f2      	b.n	800370e <__libc_init_array+0x1e>
 8003728:	08006814 	.word	0x08006814
 800372c:	08006814 	.word	0x08006814
 8003730:	08006814 	.word	0x08006814
 8003734:	08006818 	.word	0x08006818

08003738 <memcpy>:
 8003738:	b510      	push	{r4, lr}
 800373a:	1e43      	subs	r3, r0, #1
 800373c:	440a      	add	r2, r1
 800373e:	4291      	cmp	r1, r2
 8003740:	d100      	bne.n	8003744 <memcpy+0xc>
 8003742:	bd10      	pop	{r4, pc}
 8003744:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800374c:	e7f7      	b.n	800373e <memcpy+0x6>

0800374e <memset>:
 800374e:	4402      	add	r2, r0
 8003750:	4603      	mov	r3, r0
 8003752:	4293      	cmp	r3, r2
 8003754:	d100      	bne.n	8003758 <memset+0xa>
 8003756:	4770      	bx	lr
 8003758:	f803 1b01 	strb.w	r1, [r3], #1
 800375c:	e7f9      	b.n	8003752 <memset+0x4>
	...

08003760 <_init>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr

0800376c <_fini>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	bf00      	nop
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr

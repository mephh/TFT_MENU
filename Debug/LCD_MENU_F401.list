
LCD_MENU_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006678  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c764  0800c764  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c764  0800c764  0001c764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c76c  0800c76c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c76c  0800c76c  0001c76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c770  0800c770  0001c770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a2fc  20000078  0800c7ec  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000a374  0800c7ec  0002a374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018aa0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b15  00000000  00000000  00038b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a10a  00000000  00000000  0003ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c3d  00000000  00000000  00058d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a885  00000000  00000000  00072987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010d20c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f0  00000000  00000000  0010d260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060d4 	.word	0x080060d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080060d4 	.word	0x080060d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058a:	4b52      	ldr	r3, [pc, #328]	; (80006d4 <MX_ADC1_Init+0x15c>)
 800058c:	4a52      	ldr	r2, [pc, #328]	; (80006d8 <MX_ADC1_Init+0x160>)
 800058e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000590:	4b50      	ldr	r3, [pc, #320]	; (80006d4 <MX_ADC1_Init+0x15c>)
 8000592:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000596:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000598:	4b4e      	ldr	r3, [pc, #312]	; (80006d4 <MX_ADC1_Init+0x15c>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800059e:	4b4d      	ldr	r3, [pc, #308]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005a4:	4b4b      	ldr	r3, [pc, #300]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b4a      	ldr	r3, [pc, #296]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b2:	4b48      	ldr	r3, [pc, #288]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b8:	4b46      	ldr	r3, [pc, #280]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005ba:	4a48      	ldr	r2, [pc, #288]	; (80006dc <MX_ADC1_Init+0x164>)
 80005bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005be:	4b45      	ldr	r3, [pc, #276]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80005c4:	4b43      	ldr	r3, [pc, #268]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005c6:	2208      	movs	r2, #8
 80005c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ca:	4b42      	ldr	r3, [pc, #264]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d2:	4b40      	ldr	r3, [pc, #256]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d8:	483e      	ldr	r0, [pc, #248]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005da:	f001 fa0b 	bl	80019f4 <HAL_ADC_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005e4:	f000 fcc6 	bl	8000f74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005f0:	2307      	movs	r3, #7
 80005f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	4619      	mov	r1, r3
 80005f8:	4836      	ldr	r0, [pc, #216]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005fa:	f001 fb31 	bl	8001c60 <HAL_ADC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000604:	f000 fcb6 	bl	8000f74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000608:	2302      	movs	r3, #2
 800060a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	482f      	ldr	r0, [pc, #188]	; (80006d4 <MX_ADC1_Init+0x15c>)
 8000616:	f001 fb23 	bl	8001c60 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000620:	f000 fca8 	bl	8000f74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000624:	2303      	movs	r3, #3
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000628:	2303      	movs	r3, #3
 800062a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4828      	ldr	r0, [pc, #160]	; (80006d4 <MX_ADC1_Init+0x15c>)
 8000632:	f001 fb15 	bl	8001c60 <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800063c:	f000 fc9a 	bl	8000f74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000640:	2304      	movs	r3, #4
 8000642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4619      	mov	r1, r3
 800064c:	4821      	ldr	r0, [pc, #132]	; (80006d4 <MX_ADC1_Init+0x15c>)
 800064e:	f001 fb07 	bl	8001c60 <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000658:	f000 fc8c 	bl	8000f74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800065c:	2306      	movs	r3, #6
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000660:	2305      	movs	r3, #5
 8000662:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	481a      	ldr	r0, [pc, #104]	; (80006d4 <MX_ADC1_Init+0x15c>)
 800066a:	f001 faf9 	bl	8001c60 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000674:	f000 fc7e 	bl	8000f74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000678:	2307      	movs	r3, #7
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800067c:	2306      	movs	r3, #6
 800067e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4813      	ldr	r0, [pc, #76]	; (80006d4 <MX_ADC1_Init+0x15c>)
 8000686:	f001 faeb 	bl	8001c60 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000690:	f000 fc70 	bl	8000f74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000694:	2308      	movs	r3, #8
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80006a2:	f001 fadd 	bl	8001c60 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80006ac:	f000 fc62 	bl	8000f74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006b0:	2309      	movs	r3, #9
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80006be:	f001 facf 	bl	8001c60 <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80006c8:	f000 fc54 	bl	8000f74 <Error_Handler>
  }

}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000a0a8 	.word	0x2000a0a8
 80006d8:	40012000 	.word	0x40012000
 80006dc:	0f000001 	.word	0x0f000001

080006e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3c      	ldr	r2, [pc, #240]	; (80007f0 <HAL_ADC_MspInit+0x110>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d171      	bne.n	80007e6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	4a3a      	ldr	r2, [pc, #232]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 800070c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000710:	6453      	str	r3, [r2, #68]	; 0x44
 8000712:	4b38      	ldr	r3, [pc, #224]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a33      	ldr	r2, [pc, #204]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000756:	23de      	movs	r3, #222	; 0xde
 8000758:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075a:	2303      	movs	r3, #3
 800075c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	4823      	ldr	r0, [pc, #140]	; (80007f8 <HAL_ADC_MspInit+0x118>)
 800076a:	f002 f99b 	bl	8002aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800076e:	2303      	movs	r3, #3
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000772:	2303      	movs	r3, #3
 8000774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	481e      	ldr	r0, [pc, #120]	; (80007fc <HAL_ADC_MspInit+0x11c>)
 8000782:	f002 f98f 	bl	8002aa4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <HAL_ADC_MspInit+0x120>)
 8000788:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <HAL_ADC_MspInit+0x124>)
 800078a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <HAL_ADC_MspInit+0x120>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <HAL_ADC_MspInit+0x120>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <HAL_ADC_MspInit+0x120>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007cc:	f001 fdfa 	bl	80023c4 <HAL_DMA_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80007d6:	f000 fbcd 	bl	8000f74 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007de:	639a      	str	r2, [r3, #56]	; 0x38
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	; 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40012000 	.word	0x40012000
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40020400 	.word	0x40020400
 8000800:	2000a0f0 	.word	0x2000a0f0
 8000804:	40026410 	.word	0x40026410

08000808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_DMA_Init+0x3c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <MX_DMA_Init+0x3c>)
 8000818:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_DMA_Init+0x3c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	203b      	movs	r0, #59	; 0x3b
 8000830:	f001 fd91 	bl	8002356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000834:	203b      	movs	r0, #59	; 0x3b
 8000836:	f001 fdaa 	bl	800238e <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b3e      	ldr	r3, [pc, #248]	; (800095c <MX_GPIO_Init+0x114>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a3d      	ldr	r2, [pc, #244]	; (800095c <MX_GPIO_Init+0x114>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b3b      	ldr	r3, [pc, #236]	; (800095c <MX_GPIO_Init+0x114>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b37      	ldr	r3, [pc, #220]	; (800095c <MX_GPIO_Init+0x114>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a36      	ldr	r2, [pc, #216]	; (800095c <MX_GPIO_Init+0x114>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <MX_GPIO_Init+0x114>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <MX_GPIO_Init+0x114>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a2f      	ldr	r2, [pc, #188]	; (800095c <MX_GPIO_Init+0x114>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <MX_GPIO_Init+0x114>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80008b8:	4829      	ldr	r0, [pc, #164]	; (8000960 <MX_GPIO_Init+0x118>)
 80008ba:	f002 fa8f 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	; 0x40
 80008c2:	4828      	ldr	r0, [pc, #160]	; (8000964 <MX_GPIO_Init+0x11c>)
 80008c4:	f002 fa8a 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WKUP_Pin;
 80008c8:	2301      	movs	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_GPIO_Init+0x120>)
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4619      	mov	r1, r3
 80008da:	4821      	ldr	r0, [pc, #132]	; (8000960 <MX_GPIO_Init+0x118>)
 80008dc:	f002 f8e2 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80008e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_GPIO_Init+0x124>)
 80008e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4619      	mov	r1, r3
 80008f4:	481b      	ldr	r0, [pc, #108]	; (8000964 <MX_GPIO_Init+0x11c>)
 80008f6:	f002 f8d5 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 80008fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4813      	ldr	r0, [pc, #76]	; (8000960 <MX_GPIO_Init+0x118>)
 8000914:	f002 f8c6 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000930:	f002 f8b8 	bl	8002aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2102      	movs	r1, #2
 8000938:	2006      	movs	r0, #6
 800093a:	f001 fd0c 	bl	8002356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800093e:	2006      	movs	r0, #6
 8000940:	f001 fd25 	bl	800238e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2028      	movs	r0, #40	; 0x28
 800094a:	f001 fd04 	bl	8002356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094e:	2028      	movs	r0, #40	; 0x28
 8000950:	f001 fd1d 	bl	800238e <HAL_NVIC_EnableIRQ>

}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000
 8000964:	40020400 	.word	0x40020400
 8000968:	10210000 	.word	0x10210000
 800096c:	10110000 	.word	0x10110000

08000970 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_I2C1_Init+0x50>)
 8000976:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <MX_I2C1_Init+0x54>)
 8000978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_I2C1_Init+0x50>)
 800097c:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_I2C1_Init+0x58>)
 800097e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_I2C1_Init+0x50>)
 800098e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000992:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <MX_I2C1_Init+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_I2C1_Init+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_I2C1_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_I2C1_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_I2C1_Init+0x50>)
 80009ae:	f002 fa47 	bl	8002e40 <HAL_I2C_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b8:	f000 fadc 	bl	8000f74 <Error_Handler>
  }

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000a150 	.word	0x2000a150
 80009c4:	40005400 	.word	0x40005400
 80009c8:	000186a0 	.word	0x000186a0

080009cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <HAL_I2C_MspInit+0x84>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d12c      	bne.n	8000a48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_I2C_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <HAL_I2C_MspInit+0x88>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_I2C_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a0a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a10:	2312      	movs	r3, #18
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	480c      	ldr	r0, [pc, #48]	; (8000a58 <HAL_I2C_MspInit+0x8c>)
 8000a28:	f002 f83c 	bl	8002aa4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_I2C_MspInit+0x88>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <HAL_I2C_MspInit+0x88>)
 8000a36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_I2C_MspInit+0x88>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40005400 	.word	0x40005400
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020400 	.word	0x40020400

08000a5c <lcd_cmd>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


static void lcd_cmd(uint8_t cmd) //send any command to st7735
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6c:	480b      	ldr	r0, [pc, #44]	; (8000a9c <lcd_cmd+0x40>)
 8000a6e:	f002 f9b5 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2140      	movs	r1, #64	; 0x40
 8000a76:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <lcd_cmd+0x44>)
 8000a78:	f002 f9b0 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000a7c:	1df9      	adds	r1, r7, #7
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	2201      	movs	r2, #1
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <lcd_cmd+0x48>)
 8000a86:	f003 f982 	bl	8003d8e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2140      	movs	r1, #64	; 0x40
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <lcd_cmd+0x44>)
 8000a90:	f002 f9a4 	bl	8002ddc <HAL_GPIO_WritePin>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	2000a268 	.word	0x2000a268

08000aa8 <lcd_data>:

static void lcd_data(uint8_t data)//send data(value for command) to st7735, spi always uses 8bit data
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <lcd_data+0x40>)
 8000aba:	f002 f98f 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	480a      	ldr	r0, [pc, #40]	; (8000aec <lcd_data+0x44>)
 8000ac4:	f002 f98a 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000ac8:	1df9      	adds	r1, r7, #7
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <lcd_data+0x48>)
 8000ad2:	f003 f95c 	bl	8003d8e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <lcd_data+0x44>)
 8000adc:	f002 f97e 	bl	8002ddc <HAL_GPIO_WritePin>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020400 	.word	0x40020400
 8000af0:	2000a268 	.word	0x2000a268

08000af4 <lcd_data16>:

static void lcd_data16(uint16_t value)//function that allows to send 16bit data as 2x 8bit
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ffce 	bl	8000aa8 <lcd_data>
	lcd_data(value);
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ffc9 	bl	8000aa8 <lcd_data>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height) {
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);	//command to set window columns
 8000b2c:	202a      	movs	r0, #42	; 0x2a
 8000b2e:	f7ff ff95 	bl	8000a5c <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);	//start col
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ffdc 	bl	8000af4 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);	//end col
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	4413      	add	r3, r2
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffd1 	bl	8000af4 <lcd_data16>

	lcd_cmd(ST7735S_RASET);	//command to set window rows
 8000b52:	202b      	movs	r0, #43	; 0x2b
 8000b54:	f7ff ff82 	bl	8000a5c <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);	//start row
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ffc9 	bl	8000af4 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height - 1);	//end row
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ffbe 	bl	8000af4 <lcd_data16>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <lcd_send>:

static void lcd_send(uint16_t value) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) { //checks if value is a command (9th bit is 1) or data (9th bit is 0)
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d005      	beq.n	8000ba0 <lcd_send+0x20>
		lcd_cmd(value);
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5f 	bl	8000a5c <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8000b9e:	e004      	b.n	8000baa <lcd_send+0x2a>
		lcd_data(value);
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff7f 	bl	8000aa8 <lcd_data>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <lcd_init>:
		0x22, 0x1f, 0x1b, 0x23, 0x37, 0x00, 0x07, 0x02, 0x10, CMD(
				ST7735S_GAMCTRN1), 0x0f, 0x1b, 0x0f, 0x17, 0x33, 0x2c, 0x29,
		0x2e, 0x30, 0x30, 0x39, 0x3f, 0x00, 0x07, 0x03, 0x10, CMD(0xf0), 0x01,
		CMD(0xf6), 0x00, CMD(ST7735S_COLMOD), 0x05, CMD(ST7735S_MADCTL), 0x00, };

void lcd_init(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	int i;

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc0:	4817      	ldr	r0, [pc, #92]	; (8000c20 <lcd_init+0x6c>)
 8000bc2:	f002 f90b 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000bc6:	2064      	movs	r0, #100	; 0x64
 8000bc8:	f000 fef0 	bl	80019ac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd2:	4813      	ldr	r0, [pc, #76]	; (8000c20 <lcd_init+0x6c>)
 8000bd4:	f002 f902 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f000 fee7 	bl	80019ac <HAL_Delay>

	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	e009      	b.n	8000bf8 <lcd_init+0x44>
		lcd_send(init_table[i]);
 8000be4:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <lcd_init+0x70>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ffc7 	bl	8000b80 <lcd_send>
	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b4b      	cmp	r3, #75	; 0x4b
 8000bfc:	d9f2      	bls.n	8000be4 <lcd_init+0x30>
	}

	HAL_Delay(200);
 8000bfe:	20c8      	movs	r0, #200	; 0xc8
 8000c00:	f000 fed4 	bl	80019ac <HAL_Delay>

	lcd_cmd(ST7735S_SLPOUT);
 8000c04:	2011      	movs	r0, #17
 8000c06:	f7ff ff29 	bl	8000a5c <lcd_cmd>
	HAL_Delay(120);
 8000c0a:	2078      	movs	r0, #120	; 0x78
 8000c0c:	f000 fece 	bl	80019ac <HAL_Delay>

	lcd_cmd(ST7735S_DISPON);
 8000c10:	2029      	movs	r0, #41	; 0x29
 8000c12:	f7ff ff23 	bl	8000a5c <lcd_cmd>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40020000 	.word	0x40020000
 8000c24:	08006158 	.word	0x08006158

08000c28 <lcd_put_pixel>:


void lcd_put_pixel(int x, int y, uint16_t color) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	4613      	mov	r3, r2
 8000c34:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	01da      	lsls	r2, r3, #7
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4905      	ldr	r1, [pc, #20]	; (8000c54 <lcd_put_pixel+0x2c>)
 8000c40:	88fa      	ldrh	r2, [r7, #6]
 8000c42:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000094 	.word	0x20000094

08000c58 <lcd_copy>:


void lcd_copy(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000c5c:	23a0      	movs	r3, #160	; 0xa0
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	2100      	movs	r1, #0
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ff5b 	bl	8000b1e <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 8000c68:	202c      	movs	r0, #44	; 0x2c
 8000c6a:	f7ff fef7 	bl	8000a5c <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <lcd_copy+0x3c>)
 8000c76:	f002 f8b1 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2140      	movs	r1, #64	; 0x40
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <lcd_copy+0x40>)
 8000c80:	f002 f8ac 	bl	8002ddc <HAL_GPIO_WritePin>
//	HAL_SPI_Transmit(&hspi2, (uint8_t *)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)frame_buffer, sizeof(frame_buffer));
 8000c84:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000c88:	4904      	ldr	r1, [pc, #16]	; (8000c9c <lcd_copy+0x44>)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <lcd_copy+0x48>)
 8000c8c:	f003 f9b4 	bl	8003ff8 <HAL_SPI_Transmit_DMA>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	20000094 	.word	0x20000094
 8000ca0:	2000a268 	.word	0x2000a268

08000ca4 <lcd_transfer_done>:


void lcd_transfer_done(void){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <lcd_transfer_done+0x14>)
 8000cae:	f002 f895 	bl	8002ddc <HAL_GPIO_WritePin>
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40020400 	.word	0x40020400

08000cbc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cc0:	f000 fe02 	bl	80018c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cc4:	f000 f87e 	bl	8000dc4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cc8:	f7ff fdbe 	bl	8000848 <MX_GPIO_Init>
	MX_DMA_Init();
 8000ccc:	f7ff fd9c 	bl	8000808 <MX_DMA_Init>
	MX_SPI1_Init();
 8000cd0:	f000 fb24 	bl	800131c <MX_SPI1_Init>
	MX_ADC1_Init();
 8000cd4:	f7ff fc50 	bl	8000578 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000cd8:	f7ff fe4a 	bl	8000970 <MX_I2C1_Init>
	MX_RTC_Init();
 8000cdc:	f000 fae2 	bl	80012a4 <MX_RTC_Init>
	MX_SPI2_Init();
 8000ce0:	f000 fb52 	bl	8001388 <MX_SPI2_Init>
	MX_TIM2_Init();
 8000ce4:	f000 fd0c 	bl	8001700 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensor_data, sizeof(sensor_data) / sizeof(int16_t));
 8000ce8:	2208      	movs	r2, #8
 8000cea:	492e      	ldr	r1, [pc, #184]	; (8000da4 <main+0xe8>)
 8000cec:	482e      	ldr	r0, [pc, #184]	; (8000da8 <main+0xec>)
 8000cee:	f000 fec5 	bl	8001a7c <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000cf2:	213c      	movs	r1, #60	; 0x3c
 8000cf4:	482d      	ldr	r0, [pc, #180]	; (8000dac <main+0xf0>)
 8000cf6:	f003 fc01 	bl	80044fc <HAL_TIM_Encoder_Start>
	lcd_init();
 8000cfa:	f7ff ff5b 	bl	8000bb4 <lcd_init>
//	show_main_menu(5, rgb565(255, 0, 0));
	show_sensor_window();
 8000cfe:	f000 f9e5 	bl	80010cc <show_sensor_window>
	lcd_copy();
 8000d02:	f7ff ffa9 	bl	8000c58 <lcd_copy>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (activeScreen == 0) {
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <main+0xf4>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d110      	bne.n	8000d32 <main+0x76>
			if (sensorWindowFlag == 0){
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <main+0xf8>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d104      	bne.n	8000d24 <main+0x68>
				sensorWindowFlag = 1;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <main+0xf8>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
				show_sensor_window();
 8000d20:	f000 f9d4 	bl	80010cc <show_sensor_window>
			}
			show_sensor_data(sensor_data);
 8000d24:	481f      	ldr	r0, [pc, #124]	; (8000da4 <main+0xe8>)
 8000d26:	f000 fa21 	bl	800116c <show_sensor_data>
//			snprintf(tim_data, 10, "Tim:%u", htim2.Instance ->CNT);
//			hagl_put_text(tim_data, 80, 50, rgb565(65, 95, 175), font6x9);
			HAL_Delay(1000);
 8000d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2e:	f000 fe3d 	bl	80019ac <HAL_Delay>
		}
		if (activeScreen == 1) {
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <main+0xf4>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d1e4      	bne.n	8000d06 <main+0x4a>
			//pozostaje problem przejscia przez 0
			menuMaxIndex = 5;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <main+0xfc>)
 8000d3e:	2205      	movs	r2, #5
 8000d40:	801a      	strh	r2, [r3, #0]
			if (menuWindowFlag == 0){
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <main+0x100>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d109      	bne.n	8000d60 <main+0xa4>
				menuWindowFlag = 1;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <main+0x100>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
				htim2.Instance->CNT = 1000;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <main+0xf0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
				show_menu_window();
 8000d5c:	f000 f910 	bl	8000f80 <show_menu_window>
			}
			menuIndex = (htim2.Instance->CNT / 2) % menuMaxIndex;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <main+0xf0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	085b      	lsrs	r3, r3, #1
 8000d68:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <main+0xfc>)
 8000d6a:	8812      	ldrh	r2, [r2, #0]
 8000d6c:	b212      	sxth	r2, r2
 8000d6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d72:	fb02 f201 	mul.w	r2, r2, r1
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <main+0x104>)
 8000d7c:	801a      	strh	r2, [r3, #0]
//			snprintf(menu_pos, 10, "Tim:%d", (htim2.Instance->CNT / 2) % menuMaxIndex );
//			hagl_put_text(menu_pos, 80, 50, rgb565(65, 95, 175), font6x9);
//			if (lastMenuPos != menuIndex) deselect_item(lastMenuPos);
//			select_item(menuIndex);
//			lcd_copy();
			select_item(menuIndex);
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <main+0x104>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fa3b 	bl	8001200 <select_item>
			lcd_copy();
 8000d8a:	f7ff ff65 	bl	8000c58 <lcd_copy>
			HAL_Delay(50);
 8000d8e:	2032      	movs	r0, #50	; 0x32
 8000d90:	f000 fe0c 	bl	80019ac <HAL_Delay>
			deselect_item(menuIndex);
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <main+0x104>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 fa59 	bl	8001252 <deselect_item>
		if (activeScreen == 0) {
 8000da0:	e7b1      	b.n	8000d06 <main+0x4a>
 8000da2:	bf00      	nop
 8000da4:	2000a1a4 	.word	0x2000a1a4
 8000da8:	2000a0a8 	.word	0x2000a0a8
 8000dac:	2000a320 	.word	0x2000a320
 8000db0:	2000a098 	.word	0x2000a098
 8000db4:	2000a099 	.word	0x2000a099
 8000db8:	2000a096 	.word	0x2000a096
 8000dbc:	2000a09a 	.word	0x2000a09a
 8000dc0:	2000a094 	.word	0x2000a094

08000dc4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b098      	sub	sp, #96	; 0x60
 8000dc8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000dca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dce:	2230      	movs	r2, #48	; 0x30
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 fd44 	bl	8005860 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <SystemClock_Config+0x100>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a30      	ldr	r2, [pc, #192]	; (8000ec4 <SystemClock_Config+0x100>)
 8000e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e06:	6413      	str	r3, [r2, #64]	; 0x40
 8000e08:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <SystemClock_Config+0x100>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e14:	2300      	movs	r3, #0
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <SystemClock_Config+0x104>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e20:	4a29      	ldr	r2, [pc, #164]	; (8000ec8 <SystemClock_Config+0x104>)
 8000e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <SystemClock_Config+0x104>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000e34:	230a      	movs	r3, #10
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e40:	2301      	movs	r3, #1
 8000e42:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e44:	2302      	movs	r3, #2
 8000e46:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 84;
 8000e50:	2354      	movs	r3, #84	; 0x54
 8000e52:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 f931 	bl	80030c8 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0xac>
		Error_Handler();
 8000e6c:	f000 f882 	bl	8000f74 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2302      	movs	r3, #2
 8000e76:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 fb8b 	bl	80035a8 <HAL_RCC_ClockConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0xd8>
		Error_Handler();
 8000e98:	f000 f86c 	bl	8000f74 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea4:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fd38 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0xf6>
		Error_Handler();
 8000eb6:	f000 f85d 	bl	8000f74 <Error_Handler>
	}
}
 8000eba:	bf00      	nop
 8000ebc:	3760      	adds	r7, #96	; 0x60
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_SPI_TxCpltCallback+0x1c>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d101      	bne.n	8000ee0 <HAL_SPI_TxCpltCallback+0x14>
		lcd_transfer_done();
 8000edc:	f7ff fee2 	bl	8000ca4 <lcd_transfer_done>
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000a268 	.word	0x2000a268

08000eec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENC_BTN_Pin) {
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000efc:	d129      	bne.n	8000f52 <HAL_GPIO_EXTI_Callback+0x66>
		while (HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)
 8000efe:	bf00      	nop
 8000f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f04:	4815      	ldr	r0, [pc, #84]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x70>)
 8000f06:	f001 ff51 	bl	8002dac <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f7      	beq.n	8000f00 <HAL_GPIO_EXTI_Callback+0x14>
				== GPIO_PIN_RESET);
//		TIM_ResetCounter(&htim2);
		//sensor window is active, gonna change to menu
		if (activeScreen == 0) {
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d106      	bne.n	8000f28 <HAL_GPIO_EXTI_Callback+0x3c>
			//reset counter

			menuWindowFlag = 0;
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x78>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
//			show_menu_window();
			activeScreen = 1;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
				activeScreen = 0;
			}
		}

	}
}
 8000f26:	e014      	b.n	8000f52 <HAL_GPIO_EXTI_Callback+0x66>
		} else if (activeScreen == 1) {
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d10f      	bne.n	8000f52 <HAL_GPIO_EXTI_Callback+0x66>
			if (menuIndex == menuMaxIndex - 1) {
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x80>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	3b01      	subs	r3, #1
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d105      	bne.n	8000f52 <HAL_GPIO_EXTI_Callback+0x66>
				sensorWindowFlag = 0;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x84>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
				activeScreen = 0;
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	2000a098 	.word	0x2000a098
 8000f64:	2000a09a 	.word	0x2000a09a
 8000f68:	2000a094 	.word	0x2000a094
 8000f6c:	2000a096 	.word	0x2000a096
 8000f70:	2000a099 	.word	0x2000a099

08000f74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <show_menu_window>:
#include "font6x9.h"
#include "font5x7.h"

char text_to_parse[16];

void show_menu_window() {
 8000f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af02      	add	r7, sp, #8
	hagl_clear_screen();
 8000f88:	f004 fa3a 	bl	8005400 <hagl_clear_screen>

	for (int i = 0; i < 5; ++i) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	e028      	b.n	8000fe4 <show_menu_window+0x64>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	b21d      	sxth	r5, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	b21e      	sxth	r6, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	fa0f f883 	sxth.w	r8, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	fa0f f983 	sxth.w	r9, r3
				5 - i, rgb565(255, 0, 0));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	f1c3 0305 	rsb	r3, r3, #5
 8000fbe:	b29b      	uxth	r3, r3
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i,
 8000fc0:	b21c      	sxth	r4, r3
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	20ff      	movs	r0, #255	; 0xff
 8000fc8:	f004 fbde 	bl	8005788 <rgb565>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	9400      	str	r4, [sp, #0]
 8000fd2:	464b      	mov	r3, r9
 8000fd4:	4642      	mov	r2, r8
 8000fd6:	4631      	mov	r1, r6
 8000fd8:	4628      	mov	r0, r5
 8000fda:	f004 fa3b 	bl	8005454 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	ddd3      	ble.n	8000f92 <show_menu_window+0x12>
	}
	hagl_put_text("USTAWIENIA", 10, 10, rgb565(255, 0, 0), font6x9);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	20ff      	movs	r0, #255	; 0xff
 8000ff0:	f004 fbca 	bl	8005788 <rgb565>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <show_menu_window+0x12c>)
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	220a      	movs	r2, #10
 8001000:	210a      	movs	r1, #10
 8001002:	482b      	ldr	r0, [pc, #172]	; (80010b0 <show_menu_window+0x130>)
 8001004:	f004 f976 	bl	80052f4 <hagl_put_text>
	hagl_put_text("Ilosc kanalow:", 10, 30, rgb565(0, 102, 204), font5x7);
 8001008:	22cc      	movs	r2, #204	; 0xcc
 800100a:	2166      	movs	r1, #102	; 0x66
 800100c:	2000      	movs	r0, #0
 800100e:	f004 fbbb 	bl	8005788 <rgb565>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <show_menu_window+0x134>)
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	4613      	mov	r3, r2
 800101c:	221e      	movs	r2, #30
 800101e:	210a      	movs	r1, #10
 8001020:	4825      	ldr	r0, [pc, #148]	; (80010b8 <show_menu_window+0x138>)
 8001022:	f004 f967 	bl	80052f4 <hagl_put_text>
	hagl_put_text("Oversampling:", 10, 50, rgb565(0, 102, 204), font5x7);
 8001026:	22cc      	movs	r2, #204	; 0xcc
 8001028:	2166      	movs	r1, #102	; 0x66
 800102a:	2000      	movs	r0, #0
 800102c:	f004 fbac 	bl	8005788 <rgb565>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <show_menu_window+0x134>)
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	4613      	mov	r3, r2
 800103a:	2232      	movs	r2, #50	; 0x32
 800103c:	210a      	movs	r1, #10
 800103e:	481f      	ldr	r0, [pc, #124]	; (80010bc <show_menu_window+0x13c>)
 8001040:	f004 f958 	bl	80052f4 <hagl_put_text>
	hagl_put_text("Kalibracja", 10, 70, rgb565(0, 102, 204), font5x7);
 8001044:	22cc      	movs	r2, #204	; 0xcc
 8001046:	2166      	movs	r1, #102	; 0x66
 8001048:	2000      	movs	r0, #0
 800104a:	f004 fb9d 	bl	8005788 <rgb565>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <show_menu_window+0x134>)
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	4613      	mov	r3, r2
 8001058:	2246      	movs	r2, #70	; 0x46
 800105a:	210a      	movs	r1, #10
 800105c:	4818      	ldr	r0, [pc, #96]	; (80010c0 <show_menu_window+0x140>)
 800105e:	f004 f949 	bl	80052f4 <hagl_put_text>
	hagl_put_text("Inne", 10, 90, rgb565(0, 102, 204), font5x7);
 8001062:	22cc      	movs	r2, #204	; 0xcc
 8001064:	2166      	movs	r1, #102	; 0x66
 8001066:	2000      	movs	r0, #0
 8001068:	f004 fb8e 	bl	8005788 <rgb565>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <show_menu_window+0x134>)
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	4613      	mov	r3, r2
 8001076:	225a      	movs	r2, #90	; 0x5a
 8001078:	210a      	movs	r1, #10
 800107a:	4812      	ldr	r0, [pc, #72]	; (80010c4 <show_menu_window+0x144>)
 800107c:	f004 f93a 	bl	80052f4 <hagl_put_text>
	hagl_put_text("Powrot", 10, 110, rgb565(102, 255, 102), font5x7);
 8001080:	2266      	movs	r2, #102	; 0x66
 8001082:	21ff      	movs	r1, #255	; 0xff
 8001084:	2066      	movs	r0, #102	; 0x66
 8001086:	f004 fb7f 	bl	8005788 <rgb565>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <show_menu_window+0x134>)
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	4613      	mov	r3, r2
 8001094:	226e      	movs	r2, #110	; 0x6e
 8001096:	210a      	movs	r1, #10
 8001098:	480b      	ldr	r0, [pc, #44]	; (80010c8 <show_menu_window+0x148>)
 800109a:	f004 f92b 	bl	80052f4 <hagl_put_text>
	lcd_copy();
 800109e:	f7ff fddb 	bl	8000c58 <lcd_copy>
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010ac:	080061f0 	.word	0x080061f0
 80010b0:	080060ec 	.word	0x080060ec
 80010b4:	080091a8 	.word	0x080091a8
 80010b8:	080060f8 	.word	0x080060f8
 80010bc:	08006108 	.word	0x08006108
 80010c0:	08006118 	.word	0x08006118
 80010c4:	08006124 	.word	0x08006124
 80010c8:	0800612c 	.word	0x0800612c

080010cc <show_sensor_window>:


void show_sensor_window() {
 80010cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010d0:	b085      	sub	sp, #20
 80010d2:	af02      	add	r7, sp, #8
	hagl_clear_screen();
 80010d4:	f004 f994 	bl	8005400 <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	e028      	b.n	8001130 <show_sensor_window+0x64>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	b21d      	sxth	r5, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	b21e      	sxth	r6, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	fa0f f883 	sxth.w	r8, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	fa0f f983 	sxth.w	r9, r3
				5 - i, rgb565(0, 51, 102));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	b29b      	uxth	r3, r3
 8001106:	f1c3 0305 	rsb	r3, r3, #5
 800110a:	b29b      	uxth	r3, r3
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i,
 800110c:	b21c      	sxth	r4, r3
 800110e:	2266      	movs	r2, #102	; 0x66
 8001110:	2133      	movs	r1, #51	; 0x33
 8001112:	2000      	movs	r0, #0
 8001114:	f004 fb38 	bl	8005788 <rgb565>
 8001118:	4603      	mov	r3, r0
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	9400      	str	r4, [sp, #0]
 800111e:	464b      	mov	r3, r9
 8001120:	4642      	mov	r2, r8
 8001122:	4631      	mov	r1, r6
 8001124:	4628      	mov	r0, r5
 8001126:	f004 f995 	bl	8005454 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3301      	adds	r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b04      	cmp	r3, #4
 8001134:	ddd3      	ble.n	80010de <show_sensor_window+0x12>
	}
	hagl_put_text("DANE Z CZUJNIKOW", 10, 10, rgb565(15, 127, 225), font6x9);
 8001136:	22e1      	movs	r2, #225	; 0xe1
 8001138:	217f      	movs	r1, #127	; 0x7f
 800113a:	200f      	movs	r0, #15
 800113c:	f004 fb24 	bl	8005788 <rgb565>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <show_sensor_window+0x98>)
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4613      	mov	r3, r2
 800114a:	220a      	movs	r2, #10
 800114c:	210a      	movs	r1, #10
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <show_sensor_window+0x9c>)
 8001150:	f004 f8d0 	bl	80052f4 <hagl_put_text>
	lcd_copy();
 8001154:	f7ff fd80 	bl	8000c58 <lcd_copy>
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001162:	bf00      	nop
 8001164:	080061f0 	.word	0x080061f0
 8001168:	08006134 	.word	0x08006134

0800116c <show_sensor_data>:


void show_sensor_data(uint16_t sensor_data[]) {
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b087      	sub	sp, #28
 8001170:	af02      	add	r7, sp, #8
 8001172:	6078      	str	r0, [r7, #4]
//	show_sensor_window();
	hagl_fill_rectangle(7, 27, LCD_WIDTH-7, LCD_HEIGHT-7, rgb565(0, 0, 0));
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2000      	movs	r0, #0
 800117a:	f004 fb05 	bl	8005788 <rgb565>
 800117e:	4603      	mov	r3, r0
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2399      	movs	r3, #153	; 0x99
 8001184:	2279      	movs	r2, #121	; 0x79
 8001186:	211b      	movs	r1, #27
 8001188:	2007      	movs	r0, #7
 800118a:	f003 ff19 	bl	8004fc0 <hagl_fill_rectangle>
	for (int var = 0; var < 8; ++var) {
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	e026      	b.n	80011e2 <show_sensor_data+0x76>
		snprintf(text_to_parse, 16, "Kanal %u: \t\t%u", var,	sensor_data[var]);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <show_sensor_data+0x88>)
 80011a4:	2110      	movs	r1, #16
 80011a6:	4814      	ldr	r0, [pc, #80]	; (80011f8 <show_sensor_data+0x8c>)
 80011a8:	f004 fc1c 	bl	80059e4 <sniprintf>
		hagl_put_text(text_to_parse, 10, 30 + var * 15, rgb565(15, 127, 225), font5x7);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	331e      	adds	r3, #30
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b21c      	sxth	r4, r3
 80011be:	22e1      	movs	r2, #225	; 0xe1
 80011c0:	217f      	movs	r1, #127	; 0x7f
 80011c2:	200f      	movs	r0, #15
 80011c4:	f004 fae0 	bl	8005788 <rgb565>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <show_sensor_data+0x90>)
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	4613      	mov	r3, r2
 80011d2:	4622      	mov	r2, r4
 80011d4:	210a      	movs	r1, #10
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <show_sensor_data+0x8c>)
 80011d8:	f004 f88c 	bl	80052f4 <hagl_put_text>
	for (int var = 0; var < 8; ++var) {
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	ddd5      	ble.n	8001194 <show_sensor_data+0x28>
	}
	lcd_copy();
 80011e8:	f7ff fd36 	bl	8000c58 <lcd_copy>
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	08006148 	.word	0x08006148
 80011f8:	2000a1e0 	.word	0x2000a1e0
 80011fc:	080091a8 	.word	0x080091a8

08001200 <select_item>:


void select_item(int index) {
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af02      	add	r7, sp, #8
 8001206:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	b29b      	uxth	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	b29b      	uxth	r3, r3
 8001216:	3328      	adds	r3, #40	; 0x28
 8001218:	b29b      	uxth	r3, r3
 800121a:	b21c      	sxth	r4, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	b29b      	uxth	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	b29b      	uxth	r3, r3
 800122a:	3319      	adds	r3, #25
 800122c:	b29b      	uxth	r3, r3
 800122e:	b21d      	sxth	r5, r3
 8001230:	2200      	movs	r2, #0
 8001232:	21ff      	movs	r1, #255	; 0xff
 8001234:	20ff      	movs	r0, #255	; 0xff
 8001236:	f004 faa7 	bl	8005788 <rgb565>
 800123a:	4603      	mov	r3, r0
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	462b      	mov	r3, r5
 8001240:	2278      	movs	r2, #120	; 0x78
 8001242:	4621      	mov	r1, r4
 8001244:	2008      	movs	r0, #8
 8001246:	f003 fe35 	bl	8004eb4 <hagl_draw_rectangle>
			rgb565(255, 255, 0));
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bdb0      	pop	{r4, r5, r7, pc}

08001252 <deselect_item>:


void deselect_item(int index) {
 8001252:	b5b0      	push	{r4, r5, r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af02      	add	r7, sp, #8
 8001258:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b29b      	uxth	r3, r3
 800125e:	461a      	mov	r2, r3
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	4413      	add	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	b29b      	uxth	r3, r3
 8001268:	3328      	adds	r3, #40	; 0x28
 800126a:	b29b      	uxth	r3, r3
 800126c:	b21c      	sxth	r4, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	b29b      	uxth	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	b29b      	uxth	r3, r3
 800127c:	3319      	adds	r3, #25
 800127e:	b29b      	uxth	r3, r3
 8001280:	b21d      	sxth	r5, r3
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2000      	movs	r0, #0
 8001288:	f004 fa7e 	bl	8005788 <rgb565>
 800128c:	4603      	mov	r3, r0
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	462b      	mov	r3, r5
 8001292:	2278      	movs	r2, #120	; 0x78
 8001294:	4621      	mov	r1, r4
 8001296:	2008      	movs	r0, #8
 8001298:	f003 fe0c 	bl	8004eb4 <hagl_draw_rectangle>
			rgb565(0, 0, 0));
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bdb0      	pop	{r4, r5, r7, pc}

080012a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_RTC_Init+0x44>)
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <MX_RTC_Init+0x48>)
 80012ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_RTC_Init+0x44>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_RTC_Init+0x44>)
 80012b6:	227f      	movs	r2, #127	; 0x7f
 80012b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_RTC_Init+0x44>)
 80012bc:	22ff      	movs	r2, #255	; 0xff
 80012be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_RTC_Init+0x44>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_RTC_Init+0x44>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_RTC_Init+0x44>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_RTC_Init+0x44>)
 80012d4:	f002 fc12 	bl	8003afc <HAL_RTC_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80012de:	f7ff fe49 	bl	8000f74 <Error_Handler>
  }

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000a1f0 	.word	0x2000a1f0
 80012ec:	40002800 	.word	0x40002800

080012f0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a05      	ldr	r2, [pc, #20]	; (8001314 <HAL_RTC_MspInit+0x24>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d102      	bne.n	8001308 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_RTC_MspInit+0x28>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40002800 	.word	0x40002800
 8001318:	42470e3c 	.word	0x42470e3c

0800131c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_SPI1_Init+0x64>)
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <MX_SPI1_Init+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_SPI1_Init+0x64>)
 8001328:	f44f 7282 	mov.w	r2, #260	; 0x104
 800132c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_SPI1_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_SPI1_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_SPI1_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_SPI1_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_SPI1_Init+0x64>)
 8001348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_SPI1_Init+0x64>)
 8001350:	2210      	movs	r2, #16
 8001352:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <MX_SPI1_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_SPI1_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <MX_SPI1_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_SPI1_Init+0x64>)
 8001368:	220a      	movs	r2, #10
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <MX_SPI1_Init+0x64>)
 800136e:	f002 fcaa 	bl	8003cc6 <HAL_SPI_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001378:	f7ff fdfc 	bl	8000f74 <Error_Handler>
  }

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2000a268 	.word	0x2000a268
 8001384:	40013000 	.word	0x40013000

08001388 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_SPI2_Init+0x64>)
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <MX_SPI2_Init+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_SPI2_Init+0x64>)
 8001394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001398:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_SPI2_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_SPI2_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_SPI2_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_SPI2_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_SPI2_Init+0x64>)
 80013b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_SPI2_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_SPI2_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_SPI2_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_SPI2_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_SPI2_Init+0x64>)
 80013d4:	220a      	movs	r2, #10
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_SPI2_Init+0x64>)
 80013da:	f002 fc74 	bl	8003cc6 <HAL_SPI_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013e4:	f7ff fdc6 	bl	8000f74 <Error_Handler>
  }

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000a210 	.word	0x2000a210
 80013f0:	40003800 	.word	0x40003800

080013f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a58      	ldr	r2, [pc, #352]	; (8001574 <HAL_SPI_MspInit+0x180>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d178      	bne.n	8001508 <HAL_SPI_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
 800141a:	4b57      	ldr	r3, [pc, #348]	; (8001578 <HAL_SPI_MspInit+0x184>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a56      	ldr	r2, [pc, #344]	; (8001578 <HAL_SPI_MspInit+0x184>)
 8001420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b54      	ldr	r3, [pc, #336]	; (8001578 <HAL_SPI_MspInit+0x184>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	4b50      	ldr	r3, [pc, #320]	; (8001578 <HAL_SPI_MspInit+0x184>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a4f      	ldr	r2, [pc, #316]	; (8001578 <HAL_SPI_MspInit+0x184>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <HAL_SPI_MspInit+0x184>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b49      	ldr	r3, [pc, #292]	; (8001578 <HAL_SPI_MspInit+0x184>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a48      	ldr	r2, [pc, #288]	; (8001578 <HAL_SPI_MspInit+0x184>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_SPI_MspInit+0x184>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800146a:	2320      	movs	r3, #32
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147a:	2305      	movs	r3, #5
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	483d      	ldr	r0, [pc, #244]	; (800157c <HAL_SPI_MspInit+0x188>)
 8001486:	f001 fb0d 	bl	8002aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800148a:	2320      	movs	r3, #32
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800149a:	2305      	movs	r3, #5
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4836      	ldr	r0, [pc, #216]	; (8001580 <HAL_SPI_MspInit+0x18c>)
 80014a6:	f001 fafd 	bl	8002aa4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <HAL_SPI_MspInit+0x190>)
 80014ac:	4a36      	ldr	r2, [pc, #216]	; (8001588 <HAL_SPI_MspInit+0x194>)
 80014ae:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80014b0:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_SPI_MspInit+0x190>)
 80014b2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b8:	4b32      	ldr	r3, [pc, #200]	; (8001584 <HAL_SPI_MspInit+0x190>)
 80014ba:	2240      	movs	r2, #64	; 0x40
 80014bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_SPI_MspInit+0x190>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_SPI_MspInit+0x190>)
 80014c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ca:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_SPI_MspInit+0x190>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <HAL_SPI_MspInit+0x190>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_SPI_MspInit+0x190>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <HAL_SPI_MspInit+0x190>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_SPI_MspInit+0x190>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014ea:	4826      	ldr	r0, [pc, #152]	; (8001584 <HAL_SPI_MspInit+0x190>)
 80014ec:	f000 ff6a 	bl	80023c4 <HAL_DMA_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80014f6:	f7ff fd3d 	bl	8000f74 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <HAL_SPI_MspInit+0x190>)
 80014fe:	649a      	str	r2, [r3, #72]	; 0x48
 8001500:	4a20      	ldr	r2, [pc, #128]	; (8001584 <HAL_SPI_MspInit+0x190>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001506:	e031      	b.n	800156c <HAL_SPI_MspInit+0x178>
  else if(spiHandle->Instance==SPI2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1f      	ldr	r2, [pc, #124]	; (800158c <HAL_SPI_MspInit+0x198>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d12c      	bne.n	800156c <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_SPI_MspInit+0x184>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_SPI_MspInit+0x184>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_SPI_MspInit+0x184>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_SPI_MspInit+0x184>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a10      	ldr	r2, [pc, #64]	; (8001578 <HAL_SPI_MspInit+0x184>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_SPI_MspInit+0x184>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800154a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800155c:	2305      	movs	r3, #5
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <HAL_SPI_MspInit+0x18c>)
 8001568:	f001 fa9c 	bl	8002aa4 <HAL_GPIO_Init>
}
 800156c:	bf00      	nop
 800156e:	3730      	adds	r7, #48	; 0x30
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40013000 	.word	0x40013000
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020400 	.word	0x40020400
 8001584:	2000a2c0 	.word	0x2000a2c0
 8001588:	40026458 	.word	0x40026458
 800158c:	40003800 	.word	0x40003800

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_MspInit+0x4c>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_MspInit+0x4c>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162c:	f000 f99e 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001638:	2001      	movs	r0, #1
 800163a:	f001 fbe9 	bl	8002e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}

08001642 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001646:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800164a:	f001 fbe1 	bl	8002e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <DMA2_Stream3_IRQHandler+0x10>)
 800165a:	f000 ffb9 	bl	80025d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000a2c0 	.word	0x2000a2c0

08001668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <_sbrk+0x5c>)
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <_sbrk+0x60>)
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <_sbrk+0x64>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <_sbrk+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	d207      	bcs.n	80016a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001698:	f004 f8a8 	bl	80057ec <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	e009      	b.n	80016bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20010000 	.word	0x20010000
 80016c8:	00002000 	.word	0x00002000
 80016cc:	2000a09c 	.word	0x2000a09c
 80016d0:	2000a378 	.word	0x2000a378

080016d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <SystemInit+0x28>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016de:	4a07      	ldr	r2, [pc, #28]	; (80016fc <SystemInit+0x28>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SystemInit+0x28>)
 80016ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ee:	609a      	str	r2, [r3, #8]
#endif
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	2224      	movs	r2, #36	; 0x24
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f004 f8a6 	bl	8005860 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <MX_TIM2_Init+0xa4>)
 800171e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001722:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_TIM2_Init+0xa4>)
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_TIM2_Init+0xa4>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_TIM2_Init+0xa4>)
 8001732:	f04f 32ff 	mov.w	r2, #4294967295
 8001736:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_TIM2_Init+0xa4>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_TIM2_Init+0xa4>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001744:	2301      	movs	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800174c:	2301      	movs	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800175c:	2301      	movs	r3, #1
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	4619      	mov	r1, r3
 800176e:	480d      	ldr	r0, [pc, #52]	; (80017a4 <MX_TIM2_Init+0xa4>)
 8001770:	f002 fe32 	bl	80043d8 <HAL_TIM_Encoder_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800177a:	f7ff fbfb 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <MX_TIM2_Init+0xa4>)
 800178c:	f002 ff94 	bl	80046b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001796:	f7ff fbed 	bl	8000f74 <Error_Handler>
  }

}
 800179a:	bf00      	nop
 800179c:	3730      	adds	r7, #48	; 0x30
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000a320 	.word	0x2000a320

080017a8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c8:	d14a      	bne.n	8001860 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a25      	ldr	r2, [pc, #148]	; (8001868 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b23      	ldr	r3, [pc, #140]	; (8001868 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_TIM_Encoder_MspInit+0xc0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a17      	ldr	r2, [pc, #92]	; (8001868 <HAL_TIM_Encoder_MspInit+0xc0>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800181e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001830:	2301      	movs	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	480c      	ldr	r0, [pc, #48]	; (800186c <HAL_TIM_Encoder_MspInit+0xc4>)
 800183c:	f001 f932 	bl	8002aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001840:	2308      	movs	r3, #8
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001850:	2301      	movs	r3, #1
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_TIM_Encoder_MspInit+0xc8>)
 800185c:	f001 f922 	bl	8002aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020400 	.word	0x40020400

08001874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001878:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800187a:	e003      	b.n	8001884 <LoopCopyDataInit>

0800187c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800187e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001880:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001882:	3104      	adds	r1, #4

08001884 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001888:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800188a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800188c:	d3f6      	bcc.n	800187c <CopyDataInit>
  ldr  r2, =_sbss
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001890:	e002      	b.n	8001898 <LoopFillZerobss>

08001892 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001892:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001894:	f842 3b04 	str.w	r3, [r2], #4

08001898 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800189a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800189c:	d3f9      	bcc.n	8001892 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800189e:	f7ff ff19 	bl	80016d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f003 ffa9 	bl	80057f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a6:	f7ff fa09 	bl	8000cbc <main>
  bx  lr    
 80018aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018ac:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80018b0:	0800c774 	.word	0x0800c774
  ldr  r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018b8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80018bc:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80018c0:	2000a374 	.word	0x2000a374

080018c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_Init+0x40>)
 80018d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <HAL_Init+0x40>)
 80018de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_Init+0x40>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f0:	2003      	movs	r0, #3
 80018f2:	f000 fd25 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f000 f808 	bl	800190c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018fc:	f7ff fe48 	bl	8001590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00

0800190c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_InitTick+0x54>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_InitTick+0x58>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fd3d 	bl	80023aa <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00e      	b.n	8001958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d80a      	bhi.n	8001956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f000 fd05 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194c:	4a06      	ldr	r2, [pc, #24]	; (8001968 <HAL_InitTick+0x5c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000000 	.word	0x20000000
 8001964:	20000008 	.word	0x20000008
 8001968:	20000004 	.word	0x20000004

0800196c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x20>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_IncTick+0x24>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <HAL_IncTick+0x24>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008
 8001990:	2000a360 	.word	0x2000a360

08001994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_GetTick+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	2000a360 	.word	0x2000a360

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff ffee 	bl	8001994 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffde 	bl	8001994 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008

080019f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e033      	b.n	8001a72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7fe fe64 	bl	80006e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d118      	bne.n	8001a64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a3a:	f023 0302 	bic.w	r3, r3, #2
 8001a3e:	f043 0202 	orr.w	r2, r3, #2
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fa2c 	bl	8001ea4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f023 0303 	bic.w	r3, r3, #3
 8001a5a:	f043 0201 	orr.w	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
 8001a62:	e001      	b.n	8001a68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_Start_DMA+0x1e>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e0b1      	b.n	8001bfe <HAL_ADC_Start_DMA+0x182>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d018      	beq.n	8001ae2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac0:	4b51      	ldr	r3, [pc, #324]	; (8001c08 <HAL_ADC_Start_DMA+0x18c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a51      	ldr	r2, [pc, #324]	; (8001c0c <HAL_ADC_Start_DMA+0x190>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0c9a      	lsrs	r2, r3, #18
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ad4:	e002      	b.n	8001adc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f9      	bne.n	8001ad6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	f040 8085 	bne.w	8001bfc <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d007      	beq.n	8001b24 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b30:	d106      	bne.n	8001b40 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f023 0206 	bic.w	r2, r3, #6
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
 8001b3e:	e002      	b.n	8001b46 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_ADC_Start_DMA+0x194>)
 8001b50:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	4a2f      	ldr	r2, [pc, #188]	; (8001c14 <HAL_ADC_Start_DMA+0x198>)
 8001b58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <HAL_ADC_Start_DMA+0x19c>)
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b66:	4a2d      	ldr	r2, [pc, #180]	; (8001c1c <HAL_ADC_Start_DMA+0x1a0>)
 8001b68:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b82:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b92:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	334c      	adds	r3, #76	; 0x4c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f000 fcbc 	bl	8002520 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d11c      	bne.n	8001bfc <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	e013      	b.n	8001bfc <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <HAL_ADC_Start_DMA+0x1a4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10e      	bne.n	8001bfc <HAL_ADC_Start_DMA+0x180>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d107      	bne.n	8001bfc <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bfa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	431bde83 	.word	0x431bde83
 8001c10:	40012300 	.word	0x40012300
 8001c14:	0800209d 	.word	0x0800209d
 8001c18:	08002157 	.word	0x08002157
 8001c1c:	08002173 	.word	0x08002173
 8001c20:	40012000 	.word	0x40012000

08001c24 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1c>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e105      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x228>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	d925      	bls.n	8001cd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68d9      	ldr	r1, [r3, #12]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b1e      	subs	r3, #30
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	400a      	ands	r2, r1
 8001cb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68d9      	ldr	r1, [r3, #12]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4403      	add	r3, r0
 8001cca:	3b1e      	subs	r3, #30
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	e022      	b.n	8001d1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6919      	ldr	r1, [r3, #16]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	2207      	movs	r2, #7
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6919      	ldr	r1, [r3, #16]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4403      	add	r3, r0
 8001d14:	409a      	lsls	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d824      	bhi.n	8001d70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	3b05      	subs	r3, #5
 8001d38:	221f      	movs	r2, #31
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	400a      	ands	r2, r1
 8001d46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	4618      	mov	r0, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b05      	subs	r3, #5
 8001d62:	fa00 f203 	lsl.w	r2, r0, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d6e:	e04c      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b0c      	cmp	r3, #12
 8001d76:	d824      	bhi.n	8001dc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	3b23      	subs	r3, #35	; 0x23
 8001d8a:	221f      	movs	r2, #31
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43da      	mvns	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	400a      	ands	r2, r1
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	3b23      	subs	r3, #35	; 0x23
 8001db4:	fa00 f203 	lsl.w	r2, r0, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc0:	e023      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3b41      	subs	r3, #65	; 0x41
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	400a      	ands	r2, r1
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	4618      	mov	r0, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3b41      	subs	r3, #65	; 0x41
 8001dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e0a:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <HAL_ADC_ConfigChannel+0x234>)
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a21      	ldr	r2, [pc, #132]	; (8001e98 <HAL_ADC_ConfigChannel+0x238>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d109      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1cc>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b12      	cmp	r3, #18
 8001e1e:	d105      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <HAL_ADC_ConfigChannel+0x238>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d123      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x21e>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d003      	beq.n	8001e46 <HAL_ADC_ConfigChannel+0x1e6>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b11      	cmp	r3, #17
 8001e44:	d11b      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d111      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_ADC_ConfigChannel+0x23c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_ADC_ConfigChannel+0x240>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	0c9a      	lsrs	r2, r3, #18
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e70:	e002      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f9      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40012300 	.word	0x40012300
 8001e98:	40012000 	.word	0x40012000
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	431bde83 	.word	0x431bde83

08001ea4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eac:	4b79      	ldr	r3, [pc, #484]	; (8002094 <ADC_Init+0x1f0>)
 8001eae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	021a      	lsls	r2, r3, #8
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001efc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6899      	ldr	r1, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	4a58      	ldr	r2, [pc, #352]	; (8002098 <ADC_Init+0x1f4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d022      	beq.n	8001f82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6899      	ldr	r1, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6899      	ldr	r1, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	e00f      	b.n	8001fa2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fa0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0202 	bic.w	r2, r2, #2
 8001fb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6899      	ldr	r1, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7e1b      	ldrb	r3, [r3, #24]
 8001fbc:	005a      	lsls	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01b      	beq.n	8002008 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6859      	ldr	r1, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	035a      	lsls	r2, r3, #13
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	e007      	b.n	8002018 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002016:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	3b01      	subs	r3, #1
 8002034:	051a      	lsls	r2, r3, #20
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800204c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6899      	ldr	r1, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800205a:	025a      	lsls	r2, r3, #9
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002072:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6899      	ldr	r1, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	029a      	lsls	r2, r3, #10
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	609a      	str	r2, [r3, #8]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	40012300 	.word	0x40012300
 8002098:	0f000001 	.word	0x0f000001

0800209c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d13c      	bne.n	8002130 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d12b      	bne.n	8002128 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d127      	bne.n	8002128 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d119      	bne.n	8002128 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0220 	bic.w	r2, r2, #32
 8002102:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f043 0201 	orr.w	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f7ff fd7b 	bl	8001c24 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800212e:	e00e      	b.n	800214e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff fd85 	bl	8001c4c <HAL_ADC_ErrorCallback>
}
 8002142:	e004      	b.n	800214e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f7ff fd67 	bl	8001c38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2240      	movs	r2, #64	; 0x40
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f043 0204 	orr.w	r2, r3, #4
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7ff fd5a 	bl	8001c4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff3e 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff31 	bl	8002204 <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff fae0 	bl	8001994 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e099      	b.n	8002514 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002400:	e00f      	b.n	8002422 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002402:	f7ff fac7 	bl	8001994 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b05      	cmp	r3, #5
 800240e:	d908      	bls.n	8002422 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2203      	movs	r2, #3
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e078      	b.n	8002514 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e8      	bne.n	8002402 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_DMA_Init+0x158>)
 800243c:	4013      	ands	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	2b04      	cmp	r3, #4
 800247a:	d107      	bne.n	800248c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	4313      	orrs	r3, r2
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f023 0307 	bic.w	r3, r3, #7
 80024a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d117      	bne.n	80024e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00e      	beq.n	80024e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 fa6f 	bl	80029ac <DMA_CheckFifoParam>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024e2:	2301      	movs	r3, #1
 80024e4:	e016      	b.n	8002514 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fa26 	bl	8002940 <DMA_CalcBaseAndBitshift>
 80024f4:	4603      	mov	r3, r0
 80024f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	223f      	movs	r2, #63	; 0x3f
 80024fe:	409a      	lsls	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	f010803f 	.word	0xf010803f

08002520 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_DMA_Start_IT+0x26>
 8002542:	2302      	movs	r3, #2
 8002544:	e040      	b.n	80025c8 <HAL_DMA_Start_IT+0xa8>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d12f      	bne.n	80025ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f9b8 	bl	80028e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	223f      	movs	r2, #63	; 0x3f
 800257a:	409a      	lsls	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0216 	orr.w	r2, r2, #22
 800258e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0208 	orr.w	r2, r2, #8
 80025a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e005      	b.n	80025c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
 80025c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025dc:	4b92      	ldr	r3, [pc, #584]	; (8002828 <HAL_DMA_IRQHandler+0x258>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a92      	ldr	r2, [pc, #584]	; (800282c <HAL_DMA_IRQHandler+0x25c>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	0a9b      	lsrs	r3, r3, #10
 80025e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	2208      	movs	r2, #8
 80025fc:	409a      	lsls	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01a      	beq.n	800263c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0204 	bic.w	r2, r2, #4
 8002622:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	2208      	movs	r2, #8
 800262a:	409a      	lsls	r2, r3
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002640:	2201      	movs	r2, #1
 8002642:	409a      	lsls	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d012      	beq.n	8002672 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	2201      	movs	r2, #1
 8002660:	409a      	lsls	r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	f043 0202 	orr.w	r2, r3, #2
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	2204      	movs	r2, #4
 8002678:	409a      	lsls	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d012      	beq.n	80026a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	2204      	movs	r2, #4
 8002696:	409a      	lsls	r2, r3
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a0:	f043 0204 	orr.w	r2, r3, #4
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	2210      	movs	r2, #16
 80026ae:	409a      	lsls	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d043      	beq.n	8002740 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d03c      	beq.n	8002740 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	2210      	movs	r2, #16
 80026cc:	409a      	lsls	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d018      	beq.n	8002712 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d108      	bne.n	8002700 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d024      	beq.n	8002740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	4798      	blx	r3
 80026fe:	e01f      	b.n	8002740 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01b      	beq.n	8002740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
 8002710:	e016      	b.n	8002740 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d107      	bne.n	8002730 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0208 	bic.w	r2, r2, #8
 800272e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	2220      	movs	r2, #32
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 808e 	beq.w	800286e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8086 	beq.w	800286e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	2220      	movs	r2, #32
 8002768:	409a      	lsls	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b05      	cmp	r3, #5
 8002778:	d136      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0216 	bic.w	r2, r2, #22
 8002788:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002798:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <HAL_DMA_IRQHandler+0x1da>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0208 	bic.w	r2, r2, #8
 80027b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027be:	223f      	movs	r2, #63	; 0x3f
 80027c0:	409a      	lsls	r2, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d07d      	beq.n	80028da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
        }
        return;
 80027e6:	e078      	b.n	80028da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01c      	beq.n	8002830 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d108      	bne.n	8002816 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	2b00      	cmp	r3, #0
 800280a:	d030      	beq.n	800286e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
 8002814:	e02b      	b.n	800286e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d027      	beq.n	800286e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
 8002826:	e022      	b.n	800286e <HAL_DMA_IRQHandler+0x29e>
 8002828:	20000000 	.word	0x20000000
 800282c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10f      	bne.n	800285e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0210 	bic.w	r2, r2, #16
 800284c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	2b00      	cmp	r3, #0
 8002874:	d032      	beq.n	80028dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d022      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2205      	movs	r2, #5
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	3301      	adds	r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d307      	bcc.n	80028b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f2      	bne.n	800289a <HAL_DMA_IRQHandler+0x2ca>
 80028b4:	e000      	b.n	80028b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
 80028d8:	e000      	b.n	80028dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80028da:	bf00      	nop
    }
  }
}
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop

080028e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002900:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d108      	bne.n	8002924 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002922:	e007      	b.n	8002934 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	60da      	str	r2, [r3, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3b10      	subs	r3, #16
 8002950:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800295a:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <DMA_CalcBaseAndBitshift+0x68>)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b03      	cmp	r3, #3
 800296c:	d909      	bls.n	8002982 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002976:	f023 0303 	bic.w	r3, r3, #3
 800297a:	1d1a      	adds	r2, r3, #4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	; 0x58
 8002980:	e007      	b.n	8002992 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800298a:	f023 0303 	bic.w	r3, r3, #3
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	aaaaaaab 	.word	0xaaaaaaab
 80029a8:	0800c6c8 	.word	0x0800c6c8

080029ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d11f      	bne.n	8002a06 <DMA_CheckFifoParam+0x5a>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d856      	bhi.n	8002a7a <DMA_CheckFifoParam+0xce>
 80029cc:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <DMA_CheckFifoParam+0x28>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	080029f7 	.word	0x080029f7
 80029dc:	080029e5 	.word	0x080029e5
 80029e0:	08002a7b 	.word	0x08002a7b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d046      	beq.n	8002a7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f4:	e043      	b.n	8002a7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029fe:	d140      	bne.n	8002a82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a04:	e03d      	b.n	8002a82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0e:	d121      	bne.n	8002a54 <DMA_CheckFifoParam+0xa8>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d837      	bhi.n	8002a86 <DMA_CheckFifoParam+0xda>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <DMA_CheckFifoParam+0x70>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a2d 	.word	0x08002a2d
 8002a20:	08002a33 	.word	0x08002a33
 8002a24:	08002a2d 	.word	0x08002a2d
 8002a28:	08002a45 	.word	0x08002a45
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a30:	e030      	b.n	8002a94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d025      	beq.n	8002a8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a42:	e022      	b.n	8002a8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a4c:	d11f      	bne.n	8002a8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a52:	e01c      	b.n	8002a8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d903      	bls.n	8002a62 <DMA_CheckFifoParam+0xb6>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d003      	beq.n	8002a68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a60:	e018      	b.n	8002a94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
      break;
 8002a66:	e015      	b.n	8002a94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00e      	beq.n	8002a92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      break;
 8002a78:	e00b      	b.n	8002a92 <DMA_CheckFifoParam+0xe6>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e00a      	b.n	8002a94 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e008      	b.n	8002a94 <DMA_CheckFifoParam+0xe8>
      break;
 8002a82:	bf00      	nop
 8002a84:	e006      	b.n	8002a94 <DMA_CheckFifoParam+0xe8>
      break;
 8002a86:	bf00      	nop
 8002a88:	e004      	b.n	8002a94 <DMA_CheckFifoParam+0xe8>
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e002      	b.n	8002a94 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a8e:	bf00      	nop
 8002a90:	e000      	b.n	8002a94 <DMA_CheckFifoParam+0xe8>
      break;
 8002a92:	bf00      	nop
    }
  } 
  
  return status; 
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop

08002aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	e159      	b.n	8002d74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	f040 8148 	bne.w	8002d6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d00b      	beq.n	8002afe <HAL_GPIO_Init+0x5a>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d007      	beq.n	8002afe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002af2:	2b11      	cmp	r3, #17
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b12      	cmp	r3, #18
 8002afc:	d130      	bne.n	8002b60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2203      	movs	r2, #3
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b34:	2201      	movs	r2, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 0201 	and.w	r2, r3, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0xfc>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b12      	cmp	r3, #18
 8002b9e:	d123      	bne.n	8002be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	08da      	lsrs	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3208      	adds	r2, #8
 8002ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	220f      	movs	r2, #15
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	08da      	lsrs	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3208      	adds	r2, #8
 8002be2:	69b9      	ldr	r1, [r7, #24]
 8002be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0203 	and.w	r2, r3, #3
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80a2 	beq.w	8002d6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b57      	ldr	r3, [pc, #348]	; (8002d8c <HAL_GPIO_Init+0x2e8>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a56      	ldr	r2, [pc, #344]	; (8002d8c <HAL_GPIO_Init+0x2e8>)
 8002c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b54      	ldr	r3, [pc, #336]	; (8002d8c <HAL_GPIO_Init+0x2e8>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c46:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_GPIO_Init+0x2ec>)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	089b      	lsrs	r3, r3, #2
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a49      	ldr	r2, [pc, #292]	; (8002d94 <HAL_GPIO_Init+0x2f0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d019      	beq.n	8002ca6 <HAL_GPIO_Init+0x202>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a48      	ldr	r2, [pc, #288]	; (8002d98 <HAL_GPIO_Init+0x2f4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_GPIO_Init+0x1fe>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a47      	ldr	r2, [pc, #284]	; (8002d9c <HAL_GPIO_Init+0x2f8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00d      	beq.n	8002c9e <HAL_GPIO_Init+0x1fa>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a46      	ldr	r2, [pc, #280]	; (8002da0 <HAL_GPIO_Init+0x2fc>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d007      	beq.n	8002c9a <HAL_GPIO_Init+0x1f6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a45      	ldr	r2, [pc, #276]	; (8002da4 <HAL_GPIO_Init+0x300>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_GPIO_Init+0x1f2>
 8002c92:	2304      	movs	r3, #4
 8002c94:	e008      	b.n	8002ca8 <HAL_GPIO_Init+0x204>
 8002c96:	2307      	movs	r3, #7
 8002c98:	e006      	b.n	8002ca8 <HAL_GPIO_Init+0x204>
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e004      	b.n	8002ca8 <HAL_GPIO_Init+0x204>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e002      	b.n	8002ca8 <HAL_GPIO_Init+0x204>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_GPIO_Init+0x204>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	f002 0203 	and.w	r2, r2, #3
 8002cae:	0092      	lsls	r2, r2, #2
 8002cb0:	4093      	lsls	r3, r2
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cb8:	4935      	ldr	r1, [pc, #212]	; (8002d90 <HAL_GPIO_Init+0x2ec>)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc6:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <HAL_GPIO_Init+0x304>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cea:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <HAL_GPIO_Init+0x304>)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_GPIO_Init+0x304>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d14:	4a24      	ldr	r2, [pc, #144]	; (8002da8 <HAL_GPIO_Init+0x304>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1a:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <HAL_GPIO_Init+0x304>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3e:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <HAL_GPIO_Init+0x304>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d44:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <HAL_GPIO_Init+0x304>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d68:	4a0f      	ldr	r2, [pc, #60]	; (8002da8 <HAL_GPIO_Init+0x304>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3301      	adds	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b0f      	cmp	r3, #15
 8002d78:	f67f aea2 	bls.w	8002ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3724      	adds	r7, #36	; 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40013800 	.word	0x40013800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	40020400 	.word	0x40020400
 8002d9c:	40020800 	.word	0x40020800
 8002da0:	40020c00 	.word	0x40020c00
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40013c00 	.word	0x40013c00

08002dac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	887b      	ldrh	r3, [r7, #2]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	e001      	b.n	8002dce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
 8002de8:	4613      	mov	r3, r2
 8002dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dec:	787b      	ldrb	r3, [r7, #1]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002df8:	e003      	b.n	8002e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	041a      	lsls	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	619a      	str	r2, [r3, #24]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe f85c 	bl	8000eec <HAL_GPIO_EXTI_Callback>
  }
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40013c00 	.word	0x40013c00

08002e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e12b      	b.n	80030aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fd fdb0 	bl	80009cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	; 0x24
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea4:	f000 fd28 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 8002ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a81      	ldr	r2, [pc, #516]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d807      	bhi.n	8002ec4 <HAL_I2C_Init+0x84>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a80      	ldr	r2, [pc, #512]	; (80030b8 <HAL_I2C_Init+0x278>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e006      	b.n	8002ed2 <HAL_I2C_Init+0x92>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a7d      	ldr	r2, [pc, #500]	; (80030bc <HAL_I2C_Init+0x27c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bf94      	ite	ls
 8002ecc:	2301      	movls	r3, #1
 8002ece:	2300      	movhi	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0e7      	b.n	80030aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a78      	ldr	r2, [pc, #480]	; (80030c0 <HAL_I2C_Init+0x280>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a6a      	ldr	r2, [pc, #424]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d802      	bhi.n	8002f14 <HAL_I2C_Init+0xd4>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3301      	adds	r3, #1
 8002f12:	e009      	b.n	8002f28 <HAL_I2C_Init+0xe8>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	4a69      	ldr	r2, [pc, #420]	; (80030c4 <HAL_I2C_Init+0x284>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	3301      	adds	r3, #1
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	495c      	ldr	r1, [pc, #368]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002f44:	428b      	cmp	r3, r1
 8002f46:	d819      	bhi.n	8002f7c <HAL_I2C_Init+0x13c>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e59      	subs	r1, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_I2C_Init+0x138>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1e59      	subs	r1, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f76:	e051      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	e04f      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d111      	bne.n	8002fa8 <HAL_I2C_Init+0x168>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e58      	subs	r0, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e012      	b.n	8002fce <HAL_I2C_Init+0x18e>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	0099      	lsls	r1, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Init+0x196>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e022      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10e      	bne.n	8002ffc <HAL_I2C_Init+0x1bc>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e58      	subs	r0, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	440b      	add	r3, r1
 8002fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffa:	e00f      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e58      	subs	r0, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	0099      	lsls	r1, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	6809      	ldr	r1, [r1, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800304a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6911      	ldr	r1, [r2, #16]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68d2      	ldr	r2, [r2, #12]
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	430b      	orrs	r3, r1
 800305e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	000186a0 	.word	0x000186a0
 80030b8:	001e847f 	.word	0x001e847f
 80030bc:	003d08ff 	.word	0x003d08ff
 80030c0:	431bde83 	.word	0x431bde83
 80030c4:	10624dd3 	.word	0x10624dd3

080030c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e25b      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d075      	beq.n	80031d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030e6:	4ba3      	ldr	r3, [pc, #652]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d00c      	beq.n	800310c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f2:	4ba0      	ldr	r3, [pc, #640]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d112      	bne.n	8003124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fe:	4b9d      	ldr	r3, [pc, #628]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310a:	d10b      	bne.n	8003124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310c:	4b99      	ldr	r3, [pc, #612]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d05b      	beq.n	80031d0 <HAL_RCC_OscConfig+0x108>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d157      	bne.n	80031d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e236      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d106      	bne.n	800313c <HAL_RCC_OscConfig+0x74>
 800312e:	4b91      	ldr	r3, [pc, #580]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a90      	ldr	r2, [pc, #576]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e01d      	b.n	8003178 <HAL_RCC_OscConfig+0xb0>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003144:	d10c      	bne.n	8003160 <HAL_RCC_OscConfig+0x98>
 8003146:	4b8b      	ldr	r3, [pc, #556]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a8a      	ldr	r2, [pc, #552]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800314c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	4b88      	ldr	r3, [pc, #544]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a87      	ldr	r2, [pc, #540]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e00b      	b.n	8003178 <HAL_RCC_OscConfig+0xb0>
 8003160:	4b84      	ldr	r3, [pc, #528]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a83      	ldr	r2, [pc, #524]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	4b81      	ldr	r3, [pc, #516]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a80      	ldr	r2, [pc, #512]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d013      	beq.n	80031a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe fc08 	bl	8001994 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003188:	f7fe fc04 	bl	8001994 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1fb      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4b76      	ldr	r3, [pc, #472]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0xc0>
 80031a6:	e014      	b.n	80031d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fe fbf4 	bl	8001994 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b0:	f7fe fbf0 	bl	8001994 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e1e7      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c2:	4b6c      	ldr	r3, [pc, #432]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0xe8>
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d063      	beq.n	80032a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031de:	4b65      	ldr	r3, [pc, #404]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ea:	4b62      	ldr	r3, [pc, #392]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d11c      	bne.n	8003230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f6:	4b5f      	ldr	r3, [pc, #380]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d116      	bne.n	8003230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	4b5c      	ldr	r3, [pc, #368]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_RCC_OscConfig+0x152>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d001      	beq.n	800321a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e1bb      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321a:	4b56      	ldr	r3, [pc, #344]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4952      	ldr	r1, [pc, #328]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322e:	e03a      	b.n	80032a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003238:	4b4f      	ldr	r3, [pc, #316]	; (8003378 <HAL_RCC_OscConfig+0x2b0>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fe fba9 	bl	8001994 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003246:	f7fe fba5 	bl	8001994 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e19c      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	4b46      	ldr	r3, [pc, #280]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003264:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4940      	ldr	r1, [pc, #256]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	4313      	orrs	r3, r2
 8003276:	600b      	str	r3, [r1, #0]
 8003278:	e015      	b.n	80032a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327a:	4b3f      	ldr	r3, [pc, #252]	; (8003378 <HAL_RCC_OscConfig+0x2b0>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe fb88 	bl	8001994 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003288:	f7fe fb84 	bl	8001994 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e17b      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d030      	beq.n	8003314 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ba:	4b30      	ldr	r3, [pc, #192]	; (800337c <HAL_RCC_OscConfig+0x2b4>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fe fb68 	bl	8001994 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c8:	f7fe fb64 	bl	8001994 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e15b      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	4b26      	ldr	r3, [pc, #152]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x200>
 80032e6:	e015      	b.n	8003314 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e8:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_RCC_OscConfig+0x2b4>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ee:	f7fe fb51 	bl	8001994 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f6:	f7fe fb4d 	bl	8001994 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e144      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a0 	beq.w	8003462 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10f      	bne.n	8003352 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCC_OscConfig+0x2b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d121      	bne.n	80033a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <HAL_RCC_OscConfig+0x2b8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a07      	ldr	r2, [pc, #28]	; (8003380 <HAL_RCC_OscConfig+0x2b8>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336a:	f7fe fb13 	bl	8001994 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003370:	e011      	b.n	8003396 <HAL_RCC_OscConfig+0x2ce>
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800
 8003378:	42470000 	.word	0x42470000
 800337c:	42470e80 	.word	0x42470e80
 8003380:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fe fb06 	bl	8001994 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e0fd      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b81      	ldr	r3, [pc, #516]	; (800359c <HAL_RCC_OscConfig+0x4d4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x2f0>
 80033aa:	4b7d      	ldr	r3, [pc, #500]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a7c      	ldr	r2, [pc, #496]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
 80033b6:	e01c      	b.n	80033f2 <HAL_RCC_OscConfig+0x32a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b05      	cmp	r3, #5
 80033be:	d10c      	bne.n	80033da <HAL_RCC_OscConfig+0x312>
 80033c0:	4b77      	ldr	r3, [pc, #476]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	4a76      	ldr	r2, [pc, #472]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	6713      	str	r3, [r2, #112]	; 0x70
 80033cc:	4b74      	ldr	r3, [pc, #464]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	4a73      	ldr	r2, [pc, #460]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
 80033d8:	e00b      	b.n	80033f2 <HAL_RCC_OscConfig+0x32a>
 80033da:	4b71      	ldr	r3, [pc, #452]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4a70      	ldr	r2, [pc, #448]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	; 0x70
 80033e6:	4b6e      	ldr	r3, [pc, #440]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	4a6d      	ldr	r2, [pc, #436]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d015      	beq.n	8003426 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe facb 	bl	8001994 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe fac7 	bl	8001994 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0bc      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	4b61      	ldr	r3, [pc, #388]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ee      	beq.n	8003402 <HAL_RCC_OscConfig+0x33a>
 8003424:	e014      	b.n	8003450 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003426:	f7fe fab5 	bl	8001994 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fe fab1 	bl	8001994 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e0a6      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	4b56      	ldr	r3, [pc, #344]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ee      	bne.n	800342e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4b52      	ldr	r3, [pc, #328]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4a51      	ldr	r2, [pc, #324]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 800345c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003460:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8092 	beq.w	8003590 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800346c:	4b4c      	ldr	r3, [pc, #304]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b08      	cmp	r3, #8
 8003476:	d05c      	beq.n	8003532 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d141      	bne.n	8003504 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003480:	4b48      	ldr	r3, [pc, #288]	; (80035a4 <HAL_RCC_OscConfig+0x4dc>)
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fe fa85 	bl	8001994 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348e:	f7fe fa81 	bl	8001994 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e078      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a0:	4b3f      	ldr	r3, [pc, #252]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	019b      	lsls	r3, r3, #6
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	3b01      	subs	r3, #1
 80034c6:	041b      	lsls	r3, r3, #16
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	061b      	lsls	r3, r3, #24
 80034d0:	4933      	ldr	r1, [pc, #204]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d6:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_RCC_OscConfig+0x4dc>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe fa5a 	bl	8001994 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fe fa56 	bl	8001994 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e04d      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f6:	4b2a      	ldr	r3, [pc, #168]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x41c>
 8003502:	e045      	b.n	8003590 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_RCC_OscConfig+0x4dc>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350a:	f7fe fa43 	bl	8001994 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003512:	f7fe fa3f 	bl	8001994 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e036      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003524:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f0      	bne.n	8003512 <HAL_RCC_OscConfig+0x44a>
 8003530:	e02e      	b.n	8003590 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e029      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800353e:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <HAL_RCC_OscConfig+0x4d8>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	429a      	cmp	r2, r3
 8003550:	d11c      	bne.n	800358c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d115      	bne.n	800358c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003566:	4013      	ands	r3, r2
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800356c:	4293      	cmp	r3, r2
 800356e:	d10d      	bne.n	800358c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d106      	bne.n	800358c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40007000 	.word	0x40007000
 80035a0:	40023800 	.word	0x40023800
 80035a4:	42470060 	.word	0x42470060

080035a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0cc      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035bc:	4b68      	ldr	r3, [pc, #416]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d90c      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b65      	ldr	r3, [pc, #404]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b8      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003614:	4b53      	ldr	r3, [pc, #332]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a52      	ldr	r2, [pc, #328]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	494d      	ldr	r1, [pc, #308]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d044      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d119      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d003      	beq.n	8003666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	2b03      	cmp	r3, #3
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e06f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e067      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003686:	4b37      	ldr	r3, [pc, #220]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f023 0203 	bic.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4934      	ldr	r1, [pc, #208]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003698:	f7fe f97c 	bl	8001994 <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a0:	f7fe f978 	bl	8001994 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e04f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 020c 	and.w	r2, r3, #12
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d1eb      	bne.n	80036a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c8:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d20c      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e032      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4916      	ldr	r1, [pc, #88]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	490e      	ldr	r1, [pc, #56]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800372e:	f000 f821 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8003732:	4602      	mov	r2, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	490a      	ldr	r1, [pc, #40]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	5ccb      	ldrb	r3, [r1, r3]
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f8dc 	bl	800190c <HAL_InitTick>

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00
 8003764:	40023800 	.word	0x40023800
 8003768:	0800c6b0 	.word	0x0800c6b0
 800376c:	20000000 	.word	0x20000000
 8003770:	20000004 	.word	0x20000004

08003774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	b5b0      	push	{r4, r5, r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800377a:	2100      	movs	r1, #0
 800377c:	6079      	str	r1, [r7, #4]
 800377e:	2100      	movs	r1, #0
 8003780:	60f9      	str	r1, [r7, #12]
 8003782:	2100      	movs	r1, #0
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003786:	2100      	movs	r1, #0
 8003788:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800378a:	4952      	ldr	r1, [pc, #328]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800378c:	6889      	ldr	r1, [r1, #8]
 800378e:	f001 010c 	and.w	r1, r1, #12
 8003792:	2908      	cmp	r1, #8
 8003794:	d00d      	beq.n	80037b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8003796:	2908      	cmp	r1, #8
 8003798:	f200 8094 	bhi.w	80038c4 <HAL_RCC_GetSysClockFreq+0x150>
 800379c:	2900      	cmp	r1, #0
 800379e:	d002      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x32>
 80037a0:	2904      	cmp	r1, #4
 80037a2:	d003      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x38>
 80037a4:	e08e      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a6:	4b4c      	ldr	r3, [pc, #304]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80037a8:	60bb      	str	r3, [r7, #8]
       break;
 80037aa:	e08e      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ac:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <HAL_RCC_GetSysClockFreq+0x168>)
 80037ae:	60bb      	str	r3, [r7, #8]
      break;
 80037b0:	e08b      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b2:	4948      	ldr	r1, [pc, #288]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80037b4:	6849      	ldr	r1, [r1, #4]
 80037b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80037ba:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037bc:	4945      	ldr	r1, [pc, #276]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80037be:	6849      	ldr	r1, [r1, #4]
 80037c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80037c4:	2900      	cmp	r1, #0
 80037c6:	d024      	beq.n	8003812 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c8:	4942      	ldr	r1, [pc, #264]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80037ca:	6849      	ldr	r1, [r1, #4]
 80037cc:	0989      	lsrs	r1, r1, #6
 80037ce:	4608      	mov	r0, r1
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80037d8:	f04f 0500 	mov.w	r5, #0
 80037dc:	ea00 0204 	and.w	r2, r0, r4
 80037e0:	ea01 0305 	and.w	r3, r1, r5
 80037e4:	493d      	ldr	r1, [pc, #244]	; (80038dc <HAL_RCC_GetSysClockFreq+0x168>)
 80037e6:	fb01 f003 	mul.w	r0, r1, r3
 80037ea:	2100      	movs	r1, #0
 80037ec:	fb01 f102 	mul.w	r1, r1, r2
 80037f0:	1844      	adds	r4, r0, r1
 80037f2:	493a      	ldr	r1, [pc, #232]	; (80038dc <HAL_RCC_GetSysClockFreq+0x168>)
 80037f4:	fba2 0101 	umull	r0, r1, r2, r1
 80037f8:	1863      	adds	r3, r4, r1
 80037fa:	4619      	mov	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	461a      	mov	r2, r3
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	f7fc fd3c 	bl	8000280 <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4613      	mov	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e04a      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003812:	4b30      	ldr	r3, [pc, #192]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	099b      	lsrs	r3, r3, #6
 8003818:	461a      	mov	r2, r3
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	ea02 0400 	and.w	r4, r2, r0
 800382a:	ea03 0501 	and.w	r5, r3, r1
 800382e:	4620      	mov	r0, r4
 8003830:	4629      	mov	r1, r5
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	014b      	lsls	r3, r1, #5
 800383c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003840:	0142      	lsls	r2, r0, #5
 8003842:	4610      	mov	r0, r2
 8003844:	4619      	mov	r1, r3
 8003846:	1b00      	subs	r0, r0, r4
 8003848:	eb61 0105 	sbc.w	r1, r1, r5
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	018b      	lsls	r3, r1, #6
 8003856:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800385a:	0182      	lsls	r2, r0, #6
 800385c:	1a12      	subs	r2, r2, r0
 800385e:	eb63 0301 	sbc.w	r3, r3, r1
 8003862:	f04f 0000 	mov.w	r0, #0
 8003866:	f04f 0100 	mov.w	r1, #0
 800386a:	00d9      	lsls	r1, r3, #3
 800386c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003870:	00d0      	lsls	r0, r2, #3
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	1912      	adds	r2, r2, r4
 8003878:	eb45 0303 	adc.w	r3, r5, r3
 800387c:	f04f 0000 	mov.w	r0, #0
 8003880:	f04f 0100 	mov.w	r1, #0
 8003884:	0299      	lsls	r1, r3, #10
 8003886:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800388a:	0290      	lsls	r0, r2, #10
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	461a      	mov	r2, r3
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	f7fc fcf0 	bl	8000280 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4613      	mov	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	0c1b      	lsrs	r3, r3, #16
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	3301      	adds	r3, #1
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c0:	60bb      	str	r3, [r7, #8]
      break;
 80038c2:	e002      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80038c6:	60bb      	str	r3, [r7, #8]
      break;
 80038c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ca:	68bb      	ldr	r3, [r7, #8]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bdb0      	pop	{r4, r5, r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	00f42400 	.word	0x00f42400
 80038dc:	017d7840 	.word	0x017d7840

080038e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000

080038f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038fc:	f7ff fff0 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0a9b      	lsrs	r3, r3, #10
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	; (800391c <HAL_RCC_GetPCLK1Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	0800c6c0 	.word	0x0800c6c0

08003920 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003944:	2b00      	cmp	r3, #0
 8003946:	d035      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003948:	4b67      	ldr	r3, [pc, #412]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800394e:	f7fe f821 	bl	8001994 <HAL_GetTick>
 8003952:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003956:	f7fe f81d 	bl	8001994 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e0ba      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003968:	4b60      	ldr	r3, [pc, #384]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	019a      	lsls	r2, r3, #6
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	071b      	lsls	r3, r3, #28
 8003980:	495a      	ldr	r1, [pc, #360]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003988:	4b57      	ldr	r3, [pc, #348]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800398e:	f7fe f801 	bl	8001994 <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003996:	f7fd fffd 	bl	8001994 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e09a      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039a8:	4b50      	ldr	r3, [pc, #320]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8083 	beq.w	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	4b49      	ldr	r3, [pc, #292]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	4a48      	ldr	r2, [pc, #288]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d0:	6413      	str	r3, [r2, #64]	; 0x40
 80039d2:	4b46      	ldr	r3, [pc, #280]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039de:	4b44      	ldr	r3, [pc, #272]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a43      	ldr	r2, [pc, #268]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039ea:	f7fd ffd3 	bl	8001994 <HAL_GetTick>
 80039ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fd ffcf 	bl	8001994 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e06c      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a04:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a10:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a18:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02f      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d028      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a2e:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a38:	4b2e      	ldr	r3, [pc, #184]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a3e:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a44:	4a29      	ldr	r2, [pc, #164]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a4a:	4b28      	ldr	r3, [pc, #160]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d114      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fd ff9d 	bl	8001994 <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd ff99 	bl	8001994 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e034      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ee      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a8c:	d10d      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a8e:	4b17      	ldr	r3, [pc, #92]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa2:	4912      	ldr	r1, [pc, #72]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	608b      	str	r3, [r1, #8]
 8003aa8:	e005      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ab0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ab4:	6093      	str	r3, [r2, #8]
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ab8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac2:	490a      	ldr	r1, [pc, #40]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7c1a      	ldrb	r2, [r3, #16]
 8003ad8:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ada:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	42470068 	.word	0x42470068
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40007000 	.word	0x40007000
 8003af4:	42470e40 	.word	0x42470e40
 8003af8:	424711e0 	.word	0x424711e0

08003afc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e083      	b.n	8003c16 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	7f5b      	ldrb	r3, [r3, #29]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d105      	bne.n	8003b24 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd fbe6 	bl	80012f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	22ca      	movs	r2, #202	; 0xca
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2253      	movs	r2, #83	; 0x53
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f897 	bl	8003c6e <RTC_EnterInitMode>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	22ff      	movs	r2, #255	; 0xff
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2204      	movs	r2, #4
 8003b52:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e05e      	b.n	8003c16 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b6a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6899      	ldr	r1, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6919      	ldr	r1, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	041a      	lsls	r2, r3, #16
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10e      	bne.n	8003be4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f829 	bl	8003c1e <HAL_RTC_WaitForSynchro>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	22ff      	movs	r2, #255	; 0xff
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2204      	movs	r2, #4
 8003bde:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e018      	b.n	8003c16 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bf2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	22ff      	movs	r2, #255	; 0xff
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003c14:	2300      	movs	r3, #0
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c38:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c3a:	f7fd feab 	bl	8001994 <HAL_GetTick>
 8003c3e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003c40:	e009      	b.n	8003c56 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c42:	f7fd fea7 	bl	8001994 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c50:	d901      	bls.n	8003c56 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e007      	b.n	8003c66 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0ee      	beq.n	8003c42 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d119      	bne.n	8003cbc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c90:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c92:	f7fd fe7f 	bl	8001994 <HAL_GetTick>
 8003c96:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c98:	e009      	b.n	8003cae <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c9a:	f7fd fe7b 	bl	8001994 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ca8:	d901      	bls.n	8003cae <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e007      	b.n	8003cbe <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ee      	beq.n	8003c9a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e056      	b.n	8003d86 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fd fb7e 	bl	80013f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	ea42 0103 	orr.w	r1, r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	f003 0104 	and.w	r1, r3, #4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b088      	sub	sp, #32
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_SPI_Transmit+0x22>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e11e      	b.n	8003fee <HAL_SPI_Transmit+0x260>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003db8:	f7fd fdec 	bl	8001994 <HAL_GetTick>
 8003dbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d002      	beq.n	8003dd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dd2:	e103      	b.n	8003fdc <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_SPI_Transmit+0x52>
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003de4:	e0fa      	b.n	8003fdc <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2203      	movs	r2, #3
 8003dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e2c:	d107      	bne.n	8003e3e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d007      	beq.n	8003e5c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e64:	d14b      	bne.n	8003efe <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_SPI_Transmit+0xe6>
 8003e6e:	8afb      	ldrh	r3, [r7, #22]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d13e      	bne.n	8003ef2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	881a      	ldrh	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	1c9a      	adds	r2, r3, #2
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e98:	e02b      	b.n	8003ef2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d112      	bne.n	8003ece <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	881a      	ldrh	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	1c9a      	adds	r2, r3, #2
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ecc:	e011      	b.n	8003ef2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ece:	f7fd fd61 	bl	8001994 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d803      	bhi.n	8003ee6 <HAL_SPI_Transmit+0x158>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d102      	bne.n	8003eec <HAL_SPI_Transmit+0x15e>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ef0:	e074      	b.n	8003fdc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ce      	bne.n	8003e9a <HAL_SPI_Transmit+0x10c>
 8003efc:	e04c      	b.n	8003f98 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_SPI_Transmit+0x17e>
 8003f06:	8afb      	ldrh	r3, [r7, #22]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d140      	bne.n	8003f8e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	7812      	ldrb	r2, [r2, #0]
 8003f18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f32:	e02c      	b.n	8003f8e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d113      	bne.n	8003f6a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	7812      	ldrb	r2, [r2, #0]
 8003f4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f68:	e011      	b.n	8003f8e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f6a:	f7fd fd13 	bl	8001994 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d803      	bhi.n	8003f82 <HAL_SPI_Transmit+0x1f4>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d102      	bne.n	8003f88 <HAL_SPI_Transmit+0x1fa>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f8c:	e026      	b.n	8003fdc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1cd      	bne.n	8003f34 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	6839      	ldr	r1, [r7, #0]
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f9d9 	bl	8004354 <SPI_EndRxTxTransaction>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10a      	bne.n	8003fcc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e000      	b.n	8003fdc <HAL_SPI_Transmit+0x24e>
  }

error:
 8003fda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	4613      	mov	r3, r2
 8004004:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_SPI_Transmit_DMA+0x20>
 8004014:	2302      	movs	r3, #2
 8004016:	e093      	b.n	8004140 <HAL_SPI_Transmit_DMA+0x148>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	d002      	beq.n	8004032 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800402c:	2302      	movs	r3, #2
 800402e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004030:	e081      	b.n	8004136 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_SPI_Transmit_DMA+0x46>
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d102      	bne.n	8004044 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004042:	e078      	b.n	8004136 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2203      	movs	r2, #3
 8004048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	88fa      	ldrh	r2, [r7, #6]
 800405c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	88fa      	ldrh	r2, [r7, #6]
 8004062:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408a:	d107      	bne.n	800409c <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800409a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a0:	4a29      	ldr	r2, [pc, #164]	; (8004148 <HAL_SPI_Transmit_DMA+0x150>)
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a8:	4a28      	ldr	r2, [pc, #160]	; (800414c <HAL_SPI_Transmit_DMA+0x154>)
 80040aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b0:	4a27      	ldr	r2, [pc, #156]	; (8004150 <HAL_SPI_Transmit_DMA+0x158>)
 80040b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b8:	2200      	movs	r2, #0
 80040ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	4619      	mov	r1, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	330c      	adds	r3, #12
 80040cc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040d4:	f7fe fa24 	bl	8002520 <HAL_DMA_Start_IT>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	f043 0210 	orr.w	r2, r3, #16
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80040f6:	e01e      	b.n	8004136 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d007      	beq.n	8004116 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004114:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0220 	orr.w	r2, r2, #32
 8004124:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0202 	orr.w	r2, r2, #2
 8004134:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800413e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	08004225 	.word	0x08004225
 800414c:	0800417d 	.word	0x0800417d
 8004150:	08004241 	.word	0x08004241

08004154 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800418a:	f7fd fc03 	bl	8001994 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419e:	d03b      	beq.n	8004218 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0220 	bic.w	r2, r2, #32
 80041ae:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0202 	bic.w	r2, r2, #2
 80041be:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	2164      	movs	r1, #100	; 0x64
 80041c4:	6978      	ldr	r0, [r7, #20]
 80041c6:	f000 f8c5 	bl	8004354 <SPI_EndRxTxTransaction>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2200      	movs	r2, #0
 80041fe:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004210:	6978      	ldr	r0, [r7, #20]
 8004212:	f7ff ffa9 	bl	8004168 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004216:	e002      	b.n	800421e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004218:	6978      	ldr	r0, [r7, #20]
 800421a:	f7fc fe57 	bl	8000ecc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff ff8e 	bl	8004154 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0203 	bic.w	r2, r2, #3
 800425c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f043 0210 	orr.w	r2, r3, #16
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff ff78 	bl	8004168 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004290:	e04c      	b.n	800432c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d048      	beq.n	800432c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800429a:	f7fd fb7b 	bl	8001994 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d902      	bls.n	80042b0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d13d      	bne.n	800432c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c8:	d111      	bne.n	80042ee <SPI_WaitFlagStateUntilTimeout+0x6e>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d2:	d004      	beq.n	80042de <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042dc:	d107      	bne.n	80042ee <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f6:	d10f      	bne.n	8004318 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004316:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e00f      	b.n	800434c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	429a      	cmp	r2, r3
 8004348:	d1a3      	bne.n	8004292 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af02      	add	r7, sp, #8
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004360:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <SPI_EndRxTxTransaction+0x7c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <SPI_EndRxTxTransaction+0x80>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	0d5b      	lsrs	r3, r3, #21
 800436c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004370:	fb02 f303 	mul.w	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800437e:	d112      	bne.n	80043a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2200      	movs	r2, #0
 8004388:	2180      	movs	r1, #128	; 0x80
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff ff78 	bl	8004280 <SPI_WaitFlagStateUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d016      	beq.n	80043c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f043 0220 	orr.w	r2, r3, #32
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e00f      	b.n	80043c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043bc:	2b80      	cmp	r3, #128	; 0x80
 80043be:	d0f2      	beq.n	80043a6 <SPI_EndRxTxTransaction+0x52>
 80043c0:	e000      	b.n	80043c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80043c2:	bf00      	nop
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000000 	.word	0x20000000
 80043d4:	165e9f81 	.word	0x165e9f81

080043d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e083      	b.n	80044f4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fd f9d1 	bl	80017a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800441c:	f023 0307 	bic.w	r3, r3, #7
 8004420:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	4619      	mov	r1, r3
 800442c:	4610      	mov	r0, r2
 800442e:	f000 f89d 	bl	800456c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445a:	f023 0303 	bic.w	r3, r3, #3
 800445e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	4313      	orrs	r3, r2
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004478:	f023 030c 	bic.w	r3, r3, #12
 800447c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	4313      	orrs	r3, r2
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	011a      	lsls	r2, r3, #4
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	031b      	lsls	r3, r3, #12
 80044a8:	4313      	orrs	r3, r2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80044be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	4313      	orrs	r3, r2
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_TIM_Encoder_Start+0x18>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b04      	cmp	r3, #4
 8004510:	d008      	beq.n	8004524 <HAL_TIM_Encoder_Start+0x28>
 8004512:	e00f      	b.n	8004534 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2201      	movs	r2, #1
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f000 f8a5 	bl	800466c <TIM_CCxChannelCmd>
      break;
 8004522:	e016      	b.n	8004552 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2201      	movs	r2, #1
 800452a:	2104      	movs	r1, #4
 800452c:	4618      	mov	r0, r3
 800452e:	f000 f89d 	bl	800466c <TIM_CCxChannelCmd>
      break;
 8004532:	e00e      	b.n	8004552 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f000 f895 	bl	800466c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2201      	movs	r2, #1
 8004548:	2104      	movs	r1, #4
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f88e 	bl	800466c <TIM_CCxChannelCmd>
      break;
 8004550:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0201 	orr.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a34      	ldr	r2, [pc, #208]	; (8004650 <TIM_Base_SetConfig+0xe4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00f      	beq.n	80045a4 <TIM_Base_SetConfig+0x38>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458a:	d00b      	beq.n	80045a4 <TIM_Base_SetConfig+0x38>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a31      	ldr	r2, [pc, #196]	; (8004654 <TIM_Base_SetConfig+0xe8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d007      	beq.n	80045a4 <TIM_Base_SetConfig+0x38>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a30      	ldr	r2, [pc, #192]	; (8004658 <TIM_Base_SetConfig+0xec>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d003      	beq.n	80045a4 <TIM_Base_SetConfig+0x38>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a2f      	ldr	r2, [pc, #188]	; (800465c <TIM_Base_SetConfig+0xf0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d108      	bne.n	80045b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a25      	ldr	r2, [pc, #148]	; (8004650 <TIM_Base_SetConfig+0xe4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d01b      	beq.n	80045f6 <TIM_Base_SetConfig+0x8a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c4:	d017      	beq.n	80045f6 <TIM_Base_SetConfig+0x8a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a22      	ldr	r2, [pc, #136]	; (8004654 <TIM_Base_SetConfig+0xe8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d013      	beq.n	80045f6 <TIM_Base_SetConfig+0x8a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a21      	ldr	r2, [pc, #132]	; (8004658 <TIM_Base_SetConfig+0xec>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00f      	beq.n	80045f6 <TIM_Base_SetConfig+0x8a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a20      	ldr	r2, [pc, #128]	; (800465c <TIM_Base_SetConfig+0xf0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00b      	beq.n	80045f6 <TIM_Base_SetConfig+0x8a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <TIM_Base_SetConfig+0xf4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d007      	beq.n	80045f6 <TIM_Base_SetConfig+0x8a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a1e      	ldr	r2, [pc, #120]	; (8004664 <TIM_Base_SetConfig+0xf8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d003      	beq.n	80045f6 <TIM_Base_SetConfig+0x8a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <TIM_Base_SetConfig+0xfc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d108      	bne.n	8004608 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a08      	ldr	r2, [pc, #32]	; (8004650 <TIM_Base_SetConfig+0xe4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d103      	bne.n	800463c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	615a      	str	r2, [r3, #20]
}
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40010000 	.word	0x40010000
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	40014000 	.word	0x40014000
 8004664:	40014400 	.word	0x40014400
 8004668:	40014800 	.word	0x40014800

0800466c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2201      	movs	r2, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	43db      	mvns	r3, r3
 800468e:	401a      	ands	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1a      	ldr	r2, [r3, #32]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	fa01 f303 	lsl.w	r3, r1, r3
 80046a4:	431a      	orrs	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e050      	b.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d018      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471c:	d013      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a18      	ldr	r2, [pc, #96]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00e      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a16      	ldr	r2, [pc, #88]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a15      	ldr	r2, [pc, #84]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a13      	ldr	r2, [pc, #76]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d10c      	bne.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800474c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4313      	orrs	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40010000 	.word	0x40010000
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40000c00 	.word	0x40000c00
 8004790:	40014000 	.word	0x40014000

08004794 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	881a      	ldrh	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	799b      	ldrb	r3, [r3, #6]
 80047a6:	08db      	lsrs	r3, r3, #3
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	fb12 f303 	smulbb	r3, r2, r3
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	889b      	ldrh	r3, [r3, #4]
 80047ba:	461a      	mov	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	885b      	ldrh	r3, [r3, #2]
 80047c0:	fb03 f302 	mul.w	r3, r3, r2
 80047c4:	461a      	mov	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	60da      	str	r2, [r3, #12]
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 80047dc:	b490      	push	{r4, r7}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4604      	mov	r4, r0
 80047e4:	4608      	mov	r0, r1
 80047e6:	1d39      	adds	r1, r7, #4
 80047e8:	e881 000c 	stmia.w	r1, {r2, r3}
 80047ec:	4623      	mov	r3, r4
 80047ee:	81fb      	strh	r3, [r7, #14]
 80047f0:	4603      	mov	r3, r0
 80047f2:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 80047f4:	2300      	movs	r3, #0
 80047f6:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 80047f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047fc:	88ba      	ldrh	r2, [r7, #4]
 80047fe:	4293      	cmp	r3, r2
 8004800:	da04      	bge.n	800480c <code+0x30>
        code |= LEFT;
 8004802:	2201      	movs	r2, #1
 8004804:	7dfb      	ldrb	r3, [r7, #23]
 8004806:	4313      	orrs	r3, r2
 8004808:	75fb      	strb	r3, [r7, #23]
 800480a:	e008      	b.n	800481e <code+0x42>
    } else if (x0 > window.x1) {
 800480c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004810:	893a      	ldrh	r2, [r7, #8]
 8004812:	4293      	cmp	r3, r2
 8004814:	dd03      	ble.n	800481e <code+0x42>
        code |= RIGHT;
 8004816:	2202      	movs	r2, #2
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	4313      	orrs	r3, r2
 800481c:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 800481e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004822:	88fa      	ldrh	r2, [r7, #6]
 8004824:	4293      	cmp	r3, r2
 8004826:	da04      	bge.n	8004832 <code+0x56>
        code |= BOTTOM;
 8004828:	2204      	movs	r2, #4
 800482a:	7dfb      	ldrb	r3, [r7, #23]
 800482c:	4313      	orrs	r3, r2
 800482e:	75fb      	strb	r3, [r7, #23]
 8004830:	e008      	b.n	8004844 <code+0x68>
    } else if (y0 > window.y1) {
 8004832:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004836:	897a      	ldrh	r2, [r7, #10]
 8004838:	4293      	cmp	r3, r2
 800483a:	dd03      	ble.n	8004844 <code+0x68>
        code |= TOP;
 800483c:	2208      	movs	r2, #8
 800483e:	7dfb      	ldrb	r3, [r7, #23]
 8004840:	4313      	orrs	r3, r2
 8004842:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8004844:	7dfb      	ldrb	r3, [r7, #23]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bc90      	pop	{r4, r7}
 800484e:	4770      	bx	lr

08004850 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f9b3 0000 	ldrsh.w	r0, [r3]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f9b3 1000 	ldrsh.w	r1, [r3]
 800486a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800486e:	cb0c      	ldmia	r3, {r2, r3}
 8004870:	f7ff ffb4 	bl	80047dc <code>
 8004874:	4603      	mov	r3, r0
 8004876:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004884:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004888:	cb0c      	ldmia	r3, {r2, r3}
 800488a:	f7ff ffa7 	bl	80047dc <code>
 800488e:	4603      	mov	r3, r0
 8004890:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8004892:	2300      	movs	r3, #0
 8004894:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8004896:	7ffa      	ldrb	r2, [r7, #31]
 8004898:	7fbb      	ldrb	r3, [r7, #30]
 800489a:	4313      	orrs	r3, r2
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d102      	bne.n	80048a8 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 80048a2:	2301      	movs	r3, #1
 80048a4:	777b      	strb	r3, [r7, #29]
            break;
 80048a6:	e0e9      	b.n	8004a7c <clip_line+0x22c>
        } else if (code0 & code1) {
 80048a8:	7ffa      	ldrb	r2, [r7, #31]
 80048aa:	7fbb      	ldrb	r3, [r7, #30]
 80048ac:	4013      	ands	r3, r2
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 80e2 	bne.w	8004a7a <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 80048be:	7ffb      	ldrb	r3, [r7, #31]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <clip_line+0x78>
 80048c4:	7ffb      	ldrb	r3, [r7, #31]
 80048c6:	e000      	b.n	80048ca <clip_line+0x7a>
 80048c8:	7fbb      	ldrb	r3, [r7, #30]
 80048ca:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 80048cc:	2208      	movs	r2, #8
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
 80048d0:	4013      	ands	r3, r2
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d024      	beq.n	8004922 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048e6:	4619      	mov	r1, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048ee:	1acb      	subs	r3, r1, r3
 80048f0:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80048f2:	4608      	mov	r0, r1
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80048fa:	1a41      	subs	r1, r0, r1
 80048fc:	fb01 f103 	mul.w	r1, r1, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004906:	4618      	mov	r0, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800490e:	1ac3      	subs	r3, r0, r3
 8004910:	fb91 f3f3 	sdiv	r3, r1, r3
 8004914:	b29b      	uxth	r3, r3
 8004916:	4413      	add	r3, r2
 8004918:	b29b      	uxth	r3, r3
 800491a:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 800491c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800491e:	833b      	strh	r3, [r7, #24]
 8004920:	e07f      	b.n	8004a22 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8004922:	2204      	movs	r2, #4
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	4013      	ands	r3, r2
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d024      	beq.n	8004978 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004934:	b29a      	uxth	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800493c:	4619      	mov	r1, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004944:	1acb      	subs	r3, r1, r3
 8004946:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8004948:	4608      	mov	r0, r1
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004950:	1a41      	subs	r1, r0, r1
 8004952:	fb01 f103 	mul.w	r1, r1, r3
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800495c:	4618      	mov	r0, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004964:	1ac3      	subs	r3, r0, r3
 8004966:	fb91 f3f3 	sdiv	r3, r1, r3
 800496a:	b29b      	uxth	r3, r3
 800496c:	4413      	add	r3, r2
 800496e:	b29b      	uxth	r3, r3
 8004970:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8004972:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004974:	833b      	strh	r3, [r7, #24]
 8004976:	e054      	b.n	8004a22 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8004978:	2202      	movs	r2, #2
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	4013      	ands	r3, r2
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d024      	beq.n	80049ce <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800498a:	b29a      	uxth	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004992:	4619      	mov	r1, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800499a:	1acb      	subs	r3, r1, r3
 800499c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800499e:	4608      	mov	r0, r1
 80049a0:	68f9      	ldr	r1, [r7, #12]
 80049a2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80049a6:	1a41      	subs	r1, r0, r1
 80049a8:	fb01 f103 	mul.w	r1, r1, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049b2:	4618      	mov	r0, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049ba:	1ac3      	subs	r3, r0, r3
 80049bc:	fb91 f3f3 	sdiv	r3, r1, r3
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	4413      	add	r3, r2
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 80049c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049ca:	837b      	strh	r3, [r7, #26]
 80049cc:	e029      	b.n	8004a22 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 80049ce:	2201      	movs	r2, #1
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
 80049d2:	4013      	ands	r3, r2
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d023      	beq.n	8004a22 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e8:	4619      	mov	r1, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049f0:	1acb      	subs	r3, r1, r3
 80049f2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80049f4:	4608      	mov	r0, r1
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80049fc:	1a41      	subs	r1, r0, r1
 80049fe:	fb01 f103 	mul.w	r1, r1, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a10:	1ac3      	subs	r3, r0, r3
 8004a12:	fb91 f3f3 	sdiv	r3, r1, r3
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8004a1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a20:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8004a22:	7dfa      	ldrb	r2, [r7, #23]
 8004a24:	7ffb      	ldrb	r3, [r7, #31]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d113      	bne.n	8004a52 <clip_line+0x202>
                *x0 = x;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8b7a      	ldrh	r2, [r7, #26]
 8004a2e:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	8b3a      	ldrh	r2, [r7, #24]
 8004a34:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f9b3 0000 	ldrsh.w	r0, [r3]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a46:	cb0c      	ldmia	r3, {r2, r3}
 8004a48:	f7ff fec8 	bl	80047dc <code>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e721      	b.n	8004896 <clip_line+0x46>
            } else {
                *x1 = x;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	8b7a      	ldrh	r2, [r7, #26]
 8004a56:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	8b3a      	ldrh	r2, [r7, #24]
 8004a5c:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f9b3 0000 	ldrsh.w	r0, [r3]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a6e:	cb0c      	ldmia	r3, {r2, r3}
 8004a70:	f7ff feb4 	bl	80047dc <code>
 8004a74:	4603      	mov	r3, r0
 8004a76:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8004a78:	e70d      	b.n	8004896 <clip_line+0x46>
            break;
 8004a7a:	bf00      	nop
            }
        }
    }

    return accept;
 8004a7c:	7f7b      	ldrb	r3, [r7, #29]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	3306      	adds	r3, #6
 8004a96:	2208      	movs	r2, #8
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f000 fed3 	bl	8005844 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	7b9a      	ldrb	r2, [r3, #14]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	7bda      	ldrb	r2, [r3, #15]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	7c1a      	ldrb	r2, [r3, #16]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	72da      	strb	r2, [r3, #11]

    return 0;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08e      	sub	sp, #56	; 0x38
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8004acc:	f107 0314 	add.w	r3, r7, #20
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff ffd7 	bl	8004a86 <fontx_meta>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8004ade:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <fontx_glyph+0x2c>
        return status;
 8004ae6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004aea:	e077      	b.n	8004bdc <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8004aec:	7f7a      	ldrb	r2, [r7, #29]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8004af2:	7fba      	ldrb	r2, [r7, #30]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8004af8:	7f7b      	ldrb	r3, [r7, #29]
 8004afa:	3307      	adds	r3, #7
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	da00      	bge.n	8004b02 <fontx_glyph+0x42>
 8004b00:	3307      	adds	r3, #7
 8004b02:	10db      	asrs	r3, r3, #3
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	78da      	ldrb	r2, [r3, #3]
 8004b0e:	7fbb      	ldrb	r3, [r7, #30]
 8004b10:	fb12 f303 	smulbb	r3, r2, r3
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8004b1a:	7ffb      	ldrb	r3, [r7, #31]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10f      	bne.n	8004b40 <fontx_glyph+0x80>
        if (code < 0x100) {
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2bff      	cmp	r3, #255	; 0xff
 8004b24:	d859      	bhi.n	8004bda <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	789b      	ldrb	r3, [r3, #2]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	fb03 f302 	mul.w	r3, r3, r2
 8004b32:	3311      	adds	r3, #17
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	441a      	add	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e04d      	b.n	8004bdc <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3312      	adds	r3, #18
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3311      	adds	r3, #17
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8004b52:	e03d      	b.n	8004bd0 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	4413      	add	r3, r2
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	3302      	adds	r3, #2
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	3303      	adds	r3, #3
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	4413      	add	r3, r2
 8004b78:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d31c      	bcc.n	8004bbc <fontx_glyph+0xfc>
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d818      	bhi.n	8004bbc <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b92:	4413      	add	r3, r2
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3311      	adds	r3, #17
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	461a      	mov	r2, r3
                    nc * glyph->size
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	789b      	ldrb	r3, [r3, #2]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba8:	fb03 f301 	mul.w	r3, r3, r1
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8004bac:	4413      	add	r3, r2
 8004bae:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	441a      	add	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e00f      	b.n	8004bdc <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8004bbc:	6a3a      	ldr	r2, [r7, #32]
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	1ad2      	subs	r2, r2, r3
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	3304      	adds	r3, #4
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	1e5a      	subs	r2, r3, #1
 8004bd4:	633a      	str	r2, [r7, #48]	; 0x30
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1bc      	bne.n	8004b54 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3738      	adds	r7, #56	; 0x38
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	dd01      	ble.n	8004bfa <min+0x16>
        return b;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	e000      	b.n	8004bfc <min+0x18>
    };
    return a;
 8004bfa:	687b      	ldr	r3, [r7, #4]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <max>:

static inline int max(int a, int b) {
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	dd01      	ble.n	8004c1e <max+0x16>
        return a;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	e000      	b.n	8004c20 <max+0x18>
    }
    return b;
 8004c1e:	683b      	ldr	r3, [r7, #0]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8004c2c:	b490      	push	{r4, r7}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4604      	mov	r4, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	4611      	mov	r1, r2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	80fb      	strh	r3, [r7, #6]
 8004c3e:	4603      	mov	r3, r0
 8004c40:	80bb      	strh	r3, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	807b      	strh	r3, [r7, #2]
 8004c46:	4613      	mov	r3, r2
 8004c48:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 8004c4a:	4a08      	ldr	r2, [pc, #32]	; (8004c6c <hagl_set_clip_window+0x40>)
 8004c4c:	88fb      	ldrh	r3, [r7, #6]
 8004c4e:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 8004c50:	4a06      	ldr	r2, [pc, #24]	; (8004c6c <hagl_set_clip_window+0x40>)
 8004c52:	88bb      	ldrh	r3, [r7, #4]
 8004c54:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 8004c56:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <hagl_set_clip_window+0x40>)
 8004c58:	887b      	ldrh	r3, [r7, #2]
 8004c5a:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 8004c5c:	4a03      	ldr	r2, [pc, #12]	; (8004c6c <hagl_set_clip_window+0x40>)
 8004c5e:	883b      	ldrh	r3, [r7, #0]
 8004c60:	80d3      	strh	r3, [r2, #6]
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc90      	pop	{r4, r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	2000000c 	.word	0x2000000c

08004c70 <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	80fb      	strh	r3, [r7, #6]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	80bb      	strh	r3, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8004c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c86:	4a12      	ldr	r2, [pc, #72]	; (8004cd0 <hagl_put_pixel+0x60>)
 8004c88:	8812      	ldrh	r2, [r2, #0]
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	db1a      	blt.n	8004cc4 <hagl_put_pixel+0x54>
 8004c8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c92:	4a0f      	ldr	r2, [pc, #60]	; (8004cd0 <hagl_put_pixel+0x60>)
 8004c94:	8852      	ldrh	r2, [r2, #2]
 8004c96:	4293      	cmp	r3, r2
 8004c98:	db14      	blt.n	8004cc4 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8004c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c9e:	4a0c      	ldr	r2, [pc, #48]	; (8004cd0 <hagl_put_pixel+0x60>)
 8004ca0:	8892      	ldrh	r2, [r2, #4]
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	dc10      	bgt.n	8004cc8 <hagl_put_pixel+0x58>
 8004ca6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004caa:	4a09      	ldr	r2, [pc, #36]	; (8004cd0 <hagl_put_pixel+0x60>)
 8004cac:	88d2      	ldrh	r2, [r2, #6]
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	dc0a      	bgt.n	8004cc8 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8004cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cb6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fb ffb3 	bl	8000c28 <lcd_put_pixel>
 8004cc2:	e002      	b.n	8004cca <hagl_put_pixel+0x5a>
        return;
 8004cc4:	bf00      	nop
 8004cc6:	e000      	b.n	8004cca <hagl_put_pixel+0x5a>
        return;
 8004cc8:	bf00      	nop
}
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	2000000c 	.word	0x2000000c

08004cd4 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	4604      	mov	r4, r0
 8004cdc:	4608      	mov	r0, r1
 8004cde:	4611      	mov	r1, r2
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	80fb      	strh	r3, [r7, #6]
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	80bb      	strh	r3, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	807b      	strh	r3, [r7, #2]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	887b      	ldrh	r3, [r7, #2]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	b21a      	sxth	r2, r3
 8004cfc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004d00:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004d04:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004d08:	883b      	ldrh	r3, [r7, #0]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	4623      	mov	r3, r4
 8004d0e:	f000 f827 	bl	8004d60 <hagl_draw_line>
#endif
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd90      	pop	{r4, r7, pc}

08004d1a <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8004d1a:	b590      	push	{r4, r7, lr}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af02      	add	r7, sp, #8
 8004d20:	4604      	mov	r4, r0
 8004d22:	4608      	mov	r0, r1
 8004d24:	4611      	mov	r1, r2
 8004d26:	461a      	mov	r2, r3
 8004d28:	4623      	mov	r3, r4
 8004d2a:	80fb      	strh	r3, [r7, #6]
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	80bb      	strh	r3, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	807b      	strh	r3, [r7, #2]
 8004d34:	4613      	mov	r3, r2
 8004d36:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8004d38:	88ba      	ldrh	r2, [r7, #4]
 8004d3a:	887b      	ldrh	r3, [r7, #2]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	b21c      	sxth	r4, r3
 8004d42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004d4a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004d4e:	883b      	ldrh	r3, [r7, #0]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	4623      	mov	r3, r4
 8004d54:	f000 f804 	bl	8004d60 <hagl_draw_line>
#endif
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd90      	pop	{r4, r7, pc}

08004d60 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8004d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d62:	b089      	sub	sp, #36	; 0x24
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	4604      	mov	r4, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4623      	mov	r3, r4
 8004d70:	80fb      	strh	r3, [r7, #6]
 8004d72:	4603      	mov	r3, r0
 8004d74:	80bb      	strh	r3, [r7, #4]
 8004d76:	460b      	mov	r3, r1
 8004d78:	807b      	strh	r3, [r7, #2]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8004d7e:	463b      	mov	r3, r7
 8004d80:	1cba      	adds	r2, r7, #2
 8004d82:	1d3d      	adds	r5, r7, #4
 8004d84:	1dbc      	adds	r4, r7, #6
 8004d86:	494a      	ldr	r1, [pc, #296]	; (8004eb0 <hagl_draw_line+0x150>)
 8004d88:	466e      	mov	r6, sp
 8004d8a:	c903      	ldmia	r1, {r0, r1}
 8004d8c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004d90:	4629      	mov	r1, r5
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7ff fd5c 	bl	8004850 <clip_line>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f083 0301 	eor.w	r3, r3, #1
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d17e      	bne.n	8004ea2 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8004da4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004da8:	461a      	mov	r2, r3
 8004daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	bfb8      	it	lt
 8004db4:	425b      	neglt	r3, r3
 8004db6:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8004db8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004dbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	da01      	bge.n	8004dc8 <hagl_draw_line+0x68>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e001      	b.n	8004dcc <hagl_draw_line+0x6c>
 8004dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dcc:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8004dce:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bfb8      	it	lt
 8004dde:	425b      	neglt	r3, r3
 8004de0:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8004de2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004de6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	da01      	bge.n	8004df2 <hagl_draw_line+0x92>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e001      	b.n	8004df6 <hagl_draw_line+0x96>
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295
 8004df6:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8004df8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004dfc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	dd06      	ble.n	8004e12 <hagl_draw_line+0xb2>
 8004e04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004e08:	0fda      	lsrs	r2, r3, #31
 8004e0a:	4413      	add	r3, r2
 8004e0c:	105b      	asrs	r3, r3, #1
 8004e0e:	b21b      	sxth	r3, r3
 8004e10:	e006      	b.n	8004e20 <hagl_draw_line+0xc0>
 8004e12:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e16:	0fda      	lsrs	r2, r3, #31
 8004e18:	4413      	add	r3, r2
 8004e1a:	105b      	asrs	r3, r3, #1
 8004e1c:	425b      	negs	r3, r3
 8004e1e:	b21b      	sxth	r3, r3
 8004e20:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8004e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e26:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004e2a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff ff1f 	bl	8004c70 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8004e32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d105      	bne.n	8004e4a <hagl_draw_line+0xea>
 8004e3e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004e42:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d02d      	beq.n	8004ea6 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8004e4a:	8afb      	ldrh	r3, [r7, #22]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8004e52:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004e56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004e5a:	425b      	negs	r3, r3
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	dd0c      	ble.n	8004e7a <hagl_draw_line+0x11a>
            err -= dy;
 8004e60:	8afa      	ldrh	r2, [r7, #22]
 8004e62:	8a3b      	ldrh	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8004e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	8a7b      	ldrh	r3, [r7, #18]
 8004e72:	4413      	add	r3, r2
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	b21b      	sxth	r3, r3
 8004e78:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8004e7a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004e7e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	dacd      	bge.n	8004e22 <hagl_draw_line+0xc2>
            err += dx;
 8004e86:	8afa      	ldrh	r2, [r7, #22]
 8004e88:	8abb      	ldrh	r3, [r7, #20]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8004e90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	89fb      	ldrh	r3, [r7, #14]
 8004e98:	4413      	add	r3, r2
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	b21b      	sxth	r3, r3
 8004e9e:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8004ea0:	e7bf      	b.n	8004e22 <hagl_draw_line+0xc2>
        return;
 8004ea2:	bf00      	nop
 8004ea4:	e000      	b.n	8004ea8 <hagl_draw_line+0x148>
            break;
 8004ea6:	bf00      	nop
        }
    }
}
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	2000000c 	.word	0x2000000c

08004eb4 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4623      	mov	r3, r4
 8004ec4:	80fb      	strh	r3, [r7, #6]
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	80bb      	strh	r3, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	807b      	strh	r3, [r7, #2]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8004ed2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ed6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	dd0e      	ble.n	8004efc <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	887b      	ldrh	r3, [r7, #2]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	887b      	ldrh	r3, [r7, #2]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	887b      	ldrh	r3, [r7, #2]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8004efc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004f00:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	dd0e      	ble.n	8004f26 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8004f08:	88ba      	ldrh	r2, [r7, #4]
 8004f0a:	883b      	ldrh	r3, [r7, #0]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8004f12:	88ba      	ldrh	r2, [r7, #4]
 8004f14:	883b      	ldrh	r3, [r7, #0]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8004f1c:	88ba      	ldrh	r2, [r7, #4]
 8004f1e:	883b      	ldrh	r3, [r7, #0]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8004f26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f2a:	4a24      	ldr	r2, [pc, #144]	; (8004fbc <hagl_draw_rectangle+0x108>)
 8004f2c:	8812      	ldrh	r2, [r2, #0]
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	db3e      	blt.n	8004fb0 <hagl_draw_rectangle+0xfc>
 8004f32:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004f36:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <hagl_draw_rectangle+0x108>)
 8004f38:	8852      	ldrh	r2, [r2, #2]
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	db38      	blt.n	8004fb0 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8004f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f42:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <hagl_draw_rectangle+0x108>)
 8004f44:	8892      	ldrh	r2, [r2, #4]
 8004f46:	4293      	cmp	r3, r2
 8004f48:	dc34      	bgt.n	8004fb4 <hagl_draw_rectangle+0x100>
 8004f4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f4e:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <hagl_draw_rectangle+0x108>)
 8004f50:	88d2      	ldrh	r2, [r2, #6]
 8004f52:	4293      	cmp	r3, r2
 8004f54:	dc2e      	bgt.n	8004fb4 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 8004f56:	887a      	ldrh	r2, [r7, #2]
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3301      	adds	r3, #1
 8004f60:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 8004f62:	883a      	ldrh	r2, [r7, #0]
 8004f64:	88bb      	ldrh	r3, [r7, #4]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 8004f6e:	8c3b      	ldrh	r3, [r7, #32]
 8004f70:	89fa      	ldrh	r2, [r7, #14]
 8004f72:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004f76:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004f7a:	f7ff feab 	bl	8004cd4 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 8004f7e:	8c3b      	ldrh	r3, [r7, #32]
 8004f80:	89fa      	ldrh	r2, [r7, #14]
 8004f82:	f9b7 1000 	ldrsh.w	r1, [r7]
 8004f86:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004f8a:	f7ff fea3 	bl	8004cd4 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 8004f8e:	8c3b      	ldrh	r3, [r7, #32]
 8004f90:	89ba      	ldrh	r2, [r7, #12]
 8004f92:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004f96:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004f9a:	f7ff febe 	bl	8004d1a <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 8004f9e:	8c3b      	ldrh	r3, [r7, #32]
 8004fa0:	89ba      	ldrh	r2, [r7, #12]
 8004fa2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004fa6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8004faa:	f7ff feb6 	bl	8004d1a <hagl_draw_vline>
 8004fae:	e002      	b.n	8004fb6 <hagl_draw_rectangle+0x102>
        return;
 8004fb0:	bf00      	nop
 8004fb2:	e000      	b.n	8004fb6 <hagl_draw_rectangle+0x102>
        return;
 8004fb4:	bf00      	nop
}
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd90      	pop	{r4, r7, pc}
 8004fbc:	2000000c 	.word	0x2000000c

08004fc0 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	4608      	mov	r0, r1
 8004fca:	4611      	mov	r1, r2
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	80fb      	strh	r3, [r7, #6]
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	80bb      	strh	r3, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	807b      	strh	r3, [r7, #2]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8004fde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fe2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	dd0e      	ble.n	8005008 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	887b      	ldrh	r3, [r7, #2]
 8004fee:	4413      	add	r3, r2
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8004ff4:	88fa      	ldrh	r2, [r7, #6]
 8004ff6:	887b      	ldrh	r3, [r7, #2]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8004ffe:	88fa      	ldrh	r2, [r7, #6]
 8005000:	887b      	ldrh	r3, [r7, #2]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	b29b      	uxth	r3, r3
 8005006:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8005008:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800500c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005010:	429a      	cmp	r2, r3
 8005012:	dd0e      	ble.n	8005032 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8005014:	88ba      	ldrh	r2, [r7, #4]
 8005016:	883b      	ldrh	r3, [r7, #0]
 8005018:	4413      	add	r3, r2
 800501a:	b29b      	uxth	r3, r3
 800501c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800501e:	88ba      	ldrh	r2, [r7, #4]
 8005020:	883b      	ldrh	r3, [r7, #0]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	b29b      	uxth	r3, r3
 8005026:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8005028:	88ba      	ldrh	r2, [r7, #4]
 800502a:	883b      	ldrh	r3, [r7, #0]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	b29b      	uxth	r3, r3
 8005030:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8005032:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005036:	4a33      	ldr	r2, [pc, #204]	; (8005104 <hagl_fill_rectangle+0x144>)
 8005038:	8812      	ldrh	r2, [r2, #0]
 800503a:	4293      	cmp	r3, r2
 800503c:	db5b      	blt.n	80050f6 <hagl_fill_rectangle+0x136>
 800503e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005042:	4a30      	ldr	r2, [pc, #192]	; (8005104 <hagl_fill_rectangle+0x144>)
 8005044:	8852      	ldrh	r2, [r2, #2]
 8005046:	4293      	cmp	r3, r2
 8005048:	db55      	blt.n	80050f6 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800504a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800504e:	4a2d      	ldr	r2, [pc, #180]	; (8005104 <hagl_fill_rectangle+0x144>)
 8005050:	8892      	ldrh	r2, [r2, #4]
 8005052:	4293      	cmp	r3, r2
 8005054:	dc51      	bgt.n	80050fa <hagl_fill_rectangle+0x13a>
 8005056:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800505a:	4a2a      	ldr	r2, [pc, #168]	; (8005104 <hagl_fill_rectangle+0x144>)
 800505c:	88d2      	ldrh	r2, [r2, #6]
 800505e:	4293      	cmp	r3, r2
 8005060:	dc4b      	bgt.n	80050fa <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8005062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005066:	4a27      	ldr	r2, [pc, #156]	; (8005104 <hagl_fill_rectangle+0x144>)
 8005068:	8812      	ldrh	r2, [r2, #0]
 800506a:	4611      	mov	r1, r2
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fdcb 	bl	8004c08 <max>
 8005072:	4603      	mov	r3, r0
 8005074:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8005076:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800507a:	4a22      	ldr	r2, [pc, #136]	; (8005104 <hagl_fill_rectangle+0x144>)
 800507c:	8852      	ldrh	r2, [r2, #2]
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fdc1 	bl	8004c08 <max>
 8005086:	4603      	mov	r3, r0
 8005088:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800508a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800508e:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <hagl_fill_rectangle+0x144>)
 8005090:	8892      	ldrh	r2, [r2, #4]
 8005092:	4611      	mov	r1, r2
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff fda5 	bl	8004be4 <min>
 800509a:	4603      	mov	r3, r0
 800509c:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800509e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80050a2:	4a18      	ldr	r2, [pc, #96]	; (8005104 <hagl_fill_rectangle+0x144>)
 80050a4:	88d2      	ldrh	r2, [r2, #6]
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fd9b 	bl	8004be4 <min>
 80050ae:	4603      	mov	r3, r0
 80050b0:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 80050b2:	887a      	ldrh	r2, [r7, #2]
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3301      	adds	r3, #1
 80050bc:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 80050be:	883a      	ldrh	r2, [r7, #0]
 80050c0:	88bb      	ldrh	r3, [r7, #4]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3301      	adds	r3, #1
 80050c8:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 80050ca:	2300      	movs	r3, #0
 80050cc:	81fb      	strh	r3, [r7, #14]
 80050ce:	e00d      	b.n	80050ec <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 80050d0:	88ba      	ldrh	r2, [r7, #4]
 80050d2:	89fb      	ldrh	r3, [r7, #14]
 80050d4:	4413      	add	r3, r2
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	b219      	sxth	r1, r3
 80050da:	8c3b      	ldrh	r3, [r7, #32]
 80050dc:	89ba      	ldrh	r2, [r7, #12]
 80050de:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80050e2:	f7ff fdf7 	bl	8004cd4 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 80050e6:	89fb      	ldrh	r3, [r7, #14]
 80050e8:	3301      	adds	r3, #1
 80050ea:	81fb      	strh	r3, [r7, #14]
 80050ec:	89fa      	ldrh	r2, [r7, #14]
 80050ee:	897b      	ldrh	r3, [r7, #10]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d3ed      	bcc.n	80050d0 <hagl_fill_rectangle+0x110>
 80050f4:	e002      	b.n	80050fc <hagl_fill_rectangle+0x13c>
        return;
 80050f6:	bf00      	nop
 80050f8:	e000      	b.n	80050fc <hagl_fill_rectangle+0x13c>
        return;
 80050fa:	bf00      	nop
#endif
    }
}
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd90      	pop	{r4, r7, pc}
 8005102:	bf00      	nop
 8005104:	2000000c 	.word	0x2000000c

08005108 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	f107 0410 	add.w	r4, r7, #16
 8005116:	3c04      	subs	r4, #4
 8005118:	6020      	str	r0, [r4, #0]
 800511a:	460c      	mov	r4, r1
 800511c:	4610      	mov	r0, r2
 800511e:	4619      	mov	r1, r3
 8005120:	f107 0310 	add.w	r3, r7, #16
 8005124:	3b06      	subs	r3, #6
 8005126:	4622      	mov	r2, r4
 8005128:	801a      	strh	r2, [r3, #0]
 800512a:	f107 0310 	add.w	r3, r7, #16
 800512e:	3b08      	subs	r3, #8
 8005130:	4602      	mov	r2, r0
 8005132:	801a      	strh	r2, [r3, #0]
 8005134:	f107 0310 	add.w	r3, r7, #16
 8005138:	3b0a      	subs	r3, #10
 800513a:	460a      	mov	r2, r1
 800513c:	801a      	strh	r2, [r3, #0]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800513e:	f107 0310 	add.w	r3, r7, #16
 8005142:	3b04      	subs	r3, #4
 8005144:	f107 0010 	add.w	r0, r7, #16
 8005148:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	6819      	ldr	r1, [r3, #0]
 8005150:	f7ff fcb6 	bl	8004ac0 <fontx_glyph>
 8005154:	4603      	mov	r3, r0
 8005156:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800515a:	f102 0209 	add.w	r2, r2, #9
 800515e:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8005160:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005164:	f103 0309 	add.w	r3, r3, #9
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <hagl_put_char+0x6a>
        return 0;
 800516e:	2300      	movs	r3, #0
 8005170:	e0ba      	b.n	80052e8 <hagl_put_char+0x1e0>
    }

    bitmap.width = glyph.width,
 8005172:	f107 0310 	add.w	r3, r7, #16
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	b29a      	uxth	r2, r3
 800517a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800517e:	3b18      	subs	r3, #24
 8005180:	801a      	strh	r2, [r3, #0]
    bitmap.height = glyph.height,
 8005182:	f107 0310 	add.w	r3, r7, #16
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	b29a      	uxth	r2, r3
 800518a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800518e:	3b18      	subs	r3, #24
 8005190:	805a      	strh	r2, [r3, #2]
    bitmap.depth = DISPLAY_DEPTH,
 8005192:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005196:	3b18      	subs	r3, #24
 8005198:	2210      	movs	r2, #16
 800519a:	719a      	strb	r2, [r3, #6]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 800519c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80051a0:	3a08      	subs	r2, #8
 80051a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051a6:	3b18      	subs	r3, #24
 80051a8:	4611      	mov	r1, r2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff faf2 	bl	8004794 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80051b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051b4:	3b18      	subs	r3, #24
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80051bc:	f102 020c 	add.w	r2, r2, #12
 80051c0:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 80051c2:	2300      	movs	r3, #0
 80051c4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80051c8:	f102 020b 	add.w	r2, r2, #11
 80051cc:	7013      	strb	r3, [r2, #0]
 80051ce:	e06c      	b.n	80052aa <hagl_put_char+0x1a2>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80051d0:	2300      	movs	r3, #0
 80051d2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80051d6:	f102 020a 	add.w	r2, r2, #10
 80051da:	7013      	strb	r3, [r2, #0]
 80051dc:	e046      	b.n	800526c <hagl_put_char+0x164>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 80051de:	f107 0310 	add.w	r3, r7, #16
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	b25a      	sxtb	r2, r3
 80051e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80051ec:	f103 030a 	add.w	r3, r3, #10
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	2180      	movs	r1, #128	; 0x80
 80051f8:	fa41 f303 	asr.w	r3, r1, r3
 80051fc:	b25b      	sxtb	r3, r3
 80051fe:	4013      	ands	r3, r2
 8005200:	b25b      	sxtb	r3, r3
 8005202:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005206:	f102 0208 	add.w	r2, r2, #8
 800520a:	7013      	strb	r3, [r2, #0]
            if (set) {
 800520c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005210:	f103 0308 	add.w	r3, r3, #8
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d010      	beq.n	800523c <hagl_put_char+0x134>
                *(ptr++) = color;
 800521a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800521e:	f103 030c 	add.w	r3, r3, #12
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	1c93      	adds	r3, r2, #2
 8005226:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800522a:	f101 010c 	add.w	r1, r1, #12
 800522e:	600b      	str	r3, [r1, #0]
 8005230:	f107 0310 	add.w	r3, r7, #16
 8005234:	3b0a      	subs	r3, #10
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	8013      	strh	r3, [r2, #0]
 800523a:	e00c      	b.n	8005256 <hagl_put_char+0x14e>
            } else {
                *(ptr++) = 0x0000;
 800523c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005240:	f103 030c 	add.w	r3, r3, #12
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	1c9a      	adds	r2, r3, #2
 8005248:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800524c:	f101 010c 	add.w	r1, r1, #12
 8005250:	600a      	str	r2, [r1, #0]
 8005252:	2200      	movs	r2, #0
 8005254:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8005256:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800525a:	f103 030a 	add.w	r3, r3, #10
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005266:	f102 020a 	add.w	r2, r2, #10
 800526a:	7013      	strb	r3, [r2, #0]
 800526c:	f107 0310 	add.w	r3, r7, #16
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005276:	f102 020a 	add.w	r2, r2, #10
 800527a:	7812      	ldrb	r2, [r2, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d3ae      	bcc.n	80051de <hagl_put_char+0xd6>
            }
        }
        glyph.buffer += glyph.pitch;
 8005280:	f107 0310 	add.w	r3, r7, #16
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f107 0210 	add.w	r2, r7, #16
 800528a:	78d2      	ldrb	r2, [r2, #3]
 800528c:	441a      	add	r2, r3
 800528e:	f107 0310 	add.w	r3, r7, #16
 8005292:	605a      	str	r2, [r3, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8005294:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005298:	f103 030b 	add.w	r3, r3, #11
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	3301      	adds	r3, #1
 80052a0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80052a4:	f102 020b 	add.w	r2, r2, #11
 80052a8:	7013      	strb	r3, [r2, #0]
 80052aa:	f107 0310 	add.w	r3, r7, #16
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80052b4:	f102 020b 	add.w	r2, r2, #11
 80052b8:	7812      	ldrb	r2, [r2, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d388      	bcc.n	80051d0 <hagl_put_char+0xc8>
    }

    hagl_blit(x0, y0, &bitmap);
 80052be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80052c2:	3a18      	subs	r2, #24
 80052c4:	f107 0310 	add.w	r3, r7, #16
 80052c8:	3b08      	subs	r3, #8
 80052ca:	f9b3 1000 	ldrsh.w	r1, [r3]
 80052ce:	f107 0310 	add.w	r3, r7, #16
 80052d2:	3b06      	subs	r3, #6
 80052d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 f858 	bl	800538e <hagl_blit>

    return bitmap.width;
 80052de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052e2:	3b18      	subs	r3, #24
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b2db      	uxtb	r3, r3
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd90      	pop	{r4, r7, pc}

080052f4 <hagl_put_text>:
 * continue from the next line.
 */

//uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
uint16_t hagl_put_text(const char *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b08b      	sub	sp, #44	; 0x2c
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	461a      	mov	r2, r3
 8005302:	4603      	mov	r3, r0
 8005304:	817b      	strh	r3, [r7, #10]
 8005306:	460b      	mov	r3, r1
 8005308:	813b      	strh	r3, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	80fb      	strh	r3, [r7, #6]
    char temp;
    uint8_t status;
    uint16_t original = x0;
 800530e:	897b      	ldrh	r3, [r7, #10]
 8005310:	83fb      	strh	r3, [r7, #30]
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8005312:	f107 0310 	add.w	r3, r7, #16
 8005316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff fbb4 	bl	8004a86 <fontx_meta>
 800531e:	4603      	mov	r3, r0
 8005320:	777b      	strb	r3, [r7, #29]
    if (0 != status) {
 8005322:	7f7b      	ldrb	r3, [r7, #29]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <hagl_put_text+0x38>
        return 0;
 8005328:	2300      	movs	r3, #0
 800532a:	e02c      	b.n	8005386 <hagl_put_text+0x92>
    }

    do {
        temp = *str++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	60fa      	str	r2, [r7, #12]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	773b      	strb	r3, [r7, #28]
        if (13 == temp || 10 == temp) {
 8005336:	7f3b      	ldrb	r3, [r7, #28]
 8005338:	2b0d      	cmp	r3, #13
 800533a:	d002      	beq.n	8005342 <hagl_put_text+0x4e>
 800533c:	7f3b      	ldrb	r3, [r7, #28]
 800533e:	2b0a      	cmp	r3, #10
 8005340:	d108      	bne.n	8005354 <hagl_put_text+0x60>
            x0 = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8005346:	7ebb      	ldrb	r3, [r7, #26]
 8005348:	b29a      	uxth	r2, r3
 800534a:	893b      	ldrh	r3, [r7, #8]
 800534c:	4413      	add	r3, r2
 800534e:	b29b      	uxth	r3, r3
 8005350:	813b      	strh	r3, [r7, #8]
 8005352:	e010      	b.n	8005376 <hagl_put_text+0x82>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8005354:	7f38      	ldrb	r0, [r7, #28]
 8005356:	88fc      	ldrh	r4, [r7, #6]
 8005358:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800535c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4623      	mov	r3, r4
 8005366:	f7ff fecf 	bl	8005108 <hagl_put_char>
 800536a:	4603      	mov	r3, r0
 800536c:	b29a      	uxth	r2, r3
 800536e:	897b      	ldrh	r3, [r7, #10]
 8005370:	4413      	add	r3, r2
 8005372:	b29b      	uxth	r3, r3
 8005374:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1d6      	bne.n	800532c <hagl_put_text+0x38>

    return x0 - original;
 800537e:	897a      	ldrh	r2, [r7, #10]
 8005380:	8bfb      	ldrh	r3, [r7, #30]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	b29b      	uxth	r3, r3
}
 8005386:	4618      	mov	r0, r3
 8005388:	3724      	adds	r7, #36	; 0x24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd90      	pop	{r4, r7, pc}

0800538e <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800538e:	b580      	push	{r7, lr}
 8005390:	b086      	sub	sp, #24
 8005392:	af00      	add	r7, sp, #0
 8005394:	4603      	mov	r3, r0
 8005396:	603a      	str	r2, [r7, #0]
 8005398:	80fb      	strh	r3, [r7, #6]
 800539a:	460b      	mov	r3, r1
 800539c:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 80053a4:	2300      	movs	r3, #0
 80053a6:	827b      	strh	r3, [r7, #18]
 80053a8:	e020      	b.n	80053ec <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 80053aa:	2300      	movs	r3, #0
 80053ac:	823b      	strh	r3, [r7, #16]
 80053ae:	e015      	b.n	80053dc <hagl_blit+0x4e>
            color = *(ptr++);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	1c9a      	adds	r2, r3, #2
 80053b4:	617a      	str	r2, [r7, #20]
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 80053ba:	88fa      	ldrh	r2, [r7, #6]
 80053bc:	8a3b      	ldrh	r3, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	b218      	sxth	r0, r3
 80053c4:	88ba      	ldrh	r2, [r7, #4]
 80053c6:	8a7b      	ldrh	r3, [r7, #18]
 80053c8:	4413      	add	r3, r2
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	b21b      	sxth	r3, r3
 80053ce:	89fa      	ldrh	r2, [r7, #14]
 80053d0:	4619      	mov	r1, r3
 80053d2:	f7ff fc4d 	bl	8004c70 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 80053d6:	8a3b      	ldrh	r3, [r7, #16]
 80053d8:	3301      	adds	r3, #1
 80053da:	823b      	strh	r3, [r7, #16]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	8a3a      	ldrh	r2, [r7, #16]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d3e4      	bcc.n	80053b0 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 80053e6:	8a7b      	ldrh	r3, [r7, #18]
 80053e8:	3301      	adds	r3, #1
 80053ea:	827b      	strh	r3, [r7, #18]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	885b      	ldrh	r3, [r3, #2]
 80053f0:	8a7a      	ldrh	r2, [r7, #18]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d3d9      	bcc.n	80053aa <hagl_blit+0x1c>
        }
    }
#endif
};
 80053f6:	bf00      	nop
 80053f8:	bf00      	nop
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 8005406:	4b12      	ldr	r3, [pc, #72]	; (8005450 <hagl_clear_screen+0x50>)
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 800540c:	4b10      	ldr	r3, [pc, #64]	; (8005450 <hagl_clear_screen+0x50>)
 800540e:	885b      	ldrh	r3, [r3, #2]
 8005410:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 8005412:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <hagl_clear_screen+0x50>)
 8005414:	889b      	ldrh	r3, [r3, #4]
 8005416:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 8005418:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <hagl_clear_screen+0x50>)
 800541a:	88db      	ldrh	r3, [r3, #6]
 800541c:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 800541e:	239f      	movs	r3, #159	; 0x9f
 8005420:	227f      	movs	r2, #127	; 0x7f
 8005422:	2100      	movs	r1, #0
 8005424:	2000      	movs	r0, #0
 8005426:	f7ff fc01 	bl	8004c2c <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 800542a:	2300      	movs	r3, #0
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	239f      	movs	r3, #159	; 0x9f
 8005430:	227f      	movs	r2, #127	; 0x7f
 8005432:	2100      	movs	r1, #0
 8005434:	2000      	movs	r0, #0
 8005436:	f7ff fdc3 	bl	8004fc0 <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 800543a:	883b      	ldrh	r3, [r7, #0]
 800543c:	887a      	ldrh	r2, [r7, #2]
 800543e:	88b9      	ldrh	r1, [r7, #4]
 8005440:	88f8      	ldrh	r0, [r7, #6]
 8005442:	f7ff fbf3 	bl	8004c2c <hagl_set_clip_window>
#endif
}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	2000000c 	.word	0x2000000c

08005454 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	4604      	mov	r4, r0
 800545c:	4608      	mov	r0, r1
 800545e:	4611      	mov	r1, r2
 8005460:	461a      	mov	r2, r3
 8005462:	4623      	mov	r3, r4
 8005464:	80fb      	strh	r3, [r7, #6]
 8005466:	4603      	mov	r3, r0
 8005468:	80bb      	strh	r3, [r7, #4]
 800546a:	460b      	mov	r3, r1
 800546c:	807b      	strh	r3, [r7, #2]
 800546e:	4613      	mov	r3, r2
 8005470:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8005472:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005476:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800547a:	429a      	cmp	r2, r3
 800547c:	dd0e      	ble.n	800549c <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 800547e:	88fa      	ldrh	r2, [r7, #6]
 8005480:	887b      	ldrh	r3, [r7, #2]
 8005482:	4413      	add	r3, r2
 8005484:	b29b      	uxth	r3, r3
 8005486:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8005488:	88fa      	ldrh	r2, [r7, #6]
 800548a:	887b      	ldrh	r3, [r7, #2]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	b29b      	uxth	r3, r3
 8005490:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8005492:	88fa      	ldrh	r2, [r7, #6]
 8005494:	887b      	ldrh	r3, [r7, #2]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	b29b      	uxth	r3, r3
 800549a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800549c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80054a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	dd0e      	ble.n	80054c6 <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 80054a8:	88ba      	ldrh	r2, [r7, #4]
 80054aa:	883b      	ldrh	r3, [r7, #0]
 80054ac:	4413      	add	r3, r2
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80054b2:	88ba      	ldrh	r2, [r7, #4]
 80054b4:	883b      	ldrh	r3, [r7, #0]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80054bc:	88ba      	ldrh	r2, [r7, #4]
 80054be:	883b      	ldrh	r3, [r7, #0]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80054c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054ca:	4a52      	ldr	r2, [pc, #328]	; (8005614 <hagl_draw_rounded_rectangle+0x1c0>)
 80054cc:	8812      	ldrh	r2, [r2, #0]
 80054ce:	4293      	cmp	r3, r2
 80054d0:	f2c0 8153 	blt.w	800577a <hagl_draw_rounded_rectangle+0x326>
 80054d4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80054d8:	4a4e      	ldr	r2, [pc, #312]	; (8005614 <hagl_draw_rounded_rectangle+0x1c0>)
 80054da:	8852      	ldrh	r2, [r2, #2]
 80054dc:	4293      	cmp	r3, r2
 80054de:	f2c0 814c 	blt.w	800577a <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80054e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054e6:	4a4b      	ldr	r2, [pc, #300]	; (8005614 <hagl_draw_rounded_rectangle+0x1c0>)
 80054e8:	8892      	ldrh	r2, [r2, #4]
 80054ea:	4293      	cmp	r3, r2
 80054ec:	f300 8147 	bgt.w	800577e <hagl_draw_rounded_rectangle+0x32a>
 80054f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054f4:	4a47      	ldr	r2, [pc, #284]	; (8005614 <hagl_draw_rounded_rectangle+0x1c0>)
 80054f6:	88d2      	ldrh	r2, [r2, #6]
 80054f8:	4293      	cmp	r3, r2
 80054fa:	f300 8140 	bgt.w	800577e <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 80054fe:	887a      	ldrh	r2, [r7, #2]
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	b29b      	uxth	r3, r3
 8005506:	3301      	adds	r3, #1
 8005508:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 800550a:	883a      	ldrh	r2, [r7, #0]
 800550c:	88bb      	ldrh	r3, [r7, #4]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	b29b      	uxth	r3, r3
 8005512:	3301      	adds	r3, #1
 8005514:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 8005516:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800551a:	8a3b      	ldrh	r3, [r7, #16]
 800551c:	085b      	lsrs	r3, r3, #1
 800551e:	b29b      	uxth	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	89fb      	ldrh	r3, [r7, #14]
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	b29b      	uxth	r3, r3
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f7ff fb5a 	bl	8004be4 <min>
 8005530:	4603      	mov	r3, r0
 8005532:	4619      	mov	r1, r3
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff fb55 	bl	8004be4 <min>
 800553a:	4603      	mov	r3, r0
 800553c:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005542:	4413      	add	r3, r2
 8005544:	b29b      	uxth	r3, r3
 8005546:	b218      	sxth	r0, r3
 8005548:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	b29b      	uxth	r3, r3
 800554e:	8a3a      	ldrh	r2, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	b29a      	uxth	r2, r3
 8005554:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005556:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800555a:	f7ff fbbb 	bl	8004cd4 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 800555e:	88fa      	ldrh	r2, [r7, #6]
 8005560:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005562:	4413      	add	r3, r2
 8005564:	b29b      	uxth	r3, r3
 8005566:	b218      	sxth	r0, r3
 8005568:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	b29b      	uxth	r3, r3
 800556e:	8a3a      	ldrh	r2, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	b29a      	uxth	r2, r3
 8005574:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005576:	f9b7 1000 	ldrsh.w	r1, [r7]
 800557a:	f7ff fbab 	bl	8004cd4 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 800557e:	88ba      	ldrh	r2, [r7, #4]
 8005580:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005582:	4413      	add	r3, r2
 8005584:	b29b      	uxth	r3, r3
 8005586:	b219      	sxth	r1, r3
 8005588:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	b29b      	uxth	r3, r3
 800558e:	89fa      	ldrh	r2, [r7, #14]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	b29a      	uxth	r2, r3
 8005594:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005596:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800559a:	f7ff fbbe 	bl	8004d1a <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 800559e:	88ba      	ldrh	r2, [r7, #4]
 80055a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055a2:	4413      	add	r3, r2
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	b219      	sxth	r1, r3
 80055a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	89fa      	ldrh	r2, [r7, #14]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80055b6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80055ba:	f7ff fbae 	bl	8004d1a <hagl_draw_vline>

    x = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	82fb      	strh	r3, [r7, #22]
    y = r;
 80055c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055c4:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 80055c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f1c3 0303 	rsb	r3, r3, #3
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 80055d4:	e0c9      	b.n	800576a <hagl_draw_rounded_rectangle+0x316>
        x++;
 80055d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3301      	adds	r3, #1
 80055de:	b29b      	uxth	r3, r3
 80055e0:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 80055e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	dd16      	ble.n	8005618 <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 80055ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 80055f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80055fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	b29b      	uxth	r3, r3
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	b29a      	uxth	r2, r3
 8005606:	8a7b      	ldrh	r3, [r7, #18]
 8005608:	4413      	add	r3, r2
 800560a:	b29b      	uxth	r3, r3
 800560c:	330a      	adds	r3, #10
 800560e:	b29b      	uxth	r3, r3
 8005610:	827b      	strh	r3, [r7, #18]
 8005612:	e00a      	b.n	800562a <hagl_draw_rounded_rectangle+0x1d6>
 8005614:	2000000c 	.word	0x2000000c
        } else {
            d = d + 4 * x + 6;
 8005618:	8afb      	ldrh	r3, [r7, #22]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	b29a      	uxth	r2, r3
 800561e:	8a7b      	ldrh	r3, [r7, #18]
 8005620:	4413      	add	r3, r2
 8005622:	b29b      	uxth	r3, r3
 8005624:	3306      	adds	r3, #6
 8005626:	b29b      	uxth	r3, r3
 8005628:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 800562a:	887a      	ldrh	r2, [r7, #2]
 800562c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	b29a      	uxth	r2, r3
 8005632:	8afb      	ldrh	r3, [r7, #22]
 8005634:	4413      	add	r3, r2
 8005636:	b29b      	uxth	r3, r3
 8005638:	b218      	sxth	r0, r3
 800563a:	88ba      	ldrh	r2, [r7, #4]
 800563c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800563e:	4413      	add	r3, r2
 8005640:	b29a      	uxth	r2, r3
 8005642:	8abb      	ldrh	r3, [r7, #20]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	b29b      	uxth	r3, r3
 8005648:	b21b      	sxth	r3, r3
 800564a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800564c:	4619      	mov	r1, r3
 800564e:	f7ff fb0f 	bl	8004c70 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 8005652:	887a      	ldrh	r2, [r7, #2]
 8005654:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	b29a      	uxth	r2, r3
 800565a:	8abb      	ldrh	r3, [r7, #20]
 800565c:	4413      	add	r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	b218      	sxth	r0, r3
 8005662:	88ba      	ldrh	r2, [r7, #4]
 8005664:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005666:	4413      	add	r3, r2
 8005668:	b29a      	uxth	r2, r3
 800566a:	8afb      	ldrh	r3, [r7, #22]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	b29b      	uxth	r3, r3
 8005670:	b21b      	sxth	r3, r3
 8005672:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005674:	4619      	mov	r1, r3
 8005676:	f7ff fafb 	bl	8004c70 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 800567a:	88fa      	ldrh	r2, [r7, #6]
 800567c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800567e:	4413      	add	r3, r2
 8005680:	b29a      	uxth	r2, r3
 8005682:	8afb      	ldrh	r3, [r7, #22]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	b29b      	uxth	r3, r3
 8005688:	b218      	sxth	r0, r3
 800568a:	88ba      	ldrh	r2, [r7, #4]
 800568c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800568e:	4413      	add	r3, r2
 8005690:	b29a      	uxth	r2, r3
 8005692:	8abb      	ldrh	r3, [r7, #20]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	b29b      	uxth	r3, r3
 8005698:	b21b      	sxth	r3, r3
 800569a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800569c:	4619      	mov	r1, r3
 800569e:	f7ff fae7 	bl	8004c70 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 80056a2:	88fa      	ldrh	r2, [r7, #6]
 80056a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056a6:	4413      	add	r3, r2
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	8abb      	ldrh	r3, [r7, #20]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	b218      	sxth	r0, r3
 80056b2:	88ba      	ldrh	r2, [r7, #4]
 80056b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056b6:	4413      	add	r3, r2
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	8afb      	ldrh	r3, [r7, #22]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	b29b      	uxth	r3, r3
 80056c0:	b21b      	sxth	r3, r3
 80056c2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80056c4:	4619      	mov	r1, r3
 80056c6:	f7ff fad3 	bl	8004c70 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 80056ca:	887a      	ldrh	r2, [r7, #2]
 80056cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	8afb      	ldrh	r3, [r7, #22]
 80056d4:	4413      	add	r3, r2
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	b218      	sxth	r0, r3
 80056da:	883a      	ldrh	r2, [r7, #0]
 80056dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	8abb      	ldrh	r3, [r7, #20]
 80056e4:	4413      	add	r3, r2
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	b21b      	sxth	r3, r3
 80056ea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80056ec:	4619      	mov	r1, r3
 80056ee:	f7ff fabf 	bl	8004c70 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 80056f2:	887a      	ldrh	r2, [r7, #2]
 80056f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	8abb      	ldrh	r3, [r7, #20]
 80056fc:	4413      	add	r3, r2
 80056fe:	b29b      	uxth	r3, r3
 8005700:	b218      	sxth	r0, r3
 8005702:	883a      	ldrh	r2, [r7, #0]
 8005704:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	b29a      	uxth	r2, r3
 800570a:	8afb      	ldrh	r3, [r7, #22]
 800570c:	4413      	add	r3, r2
 800570e:	b29b      	uxth	r3, r3
 8005710:	b21b      	sxth	r3, r3
 8005712:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005714:	4619      	mov	r1, r3
 8005716:	f7ff faab 	bl	8004c70 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800571e:	4413      	add	r3, r2
 8005720:	b29a      	uxth	r2, r3
 8005722:	8afb      	ldrh	r3, [r7, #22]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	b29b      	uxth	r3, r3
 8005728:	b218      	sxth	r0, r3
 800572a:	883a      	ldrh	r2, [r7, #0]
 800572c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	b29a      	uxth	r2, r3
 8005732:	8abb      	ldrh	r3, [r7, #20]
 8005734:	4413      	add	r3, r2
 8005736:	b29b      	uxth	r3, r3
 8005738:	b21b      	sxth	r3, r3
 800573a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800573c:	4619      	mov	r1, r3
 800573e:	f7ff fa97 	bl	8004c70 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005746:	4413      	add	r3, r2
 8005748:	b29a      	uxth	r2, r3
 800574a:	8abb      	ldrh	r3, [r7, #20]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	b29b      	uxth	r3, r3
 8005750:	b218      	sxth	r0, r3
 8005752:	883a      	ldrh	r2, [r7, #0]
 8005754:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	b29a      	uxth	r2, r3
 800575a:	8afb      	ldrh	r3, [r7, #22]
 800575c:	4413      	add	r3, r2
 800575e:	b29b      	uxth	r3, r3
 8005760:	b21b      	sxth	r3, r3
 8005762:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005764:	4619      	mov	r1, r3
 8005766:	f7ff fa83 	bl	8004c70 <hagl_put_pixel>
    while (y >= x) {
 800576a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800576e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005772:	429a      	cmp	r2, r3
 8005774:	f6bf af2f 	bge.w	80055d6 <hagl_draw_rounded_rectangle+0x182>
 8005778:	e002      	b.n	8005780 <hagl_draw_rounded_rectangle+0x32c>
        return;
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <hagl_draw_rounded_rectangle+0x32c>
        return;
 800577e:	bf00      	nop
    }
};
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	bd90      	pop	{r4, r7, pc}
 8005786:	bf00      	nop

08005788 <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	71fb      	strb	r3, [r7, #7]
 8005792:	460b      	mov	r3, r1
 8005794:	71bb      	strb	r3, [r7, #6]
 8005796:	4613      	mov	r3, r2
 8005798:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	b21b      	sxth	r3, r3
 80057a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057a4:	f023 0307 	bic.w	r3, r3, #7
 80057a8:	b21a      	sxth	r2, r3
 80057aa:	79bb      	ldrb	r3, [r7, #6]
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	b21b      	sxth	r3, r3
 80057b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80057b4:	b21b      	sxth	r3, r3
 80057b6:	4313      	orrs	r3, r2
 80057b8:	b21a      	sxth	r2, r3
 80057ba:	797b      	ldrb	r3, [r7, #5]
 80057bc:	08db      	lsrs	r3, r3, #3
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	b21b      	sxth	r3, r3
 80057c2:	4313      	orrs	r3, r2
 80057c4:	b21b      	sxth	r3, r3
 80057c6:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 80057c8:	89fb      	ldrh	r3, [r7, #14]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	b21a      	sxth	r2, r3
 80057ce:	89fb      	ldrh	r3, [r7, #14]
 80057d0:	0a1b      	lsrs	r3, r3, #8
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	b21b      	sxth	r3, r3
 80057d6:	4313      	orrs	r3, r2
 80057d8:	b21b      	sxth	r3, r3
 80057da:	81fb      	strh	r3, [r7, #14]

    return rgb;
 80057dc:	89fb      	ldrh	r3, [r7, #14]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <__errno>:
 80057ec:	4b01      	ldr	r3, [pc, #4]	; (80057f4 <__errno+0x8>)
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000014 	.word	0x20000014

080057f8 <__libc_init_array>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4d0d      	ldr	r5, [pc, #52]	; (8005830 <__libc_init_array+0x38>)
 80057fc:	4c0d      	ldr	r4, [pc, #52]	; (8005834 <__libc_init_array+0x3c>)
 80057fe:	1b64      	subs	r4, r4, r5
 8005800:	10a4      	asrs	r4, r4, #2
 8005802:	2600      	movs	r6, #0
 8005804:	42a6      	cmp	r6, r4
 8005806:	d109      	bne.n	800581c <__libc_init_array+0x24>
 8005808:	4d0b      	ldr	r5, [pc, #44]	; (8005838 <__libc_init_array+0x40>)
 800580a:	4c0c      	ldr	r4, [pc, #48]	; (800583c <__libc_init_array+0x44>)
 800580c:	f000 fc62 	bl	80060d4 <_init>
 8005810:	1b64      	subs	r4, r4, r5
 8005812:	10a4      	asrs	r4, r4, #2
 8005814:	2600      	movs	r6, #0
 8005816:	42a6      	cmp	r6, r4
 8005818:	d105      	bne.n	8005826 <__libc_init_array+0x2e>
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005820:	4798      	blx	r3
 8005822:	3601      	adds	r6, #1
 8005824:	e7ee      	b.n	8005804 <__libc_init_array+0xc>
 8005826:	f855 3b04 	ldr.w	r3, [r5], #4
 800582a:	4798      	blx	r3
 800582c:	3601      	adds	r6, #1
 800582e:	e7f2      	b.n	8005816 <__libc_init_array+0x1e>
 8005830:	0800c76c 	.word	0x0800c76c
 8005834:	0800c76c 	.word	0x0800c76c
 8005838:	0800c76c 	.word	0x0800c76c
 800583c:	0800c770 	.word	0x0800c770

08005840 <__retarget_lock_acquire_recursive>:
 8005840:	4770      	bx	lr

08005842 <__retarget_lock_release_recursive>:
 8005842:	4770      	bx	lr

08005844 <memcpy>:
 8005844:	440a      	add	r2, r1
 8005846:	4291      	cmp	r1, r2
 8005848:	f100 33ff 	add.w	r3, r0, #4294967295
 800584c:	d100      	bne.n	8005850 <memcpy+0xc>
 800584e:	4770      	bx	lr
 8005850:	b510      	push	{r4, lr}
 8005852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800585a:	4291      	cmp	r1, r2
 800585c:	d1f9      	bne.n	8005852 <memcpy+0xe>
 800585e:	bd10      	pop	{r4, pc}

08005860 <memset>:
 8005860:	4402      	add	r2, r0
 8005862:	4603      	mov	r3, r0
 8005864:	4293      	cmp	r3, r2
 8005866:	d100      	bne.n	800586a <memset+0xa>
 8005868:	4770      	bx	lr
 800586a:	f803 1b01 	strb.w	r1, [r3], #1
 800586e:	e7f9      	b.n	8005864 <memset+0x4>

08005870 <_free_r>:
 8005870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005872:	2900      	cmp	r1, #0
 8005874:	d048      	beq.n	8005908 <_free_r+0x98>
 8005876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800587a:	9001      	str	r0, [sp, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f1a1 0404 	sub.w	r4, r1, #4
 8005882:	bfb8      	it	lt
 8005884:	18e4      	addlt	r4, r4, r3
 8005886:	f000 f8e1 	bl	8005a4c <__malloc_lock>
 800588a:	4a20      	ldr	r2, [pc, #128]	; (800590c <_free_r+0x9c>)
 800588c:	9801      	ldr	r0, [sp, #4]
 800588e:	6813      	ldr	r3, [r2, #0]
 8005890:	4615      	mov	r5, r2
 8005892:	b933      	cbnz	r3, 80058a2 <_free_r+0x32>
 8005894:	6063      	str	r3, [r4, #4]
 8005896:	6014      	str	r4, [r2, #0]
 8005898:	b003      	add	sp, #12
 800589a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800589e:	f000 b8db 	b.w	8005a58 <__malloc_unlock>
 80058a2:	42a3      	cmp	r3, r4
 80058a4:	d90b      	bls.n	80058be <_free_r+0x4e>
 80058a6:	6821      	ldr	r1, [r4, #0]
 80058a8:	1862      	adds	r2, r4, r1
 80058aa:	4293      	cmp	r3, r2
 80058ac:	bf04      	itt	eq
 80058ae:	681a      	ldreq	r2, [r3, #0]
 80058b0:	685b      	ldreq	r3, [r3, #4]
 80058b2:	6063      	str	r3, [r4, #4]
 80058b4:	bf04      	itt	eq
 80058b6:	1852      	addeq	r2, r2, r1
 80058b8:	6022      	streq	r2, [r4, #0]
 80058ba:	602c      	str	r4, [r5, #0]
 80058bc:	e7ec      	b.n	8005898 <_free_r+0x28>
 80058be:	461a      	mov	r2, r3
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	b10b      	cbz	r3, 80058c8 <_free_r+0x58>
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	d9fa      	bls.n	80058be <_free_r+0x4e>
 80058c8:	6811      	ldr	r1, [r2, #0]
 80058ca:	1855      	adds	r5, r2, r1
 80058cc:	42a5      	cmp	r5, r4
 80058ce:	d10b      	bne.n	80058e8 <_free_r+0x78>
 80058d0:	6824      	ldr	r4, [r4, #0]
 80058d2:	4421      	add	r1, r4
 80058d4:	1854      	adds	r4, r2, r1
 80058d6:	42a3      	cmp	r3, r4
 80058d8:	6011      	str	r1, [r2, #0]
 80058da:	d1dd      	bne.n	8005898 <_free_r+0x28>
 80058dc:	681c      	ldr	r4, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	6053      	str	r3, [r2, #4]
 80058e2:	4421      	add	r1, r4
 80058e4:	6011      	str	r1, [r2, #0]
 80058e6:	e7d7      	b.n	8005898 <_free_r+0x28>
 80058e8:	d902      	bls.n	80058f0 <_free_r+0x80>
 80058ea:	230c      	movs	r3, #12
 80058ec:	6003      	str	r3, [r0, #0]
 80058ee:	e7d3      	b.n	8005898 <_free_r+0x28>
 80058f0:	6825      	ldr	r5, [r4, #0]
 80058f2:	1961      	adds	r1, r4, r5
 80058f4:	428b      	cmp	r3, r1
 80058f6:	bf04      	itt	eq
 80058f8:	6819      	ldreq	r1, [r3, #0]
 80058fa:	685b      	ldreq	r3, [r3, #4]
 80058fc:	6063      	str	r3, [r4, #4]
 80058fe:	bf04      	itt	eq
 8005900:	1949      	addeq	r1, r1, r5
 8005902:	6021      	streq	r1, [r4, #0]
 8005904:	6054      	str	r4, [r2, #4]
 8005906:	e7c7      	b.n	8005898 <_free_r+0x28>
 8005908:	b003      	add	sp, #12
 800590a:	bd30      	pop	{r4, r5, pc}
 800590c:	2000a0a0 	.word	0x2000a0a0

08005910 <_malloc_r>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	1ccd      	adds	r5, r1, #3
 8005914:	f025 0503 	bic.w	r5, r5, #3
 8005918:	3508      	adds	r5, #8
 800591a:	2d0c      	cmp	r5, #12
 800591c:	bf38      	it	cc
 800591e:	250c      	movcc	r5, #12
 8005920:	2d00      	cmp	r5, #0
 8005922:	4606      	mov	r6, r0
 8005924:	db01      	blt.n	800592a <_malloc_r+0x1a>
 8005926:	42a9      	cmp	r1, r5
 8005928:	d903      	bls.n	8005932 <_malloc_r+0x22>
 800592a:	230c      	movs	r3, #12
 800592c:	6033      	str	r3, [r6, #0]
 800592e:	2000      	movs	r0, #0
 8005930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005932:	f000 f88b 	bl	8005a4c <__malloc_lock>
 8005936:	4921      	ldr	r1, [pc, #132]	; (80059bc <_malloc_r+0xac>)
 8005938:	680a      	ldr	r2, [r1, #0]
 800593a:	4614      	mov	r4, r2
 800593c:	b99c      	cbnz	r4, 8005966 <_malloc_r+0x56>
 800593e:	4f20      	ldr	r7, [pc, #128]	; (80059c0 <_malloc_r+0xb0>)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	b923      	cbnz	r3, 800594e <_malloc_r+0x3e>
 8005944:	4621      	mov	r1, r4
 8005946:	4630      	mov	r0, r6
 8005948:	f000 f83c 	bl	80059c4 <_sbrk_r>
 800594c:	6038      	str	r0, [r7, #0]
 800594e:	4629      	mov	r1, r5
 8005950:	4630      	mov	r0, r6
 8005952:	f000 f837 	bl	80059c4 <_sbrk_r>
 8005956:	1c43      	adds	r3, r0, #1
 8005958:	d123      	bne.n	80059a2 <_malloc_r+0x92>
 800595a:	230c      	movs	r3, #12
 800595c:	6033      	str	r3, [r6, #0]
 800595e:	4630      	mov	r0, r6
 8005960:	f000 f87a 	bl	8005a58 <__malloc_unlock>
 8005964:	e7e3      	b.n	800592e <_malloc_r+0x1e>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	1b5b      	subs	r3, r3, r5
 800596a:	d417      	bmi.n	800599c <_malloc_r+0x8c>
 800596c:	2b0b      	cmp	r3, #11
 800596e:	d903      	bls.n	8005978 <_malloc_r+0x68>
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	441c      	add	r4, r3
 8005974:	6025      	str	r5, [r4, #0]
 8005976:	e004      	b.n	8005982 <_malloc_r+0x72>
 8005978:	6863      	ldr	r3, [r4, #4]
 800597a:	42a2      	cmp	r2, r4
 800597c:	bf0c      	ite	eq
 800597e:	600b      	streq	r3, [r1, #0]
 8005980:	6053      	strne	r3, [r2, #4]
 8005982:	4630      	mov	r0, r6
 8005984:	f000 f868 	bl	8005a58 <__malloc_unlock>
 8005988:	f104 000b 	add.w	r0, r4, #11
 800598c:	1d23      	adds	r3, r4, #4
 800598e:	f020 0007 	bic.w	r0, r0, #7
 8005992:	1ac2      	subs	r2, r0, r3
 8005994:	d0cc      	beq.n	8005930 <_malloc_r+0x20>
 8005996:	1a1b      	subs	r3, r3, r0
 8005998:	50a3      	str	r3, [r4, r2]
 800599a:	e7c9      	b.n	8005930 <_malloc_r+0x20>
 800599c:	4622      	mov	r2, r4
 800599e:	6864      	ldr	r4, [r4, #4]
 80059a0:	e7cc      	b.n	800593c <_malloc_r+0x2c>
 80059a2:	1cc4      	adds	r4, r0, #3
 80059a4:	f024 0403 	bic.w	r4, r4, #3
 80059a8:	42a0      	cmp	r0, r4
 80059aa:	d0e3      	beq.n	8005974 <_malloc_r+0x64>
 80059ac:	1a21      	subs	r1, r4, r0
 80059ae:	4630      	mov	r0, r6
 80059b0:	f000 f808 	bl	80059c4 <_sbrk_r>
 80059b4:	3001      	adds	r0, #1
 80059b6:	d1dd      	bne.n	8005974 <_malloc_r+0x64>
 80059b8:	e7cf      	b.n	800595a <_malloc_r+0x4a>
 80059ba:	bf00      	nop
 80059bc:	2000a0a0 	.word	0x2000a0a0
 80059c0:	2000a0a4 	.word	0x2000a0a4

080059c4 <_sbrk_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4d06      	ldr	r5, [pc, #24]	; (80059e0 <_sbrk_r+0x1c>)
 80059c8:	2300      	movs	r3, #0
 80059ca:	4604      	mov	r4, r0
 80059cc:	4608      	mov	r0, r1
 80059ce:	602b      	str	r3, [r5, #0]
 80059d0:	f7fb fe4a 	bl	8001668 <_sbrk>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d102      	bne.n	80059de <_sbrk_r+0x1a>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	b103      	cbz	r3, 80059de <_sbrk_r+0x1a>
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	2000a370 	.word	0x2000a370

080059e4 <sniprintf>:
 80059e4:	b40c      	push	{r2, r3}
 80059e6:	b530      	push	{r4, r5, lr}
 80059e8:	4b17      	ldr	r3, [pc, #92]	; (8005a48 <sniprintf+0x64>)
 80059ea:	1e0c      	subs	r4, r1, #0
 80059ec:	681d      	ldr	r5, [r3, #0]
 80059ee:	b09d      	sub	sp, #116	; 0x74
 80059f0:	da08      	bge.n	8005a04 <sniprintf+0x20>
 80059f2:	238b      	movs	r3, #139	; 0x8b
 80059f4:	602b      	str	r3, [r5, #0]
 80059f6:	f04f 30ff 	mov.w	r0, #4294967295
 80059fa:	b01d      	add	sp, #116	; 0x74
 80059fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a00:	b002      	add	sp, #8
 8005a02:	4770      	bx	lr
 8005a04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a0c:	bf14      	ite	ne
 8005a0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a12:	4623      	moveq	r3, r4
 8005a14:	9304      	str	r3, [sp, #16]
 8005a16:	9307      	str	r3, [sp, #28]
 8005a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a1c:	9002      	str	r0, [sp, #8]
 8005a1e:	9006      	str	r0, [sp, #24]
 8005a20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a26:	ab21      	add	r3, sp, #132	; 0x84
 8005a28:	a902      	add	r1, sp, #8
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	9301      	str	r3, [sp, #4]
 8005a2e:	f000 f875 	bl	8005b1c <_svfiprintf_r>
 8005a32:	1c43      	adds	r3, r0, #1
 8005a34:	bfbc      	itt	lt
 8005a36:	238b      	movlt	r3, #139	; 0x8b
 8005a38:	602b      	strlt	r3, [r5, #0]
 8005a3a:	2c00      	cmp	r4, #0
 8005a3c:	d0dd      	beq.n	80059fa <sniprintf+0x16>
 8005a3e:	9b02      	ldr	r3, [sp, #8]
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	e7d9      	b.n	80059fa <sniprintf+0x16>
 8005a46:	bf00      	nop
 8005a48:	20000014 	.word	0x20000014

08005a4c <__malloc_lock>:
 8005a4c:	4801      	ldr	r0, [pc, #4]	; (8005a54 <__malloc_lock+0x8>)
 8005a4e:	f7ff bef7 	b.w	8005840 <__retarget_lock_acquire_recursive>
 8005a52:	bf00      	nop
 8005a54:	2000a368 	.word	0x2000a368

08005a58 <__malloc_unlock>:
 8005a58:	4801      	ldr	r0, [pc, #4]	; (8005a60 <__malloc_unlock+0x8>)
 8005a5a:	f7ff bef2 	b.w	8005842 <__retarget_lock_release_recursive>
 8005a5e:	bf00      	nop
 8005a60:	2000a368 	.word	0x2000a368

08005a64 <__ssputs_r>:
 8005a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	688e      	ldr	r6, [r1, #8]
 8005a6a:	429e      	cmp	r6, r3
 8005a6c:	4682      	mov	sl, r0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	4690      	mov	r8, r2
 8005a72:	461f      	mov	r7, r3
 8005a74:	d838      	bhi.n	8005ae8 <__ssputs_r+0x84>
 8005a76:	898a      	ldrh	r2, [r1, #12]
 8005a78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a7c:	d032      	beq.n	8005ae4 <__ssputs_r+0x80>
 8005a7e:	6825      	ldr	r5, [r4, #0]
 8005a80:	6909      	ldr	r1, [r1, #16]
 8005a82:	eba5 0901 	sub.w	r9, r5, r1
 8005a86:	6965      	ldr	r5, [r4, #20]
 8005a88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a90:	3301      	adds	r3, #1
 8005a92:	444b      	add	r3, r9
 8005a94:	106d      	asrs	r5, r5, #1
 8005a96:	429d      	cmp	r5, r3
 8005a98:	bf38      	it	cc
 8005a9a:	461d      	movcc	r5, r3
 8005a9c:	0553      	lsls	r3, r2, #21
 8005a9e:	d531      	bpl.n	8005b04 <__ssputs_r+0xa0>
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	f7ff ff35 	bl	8005910 <_malloc_r>
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	b950      	cbnz	r0, 8005ac0 <__ssputs_r+0x5c>
 8005aaa:	230c      	movs	r3, #12
 8005aac:	f8ca 3000 	str.w	r3, [sl]
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab6:	81a3      	strh	r3, [r4, #12]
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8005abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac0:	6921      	ldr	r1, [r4, #16]
 8005ac2:	464a      	mov	r2, r9
 8005ac4:	f7ff febe 	bl	8005844 <memcpy>
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad2:	81a3      	strh	r3, [r4, #12]
 8005ad4:	6126      	str	r6, [r4, #16]
 8005ad6:	6165      	str	r5, [r4, #20]
 8005ad8:	444e      	add	r6, r9
 8005ada:	eba5 0509 	sub.w	r5, r5, r9
 8005ade:	6026      	str	r6, [r4, #0]
 8005ae0:	60a5      	str	r5, [r4, #8]
 8005ae2:	463e      	mov	r6, r7
 8005ae4:	42be      	cmp	r6, r7
 8005ae6:	d900      	bls.n	8005aea <__ssputs_r+0x86>
 8005ae8:	463e      	mov	r6, r7
 8005aea:	4632      	mov	r2, r6
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	4641      	mov	r1, r8
 8005af0:	f000 faa8 	bl	8006044 <memmove>
 8005af4:	68a3      	ldr	r3, [r4, #8]
 8005af6:	6822      	ldr	r2, [r4, #0]
 8005af8:	1b9b      	subs	r3, r3, r6
 8005afa:	4432      	add	r2, r6
 8005afc:	60a3      	str	r3, [r4, #8]
 8005afe:	6022      	str	r2, [r4, #0]
 8005b00:	2000      	movs	r0, #0
 8005b02:	e7db      	b.n	8005abc <__ssputs_r+0x58>
 8005b04:	462a      	mov	r2, r5
 8005b06:	f000 fab7 	bl	8006078 <_realloc_r>
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d1e1      	bne.n	8005ad4 <__ssputs_r+0x70>
 8005b10:	6921      	ldr	r1, [r4, #16]
 8005b12:	4650      	mov	r0, sl
 8005b14:	f7ff feac 	bl	8005870 <_free_r>
 8005b18:	e7c7      	b.n	8005aaa <__ssputs_r+0x46>
	...

08005b1c <_svfiprintf_r>:
 8005b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b20:	4698      	mov	r8, r3
 8005b22:	898b      	ldrh	r3, [r1, #12]
 8005b24:	061b      	lsls	r3, r3, #24
 8005b26:	b09d      	sub	sp, #116	; 0x74
 8005b28:	4607      	mov	r7, r0
 8005b2a:	460d      	mov	r5, r1
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	d50e      	bpl.n	8005b4e <_svfiprintf_r+0x32>
 8005b30:	690b      	ldr	r3, [r1, #16]
 8005b32:	b963      	cbnz	r3, 8005b4e <_svfiprintf_r+0x32>
 8005b34:	2140      	movs	r1, #64	; 0x40
 8005b36:	f7ff feeb 	bl	8005910 <_malloc_r>
 8005b3a:	6028      	str	r0, [r5, #0]
 8005b3c:	6128      	str	r0, [r5, #16]
 8005b3e:	b920      	cbnz	r0, 8005b4a <_svfiprintf_r+0x2e>
 8005b40:	230c      	movs	r3, #12
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	f04f 30ff 	mov.w	r0, #4294967295
 8005b48:	e0d1      	b.n	8005cee <_svfiprintf_r+0x1d2>
 8005b4a:	2340      	movs	r3, #64	; 0x40
 8005b4c:	616b      	str	r3, [r5, #20]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9309      	str	r3, [sp, #36]	; 0x24
 8005b52:	2320      	movs	r3, #32
 8005b54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b58:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b5c:	2330      	movs	r3, #48	; 0x30
 8005b5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d08 <_svfiprintf_r+0x1ec>
 8005b62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b66:	f04f 0901 	mov.w	r9, #1
 8005b6a:	4623      	mov	r3, r4
 8005b6c:	469a      	mov	sl, r3
 8005b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b72:	b10a      	cbz	r2, 8005b78 <_svfiprintf_r+0x5c>
 8005b74:	2a25      	cmp	r2, #37	; 0x25
 8005b76:	d1f9      	bne.n	8005b6c <_svfiprintf_r+0x50>
 8005b78:	ebba 0b04 	subs.w	fp, sl, r4
 8005b7c:	d00b      	beq.n	8005b96 <_svfiprintf_r+0x7a>
 8005b7e:	465b      	mov	r3, fp
 8005b80:	4622      	mov	r2, r4
 8005b82:	4629      	mov	r1, r5
 8005b84:	4638      	mov	r0, r7
 8005b86:	f7ff ff6d 	bl	8005a64 <__ssputs_r>
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f000 80aa 	beq.w	8005ce4 <_svfiprintf_r+0x1c8>
 8005b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b92:	445a      	add	r2, fp
 8005b94:	9209      	str	r2, [sp, #36]	; 0x24
 8005b96:	f89a 3000 	ldrb.w	r3, [sl]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80a2 	beq.w	8005ce4 <_svfiprintf_r+0x1c8>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005baa:	f10a 0a01 	add.w	sl, sl, #1
 8005bae:	9304      	str	r3, [sp, #16]
 8005bb0:	9307      	str	r3, [sp, #28]
 8005bb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bb6:	931a      	str	r3, [sp, #104]	; 0x68
 8005bb8:	4654      	mov	r4, sl
 8005bba:	2205      	movs	r2, #5
 8005bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc0:	4851      	ldr	r0, [pc, #324]	; (8005d08 <_svfiprintf_r+0x1ec>)
 8005bc2:	f7fa fb0d 	bl	80001e0 <memchr>
 8005bc6:	9a04      	ldr	r2, [sp, #16]
 8005bc8:	b9d8      	cbnz	r0, 8005c02 <_svfiprintf_r+0xe6>
 8005bca:	06d0      	lsls	r0, r2, #27
 8005bcc:	bf44      	itt	mi
 8005bce:	2320      	movmi	r3, #32
 8005bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bd4:	0711      	lsls	r1, r2, #28
 8005bd6:	bf44      	itt	mi
 8005bd8:	232b      	movmi	r3, #43	; 0x2b
 8005bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bde:	f89a 3000 	ldrb.w	r3, [sl]
 8005be2:	2b2a      	cmp	r3, #42	; 0x2a
 8005be4:	d015      	beq.n	8005c12 <_svfiprintf_r+0xf6>
 8005be6:	9a07      	ldr	r2, [sp, #28]
 8005be8:	4654      	mov	r4, sl
 8005bea:	2000      	movs	r0, #0
 8005bec:	f04f 0c0a 	mov.w	ip, #10
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bf6:	3b30      	subs	r3, #48	; 0x30
 8005bf8:	2b09      	cmp	r3, #9
 8005bfa:	d94e      	bls.n	8005c9a <_svfiprintf_r+0x17e>
 8005bfc:	b1b0      	cbz	r0, 8005c2c <_svfiprintf_r+0x110>
 8005bfe:	9207      	str	r2, [sp, #28]
 8005c00:	e014      	b.n	8005c2c <_svfiprintf_r+0x110>
 8005c02:	eba0 0308 	sub.w	r3, r0, r8
 8005c06:	fa09 f303 	lsl.w	r3, r9, r3
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	9304      	str	r3, [sp, #16]
 8005c0e:	46a2      	mov	sl, r4
 8005c10:	e7d2      	b.n	8005bb8 <_svfiprintf_r+0x9c>
 8005c12:	9b03      	ldr	r3, [sp, #12]
 8005c14:	1d19      	adds	r1, r3, #4
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	9103      	str	r1, [sp, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bfbb      	ittet	lt
 8005c1e:	425b      	neglt	r3, r3
 8005c20:	f042 0202 	orrlt.w	r2, r2, #2
 8005c24:	9307      	strge	r3, [sp, #28]
 8005c26:	9307      	strlt	r3, [sp, #28]
 8005c28:	bfb8      	it	lt
 8005c2a:	9204      	strlt	r2, [sp, #16]
 8005c2c:	7823      	ldrb	r3, [r4, #0]
 8005c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c30:	d10c      	bne.n	8005c4c <_svfiprintf_r+0x130>
 8005c32:	7863      	ldrb	r3, [r4, #1]
 8005c34:	2b2a      	cmp	r3, #42	; 0x2a
 8005c36:	d135      	bne.n	8005ca4 <_svfiprintf_r+0x188>
 8005c38:	9b03      	ldr	r3, [sp, #12]
 8005c3a:	1d1a      	adds	r2, r3, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	9203      	str	r2, [sp, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	bfb8      	it	lt
 8005c44:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c48:	3402      	adds	r4, #2
 8005c4a:	9305      	str	r3, [sp, #20]
 8005c4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d18 <_svfiprintf_r+0x1fc>
 8005c50:	7821      	ldrb	r1, [r4, #0]
 8005c52:	2203      	movs	r2, #3
 8005c54:	4650      	mov	r0, sl
 8005c56:	f7fa fac3 	bl	80001e0 <memchr>
 8005c5a:	b140      	cbz	r0, 8005c6e <_svfiprintf_r+0x152>
 8005c5c:	2340      	movs	r3, #64	; 0x40
 8005c5e:	eba0 000a 	sub.w	r0, r0, sl
 8005c62:	fa03 f000 	lsl.w	r0, r3, r0
 8005c66:	9b04      	ldr	r3, [sp, #16]
 8005c68:	4303      	orrs	r3, r0
 8005c6a:	3401      	adds	r4, #1
 8005c6c:	9304      	str	r3, [sp, #16]
 8005c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c72:	4826      	ldr	r0, [pc, #152]	; (8005d0c <_svfiprintf_r+0x1f0>)
 8005c74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c78:	2206      	movs	r2, #6
 8005c7a:	f7fa fab1 	bl	80001e0 <memchr>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d038      	beq.n	8005cf4 <_svfiprintf_r+0x1d8>
 8005c82:	4b23      	ldr	r3, [pc, #140]	; (8005d10 <_svfiprintf_r+0x1f4>)
 8005c84:	bb1b      	cbnz	r3, 8005cce <_svfiprintf_r+0x1b2>
 8005c86:	9b03      	ldr	r3, [sp, #12]
 8005c88:	3307      	adds	r3, #7
 8005c8a:	f023 0307 	bic.w	r3, r3, #7
 8005c8e:	3308      	adds	r3, #8
 8005c90:	9303      	str	r3, [sp, #12]
 8005c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c94:	4433      	add	r3, r6
 8005c96:	9309      	str	r3, [sp, #36]	; 0x24
 8005c98:	e767      	b.n	8005b6a <_svfiprintf_r+0x4e>
 8005c9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	e7a5      	b.n	8005bf0 <_svfiprintf_r+0xd4>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	3401      	adds	r4, #1
 8005ca8:	9305      	str	r3, [sp, #20]
 8005caa:	4619      	mov	r1, r3
 8005cac:	f04f 0c0a 	mov.w	ip, #10
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cb6:	3a30      	subs	r2, #48	; 0x30
 8005cb8:	2a09      	cmp	r2, #9
 8005cba:	d903      	bls.n	8005cc4 <_svfiprintf_r+0x1a8>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0c5      	beq.n	8005c4c <_svfiprintf_r+0x130>
 8005cc0:	9105      	str	r1, [sp, #20]
 8005cc2:	e7c3      	b.n	8005c4c <_svfiprintf_r+0x130>
 8005cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cc8:	4604      	mov	r4, r0
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e7f0      	b.n	8005cb0 <_svfiprintf_r+0x194>
 8005cce:	ab03      	add	r3, sp, #12
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	462a      	mov	r2, r5
 8005cd4:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <_svfiprintf_r+0x1f8>)
 8005cd6:	a904      	add	r1, sp, #16
 8005cd8:	4638      	mov	r0, r7
 8005cda:	f3af 8000 	nop.w
 8005cde:	1c42      	adds	r2, r0, #1
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	d1d6      	bne.n	8005c92 <_svfiprintf_r+0x176>
 8005ce4:	89ab      	ldrh	r3, [r5, #12]
 8005ce6:	065b      	lsls	r3, r3, #25
 8005ce8:	f53f af2c 	bmi.w	8005b44 <_svfiprintf_r+0x28>
 8005cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cee:	b01d      	add	sp, #116	; 0x74
 8005cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf4:	ab03      	add	r3, sp, #12
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	462a      	mov	r2, r5
 8005cfa:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <_svfiprintf_r+0x1f8>)
 8005cfc:	a904      	add	r1, sp, #16
 8005cfe:	4638      	mov	r0, r7
 8005d00:	f000 f87a 	bl	8005df8 <_printf_i>
 8005d04:	e7eb      	b.n	8005cde <_svfiprintf_r+0x1c2>
 8005d06:	bf00      	nop
 8005d08:	0800c730 	.word	0x0800c730
 8005d0c:	0800c73a 	.word	0x0800c73a
 8005d10:	00000000 	.word	0x00000000
 8005d14:	08005a65 	.word	0x08005a65
 8005d18:	0800c736 	.word	0x0800c736

08005d1c <_printf_common>:
 8005d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	4616      	mov	r6, r2
 8005d22:	4699      	mov	r9, r3
 8005d24:	688a      	ldr	r2, [r1, #8]
 8005d26:	690b      	ldr	r3, [r1, #16]
 8005d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	bfb8      	it	lt
 8005d30:	4613      	movlt	r3, r2
 8005d32:	6033      	str	r3, [r6, #0]
 8005d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d38:	4607      	mov	r7, r0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	b10a      	cbz	r2, 8005d42 <_printf_common+0x26>
 8005d3e:	3301      	adds	r3, #1
 8005d40:	6033      	str	r3, [r6, #0]
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	0699      	lsls	r1, r3, #26
 8005d46:	bf42      	ittt	mi
 8005d48:	6833      	ldrmi	r3, [r6, #0]
 8005d4a:	3302      	addmi	r3, #2
 8005d4c:	6033      	strmi	r3, [r6, #0]
 8005d4e:	6825      	ldr	r5, [r4, #0]
 8005d50:	f015 0506 	ands.w	r5, r5, #6
 8005d54:	d106      	bne.n	8005d64 <_printf_common+0x48>
 8005d56:	f104 0a19 	add.w	sl, r4, #25
 8005d5a:	68e3      	ldr	r3, [r4, #12]
 8005d5c:	6832      	ldr	r2, [r6, #0]
 8005d5e:	1a9b      	subs	r3, r3, r2
 8005d60:	42ab      	cmp	r3, r5
 8005d62:	dc26      	bgt.n	8005db2 <_printf_common+0x96>
 8005d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d68:	1e13      	subs	r3, r2, #0
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	bf18      	it	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	0692      	lsls	r2, r2, #26
 8005d72:	d42b      	bmi.n	8005dcc <_printf_common+0xb0>
 8005d74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d78:	4649      	mov	r1, r9
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	47c0      	blx	r8
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d01e      	beq.n	8005dc0 <_printf_common+0xa4>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	68e5      	ldr	r5, [r4, #12]
 8005d86:	6832      	ldr	r2, [r6, #0]
 8005d88:	f003 0306 	and.w	r3, r3, #6
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	bf08      	it	eq
 8005d90:	1aad      	subeq	r5, r5, r2
 8005d92:	68a3      	ldr	r3, [r4, #8]
 8005d94:	6922      	ldr	r2, [r4, #16]
 8005d96:	bf0c      	ite	eq
 8005d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d9c:	2500      	movne	r5, #0
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	bfc4      	itt	gt
 8005da2:	1a9b      	subgt	r3, r3, r2
 8005da4:	18ed      	addgt	r5, r5, r3
 8005da6:	2600      	movs	r6, #0
 8005da8:	341a      	adds	r4, #26
 8005daa:	42b5      	cmp	r5, r6
 8005dac:	d11a      	bne.n	8005de4 <_printf_common+0xc8>
 8005dae:	2000      	movs	r0, #0
 8005db0:	e008      	b.n	8005dc4 <_printf_common+0xa8>
 8005db2:	2301      	movs	r3, #1
 8005db4:	4652      	mov	r2, sl
 8005db6:	4649      	mov	r1, r9
 8005db8:	4638      	mov	r0, r7
 8005dba:	47c0      	blx	r8
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d103      	bne.n	8005dc8 <_printf_common+0xac>
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc8:	3501      	adds	r5, #1
 8005dca:	e7c6      	b.n	8005d5a <_printf_common+0x3e>
 8005dcc:	18e1      	adds	r1, r4, r3
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	2030      	movs	r0, #48	; 0x30
 8005dd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dd6:	4422      	add	r2, r4
 8005dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005de0:	3302      	adds	r3, #2
 8005de2:	e7c7      	b.n	8005d74 <_printf_common+0x58>
 8005de4:	2301      	movs	r3, #1
 8005de6:	4622      	mov	r2, r4
 8005de8:	4649      	mov	r1, r9
 8005dea:	4638      	mov	r0, r7
 8005dec:	47c0      	blx	r8
 8005dee:	3001      	adds	r0, #1
 8005df0:	d0e6      	beq.n	8005dc0 <_printf_common+0xa4>
 8005df2:	3601      	adds	r6, #1
 8005df4:	e7d9      	b.n	8005daa <_printf_common+0x8e>
	...

08005df8 <_printf_i>:
 8005df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	4691      	mov	r9, r2
 8005e00:	7e27      	ldrb	r7, [r4, #24]
 8005e02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e04:	2f78      	cmp	r7, #120	; 0x78
 8005e06:	4680      	mov	r8, r0
 8005e08:	469a      	mov	sl, r3
 8005e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e0e:	d807      	bhi.n	8005e20 <_printf_i+0x28>
 8005e10:	2f62      	cmp	r7, #98	; 0x62
 8005e12:	d80a      	bhi.n	8005e2a <_printf_i+0x32>
 8005e14:	2f00      	cmp	r7, #0
 8005e16:	f000 80d8 	beq.w	8005fca <_printf_i+0x1d2>
 8005e1a:	2f58      	cmp	r7, #88	; 0x58
 8005e1c:	f000 80a3 	beq.w	8005f66 <_printf_i+0x16e>
 8005e20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e28:	e03a      	b.n	8005ea0 <_printf_i+0xa8>
 8005e2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e2e:	2b15      	cmp	r3, #21
 8005e30:	d8f6      	bhi.n	8005e20 <_printf_i+0x28>
 8005e32:	a001      	add	r0, pc, #4	; (adr r0, 8005e38 <_printf_i+0x40>)
 8005e34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e38:	08005e91 	.word	0x08005e91
 8005e3c:	08005ea5 	.word	0x08005ea5
 8005e40:	08005e21 	.word	0x08005e21
 8005e44:	08005e21 	.word	0x08005e21
 8005e48:	08005e21 	.word	0x08005e21
 8005e4c:	08005e21 	.word	0x08005e21
 8005e50:	08005ea5 	.word	0x08005ea5
 8005e54:	08005e21 	.word	0x08005e21
 8005e58:	08005e21 	.word	0x08005e21
 8005e5c:	08005e21 	.word	0x08005e21
 8005e60:	08005e21 	.word	0x08005e21
 8005e64:	08005fb1 	.word	0x08005fb1
 8005e68:	08005ed5 	.word	0x08005ed5
 8005e6c:	08005f93 	.word	0x08005f93
 8005e70:	08005e21 	.word	0x08005e21
 8005e74:	08005e21 	.word	0x08005e21
 8005e78:	08005fd3 	.word	0x08005fd3
 8005e7c:	08005e21 	.word	0x08005e21
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005e21 	.word	0x08005e21
 8005e88:	08005e21 	.word	0x08005e21
 8005e8c:	08005f9b 	.word	0x08005f9b
 8005e90:	680b      	ldr	r3, [r1, #0]
 8005e92:	1d1a      	adds	r2, r3, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	600a      	str	r2, [r1, #0]
 8005e98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0a3      	b.n	8005fec <_printf_i+0x1f4>
 8005ea4:	6825      	ldr	r5, [r4, #0]
 8005ea6:	6808      	ldr	r0, [r1, #0]
 8005ea8:	062e      	lsls	r6, r5, #24
 8005eaa:	f100 0304 	add.w	r3, r0, #4
 8005eae:	d50a      	bpl.n	8005ec6 <_printf_i+0xce>
 8005eb0:	6805      	ldr	r5, [r0, #0]
 8005eb2:	600b      	str	r3, [r1, #0]
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	da03      	bge.n	8005ec0 <_printf_i+0xc8>
 8005eb8:	232d      	movs	r3, #45	; 0x2d
 8005eba:	426d      	negs	r5, r5
 8005ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec0:	485e      	ldr	r0, [pc, #376]	; (800603c <_printf_i+0x244>)
 8005ec2:	230a      	movs	r3, #10
 8005ec4:	e019      	b.n	8005efa <_printf_i+0x102>
 8005ec6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005eca:	6805      	ldr	r5, [r0, #0]
 8005ecc:	600b      	str	r3, [r1, #0]
 8005ece:	bf18      	it	ne
 8005ed0:	b22d      	sxthne	r5, r5
 8005ed2:	e7ef      	b.n	8005eb4 <_printf_i+0xbc>
 8005ed4:	680b      	ldr	r3, [r1, #0]
 8005ed6:	6825      	ldr	r5, [r4, #0]
 8005ed8:	1d18      	adds	r0, r3, #4
 8005eda:	6008      	str	r0, [r1, #0]
 8005edc:	0628      	lsls	r0, r5, #24
 8005ede:	d501      	bpl.n	8005ee4 <_printf_i+0xec>
 8005ee0:	681d      	ldr	r5, [r3, #0]
 8005ee2:	e002      	b.n	8005eea <_printf_i+0xf2>
 8005ee4:	0669      	lsls	r1, r5, #25
 8005ee6:	d5fb      	bpl.n	8005ee0 <_printf_i+0xe8>
 8005ee8:	881d      	ldrh	r5, [r3, #0]
 8005eea:	4854      	ldr	r0, [pc, #336]	; (800603c <_printf_i+0x244>)
 8005eec:	2f6f      	cmp	r7, #111	; 0x6f
 8005eee:	bf0c      	ite	eq
 8005ef0:	2308      	moveq	r3, #8
 8005ef2:	230a      	movne	r3, #10
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005efa:	6866      	ldr	r6, [r4, #4]
 8005efc:	60a6      	str	r6, [r4, #8]
 8005efe:	2e00      	cmp	r6, #0
 8005f00:	bfa2      	ittt	ge
 8005f02:	6821      	ldrge	r1, [r4, #0]
 8005f04:	f021 0104 	bicge.w	r1, r1, #4
 8005f08:	6021      	strge	r1, [r4, #0]
 8005f0a:	b90d      	cbnz	r5, 8005f10 <_printf_i+0x118>
 8005f0c:	2e00      	cmp	r6, #0
 8005f0e:	d04d      	beq.n	8005fac <_printf_i+0x1b4>
 8005f10:	4616      	mov	r6, r2
 8005f12:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f16:	fb03 5711 	mls	r7, r3, r1, r5
 8005f1a:	5dc7      	ldrb	r7, [r0, r7]
 8005f1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f20:	462f      	mov	r7, r5
 8005f22:	42bb      	cmp	r3, r7
 8005f24:	460d      	mov	r5, r1
 8005f26:	d9f4      	bls.n	8005f12 <_printf_i+0x11a>
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d10b      	bne.n	8005f44 <_printf_i+0x14c>
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	07df      	lsls	r7, r3, #31
 8005f30:	d508      	bpl.n	8005f44 <_printf_i+0x14c>
 8005f32:	6923      	ldr	r3, [r4, #16]
 8005f34:	6861      	ldr	r1, [r4, #4]
 8005f36:	4299      	cmp	r1, r3
 8005f38:	bfde      	ittt	le
 8005f3a:	2330      	movle	r3, #48	; 0x30
 8005f3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f44:	1b92      	subs	r2, r2, r6
 8005f46:	6122      	str	r2, [r4, #16]
 8005f48:	f8cd a000 	str.w	sl, [sp]
 8005f4c:	464b      	mov	r3, r9
 8005f4e:	aa03      	add	r2, sp, #12
 8005f50:	4621      	mov	r1, r4
 8005f52:	4640      	mov	r0, r8
 8005f54:	f7ff fee2 	bl	8005d1c <_printf_common>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d14c      	bne.n	8005ff6 <_printf_i+0x1fe>
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	b004      	add	sp, #16
 8005f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f66:	4835      	ldr	r0, [pc, #212]	; (800603c <_printf_i+0x244>)
 8005f68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	680e      	ldr	r6, [r1, #0]
 8005f70:	061f      	lsls	r7, r3, #24
 8005f72:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f76:	600e      	str	r6, [r1, #0]
 8005f78:	d514      	bpl.n	8005fa4 <_printf_i+0x1ac>
 8005f7a:	07d9      	lsls	r1, r3, #31
 8005f7c:	bf44      	itt	mi
 8005f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f82:	6023      	strmi	r3, [r4, #0]
 8005f84:	b91d      	cbnz	r5, 8005f8e <_printf_i+0x196>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	f023 0320 	bic.w	r3, r3, #32
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	2310      	movs	r3, #16
 8005f90:	e7b0      	b.n	8005ef4 <_printf_i+0xfc>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	f043 0320 	orr.w	r3, r3, #32
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	2378      	movs	r3, #120	; 0x78
 8005f9c:	4828      	ldr	r0, [pc, #160]	; (8006040 <_printf_i+0x248>)
 8005f9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fa2:	e7e3      	b.n	8005f6c <_printf_i+0x174>
 8005fa4:	065e      	lsls	r6, r3, #25
 8005fa6:	bf48      	it	mi
 8005fa8:	b2ad      	uxthmi	r5, r5
 8005faa:	e7e6      	b.n	8005f7a <_printf_i+0x182>
 8005fac:	4616      	mov	r6, r2
 8005fae:	e7bb      	b.n	8005f28 <_printf_i+0x130>
 8005fb0:	680b      	ldr	r3, [r1, #0]
 8005fb2:	6826      	ldr	r6, [r4, #0]
 8005fb4:	6960      	ldr	r0, [r4, #20]
 8005fb6:	1d1d      	adds	r5, r3, #4
 8005fb8:	600d      	str	r5, [r1, #0]
 8005fba:	0635      	lsls	r5, r6, #24
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	d501      	bpl.n	8005fc4 <_printf_i+0x1cc>
 8005fc0:	6018      	str	r0, [r3, #0]
 8005fc2:	e002      	b.n	8005fca <_printf_i+0x1d2>
 8005fc4:	0671      	lsls	r1, r6, #25
 8005fc6:	d5fb      	bpl.n	8005fc0 <_printf_i+0x1c8>
 8005fc8:	8018      	strh	r0, [r3, #0]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	6123      	str	r3, [r4, #16]
 8005fce:	4616      	mov	r6, r2
 8005fd0:	e7ba      	b.n	8005f48 <_printf_i+0x150>
 8005fd2:	680b      	ldr	r3, [r1, #0]
 8005fd4:	1d1a      	adds	r2, r3, #4
 8005fd6:	600a      	str	r2, [r1, #0]
 8005fd8:	681e      	ldr	r6, [r3, #0]
 8005fda:	6862      	ldr	r2, [r4, #4]
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f7fa f8fe 	bl	80001e0 <memchr>
 8005fe4:	b108      	cbz	r0, 8005fea <_printf_i+0x1f2>
 8005fe6:	1b80      	subs	r0, r0, r6
 8005fe8:	6060      	str	r0, [r4, #4]
 8005fea:	6863      	ldr	r3, [r4, #4]
 8005fec:	6123      	str	r3, [r4, #16]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff4:	e7a8      	b.n	8005f48 <_printf_i+0x150>
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	47d0      	blx	sl
 8006000:	3001      	adds	r0, #1
 8006002:	d0ab      	beq.n	8005f5c <_printf_i+0x164>
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	079b      	lsls	r3, r3, #30
 8006008:	d413      	bmi.n	8006032 <_printf_i+0x23a>
 800600a:	68e0      	ldr	r0, [r4, #12]
 800600c:	9b03      	ldr	r3, [sp, #12]
 800600e:	4298      	cmp	r0, r3
 8006010:	bfb8      	it	lt
 8006012:	4618      	movlt	r0, r3
 8006014:	e7a4      	b.n	8005f60 <_printf_i+0x168>
 8006016:	2301      	movs	r3, #1
 8006018:	4632      	mov	r2, r6
 800601a:	4649      	mov	r1, r9
 800601c:	4640      	mov	r0, r8
 800601e:	47d0      	blx	sl
 8006020:	3001      	adds	r0, #1
 8006022:	d09b      	beq.n	8005f5c <_printf_i+0x164>
 8006024:	3501      	adds	r5, #1
 8006026:	68e3      	ldr	r3, [r4, #12]
 8006028:	9903      	ldr	r1, [sp, #12]
 800602a:	1a5b      	subs	r3, r3, r1
 800602c:	42ab      	cmp	r3, r5
 800602e:	dcf2      	bgt.n	8006016 <_printf_i+0x21e>
 8006030:	e7eb      	b.n	800600a <_printf_i+0x212>
 8006032:	2500      	movs	r5, #0
 8006034:	f104 0619 	add.w	r6, r4, #25
 8006038:	e7f5      	b.n	8006026 <_printf_i+0x22e>
 800603a:	bf00      	nop
 800603c:	0800c741 	.word	0x0800c741
 8006040:	0800c752 	.word	0x0800c752

08006044 <memmove>:
 8006044:	4288      	cmp	r0, r1
 8006046:	b510      	push	{r4, lr}
 8006048:	eb01 0402 	add.w	r4, r1, r2
 800604c:	d902      	bls.n	8006054 <memmove+0x10>
 800604e:	4284      	cmp	r4, r0
 8006050:	4623      	mov	r3, r4
 8006052:	d807      	bhi.n	8006064 <memmove+0x20>
 8006054:	1e43      	subs	r3, r0, #1
 8006056:	42a1      	cmp	r1, r4
 8006058:	d008      	beq.n	800606c <memmove+0x28>
 800605a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800605e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006062:	e7f8      	b.n	8006056 <memmove+0x12>
 8006064:	4402      	add	r2, r0
 8006066:	4601      	mov	r1, r0
 8006068:	428a      	cmp	r2, r1
 800606a:	d100      	bne.n	800606e <memmove+0x2a>
 800606c:	bd10      	pop	{r4, pc}
 800606e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006076:	e7f7      	b.n	8006068 <memmove+0x24>

08006078 <_realloc_r>:
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	4607      	mov	r7, r0
 800607c:	4614      	mov	r4, r2
 800607e:	460e      	mov	r6, r1
 8006080:	b921      	cbnz	r1, 800608c <_realloc_r+0x14>
 8006082:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006086:	4611      	mov	r1, r2
 8006088:	f7ff bc42 	b.w	8005910 <_malloc_r>
 800608c:	b922      	cbnz	r2, 8006098 <_realloc_r+0x20>
 800608e:	f7ff fbef 	bl	8005870 <_free_r>
 8006092:	4625      	mov	r5, r4
 8006094:	4628      	mov	r0, r5
 8006096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006098:	f000 f814 	bl	80060c4 <_malloc_usable_size_r>
 800609c:	42a0      	cmp	r0, r4
 800609e:	d20f      	bcs.n	80060c0 <_realloc_r+0x48>
 80060a0:	4621      	mov	r1, r4
 80060a2:	4638      	mov	r0, r7
 80060a4:	f7ff fc34 	bl	8005910 <_malloc_r>
 80060a8:	4605      	mov	r5, r0
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d0f2      	beq.n	8006094 <_realloc_r+0x1c>
 80060ae:	4631      	mov	r1, r6
 80060b0:	4622      	mov	r2, r4
 80060b2:	f7ff fbc7 	bl	8005844 <memcpy>
 80060b6:	4631      	mov	r1, r6
 80060b8:	4638      	mov	r0, r7
 80060ba:	f7ff fbd9 	bl	8005870 <_free_r>
 80060be:	e7e9      	b.n	8006094 <_realloc_r+0x1c>
 80060c0:	4635      	mov	r5, r6
 80060c2:	e7e7      	b.n	8006094 <_realloc_r+0x1c>

080060c4 <_malloc_usable_size_r>:
 80060c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c8:	1f18      	subs	r0, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfbc      	itt	lt
 80060ce:	580b      	ldrlt	r3, [r1, r0]
 80060d0:	18c0      	addlt	r0, r0, r3
 80060d2:	4770      	bx	lr

080060d4 <_init>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	bf00      	nop
 80060d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060da:	bc08      	pop	{r3}
 80060dc:	469e      	mov	lr, r3
 80060de:	4770      	bx	lr

080060e0 <_fini>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr

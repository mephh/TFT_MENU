
LCD_MENU_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009b78  0800bf18  0800bf18  0001bf18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a90  08015a90  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08015a90  08015a90  00025a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015a98  08015a98  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a98  08015a98  00025a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a9c  08015a9c  00025a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08015aa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad28  20000094  08015b34  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000adbc  08015b34  0003adbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d42  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005235  00000000  00000000  00055e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  0005b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  0005cb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0d8  00000000  00000000  0005e470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000261c7  00000000  00000000  0007c548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a83b6  00000000  00000000  000a270f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014aac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ccc  00000000  00000000  0014ab18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bf00 	.word	0x0800bf00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	0800bf00 	.word	0x0800bf00

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d66:	4b52      	ldr	r3, [pc, #328]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d68:	4a52      	ldr	r2, [pc, #328]	; (8000eb4 <MX_ADC1_Init+0x160>)
 8000d6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d74:	4b4e      	ldr	r3, [pc, #312]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d7a:	4b4d      	ldr	r3, [pc, #308]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d80:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d86:	4b4a      	ldr	r3, [pc, #296]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d8e:	4b48      	ldr	r3, [pc, #288]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d94:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d96:	4a48      	ldr	r2, [pc, #288]	; (8000eb8 <MX_ADC1_Init+0x164>)
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d9a:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000da0:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000da2:	2208      	movs	r2, #8
 8000da4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000da6:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dae:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db4:	483e      	ldr	r0, [pc, #248]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000db6:	f002 fbe3 	bl	8003580 <HAL_ADC_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dc0:	f001 fc66 	bl	8002690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4836      	ldr	r0, [pc, #216]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000dd6:	f002 fd25 	bl	8003824 <HAL_ADC_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000de0:	f001 fc56 	bl	8002690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	482f      	ldr	r0, [pc, #188]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000df2:	f002 fd17 	bl	8003824 <HAL_ADC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dfc:	f001 fc48 	bl	8002690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e00:	2303      	movs	r3, #3
 8000e02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e04:	2303      	movs	r3, #3
 8000e06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4828      	ldr	r0, [pc, #160]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e0e:	f002 fd09 	bl	8003824 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000e18:	f001 fc3a 	bl	8002690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e20:	2304      	movs	r3, #4
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e2a:	f002 fcfb 	bl	8003824 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e34:	f001 fc2c 	bl	8002690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e38:	2306      	movs	r3, #6
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e40:	463b      	mov	r3, r7
 8000e42:	4619      	mov	r1, r3
 8000e44:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e46:	f002 fced 	bl	8003824 <HAL_ADC_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e50:	f001 fc1e 	bl	8002690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e54:	2307      	movs	r3, #7
 8000e56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000e58:	2306      	movs	r3, #6
 8000e5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e62:	f002 fcdf 	bl	8003824 <HAL_ADC_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e6c:	f001 fc10 	bl	8002690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e70:	2308      	movs	r3, #8
 8000e72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000e74:	2307      	movs	r3, #7
 8000e76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e7e:	f002 fcd1 	bl	8003824 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000e88:	f001 fc02 	bl	8002690 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e8c:	2309      	movs	r3, #9
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000e90:	2308      	movs	r3, #8
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e9a:	f002 fcc3 	bl	8003824 <HAL_ADC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000ea4:	f001 fbf4 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000a10c 	.word	0x2000a10c
 8000eb4:	40012000 	.word	0x40012000
 8000eb8:	0f000001 	.word	0x0f000001

08000ebc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a3c      	ldr	r2, [pc, #240]	; (8000fcc <HAL_ADC_MspInit+0x110>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d171      	bne.n	8000fc2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a3a      	ldr	r2, [pc, #232]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a33      	ldr	r2, [pc, #204]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a2c      	ldr	r2, [pc, #176]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f32:	23de      	movs	r3, #222	; 0xde
 8000f34:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f36:	2303      	movs	r3, #3
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <HAL_ADC_MspInit+0x118>)
 8000f46:	f003 fb8f 	bl	8004668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <HAL_ADC_MspInit+0x11c>)
 8000f5e:	f003 fb83 	bl	8004668 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <HAL_ADC_MspInit+0x124>)
 8000f66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fa8:	f002 ffee 	bl	8003f88 <HAL_DMA_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fb2:	f001 fb6d 	bl	8002690 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fba:	639a      	str	r2, [r3, #56]	; 0x38
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40012000 	.word	0x40012000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	2000a154 	.word	0x2000a154
 8000fe0:	40026410 	.word	0x40026410

08000fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_DMA_Init+0x3c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <MX_DMA_Init+0x3c>)
 8000ff4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_DMA_Init+0x3c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	203b      	movs	r0, #59	; 0x3b
 800100c:	f002 ff85 	bl	8003f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001010:	203b      	movs	r0, #59	; 0x3b
 8001012:	f002 ff9e 	bl	8003f52 <HAL_NVIC_EnableIRQ>

}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800

08001024 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <SELECT+0x1c>)
 8001030:	f003 fcb6 	bl	80049a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001034:	2001      	movs	r0, #1
 8001036:	f002 fa7f 	bl	8003538 <HAL_Delay>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400

08001044 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <DESELECT+0x1c>)
 8001050:	f003 fca6 	bl	80049a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f002 fa6f 	bl	8003538 <HAL_Delay>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020400 	.word	0x40020400

08001064 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800106e:	bf00      	nop
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <SPI_TxByte+0x30>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b02      	cmp	r3, #2
 800107c:	d1f8      	bne.n	8001070 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800107e:	1df9      	adds	r1, r7, #7
 8001080:	2364      	movs	r3, #100	; 0x64
 8001082:	2201      	movs	r2, #1
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <SPI_TxByte+0x30>)
 8001086:	f004 fca5 	bl	80059d4 <HAL_SPI_Transmit>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000a7a0 	.word	0x2000a7a0

08001098 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010a4:	bf00      	nop
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <SPI_TxBuffer+0x30>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d1f8      	bne.n	80010a6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80010b4:	887a      	ldrh	r2, [r7, #2]
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <SPI_TxBuffer+0x30>)
 80010bc:	f004 fc8a 	bl	80059d4 <HAL_SPI_Transmit>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000a7a0 	.word	0x2000a7a0

080010cc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010d6:	bf00      	nop
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <SPI_RxByte+0x34>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d1f8      	bne.n	80010d8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010e6:	1dba      	adds	r2, r7, #6
 80010e8:	1df9      	adds	r1, r7, #7
 80010ea:	2364      	movs	r3, #100	; 0x64
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <SPI_RxByte+0x34>)
 80010f2:	f004 fdab 	bl	8005c4c <HAL_SPI_TransmitReceive>

	return data;
 80010f6:	79bb      	ldrb	r3, [r7, #6]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000a7a0 	.word	0x2000a7a0

08001104 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800110c:	f7ff ffde 	bl	80010cc <SPI_RxByte>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	701a      	strb	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <SD_ReadyWait+0x30>)
 8001128:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800112c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800112e:	f7ff ffcd 	bl	80010cc <SPI_RxByte>
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2bff      	cmp	r3, #255	; 0xff
 800113a:	d004      	beq.n	8001146 <SD_ReadyWait+0x26>
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SD_ReadyWait+0x30>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f3      	bne.n	800112e <SD_ReadyWait+0xe>

	return res;
 8001146:	79fb      	ldrb	r3, [r7, #7]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000a8b0 	.word	0x2000a8b0

08001154 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800115a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800115e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001160:	f7ff ff70 	bl	8001044 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	e005      	b.n	8001176 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800116a:	20ff      	movs	r0, #255	; 0xff
 800116c:	f7ff ff7a 	bl	8001064 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3301      	adds	r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b09      	cmp	r3, #9
 800117a:	ddf6      	ble.n	800116a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800117c:	f7ff ff52 	bl	8001024 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001194:	2395      	movs	r3, #149	; 0x95
 8001196:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001198:	463b      	mov	r3, r7
 800119a:	2106      	movs	r1, #6
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff7b 	bl	8001098 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80011a2:	e002      	b.n	80011aa <SD_PowerOn+0x56>
	{
		cnt--;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80011aa:	f7ff ff8f 	bl	80010cc <SPI_RxByte>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d002      	beq.n	80011ba <SD_PowerOn+0x66>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f4      	bne.n	80011a4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80011ba:	f7ff ff43 	bl	8001044 <DESELECT>
	SPI_TxByte(0XFF);
 80011be:	20ff      	movs	r0, #255	; 0xff
 80011c0:	f7ff ff50 	bl	8001064 <SPI_TxByte>

	PowerFlag = 1;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <SD_PowerOn+0x80>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000b1 	.word	0x200000b1

080011d8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <SD_PowerOff+0x14>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	200000b1 	.word	0x200000b1

080011f0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <SD_CheckPower+0x14>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200000b1 	.word	0x200000b1

08001208 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <SD_RxDataBlock+0x5c>)
 8001214:	22c8      	movs	r2, #200	; 0xc8
 8001216:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001218:	f7ff ff58 	bl	80010cc <SPI_RxByte>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	2bff      	cmp	r3, #255	; 0xff
 8001224:	d104      	bne.n	8001230 <SD_RxDataBlock+0x28>
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <SD_RxDataBlock+0x5c>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f3      	bne.n	8001218 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2bfe      	cmp	r3, #254	; 0xfe
 8001234:	d001      	beq.n	800123a <SD_RxDataBlock+0x32>
 8001236:	2300      	movs	r3, #0
 8001238:	e00f      	b.n	800125a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5f 	bl	8001104 <SPI_RxBytePtr>
	} while(len--);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	603a      	str	r2, [r7, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f4      	bne.n	800123a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001250:	f7ff ff3c 	bl	80010cc <SPI_RxByte>
	SPI_RxByte();
 8001254:	f7ff ff3a 	bl	80010cc <SPI_RxByte>

	return TRUE;
 8001258:	2301      	movs	r3, #1
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000a8b1 	.word	0x2000a8b1

08001268 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001278:	f7ff ff52 	bl	8001120 <SD_ReadyWait>
 800127c:	4603      	mov	r3, r0
 800127e:	2bff      	cmp	r3, #255	; 0xff
 8001280:	d001      	beq.n	8001286 <SD_TxDataBlock+0x1e>
 8001282:	2300      	movs	r3, #0
 8001284:	e02f      	b.n	80012e6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff feeb 	bl	8001064 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	2bfd      	cmp	r3, #253	; 0xfd
 8001292:	d020      	beq.n	80012d6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fefd 	bl	8001098 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800129e:	f7ff ff15 	bl	80010cc <SPI_RxByte>
		SPI_RxByte();
 80012a2:	f7ff ff13 	bl	80010cc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80012a6:	e00b      	b.n	80012c0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80012a8:	f7ff ff10 	bl	80010cc <SPI_RxByte>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d006      	beq.n	80012c8 <SD_TxDataBlock+0x60>
			i++;
 80012ba:	7bbb      	ldrb	r3, [r7, #14]
 80012bc:	3301      	adds	r3, #1
 80012be:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	2b40      	cmp	r3, #64	; 0x40
 80012c4:	d9f0      	bls.n	80012a8 <SD_TxDataBlock+0x40>
 80012c6:	e000      	b.n	80012ca <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80012c8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80012ca:	bf00      	nop
 80012cc:	f7ff fefe 	bl	80010cc <SPI_RxByte>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0fa      	beq.n	80012cc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	2b05      	cmp	r3, #5
 80012de:	d101      	bne.n	80012e4 <SD_TxDataBlock+0x7c>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	6039      	str	r1, [r7, #0]
 80012f8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012fa:	f7ff ff11 	bl	8001120 <SD_ReadyWait>
 80012fe:	4603      	mov	r3, r0
 8001300:	2bff      	cmp	r3, #255	; 0xff
 8001302:	d001      	beq.n	8001308 <SD_SendCmd+0x1a>
 8001304:	23ff      	movs	r3, #255	; 0xff
 8001306:	e042      	b.n	800138e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff feaa 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	0e1b      	lsrs	r3, r3, #24
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fea4 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	0c1b      	lsrs	r3, r3, #16
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe9e 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fe98 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe93 	bl	8001064 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b40      	cmp	r3, #64	; 0x40
 8001342:	d102      	bne.n	800134a <SD_SendCmd+0x5c>
 8001344:	2395      	movs	r3, #149	; 0x95
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e007      	b.n	800135a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b48      	cmp	r3, #72	; 0x48
 800134e:	d102      	bne.n	8001356 <SD_SendCmd+0x68>
 8001350:	2387      	movs	r3, #135	; 0x87
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e001      	b.n	800135a <SD_SendCmd+0x6c>
	else crc = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe81 	bl	8001064 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b4c      	cmp	r3, #76	; 0x4c
 8001366:	d101      	bne.n	800136c <SD_SendCmd+0x7e>
 8001368:	f7ff feb0 	bl	80010cc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800136c:	230a      	movs	r3, #10
 800136e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001370:	f7ff feac 	bl	80010cc <SPI_RxByte>
 8001374:	4603      	mov	r3, r0
 8001376:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001378:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800137c:	2b00      	cmp	r3, #0
 800137e:	da05      	bge.n	800138c <SD_SendCmd+0x9e>
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	3b01      	subs	r3, #1
 8001384:	73bb      	strb	r3, [r7, #14]
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f1      	bne.n	8001370 <SD_SendCmd+0x82>

	return res;
 800138c:	7b7b      	ldrb	r3, [r7, #13]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SD_disk_initialize+0x14>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0d6      	b.n	800155a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80013ac:	4b6d      	ldr	r3, [pc, #436]	; (8001564 <SD_disk_initialize+0x1cc>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <SD_disk_initialize+0x2a>
 80013ba:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <SD_disk_initialize+0x1cc>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	e0cb      	b.n	800155a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80013c2:	f7ff fec7 	bl	8001154 <SD_PowerOn>

	/* slave select */
	SELECT();
 80013c6:	f7ff fe2d 	bl	8001024 <SELECT>

	/* check disk type */
	type = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80013ce:	2100      	movs	r1, #0
 80013d0:	2040      	movs	r0, #64	; 0x40
 80013d2:	f7ff ff8c 	bl	80012ee <SD_SendCmd>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b01      	cmp	r3, #1
 80013da:	f040 80a6 	bne.w	800152a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80013de:	4b62      	ldr	r3, [pc, #392]	; (8001568 <SD_disk_initialize+0x1d0>)
 80013e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013ea:	2048      	movs	r0, #72	; 0x48
 80013ec:	f7ff ff7f 	bl	80012ee <SD_SendCmd>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d158      	bne.n	80014a8 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e00c      	b.n	8001416 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80013fc:	7bfc      	ldrb	r4, [r7, #15]
 80013fe:	f7ff fe65 	bl	80010cc <SPI_RxByte>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4423      	add	r3, r4
 800140c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	3301      	adds	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d9ef      	bls.n	80013fc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800141c:	7abb      	ldrb	r3, [r7, #10]
 800141e:	2b01      	cmp	r3, #1
 8001420:	f040 8083 	bne.w	800152a <SD_disk_initialize+0x192>
 8001424:	7afb      	ldrb	r3, [r7, #11]
 8001426:	2baa      	cmp	r3, #170	; 0xaa
 8001428:	d17f      	bne.n	800152a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800142a:	2100      	movs	r1, #0
 800142c:	2077      	movs	r0, #119	; 0x77
 800142e:	f7ff ff5e 	bl	80012ee <SD_SendCmd>
 8001432:	4603      	mov	r3, r0
 8001434:	2b01      	cmp	r3, #1
 8001436:	d807      	bhi.n	8001448 <SD_disk_initialize+0xb0>
 8001438:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800143c:	2069      	movs	r0, #105	; 0x69
 800143e:	f7ff ff56 	bl	80012ee <SD_SendCmd>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001448:	4b47      	ldr	r3, [pc, #284]	; (8001568 <SD_disk_initialize+0x1d0>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1eb      	bne.n	800142a <SD_disk_initialize+0x92>
 8001452:	e000      	b.n	8001456 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001454:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <SD_disk_initialize+0x1d0>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d064      	beq.n	800152a <SD_disk_initialize+0x192>
 8001460:	2100      	movs	r1, #0
 8001462:	207a      	movs	r0, #122	; 0x7a
 8001464:	f7ff ff43 	bl	80012ee <SD_SendCmd>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d15d      	bne.n	800152a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e00c      	b.n	800148e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001474:	7bfc      	ldrb	r4, [r7, #15]
 8001476:	f7ff fe29 	bl	80010cc <SPI_RxByte>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4423      	add	r3, r4
 8001484:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3301      	adds	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d9ef      	bls.n	8001474 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001494:	7a3b      	ldrb	r3, [r7, #8]
 8001496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SD_disk_initialize+0x10a>
 800149e:	230c      	movs	r3, #12
 80014a0:	e000      	b.n	80014a4 <SD_disk_initialize+0x10c>
 80014a2:	2304      	movs	r3, #4
 80014a4:	73bb      	strb	r3, [r7, #14]
 80014a6:	e040      	b.n	800152a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80014a8:	2100      	movs	r1, #0
 80014aa:	2077      	movs	r0, #119	; 0x77
 80014ac:	f7ff ff1f 	bl	80012ee <SD_SendCmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d808      	bhi.n	80014c8 <SD_disk_initialize+0x130>
 80014b6:	2100      	movs	r1, #0
 80014b8:	2069      	movs	r0, #105	; 0x69
 80014ba:	f7ff ff18 	bl	80012ee <SD_SendCmd>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d801      	bhi.n	80014c8 <SD_disk_initialize+0x130>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e000      	b.n	80014ca <SD_disk_initialize+0x132>
 80014c8:	2301      	movs	r3, #1
 80014ca:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d10e      	bne.n	80014f0 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80014d2:	2100      	movs	r1, #0
 80014d4:	2077      	movs	r0, #119	; 0x77
 80014d6:	f7ff ff0a 	bl	80012ee <SD_SendCmd>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d80e      	bhi.n	80014fe <SD_disk_initialize+0x166>
 80014e0:	2100      	movs	r1, #0
 80014e2:	2069      	movs	r0, #105	; 0x69
 80014e4:	f7ff ff03 	bl	80012ee <SD_SendCmd>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d107      	bne.n	80014fe <SD_disk_initialize+0x166>
 80014ee:	e00d      	b.n	800150c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014f0:	2100      	movs	r1, #0
 80014f2:	2041      	movs	r0, #65	; 0x41
 80014f4:	f7ff fefb 	bl	80012ee <SD_SendCmd>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <SD_disk_initialize+0x1d0>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e1      	bne.n	80014cc <SD_disk_initialize+0x134>
 8001508:	e000      	b.n	800150c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800150a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <SD_disk_initialize+0x1d0>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <SD_disk_initialize+0x18e>
 8001516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151a:	2050      	movs	r0, #80	; 0x50
 800151c:	f7ff fee7 	bl	80012ee <SD_SendCmd>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SD_disk_initialize+0x192>
 8001526:	2300      	movs	r3, #0
 8001528:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <SD_disk_initialize+0x1d4>)
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001530:	f7ff fd88 	bl	8001044 <DESELECT>
	SPI_RxByte();
 8001534:	f7ff fdca 	bl	80010cc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <SD_disk_initialize+0x1cc>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SD_disk_initialize+0x1cc>)
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e001      	b.n	8001554 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001550:	f7ff fe42 	bl	80011d8 <SD_PowerOff>
	}

	return Stat;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <SD_disk_initialize+0x1cc>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	20000000 	.word	0x20000000
 8001568:	2000a8b1 	.word	0x2000a8b1
 800156c:	200000b0 	.word	0x200000b0

08001570 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SD_disk_status+0x14>
 8001580:	2301      	movs	r3, #1
 8001582:	e002      	b.n	800158a <SD_disk_status+0x1a>
	return Stat;
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SD_disk_status+0x28>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000

0800159c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <SD_disk_read+0x1c>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <SD_disk_read+0x20>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e051      	b.n	8001660 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <SD_disk_read+0xcc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SD_disk_read+0x32>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e048      	b.n	8001660 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <SD_disk_read+0xd0>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <SD_disk_read+0x44>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	607b      	str	r3, [r7, #4]

	SELECT();
 80015e0:	f7ff fd20 	bl	8001024 <SELECT>

	if (count == 1)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d111      	bne.n	800160e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	2051      	movs	r0, #81	; 0x51
 80015ee:	f7ff fe7e 	bl	80012ee <SD_SendCmd>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d129      	bne.n	800164c <SD_disk_read+0xb0>
 80015f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fc:	68b8      	ldr	r0, [r7, #8]
 80015fe:	f7ff fe03 	bl	8001208 <SD_RxDataBlock>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d021      	beq.n	800164c <SD_disk_read+0xb0>
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	e01e      	b.n	800164c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	2052      	movs	r0, #82	; 0x52
 8001612:	f7ff fe6c 	bl	80012ee <SD_SendCmd>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d117      	bne.n	800164c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800161c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001620:	68b8      	ldr	r0, [r7, #8]
 8001622:	f7ff fdf1 	bl	8001208 <SD_RxDataBlock>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00a      	beq.n	8001642 <SD_disk_read+0xa6>
				buff += 512;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001632:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3b01      	subs	r3, #1
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ed      	bne.n	800161c <SD_disk_read+0x80>
 8001640:	e000      	b.n	8001644 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001642:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001644:	2100      	movs	r1, #0
 8001646:	204c      	movs	r0, #76	; 0x4c
 8001648:	f7ff fe51 	bl	80012ee <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800164c:	f7ff fcfa 	bl	8001044 <DESELECT>
	SPI_RxByte();
 8001650:	f7ff fd3c 	bl	80010cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000000 	.word	0x20000000
 800166c:	200000b0 	.word	0x200000b0

08001670 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <SD_disk_write+0x1c>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <SD_disk_write+0x20>
 800168c:	2304      	movs	r3, #4
 800168e:	e06b      	b.n	8001768 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001690:	4b37      	ldr	r3, [pc, #220]	; (8001770 <SD_disk_write+0x100>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SD_disk_write+0x32>
 800169e:	2303      	movs	r3, #3
 80016a0:	e062      	b.n	8001768 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80016a2:	4b33      	ldr	r3, [pc, #204]	; (8001770 <SD_disk_write+0x100>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SD_disk_write+0x44>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e059      	b.n	8001768 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80016b4:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <SD_disk_write+0x104>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <SD_disk_write+0x56>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	607b      	str	r3, [r7, #4]

	SELECT();
 80016c6:	f7ff fcad 	bl	8001024 <SELECT>

	if (count == 1)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d110      	bne.n	80016f2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	2058      	movs	r0, #88	; 0x58
 80016d4:	f7ff fe0b 	bl	80012ee <SD_SendCmd>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d13a      	bne.n	8001754 <SD_disk_write+0xe4>
 80016de:	21fe      	movs	r1, #254	; 0xfe
 80016e0:	68b8      	ldr	r0, [r7, #8]
 80016e2:	f7ff fdc1 	bl	8001268 <SD_TxDataBlock>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d033      	beq.n	8001754 <SD_disk_write+0xe4>
			count = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	e030      	b.n	8001754 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <SD_disk_write+0x104>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80016fe:	2100      	movs	r1, #0
 8001700:	2077      	movs	r0, #119	; 0x77
 8001702:	f7ff fdf4 	bl	80012ee <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	2057      	movs	r0, #87	; 0x57
 800170a:	f7ff fdf0 	bl	80012ee <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	2059      	movs	r0, #89	; 0x59
 8001712:	f7ff fdec 	bl	80012ee <SD_SendCmd>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d11b      	bne.n	8001754 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800171c:	21fc      	movs	r1, #252	; 0xfc
 800171e:	68b8      	ldr	r0, [r7, #8]
 8001720:	f7ff fda2 	bl	8001268 <SD_TxDataBlock>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00a      	beq.n	8001740 <SD_disk_write+0xd0>
				buff += 512;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001730:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3b01      	subs	r3, #1
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ee      	bne.n	800171c <SD_disk_write+0xac>
 800173e:	e000      	b.n	8001742 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001740:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001742:	21fd      	movs	r1, #253	; 0xfd
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fd8f 	bl	8001268 <SD_TxDataBlock>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <SD_disk_write+0xe4>
			{
				count = 1;
 8001750:	2301      	movs	r3, #1
 8001752:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001754:	f7ff fc76 	bl	8001044 <DESELECT>
	SPI_RxByte();
 8001758:	f7ff fcb8 	bl	80010cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000000 	.word	0x20000000
 8001774:	200000b0 	.word	0x200000b0

08001778 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b08b      	sub	sp, #44	; 0x2c
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	603a      	str	r2, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
 8001784:	460b      	mov	r3, r1
 8001786:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SD_disk_ioctl+0x1e>
 8001792:	2304      	movs	r3, #4
 8001794:	e115      	b.n	80019c2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d124      	bne.n	80017ec <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d012      	beq.n	80017d0 <SD_disk_ioctl+0x58>
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	dc1a      	bgt.n	80017e4 <SD_disk_ioctl+0x6c>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <SD_disk_ioctl+0x40>
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d006      	beq.n	80017c4 <SD_disk_ioctl+0x4c>
 80017b6:	e015      	b.n	80017e4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80017b8:	f7ff fd0e 	bl	80011d8 <SD_PowerOff>
			res = RES_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017c2:	e0fc      	b.n	80019be <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80017c4:	f7ff fcc6 	bl	8001154 <SD_PowerOn>
			res = RES_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017ce:	e0f6      	b.n	80019be <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	1c5c      	adds	r4, r3, #1
 80017d4:	f7ff fd0c 	bl	80011f0 <SD_CheckPower>
 80017d8:	4603      	mov	r3, r0
 80017da:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017e2:	e0ec      	b.n	80019be <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80017e4:	2304      	movs	r3, #4
 80017e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017ea:	e0e8      	b.n	80019be <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017ec:	4b77      	ldr	r3, [pc, #476]	; (80019cc <SD_disk_ioctl+0x254>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SD_disk_ioctl+0x86>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0e1      	b.n	80019c2 <SD_disk_ioctl+0x24a>

		SELECT();
 80017fe:	f7ff fc11 	bl	8001024 <SELECT>

		switch (ctrl)
 8001802:	79bb      	ldrb	r3, [r7, #6]
 8001804:	2b0d      	cmp	r3, #13
 8001806:	f200 80cb 	bhi.w	80019a0 <SD_disk_ioctl+0x228>
 800180a:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <SD_disk_ioctl+0x98>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	0800190b 	.word	0x0800190b
 8001814:	08001849 	.word	0x08001849
 8001818:	080018fb 	.word	0x080018fb
 800181c:	080019a1 	.word	0x080019a1
 8001820:	080019a1 	.word	0x080019a1
 8001824:	080019a1 	.word	0x080019a1
 8001828:	080019a1 	.word	0x080019a1
 800182c:	080019a1 	.word	0x080019a1
 8001830:	080019a1 	.word	0x080019a1
 8001834:	080019a1 	.word	0x080019a1
 8001838:	080019a1 	.word	0x080019a1
 800183c:	0800191d 	.word	0x0800191d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001965 	.word	0x08001965
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001848:	2100      	movs	r1, #0
 800184a:	2049      	movs	r0, #73	; 0x49
 800184c:	f7ff fd4f 	bl	80012ee <SD_SendCmd>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 80a8 	bne.w	80019a8 <SD_disk_ioctl+0x230>
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	2110      	movs	r1, #16
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fcd2 	bl	8001208 <SD_RxDataBlock>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 809e 	beq.w	80019a8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800186c:	7b3b      	ldrb	r3, [r7, #12]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10e      	bne.n	8001894 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001876:	7d7b      	ldrb	r3, [r7, #21]
 8001878:	b29a      	uxth	r2, r3
 800187a:	7d3b      	ldrb	r3, [r7, #20]
 800187c:	b29b      	uxth	r3, r3
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	b29b      	uxth	r3, r3
 8001882:	4413      	add	r3, r2
 8001884:	b29b      	uxth	r3, r3
 8001886:	3301      	adds	r3, #1
 8001888:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800188a:	8bfb      	ldrh	r3, [r7, #30]
 800188c:	029a      	lsls	r2, r3, #10
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e02e      	b.n	80018f2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001894:	7c7b      	ldrb	r3, [r7, #17]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	b2da      	uxtb	r2, r3
 800189c:	7dbb      	ldrb	r3, [r7, #22]
 800189e:	09db      	lsrs	r3, r3, #7
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	7d7b      	ldrb	r3, [r7, #21]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f003 0306 	and.w	r3, r3, #6
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3302      	adds	r3, #2
 80018b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80018bc:	7d3b      	ldrb	r3, [r7, #20]
 80018be:	099b      	lsrs	r3, r3, #6
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	7cfb      	ldrb	r3, [r7, #19]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	7cbb      	ldrb	r3, [r7, #18]
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4413      	add	r3, r2
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80018e4:	8bfa      	ldrh	r2, [r7, #30]
 80018e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ea:	3b09      	subs	r3, #9
 80018ec:	409a      	lsls	r2, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80018f8:	e056      	b.n	80019a8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001900:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001908:	e055      	b.n	80019b6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800190a:	f7ff fc09 	bl	8001120 <SD_ReadyWait>
 800190e:	4603      	mov	r3, r0
 8001910:	2bff      	cmp	r3, #255	; 0xff
 8001912:	d14b      	bne.n	80019ac <SD_disk_ioctl+0x234>
 8001914:	2300      	movs	r3, #0
 8001916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800191a:	e047      	b.n	80019ac <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800191c:	2100      	movs	r1, #0
 800191e:	2049      	movs	r0, #73	; 0x49
 8001920:	f7ff fce5 	bl	80012ee <SD_SendCmd>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d142      	bne.n	80019b0 <SD_disk_ioctl+0x238>
 800192a:	2110      	movs	r1, #16
 800192c:	6a38      	ldr	r0, [r7, #32]
 800192e:	f7ff fc6b 	bl	8001208 <SD_RxDataBlock>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d03b      	beq.n	80019b0 <SD_disk_ioctl+0x238>
 8001938:	2300      	movs	r3, #0
 800193a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800193e:	e037      	b.n	80019b0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001940:	2100      	movs	r1, #0
 8001942:	204a      	movs	r0, #74	; 0x4a
 8001944:	f7ff fcd3 	bl	80012ee <SD_SendCmd>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d132      	bne.n	80019b4 <SD_disk_ioctl+0x23c>
 800194e:	2110      	movs	r1, #16
 8001950:	6a38      	ldr	r0, [r7, #32]
 8001952:	f7ff fc59 	bl	8001208 <SD_RxDataBlock>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d02b      	beq.n	80019b4 <SD_disk_ioctl+0x23c>
 800195c:	2300      	movs	r3, #0
 800195e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001962:	e027      	b.n	80019b4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001964:	2100      	movs	r1, #0
 8001966:	207a      	movs	r0, #122	; 0x7a
 8001968:	f7ff fcc1 	bl	80012ee <SD_SendCmd>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d116      	bne.n	80019a0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001972:	2300      	movs	r3, #0
 8001974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001978:	e00b      	b.n	8001992 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800197a:	6a3c      	ldr	r4, [r7, #32]
 800197c:	1c63      	adds	r3, r4, #1
 800197e:	623b      	str	r3, [r7, #32]
 8001980:	f7ff fba4 	bl	80010cc <SPI_RxByte>
 8001984:	4603      	mov	r3, r0
 8001986:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800198c:	3301      	adds	r3, #1
 800198e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001996:	2b03      	cmp	r3, #3
 8001998:	d9ef      	bls.n	800197a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80019a0:	2304      	movs	r3, #4
 80019a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019a6:	e006      	b.n	80019b6 <SD_disk_ioctl+0x23e>
			break;
 80019a8:	bf00      	nop
 80019aa:	e004      	b.n	80019b6 <SD_disk_ioctl+0x23e>
			break;
 80019ac:	bf00      	nop
 80019ae:	e002      	b.n	80019b6 <SD_disk_ioctl+0x23e>
			break;
 80019b0:	bf00      	nop
 80019b2:	e000      	b.n	80019b6 <SD_disk_ioctl+0x23e>
			break;
 80019b4:	bf00      	nop
		}

		DESELECT();
 80019b6:	f7ff fb45 	bl	8001044 <DESELECT>
		SPI_RxByte();
 80019ba:	f7ff fb87 	bl	80010cc <SPI_RxByte>
	}

	return res;
 80019be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	372c      	adds	r7, #44	; 0x2c
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000

080019d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <MX_GPIO_Init+0x138>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <MX_GPIO_Init+0x138>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b44      	ldr	r3, [pc, #272]	; (8001b08 <MX_GPIO_Init+0x138>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a3f      	ldr	r2, [pc, #252]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a38      	ldr	r2, [pc, #224]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8001a5c:	482b      	ldr	r0, [pc, #172]	; (8001b0c <MX_GPIO_Init+0x13c>)
 8001a5e:	f002 ff9f 	bl	80049a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a68:	4829      	ldr	r0, [pc, #164]	; (8001b10 <MX_GPIO_Init+0x140>)
 8001a6a:	f002 ff99 	bl	80049a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WKUP_Pin;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4823      	ldr	r0, [pc, #140]	; (8001b10 <MX_GPIO_Init+0x140>)
 8001a84:	f002 fdf0 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	481b      	ldr	r0, [pc, #108]	; (8001b0c <MX_GPIO_Init+0x13c>)
 8001aa0:	f002 fde2 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin;
 8001aa4:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4813      	ldr	r0, [pc, #76]	; (8001b0c <MX_GPIO_Init+0x13c>)
 8001abe:	f002 fdd3 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 8001ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MX_GPIO_Init+0x140>)
 8001adc:	f002 fdc4 	bl	8004668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	2006      	movs	r0, #6
 8001ae6:	f002 fa18 	bl	8003f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001aea:	2006      	movs	r0, #6
 8001aec:	f002 fa31 	bl	8003f52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2108      	movs	r1, #8
 8001af4:	2028      	movs	r0, #40	; 0x28
 8001af6:	f002 fa10 	bl	8003f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f002 fa29 	bl	8003f52 <HAL_NVIC_EnableIRQ>

}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	40020000 	.word	0x40020000

08001b14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b1a:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <MX_I2C1_Init+0x54>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b20:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <MX_I2C1_Init+0x58>)
 8001b22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b52:	f002 ff57 	bl	8004a04 <HAL_I2C_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b5c:	f000 fd98 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2000a1b4 	.word	0x2000a1b4
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	000186a0 	.word	0x000186a0

08001b70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_I2C_MspInit+0x84>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d12c      	bne.n	8001bec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001bae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb4:	2312      	movs	r3, #18
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480c      	ldr	r0, [pc, #48]	; (8001bfc <HAL_I2C_MspInit+0x8c>)
 8001bcc:	f002 fd4c 	bl	8004668 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001bda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	; 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40005400 	.word	0x40005400
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020400 	.word	0x40020400

08001c00 <lcd_cmd>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


static void lcd_cmd(uint8_t cmd) //send any command to st7735
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <lcd_cmd+0x40>)
 8001c12:	f002 fec5 	bl	80049a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2140      	movs	r1, #64	; 0x40
 8001c1a:	480a      	ldr	r0, [pc, #40]	; (8001c44 <lcd_cmd+0x44>)
 8001c1c:	f002 fec0 	bl	80049a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001c20:	1df9      	adds	r1, r7, #7
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	2201      	movs	r2, #1
 8001c28:	4807      	ldr	r0, [pc, #28]	; (8001c48 <lcd_cmd+0x48>)
 8001c2a:	f003 fed3 	bl	80059d4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2140      	movs	r1, #64	; 0x40
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <lcd_cmd+0x44>)
 8001c34:	f002 feb4 	bl	80049a0 <HAL_GPIO_WritePin>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	2000a7f8 	.word	0x2000a7f8

08001c4c <lcd_data>:

static void lcd_data(uint8_t data)//send data(value for command) to st7735, spi always uses 8bit data
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c5c:	480b      	ldr	r0, [pc, #44]	; (8001c8c <lcd_data+0x40>)
 8001c5e:	f002 fe9f 	bl	80049a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	480a      	ldr	r0, [pc, #40]	; (8001c90 <lcd_data+0x44>)
 8001c68:	f002 fe9a 	bl	80049a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001c6c:	1df9      	adds	r1, r7, #7
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	2201      	movs	r2, #1
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <lcd_data+0x48>)
 8001c76:	f003 fead 	bl	80059d4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2140      	movs	r1, #64	; 0x40
 8001c7e:	4804      	ldr	r0, [pc, #16]	; (8001c90 <lcd_data+0x44>)
 8001c80:	f002 fe8e 	bl	80049a0 <HAL_GPIO_WritePin>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40020400 	.word	0x40020400
 8001c94:	2000a7f8 	.word	0x2000a7f8

08001c98 <lcd_data16>:

static void lcd_data16(uint16_t value)//function that allows to send 16bit data as 2x 8bit
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ffce 	bl	8001c4c <lcd_data>
	lcd_data(value);
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ffc9 	bl	8001c4c <lcd_data>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height) {
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);	//command to set window columns
 8001cd0:	202a      	movs	r0, #42	; 0x2a
 8001cd2:	f7ff ff95 	bl	8001c00 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);	//start col
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ffdc 	bl	8001c98 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);	//end col
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ffd1 	bl	8001c98 <lcd_data16>

	lcd_cmd(ST7735S_RASET);	//command to set window rows
 8001cf6:	202b      	movs	r0, #43	; 0x2b
 8001cf8:	f7ff ff82 	bl	8001c00 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);	//start row
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ffc9 	bl	8001c98 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height - 1);	//end row
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ffbe 	bl	8001c98 <lcd_data16>
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <lcd_send>:

static void lcd_send(uint16_t value) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) { //checks if value is a command (9th bit is 1) or data (9th bit is 0)
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <lcd_send+0x20>
		lcd_cmd(value);
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff5f 	bl	8001c00 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8001d42:	e004      	b.n	8001d4e <lcd_send+0x2a>
		lcd_data(value);
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff7f 	bl	8001c4c <lcd_data>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <lcd_init>:
		0x22, 0x1f, 0x1b, 0x23, 0x37, 0x00, 0x07, 0x02, 0x10, CMD(
				ST7735S_GAMCTRN1), 0x0f, 0x1b, 0x0f, 0x17, 0x33, 0x2c, 0x29,
		0x2e, 0x30, 0x30, 0x39, 0x3f, 0x00, 0x07, 0x03, 0x10, CMD(0xf0), 0x01,
		CMD(0xf6), 0x00, CMD(ST7735S_COLMOD), 0x05, CMD(ST7735S_MADCTL), 0x00, };

void lcd_init(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
	int i;

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d64:	4817      	ldr	r0, [pc, #92]	; (8001dc4 <lcd_init+0x6c>)
 8001d66:	f002 fe1b 	bl	80049a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001d6a:	2064      	movs	r0, #100	; 0x64
 8001d6c:	f001 fbe4 	bl	8003538 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001d70:	2201      	movs	r2, #1
 8001d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d76:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <lcd_init+0x6c>)
 8001d78:	f002 fe12 	bl	80049a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001d7c:	2064      	movs	r0, #100	; 0x64
 8001d7e:	f001 fbdb 	bl	8003538 <HAL_Delay>

	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	e009      	b.n	8001d9c <lcd_init+0x44>
		lcd_send(init_table[i]);
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <lcd_init+0x70>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ffc7 	bl	8001d24 <lcd_send>
	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b4b      	cmp	r3, #75	; 0x4b
 8001da0:	d9f2      	bls.n	8001d88 <lcd_init+0x30>
	}

	HAL_Delay(200);
 8001da2:	20c8      	movs	r0, #200	; 0xc8
 8001da4:	f001 fbc8 	bl	8003538 <HAL_Delay>

	lcd_cmd(ST7735S_SLPOUT);
 8001da8:	2011      	movs	r0, #17
 8001daa:	f7ff ff29 	bl	8001c00 <lcd_cmd>
	HAL_Delay(120);
 8001dae:	2078      	movs	r0, #120	; 0x78
 8001db0:	f001 fbc2 	bl	8003538 <HAL_Delay>

	lcd_cmd(ST7735S_DISPON);
 8001db4:	2029      	movs	r0, #41	; 0x29
 8001db6:	f7ff ff23 	bl	8001c00 <lcd_cmd>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	0800c404 	.word	0x0800c404

08001dcc <lcd_put_pixel>:


void lcd_put_pixel(int x, int y, uint16_t color) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	01da      	lsls	r2, r3, #7
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	4905      	ldr	r1, [pc, #20]	; (8001df8 <lcd_put_pixel+0x2c>)
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	200000b4 	.word	0x200000b4

08001dfc <lcd_copy>:


void lcd_copy(void) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001e00:	23a0      	movs	r3, #160	; 0xa0
 8001e02:	2280      	movs	r2, #128	; 0x80
 8001e04:	2100      	movs	r1, #0
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff ff5b 	bl	8001cc2 <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 8001e0c:	202c      	movs	r0, #44	; 0x2c
 8001e0e:	f7ff fef7 	bl	8001c00 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001e12:	2201      	movs	r2, #1
 8001e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e18:	4807      	ldr	r0, [pc, #28]	; (8001e38 <lcd_copy+0x3c>)
 8001e1a:	f002 fdc1 	bl	80049a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2140      	movs	r1, #64	; 0x40
 8001e22:	4806      	ldr	r0, [pc, #24]	; (8001e3c <lcd_copy+0x40>)
 8001e24:	f002 fdbc 	bl	80049a0 <HAL_GPIO_WritePin>
//	HAL_SPI_Transmit(&hspi2, (uint8_t *)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)frame_buffer, sizeof(frame_buffer));
 8001e28:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001e2c:	4904      	ldr	r1, [pc, #16]	; (8001e40 <lcd_copy+0x44>)
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <lcd_copy+0x48>)
 8001e30:	f004 f8ae 	bl	8005f90 <HAL_SPI_Transmit_DMA>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	200000b4 	.word	0x200000b4
 8001e44:	2000a7f8 	.word	0x2000a7f8

08001e48 <lcd_transfer_done>:


void lcd_transfer_done(void){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2140      	movs	r1, #64	; 0x40
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <lcd_transfer_done+0x14>)
 8001e52:	f002 fda5 	bl	80049a0 <HAL_GPIO_WritePin>
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40020400 	.word	0x40020400

08001e60 <__io_putchar>:
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int __io_putchar(int ch) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b0a      	cmp	r3, #10
 8001e6c:	d102      	bne.n	8001e74 <__io_putchar+0x14>
		__io_putchar('\r');
 8001e6e:	200d      	movs	r0, #13
 8001e70:	f7ff fff6 	bl	8001e60 <__io_putchar>
	}

	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001e74:	1d39      	adds	r1, r7, #4
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4803      	ldr	r0, [pc, #12]	; (8001e8c <__io_putchar+0x2c>)
 8001e7e:	f004 fd32 	bl	80068e6 <HAL_UART_Transmit>

	return 1;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2000a8fc 	.word	0x2000a8fc

08001e90 <clear_buffer>:
	while (*buf++ != '\0')
		i++;
	return i;
}

void clear_buffer(void) {
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUFFER_SIZE; i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	e007      	b.n	8001eac <clear_buffer+0x1c>
		buffer[i] = '\0';
 8001e9c:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <clear_buffer+0x30>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b7f      	cmp	r3, #127	; 0x7f
 8001eb0:	ddf4      	ble.n	8001e9c <clear_buffer+0xc>
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	2000a470 	.word	0x2000a470

08001ec4 <sd_card_mount>:

void sd_card_mount(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	490a      	ldr	r1, [pc, #40]	; (8001ef4 <sd_card_mount+0x30>)
 8001ecc:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <sd_card_mount+0x34>)
 8001ece:	f006 fd81 	bl	80089d4 <f_mount>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <sd_card_mount+0x38>)
 8001ed8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <sd_card_mount+0x38>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <sd_card_mount+0x26>
		printf("ERROR!!! in mounting SD CARD...\n\n");
 8001ee2:	4807      	ldr	r0, [pc, #28]	; (8001f00 <sd_card_mount+0x3c>)
 8001ee4:	f009 fc38 	bl	800b758 <puts>
	else
		printf("SD CARD mounted successfully...\n\n");
}
 8001ee8:	e002      	b.n	8001ef0 <sd_card_mount+0x2c>
		printf("SD CARD mounted successfully...\n\n");
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <sd_card_mount+0x40>)
 8001eec:	f009 fc34 	bl	800b758 <puts>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	0800bf18 	.word	0x0800bf18
 8001ef8:	2000a238 	.word	0x2000a238
 8001efc:	2000a508 	.word	0x2000a508
 8001f00:	0800bf1c 	.word	0x0800bf1c
 8001f04:	0800bf40 	.word	0x0800bf40

08001f08 <sd_card_check_capacity>:
	fresult = f_mount(NULL, "/", 1);
	if (fresult == FR_OK)
		printf("SD CARD UNMOUNTED successfully...\n");
}

void sd_card_check_capacity(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	f_getfree("", &fre_clust, &pfs);
 8001f0c:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <sd_card_check_capacity+0xa8>)
 8001f0e:	4929      	ldr	r1, [pc, #164]	; (8001fb4 <sd_card_check_capacity+0xac>)
 8001f10:	4829      	ldr	r0, [pc, #164]	; (8001fb8 <sd_card_check_capacity+0xb0>)
 8001f12:	f007 fb89 	bl	8009628 <f_getfree>
	total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <sd_card_check_capacity+0xa8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	3b02      	subs	r3, #2
 8001f1e:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <sd_card_check_capacity+0xa8>)
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	8952      	ldrh	r2, [r2, #10]
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe faeb 	bl	8000504 <__aeabi_ui2d>
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <sd_card_check_capacity+0xb4>)
 8001f34:	f7fe fb60 	bl	80005f8 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7fe fd6c 	bl	8000a1c <__aeabi_d2uiz>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4a1e      	ldr	r2, [pc, #120]	; (8001fc0 <sd_card_check_capacity+0xb8>)
 8001f48:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "SD CARD Total Size: \t%lu\n", total);
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <sd_card_check_capacity+0xb8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	491c      	ldr	r1, [pc, #112]	; (8001fc4 <sd_card_check_capacity+0xbc>)
 8001f52:	481d      	ldr	r0, [pc, #116]	; (8001fc8 <sd_card_check_capacity+0xc0>)
 8001f54:	f009 fc4c 	bl	800b7f0 <siprintf>
	printf(buffer);
 8001f58:	481b      	ldr	r0, [pc, #108]	; (8001fc8 <sd_card_check_capacity+0xc0>)
 8001f5a:	f009 fb77 	bl	800b64c <iprintf>
	clear_buffer();
 8001f5e:	f7ff ff97 	bl	8001e90 <clear_buffer>
	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <sd_card_check_capacity+0xa8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	895b      	ldrh	r3, [r3, #10]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <sd_card_check_capacity+0xac>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fb03 f302 	mul.w	r3, r3, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fac6 	bl	8000504 <__aeabi_ui2d>
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <sd_card_check_capacity+0xb4>)
 8001f7e:	f7fe fb3b 	bl	80005f8 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fd47 	bl	8000a1c <__aeabi_d2uiz>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <sd_card_check_capacity+0xc4>)
 8001f92:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "SD CARD Free Space: \t%lu\n\n", free_space);
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <sd_card_check_capacity+0xc4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	490d      	ldr	r1, [pc, #52]	; (8001fd0 <sd_card_check_capacity+0xc8>)
 8001f9c:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <sd_card_check_capacity+0xc0>)
 8001f9e:	f009 fc27 	bl	800b7f0 <siprintf>
	printf(buffer);
 8001fa2:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <sd_card_check_capacity+0xc0>)
 8001fa4:	f009 fb52 	bl	800b64c <iprintf>
	clear_buffer();
 8001fa8:	f7ff ff72 	bl	8001e90 <clear_buffer>
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	2000a4f4 	.word	0x2000a4f4
 8001fb4:	2000a208 	.word	0x2000a208
 8001fb8:	0800bf88 	.word	0x0800bf88
 8001fbc:	3fe00000 	.word	0x3fe00000
 8001fc0:	2000a520 	.word	0x2000a520
 8001fc4:	0800bf8c 	.word	0x0800bf8c
 8001fc8:	2000a470 	.word	0x2000a470
 8001fcc:	2000a46c 	.word	0x2000a46c
 8001fd0:	0800bfa8 	.word	0x0800bfa8

08001fd4 <sd_card_basic_write_to_file>:

void sd_card_basic_write_to_file(char *filename) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001fdc:	2213      	movs	r2, #19
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	480e      	ldr	r0, [pc, #56]	; (800201c <sd_card_basic_write_to_file+0x48>)
 8001fe2:	f006 fd3d 	bl	8008a60 <f_open>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <sd_card_basic_write_to_file+0x4c>)
 8001fec:	701a      	strb	r2, [r3, #0]

	/* Writing text */
	f_puts(
 8001fee:	490b      	ldr	r1, [pc, #44]	; (800201c <sd_card_basic_write_to_file+0x48>)
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <sd_card_basic_write_to_file+0x50>)
 8001ff2:	f007 fc45 	bl	8009880 <f_puts>
			"DateTime - Channel0 - Channel1 - Channel2 - Channel3 - Channel4 - Channel5 - Channel6 - Channel7\n",
			&fil);

	/* Close file */
	fresult = f_close(&fil);
 8001ff6:	4809      	ldr	r0, [pc, #36]	; (800201c <sd_card_basic_write_to_file+0x48>)
 8001ff8:	f007 f8e3 	bl	80091c2 <f_close>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <sd_card_basic_write_to_file+0x4c>)
 8002002:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <sd_card_basic_write_to_file+0x4c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <sd_card_basic_write_to_file+0x3e>
		printf("READINGS.txt created and the data is written \n");
 800200c:	4806      	ldr	r0, [pc, #24]	; (8002028 <sd_card_basic_write_to_file+0x54>)
 800200e:	f009 fba3 	bl	800b758 <puts>

}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000a524 	.word	0x2000a524
 8002020:	2000a508 	.word	0x2000a508
 8002024:	0800bfc4 	.word	0x0800bfc4
 8002028:	0800c028 	.word	0x0800c028

0800202c <sd_card_update_file>:
	f_close(&fil);

	clear_buffer();
}

void sd_card_update_file(char *filename, uint16_t *measurements) {
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202e:	b08b      	sub	sp, #44	; 0x2c
 8002030:	af08      	add	r7, sp, #32
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
	/* Open the file with write access */
	fresult = f_open(&fil, filename, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8002036:	2203      	movs	r2, #3
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	482a      	ldr	r0, [pc, #168]	; (80020e4 <sd_card_update_file+0xb8>)
 800203c:	f006 fd10 	bl	8008a60 <f_open>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <sd_card_update_file+0xbc>)
 8002046:	701a      	strb	r2, [r3, #0]

	/* Move to offset to the end of the file */
	fresult = f_lseek(&fil, f_size(&fil));
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <sd_card_update_file+0xb8>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4619      	mov	r1, r3
 800204e:	4825      	ldr	r0, [pc, #148]	; (80020e4 <sd_card_update_file+0xb8>)
 8002050:	f007 f8e1 	bl	8009216 <f_lseek>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <sd_card_update_file+0xbc>)
 800205a:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <sd_card_update_file+0xbc>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <sd_card_update_file+0x3e>
		printf("About to update the filename.txt\n");
 8002064:	4821      	ldr	r0, [pc, #132]	; (80020ec <sd_card_update_file+0xc0>)
 8002066:	f009 fb77 	bl	800b758 <puts>

	/* write the string to the file */
	snprintf(buffer, sizeof(buffer),
			"01/01/2021 - %d - %d - %d - %d - %d - %d - %d - %d",
			measurements[0], measurements[1], measurements[2], measurements[3],
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800206e:	469c      	mov	ip, r3
			measurements[0], measurements[1], measurements[2], measurements[3],
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	3302      	adds	r3, #2
 8002074:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 8002076:	461a      	mov	r2, r3
			measurements[0], measurements[1], measurements[2], measurements[3],
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	3304      	adds	r3, #4
 800207c:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800207e:	4619      	mov	r1, r3
			measurements[0], measurements[1], measurements[2], measurements[3],
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	3306      	adds	r3, #6
 8002084:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 8002086:	4618      	mov	r0, r3
			measurements[4], measurements[5], measurements[6], measurements[7]);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	3308      	adds	r3, #8
 800208c:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800208e:	461c      	mov	r4, r3
			measurements[4], measurements[5], measurements[6], measurements[7]);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	330a      	adds	r3, #10
 8002094:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 8002096:	461d      	mov	r5, r3
			measurements[4], measurements[5], measurements[6], measurements[7]);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	330c      	adds	r3, #12
 800209c:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800209e:	461e      	mov	r6, r3
			measurements[4], measurements[5], measurements[6], measurements[7]);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	330e      	adds	r3, #14
 80020a4:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 80020a6:	9306      	str	r3, [sp, #24]
 80020a8:	9605      	str	r6, [sp, #20]
 80020aa:	9504      	str	r5, [sp, #16]
 80020ac:	9403      	str	r4, [sp, #12]
 80020ae:	9002      	str	r0, [sp, #8]
 80020b0:	9101      	str	r1, [sp, #4]
 80020b2:	9200      	str	r2, [sp, #0]
 80020b4:	4663      	mov	r3, ip
 80020b6:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <sd_card_update_file+0xc4>)
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	480e      	ldr	r0, [pc, #56]	; (80020f4 <sd_card_update_file+0xc8>)
 80020bc:	f009 fb64 	bl	800b788 <sniprintf>
	fresult = f_puts(buffer, &fil);
 80020c0:	4908      	ldr	r1, [pc, #32]	; (80020e4 <sd_card_update_file+0xb8>)
 80020c2:	480c      	ldr	r0, [pc, #48]	; (80020f4 <sd_card_update_file+0xc8>)
 80020c4:	f007 fbdc 	bl	8009880 <f_puts>
 80020c8:	4603      	mov	r3, r0
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <sd_card_update_file+0xbc>)
 80020ce:	701a      	strb	r2, [r3, #0]

	f_close(&fil);
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <sd_card_update_file+0xb8>)
 80020d2:	f007 f876 	bl	80091c2 <f_close>

	clear_buffer();
 80020d6:	f7ff fedb 	bl	8001e90 <clear_buffer>
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000a524 	.word	0x2000a524
 80020e8:	2000a508 	.word	0x2000a508
 80020ec:	0800c128 	.word	0x0800c128
 80020f0:	0800c14c 	.word	0x0800c14c
 80020f4:	2000a470 	.word	0x2000a470

080020f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80020fe:	f001 f9a9 	bl	8003454 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002102:	f000 fa29 	bl	8002558 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002106:	f7ff fc63 	bl	80019d0 <MX_GPIO_Init>
	MX_DMA_Init();
 800210a:	f7fe ff6b 	bl	8000fe4 <MX_DMA_Init>
	MX_SPI1_Init();
 800210e:	f000 fd93 	bl	8002c38 <MX_SPI1_Init>
	MX_ADC1_Init();
 8002112:	f7fe fe1f 	bl	8000d54 <MX_ADC1_Init>
	MX_I2C1_Init();
 8002116:	f7ff fcfd 	bl	8001b14 <MX_I2C1_Init>
	MX_RTC_Init();
 800211a:	f000 fd3b 	bl	8002b94 <MX_RTC_Init>
	MX_SPI2_Init();
 800211e:	f000 fdc1 	bl	8002ca4 <MX_SPI2_Init>
	MX_TIM2_Init();
 8002122:	f001 f843 	bl	80031ac <MX_TIM2_Init>
	MX_USART6_UART_Init();
 8002126:	f001 f8f9 	bl	800331c <MX_USART6_UART_Init>
	MX_FATFS_Init();
 800212a:	f004 fea5 	bl	8006e78 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
//*******************************************************SD_CARD FUNCTIONS**************************************
	HAL_Delay(500);
 800212e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002132:	f001 fa01 	bl	8003538 <HAL_Delay>

	/*************** Card capacity details ********************/
	sd_card_mount();
 8002136:	f7ff fec5 	bl	8001ec4 <sd_card_mount>
	/* Check free space */
	sd_card_check_capacity();
 800213a:	f7ff fee5 	bl	8001f08 <sd_card_check_capacity>

	/************* The following operation is using PUTS and GETS *********************/
	snprintf(buffer, sizeof(buffer), "READINGS.txt"); //change it later to datetime from RTC !!DEBUG
 800213e:	4aab      	ldr	r2, [pc, #684]	; (80023ec <main+0x2f4>)
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	48ab      	ldr	r0, [pc, #684]	; (80023f0 <main+0x2f8>)
 8002144:	f009 fb20 	bl	800b788 <sniprintf>
	sd_card_basic_write_to_file(buffer);
 8002148:	48a9      	ldr	r0, [pc, #676]	; (80023f0 <main+0x2f8>)
 800214a:	f7ff ff43 	bl	8001fd4 <sd_card_basic_write_to_file>

//*******************************************************SD_CARD FUNCTIONS**************************************
	printf("Starting..\n");
 800214e:	48a9      	ldr	r0, [pc, #676]	; (80023f4 <main+0x2fc>)
 8002150:	f009 fb02 	bl	800b758 <puts>
	fflush(stdout);
 8002154:	4ba8      	ldr	r3, [pc, #672]	; (80023f8 <main+0x300>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4618      	mov	r0, r3
 800215c:	f008 fd22 	bl	800aba4 <fflush>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensor_data,
 8002160:	2208      	movs	r2, #8
 8002162:	49a6      	ldr	r1, [pc, #664]	; (80023fc <main+0x304>)
 8002164:	48a6      	ldr	r0, [pc, #664]	; (8002400 <main+0x308>)
 8002166:	f001 fa4f 	bl	8003608 <HAL_ADC_Start_DMA>
			sizeof(sensor_data) / sizeof(int16_t));
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800216a:	213c      	movs	r1, #60	; 0x3c
 800216c:	48a5      	ldr	r0, [pc, #660]	; (8002404 <main+0x30c>)
 800216e:	f004 f9cb 	bl	8006508 <HAL_TIM_Encoder_Start>
	//start LCD
	lcd_init();
 8002172:	f7ff fdf1 	bl	8001d58 <lcd_init>
	sd_card_basic_write_to_file("POMIARY.txt");
 8002176:	48a4      	ldr	r0, [pc, #656]	; (8002408 <main+0x310>)
 8002178:	f7ff ff2c 	bl	8001fd4 <sd_card_basic_write_to_file>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		switch (activeScreen) {
 800217c:	4ba3      	ldr	r3, [pc, #652]	; (800240c <main+0x314>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b03      	cmp	r3, #3
 8002184:	f200 8110 	bhi.w	80023a8 <main+0x2b0>
 8002188:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <main+0x98>)
 800218a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218e:	bf00      	nop
 8002190:	080021a1 	.word	0x080021a1
 8002194:	08002261 	.word	0x08002261
 8002198:	080022dd 	.word	0x080022dd
 800219c:	08002343 	.word	0x08002343
		case 0:
			for (int currentIter = 0; currentIter < oversamplingPrescaler;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e01f      	b.n	80021e6 <main+0xee>
					++currentIter) {
				for (int currentChan = 0; currentChan < activeChannels;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	e010      	b.n	80021ce <main+0xd6>
						++currentChan) {
					summed_data[currentChan] += sensor_data[currentChan];
 80021ac:	4a98      	ldr	r2, [pc, #608]	; (8002410 <main+0x318>)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80021b4:	4991      	ldr	r1, [pc, #580]	; (80023fc <main+0x304>)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80021bc:	4413      	add	r3, r2
 80021be:	b299      	uxth	r1, r3
 80021c0:	4a93      	ldr	r2, [pc, #588]	; (8002410 <main+0x318>)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						++currentChan) {
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
				for (int currentChan = 0; currentChan < activeChannels;
 80021ce:	4b91      	ldr	r3, [pc, #580]	; (8002414 <main+0x31c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4293      	cmp	r3, r2
 80021d8:	dbe8      	blt.n	80021ac <main+0xb4>
					assert_param(summed_data[currentChan] <= UINT16_MAX);
				}
				HAL_Delay(50);
 80021da:	2032      	movs	r0, #50	; 0x32
 80021dc:	f001 f9ac 	bl	8003538 <HAL_Delay>
					++currentIter) {
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3301      	adds	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
			for (int currentIter = 0; currentIter < oversamplingPrescaler;
 80021e6:	4b8c      	ldr	r3, [pc, #560]	; (8002418 <main+0x320>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4293      	cmp	r3, r2
 80021f0:	dbd9      	blt.n	80021a6 <main+0xae>
			}
			for (int var = 0; var < activeChannels; ++var) {
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	e015      	b.n	8002224 <main+0x12c>
				averaged_data[var] = summed_data[var] / oversamplingPrescaler;
 80021f8:	4a85      	ldr	r2, [pc, #532]	; (8002410 <main+0x318>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002200:	461a      	mov	r2, r3
 8002202:	4b85      	ldr	r3, [pc, #532]	; (8002418 <main+0x320>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	fb92 f3f3 	sdiv	r3, r2, r3
 800220a:	b299      	uxth	r1, r3
 800220c:	4a83      	ldr	r2, [pc, #524]	; (800241c <main+0x324>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				summed_data[var] = 0;
 8002214:	4a7e      	ldr	r2, [pc, #504]	; (8002410 <main+0x318>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2100      	movs	r1, #0
 800221a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int var = 0; var < activeChannels; ++var) {
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3301      	adds	r3, #1
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	4b7b      	ldr	r3, [pc, #492]	; (8002414 <main+0x31c>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4293      	cmp	r3, r2
 800222e:	dbe3      	blt.n	80021f8 <main+0x100>
			}
			show_sensor_data(averaged_data, activeChannels);
 8002230:	4b78      	ldr	r3, [pc, #480]	; (8002414 <main+0x31c>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	4879      	ldr	r0, [pc, #484]	; (800241c <main+0x324>)
 8002238:	f000 fbc6 	bl	80029c8 <show_sensor_data>
			sd_card_update_file("POMIARY.txt", averaged_data);
 800223c:	4977      	ldr	r1, [pc, #476]	; (800241c <main+0x324>)
 800223e:	4872      	ldr	r0, [pc, #456]	; (8002408 <main+0x310>)
 8002240:	f7ff fef4 	bl	800202c <sd_card_update_file>
			HAL_Delay(1000);
 8002244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002248:	f001 f976 	bl	8003538 <HAL_Delay>
			printf("Sensor data case executed.\n");
 800224c:	4874      	ldr	r0, [pc, #464]	; (8002420 <main+0x328>)
 800224e:	f009 fa83 	bl	800b758 <puts>
			fflush(stdout);
 8002252:	4b69      	ldr	r3, [pc, #420]	; (80023f8 <main+0x300>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4618      	mov	r0, r3
 800225a:	f008 fca3 	bl	800aba4 <fflush>
			break;
 800225e:	e0a3      	b.n	80023a8 <main+0x2b0>
		case 1:
			currentItem = (__HAL_TIM_GET_COUNTER(&htim2) >> 1) % menuMaxIndex;
 8002260:	4b68      	ldr	r3, [pc, #416]	; (8002404 <main+0x30c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	085b      	lsrs	r3, r3, #1
 8002268:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <main+0x32c>)
 800226a:	8812      	ldrh	r2, [r2, #0]
 800226c:	b212      	sxth	r2, r2
 800226e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002272:	fb02 f201 	mul.w	r2, r2, r1
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <main+0x330>)
 800227c:	701a      	strb	r2, [r3, #0]
			assert(currentItem <= menuMaxIndex - 1);
 800227e:	4b69      	ldr	r3, [pc, #420]	; (8002424 <main+0x32c>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b21b      	sxth	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	4b68      	ldr	r3, [pc, #416]	; (8002428 <main+0x330>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	dc06      	bgt.n	800229c <main+0x1a4>
 800228e:	4b67      	ldr	r3, [pc, #412]	; (800242c <main+0x334>)
 8002290:	4a67      	ldr	r2, [pc, #412]	; (8002430 <main+0x338>)
 8002292:	f240 1161 	movw	r1, #353	; 0x161
 8002296:	4867      	ldr	r0, [pc, #412]	; (8002434 <main+0x33c>)
 8002298:	f008 fb9e 	bl	800a9d8 <__assert_func>
			show_menu_window();
 800229c:	f000 f9fe 	bl	800269c <show_menu_window>
			deselect_item(previousItem);
 80022a0:	4b65      	ldr	r3, [pc, #404]	; (8002438 <main+0x340>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fc4c 	bl	8002b42 <deselect_item>
			select_item(currentItem);
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <main+0x330>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fc1e 	bl	8002af0 <select_item>
			if (previousItem != currentItem) {
 80022b4:	4b60      	ldr	r3, [pc, #384]	; (8002438 <main+0x340>)
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <main+0x330>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d003      	beq.n	80022c8 <main+0x1d0>
				previousItem = currentItem;
 80022c0:	4b59      	ldr	r3, [pc, #356]	; (8002428 <main+0x330>)
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	4b5c      	ldr	r3, [pc, #368]	; (8002438 <main+0x340>)
 80022c6:	701a      	strb	r2, [r3, #0]
			}
			printf("Main menu case executed..\n");
 80022c8:	485c      	ldr	r0, [pc, #368]	; (800243c <main+0x344>)
 80022ca:	f009 fa45 	bl	800b758 <puts>
			fflush(stdout);
 80022ce:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <main+0x300>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f008 fc65 	bl	800aba4 <fflush>
			break;
 80022da:	e065      	b.n	80023a8 <main+0x2b0>
		case 2:
			activeChannels = __HAL_TIM_GET_COUNTER(&htim2) >> 1;
 80022dc:	4b49      	ldr	r3, [pc, #292]	; (8002404 <main+0x30c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <main+0x31c>)
 80022e8:	701a      	strb	r2, [r3, #0]
			if (activeChannels < 1) {
 80022ea:	4b4a      	ldr	r3, [pc, #296]	; (8002414 <main+0x31c>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <main+0x208>
				activeChannels = 1;
 80022f2:	4b48      	ldr	r3, [pc, #288]	; (8002414 <main+0x31c>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 2);
 80022f8:	4b42      	ldr	r3, [pc, #264]	; (8002404 <main+0x30c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2202      	movs	r2, #2
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (activeChannels > 8) {
 8002300:	4b44      	ldr	r3, [pc, #272]	; (8002414 <main+0x31c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d906      	bls.n	8002316 <main+0x21e>
				activeChannels = 8;
 8002308:	4b42      	ldr	r3, [pc, #264]	; (8002414 <main+0x31c>)
 800230a:	2208      	movs	r2, #8
 800230c:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 16);
 800230e:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <main+0x30c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2210      	movs	r2, #16
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
			}
			update_channels_value(activeChannels, rgb565(200, 200, 200));
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <main+0x31c>)
 8002318:	781c      	ldrb	r4, [r3, #0]
 800231a:	22c8      	movs	r2, #200	; 0xc8
 800231c:	21c8      	movs	r1, #200	; 0xc8
 800231e:	20c8      	movs	r0, #200	; 0xc8
 8002320:	f008 fb28 	bl	800a974 <rgb565>
 8002324:	4603      	mov	r3, r0
 8002326:	4619      	mov	r1, r3
 8002328:	4620      	mov	r0, r4
 800232a:	f000 fa5d 	bl	80027e8 <update_channels_value>
			printf("Active channels case executed..\n");
 800232e:	4844      	ldr	r0, [pc, #272]	; (8002440 <main+0x348>)
 8002330:	f009 fa12 	bl	800b758 <puts>
			fflush(stdout);
 8002334:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <main+0x300>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4618      	mov	r0, r3
 800233c:	f008 fc32 	bl	800aba4 <fflush>
			break;
 8002340:	e032      	b.n	80023a8 <main+0x2b0>
		case 3:
			oversamplingPrescaler = __HAL_TIM_GET_COUNTER(&htim2) >> 1;
 8002342:	4b30      	ldr	r3, [pc, #192]	; (8002404 <main+0x30c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b32      	ldr	r3, [pc, #200]	; (8002418 <main+0x320>)
 800234e:	701a      	strb	r2, [r3, #0]
			if (oversamplingPrescaler < 1) {
 8002350:	4b31      	ldr	r3, [pc, #196]	; (8002418 <main+0x320>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d106      	bne.n	8002366 <main+0x26e>
				oversamplingPrescaler = 1;
 8002358:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <main+0x320>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 2);
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <main+0x30c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2202      	movs	r2, #2
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (oversamplingPrescaler > 15) {
 8002366:	4b2c      	ldr	r3, [pc, #176]	; (8002418 <main+0x320>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	d906      	bls.n	800237c <main+0x284>
				oversamplingPrescaler = 15;
 800236e:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <main+0x320>)
 8002370:	220f      	movs	r2, #15
 8002372:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 30); //encoder counts up to 19 so 19*2 is max available value rn
 8002374:	4b23      	ldr	r3, [pc, #140]	; (8002404 <main+0x30c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	221e      	movs	r2, #30
 800237a:	625a      	str	r2, [r3, #36]	; 0x24
			}
			update_oversampling_prescaler(oversamplingPrescaler,
 800237c:	4b26      	ldr	r3, [pc, #152]	; (8002418 <main+0x320>)
 800237e:	781c      	ldrb	r4, [r3, #0]
 8002380:	22dc      	movs	r2, #220	; 0xdc
 8002382:	21dc      	movs	r1, #220	; 0xdc
 8002384:	20dc      	movs	r0, #220	; 0xdc
 8002386:	f008 faf5 	bl	800a974 <rgb565>
 800238a:	4603      	mov	r3, r0
 800238c:	4619      	mov	r1, r3
 800238e:	4620      	mov	r0, r4
 8002390:	f000 fa90 	bl	80028b4 <update_oversampling_prescaler>
					rgb565(220, 220, 220));
			printf("Oversampling case executed...\n");
 8002394:	482b      	ldr	r0, [pc, #172]	; (8002444 <main+0x34c>)
 8002396:	f009 f9df 	bl	800b758 <puts>
			fflush(stdout);
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <main+0x300>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f008 fbff 	bl	800aba4 <fflush>
			break;
 80023a6:	bf00      	nop
		}
		if (encoderBtnFlag) {
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <main+0x350>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 808f 	beq.w	80024d2 <main+0x3da>
			encoderBtnFlag = 0;
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <main+0x350>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
			switch (activeScreen) {
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <main+0x314>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d87c      	bhi.n	80024be <main+0x3c6>
 80023c4:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <main+0x2d4>)
 80023c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ca:	bf00      	nop
 80023cc:	080023dd 	.word	0x080023dd
 80023d0:	0800244d 	.word	0x0800244d
 80023d4:	0800249f 	.word	0x0800249f
 80023d8:	080024af 	.word	0x080024af
			case 0: //sensor to menu
				__HAL_TIM_SET_COUNTER(&htim2, 0);
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <main+0x30c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <main+0x314>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
				break;
 80023ea:	e069      	b.n	80024c0 <main+0x3c8>
 80023ec:	0800c058 	.word	0x0800c058
 80023f0:	2000a470 	.word	0x2000a470
 80023f4:	0800c1d4 	.word	0x0800c1d4
 80023f8:	20000030 	.word	0x20000030
 80023fc:	2000a20c 	.word	0x2000a20c
 8002400:	2000a10c 	.word	0x2000a10c
 8002404:	2000a8b4 	.word	0x2000a8b4
 8002408:	0800c1e0 	.word	0x0800c1e0
 800240c:	2000a0b4 	.word	0x2000a0b4
 8002410:	2000a4f8 	.word	0x2000a4f8
 8002414:	20000004 	.word	0x20000004
 8002418:	20000005 	.word	0x20000005
 800241c:	2000a50c 	.word	0x2000a50c
 8002420:	0800c1ec 	.word	0x0800c1ec
 8002424:	20000002 	.word	0x20000002
 8002428:	2000a51c 	.word	0x2000a51c
 800242c:	0800c208 	.word	0x0800c208
 8002430:	0800f454 	.word	0x0800f454
 8002434:	0800c228 	.word	0x0800c228
 8002438:	2000a21c 	.word	0x2000a21c
 800243c:	0800c23c 	.word	0x0800c23c
 8002440:	0800c258 	.word	0x0800c258
 8002444:	0800c278 	.word	0x0800c278
 8002448:	2000a21d 	.word	0x2000a21d
			case 1:	//menu to ...
				//menu to sensor
				if (currentItem == (menuMaxIndex - 1)) {
 800244c:	4b36      	ldr	r3, [pc, #216]	; (8002528 <main+0x430>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b36      	ldr	r3, [pc, #216]	; (800252c <main+0x434>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b21b      	sxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	429a      	cmp	r2, r3
 800245c:	d103      	bne.n	8002466 <main+0x36e>
					activeScreen = 0;
 800245e:	4b34      	ldr	r3, [pc, #208]	; (8002530 <main+0x438>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
					break;
 8002464:	e02c      	b.n	80024c0 <main+0x3c8>
				}
				//menu to activechannels
				else if (currentItem == 0) {
 8002466:	4b30      	ldr	r3, [pc, #192]	; (8002528 <main+0x430>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <main+0x38a>
					__HAL_TIM_GET_COUNTER(&htim2) = activeChannels * 2; //you can't assign value to shifted value, hence no >> is used, silly me tried..
 800246e:	4b31      	ldr	r3, [pc, #196]	; (8002534 <main+0x43c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	005a      	lsls	r2, r3, #1
 8002474:	4b30      	ldr	r3, [pc, #192]	; (8002538 <main+0x440>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 2;
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <main+0x438>)
 800247c:	2202      	movs	r2, #2
 800247e:	701a      	strb	r2, [r3, #0]
					break;
 8002480:	e01e      	b.n	80024c0 <main+0x3c8>
				} else if (currentItem == 1) {
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <main+0x430>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d109      	bne.n	800249e <main+0x3a6>
					__HAL_TIM_GET_COUNTER(&htim2) = oversamplingPrescaler * 2; //you can't assign value to shifted value, hence no >> is used, silly me tried..
 800248a:	4b2c      	ldr	r3, [pc, #176]	; (800253c <main+0x444>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	005a      	lsls	r2, r3, #1
 8002490:	4b29      	ldr	r3, [pc, #164]	; (8002538 <main+0x440>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 3;
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <main+0x438>)
 8002498:	2203      	movs	r2, #3
 800249a:	701a      	strb	r2, [r3, #0]
					break;
 800249c:	e010      	b.n	80024c0 <main+0x3c8>
				}
			case 2:
				__HAL_TIM_GET_COUNTER(&htim2) = 0;
 800249e:	4b26      	ldr	r3, [pc, #152]	; (8002538 <main+0x440>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2200      	movs	r2, #0
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <main+0x438>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
				break;
 80024ac:	e008      	b.n	80024c0 <main+0x3c8>
			case 3:
				__HAL_TIM_GET_COUNTER(&htim2) = 0;
 80024ae:	4b22      	ldr	r3, [pc, #136]	; (8002538 <main+0x440>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2200      	movs	r2, #0
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <main+0x438>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
				break;
 80024bc:	e000      	b.n	80024c0 <main+0x3c8>
			default:
				break;
 80024be:	bf00      	nop
			}
			printf("Button interrupt executed....\n");
 80024c0:	481f      	ldr	r0, [pc, #124]	; (8002540 <main+0x448>)
 80024c2:	f009 f949 	bl	800b758 <puts>
			fflush(stdout);
 80024c6:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <main+0x44c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f008 fb69 	bl	800aba4 <fflush>
		}

		snprintf(debug_text, 25, "MENU:%u | active:%d", currentItem,
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <main+0x430>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <main+0x438>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	4a19      	ldr	r2, [pc, #100]	; (8002548 <main+0x450>)
 80024e4:	2119      	movs	r1, #25
 80024e6:	4819      	ldr	r0, [pc, #100]	; (800254c <main+0x454>)
 80024e8:	f009 f94e 	bl	800b788 <sniprintf>
				activeScreen);
		hagl_put_text(debug_text, 10, 145, rgb565(245, 245, 255), font6x9);
 80024ec:	22ff      	movs	r2, #255	; 0xff
 80024ee:	21f5      	movs	r1, #245	; 0xf5
 80024f0:	20f5      	movs	r0, #245	; 0xf5
 80024f2:	f008 fa3f 	bl	800a974 <rgb565>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <main+0x458>)
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4613      	mov	r3, r2
 8002500:	2291      	movs	r2, #145	; 0x91
 8002502:	210a      	movs	r1, #10
 8002504:	4811      	ldr	r0, [pc, #68]	; (800254c <main+0x454>)
 8002506:	f007 ffeb 	bl	800a4e0 <hagl_put_text>
		lcd_copy();
 800250a:	f7ff fc77 	bl	8001dfc <lcd_copy>
		printf("Main while loop executed.............................\n");
 800250e:	4811      	ldr	r0, [pc, #68]	; (8002554 <main+0x45c>)
 8002510:	f009 f922 	bl	800b758 <puts>
		fflush(stdout);
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <main+0x44c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4618      	mov	r0, r3
 800251c:	f008 fb42 	bl	800aba4 <fflush>
		HAL_Delay(100);
 8002520:	2064      	movs	r0, #100	; 0x64
 8002522:	f001 f809 	bl	8003538 <HAL_Delay>
		switch (activeScreen) {
 8002526:	e629      	b.n	800217c <main+0x84>
 8002528:	2000a51c 	.word	0x2000a51c
 800252c:	20000002 	.word	0x20000002
 8002530:	2000a0b4 	.word	0x2000a0b4
 8002534:	20000004 	.word	0x20000004
 8002538:	2000a8b4 	.word	0x2000a8b4
 800253c:	20000005 	.word	0x20000005
 8002540:	0800c298 	.word	0x0800c298
 8002544:	20000030 	.word	0x20000030
 8002548:	0800c2b8 	.word	0x0800c2b8
 800254c:	2000a754 	.word	0x2000a754
 8002550:	0800c49c 	.word	0x0800c49c
 8002554:	0800c2cc 	.word	0x0800c2cc

08002558 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b094      	sub	sp, #80	; 0x50
 800255c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800255e:	f107 0320 	add.w	r3, r7, #32
 8002562:	2230      	movs	r2, #48	; 0x30
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f008 fcd0 	bl	800af0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <SystemClock_Config+0xd0>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	4a28      	ldr	r2, [pc, #160]	; (8002628 <SystemClock_Config+0xd0>)
 8002586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258a:	6413      	str	r3, [r2, #64]	; 0x40
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <SystemClock_Config+0xd0>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002598:	2300      	movs	r3, #0
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	4b23      	ldr	r3, [pc, #140]	; (800262c <SystemClock_Config+0xd4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <SystemClock_Config+0xd4>)
 80025a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b1f      	ldr	r3, [pc, #124]	; (800262c <SystemClock_Config+0xd4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80025b8:	230a      	movs	r3, #10
 80025ba:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025bc:	2301      	movs	r3, #1
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025c0:	2310      	movs	r3, #16
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80025c4:	2301      	movs	r3, #1
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025c8:	2302      	movs	r3, #2
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025cc:	2300      	movs	r3, #0
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80025d0:	2308      	movs	r3, #8
 80025d2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 80025d4:	2354      	movs	r3, #84	; 0x54
 80025d6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025d8:	2302      	movs	r3, #2
 80025da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80025dc:	2304      	movs	r3, #4
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80025e0:	f107 0320 	add.w	r3, r7, #32
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fb51 	bl	8004c8c <HAL_RCC_OscConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <SystemClock_Config+0x9c>
		Error_Handler();
 80025f0:	f000 f84e 	bl	8002690 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80025f4:	230f      	movs	r3, #15
 80025f6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025f8:	2302      	movs	r3, #2
 80025fa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002604:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	2102      	movs	r1, #2
 8002610:	4618      	mov	r0, r3
 8002612:	f002 fdb3 	bl	800517c <HAL_RCC_ClockConfig>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <SystemClock_Config+0xc8>
		Error_Handler();
 800261c:	f000 f838 	bl	8002690 <Error_Handler>
	}
}
 8002620:	bf00      	nop
 8002622:	3750      	adds	r7, #80	; 0x50
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800
 800262c:	40007000 	.word	0x40007000

08002630 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <HAL_SPI_TxCpltCallback+0x1c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_SPI_TxCpltCallback+0x14>
		lcd_transfer_done();
 8002640:	f7ff fc02 	bl	8001e48 <lcd_transfer_done>
	}
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	2000a7f8 	.word	0x2000a7f8

08002650 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENC_BTN_Pin) {
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002660:	d10e      	bne.n	8002680 <HAL_GPIO_EXTI_Callback+0x30>
		while (HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)
 8002662:	bf00      	nop
 8002664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002668:	4807      	ldr	r0, [pc, #28]	; (8002688 <HAL_GPIO_EXTI_Callback+0x38>)
 800266a:	f002 f981 	bl	8004970 <HAL_GPIO_ReadPin>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f7      	beq.n	8002664 <HAL_GPIO_EXTI_Callback+0x14>
				== GPIO_PIN_RESET) {

		}
		HAL_Delay(50); //basic debounce
 8002674:	2032      	movs	r0, #50	; 0x32
 8002676:	f000 ff5f 	bl	8003538 <HAL_Delay>
		encoderBtnFlag = 1;
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_GPIO_EXTI_Callback+0x3c>)
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
	}
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40020400 	.word	0x40020400
 800268c:	2000a21d 	.word	0x2000a21d

08002690 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
}
 8002696:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002698:	e7fe      	b.n	8002698 <Error_Handler+0x8>
	...

0800269c <show_menu_window>:

char text_to_parse[16];
static uint16_t ch_buffer[4];
static uint16_t os_buffer[4];

void show_menu_window() {
 800269c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af02      	add	r7, sp, #8
	hagl_clear_screen();
 80026a4:	f007 ffa2 	bl	800a5ec <hagl_clear_screen>

	for (int i = 0; i < 5; ++i) {
 80026a8:	2300      	movs	r3, #0
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	e028      	b.n	8002700 <show_menu_window+0x64>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	b21d      	sxth	r5, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	b21e      	sxth	r6, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80026be:	b29b      	uxth	r3, r3
 80026c0:	fa0f f883 	sxth.w	r8, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	fa0f f983 	sxth.w	r9, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f1c3 0305 	rsb	r3, r3, #5
 80026da:	b29b      	uxth	r3, r3
 80026dc:	b21c      	sxth	r4, r3
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	20ff      	movs	r0, #255	; 0xff
 80026e4:	f008 f946 	bl	800a974 <rgb565>
 80026e8:	4603      	mov	r3, r0
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	9400      	str	r4, [sp, #0]
 80026ee:	464b      	mov	r3, r9
 80026f0:	4642      	mov	r2, r8
 80026f2:	4631      	mov	r1, r6
 80026f4:	4628      	mov	r0, r5
 80026f6:	f007 ffa3 	bl	800a640 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3301      	adds	r3, #1
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b04      	cmp	r3, #4
 8002704:	ddd3      	ble.n	80026ae <show_menu_window+0x12>
				rgb565(255, 0, 0));
	}
	hagl_put_text("USTAWIENIA", 10, 10, rgb565(255, 0, 0), font6x9);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	20ff      	movs	r0, #255	; 0xff
 800270c:	f008 f932 	bl	800a974 <rgb565>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <show_menu_window+0x12c>)
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	220a      	movs	r2, #10
 800271c:	210a      	movs	r1, #10
 800271e:	482b      	ldr	r0, [pc, #172]	; (80027cc <show_menu_window+0x130>)
 8002720:	f007 fede 	bl	800a4e0 <hagl_put_text>
	hagl_put_text("Ilosc kanalow:", 10, 30, rgb565(0, 102, 204), font5x7);
 8002724:	22cc      	movs	r2, #204	; 0xcc
 8002726:	2166      	movs	r1, #102	; 0x66
 8002728:	2000      	movs	r0, #0
 800272a:	f008 f923 	bl	800a974 <rgb565>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <show_menu_window+0x134>)
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	4613      	mov	r3, r2
 8002738:	221e      	movs	r2, #30
 800273a:	210a      	movs	r1, #10
 800273c:	4825      	ldr	r0, [pc, #148]	; (80027d4 <show_menu_window+0x138>)
 800273e:	f007 fecf 	bl	800a4e0 <hagl_put_text>
	hagl_put_text("Oversampling:", 10, 50, rgb565(0, 102, 204), font5x7);
 8002742:	22cc      	movs	r2, #204	; 0xcc
 8002744:	2166      	movs	r1, #102	; 0x66
 8002746:	2000      	movs	r0, #0
 8002748:	f008 f914 	bl	800a974 <rgb565>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <show_menu_window+0x134>)
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	2232      	movs	r2, #50	; 0x32
 8002758:	210a      	movs	r1, #10
 800275a:	481f      	ldr	r0, [pc, #124]	; (80027d8 <show_menu_window+0x13c>)
 800275c:	f007 fec0 	bl	800a4e0 <hagl_put_text>
	hagl_put_text("Kalibracja", 10, 70, rgb565(0, 102, 204), font5x7);
 8002760:	22cc      	movs	r2, #204	; 0xcc
 8002762:	2166      	movs	r1, #102	; 0x66
 8002764:	2000      	movs	r0, #0
 8002766:	f008 f905 	bl	800a974 <rgb565>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <show_menu_window+0x134>)
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	4613      	mov	r3, r2
 8002774:	2246      	movs	r2, #70	; 0x46
 8002776:	210a      	movs	r1, #10
 8002778:	4818      	ldr	r0, [pc, #96]	; (80027dc <show_menu_window+0x140>)
 800277a:	f007 feb1 	bl	800a4e0 <hagl_put_text>
	hagl_put_text("Inne", 10, 90, rgb565(0, 102, 204), font5x7);
 800277e:	22cc      	movs	r2, #204	; 0xcc
 8002780:	2166      	movs	r1, #102	; 0x66
 8002782:	2000      	movs	r0, #0
 8002784:	f008 f8f6 	bl	800a974 <rgb565>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <show_menu_window+0x134>)
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	225a      	movs	r2, #90	; 0x5a
 8002794:	210a      	movs	r1, #10
 8002796:	4812      	ldr	r0, [pc, #72]	; (80027e0 <show_menu_window+0x144>)
 8002798:	f007 fea2 	bl	800a4e0 <hagl_put_text>
	hagl_put_text("Powrot", 10, 110, rgb565(102, 255, 102), font5x7);
 800279c:	2266      	movs	r2, #102	; 0x66
 800279e:	21ff      	movs	r1, #255	; 0xff
 80027a0:	2066      	movs	r0, #102	; 0x66
 80027a2:	f008 f8e7 	bl	800a974 <rgb565>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <show_menu_window+0x134>)
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	4613      	mov	r3, r2
 80027b0:	226e      	movs	r2, #110	; 0x6e
 80027b2:	210a      	movs	r1, #10
 80027b4:	480b      	ldr	r0, [pc, #44]	; (80027e4 <show_menu_window+0x148>)
 80027b6:	f007 fe93 	bl	800a4e0 <hagl_put_text>
	lcd_copy();
 80027ba:	f7ff fb1f 	bl	8001dfc <lcd_copy>
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027c8:	0800f45c 	.word	0x0800f45c
 80027cc:	0800c304 	.word	0x0800c304
 80027d0:	08012414 	.word	0x08012414
 80027d4:	0800c310 	.word	0x0800c310
 80027d8:	0800c320 	.word	0x0800c320
 80027dc:	0800c330 	.word	0x0800c330
 80027e0:	0800c33c 	.word	0x0800c33c
 80027e4:	0800c344 	.word	0x0800c344

080027e8 <update_channels_value>:

void update_channels_value(uint8_t activeChannels, uint16_t color) {
 80027e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027ec:	b087      	sub	sp, #28
 80027ee:	af02      	add	r7, sp, #8
 80027f0:	4603      	mov	r3, r0
 80027f2:	460a      	mov	r2, r1
 80027f4:	71fb      	strb	r3, [r7, #7]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80bb      	strh	r3, [r7, #4]
	hagl_clear_screen();
 80027fa:	f007 fef7 	bl	800a5ec <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e028      	b.n	8002856 <update_channels_value+0x6e>
			hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	b21d      	sxth	r5, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	b21e      	sxth	r6, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	b29b      	uxth	r3, r3
 8002810:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002814:	b29b      	uxth	r3, r3
 8002816:	fa0f f883 	sxth.w	r8, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	b29b      	uxth	r3, r3
 800281e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002822:	b29b      	uxth	r3, r3
 8002824:	fa0f f983 	sxth.w	r9, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	b29b      	uxth	r3, r3
 800282c:	f1c3 0305 	rsb	r3, r3, #5
 8002830:	b29b      	uxth	r3, r3
 8002832:	b21c      	sxth	r4, r3
 8002834:	2200      	movs	r2, #0
 8002836:	2100      	movs	r1, #0
 8002838:	20ff      	movs	r0, #255	; 0xff
 800283a:	f008 f89b 	bl	800a974 <rgb565>
 800283e:	4603      	mov	r3, r0
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	9400      	str	r4, [sp, #0]
 8002844:	464b      	mov	r3, r9
 8002846:	4642      	mov	r2, r8
 8002848:	4631      	mov	r1, r6
 800284a:	4628      	mov	r0, r5
 800284c:	f007 fef8 	bl	800a640 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3301      	adds	r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b04      	cmp	r3, #4
 800285a:	ddd3      	ble.n	8002804 <update_channels_value+0x1c>
					rgb565(255, 0, 0));
		}
	hagl_put_text("AKTYWNE KANALY", 20, 10, rgb565(255, 0, 0), font6x9);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	20ff      	movs	r0, #255	; 0xff
 8002862:	f008 f887 	bl	800a974 <rgb565>
 8002866:	4603      	mov	r3, r0
 8002868:	461a      	mov	r2, r3
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <update_channels_value+0xbc>)
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	4613      	mov	r3, r2
 8002870:	220a      	movs	r2, #10
 8002872:	2114      	movs	r1, #20
 8002874:	480c      	ldr	r0, [pc, #48]	; (80028a8 <update_channels_value+0xc0>)
 8002876:	f007 fe33 	bl	800a4e0 <hagl_put_text>
	snprintf(ch_buffer, 4, "%u", activeChannels);
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <update_channels_value+0xc4>)
 800287e:	2104      	movs	r1, #4
 8002880:	480b      	ldr	r0, [pc, #44]	; (80028b0 <update_channels_value+0xc8>)
 8002882:	f008 ff81 	bl	800b788 <sniprintf>
	hagl_put_text((char *)ch_buffer, 60, 50, color, font6x9);
 8002886:	88bb      	ldrh	r3, [r7, #4]
 8002888:	4a06      	ldr	r2, [pc, #24]	; (80028a4 <update_channels_value+0xbc>)
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	2232      	movs	r2, #50	; 0x32
 800288e:	213c      	movs	r1, #60	; 0x3c
 8002890:	4807      	ldr	r0, [pc, #28]	; (80028b0 <update_channels_value+0xc8>)
 8002892:	f007 fe25 	bl	800a4e0 <hagl_put_text>
	lcd_copy();
 8002896:	f7ff fab1 	bl	8001dfc <lcd_copy>
}
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028a4:	0800f45c 	.word	0x0800f45c
 80028a8:	0800c34c 	.word	0x0800c34c
 80028ac:	0800c35c 	.word	0x0800c35c
 80028b0:	2000a0b8 	.word	0x2000a0b8

080028b4 <update_oversampling_prescaler>:

void update_oversampling_prescaler(uint8_t oversamplingPrescaler, uint16_t color) {
 80028b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028b8:	b087      	sub	sp, #28
 80028ba:	af02      	add	r7, sp, #8
 80028bc:	4603      	mov	r3, r0
 80028be:	460a      	mov	r2, r1
 80028c0:	71fb      	strb	r3, [r7, #7]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80bb      	strh	r3, [r7, #4]
	hagl_clear_screen();
 80028c6:	f007 fe91 	bl	800a5ec <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	e028      	b.n	8002922 <update_oversampling_prescaler+0x6e>
			hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	b21d      	sxth	r5, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	b21e      	sxth	r6, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	fa0f f883 	sxth.w	r8, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	fa0f f983 	sxth.w	r9, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f1c3 0305 	rsb	r3, r3, #5
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	b21c      	sxth	r4, r3
 8002900:	2200      	movs	r2, #0
 8002902:	2100      	movs	r1, #0
 8002904:	20ff      	movs	r0, #255	; 0xff
 8002906:	f008 f835 	bl	800a974 <rgb565>
 800290a:	4603      	mov	r3, r0
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	9400      	str	r4, [sp, #0]
 8002910:	464b      	mov	r3, r9
 8002912:	4642      	mov	r2, r8
 8002914:	4631      	mov	r1, r6
 8002916:	4628      	mov	r0, r5
 8002918:	f007 fe92 	bl	800a640 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3301      	adds	r3, #1
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b04      	cmp	r3, #4
 8002926:	ddd3      	ble.n	80028d0 <update_oversampling_prescaler+0x1c>
					rgb565(255, 0, 0));
		}
	hagl_put_text("OVERSAMPLING", 30, 10, rgb565(255, 0, 0), font6x9);
 8002928:	2200      	movs	r2, #0
 800292a:	2100      	movs	r1, #0
 800292c:	20ff      	movs	r0, #255	; 0xff
 800292e:	f008 f821 	bl	800a974 <rgb565>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <update_oversampling_prescaler+0xf8>)
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	4613      	mov	r3, r2
 800293c:	220a      	movs	r2, #10
 800293e:	211e      	movs	r1, #30
 8002940:	481b      	ldr	r0, [pc, #108]	; (80029b0 <update_oversampling_prescaler+0xfc>)
 8002942:	f007 fdcd 	bl	800a4e0 <hagl_put_text>
	hagl_put_text("Wybierz z ilu probek ", 15, 30, rgb565(0, 102, 204), font5x7);
 8002946:	22cc      	movs	r2, #204	; 0xcc
 8002948:	2166      	movs	r1, #102	; 0x66
 800294a:	2000      	movs	r0, #0
 800294c:	f008 f812 	bl	800a974 <rgb565>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <update_oversampling_prescaler+0x100>)
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	221e      	movs	r2, #30
 800295c:	210f      	movs	r1, #15
 800295e:	4816      	ldr	r0, [pc, #88]	; (80029b8 <update_oversampling_prescaler+0x104>)
 8002960:	f007 fdbe 	bl	800a4e0 <hagl_put_text>
	hagl_put_text("  usredniac pomiar", 15, 40, rgb565(0, 102, 204), font5x7);
 8002964:	22cc      	movs	r2, #204	; 0xcc
 8002966:	2166      	movs	r1, #102	; 0x66
 8002968:	2000      	movs	r0, #0
 800296a:	f008 f803 	bl	800a974 <rgb565>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <update_oversampling_prescaler+0x100>)
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	4613      	mov	r3, r2
 8002978:	2228      	movs	r2, #40	; 0x28
 800297a:	210f      	movs	r1, #15
 800297c:	480f      	ldr	r0, [pc, #60]	; (80029bc <update_oversampling_prescaler+0x108>)
 800297e:	f007 fdaf 	bl	800a4e0 <hagl_put_text>
	snprintf(os_buffer, 4, "%u", oversamplingPrescaler);
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <update_oversampling_prescaler+0x10c>)
 8002986:	2104      	movs	r1, #4
 8002988:	480e      	ldr	r0, [pc, #56]	; (80029c4 <update_oversampling_prescaler+0x110>)
 800298a:	f008 fefd 	bl	800b788 <sniprintf>
	hagl_put_text((char *)os_buffer, 60, 70, color, font6x9);
 800298e:	88bb      	ldrh	r3, [r7, #4]
 8002990:	4a06      	ldr	r2, [pc, #24]	; (80029ac <update_oversampling_prescaler+0xf8>)
 8002992:	9200      	str	r2, [sp, #0]
 8002994:	2246      	movs	r2, #70	; 0x46
 8002996:	213c      	movs	r1, #60	; 0x3c
 8002998:	480a      	ldr	r0, [pc, #40]	; (80029c4 <update_oversampling_prescaler+0x110>)
 800299a:	f007 fda1 	bl	800a4e0 <hagl_put_text>
	lcd_copy();
 800299e:	f7ff fa2d 	bl	8001dfc <lcd_copy>
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029ac:	0800f45c 	.word	0x0800f45c
 80029b0:	0800c360 	.word	0x0800c360
 80029b4:	08012414 	.word	0x08012414
 80029b8:	0800c370 	.word	0x0800c370
 80029bc:	0800c388 	.word	0x0800c388
 80029c0:	0800c35c 	.word	0x0800c35c
 80029c4:	2000a0c0 	.word	0x2000a0c0

080029c8 <show_sensor_data>:


void show_sensor_data(uint16_t sensor_data[], uint8_t activeChannels) {
 80029c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029cc:	b087      	sub	sp, #28
 80029ce:	af02      	add	r7, sp, #8
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	70fb      	strb	r3, [r7, #3]
	hagl_clear_screen();
 80029d6:	f007 fe09 	bl	800a5ec <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	e028      	b.n	8002a32 <show_sensor_data+0x6a>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	b21d      	sxth	r5, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	b21e      	sxth	r6, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	fa0f f883 	sxth.w	r8, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	fa0f f983 	sxth.w	r9, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f1c3 0305 	rsb	r3, r3, #5
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	b21c      	sxth	r4, r3
 8002a10:	2266      	movs	r2, #102	; 0x66
 8002a12:	2133      	movs	r1, #51	; 0x33
 8002a14:	2000      	movs	r0, #0
 8002a16:	f007 ffad 	bl	800a974 <rgb565>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	9400      	str	r4, [sp, #0]
 8002a20:	464b      	mov	r3, r9
 8002a22:	4642      	mov	r2, r8
 8002a24:	4631      	mov	r1, r6
 8002a26:	4628      	mov	r0, r5
 8002a28:	f007 fe0a 	bl	800a640 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	ddd3      	ble.n	80029e0 <show_sensor_data+0x18>
				rgb565(0, 51, 102));
	}
	hagl_put_text("DANE Z CZUJNIKOW", 10, 10, rgb565(15, 127, 225), font6x9);
 8002a38:	22e1      	movs	r2, #225	; 0xe1
 8002a3a:	217f      	movs	r1, #127	; 0x7f
 8002a3c:	200f      	movs	r0, #15
 8002a3e:	f007 ff99 	bl	800a974 <rgb565>
 8002a42:	4603      	mov	r3, r0
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b25      	ldr	r3, [pc, #148]	; (8002adc <show_sensor_data+0x114>)
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	220a      	movs	r2, #10
 8002a4e:	210a      	movs	r1, #10
 8002a50:	4823      	ldr	r0, [pc, #140]	; (8002ae0 <show_sensor_data+0x118>)
 8002a52:	f007 fd45 	bl	800a4e0 <hagl_put_text>
	hagl_fill_rectangle(7, 27, LCD_WIDTH - 7, LCD_HEIGHT - 7, rgb565(0, 0, 0));
 8002a56:	2200      	movs	r2, #0
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f007 ff8a 	bl	800a974 <rgb565>
 8002a60:	4603      	mov	r3, r0
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2399      	movs	r3, #153	; 0x99
 8002a66:	2279      	movs	r2, #121	; 0x79
 8002a68:	211b      	movs	r1, #27
 8002a6a:	2007      	movs	r0, #7
 8002a6c:	f007 fb9e 	bl	800a1ac <hagl_fill_rectangle>
	for (int var = 0; var < activeChannels; ++var) {
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	e026      	b.n	8002ac4 <show_sensor_data+0xfc>
		snprintf(text_to_parse, 16, "Kanal %u: \t\t%u", var, sensor_data[var]);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4a17      	ldr	r2, [pc, #92]	; (8002ae4 <show_sensor_data+0x11c>)
 8002a86:	2110      	movs	r1, #16
 8002a88:	4817      	ldr	r0, [pc, #92]	; (8002ae8 <show_sensor_data+0x120>)
 8002a8a:	f008 fe7d 	bl	800b788 <sniprintf>
		hagl_put_text(text_to_parse, 10, 30 + var * 15, rgb565(15, 127, 225),
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	0112      	lsls	r2, r2, #4
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	331e      	adds	r3, #30
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b21c      	sxth	r4, r3
 8002aa0:	22e1      	movs	r2, #225	; 0xe1
 8002aa2:	217f      	movs	r1, #127	; 0x7f
 8002aa4:	200f      	movs	r0, #15
 8002aa6:	f007 ff65 	bl	800a974 <rgb565>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <show_sensor_data+0x124>)
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	210a      	movs	r1, #10
 8002ab8:	480b      	ldr	r0, [pc, #44]	; (8002ae8 <show_sensor_data+0x120>)
 8002aba:	f007 fd11 	bl	800a4e0 <hagl_put_text>
	for (int var = 0; var < activeChannels; ++var) {
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	dbd4      	blt.n	8002a76 <show_sensor_data+0xae>
				font5x7);
	}
	lcd_copy();
 8002acc:	f7ff f996 	bl	8001dfc <lcd_copy>
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ada:	bf00      	nop
 8002adc:	0800f45c 	.word	0x0800f45c
 8002ae0:	0800c39c 	.word	0x0800c39c
 8002ae4:	0800c3b0 	.word	0x0800c3b0
 8002ae8:	2000a770 	.word	0x2000a770
 8002aec:	08012414 	.word	0x08012414

08002af0 <select_item>:

void select_item(int index) {
 8002af0:	b5b0      	push	{r4, r5, r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	0092      	lsls	r2, r2, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3328      	adds	r3, #40	; 0x28
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	b21c      	sxth	r4, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	0092      	lsls	r2, r2, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3319      	adds	r3, #25
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	b21d      	sxth	r5, r3
 8002b20:	2200      	movs	r2, #0
 8002b22:	21ff      	movs	r1, #255	; 0xff
 8002b24:	20ff      	movs	r0, #255	; 0xff
 8002b26:	f007 ff25 	bl	800a974 <rgb565>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	462b      	mov	r3, r5
 8002b30:	2278      	movs	r2, #120	; 0x78
 8002b32:	4621      	mov	r1, r4
 8002b34:	2008      	movs	r0, #8
 8002b36:	f007 fab3 	bl	800a0a0 <hagl_draw_rectangle>
			rgb565(255, 255, 0));
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bdb0      	pop	{r4, r5, r7, pc}

08002b42 <deselect_item>:

void deselect_item(int index) {
 8002b42:	b5b0      	push	{r4, r5, r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af02      	add	r7, sp, #8
 8002b48:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	0092      	lsls	r2, r2, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3328      	adds	r3, #40	; 0x28
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	b21c      	sxth	r4, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	0092      	lsls	r2, r2, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3319      	adds	r3, #25
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	b21d      	sxth	r5, r3
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	2000      	movs	r0, #0
 8002b78:	f007 fefc 	bl	800a974 <rgb565>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	462b      	mov	r3, r5
 8002b82:	2278      	movs	r2, #120	; 0x78
 8002b84:	4621      	mov	r1, r4
 8002b86:	2008      	movs	r0, #8
 8002b88:	f007 fa8a 	bl	800a0a0 <hagl_draw_rectangle>
			rgb565(0, 0, 0));
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bdb0      	pop	{r4, r5, r7, pc}

08002b94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <MX_RTC_Init+0x44>)
 8002b9a:	4a10      	ldr	r2, [pc, #64]	; (8002bdc <MX_RTC_Init+0x48>)
 8002b9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <MX_RTC_Init+0x44>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <MX_RTC_Init+0x44>)
 8002ba6:	227f      	movs	r2, #127	; 0x7f
 8002ba8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <MX_RTC_Init+0x44>)
 8002bac:	22ff      	movs	r2, #255	; 0xff
 8002bae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <MX_RTC_Init+0x44>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <MX_RTC_Init+0x44>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <MX_RTC_Init+0x44>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002bc2:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <MX_RTC_Init+0x44>)
 8002bc4:	f002 fd98 	bl	80056f8 <HAL_RTC_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002bce:	f7ff fd5f 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000a780 	.word	0x2000a780
 8002bdc:	40002800 	.word	0x40002800

08002be0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <HAL_RTC_MspInit+0x50>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d111      	bne.n	8002c26 <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c02:	2302      	movs	r3, #2
 8002c04:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c0a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 fc83 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002c1c:	f7ff fd38 	bl	8002690 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <HAL_RTC_MspInit+0x54>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002c26:	bf00      	nop
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40002800 	.word	0x40002800
 8002c34:	42470e3c 	.word	0x42470e3c

08002c38 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c3e:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <MX_SPI1_Init+0x68>)
 8002c40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c4a:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c50:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c6c:	2218      	movs	r2, #24
 8002c6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c84:	220a      	movs	r2, #10
 8002c86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c88:	4804      	ldr	r0, [pc, #16]	; (8002c9c <MX_SPI1_Init+0x64>)
 8002c8a:	f002 fe1a 	bl	80058c2 <HAL_SPI_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c94:	f7ff fcfc 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	2000a7f8 	.word	0x2000a7f8
 8002ca0:	40013000 	.word	0x40013000

08002ca4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002caa:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <MX_SPI2_Init+0x68>)
 8002cac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002cd8:	2218      	movs	r2, #24
 8002cda:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002cf0:	220a      	movs	r2, #10
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002cf4:	4804      	ldr	r0, [pc, #16]	; (8002d08 <MX_SPI2_Init+0x64>)
 8002cf6:	f002 fde4 	bl	80058c2 <HAL_SPI_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002d00:	f7ff fcc6 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	2000a7a0 	.word	0x2000a7a0
 8002d0c:	40003800 	.word	0x40003800

08002d10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a58      	ldr	r2, [pc, #352]	; (8002e90 <HAL_SPI_MspInit+0x180>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d178      	bne.n	8002e24 <HAL_SPI_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	4b57      	ldr	r3, [pc, #348]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4a56      	ldr	r2, [pc, #344]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d40:	6453      	str	r3, [r2, #68]	; 0x44
 8002d42:	4b54      	ldr	r3, [pc, #336]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	4b50      	ldr	r3, [pc, #320]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a4f      	ldr	r2, [pc, #316]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	4b49      	ldr	r3, [pc, #292]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a48      	ldr	r2, [pc, #288]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b46      	ldr	r3, [pc, #280]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d86:	2320      	movs	r3, #32
 8002d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d92:	2303      	movs	r3, #3
 8002d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d96:	2305      	movs	r3, #5
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9a:	f107 031c 	add.w	r3, r7, #28
 8002d9e:	4619      	mov	r1, r3
 8002da0:	483d      	ldr	r0, [pc, #244]	; (8002e98 <HAL_SPI_MspInit+0x188>)
 8002da2:	f001 fc61 	bl	8004668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002da6:	2320      	movs	r3, #32
 8002da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002daa:	2302      	movs	r3, #2
 8002dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002db6:	2305      	movs	r3, #5
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	f107 031c 	add.w	r3, r7, #28
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4836      	ldr	r0, [pc, #216]	; (8002e9c <HAL_SPI_MspInit+0x18c>)
 8002dc2:	f001 fc51 	bl	8004668 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002dc8:	4a36      	ldr	r2, [pc, #216]	; (8002ea4 <HAL_SPI_MspInit+0x194>)
 8002dca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002dcc:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002dce:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002dd2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dd4:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dda:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002de0:	4b2f      	ldr	r3, [pc, #188]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002de8:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dee:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002df4:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dfa:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002e06:	4826      	ldr	r0, [pc, #152]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002e08:	f001 f8be 	bl	8003f88 <HAL_DMA_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8002e12:	f7ff fc3d 	bl	8002690 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a21      	ldr	r2, [pc, #132]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002e1a:	649a      	str	r2, [r3, #72]	; 0x48
 8002e1c:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <HAL_SPI_MspInit+0x190>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002e22:	e031      	b.n	8002e88 <HAL_SPI_MspInit+0x178>
  else if(spiHandle->Instance==SPI2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <HAL_SPI_MspInit+0x198>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d12c      	bne.n	8002e88 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a17      	ldr	r2, [pc, #92]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a10      	ldr	r2, [pc, #64]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <HAL_SPI_MspInit+0x184>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002e66:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e74:	2303      	movs	r3, #3
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e78:	2305      	movs	r3, #5
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7c:	f107 031c 	add.w	r3, r7, #28
 8002e80:	4619      	mov	r1, r3
 8002e82:	4806      	ldr	r0, [pc, #24]	; (8002e9c <HAL_SPI_MspInit+0x18c>)
 8002e84:	f001 fbf0 	bl	8004668 <HAL_GPIO_Init>
}
 8002e88:	bf00      	nop
 8002e8a:	3730      	adds	r7, #48	; 0x30
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40013000 	.word	0x40013000
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40020000 	.word	0x40020000
 8002e9c:	40020400 	.word	0x40020400
 8002ea0:	2000a850 	.word	0x2000a850
 8002ea4:	40026458 	.word	0x40026458
 8002ea8:	40003800 	.word	0x40003800

08002eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_MspInit+0x4c>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a0f      	ldr	r2, [pc, #60]	; (8002ef8 <HAL_MspInit+0x4c>)
 8002ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_MspInit+0x4c>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_MspInit+0x4c>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <HAL_MspInit+0x4c>)
 8002ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_MspInit+0x4c>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800

08002efc <SDTimer_Handler>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void SDTimer_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <SDTimer_Handler+0x40>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <SDTimer_Handler+0x1c>
    Timer1--;
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <SDTimer_Handler+0x40>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <SDTimer_Handler+0x40>)
 8002f16:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <SDTimer_Handler+0x44>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <SDTimer_Handler+0x34>
    Timer2--;
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <SDTimer_Handler+0x44>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <SDTimer_Handler+0x44>)
 8002f2e:	701a      	strb	r2, [r3, #0]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	2000a8b1 	.word	0x2000a8b1
 8002f40:	2000a8b0 	.word	0x2000a8b0

08002f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f48:	e7fe      	b.n	8002f48 <NMI_Handler+0x4>

08002f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f4e:	e7fe      	b.n	8002f4e <HardFault_Handler+0x4>

08002f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f54:	e7fe      	b.n	8002f54 <MemManage_Handler+0x4>

08002f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f5a:	e7fe      	b.n	8002f5a <BusFault_Handler+0x4>

08002f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f60:	e7fe      	b.n	8002f60 <UsageFault_Handler+0x4>

08002f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <SysTick_Handler+0x30>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <SysTick_Handler+0x30>)
 8002f9c:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <SysTick_Handler+0x30>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b09      	cmp	r3, #9
 8002fa6:	d904      	bls.n	8002fb2 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <SysTick_Handler+0x30>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002fae:	f7ff ffa5 	bl	8002efc <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb2:	f000 faa1 	bl	80034f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000a0c8 	.word	0x2000a0c8

08002fc0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	f001 fd05 	bl	80049d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002fd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002fd6:	f001 fcfd 	bl	80049d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <DMA2_Stream3_IRQHandler+0x10>)
 8002fe6:	f001 f8d5 	bl	8004194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000a850 	.word	0x2000a850

08002ff4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
	return 1;
 8002ff8:	2301      	movs	r3, #1
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_kill>:

int _kill(int pid, int sig)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800300e:	f007 fd01 	bl	800aa14 <__errno>
 8003012:	4603      	mov	r3, r0
 8003014:	2216      	movs	r2, #22
 8003016:	601a      	str	r2, [r3, #0]
	return -1;
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <_exit>:

void _exit (int status)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800302c:	f04f 31ff 	mov.w	r1, #4294967295
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ffe7 	bl	8003004 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003036:	e7fe      	b.n	8003036 <_exit+0x12>

08003038 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	e00a      	b.n	8003060 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800304a:	f3af 8000 	nop.w
 800304e:	4601      	mov	r1, r0
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	60ba      	str	r2, [r7, #8]
 8003056:	b2ca      	uxtb	r2, r1
 8003058:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	3301      	adds	r3, #1
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	dbf0      	blt.n	800304a <_read+0x12>
	}

return len;
 8003068:	687b      	ldr	r3, [r7, #4]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e009      	b.n	8003098 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	60ba      	str	r2, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fee7 	bl	8001e60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3301      	adds	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	dbf1      	blt.n	8003084 <_write+0x12>
	}
	return len;
 80030a0:	687b      	ldr	r3, [r7, #4]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <_close>:

int _close(int file)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
	return -1;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030d2:	605a      	str	r2, [r3, #4]
	return 0;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <_isatty>:

int _isatty(int file)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
	return 1;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
	return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <_sbrk+0x5c>)
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <_sbrk+0x60>)
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <_sbrk+0x64>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <_sbrk+0x64>)
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <_sbrk+0x68>)
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <_sbrk+0x64>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	429a      	cmp	r2, r3
 8003142:	d207      	bcs.n	8003154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003144:	f007 fc66 	bl	800aa14 <__errno>
 8003148:	4603      	mov	r3, r0
 800314a:	220c      	movs	r2, #12
 800314c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800314e:	f04f 33ff 	mov.w	r3, #4294967295
 8003152:	e009      	b.n	8003168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <_sbrk+0x64>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	4a05      	ldr	r2, [pc, #20]	; (8003178 <_sbrk+0x64>)
 8003164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003166:	68fb      	ldr	r3, [r7, #12]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20010000 	.word	0x20010000
 8003174:	00002000 	.word	0x00002000
 8003178:	2000a0cc 	.word	0x2000a0cc
 800317c:	2000adc0 	.word	0x2000adc0

08003180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <SystemInit+0x28>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	4a07      	ldr	r2, [pc, #28]	; (80031a8 <SystemInit+0x28>)
 800318c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <SystemInit+0x28>)
 8003196:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800319a:	609a      	str	r2, [r3, #8]
#endif
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08c      	sub	sp, #48	; 0x30
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031b2:	f107 030c 	add.w	r3, r7, #12
 80031b6:	2224      	movs	r2, #36	; 0x24
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f007 fea6 	bl	800af0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031c8:	4b20      	ldr	r3, [pc, #128]	; (800324c <MX_TIM2_Init+0xa0>)
 80031ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80031d0:	4b1e      	ldr	r3, [pc, #120]	; (800324c <MX_TIM2_Init+0xa0>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d6:	4b1d      	ldr	r3, [pc, #116]	; (800324c <MX_TIM2_Init+0xa0>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <MX_TIM2_Init+0xa0>)
 80031de:	2227      	movs	r2, #39	; 0x27
 80031e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e2:	4b1a      	ldr	r3, [pc, #104]	; (800324c <MX_TIM2_Init+0xa0>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e8:	4b18      	ldr	r3, [pc, #96]	; (800324c <MX_TIM2_Init+0xa0>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031f6:	2301      	movs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003206:	2301      	movs	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800320a:	2300      	movs	r3, #0
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003212:	f107 030c 	add.w	r3, r7, #12
 8003216:	4619      	mov	r1, r3
 8003218:	480c      	ldr	r0, [pc, #48]	; (800324c <MX_TIM2_Init+0xa0>)
 800321a:	f003 f8cf 	bl	80063bc <HAL_TIM_Encoder_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003224:	f7ff fa34 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	4619      	mov	r1, r3
 8003234:	4805      	ldr	r0, [pc, #20]	; (800324c <MX_TIM2_Init+0xa0>)
 8003236:	f003 fa9b 	bl	8006770 <HAL_TIMEx_MasterConfigSynchronization>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003240:	f7ff fa26 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	3730      	adds	r7, #48	; 0x30
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	2000a8b4 	.word	0x2000a8b4

08003250 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003270:	d14a      	bne.n	8003308 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	4b26      	ldr	r3, [pc, #152]	; (8003310 <HAL_TIM_Encoder_MspInit+0xc0>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	4a25      	ldr	r2, [pc, #148]	; (8003310 <HAL_TIM_Encoder_MspInit+0xc0>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6413      	str	r3, [r2, #64]	; 0x40
 8003282:	4b23      	ldr	r3, [pc, #140]	; (8003310 <HAL_TIM_Encoder_MspInit+0xc0>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <HAL_TIM_Encoder_MspInit+0xc0>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a1e      	ldr	r2, [pc, #120]	; (8003310 <HAL_TIM_Encoder_MspInit+0xc0>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <HAL_TIM_Encoder_MspInit+0xc0>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_TIM_Encoder_MspInit+0xc0>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a17      	ldr	r2, [pc, #92]	; (8003310 <HAL_TIM_Encoder_MspInit+0xc0>)
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <HAL_TIM_Encoder_MspInit+0xc0>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032cc:	2302      	movs	r3, #2
 80032ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d4:	2300      	movs	r3, #0
 80032d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032d8:	2301      	movs	r3, #1
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4619      	mov	r1, r3
 80032e2:	480c      	ldr	r0, [pc, #48]	; (8003314 <HAL_TIM_Encoder_MspInit+0xc4>)
 80032e4:	f001 f9c0 	bl	8004668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032e8:	2308      	movs	r3, #8
 80032ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f4:	2300      	movs	r3, #0
 80032f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032f8:	2301      	movs	r3, #1
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4619      	mov	r1, r3
 8003302:	4805      	ldr	r0, [pc, #20]	; (8003318 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003304:	f001 f9b0 	bl	8004668 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003308:	bf00      	nop
 800330a:	3728      	adds	r7, #40	; 0x28
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800
 8003314:	40020000 	.word	0x40020000
 8003318:	40020400 	.word	0x40020400

0800331c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <MX_USART6_UART_Init+0x4c>)
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <MX_USART6_UART_Init+0x50>)
 8003324:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <MX_USART6_UART_Init+0x4c>)
 8003328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800332c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <MX_USART6_UART_Init+0x4c>)
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <MX_USART6_UART_Init+0x4c>)
 8003336:	2200      	movs	r2, #0
 8003338:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <MX_USART6_UART_Init+0x4c>)
 800333c:	2200      	movs	r2, #0
 800333e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <MX_USART6_UART_Init+0x4c>)
 8003342:	220c      	movs	r2, #12
 8003344:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <MX_USART6_UART_Init+0x4c>)
 8003348:	2200      	movs	r2, #0
 800334a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <MX_USART6_UART_Init+0x4c>)
 800334e:	2200      	movs	r2, #0
 8003350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003352:	4805      	ldr	r0, [pc, #20]	; (8003368 <MX_USART6_UART_Init+0x4c>)
 8003354:	f003 fa7a 	bl	800684c <HAL_UART_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800335e:	f7ff f997 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	2000a8fc 	.word	0x2000a8fc
 800336c:	40011400 	.word	0x40011400

08003370 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a19      	ldr	r2, [pc, #100]	; (80033f4 <HAL_UART_MspInit+0x84>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d12c      	bne.n	80033ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <HAL_UART_MspInit+0x88>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <HAL_UART_MspInit+0x88>)
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	6453      	str	r3, [r2, #68]	; 0x44
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_UART_MspInit+0x88>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_UART_MspInit+0x88>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a10      	ldr	r2, [pc, #64]	; (80033f8 <HAL_UART_MspInit+0x88>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <HAL_UART_MspInit+0x88>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80033ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80033ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80033dc:	2308      	movs	r3, #8
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	4619      	mov	r1, r3
 80033e6:	4805      	ldr	r0, [pc, #20]	; (80033fc <HAL_UART_MspInit+0x8c>)
 80033e8:	f001 f93e 	bl	8004668 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80033ec:	bf00      	nop
 80033ee:	3728      	adds	r7, #40	; 0x28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40011400 	.word	0x40011400
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40020000 	.word	0x40020000

08003400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003438 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003404:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003406:	e003      	b.n	8003410 <LoopCopyDataInit>

08003408 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800340a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800340c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800340e:	3104      	adds	r1, #4

08003410 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003410:	480b      	ldr	r0, [pc, #44]	; (8003440 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003412:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003414:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003416:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003418:	d3f6      	bcc.n	8003408 <CopyDataInit>
  ldr  r2, =_sbss
 800341a:	4a0b      	ldr	r2, [pc, #44]	; (8003448 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800341c:	e002      	b.n	8003424 <LoopFillZerobss>

0800341e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800341e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003420:	f842 3b04 	str.w	r3, [r2], #4

08003424 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003426:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003428:	d3f9      	bcc.n	800341e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800342a:	f7ff fea9 	bl	8003180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800342e:	f007 fcd3 	bl	800add8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003432:	f7fe fe61 	bl	80020f8 <main>
  bx  lr    
 8003436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003438:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800343c:	08015aa0 	.word	0x08015aa0
  ldr  r0, =_sdata
 8003440:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003444:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8003448:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800344c:	2000adbc 	.word	0x2000adbc

08003450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003450:	e7fe      	b.n	8003450 <ADC_IRQHandler>
	...

08003454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_Init+0x40>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0d      	ldr	r2, [pc, #52]	; (8003494 <HAL_Init+0x40>)
 800345e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_Init+0x40>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <HAL_Init+0x40>)
 800346a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800346e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_Init+0x40>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a07      	ldr	r2, [pc, #28]	; (8003494 <HAL_Init+0x40>)
 8003476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800347c:	2003      	movs	r0, #3
 800347e:	f000 fd41 	bl	8003f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003482:	2000      	movs	r0, #0
 8003484:	f000 f808 	bl	8003498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003488:	f7ff fd10 	bl	8002eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40023c00 	.word	0x40023c00

08003498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034a0:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_InitTick+0x54>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <HAL_InitTick+0x58>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fd59 	bl	8003f6e <HAL_SYSTICK_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e00e      	b.n	80034e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d80a      	bhi.n	80034e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034cc:	2200      	movs	r2, #0
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	f04f 30ff 	mov.w	r0, #4294967295
 80034d4:	f000 fd21 	bl	8003f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034d8:	4a06      	ldr	r2, [pc, #24]	; (80034f4 <HAL_InitTick+0x5c>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	e000      	b.n	80034e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000008 	.word	0x20000008
 80034f0:	20000010 	.word	0x20000010
 80034f4:	2000000c 	.word	0x2000000c

080034f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_IncTick+0x20>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_IncTick+0x24>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4413      	add	r3, r2
 8003508:	4a04      	ldr	r2, [pc, #16]	; (800351c <HAL_IncTick+0x24>)
 800350a:	6013      	str	r3, [r2, #0]
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000010 	.word	0x20000010
 800351c:	2000a940 	.word	0x2000a940

08003520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return uwTick;
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <HAL_GetTick+0x14>)
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	2000a940 	.word	0x2000a940

08003538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003540:	f7ff ffee 	bl	8003520 <HAL_GetTick>
 8003544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d005      	beq.n	800355e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_Delay+0x44>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800355e:	bf00      	nop
 8003560:	f7ff ffde 	bl	8003520 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	429a      	cmp	r2, r3
 800356e:	d8f7      	bhi.n	8003560 <HAL_Delay+0x28>
  {
  }
}
 8003570:	bf00      	nop
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000010 	.word	0x20000010

08003580 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e033      	b.n	80035fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd fc8c 	bl	8000ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d118      	bne.n	80035f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035c6:	f023 0302 	bic.w	r3, r3, #2
 80035ca:	f043 0202 	orr.w	r2, r3, #2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fa48 	bl	8003a68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f023 0303 	bic.w	r3, r3, #3
 80035e6:	f043 0201 	orr.w	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
 80035ee:	e001      	b.n	80035f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_ADC_Start_DMA+0x1e>
 8003622:	2302      	movs	r3, #2
 8003624:	e0ce      	b.n	80037c4 <HAL_ADC_Start_DMA+0x1bc>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	d018      	beq.n	800366e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800364c:	4b5f      	ldr	r3, [pc, #380]	; (80037cc <HAL_ADC_Start_DMA+0x1c4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a5f      	ldr	r2, [pc, #380]	; (80037d0 <HAL_ADC_Start_DMA+0x1c8>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0c9a      	lsrs	r2, r3, #18
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003660:	e002      	b.n	8003668 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	3b01      	subs	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f9      	bne.n	8003662 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367c:	d107      	bne.n	800368e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800368c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	f040 8086 	bne.w	80037aa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036dc:	d106      	bne.n	80036ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f023 0206 	bic.w	r2, r3, #6
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
 80036ea:	e002      	b.n	80036f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036fa:	4b36      	ldr	r3, [pc, #216]	; (80037d4 <HAL_ADC_Start_DMA+0x1cc>)
 80036fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	4a35      	ldr	r2, [pc, #212]	; (80037d8 <HAL_ADC_Start_DMA+0x1d0>)
 8003704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	4a34      	ldr	r2, [pc, #208]	; (80037dc <HAL_ADC_Start_DMA+0x1d4>)
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	4a33      	ldr	r2, [pc, #204]	; (80037e0 <HAL_ADC_Start_DMA+0x1d8>)
 8003714:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800371e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800372e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	334c      	adds	r3, #76	; 0x4c
 800374a:	4619      	mov	r1, r3
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f000 fcc8 	bl	80040e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10f      	bne.n	8003780 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d129      	bne.n	80037c2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	e020      	b.n	80037c2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <HAL_ADC_Start_DMA+0x1dc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d11b      	bne.n	80037c2 <HAL_ADC_Start_DMA+0x1ba>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d114      	bne.n	80037c2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	e00b      	b.n	80037c2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0210 	orr.w	r2, r3, #16
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000008 	.word	0x20000008
 80037d0:	431bde83 	.word	0x431bde83
 80037d4:	40012300 	.word	0x40012300
 80037d8:	08003c61 	.word	0x08003c61
 80037dc:	08003d1b 	.word	0x08003d1b
 80037e0:	08003d37 	.word	0x08003d37
 80037e4:	40012000 	.word	0x40012000

080037e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x1c>
 800383c:	2302      	movs	r3, #2
 800383e:	e105      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x228>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b09      	cmp	r3, #9
 800384e:	d925      	bls.n	800389c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68d9      	ldr	r1, [r3, #12]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	b29b      	uxth	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	3b1e      	subs	r3, #30
 8003866:	2207      	movs	r2, #7
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43da      	mvns	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	400a      	ands	r2, r1
 8003874:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68d9      	ldr	r1, [r3, #12]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	4618      	mov	r0, r3
 8003888:	4603      	mov	r3, r0
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4403      	add	r3, r0
 800388e:	3b1e      	subs	r3, #30
 8003890:	409a      	lsls	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	e022      	b.n	80038e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6919      	ldr	r1, [r3, #16]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	4613      	mov	r3, r2
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	4413      	add	r3, r2
 80038b0:	2207      	movs	r2, #7
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43da      	mvns	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	400a      	ands	r2, r1
 80038be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6919      	ldr	r1, [r3, #16]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4618      	mov	r0, r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	4403      	add	r3, r0
 80038d8:	409a      	lsls	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d824      	bhi.n	8003934 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	3b05      	subs	r3, #5
 80038fc:	221f      	movs	r2, #31
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	400a      	ands	r2, r1
 800390a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	4618      	mov	r0, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	3b05      	subs	r3, #5
 8003926:	fa00 f203 	lsl.w	r2, r0, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	635a      	str	r2, [r3, #52]	; 0x34
 8003932:	e04c      	b.n	80039ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b0c      	cmp	r3, #12
 800393a:	d824      	bhi.n	8003986 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	3b23      	subs	r3, #35	; 0x23
 800394e:	221f      	movs	r2, #31
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43da      	mvns	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	400a      	ands	r2, r1
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	4618      	mov	r0, r3
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	3b23      	subs	r3, #35	; 0x23
 8003978:	fa00 f203 	lsl.w	r2, r0, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
 8003984:	e023      	b.n	80039ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	3b41      	subs	r3, #65	; 0x41
 8003998:	221f      	movs	r2, #31
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43da      	mvns	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	400a      	ands	r2, r1
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	4618      	mov	r0, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	3b41      	subs	r3, #65	; 0x41
 80039c2:	fa00 f203 	lsl.w	r2, r0, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039ce:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <HAL_ADC_ConfigChannel+0x234>)
 80039d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <HAL_ADC_ConfigChannel+0x238>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d109      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x1cc>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b12      	cmp	r3, #18
 80039e2:	d105      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <HAL_ADC_ConfigChannel+0x238>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d123      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x21e>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d003      	beq.n	8003a0a <HAL_ADC_ConfigChannel+0x1e6>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b11      	cmp	r3, #17
 8003a08:	d11b      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d111      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <HAL_ADC_ConfigChannel+0x23c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a10      	ldr	r2, [pc, #64]	; (8003a64 <HAL_ADC_ConfigChannel+0x240>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	0c9a      	lsrs	r2, r3, #18
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a34:	e002      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f9      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	40012300 	.word	0x40012300
 8003a5c:	40012000 	.word	0x40012000
 8003a60:	20000008 	.word	0x20000008
 8003a64:	431bde83 	.word	0x431bde83

08003a68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a70:	4b79      	ldr	r3, [pc, #484]	; (8003c58 <ADC_Init+0x1f0>)
 8003a72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6859      	ldr	r1, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	021a      	lsls	r2, r3, #8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ac0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6859      	ldr	r1, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6899      	ldr	r1, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	4a58      	ldr	r2, [pc, #352]	; (8003c5c <ADC_Init+0x1f4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d022      	beq.n	8003b46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6899      	ldr	r1, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6899      	ldr	r1, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	e00f      	b.n	8003b66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0202 	bic.w	r2, r2, #2
 8003b74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6899      	ldr	r1, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	7e1b      	ldrb	r3, [r3, #24]
 8003b80:	005a      	lsls	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01b      	beq.n	8003bcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	035a      	lsls	r2, r3, #13
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	e007      	b.n	8003bdc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	051a      	lsls	r2, r3, #20
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6899      	ldr	r1, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c1e:	025a      	lsls	r2, r3, #9
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6899      	ldr	r1, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	029a      	lsls	r2, r3, #10
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	609a      	str	r2, [r3, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	40012300 	.word	0x40012300
 8003c5c:	0f000001 	.word	0x0f000001

08003c60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d13c      	bne.n	8003cf4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d12b      	bne.n	8003cec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d127      	bne.n	8003cec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d006      	beq.n	8003cb8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d119      	bne.n	8003cec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0220 	bic.w	r2, r2, #32
 8003cc6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f043 0201 	orr.w	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7ff fd7b 	bl	80037e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cf2:	e00e      	b.n	8003d12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff fd85 	bl	8003810 <HAL_ADC_ErrorCallback>
}
 8003d06:	e004      	b.n	8003d12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7ff fd67 	bl	80037fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d2e:	bf00      	nop
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2240      	movs	r2, #64	; 0x40
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	f043 0204 	orr.w	r2, r3, #4
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7ff fd5a 	bl	8003810 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d80:	4013      	ands	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d96:	4a04      	ldr	r2, [pc, #16]	; (8003da8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	60d3      	str	r3, [r2, #12]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	f003 0307 	and.w	r3, r3, #7
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	db0b      	blt.n	8003df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	f003 021f 	and.w	r2, r3, #31
 8003de0:	4907      	ldr	r1, [pc, #28]	; (8003e00 <__NVIC_EnableIRQ+0x38>)
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2001      	movs	r0, #1
 8003dea:	fa00 f202 	lsl.w	r2, r0, r2
 8003dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000e100 	.word	0xe000e100

08003e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	db0a      	blt.n	8003e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	490c      	ldr	r1, [pc, #48]	; (8003e50 <__NVIC_SetPriority+0x4c>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	0112      	lsls	r2, r2, #4
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	440b      	add	r3, r1
 8003e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e2c:	e00a      	b.n	8003e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4908      	ldr	r1, [pc, #32]	; (8003e54 <__NVIC_SetPriority+0x50>)
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	3b04      	subs	r3, #4
 8003e3c:	0112      	lsls	r2, r2, #4
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	440b      	add	r3, r1
 8003e42:	761a      	strb	r2, [r3, #24]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	e000e100 	.word	0xe000e100
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f1c3 0307 	rsb	r3, r3, #7
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	bf28      	it	cs
 8003e76:	2304      	movcs	r3, #4
 8003e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2b06      	cmp	r3, #6
 8003e80:	d902      	bls.n	8003e88 <NVIC_EncodePriority+0x30>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3b03      	subs	r3, #3
 8003e86:	e000      	b.n	8003e8a <NVIC_EncodePriority+0x32>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43da      	mvns	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eaa:	43d9      	mvns	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb0:	4313      	orrs	r3, r2
         );
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed0:	d301      	bcc.n	8003ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e00f      	b.n	8003ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <SysTick_Config+0x40>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ede:	210f      	movs	r1, #15
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	f7ff ff8e 	bl	8003e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <SysTick_Config+0x40>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <SysTick_Config+0x40>)
 8003ef0:	2207      	movs	r2, #7
 8003ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	e000e010 	.word	0xe000e010

08003f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ff29 	bl	8003d64 <__NVIC_SetPriorityGrouping>
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	4603      	mov	r3, r0
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f2c:	f7ff ff3e 	bl	8003dac <__NVIC_GetPriorityGrouping>
 8003f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff ff8e 	bl	8003e58 <NVIC_EncodePriority>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff5d 	bl	8003e04 <__NVIC_SetPriority>
}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff31 	bl	8003dc8 <__NVIC_EnableIRQ>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ffa2 	bl	8003ec0 <SysTick_Config>
 8003f7c:	4603      	mov	r3, r0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f94:	f7ff fac4 	bl	8003520 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e099      	b.n	80040d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fc4:	e00f      	b.n	8003fe6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fc6:	f7ff faab 	bl	8003520 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b05      	cmp	r3, #5
 8003fd2:	d908      	bls.n	8003fe6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2203      	movs	r2, #3
 8003fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e078      	b.n	80040d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e8      	bne.n	8003fc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <HAL_DMA_Init+0x158>)
 8004000:	4013      	ands	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004012:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	2b04      	cmp	r3, #4
 800403e:	d107      	bne.n	8004050 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	4313      	orrs	r3, r2
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0307 	bic.w	r3, r3, #7
 8004066:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	2b04      	cmp	r3, #4
 8004078:	d117      	bne.n	80040aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00e      	beq.n	80040aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fa6f 	bl	8004570 <DMA_CheckFifoParam>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2240      	movs	r2, #64	; 0x40
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040a6:	2301      	movs	r3, #1
 80040a8:	e016      	b.n	80040d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa26 	bl	8004504 <DMA_CalcBaseAndBitshift>
 80040b8:	4603      	mov	r3, r0
 80040ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c0:	223f      	movs	r2, #63	; 0x3f
 80040c2:	409a      	lsls	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	f010803f 	.word	0xf010803f

080040e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_DMA_Start_IT+0x26>
 8004106:	2302      	movs	r3, #2
 8004108:	e040      	b.n	800418c <HAL_DMA_Start_IT+0xa8>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d12f      	bne.n	800417e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2202      	movs	r2, #2
 8004122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f9b8 	bl	80044a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	223f      	movs	r2, #63	; 0x3f
 800413e:	409a      	lsls	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0216 	orr.w	r2, r2, #22
 8004152:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0208 	orr.w	r2, r2, #8
 800416a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e005      	b.n	800418a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004186:	2302      	movs	r3, #2
 8004188:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800418a:	7dfb      	ldrb	r3, [r7, #23]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041a0:	4b92      	ldr	r3, [pc, #584]	; (80043ec <HAL_DMA_IRQHandler+0x258>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a92      	ldr	r2, [pc, #584]	; (80043f0 <HAL_DMA_IRQHandler+0x25c>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	0a9b      	lsrs	r3, r3, #10
 80041ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041be:	2208      	movs	r2, #8
 80041c0:	409a      	lsls	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01a      	beq.n	8004200 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d013      	beq.n	8004200 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0204 	bic.w	r2, r2, #4
 80041e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ec:	2208      	movs	r2, #8
 80041ee:	409a      	lsls	r2, r3
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004204:	2201      	movs	r2, #1
 8004206:	409a      	lsls	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d012      	beq.n	8004236 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004222:	2201      	movs	r2, #1
 8004224:	409a      	lsls	r2, r3
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f043 0202 	orr.w	r2, r3, #2
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423a:	2204      	movs	r2, #4
 800423c:	409a      	lsls	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d012      	beq.n	800426c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00b      	beq.n	800426c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004258:	2204      	movs	r2, #4
 800425a:	409a      	lsls	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	f043 0204 	orr.w	r2, r3, #4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004270:	2210      	movs	r2, #16
 8004272:	409a      	lsls	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d043      	beq.n	8004304 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d03c      	beq.n	8004304 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	2210      	movs	r2, #16
 8004290:	409a      	lsls	r2, r3
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d018      	beq.n	80042d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d108      	bne.n	80042c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d024      	beq.n	8004304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4798      	blx	r3
 80042c2:	e01f      	b.n	8004304 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01b      	beq.n	8004304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
 80042d4:	e016      	b.n	8004304 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d107      	bne.n	80042f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0208 	bic.w	r2, r2, #8
 80042f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	2220      	movs	r2, #32
 800430a:	409a      	lsls	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4013      	ands	r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 808e 	beq.w	8004432 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8086 	beq.w	8004432 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	2220      	movs	r2, #32
 800432c:	409a      	lsls	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b05      	cmp	r3, #5
 800433c:	d136      	bne.n	80043ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0216 	bic.w	r2, r2, #22
 800434c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800435c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d103      	bne.n	800436e <HAL_DMA_IRQHandler+0x1da>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0208 	bic.w	r2, r2, #8
 800437c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004382:	223f      	movs	r2, #63	; 0x3f
 8004384:	409a      	lsls	r2, r3
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d07d      	beq.n	800449e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
        }
        return;
 80043aa:	e078      	b.n	800449e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01c      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d108      	bne.n	80043da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d030      	beq.n	8004432 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
 80043d8:	e02b      	b.n	8004432 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d027      	beq.n	8004432 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
 80043ea:	e022      	b.n	8004432 <HAL_DMA_IRQHandler+0x29e>
 80043ec:	20000008 	.word	0x20000008
 80043f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10f      	bne.n	8004422 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0210 	bic.w	r2, r2, #16
 8004410:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004436:	2b00      	cmp	r3, #0
 8004438:	d032      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d022      	beq.n	800448c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2205      	movs	r2, #5
 800444a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3301      	adds	r3, #1
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	429a      	cmp	r2, r3
 8004468:	d307      	bcc.n	800447a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f2      	bne.n	800445e <HAL_DMA_IRQHandler+0x2ca>
 8004478:	e000      	b.n	800447c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800447a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
 800449c:	e000      	b.n	80044a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800449e:	bf00      	nop
    }
  }
}
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop

080044a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d108      	bne.n	80044e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044e6:	e007      	b.n	80044f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	60da      	str	r2, [r3, #12]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	3b10      	subs	r3, #16
 8004514:	4a14      	ldr	r2, [pc, #80]	; (8004568 <DMA_CalcBaseAndBitshift+0x64>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800451e:	4a13      	ldr	r2, [pc, #76]	; (800456c <DMA_CalcBaseAndBitshift+0x68>)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d909      	bls.n	8004546 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	1d1a      	adds	r2, r3, #4
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	659a      	str	r2, [r3, #88]	; 0x58
 8004544:	e007      	b.n	8004556 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800454e:	f023 0303 	bic.w	r3, r3, #3
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	aaaaaaab 	.word	0xaaaaaaab
 800456c:	08015934 	.word	0x08015934

08004570 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d11f      	bne.n	80045ca <DMA_CheckFifoParam+0x5a>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d856      	bhi.n	800463e <DMA_CheckFifoParam+0xce>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <DMA_CheckFifoParam+0x28>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045bb 	.word	0x080045bb
 80045a0:	080045a9 	.word	0x080045a9
 80045a4:	0800463f 	.word	0x0800463f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d046      	beq.n	8004642 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b8:	e043      	b.n	8004642 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045c2:	d140      	bne.n	8004646 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c8:	e03d      	b.n	8004646 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d2:	d121      	bne.n	8004618 <DMA_CheckFifoParam+0xa8>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d837      	bhi.n	800464a <DMA_CheckFifoParam+0xda>
 80045da:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <DMA_CheckFifoParam+0x70>)
 80045dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	080045f7 	.word	0x080045f7
 80045e8:	080045f1 	.word	0x080045f1
 80045ec:	08004609 	.word	0x08004609
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
      break;
 80045f4:	e030      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d025      	beq.n	800464e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004606:	e022      	b.n	800464e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004610:	d11f      	bne.n	8004652 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004616:	e01c      	b.n	8004652 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d903      	bls.n	8004626 <DMA_CheckFifoParam+0xb6>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d003      	beq.n	800462c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004624:	e018      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
      break;
 800462a:	e015      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00e      	beq.n	8004656 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      break;
 800463c:	e00b      	b.n	8004656 <DMA_CheckFifoParam+0xe6>
      break;
 800463e:	bf00      	nop
 8004640:	e00a      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      break;
 8004642:	bf00      	nop
 8004644:	e008      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      break;
 8004646:	bf00      	nop
 8004648:	e006      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      break;
 800464a:	bf00      	nop
 800464c:	e004      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      break;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      break;   
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
    }
  } 
  
  return status; 
 8004658:	7bfb      	ldrb	r3, [r7, #15]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop

08004668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004668:	b480      	push	{r7}
 800466a:	b089      	sub	sp, #36	; 0x24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800467a:	2300      	movs	r3, #0
 800467c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	e159      	b.n	8004938 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004684:	2201      	movs	r2, #1
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4013      	ands	r3, r2
 8004696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	429a      	cmp	r2, r3
 800469e:	f040 8148 	bne.w	8004932 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d005      	beq.n	80046ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d130      	bne.n	800471c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	2203      	movs	r2, #3
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4013      	ands	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046f0:	2201      	movs	r2, #1
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 0201 	and.w	r2, r3, #1
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	2b03      	cmp	r3, #3
 8004726:	d017      	beq.n	8004758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	2203      	movs	r2, #3
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d123      	bne.n	80047ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	08da      	lsrs	r2, r3, #3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3208      	adds	r2, #8
 800476c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	220f      	movs	r2, #15
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43db      	mvns	r3, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4013      	ands	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4313      	orrs	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	08da      	lsrs	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3208      	adds	r2, #8
 80047a6:	69b9      	ldr	r1, [r7, #24]
 80047a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	2203      	movs	r2, #3
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 0203 	and.w	r2, r3, #3
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80a2 	beq.w	8004932 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	4b57      	ldr	r3, [pc, #348]	; (8004950 <HAL_GPIO_Init+0x2e8>)
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	4a56      	ldr	r2, [pc, #344]	; (8004950 <HAL_GPIO_Init+0x2e8>)
 80047f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047fc:	6453      	str	r3, [r2, #68]	; 0x44
 80047fe:	4b54      	ldr	r3, [pc, #336]	; (8004950 <HAL_GPIO_Init+0x2e8>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800480a:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_GPIO_Init+0x2ec>)
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	089b      	lsrs	r3, r3, #2
 8004810:	3302      	adds	r3, #2
 8004812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	220f      	movs	r2, #15
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4013      	ands	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a49      	ldr	r2, [pc, #292]	; (8004958 <HAL_GPIO_Init+0x2f0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d019      	beq.n	800486a <HAL_GPIO_Init+0x202>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a48      	ldr	r2, [pc, #288]	; (800495c <HAL_GPIO_Init+0x2f4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_GPIO_Init+0x1fe>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a47      	ldr	r2, [pc, #284]	; (8004960 <HAL_GPIO_Init+0x2f8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00d      	beq.n	8004862 <HAL_GPIO_Init+0x1fa>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a46      	ldr	r2, [pc, #280]	; (8004964 <HAL_GPIO_Init+0x2fc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d007      	beq.n	800485e <HAL_GPIO_Init+0x1f6>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a45      	ldr	r2, [pc, #276]	; (8004968 <HAL_GPIO_Init+0x300>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d101      	bne.n	800485a <HAL_GPIO_Init+0x1f2>
 8004856:	2304      	movs	r3, #4
 8004858:	e008      	b.n	800486c <HAL_GPIO_Init+0x204>
 800485a:	2307      	movs	r3, #7
 800485c:	e006      	b.n	800486c <HAL_GPIO_Init+0x204>
 800485e:	2303      	movs	r3, #3
 8004860:	e004      	b.n	800486c <HAL_GPIO_Init+0x204>
 8004862:	2302      	movs	r3, #2
 8004864:	e002      	b.n	800486c <HAL_GPIO_Init+0x204>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_GPIO_Init+0x204>
 800486a:	2300      	movs	r3, #0
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	f002 0203 	and.w	r2, r2, #3
 8004872:	0092      	lsls	r2, r2, #2
 8004874:	4093      	lsls	r3, r2
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800487c:	4935      	ldr	r1, [pc, #212]	; (8004954 <HAL_GPIO_Init+0x2ec>)
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	089b      	lsrs	r3, r3, #2
 8004882:	3302      	adds	r3, #2
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800488a:	4b38      	ldr	r3, [pc, #224]	; (800496c <HAL_GPIO_Init+0x304>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048ae:	4a2f      	ldr	r2, [pc, #188]	; (800496c <HAL_GPIO_Init+0x304>)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048b4:	4b2d      	ldr	r3, [pc, #180]	; (800496c <HAL_GPIO_Init+0x304>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048d8:	4a24      	ldr	r2, [pc, #144]	; (800496c <HAL_GPIO_Init+0x304>)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048de:	4b23      	ldr	r3, [pc, #140]	; (800496c <HAL_GPIO_Init+0x304>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004902:	4a1a      	ldr	r2, [pc, #104]	; (800496c <HAL_GPIO_Init+0x304>)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004908:	4b18      	ldr	r3, [pc, #96]	; (800496c <HAL_GPIO_Init+0x304>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800492c:	4a0f      	ldr	r2, [pc, #60]	; (800496c <HAL_GPIO_Init+0x304>)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	3301      	adds	r3, #1
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b0f      	cmp	r3, #15
 800493c:	f67f aea2 	bls.w	8004684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	40013800 	.word	0x40013800
 8004958:	40020000 	.word	0x40020000
 800495c:	40020400 	.word	0x40020400
 8004960:	40020800 	.word	0x40020800
 8004964:	40020c00 	.word	0x40020c00
 8004968:	40021000 	.word	0x40021000
 800496c:	40013c00 	.word	0x40013c00

08004970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	887b      	ldrh	r3, [r7, #2]
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
 800498c:	e001      	b.n	8004992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800498e:	2300      	movs	r3, #0
 8004990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004992:	7bfb      	ldrb	r3, [r7, #15]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	807b      	strh	r3, [r7, #2]
 80049ac:	4613      	mov	r3, r2
 80049ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049b0:	787b      	ldrb	r3, [r7, #1]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049bc:	e003      	b.n	80049c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049be:	887b      	ldrh	r3, [r7, #2]
 80049c0:	041a      	lsls	r2, r3, #16
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	619a      	str	r2, [r3, #24]
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049de:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d006      	beq.n	80049f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049ea:	4a05      	ldr	r2, [pc, #20]	; (8004a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049f0:	88fb      	ldrh	r3, [r7, #6]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd fe2c 	bl	8002650 <HAL_GPIO_EXTI_Callback>
  }
}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40013c00 	.word	0x40013c00

08004a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e12b      	b.n	8004c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fd f8a0 	bl	8001b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2224      	movs	r2, #36	; 0x24
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a68:	f000 fd30 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 8004a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4a81      	ldr	r2, [pc, #516]	; (8004c78 <HAL_I2C_Init+0x274>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d807      	bhi.n	8004a88 <HAL_I2C_Init+0x84>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a80      	ldr	r2, [pc, #512]	; (8004c7c <HAL_I2C_Init+0x278>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	bf94      	ite	ls
 8004a80:	2301      	movls	r3, #1
 8004a82:	2300      	movhi	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e006      	b.n	8004a96 <HAL_I2C_Init+0x92>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a7d      	ldr	r2, [pc, #500]	; (8004c80 <HAL_I2C_Init+0x27c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	bf94      	ite	ls
 8004a90:	2301      	movls	r3, #1
 8004a92:	2300      	movhi	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e0e7      	b.n	8004c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4a78      	ldr	r2, [pc, #480]	; (8004c84 <HAL_I2C_Init+0x280>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	0c9b      	lsrs	r3, r3, #18
 8004aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4a6a      	ldr	r2, [pc, #424]	; (8004c78 <HAL_I2C_Init+0x274>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d802      	bhi.n	8004ad8 <HAL_I2C_Init+0xd4>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	e009      	b.n	8004aec <HAL_I2C_Init+0xe8>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	4a69      	ldr	r2, [pc, #420]	; (8004c88 <HAL_I2C_Init+0x284>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	099b      	lsrs	r3, r3, #6
 8004aea:	3301      	adds	r3, #1
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	430b      	orrs	r3, r1
 8004af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	495c      	ldr	r1, [pc, #368]	; (8004c78 <HAL_I2C_Init+0x274>)
 8004b08:	428b      	cmp	r3, r1
 8004b0a:	d819      	bhi.n	8004b40 <HAL_I2C_Init+0x13c>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1e59      	subs	r1, r3, #1
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b1a:	1c59      	adds	r1, r3, #1
 8004b1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b20:	400b      	ands	r3, r1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_I2C_Init+0x138>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1e59      	subs	r1, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b34:	3301      	adds	r3, #1
 8004b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b3a:	e051      	b.n	8004be0 <HAL_I2C_Init+0x1dc>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	e04f      	b.n	8004be0 <HAL_I2C_Init+0x1dc>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d111      	bne.n	8004b6c <HAL_I2C_Init+0x168>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	1e58      	subs	r0, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6859      	ldr	r1, [r3, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	440b      	add	r3, r1
 8004b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	e012      	b.n	8004b92 <HAL_I2C_Init+0x18e>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1e58      	subs	r0, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	0099      	lsls	r1, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b82:	3301      	adds	r3, #1
 8004b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_I2C_Init+0x196>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e022      	b.n	8004be0 <HAL_I2C_Init+0x1dc>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_I2C_Init+0x1bc>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1e58      	subs	r0, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6859      	ldr	r1, [r3, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	440b      	add	r3, r1
 8004bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bbe:	e00f      	b.n	8004be0 <HAL_I2C_Init+0x1dc>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1e58      	subs	r0, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	0099      	lsls	r1, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	6809      	ldr	r1, [r1, #0]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6911      	ldr	r1, [r2, #16]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68d2      	ldr	r2, [r2, #12]
 8004c1a:	4311      	orrs	r1, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	430b      	orrs	r3, r1
 8004c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	000186a0 	.word	0x000186a0
 8004c7c:	001e847f 	.word	0x001e847f
 8004c80:	003d08ff 	.word	0x003d08ff
 8004c84:	431bde83 	.word	0x431bde83
 8004c88:	10624dd3 	.word	0x10624dd3

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e264      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d075      	beq.n	8004d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004caa:	4ba3      	ldr	r3, [pc, #652]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb6:	4ba0      	ldr	r3, [pc, #640]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d112      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc2:	4b9d      	ldr	r3, [pc, #628]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cce:	d10b      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	4b99      	ldr	r3, [pc, #612]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05b      	beq.n	8004d94 <HAL_RCC_OscConfig+0x108>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d157      	bne.n	8004d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e23f      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCC_OscConfig+0x74>
 8004cf2:	4b91      	ldr	r3, [pc, #580]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a90      	ldr	r2, [pc, #576]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e01d      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x98>
 8004d0a:	4b8b      	ldr	r3, [pc, #556]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a8a      	ldr	r2, [pc, #552]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b88      	ldr	r3, [pc, #544]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a87      	ldr	r2, [pc, #540]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d24:	4b84      	ldr	r3, [pc, #528]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a83      	ldr	r2, [pc, #524]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b81      	ldr	r3, [pc, #516]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a80      	ldr	r2, [pc, #512]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fe fbec 	bl	8003520 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fe fbe8 	bl	8003520 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e204      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b76      	ldr	r3, [pc, #472]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0xc0>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fe fbd8 	bl	8003520 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fe fbd4 	bl	8003520 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e1f0      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d86:	4b6c      	ldr	r3, [pc, #432]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0xe8>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d063      	beq.n	8004e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004da2:	4b65      	ldr	r3, [pc, #404]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dae:	4b62      	ldr	r3, [pc, #392]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dba:	4b5f      	ldr	r3, [pc, #380]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc6:	4b5c      	ldr	r3, [pc, #368]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e1c4      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	4b56      	ldr	r3, [pc, #344]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4952      	ldr	r1, [pc, #328]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df2:	e03a      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d020      	beq.n	8004e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfc:	4b4f      	ldr	r3, [pc, #316]	; (8004f3c <HAL_RCC_OscConfig+0x2b0>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fe fb8d 	bl	8003520 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fe fb89 	bl	8003520 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1a5      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1c:	4b46      	ldr	r3, [pc, #280]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b43      	ldr	r3, [pc, #268]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4940      	ldr	r1, [pc, #256]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]
 8004e3c:	e015      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b3f      	ldr	r3, [pc, #252]	; (8004f3c <HAL_RCC_OscConfig+0x2b0>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fe fb6c 	bl	8003520 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4c:	f7fe fb68 	bl	8003520 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e184      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5e:	4b36      	ldr	r3, [pc, #216]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d030      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7e:	4b30      	ldr	r3, [pc, #192]	; (8004f40 <HAL_RCC_OscConfig+0x2b4>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fe fb4c 	bl	8003520 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8c:	f7fe fb48 	bl	8003520 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e164      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9e:	4b26      	ldr	r3, [pc, #152]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x200>
 8004eaa:	e015      	b.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eac:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <HAL_RCC_OscConfig+0x2b4>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fe fb35 	bl	8003520 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eba:	f7fe fb31 	bl	8003520 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e14d      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ecc:	4b1a      	ldr	r3, [pc, #104]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f0      	bne.n	8004eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80a0 	beq.w	8005026 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eea:	4b13      	ldr	r3, [pc, #76]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10f      	bne.n	8004f16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	4a0e      	ldr	r2, [pc, #56]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f04:	6413      	str	r3, [r2, #64]	; 0x40
 8004f06:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <HAL_RCC_OscConfig+0x2ac>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f12:	2301      	movs	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f16:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <HAL_RCC_OscConfig+0x2b8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d121      	bne.n	8004f66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f22:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <HAL_RCC_OscConfig+0x2b8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a07      	ldr	r2, [pc, #28]	; (8004f44 <HAL_RCC_OscConfig+0x2b8>)
 8004f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2e:	f7fe faf7 	bl	8003520 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f34:	e011      	b.n	8004f5a <HAL_RCC_OscConfig+0x2ce>
 8004f36:	bf00      	nop
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	42470000 	.word	0x42470000
 8004f40:	42470e80 	.word	0x42470e80
 8004f44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f48:	f7fe faea 	bl	8003520 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e106      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5a:	4b85      	ldr	r3, [pc, #532]	; (8005170 <HAL_RCC_OscConfig+0x4e4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d106      	bne.n	8004f7c <HAL_RCC_OscConfig+0x2f0>
 8004f6e:	4b81      	ldr	r3, [pc, #516]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	4a80      	ldr	r2, [pc, #512]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7a:	e01c      	b.n	8004fb6 <HAL_RCC_OscConfig+0x32a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b05      	cmp	r3, #5
 8004f82:	d10c      	bne.n	8004f9e <HAL_RCC_OscConfig+0x312>
 8004f84:	4b7b      	ldr	r3, [pc, #492]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	4a7a      	ldr	r2, [pc, #488]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8004f8a:	f043 0304 	orr.w	r3, r3, #4
 8004f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f90:	4b78      	ldr	r3, [pc, #480]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f94:	4a77      	ldr	r2, [pc, #476]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9c:	e00b      	b.n	8004fb6 <HAL_RCC_OscConfig+0x32a>
 8004f9e:	4b75      	ldr	r3, [pc, #468]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	4a74      	ldr	r2, [pc, #464]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8004faa:	4b72      	ldr	r3, [pc, #456]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	4a71      	ldr	r2, [pc, #452]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8004fb0:	f023 0304 	bic.w	r3, r3, #4
 8004fb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d015      	beq.n	8004fea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbe:	f7fe faaf 	bl	8003520 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc4:	e00a      	b.n	8004fdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc6:	f7fe faab 	bl	8003520 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e0c5      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fdc:	4b65      	ldr	r3, [pc, #404]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0ee      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x33a>
 8004fe8:	e014      	b.n	8005014 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fea:	f7fe fa99 	bl	8003520 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff0:	e00a      	b.n	8005008 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ff2:	f7fe fa95 	bl	8003520 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005000:	4293      	cmp	r3, r2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e0af      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005008:	4b5a      	ldr	r3, [pc, #360]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1ee      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d105      	bne.n	8005026 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800501a:	4b56      	ldr	r3, [pc, #344]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	4a55      	ldr	r2, [pc, #340]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8005020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005024:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 809b 	beq.w	8005166 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005030:	4b50      	ldr	r3, [pc, #320]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 030c 	and.w	r3, r3, #12
 8005038:	2b08      	cmp	r3, #8
 800503a:	d05c      	beq.n	80050f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d141      	bne.n	80050c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005044:	4b4c      	ldr	r3, [pc, #304]	; (8005178 <HAL_RCC_OscConfig+0x4ec>)
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504a:	f7fe fa69 	bl	8003520 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005052:	f7fe fa65 	bl	8003520 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e081      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005064:	4b43      	ldr	r3, [pc, #268]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1f0      	bne.n	8005052 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	019b      	lsls	r3, r3, #6
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	3b01      	subs	r3, #1
 800508a:	041b      	lsls	r3, r3, #16
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	061b      	lsls	r3, r3, #24
 8005094:	4937      	ldr	r1, [pc, #220]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8005096:	4313      	orrs	r3, r2
 8005098:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800509a:	4b37      	ldr	r3, [pc, #220]	; (8005178 <HAL_RCC_OscConfig+0x4ec>)
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a0:	f7fe fa3e 	bl	8003520 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fe fa3a 	bl	8003520 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e056      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ba:	4b2e      	ldr	r3, [pc, #184]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x41c>
 80050c6:	e04e      	b.n	8005166 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c8:	4b2b      	ldr	r3, [pc, #172]	; (8005178 <HAL_RCC_OscConfig+0x4ec>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ce:	f7fe fa27 	bl	8003520 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d6:	f7fe fa23 	bl	8003520 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e03f      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e8:	4b22      	ldr	r3, [pc, #136]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f0      	bne.n	80050d6 <HAL_RCC_OscConfig+0x44a>
 80050f4:	e037      	b.n	8005166 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e032      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005102:	4b1c      	ldr	r3, [pc, #112]	; (8005174 <HAL_RCC_OscConfig+0x4e8>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d028      	beq.n	8005162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800511a:	429a      	cmp	r2, r3
 800511c:	d121      	bne.n	8005162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d11a      	bne.n	8005162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005132:	4013      	ands	r3, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005138:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800513a:	4293      	cmp	r3, r2
 800513c:	d111      	bne.n	8005162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	3b01      	subs	r3, #1
 800514c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d107      	bne.n	8005162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800515e:	429a      	cmp	r2, r3
 8005160:	d001      	beq.n	8005166 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40007000 	.word	0x40007000
 8005174:	40023800 	.word	0x40023800
 8005178:	42470060 	.word	0x42470060

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0cc      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b68      	ldr	r3, [pc, #416]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d90c      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b65      	ldr	r3, [pc, #404]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b63      	ldr	r3, [pc, #396]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b8      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d0:	4b59      	ldr	r3, [pc, #356]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a58      	ldr	r2, [pc, #352]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e8:	4b53      	ldr	r3, [pc, #332]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a52      	ldr	r2, [pc, #328]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f4:	4b50      	ldr	r3, [pc, #320]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494d      	ldr	r1, [pc, #308]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d044      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b47      	ldr	r3, [pc, #284]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d119      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d003      	beq.n	800523a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005236:	2b03      	cmp	r3, #3
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b3f      	ldr	r3, [pc, #252]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3b      	ldr	r3, [pc, #236]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e067      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b37      	ldr	r3, [pc, #220]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4934      	ldr	r1, [pc, #208]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fe f958 	bl	8003520 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fe f954 	bl	8003520 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e04f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b25      	ldr	r3, [pc, #148]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d20c      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b22      	ldr	r3, [pc, #136]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e032      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b19      	ldr	r3, [pc, #100]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4916      	ldr	r1, [pc, #88]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490e      	ldr	r1, [pc, #56]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005302:	f000 f821 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490a      	ldr	r1, [pc, #40]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_RCC_ClockConfig+0x1c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fe f8b8 	bl	8003498 <HAL_InitTick>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023c00 	.word	0x40023c00
 8005338:	40023800 	.word	0x40023800
 800533c:	0801591c 	.word	0x0801591c
 8005340:	20000008 	.word	0x20000008
 8005344:	2000000c 	.word	0x2000000c

08005348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	b5b0      	push	{r4, r5, r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800534e:	2100      	movs	r1, #0
 8005350:	6079      	str	r1, [r7, #4]
 8005352:	2100      	movs	r1, #0
 8005354:	60f9      	str	r1, [r7, #12]
 8005356:	2100      	movs	r1, #0
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800535a:	2100      	movs	r1, #0
 800535c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800535e:	4952      	ldr	r1, [pc, #328]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005360:	6889      	ldr	r1, [r1, #8]
 8005362:	f001 010c 	and.w	r1, r1, #12
 8005366:	2908      	cmp	r1, #8
 8005368:	d00d      	beq.n	8005386 <HAL_RCC_GetSysClockFreq+0x3e>
 800536a:	2908      	cmp	r1, #8
 800536c:	f200 8094 	bhi.w	8005498 <HAL_RCC_GetSysClockFreq+0x150>
 8005370:	2900      	cmp	r1, #0
 8005372:	d002      	beq.n	800537a <HAL_RCC_GetSysClockFreq+0x32>
 8005374:	2904      	cmp	r1, #4
 8005376:	d003      	beq.n	8005380 <HAL_RCC_GetSysClockFreq+0x38>
 8005378:	e08e      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800537a:	4b4c      	ldr	r3, [pc, #304]	; (80054ac <HAL_RCC_GetSysClockFreq+0x164>)
 800537c:	60bb      	str	r3, [r7, #8]
       break;
 800537e:	e08e      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005380:	4b4b      	ldr	r3, [pc, #300]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005382:	60bb      	str	r3, [r7, #8]
      break;
 8005384:	e08b      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005386:	4948      	ldr	r1, [pc, #288]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005388:	6849      	ldr	r1, [r1, #4]
 800538a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800538e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005390:	4945      	ldr	r1, [pc, #276]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005392:	6849      	ldr	r1, [r1, #4]
 8005394:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005398:	2900      	cmp	r1, #0
 800539a:	d024      	beq.n	80053e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539c:	4942      	ldr	r1, [pc, #264]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800539e:	6849      	ldr	r1, [r1, #4]
 80053a0:	0989      	lsrs	r1, r1, #6
 80053a2:	4608      	mov	r0, r1
 80053a4:	f04f 0100 	mov.w	r1, #0
 80053a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80053ac:	f04f 0500 	mov.w	r5, #0
 80053b0:	ea00 0204 	and.w	r2, r0, r4
 80053b4:	ea01 0305 	and.w	r3, r1, r5
 80053b8:	493d      	ldr	r1, [pc, #244]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80053ba:	fb01 f003 	mul.w	r0, r1, r3
 80053be:	2100      	movs	r1, #0
 80053c0:	fb01 f102 	mul.w	r1, r1, r2
 80053c4:	1844      	adds	r4, r0, r1
 80053c6:	493a      	ldr	r1, [pc, #232]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80053c8:	fba2 0101 	umull	r0, r1, r2, r1
 80053cc:	1863      	adds	r3, r4, r1
 80053ce:	4619      	mov	r1, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	f7fb fb40 	bl	8000a5c <__aeabi_uldivmod>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4613      	mov	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e04a      	b.n	800547c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053e6:	4b30      	ldr	r3, [pc, #192]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	099b      	lsrs	r3, r3, #6
 80053ec:	461a      	mov	r2, r3
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	ea02 0400 	and.w	r4, r2, r0
 80053fe:	ea03 0501 	and.w	r5, r3, r1
 8005402:	4620      	mov	r0, r4
 8005404:	4629      	mov	r1, r5
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	014b      	lsls	r3, r1, #5
 8005410:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005414:	0142      	lsls	r2, r0, #5
 8005416:	4610      	mov	r0, r2
 8005418:	4619      	mov	r1, r3
 800541a:	1b00      	subs	r0, r0, r4
 800541c:	eb61 0105 	sbc.w	r1, r1, r5
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	018b      	lsls	r3, r1, #6
 800542a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800542e:	0182      	lsls	r2, r0, #6
 8005430:	1a12      	subs	r2, r2, r0
 8005432:	eb63 0301 	sbc.w	r3, r3, r1
 8005436:	f04f 0000 	mov.w	r0, #0
 800543a:	f04f 0100 	mov.w	r1, #0
 800543e:	00d9      	lsls	r1, r3, #3
 8005440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005444:	00d0      	lsls	r0, r2, #3
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	1912      	adds	r2, r2, r4
 800544c:	eb45 0303 	adc.w	r3, r5, r3
 8005450:	f04f 0000 	mov.w	r0, #0
 8005454:	f04f 0100 	mov.w	r1, #0
 8005458:	0299      	lsls	r1, r3, #10
 800545a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800545e:	0290      	lsls	r0, r2, #10
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4610      	mov	r0, r2
 8005466:	4619      	mov	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	461a      	mov	r2, r3
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	f7fb faf4 	bl	8000a5c <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4613      	mov	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	3301      	adds	r3, #1
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	fbb2 f3f3 	udiv	r3, r2, r3
 8005494:	60bb      	str	r3, [r7, #8]
      break;
 8005496:	e002      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005498:	4b04      	ldr	r3, [pc, #16]	; (80054ac <HAL_RCC_GetSysClockFreq+0x164>)
 800549a:	60bb      	str	r3, [r7, #8]
      break;
 800549c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800549e:	68bb      	ldr	r3, [r7, #8]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bdb0      	pop	{r4, r5, r7, pc}
 80054a8:	40023800 	.word	0x40023800
 80054ac:	00f42400 	.word	0x00f42400
 80054b0:	017d7840 	.word	0x017d7840

080054b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054b8:	4b03      	ldr	r3, [pc, #12]	; (80054c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ba:	681b      	ldr	r3, [r3, #0]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20000008 	.word	0x20000008

080054cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054d0:	f7ff fff0 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b05      	ldr	r3, [pc, #20]	; (80054ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	0a9b      	lsrs	r3, r3, #10
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4903      	ldr	r1, [pc, #12]	; (80054f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054e2:	5ccb      	ldrb	r3, [r1, r3]
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40023800 	.word	0x40023800
 80054f0:	0801592c 	.word	0x0801592c

080054f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054f8:	f7ff ffdc 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	0b5b      	lsrs	r3, r3, #13
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4903      	ldr	r1, [pc, #12]	; (8005518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40023800 	.word	0x40023800
 8005518:	0801592c 	.word	0x0801592c

0800551c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d105      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005540:	2b00      	cmp	r3, #0
 8005542:	d035      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005544:	4b67      	ldr	r3, [pc, #412]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800554a:	f7fd ffe9 	bl	8003520 <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005550:	e008      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005552:	f7fd ffe5 	bl	8003520 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e0ba      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005564:	4b60      	ldr	r3, [pc, #384]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1f0      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	019a      	lsls	r2, r3, #6
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	071b      	lsls	r3, r3, #28
 800557c:	495a      	ldr	r1, [pc, #360]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005584:	4b57      	ldr	r3, [pc, #348]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005586:	2201      	movs	r2, #1
 8005588:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800558a:	f7fd ffc9 	bl	8003520 <HAL_GetTick>
 800558e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005590:	e008      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005592:	f7fd ffc5 	bl	8003520 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e09a      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055a4:	4b50      	ldr	r3, [pc, #320]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0f0      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 8083 	beq.w	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	4b49      	ldr	r3, [pc, #292]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	4a48      	ldr	r2, [pc, #288]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055cc:	6413      	str	r3, [r2, #64]	; 0x40
 80055ce:	4b46      	ldr	r3, [pc, #280]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055da:	4b44      	ldr	r3, [pc, #272]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a43      	ldr	r2, [pc, #268]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055e6:	f7fd ff9b 	bl	8003520 <HAL_GetTick>
 80055ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055ec:	e008      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055ee:	f7fd ff97 	bl	8003520 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e06c      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005600:	4b3a      	ldr	r3, [pc, #232]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800560c:	4b36      	ldr	r3, [pc, #216]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800560e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005614:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d02f      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	429a      	cmp	r2, r3
 8005628:	d028      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800562a:	4b2f      	ldr	r3, [pc, #188]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005632:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005634:	4b2e      	ldr	r3, [pc, #184]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800563a:	4b2d      	ldr	r3, [pc, #180]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005640:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005646:	4b28      	ldr	r3, [pc, #160]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b01      	cmp	r3, #1
 8005650:	d114      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005652:	f7fd ff65 	bl	8003520 <HAL_GetTick>
 8005656:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005658:	e00a      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800565a:	f7fd ff61 	bl	8003520 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	f241 3288 	movw	r2, #5000	; 0x1388
 8005668:	4293      	cmp	r3, r2
 800566a:	d901      	bls.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e034      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005670:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0ee      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005688:	d10d      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800568a:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800569a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569e:	4912      	ldr	r1, [pc, #72]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	608b      	str	r3, [r1, #8]
 80056a4:	e005      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80056a6:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	4a0f      	ldr	r2, [pc, #60]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80056b0:	6093      	str	r3, [r2, #8]
 80056b2:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056be:	490a      	ldr	r1, [pc, #40]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	7c1a      	ldrb	r2, [r3, #16]
 80056d4:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056d6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	42470068 	.word	0x42470068
 80056e8:	40023800 	.word	0x40023800
 80056ec:	40007000 	.word	0x40007000
 80056f0:	42470e40 	.word	0x42470e40
 80056f4:	424711e0 	.word	0x424711e0

080056f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e083      	b.n	8005812 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	7f5b      	ldrb	r3, [r3, #29]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d105      	bne.n	8005720 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fd fa60 	bl	8002be0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	22ca      	movs	r2, #202	; 0xca
 800572c:	625a      	str	r2, [r3, #36]	; 0x24
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2253      	movs	r2, #83	; 0x53
 8005734:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f897 	bl	800586a <RTC_EnterInitMode>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d008      	beq.n	8005754 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	22ff      	movs	r2, #255	; 0xff
 8005748:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2204      	movs	r2, #4
 800574e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e05e      	b.n	8005812 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6812      	ldr	r2, [r2, #0]
 800575e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005766:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6899      	ldr	r1, [r3, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	68d2      	ldr	r2, [r2, #12]
 800578e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6919      	ldr	r1, [r3, #16]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	041a      	lsls	r2, r3, #16
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10e      	bne.n	80057e0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f829 	bl	800581a <HAL_RTC_WaitForSynchro>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d008      	beq.n	80057e0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	22ff      	movs	r2, #255	; 0xff
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2204      	movs	r2, #4
 80057da:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e018      	b.n	8005812 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	22ff      	movs	r2, #255	; 0xff
 8005808:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005810:	2300      	movs	r3, #0
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005834:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005836:	f7fd fe73 	bl	8003520 <HAL_GetTick>
 800583a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800583c:	e009      	b.n	8005852 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800583e:	f7fd fe6f 	bl	8003520 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800584c:	d901      	bls.n	8005852 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e007      	b.n	8005862 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0ee      	beq.n	800583e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d119      	bne.n	80058b8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f04f 32ff 	mov.w	r2, #4294967295
 800588c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800588e:	f7fd fe47 	bl	8003520 <HAL_GetTick>
 8005892:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005894:	e009      	b.n	80058aa <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005896:	f7fd fe43 	bl	8003520 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058a4:	d901      	bls.n	80058aa <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e007      	b.n	80058ba <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0ee      	beq.n	8005896 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b082      	sub	sp, #8
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e07b      	b.n	80059cc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d108      	bne.n	80058ee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e4:	d009      	beq.n	80058fa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	61da      	str	r2, [r3, #28]
 80058ec:	e005      	b.n	80058fa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d106      	bne.n	800591a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7fd f9fb 	bl	8002d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005930:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597e:	ea42 0103 	orr.w	r1, r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	0c1b      	lsrs	r3, r3, #16
 8005998:	f003 0104 	and.w	r1, r3, #4
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0210 	and.w	r2, r3, #16
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69da      	ldr	r2, [r3, #28]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_SPI_Transmit+0x22>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e126      	b.n	8005c44 <HAL_SPI_Transmit+0x270>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059fe:	f7fd fd8f 	bl	8003520 <HAL_GetTick>
 8005a02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d002      	beq.n	8005a1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
 8005a16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a18:	e10b      	b.n	8005c32 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_Transmit+0x52>
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a2a:	e102      	b.n	8005c32 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2203      	movs	r2, #3
 8005a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	88fa      	ldrh	r2, [r7, #6]
 8005a4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a72:	d10f      	bne.n	8005a94 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d007      	beq.n	8005ab2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aba:	d14b      	bne.n	8005b54 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_SPI_Transmit+0xf6>
 8005ac4:	8afb      	ldrh	r3, [r7, #22]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d13e      	bne.n	8005b48 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	881a      	ldrh	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	1c9a      	adds	r2, r3, #2
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005aee:	e02b      	b.n	8005b48 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d112      	bne.n	8005b24 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	881a      	ldrh	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	1c9a      	adds	r2, r3, #2
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b22:	e011      	b.n	8005b48 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b24:	f7fd fcfc 	bl	8003520 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d803      	bhi.n	8005b3c <HAL_SPI_Transmit+0x168>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d102      	bne.n	8005b42 <HAL_SPI_Transmit+0x16e>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b46:	e074      	b.n	8005c32 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1ce      	bne.n	8005af0 <HAL_SPI_Transmit+0x11c>
 8005b52:	e04c      	b.n	8005bee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_SPI_Transmit+0x18e>
 8005b5c:	8afb      	ldrh	r3, [r7, #22]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d140      	bne.n	8005be4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	7812      	ldrb	r2, [r2, #0]
 8005b6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b88:	e02c      	b.n	8005be4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d113      	bne.n	8005bc0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	7812      	ldrb	r2, [r2, #0]
 8005ba4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bbe:	e011      	b.n	8005be4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc0:	f7fd fcae 	bl	8003520 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d803      	bhi.n	8005bd8 <HAL_SPI_Transmit+0x204>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d102      	bne.n	8005bde <HAL_SPI_Transmit+0x20a>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d102      	bne.n	8005be4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005be2:	e026      	b.n	8005c32 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1cd      	bne.n	8005b8a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fba0 	bl	8006338 <SPI_EndRxTxTransaction>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	77fb      	strb	r3, [r7, #31]
 8005c2e:	e000      	b.n	8005c32 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005c30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c42:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3720      	adds	r7, #32
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08c      	sub	sp, #48	; 0x30
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_SPI_TransmitReceive+0x26>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e18a      	b.n	8005f88 <HAL_SPI_TransmitReceive+0x33c>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c7a:	f7fd fc51 	bl	8003520 <HAL_GetTick>
 8005c7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c90:	887b      	ldrh	r3, [r7, #2]
 8005c92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d00f      	beq.n	8005cbc <HAL_SPI_TransmitReceive+0x70>
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ca2:	d107      	bne.n	8005cb4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d103      	bne.n	8005cb4 <HAL_SPI_TransmitReceive+0x68>
 8005cac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d003      	beq.n	8005cbc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005cba:	e15b      	b.n	8005f74 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d005      	beq.n	8005cce <HAL_SPI_TransmitReceive+0x82>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_SPI_TransmitReceive+0x82>
 8005cc8:	887b      	ldrh	r3, [r7, #2]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d103      	bne.n	8005cd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005cd4:	e14e      	b.n	8005f74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d003      	beq.n	8005cea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2205      	movs	r2, #5
 8005ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	887a      	ldrh	r2, [r7, #2]
 8005cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	887a      	ldrh	r2, [r7, #2]
 8005d00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	887a      	ldrh	r2, [r7, #2]
 8005d0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	887a      	ldrh	r2, [r7, #2]
 8005d12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d007      	beq.n	8005d3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d46:	d178      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x10a>
 8005d50:	8b7b      	ldrh	r3, [r7, #26]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d166      	bne.n	8005e24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	881a      	ldrh	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d66:	1c9a      	adds	r2, r3, #2
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d7a:	e053      	b.n	8005e24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d11b      	bne.n	8005dc2 <HAL_SPI_TransmitReceive+0x176>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d016      	beq.n	8005dc2 <HAL_SPI_TransmitReceive+0x176>
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d113      	bne.n	8005dc2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9e:	881a      	ldrh	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005daa:	1c9a      	adds	r2, r3, #2
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d119      	bne.n	8005e04 <HAL_SPI_TransmitReceive+0x1b8>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d014      	beq.n	8005e04 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	b292      	uxth	r2, r2
 8005de6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	1c9a      	adds	r2, r3, #2
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e00:	2301      	movs	r3, #1
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e04:	f7fd fb8c 	bl	8003520 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d807      	bhi.n	8005e24 <HAL_SPI_TransmitReceive+0x1d8>
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	d003      	beq.n	8005e24 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005e22:	e0a7      	b.n	8005f74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1a6      	bne.n	8005d7c <HAL_SPI_TransmitReceive+0x130>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1a1      	bne.n	8005d7c <HAL_SPI_TransmitReceive+0x130>
 8005e38:	e07c      	b.n	8005f34 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <HAL_SPI_TransmitReceive+0x1fc>
 8005e42:	8b7b      	ldrh	r3, [r7, #26]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d16b      	bne.n	8005f20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	7812      	ldrb	r2, [r2, #0]
 8005e54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e6e:	e057      	b.n	8005f20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d11c      	bne.n	8005eb8 <HAL_SPI_TransmitReceive+0x26c>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d017      	beq.n	8005eb8 <HAL_SPI_TransmitReceive+0x26c>
 8005e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d114      	bne.n	8005eb8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	7812      	ldrb	r2, [r2, #0]
 8005e9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d119      	bne.n	8005efa <HAL_SPI_TransmitReceive+0x2ae>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d014      	beq.n	8005efa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005efa:	f7fd fb11 	bl	8003520 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d803      	bhi.n	8005f12 <HAL_SPI_TransmitReceive+0x2c6>
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f10:	d102      	bne.n	8005f18 <HAL_SPI_TransmitReceive+0x2cc>
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d103      	bne.n	8005f20 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005f1e:	e029      	b.n	8005f74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1a2      	bne.n	8005e70 <HAL_SPI_TransmitReceive+0x224>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d19d      	bne.n	8005e70 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f9fd 	bl	8006338 <SPI_EndRxTxTransaction>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d006      	beq.n	8005f52 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005f50:	e010      	b.n	8005f74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10b      	bne.n	8005f72 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	e000      	b.n	8005f74 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005f72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3730      	adds	r7, #48	; 0x30
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_SPI_Transmit_DMA+0x20>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e09b      	b.n	80060e8 <HAL_SPI_Transmit_DMA+0x158>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d002      	beq.n	8005fca <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fc8:	e089      	b.n	80060de <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <HAL_SPI_Transmit_DMA+0x46>
 8005fd0:	88fb      	ldrh	r3, [r7, #6]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d102      	bne.n	8005fdc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fda:	e080      	b.n	80060de <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2203      	movs	r2, #3
 8005fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	88fa      	ldrh	r2, [r7, #6]
 8005ff4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	88fa      	ldrh	r2, [r7, #6]
 8005ffa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006022:	d10f      	bne.n	8006044 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006032:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006042:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006048:	4a29      	ldr	r2, [pc, #164]	; (80060f0 <HAL_SPI_Transmit_DMA+0x160>)
 800604a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006050:	4a28      	ldr	r2, [pc, #160]	; (80060f4 <HAL_SPI_Transmit_DMA+0x164>)
 8006052:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006058:	4a27      	ldr	r2, [pc, #156]	; (80060f8 <HAL_SPI_Transmit_DMA+0x168>)
 800605a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006060:	2200      	movs	r2, #0
 8006062:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606c:	4619      	mov	r1, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800607a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800607c:	f7fe f832 	bl	80040e4 <HAL_DMA_Start_IT>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00c      	beq.n	80060a0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608a:	f043 0210 	orr.w	r2, r3, #16
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800609e:	e01e      	b.n	80060de <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060aa:	2b40      	cmp	r3, #64	; 0x40
 80060ac:	d007      	beq.n	80060be <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060bc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0220 	orr.w	r2, r2, #32
 80060cc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0202 	orr.w	r2, r2, #2
 80060dc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	080061cd 	.word	0x080061cd
 80060f4:	08006125 	.word	0x08006125
 80060f8:	080061e9 	.word	0x080061e9

080060fc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006132:	f7fd f9f5 	bl	8003520 <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006146:	d03b      	beq.n	80061c0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0220 	bic.w	r2, r2, #32
 8006156:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0202 	bic.w	r2, r2, #2
 8006166:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	2164      	movs	r1, #100	; 0x64
 800616c:	6978      	ldr	r0, [r7, #20]
 800616e:	f000 f8e3 	bl	8006338 <SPI_EndRxTxTransaction>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2200      	movs	r2, #0
 80061a6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80061b8:	6978      	ldr	r0, [r7, #20]
 80061ba:	f7ff ffa9 	bl	8006110 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80061be:	e002      	b.n	80061c6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80061c0:	6978      	ldr	r0, [r7, #20]
 80061c2:	f7fc fa35 	bl	8002630 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f7ff ff8e 	bl	80060fc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061e0:	bf00      	nop
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0203 	bic.w	r2, r2, #3
 8006204:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	f043 0210 	orr.w	r2, r3, #16
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f7ff ff78 	bl	8006110 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006220:	bf00      	nop
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	4613      	mov	r3, r2
 8006236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006238:	f7fd f972 	bl	8003520 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	4413      	add	r3, r2
 8006246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006248:	f7fd f96a 	bl	8003520 <HAL_GetTick>
 800624c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800624e:	4b39      	ldr	r3, [pc, #228]	; (8006334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	015b      	lsls	r3, r3, #5
 8006254:	0d1b      	lsrs	r3, r3, #20
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800625e:	e054      	b.n	800630a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d050      	beq.n	800630a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006268:	f7fd f95a 	bl	8003520 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	429a      	cmp	r2, r3
 8006276:	d902      	bls.n	800627e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d13d      	bne.n	80062fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800628c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006296:	d111      	bne.n	80062bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a0:	d004      	beq.n	80062ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062aa:	d107      	bne.n	80062bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c4:	d10f      	bne.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e017      	b.n	800632a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3b01      	subs	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4013      	ands	r3, r2
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	bf0c      	ite	eq
 800631a:	2301      	moveq	r3, #1
 800631c:	2300      	movne	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	429a      	cmp	r2, r3
 8006326:	d19b      	bne.n	8006260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3720      	adds	r7, #32
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000008 	.word	0x20000008

08006338 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006344:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <SPI_EndRxTxTransaction+0x7c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <SPI_EndRxTxTransaction+0x80>)
 800634a:	fba2 2303 	umull	r2, r3, r2, r3
 800634e:	0d5b      	lsrs	r3, r3, #21
 8006350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006354:	fb02 f303 	mul.w	r3, r2, r3
 8006358:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006362:	d112      	bne.n	800638a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2200      	movs	r2, #0
 800636c:	2180      	movs	r1, #128	; 0x80
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f7ff ff5a 	bl	8006228 <SPI_WaitFlagStateUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d016      	beq.n	80063a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637e:	f043 0220 	orr.w	r2, r3, #32
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e00f      	b.n	80063aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	3b01      	subs	r3, #1
 8006394:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a0:	2b80      	cmp	r3, #128	; 0x80
 80063a2:	d0f2      	beq.n	800638a <SPI_EndRxTxTransaction+0x52>
 80063a4:	e000      	b.n	80063a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80063a6:	bf00      	nop
  }

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000008 	.word	0x20000008
 80063b8:	165e9f81 	.word	0x165e9f81

080063bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e097      	b.n	8006500 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7fc ff33 	bl	8003250 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2202      	movs	r2, #2
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6812      	ldr	r2, [r2, #0]
 80063fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006400:	f023 0307 	bic.w	r3, r3, #7
 8006404:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3304      	adds	r3, #4
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f000 f907 	bl	8006624 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	4313      	orrs	r3, r2
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800645c:	f023 030c 	bic.w	r3, r3, #12
 8006460:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006468:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800646c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	4313      	orrs	r3, r2
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4313      	orrs	r3, r2
 800647e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	011a      	lsls	r2, r3, #4
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	031b      	lsls	r3, r3, #12
 800648c:	4313      	orrs	r3, r2
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800649a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80064a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	4313      	orrs	r3, r2
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006518:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006520:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006528:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006530:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d110      	bne.n	800655a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d102      	bne.n	8006544 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800653e:	7b7b      	ldrb	r3, [r7, #13]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d001      	beq.n	8006548 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e069      	b.n	800661c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006558:	e031      	b.n	80065be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b04      	cmp	r3, #4
 800655e:	d110      	bne.n	8006582 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006560:	7bbb      	ldrb	r3, [r7, #14]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d102      	bne.n	800656c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006566:	7b3b      	ldrb	r3, [r7, #12]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d001      	beq.n	8006570 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e055      	b.n	800661c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006580:	e01d      	b.n	80065be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d108      	bne.n	800659a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d105      	bne.n	800659a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800658e:	7b7b      	ldrb	r3, [r7, #13]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d102      	bne.n	800659a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006594:	7b3b      	ldrb	r3, [r7, #12]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d001      	beq.n	800659e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e03e      	b.n	800661c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2202      	movs	r2, #2
 80065aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2202      	movs	r2, #2
 80065b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_TIM_Encoder_Start+0xc4>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d008      	beq.n	80065dc <HAL_TIM_Encoder_Start+0xd4>
 80065ca:	e00f      	b.n	80065ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2201      	movs	r2, #1
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 f8a5 	bl	8006724 <TIM_CCxChannelCmd>
      break;
 80065da:	e016      	b.n	800660a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2201      	movs	r2, #1
 80065e2:	2104      	movs	r1, #4
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 f89d 	bl	8006724 <TIM_CCxChannelCmd>
      break;
 80065ea:	e00e      	b.n	800660a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2201      	movs	r2, #1
 80065f2:	2100      	movs	r1, #0
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 f895 	bl	8006724 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2201      	movs	r2, #1
 8006600:	2104      	movs	r1, #4
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f88e 	bl	8006724 <TIM_CCxChannelCmd>
      break;
 8006608:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0201 	orr.w	r2, r2, #1
 8006618:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a34      	ldr	r2, [pc, #208]	; (8006708 <TIM_Base_SetConfig+0xe4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00f      	beq.n	800665c <TIM_Base_SetConfig+0x38>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006642:	d00b      	beq.n	800665c <TIM_Base_SetConfig+0x38>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a31      	ldr	r2, [pc, #196]	; (800670c <TIM_Base_SetConfig+0xe8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d007      	beq.n	800665c <TIM_Base_SetConfig+0x38>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a30      	ldr	r2, [pc, #192]	; (8006710 <TIM_Base_SetConfig+0xec>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_Base_SetConfig+0x38>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a2f      	ldr	r2, [pc, #188]	; (8006714 <TIM_Base_SetConfig+0xf0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d108      	bne.n	800666e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a25      	ldr	r2, [pc, #148]	; (8006708 <TIM_Base_SetConfig+0xe4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01b      	beq.n	80066ae <TIM_Base_SetConfig+0x8a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667c:	d017      	beq.n	80066ae <TIM_Base_SetConfig+0x8a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a22      	ldr	r2, [pc, #136]	; (800670c <TIM_Base_SetConfig+0xe8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <TIM_Base_SetConfig+0x8a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a21      	ldr	r2, [pc, #132]	; (8006710 <TIM_Base_SetConfig+0xec>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00f      	beq.n	80066ae <TIM_Base_SetConfig+0x8a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a20      	ldr	r2, [pc, #128]	; (8006714 <TIM_Base_SetConfig+0xf0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00b      	beq.n	80066ae <TIM_Base_SetConfig+0x8a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a1f      	ldr	r2, [pc, #124]	; (8006718 <TIM_Base_SetConfig+0xf4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d007      	beq.n	80066ae <TIM_Base_SetConfig+0x8a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a1e      	ldr	r2, [pc, #120]	; (800671c <TIM_Base_SetConfig+0xf8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d003      	beq.n	80066ae <TIM_Base_SetConfig+0x8a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a1d      	ldr	r2, [pc, #116]	; (8006720 <TIM_Base_SetConfig+0xfc>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d108      	bne.n	80066c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a08      	ldr	r2, [pc, #32]	; (8006708 <TIM_Base_SetConfig+0xe4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d103      	bne.n	80066f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	615a      	str	r2, [r3, #20]
}
 80066fa:	bf00      	nop
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40010000 	.word	0x40010000
 800670c:	40000400 	.word	0x40000400
 8006710:	40000800 	.word	0x40000800
 8006714:	40000c00 	.word	0x40000c00
 8006718:	40014000 	.word	0x40014000
 800671c:	40014400 	.word	0x40014400
 8006720:	40014800 	.word	0x40014800

08006724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	2201      	movs	r2, #1
 8006738:	fa02 f303 	lsl.w	r3, r2, r3
 800673c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a1a      	ldr	r2, [r3, #32]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	43db      	mvns	r3, r3
 8006746:	401a      	ands	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a1a      	ldr	r2, [r3, #32]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f003 031f 	and.w	r3, r3, #31
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	fa01 f303 	lsl.w	r3, r1, r3
 800675c:	431a      	orrs	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	621a      	str	r2, [r3, #32]
}
 8006762:	bf00      	nop
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006784:	2302      	movs	r3, #2
 8006786:	e050      	b.n	800682a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1c      	ldr	r2, [pc, #112]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d018      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d4:	d013      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a18      	ldr	r2, [pc, #96]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00e      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a16      	ldr	r2, [pc, #88]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d009      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a15      	ldr	r2, [pc, #84]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d004      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a13      	ldr	r2, [pc, #76]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d10c      	bne.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	4313      	orrs	r3, r2
 800680e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40010000 	.word	0x40010000
 800683c:	40000400 	.word	0x40000400
 8006840:	40000800 	.word	0x40000800
 8006844:	40000c00 	.word	0x40000c00
 8006848:	40014000 	.word	0x40014000

0800684c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e03f      	b.n	80068de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fc fd7c 	bl	8003370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2224      	movs	r2, #36	; 0x24
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800688e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f929 	bl	8006ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695a      	ldr	r2, [r3, #20]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b08a      	sub	sp, #40	; 0x28
 80068ea:	af02      	add	r7, sp, #8
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	603b      	str	r3, [r7, #0]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b20      	cmp	r3, #32
 8006904:	d17c      	bne.n	8006a00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <HAL_UART_Transmit+0x2c>
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e075      	b.n	8006a02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_UART_Transmit+0x3e>
 8006920:	2302      	movs	r3, #2
 8006922:	e06e      	b.n	8006a02 <HAL_UART_Transmit+0x11c>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2221      	movs	r2, #33	; 0x21
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800693a:	f7fc fdf1 	bl	8003520 <HAL_GetTick>
 800693e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	88fa      	ldrh	r2, [r7, #6]
 8006944:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	88fa      	ldrh	r2, [r7, #6]
 800694a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006954:	d108      	bne.n	8006968 <HAL_UART_Transmit+0x82>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800695e:	2300      	movs	r3, #0
 8006960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	e003      	b.n	8006970 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800696c:	2300      	movs	r3, #0
 800696e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006978:	e02a      	b.n	80069d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2200      	movs	r2, #0
 8006982:	2180      	movs	r1, #128	; 0x80
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f840 	bl	8006a0a <UART_WaitOnFlagUntilTimeout>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e036      	b.n	8006a02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	3302      	adds	r3, #2
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	e007      	b.n	80069c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	781a      	ldrb	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	3301      	adds	r3, #1
 80069c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1cf      	bne.n	800697a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2200      	movs	r2, #0
 80069e2:	2140      	movs	r1, #64	; 0x40
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f810 	bl	8006a0a <UART_WaitOnFlagUntilTimeout>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e006      	b.n	8006a02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	e000      	b.n	8006a02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a00:	2302      	movs	r3, #2
  }
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3720      	adds	r7, #32
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b090      	sub	sp, #64	; 0x40
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	603b      	str	r3, [r7, #0]
 8006a16:	4613      	mov	r3, r2
 8006a18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a1a:	e050      	b.n	8006abe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a22:	d04c      	beq.n	8006abe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d007      	beq.n	8006a3a <UART_WaitOnFlagUntilTimeout+0x30>
 8006a2a:	f7fc fd79 	bl	8003520 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d241      	bcs.n	8006abe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	330c      	adds	r3, #12
 8006a40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	330c      	adds	r3, #12
 8006a58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a5a:	637a      	str	r2, [r7, #52]	; 0x34
 8006a5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e5      	bne.n	8006a3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3314      	adds	r3, #20
 8006a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3314      	adds	r3, #20
 8006a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a8e:	623a      	str	r2, [r7, #32]
 8006a90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	69f9      	ldr	r1, [r7, #28]
 8006a94:	6a3a      	ldr	r2, [r7, #32]
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e5      	bne.n	8006a6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e00f      	b.n	8006ade <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	bf0c      	ite	eq
 8006ace:	2301      	moveq	r3, #1
 8006ad0:	2300      	movne	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d09f      	beq.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3740      	adds	r7, #64	; 0x40
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	b09f      	sub	sp, #124	; 0x7c
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afe:	68d9      	ldr	r1, [r3, #12]
 8006b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	ea40 0301 	orr.w	r3, r0, r1
 8006b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b2c:	f021 010c 	bic.w	r1, r1, #12
 8006b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b36:	430b      	orrs	r3, r1
 8006b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b46:	6999      	ldr	r1, [r3, #24]
 8006b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	ea40 0301 	orr.w	r3, r0, r1
 8006b50:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4bc5      	ldr	r3, [pc, #788]	; (8006e6c <UART_SetConfig+0x384>)
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d004      	beq.n	8006b66 <UART_SetConfig+0x7e>
 8006b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	4bc3      	ldr	r3, [pc, #780]	; (8006e70 <UART_SetConfig+0x388>)
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d103      	bne.n	8006b6e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b66:	f7fe fcc5 	bl	80054f4 <HAL_RCC_GetPCLK2Freq>
 8006b6a:	6778      	str	r0, [r7, #116]	; 0x74
 8006b6c:	e002      	b.n	8006b74 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b6e:	f7fe fcad 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 8006b72:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b7c:	f040 80b6 	bne.w	8006cec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b82:	461c      	mov	r4, r3
 8006b84:	f04f 0500 	mov.w	r5, #0
 8006b88:	4622      	mov	r2, r4
 8006b8a:	462b      	mov	r3, r5
 8006b8c:	1891      	adds	r1, r2, r2
 8006b8e:	6439      	str	r1, [r7, #64]	; 0x40
 8006b90:	415b      	adcs	r3, r3
 8006b92:	647b      	str	r3, [r7, #68]	; 0x44
 8006b94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b98:	1912      	adds	r2, r2, r4
 8006b9a:	eb45 0303 	adc.w	r3, r5, r3
 8006b9e:	f04f 0000 	mov.w	r0, #0
 8006ba2:	f04f 0100 	mov.w	r1, #0
 8006ba6:	00d9      	lsls	r1, r3, #3
 8006ba8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bac:	00d0      	lsls	r0, r2, #3
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	1911      	adds	r1, r2, r4
 8006bb4:	6639      	str	r1, [r7, #96]	; 0x60
 8006bb6:	416b      	adcs	r3, r5
 8006bb8:	667b      	str	r3, [r7, #100]	; 0x64
 8006bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	1891      	adds	r1, r2, r2
 8006bc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bc8:	415b      	adcs	r3, r3
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bd0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006bd4:	f7f9 ff42 	bl	8000a5c <__aeabi_uldivmod>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4ba5      	ldr	r3, [pc, #660]	; (8006e74 <UART_SetConfig+0x38c>)
 8006bde:	fba3 2302 	umull	r2, r3, r3, r2
 8006be2:	095b      	lsrs	r3, r3, #5
 8006be4:	011e      	lsls	r6, r3, #4
 8006be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006be8:	461c      	mov	r4, r3
 8006bea:	f04f 0500 	mov.w	r5, #0
 8006bee:	4622      	mov	r2, r4
 8006bf0:	462b      	mov	r3, r5
 8006bf2:	1891      	adds	r1, r2, r2
 8006bf4:	6339      	str	r1, [r7, #48]	; 0x30
 8006bf6:	415b      	adcs	r3, r3
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006bfe:	1912      	adds	r2, r2, r4
 8006c00:	eb45 0303 	adc.w	r3, r5, r3
 8006c04:	f04f 0000 	mov.w	r0, #0
 8006c08:	f04f 0100 	mov.w	r1, #0
 8006c0c:	00d9      	lsls	r1, r3, #3
 8006c0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c12:	00d0      	lsls	r0, r2, #3
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	1911      	adds	r1, r2, r4
 8006c1a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c1c:	416b      	adcs	r3, r5
 8006c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	461a      	mov	r2, r3
 8006c26:	f04f 0300 	mov.w	r3, #0
 8006c2a:	1891      	adds	r1, r2, r2
 8006c2c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c2e:	415b      	adcs	r3, r3
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006c3a:	f7f9 ff0f 	bl	8000a5c <__aeabi_uldivmod>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4b8c      	ldr	r3, [pc, #560]	; (8006e74 <UART_SetConfig+0x38c>)
 8006c44:	fba3 1302 	umull	r1, r3, r3, r2
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	2164      	movs	r1, #100	; 0x64
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	3332      	adds	r3, #50	; 0x32
 8006c56:	4a87      	ldr	r2, [pc, #540]	; (8006e74 <UART_SetConfig+0x38c>)
 8006c58:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c64:	441e      	add	r6, r3
 8006c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f04f 0100 	mov.w	r1, #0
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	1894      	adds	r4, r2, r2
 8006c74:	623c      	str	r4, [r7, #32]
 8006c76:	415b      	adcs	r3, r3
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
 8006c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c7e:	1812      	adds	r2, r2, r0
 8006c80:	eb41 0303 	adc.w	r3, r1, r3
 8006c84:	f04f 0400 	mov.w	r4, #0
 8006c88:	f04f 0500 	mov.w	r5, #0
 8006c8c:	00dd      	lsls	r5, r3, #3
 8006c8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c92:	00d4      	lsls	r4, r2, #3
 8006c94:	4622      	mov	r2, r4
 8006c96:	462b      	mov	r3, r5
 8006c98:	1814      	adds	r4, r2, r0
 8006c9a:	653c      	str	r4, [r7, #80]	; 0x50
 8006c9c:	414b      	adcs	r3, r1
 8006c9e:	657b      	str	r3, [r7, #84]	; 0x54
 8006ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	1891      	adds	r1, r2, r2
 8006cac:	61b9      	str	r1, [r7, #24]
 8006cae:	415b      	adcs	r3, r3
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cb6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006cba:	f7f9 fecf 	bl	8000a5c <__aeabi_uldivmod>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4b6c      	ldr	r3, [pc, #432]	; (8006e74 <UART_SetConfig+0x38c>)
 8006cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	2164      	movs	r1, #100	; 0x64
 8006ccc:	fb01 f303 	mul.w	r3, r1, r3
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	3332      	adds	r3, #50	; 0x32
 8006cd6:	4a67      	ldr	r2, [pc, #412]	; (8006e74 <UART_SetConfig+0x38c>)
 8006cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cdc:	095b      	lsrs	r3, r3, #5
 8006cde:	f003 0207 	and.w	r2, r3, #7
 8006ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4432      	add	r2, r6
 8006ce8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cea:	e0b9      	b.n	8006e60 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cee:	461c      	mov	r4, r3
 8006cf0:	f04f 0500 	mov.w	r5, #0
 8006cf4:	4622      	mov	r2, r4
 8006cf6:	462b      	mov	r3, r5
 8006cf8:	1891      	adds	r1, r2, r2
 8006cfa:	6139      	str	r1, [r7, #16]
 8006cfc:	415b      	adcs	r3, r3
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d04:	1912      	adds	r2, r2, r4
 8006d06:	eb45 0303 	adc.w	r3, r5, r3
 8006d0a:	f04f 0000 	mov.w	r0, #0
 8006d0e:	f04f 0100 	mov.w	r1, #0
 8006d12:	00d9      	lsls	r1, r3, #3
 8006d14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d18:	00d0      	lsls	r0, r2, #3
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	eb12 0804 	adds.w	r8, r2, r4
 8006d22:	eb43 0905 	adc.w	r9, r3, r5
 8006d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f04f 0100 	mov.w	r1, #0
 8006d30:	f04f 0200 	mov.w	r2, #0
 8006d34:	f04f 0300 	mov.w	r3, #0
 8006d38:	008b      	lsls	r3, r1, #2
 8006d3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d3e:	0082      	lsls	r2, r0, #2
 8006d40:	4640      	mov	r0, r8
 8006d42:	4649      	mov	r1, r9
 8006d44:	f7f9 fe8a 	bl	8000a5c <__aeabi_uldivmod>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4b49      	ldr	r3, [pc, #292]	; (8006e74 <UART_SetConfig+0x38c>)
 8006d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d52:	095b      	lsrs	r3, r3, #5
 8006d54:	011e      	lsls	r6, r3, #4
 8006d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f04f 0100 	mov.w	r1, #0
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	1894      	adds	r4, r2, r2
 8006d64:	60bc      	str	r4, [r7, #8]
 8006d66:	415b      	adcs	r3, r3
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d6e:	1812      	adds	r2, r2, r0
 8006d70:	eb41 0303 	adc.w	r3, r1, r3
 8006d74:	f04f 0400 	mov.w	r4, #0
 8006d78:	f04f 0500 	mov.w	r5, #0
 8006d7c:	00dd      	lsls	r5, r3, #3
 8006d7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d82:	00d4      	lsls	r4, r2, #3
 8006d84:	4622      	mov	r2, r4
 8006d86:	462b      	mov	r3, r5
 8006d88:	1814      	adds	r4, r2, r0
 8006d8a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d8c:	414b      	adcs	r3, r1
 8006d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f04f 0100 	mov.w	r1, #0
 8006d9a:	f04f 0200 	mov.w	r2, #0
 8006d9e:	f04f 0300 	mov.w	r3, #0
 8006da2:	008b      	lsls	r3, r1, #2
 8006da4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006da8:	0082      	lsls	r2, r0, #2
 8006daa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006dae:	f7f9 fe55 	bl	8000a5c <__aeabi_uldivmod>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <UART_SetConfig+0x38c>)
 8006db8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	2164      	movs	r1, #100	; 0x64
 8006dc0:	fb01 f303 	mul.w	r3, r1, r3
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	3332      	adds	r3, #50	; 0x32
 8006dca:	4a2a      	ldr	r2, [pc, #168]	; (8006e74 <UART_SetConfig+0x38c>)
 8006dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd6:	441e      	add	r6, r3
 8006dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f04f 0100 	mov.w	r1, #0
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	1894      	adds	r4, r2, r2
 8006de6:	603c      	str	r4, [r7, #0]
 8006de8:	415b      	adcs	r3, r3
 8006dea:	607b      	str	r3, [r7, #4]
 8006dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df0:	1812      	adds	r2, r2, r0
 8006df2:	eb41 0303 	adc.w	r3, r1, r3
 8006df6:	f04f 0400 	mov.w	r4, #0
 8006dfa:	f04f 0500 	mov.w	r5, #0
 8006dfe:	00dd      	lsls	r5, r3, #3
 8006e00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e04:	00d4      	lsls	r4, r2, #3
 8006e06:	4622      	mov	r2, r4
 8006e08:	462b      	mov	r3, r5
 8006e0a:	eb12 0a00 	adds.w	sl, r2, r0
 8006e0e:	eb43 0b01 	adc.w	fp, r3, r1
 8006e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f04f 0100 	mov.w	r1, #0
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	008b      	lsls	r3, r1, #2
 8006e26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e2a:	0082      	lsls	r2, r0, #2
 8006e2c:	4650      	mov	r0, sl
 8006e2e:	4659      	mov	r1, fp
 8006e30:	f7f9 fe14 	bl	8000a5c <__aeabi_uldivmod>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <UART_SetConfig+0x38c>)
 8006e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	2164      	movs	r1, #100	; 0x64
 8006e42:	fb01 f303 	mul.w	r3, r1, r3
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	3332      	adds	r3, #50	; 0x32
 8006e4c:	4a09      	ldr	r2, [pc, #36]	; (8006e74 <UART_SetConfig+0x38c>)
 8006e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4432      	add	r2, r6
 8006e5e:	609a      	str	r2, [r3, #8]
}
 8006e60:	bf00      	nop
 8006e62:	377c      	adds	r7, #124	; 0x7c
 8006e64:	46bd      	mov	sp, r7
 8006e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6a:	bf00      	nop
 8006e6c:	40011000 	.word	0x40011000
 8006e70:	40011400 	.word	0x40011400
 8006e74:	51eb851f 	.word	0x51eb851f

08006e78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006e7c:	4904      	ldr	r1, [pc, #16]	; (8006e90 <MX_FATFS_Init+0x18>)
 8006e7e:	4805      	ldr	r0, [pc, #20]	; (8006e94 <MX_FATFS_Init+0x1c>)
 8006e80:	f002 fd6e 	bl	8009960 <FATFS_LinkDriver>
 8006e84:	4603      	mov	r3, r0
 8006e86:	461a      	mov	r2, r3
 8006e88:	4b03      	ldr	r3, [pc, #12]	; (8006e98 <MX_FATFS_Init+0x20>)
 8006e8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e8c:	bf00      	nop
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	2000a944 	.word	0x2000a944
 8006e94:	20000014 	.word	0x20000014
 8006e98:	2000a948 	.word	0x2000a948

08006e9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006ea0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fa fa6d 	bl	8001398 <SD_disk_initialize>
 8006ebe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fa fb4b 	bl	8001570 <SD_disk_status>
 8006eda:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	607a      	str	r2, [r7, #4]
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8006ef4:	7bf8      	ldrb	r0, [r7, #15]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	68b9      	ldr	r1, [r7, #8]
 8006efc:	f7fa fb4e 	bl	800159c <SD_disk_read>
 8006f00:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	4603      	mov	r3, r0
 8006f18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8006f1a:	7bf8      	ldrb	r0, [r7, #15]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	f7fa fba5 	bl	8001670 <SD_disk_write>
 8006f26:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	603a      	str	r2, [r7, #0]
 8006f3a:	71fb      	strb	r3, [r7, #7]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8006f40:	79b9      	ldrb	r1, [r7, #6]
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fa fc16 	bl	8001778 <SD_disk_ioctl>
 8006f4c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	4a08      	ldr	r2, [pc, #32]	; (8006f88 <disk_status+0x30>)
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	79fa      	ldrb	r2, [r7, #7]
 8006f70:	4905      	ldr	r1, [pc, #20]	; (8006f88 <disk_status+0x30>)
 8006f72:	440a      	add	r2, r1
 8006f74:	7a12      	ldrb	r2, [r2, #8]
 8006f76:	4610      	mov	r0, r2
 8006f78:	4798      	blx	r3
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	2000a0f8 	.word	0x2000a0f8

08006f8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	4a0d      	ldr	r2, [pc, #52]	; (8006fd4 <disk_initialize+0x48>)
 8006f9e:	5cd3      	ldrb	r3, [r2, r3]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d111      	bne.n	8006fc8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	4a0b      	ldr	r2, [pc, #44]	; (8006fd4 <disk_initialize+0x48>)
 8006fa8:	2101      	movs	r1, #1
 8006faa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	4a09      	ldr	r2, [pc, #36]	; (8006fd4 <disk_initialize+0x48>)
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	79fa      	ldrb	r2, [r7, #7]
 8006fba:	4906      	ldr	r1, [pc, #24]	; (8006fd4 <disk_initialize+0x48>)
 8006fbc:	440a      	add	r2, r1
 8006fbe:	7a12      	ldrb	r2, [r2, #8]
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	4798      	blx	r3
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	2000a0f8 	.word	0x2000a0f8

08006fd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	4a0a      	ldr	r2, [pc, #40]	; (8007014 <disk_read+0x3c>)
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	689c      	ldr	r4, [r3, #8]
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	4a07      	ldr	r2, [pc, #28]	; (8007014 <disk_read+0x3c>)
 8006ff8:	4413      	add	r3, r2
 8006ffa:	7a18      	ldrb	r0, [r3, #8]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	47a0      	blx	r4
 8007004:	4603      	mov	r3, r0
 8007006:	75fb      	strb	r3, [r7, #23]
  return res;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
}
 800700a:	4618      	mov	r0, r3
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	bd90      	pop	{r4, r7, pc}
 8007012:	bf00      	nop
 8007014:	2000a0f8 	.word	0x2000a0f8

08007018 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007018:	b590      	push	{r4, r7, lr}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
 8007022:	603b      	str	r3, [r7, #0]
 8007024:	4603      	mov	r3, r0
 8007026:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	4a0a      	ldr	r2, [pc, #40]	; (8007054 <disk_write+0x3c>)
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	68dc      	ldr	r4, [r3, #12]
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	4a07      	ldr	r2, [pc, #28]	; (8007054 <disk_write+0x3c>)
 8007038:	4413      	add	r3, r2
 800703a:	7a18      	ldrb	r0, [r3, #8]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	68b9      	ldr	r1, [r7, #8]
 8007042:	47a0      	blx	r4
 8007044:	4603      	mov	r3, r0
 8007046:	75fb      	strb	r3, [r7, #23]
  return res;
 8007048:	7dfb      	ldrb	r3, [r7, #23]
}
 800704a:	4618      	mov	r0, r3
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	bd90      	pop	{r4, r7, pc}
 8007052:	bf00      	nop
 8007054:	2000a0f8 	.word	0x2000a0f8

08007058 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	603a      	str	r2, [r7, #0]
 8007062:	71fb      	strb	r3, [r7, #7]
 8007064:	460b      	mov	r3, r1
 8007066:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	4a09      	ldr	r2, [pc, #36]	; (8007090 <disk_ioctl+0x38>)
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	79fa      	ldrb	r2, [r7, #7]
 8007076:	4906      	ldr	r1, [pc, #24]	; (8007090 <disk_ioctl+0x38>)
 8007078:	440a      	add	r2, r1
 800707a:	7a10      	ldrb	r0, [r2, #8]
 800707c:	79b9      	ldrb	r1, [r7, #6]
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	4798      	blx	r3
 8007082:	4603      	mov	r3, r0
 8007084:	73fb      	strb	r3, [r7, #15]
  return res;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	2000a0f8 	.word	0x2000a0f8

08007094 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3301      	adds	r3, #1
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80070a4:	89fb      	ldrh	r3, [r7, #14]
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	b21a      	sxth	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	b21b      	sxth	r3, r3
 80070b0:	4313      	orrs	r3, r2
 80070b2:	b21b      	sxth	r3, r3
 80070b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80070b6:	89fb      	ldrh	r3, [r7, #14]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3303      	adds	r3, #3
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	3202      	adds	r2, #2
 80070dc:	7812      	ldrb	r2, [r2, #0]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	3201      	adds	r2, #1
 80070ea:	7812      	ldrb	r2, [r2, #0]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	021b      	lsls	r3, r3, #8
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	7812      	ldrb	r2, [r2, #0]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80070fc:	68fb      	ldr	r3, [r7, #12]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	887a      	ldrh	r2, [r7, #2]
 800711e:	b2d2      	uxtb	r2, r2
 8007120:	701a      	strb	r2, [r3, #0]
 8007122:	887b      	ldrh	r3, [r7, #2]
 8007124:	0a1b      	lsrs	r3, r3, #8
 8007126:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	607a      	str	r2, [r7, #4]
 800712e:	887a      	ldrh	r2, [r7, #2]
 8007130:	b2d2      	uxtb	r2, r2
 8007132:	701a      	strb	r2, [r3, #0]
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	0a1b      	lsrs	r3, r3, #8
 800715a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	607a      	str	r2, [r7, #4]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	b2d2      	uxtb	r2, r2
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	0a1b      	lsrs	r3, r3, #8
 800716c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	0a1b      	lsrs	r3, r3, #8
 800717e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	701a      	strb	r2, [r3, #0]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00d      	beq.n	80071ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	1c53      	adds	r3, r2, #1
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	1c59      	adds	r1, r3, #1
 80071bc:	6179      	str	r1, [r7, #20]
 80071be:	7812      	ldrb	r2, [r2, #0]
 80071c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	607b      	str	r3, [r7, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1f1      	bne.n	80071b2 <mem_cpy+0x1a>
	}
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80071da:	b480      	push	{r7}
 80071dc:	b087      	sub	sp, #28
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	617a      	str	r2, [r7, #20]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	607b      	str	r3, [r7, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1f3      	bne.n	80071ea <mem_set+0x10>
}
 8007202:	bf00      	nop
 8007204:	bf00      	nop
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007210:	b480      	push	{r7}
 8007212:	b089      	sub	sp, #36	; 0x24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	61fb      	str	r3, [r7, #28]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	61fa      	str	r2, [r7, #28]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	4619      	mov	r1, r3
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	61ba      	str	r2, [r7, #24]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	1acb      	subs	r3, r1, r3
 800723c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3b01      	subs	r3, #1
 8007242:	607b      	str	r3, [r7, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <mem_cmp+0x40>
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0eb      	beq.n	8007228 <mem_cmp+0x18>

	return r;
 8007250:	697b      	ldr	r3, [r7, #20]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3724      	adds	r7, #36	; 0x24
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007268:	e002      	b.n	8007270 <chk_chr+0x12>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3301      	adds	r3, #1
 800726e:	607b      	str	r3, [r7, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <chk_chr+0x26>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	4293      	cmp	r3, r2
 8007282:	d1f2      	bne.n	800726a <chk_chr+0xc>
	return *str;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	781b      	ldrb	r3, [r3, #0]
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800729e:	2300      	movs	r3, #0
 80072a0:	60bb      	str	r3, [r7, #8]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	e029      	b.n	80072fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80072a8:	4a27      	ldr	r2, [pc, #156]	; (8007348 <chk_lock+0xb4>)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	4413      	add	r3, r2
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d01d      	beq.n	80072f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80072b6:	4a24      	ldr	r2, [pc, #144]	; (8007348 <chk_lock+0xb4>)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	4413      	add	r3, r2
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d116      	bne.n	80072f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80072c8:	4a1f      	ldr	r2, [pc, #124]	; (8007348 <chk_lock+0xb4>)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	4413      	add	r3, r2
 80072d0:	3304      	adds	r3, #4
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80072d8:	429a      	cmp	r2, r3
 80072da:	d10c      	bne.n	80072f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80072dc:	4a1a      	ldr	r2, [pc, #104]	; (8007348 <chk_lock+0xb4>)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	4413      	add	r3, r2
 80072e4:	3308      	adds	r3, #8
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d102      	bne.n	80072f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80072f0:	e007      	b.n	8007302 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80072f2:	2301      	movs	r3, #1
 80072f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d9d2      	bls.n	80072a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d109      	bne.n	800731c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d102      	bne.n	8007314 <chk_lock+0x80>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b02      	cmp	r3, #2
 8007312:	d101      	bne.n	8007318 <chk_lock+0x84>
 8007314:	2300      	movs	r3, #0
 8007316:	e010      	b.n	800733a <chk_lock+0xa6>
 8007318:	2312      	movs	r3, #18
 800731a:	e00e      	b.n	800733a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d108      	bne.n	8007334 <chk_lock+0xa0>
 8007322:	4a09      	ldr	r2, [pc, #36]	; (8007348 <chk_lock+0xb4>)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	4413      	add	r3, r2
 800732a:	330c      	adds	r3, #12
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007332:	d101      	bne.n	8007338 <chk_lock+0xa4>
 8007334:	2310      	movs	r3, #16
 8007336:	e000      	b.n	800733a <chk_lock+0xa6>
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	2000a0d8 	.word	0x2000a0d8

0800734c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007352:	2300      	movs	r3, #0
 8007354:	607b      	str	r3, [r7, #4]
 8007356:	e002      	b.n	800735e <enq_lock+0x12>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3301      	adds	r3, #1
 800735c:	607b      	str	r3, [r7, #4]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d806      	bhi.n	8007372 <enq_lock+0x26>
 8007364:	4a09      	ldr	r2, [pc, #36]	; (800738c <enq_lock+0x40>)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	4413      	add	r3, r2
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f2      	bne.n	8007358 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b02      	cmp	r3, #2
 8007376:	bf14      	ite	ne
 8007378:	2301      	movne	r3, #1
 800737a:	2300      	moveq	r3, #0
 800737c:	b2db      	uxtb	r3, r3
}
 800737e:	4618      	mov	r0, r3
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	2000a0d8 	.word	0x2000a0d8

08007390 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	e01f      	b.n	80073e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80073a0:	4a41      	ldr	r2, [pc, #260]	; (80074a8 <inc_lock+0x118>)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	4413      	add	r3, r2
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d113      	bne.n	80073da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80073b2:	4a3d      	ldr	r2, [pc, #244]	; (80074a8 <inc_lock+0x118>)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	4413      	add	r3, r2
 80073ba:	3304      	adds	r3, #4
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d109      	bne.n	80073da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80073c6:	4a38      	ldr	r2, [pc, #224]	; (80074a8 <inc_lock+0x118>)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	4413      	add	r3, r2
 80073ce:	3308      	adds	r3, #8
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d006      	beq.n	80073e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3301      	adds	r3, #1
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d9dc      	bls.n	80073a0 <inc_lock+0x10>
 80073e6:	e000      	b.n	80073ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80073e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d132      	bne.n	8007456 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80073f0:	2300      	movs	r3, #0
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	e002      	b.n	80073fc <inc_lock+0x6c>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3301      	adds	r3, #1
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d806      	bhi.n	8007410 <inc_lock+0x80>
 8007402:	4a29      	ldr	r2, [pc, #164]	; (80074a8 <inc_lock+0x118>)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	4413      	add	r3, r2
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1f2      	bne.n	80073f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d101      	bne.n	800741a <inc_lock+0x8a>
 8007416:	2300      	movs	r3, #0
 8007418:	e040      	b.n	800749c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	4922      	ldr	r1, [pc, #136]	; (80074a8 <inc_lock+0x118>)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	011b      	lsls	r3, r3, #4
 8007424:	440b      	add	r3, r1
 8007426:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	491e      	ldr	r1, [pc, #120]	; (80074a8 <inc_lock+0x118>)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	440b      	add	r3, r1
 8007434:	3304      	adds	r3, #4
 8007436:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695a      	ldr	r2, [r3, #20]
 800743c:	491a      	ldr	r1, [pc, #104]	; (80074a8 <inc_lock+0x118>)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	440b      	add	r3, r1
 8007444:	3308      	adds	r3, #8
 8007446:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007448:	4a17      	ldr	r2, [pc, #92]	; (80074a8 <inc_lock+0x118>)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	4413      	add	r3, r2
 8007450:	330c      	adds	r3, #12
 8007452:	2200      	movs	r2, #0
 8007454:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d009      	beq.n	8007470 <inc_lock+0xe0>
 800745c:	4a12      	ldr	r2, [pc, #72]	; (80074a8 <inc_lock+0x118>)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	4413      	add	r3, r2
 8007464:	330c      	adds	r3, #12
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <inc_lock+0xe0>
 800746c:	2300      	movs	r3, #0
 800746e:	e015      	b.n	800749c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d108      	bne.n	8007488 <inc_lock+0xf8>
 8007476:	4a0c      	ldr	r2, [pc, #48]	; (80074a8 <inc_lock+0x118>)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	4413      	add	r3, r2
 800747e:	330c      	adds	r3, #12
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	3301      	adds	r3, #1
 8007484:	b29a      	uxth	r2, r3
 8007486:	e001      	b.n	800748c <inc_lock+0xfc>
 8007488:	f44f 7280 	mov.w	r2, #256	; 0x100
 800748c:	4906      	ldr	r1, [pc, #24]	; (80074a8 <inc_lock+0x118>)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	440b      	add	r3, r1
 8007494:	330c      	adds	r3, #12
 8007496:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3301      	adds	r3, #1
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	2000a0d8 	.word	0x2000a0d8

080074ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	607b      	str	r3, [r7, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d825      	bhi.n	800750c <dec_lock+0x60>
		n = Files[i].ctr;
 80074c0:	4a17      	ldr	r2, [pc, #92]	; (8007520 <dec_lock+0x74>)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	4413      	add	r3, r2
 80074c8:	330c      	adds	r3, #12
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80074ce:	89fb      	ldrh	r3, [r7, #14]
 80074d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d4:	d101      	bne.n	80074da <dec_lock+0x2e>
 80074d6:	2300      	movs	r3, #0
 80074d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80074da:	89fb      	ldrh	r3, [r7, #14]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <dec_lock+0x3a>
 80074e0:	89fb      	ldrh	r3, [r7, #14]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80074e6:	4a0e      	ldr	r2, [pc, #56]	; (8007520 <dec_lock+0x74>)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	4413      	add	r3, r2
 80074ee:	330c      	adds	r3, #12
 80074f0:	89fa      	ldrh	r2, [r7, #14]
 80074f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80074f4:	89fb      	ldrh	r3, [r7, #14]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d105      	bne.n	8007506 <dec_lock+0x5a>
 80074fa:	4a09      	ldr	r2, [pc, #36]	; (8007520 <dec_lock+0x74>)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	4413      	add	r3, r2
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	737b      	strb	r3, [r7, #13]
 800750a:	e001      	b.n	8007510 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800750c:	2302      	movs	r3, #2
 800750e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007510:	7b7b      	ldrb	r3, [r7, #13]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	2000a0d8 	.word	0x2000a0d8

08007524 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800752c:	2300      	movs	r3, #0
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	e010      	b.n	8007554 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007532:	4a0d      	ldr	r2, [pc, #52]	; (8007568 <clear_lock+0x44>)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	4413      	add	r3, r2
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	429a      	cmp	r2, r3
 8007540:	d105      	bne.n	800754e <clear_lock+0x2a>
 8007542:	4a09      	ldr	r2, [pc, #36]	; (8007568 <clear_lock+0x44>)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	4413      	add	r3, r2
 800754a:	2200      	movs	r2, #0
 800754c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3301      	adds	r3, #1
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d9eb      	bls.n	8007532 <clear_lock+0xe>
	}
}
 800755a:	bf00      	nop
 800755c:	bf00      	nop
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	2000a0d8 	.word	0x2000a0d8

0800756c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	78db      	ldrb	r3, [r3, #3]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d034      	beq.n	80075ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	7858      	ldrb	r0, [r3, #1]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007590:	2301      	movs	r3, #1
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	f7ff fd40 	bl	8007018 <disk_write>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800759e:	2301      	movs	r3, #1
 80075a0:	73fb      	strb	r3, [r7, #15]
 80075a2:	e022      	b.n	80075ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	1ad2      	subs	r2, r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d217      	bcs.n	80075ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	789b      	ldrb	r3, [r3, #2]
 80075be:	613b      	str	r3, [r7, #16]
 80075c0:	e010      	b.n	80075e4 <sync_window+0x78>
					wsect += fs->fsize;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4413      	add	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	7858      	ldrb	r0, [r3, #1]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075d6:	2301      	movs	r3, #1
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	f7ff fd1d 	bl	8007018 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	613b      	str	r3, [r7, #16]
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d8eb      	bhi.n	80075c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d01b      	beq.n	8007644 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff ffad 	bl	800756c <sync_window>
 8007612:	4603      	mov	r3, r0
 8007614:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d113      	bne.n	8007644 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	7858      	ldrb	r0, [r3, #1]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007626:	2301      	movs	r3, #1
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	f7ff fcd5 	bl	8006fd8 <disk_read>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d004      	beq.n	800763e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007634:	f04f 33ff 	mov.w	r3, #4294967295
 8007638:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800763a:	2301      	movs	r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff ff87 	bl	800756c <sync_window>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d158      	bne.n	800771a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b03      	cmp	r3, #3
 800766e:	d148      	bne.n	8007702 <sync_fs+0xb2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	791b      	ldrb	r3, [r3, #4]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d144      	bne.n	8007702 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3330      	adds	r3, #48	; 0x30
 800767c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff fda9 	bl	80071da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3330      	adds	r3, #48	; 0x30
 800768c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007690:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff fd38 	bl	800710a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3330      	adds	r3, #48	; 0x30
 800769e:	4921      	ldr	r1, [pc, #132]	; (8007724 <sync_fs+0xd4>)
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff fd4d 	bl	8007140 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3330      	adds	r3, #48	; 0x30
 80076aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80076ae:	491e      	ldr	r1, [pc, #120]	; (8007728 <sync_fs+0xd8>)
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7ff fd45 	bl	8007140 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3330      	adds	r3, #48	; 0x30
 80076ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	4619      	mov	r1, r3
 80076c4:	4610      	mov	r0, r2
 80076c6:	f7ff fd3b 	bl	8007140 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3330      	adds	r3, #48	; 0x30
 80076ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f7ff fd31 	bl	8007140 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7858      	ldrb	r0, [r3, #1]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f6:	2301      	movs	r3, #1
 80076f8:	f7ff fc8e 	bl	8007018 <disk_write>
			fs->fsi_flag = 0;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	785b      	ldrb	r3, [r3, #1]
 8007706:	2200      	movs	r2, #0
 8007708:	2100      	movs	r1, #0
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff fca4 	bl	8007058 <disk_ioctl>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <sync_fs+0xca>
 8007716:	2301      	movs	r3, #1
 8007718:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	41615252 	.word	0x41615252
 8007728:	61417272 	.word	0x61417272

0800772c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	3b02      	subs	r3, #2
 800773a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	3b02      	subs	r3, #2
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	429a      	cmp	r2, r3
 8007746:	d301      	bcc.n	800774c <clust2sect+0x20>
 8007748:	2300      	movs	r3, #0
 800774a:	e008      	b.n	800775e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	895b      	ldrh	r3, [r3, #10]
 8007750:	461a      	mov	r2, r3
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	fb03 f202 	mul.w	r2, r3, r2
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	4413      	add	r3, r2
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b086      	sub	sp, #24
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d904      	bls.n	800778a <get_fat+0x20>
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d302      	bcc.n	8007790 <get_fat+0x26>
		val = 1;	/* Internal error */
 800778a:	2301      	movs	r3, #1
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	e08f      	b.n	80078b0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007790:	f04f 33ff 	mov.w	r3, #4294967295
 8007794:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b03      	cmp	r3, #3
 800779c:	d062      	beq.n	8007864 <get_fat+0xfa>
 800779e:	2b03      	cmp	r3, #3
 80077a0:	dc7c      	bgt.n	800789c <get_fat+0x132>
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d002      	beq.n	80077ac <get_fat+0x42>
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d042      	beq.n	8007830 <get_fat+0xc6>
 80077aa:	e077      	b.n	800789c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4413      	add	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	6a1a      	ldr	r2, [r3, #32]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	0a5b      	lsrs	r3, r3, #9
 80077c2:	4413      	add	r3, r2
 80077c4:	4619      	mov	r1, r3
 80077c6:	6938      	ldr	r0, [r7, #16]
 80077c8:	f7ff ff14 	bl	80075f4 <move_window>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d167      	bne.n	80078a2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	60fa      	str	r2, [r7, #12]
 80077d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	4413      	add	r3, r2
 80077e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	6a1a      	ldr	r2, [r3, #32]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	0a5b      	lsrs	r3, r3, #9
 80077ee:	4413      	add	r3, r2
 80077f0:	4619      	mov	r1, r3
 80077f2:	6938      	ldr	r0, [r7, #16]
 80077f4:	f7ff fefe 	bl	80075f4 <move_window>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d153      	bne.n	80078a6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4413      	add	r3, r2
 8007808:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	461a      	mov	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4313      	orrs	r3, r2
 8007814:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <get_fat+0xbc>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	091b      	lsrs	r3, r3, #4
 8007824:	e002      	b.n	800782c <get_fat+0xc2>
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800782c:	617b      	str	r3, [r7, #20]
			break;
 800782e:	e03f      	b.n	80078b0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	6a1a      	ldr	r2, [r3, #32]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	0a1b      	lsrs	r3, r3, #8
 8007838:	4413      	add	r3, r2
 800783a:	4619      	mov	r1, r3
 800783c:	6938      	ldr	r0, [r7, #16]
 800783e:	f7ff fed9 	bl	80075f4 <move_window>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d130      	bne.n	80078aa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007856:	4413      	add	r3, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff fc1b 	bl	8007094 <ld_word>
 800785e:	4603      	mov	r3, r0
 8007860:	617b      	str	r3, [r7, #20]
			break;
 8007862:	e025      	b.n	80078b0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	6a1a      	ldr	r2, [r3, #32]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	09db      	lsrs	r3, r3, #7
 800786c:	4413      	add	r3, r2
 800786e:	4619      	mov	r1, r3
 8007870:	6938      	ldr	r0, [r7, #16]
 8007872:	f7ff febf 	bl	80075f4 <move_window>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d118      	bne.n	80078ae <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800788a:	4413      	add	r3, r2
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff fc19 	bl	80070c4 <ld_dword>
 8007892:	4603      	mov	r3, r0
 8007894:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007898:	617b      	str	r3, [r7, #20]
			break;
 800789a:	e009      	b.n	80078b0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800789c:	2301      	movs	r3, #1
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	e006      	b.n	80078b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078a2:	bf00      	nop
 80078a4:	e004      	b.n	80078b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078a6:	bf00      	nop
 80078a8:	e002      	b.n	80078b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80078aa:	bf00      	nop
 80078ac:	e000      	b.n	80078b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80078ae:	bf00      	nop
		}
	}

	return val;
 80078b0:	697b      	ldr	r3, [r7, #20]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80078ba:	b590      	push	{r4, r7, lr}
 80078bc:	b089      	sub	sp, #36	; 0x24
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80078c6:	2302      	movs	r3, #2
 80078c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	f240 80d2 	bls.w	8007a76 <put_fat+0x1bc>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	429a      	cmp	r2, r3
 80078da:	f080 80cc 	bcs.w	8007a76 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	f000 8096 	beq.w	8007a14 <put_fat+0x15a>
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	f300 80cd 	bgt.w	8007a88 <put_fat+0x1ce>
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d002      	beq.n	80078f8 <put_fat+0x3e>
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d06e      	beq.n	80079d4 <put_fat+0x11a>
 80078f6:	e0c7      	b.n	8007a88 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	61bb      	str	r3, [r7, #24]
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	085b      	lsrs	r3, r3, #1
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	4413      	add	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6a1a      	ldr	r2, [r3, #32]
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	0a5b      	lsrs	r3, r3, #9
 800790e:	4413      	add	r3, r2
 8007910:	4619      	mov	r1, r3
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f7ff fe6e 	bl	80075f4 <move_window>
 8007918:	4603      	mov	r3, r0
 800791a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800791c:	7ffb      	ldrb	r3, [r7, #31]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f040 80ab 	bne.w	8007a7a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	1c59      	adds	r1, r3, #1
 800792e:	61b9      	str	r1, [r7, #24]
 8007930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007934:	4413      	add	r3, r2
 8007936:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00d      	beq.n	800795e <put_fat+0xa4>
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	b25b      	sxtb	r3, r3
 8007948:	f003 030f 	and.w	r3, r3, #15
 800794c:	b25a      	sxtb	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	b25b      	sxtb	r3, r3
 8007956:	4313      	orrs	r3, r2
 8007958:	b25b      	sxtb	r3, r3
 800795a:	b2db      	uxtb	r3, r3
 800795c:	e001      	b.n	8007962 <put_fat+0xa8>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a1a      	ldr	r2, [r3, #32]
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	0a5b      	lsrs	r3, r3, #9
 8007974:	4413      	add	r3, r2
 8007976:	4619      	mov	r1, r3
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7ff fe3b 	bl	80075f4 <move_window>
 800797e:	4603      	mov	r3, r0
 8007980:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007982:	7ffb      	ldrb	r3, [r7, #31]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d17a      	bne.n	8007a7e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007994:	4413      	add	r3, r2
 8007996:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <put_fat+0xf0>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	091b      	lsrs	r3, r3, #4
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	e00e      	b.n	80079c8 <put_fat+0x10e>
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	b25b      	sxtb	r3, r3
 80079b0:	f023 030f 	bic.w	r3, r3, #15
 80079b4:	b25a      	sxtb	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	0a1b      	lsrs	r3, r3, #8
 80079ba:	b25b      	sxtb	r3, r3
 80079bc:	f003 030f 	and.w	r3, r3, #15
 80079c0:	b25b      	sxtb	r3, r3
 80079c2:	4313      	orrs	r3, r2
 80079c4:	b25b      	sxtb	r3, r3
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	70da      	strb	r2, [r3, #3]
			break;
 80079d2:	e059      	b.n	8007a88 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a1a      	ldr	r2, [r3, #32]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	4413      	add	r3, r2
 80079de:	4619      	mov	r1, r3
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f7ff fe07 	bl	80075f4 <move_window>
 80079e6:	4603      	mov	r3, r0
 80079e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079ea:	7ffb      	ldrb	r3, [r7, #31]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d148      	bne.n	8007a82 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80079fe:	4413      	add	r3, r2
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	b292      	uxth	r2, r2
 8007a04:	4611      	mov	r1, r2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fb7f 	bl	800710a <st_word>
			fs->wflag = 1;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	70da      	strb	r2, [r3, #3]
			break;
 8007a12:	e039      	b.n	8007a88 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a1a      	ldr	r2, [r3, #32]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	09db      	lsrs	r3, r3, #7
 8007a1c:	4413      	add	r3, r2
 8007a1e:	4619      	mov	r1, r3
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f7ff fde7 	bl	80075f4 <move_window>
 8007a26:	4603      	mov	r3, r0
 8007a28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a2a:	7ffb      	ldrb	r3, [r7, #31]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d12a      	bne.n	8007a86 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007a44:	4413      	add	r3, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff fb3c 	bl	80070c4 <ld_dword>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007a52:	4323      	orrs	r3, r4
 8007a54:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007a64:	4413      	add	r3, r2
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fb69 	bl	8007140 <st_dword>
			fs->wflag = 1;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2201      	movs	r2, #1
 8007a72:	70da      	strb	r2, [r3, #3]
			break;
 8007a74:	e008      	b.n	8007a88 <put_fat+0x1ce>
		}
	}
 8007a76:	bf00      	nop
 8007a78:	e006      	b.n	8007a88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007a7a:	bf00      	nop
 8007a7c:	e004      	b.n	8007a88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007a7e:	bf00      	nop
 8007a80:	e002      	b.n	8007a88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007a82:	bf00      	nop
 8007a84:	e000      	b.n	8007a88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007a86:	bf00      	nop
	return res;
 8007a88:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3724      	adds	r7, #36	; 0x24
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd90      	pop	{r4, r7, pc}

08007a92 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b088      	sub	sp, #32
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d904      	bls.n	8007ab8 <remove_chain+0x26>
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d301      	bcc.n	8007abc <remove_chain+0x2a>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e04b      	b.n	8007b54 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00c      	beq.n	8007adc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	69b8      	ldr	r0, [r7, #24]
 8007aca:	f7ff fef6 	bl	80078ba <put_fat>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007ad2:	7ffb      	ldrb	r3, [r7, #31]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <remove_chain+0x4a>
 8007ad8:	7ffb      	ldrb	r3, [r7, #31]
 8007ada:	e03b      	b.n	8007b54 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007adc:	68b9      	ldr	r1, [r7, #8]
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f7ff fe43 	bl	800776a <get_fat>
 8007ae4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d031      	beq.n	8007b50 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d101      	bne.n	8007af6 <remove_chain+0x64>
 8007af2:	2302      	movs	r3, #2
 8007af4:	e02e      	b.n	8007b54 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d101      	bne.n	8007b02 <remove_chain+0x70>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e028      	b.n	8007b54 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007b02:	2200      	movs	r2, #0
 8007b04:	68b9      	ldr	r1, [r7, #8]
 8007b06:	69b8      	ldr	r0, [r7, #24]
 8007b08:	f7ff fed7 	bl	80078ba <put_fat>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007b10:	7ffb      	ldrb	r3, [r7, #31]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <remove_chain+0x88>
 8007b16:	7ffb      	ldrb	r3, [r7, #31]
 8007b18:	e01c      	b.n	8007b54 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	691a      	ldr	r2, [r3, #16]
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	3b02      	subs	r3, #2
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d20b      	bcs.n	8007b40 <remove_chain+0xae>
			fs->free_clst++;
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	791b      	ldrb	r3, [r3, #4]
 8007b36:	f043 0301 	orr.w	r3, r3, #1
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d3c6      	bcc.n	8007adc <remove_chain+0x4a>
 8007b4e:	e000      	b.n	8007b52 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007b50:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3720      	adds	r7, #32
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10d      	bne.n	8007b8e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <create_chain+0x2c>
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	69ba      	ldr	r2, [r7, #24]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d31b      	bcc.n	8007bc0 <create_chain+0x64>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	61bb      	str	r3, [r7, #24]
 8007b8c:	e018      	b.n	8007bc0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff fdea 	bl	800776a <get_fat>
 8007b96:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d801      	bhi.n	8007ba2 <create_chain+0x46>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e070      	b.n	8007c84 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba8:	d101      	bne.n	8007bae <create_chain+0x52>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	e06a      	b.n	8007c84 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d201      	bcs.n	8007bbc <create_chain+0x60>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	e063      	b.n	8007c84 <create_chain+0x128>
		scl = clst;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d307      	bcc.n	8007be4 <create_chain+0x88>
				ncl = 2;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d901      	bls.n	8007be4 <create_chain+0x88>
 8007be0:	2300      	movs	r3, #0
 8007be2:	e04f      	b.n	8007c84 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007be4:	69f9      	ldr	r1, [r7, #28]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff fdbf 	bl	800776a <get_fat>
 8007bec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00e      	beq.n	8007c12 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d003      	beq.n	8007c02 <create_chain+0xa6>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c00:	d101      	bne.n	8007c06 <create_chain+0xaa>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	e03e      	b.n	8007c84 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d1da      	bne.n	8007bc4 <create_chain+0x68>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e038      	b.n	8007c84 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007c12:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007c14:	f04f 32ff 	mov.w	r2, #4294967295
 8007c18:	69f9      	ldr	r1, [r7, #28]
 8007c1a:	6938      	ldr	r0, [r7, #16]
 8007c1c:	f7ff fe4d 	bl	80078ba <put_fat>
 8007c20:	4603      	mov	r3, r0
 8007c22:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d109      	bne.n	8007c3e <create_chain+0xe2>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d006      	beq.n	8007c3e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6938      	ldr	r0, [r7, #16]
 8007c36:	f7ff fe40 	bl	80078ba <put_fat>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d116      	bne.n	8007c72 <create_chain+0x116>
		fs->last_clst = ncl;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	691a      	ldr	r2, [r3, #16]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	3b02      	subs	r3, #2
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d804      	bhi.n	8007c62 <create_chain+0x106>
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	1e5a      	subs	r2, r3, #1
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	791b      	ldrb	r3, [r3, #4]
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	711a      	strb	r2, [r3, #4]
 8007c70:	e007      	b.n	8007c82 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d102      	bne.n	8007c7e <create_chain+0x122>
 8007c78:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7c:	e000      	b.n	8007c80 <create_chain+0x124>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007c82:	69fb      	ldr	r3, [r7, #28]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3720      	adds	r7, #32
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	0a5b      	lsrs	r3, r3, #9
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	8952      	ldrh	r2, [r2, #10]
 8007cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	1d1a      	adds	r2, r3, #4
 8007cb6:	613a      	str	r2, [r7, #16]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <clmt_clust+0x3a>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e010      	b.n	8007ce8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d307      	bcc.n	8007cde <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007cdc:	e7e9      	b.n	8007cb2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007cde:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	4413      	add	r3, r2
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	371c      	adds	r7, #28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d0a:	d204      	bcs.n	8007d16 <dir_sdi+0x22>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	f003 031f 	and.w	r3, r3, #31
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007d16:	2302      	movs	r3, #2
 8007d18:	e063      	b.n	8007de2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d106      	bne.n	8007d3a <dir_sdi+0x46>
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d902      	bls.n	8007d3a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10c      	bne.n	8007d5a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	095b      	lsrs	r3, r3, #5
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	8912      	ldrh	r2, [r2, #8]
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d301      	bcc.n	8007d50 <dir_sdi+0x5c>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e048      	b.n	8007de2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	61da      	str	r2, [r3, #28]
 8007d58:	e029      	b.n	8007dae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	895b      	ldrh	r3, [r3, #10]
 8007d5e:	025b      	lsls	r3, r3, #9
 8007d60:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d62:	e019      	b.n	8007d98 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6979      	ldr	r1, [r7, #20]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7ff fcfe 	bl	800776a <get_fat>
 8007d6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d76:	d101      	bne.n	8007d7c <dir_sdi+0x88>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e032      	b.n	8007de2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d904      	bls.n	8007d8c <dir_sdi+0x98>
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d301      	bcc.n	8007d90 <dir_sdi+0x9c>
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e028      	b.n	8007de2 <dir_sdi+0xee>
			ofs -= csz;
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d2e1      	bcs.n	8007d64 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007da0:	6979      	ldr	r1, [r7, #20]
 8007da2:	6938      	ldr	r0, [r7, #16]
 8007da4:	f7ff fcc2 	bl	800772c <clust2sect>
 8007da8:	4602      	mov	r2, r0
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <dir_sdi+0xcc>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	e010      	b.n	8007de2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	69da      	ldr	r2, [r3, #28]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	0a5b      	lsrs	r3, r3, #9
 8007dc8:	441a      	add	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dda:	441a      	add	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b086      	sub	sp, #24
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	3320      	adds	r3, #32
 8007e00:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <dir_next+0x28>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e10:	d301      	bcc.n	8007e16 <dir_next+0x2c>
 8007e12:	2304      	movs	r3, #4
 8007e14:	e0aa      	b.n	8007f6c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f040 8098 	bne.w	8007f52 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10b      	bne.n	8007e4c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	095b      	lsrs	r3, r3, #5
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	8912      	ldrh	r2, [r2, #8]
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	f0c0 8088 	bcc.w	8007f52 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	61da      	str	r2, [r3, #28]
 8007e48:	2304      	movs	r3, #4
 8007e4a:	e08f      	b.n	8007f6c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	0a5b      	lsrs	r3, r3, #9
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	8952      	ldrh	r2, [r2, #10]
 8007e54:	3a01      	subs	r2, #1
 8007e56:	4013      	ands	r3, r2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d17a      	bne.n	8007f52 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f7ff fc80 	bl	800776a <get_fat>
 8007e6a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d801      	bhi.n	8007e76 <dir_next+0x8c>
 8007e72:	2302      	movs	r3, #2
 8007e74:	e07a      	b.n	8007f6c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7c:	d101      	bne.n	8007e82 <dir_next+0x98>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e074      	b.n	8007f6c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d358      	bcc.n	8007f3e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d104      	bne.n	8007e9c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	61da      	str	r2, [r3, #28]
 8007e98:	2304      	movs	r3, #4
 8007e9a:	e067      	b.n	8007f6c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f7ff fe59 	bl	8007b5c <create_chain>
 8007eaa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <dir_next+0xcc>
 8007eb2:	2307      	movs	r3, #7
 8007eb4:	e05a      	b.n	8007f6c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <dir_next+0xd6>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e055      	b.n	8007f6c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec6:	d101      	bne.n	8007ecc <dir_next+0xe2>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e04f      	b.n	8007f6c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7ff fb4d 	bl	800756c <sync_window>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <dir_next+0xf2>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e047      	b.n	8007f6c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3330      	adds	r3, #48	; 0x30
 8007ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff f977 	bl	80071da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007eec:	2300      	movs	r3, #0
 8007eee:	613b      	str	r3, [r7, #16]
 8007ef0:	6979      	ldr	r1, [r7, #20]
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f7ff fc1a 	bl	800772c <clust2sect>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	62da      	str	r2, [r3, #44]	; 0x2c
 8007efe:	e012      	b.n	8007f26 <dir_next+0x13c>
						fs->wflag = 1;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f7ff fb30 	bl	800756c <sync_window>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <dir_next+0x12c>
 8007f12:	2301      	movs	r3, #1
 8007f14:	e02a      	b.n	8007f6c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	895b      	ldrh	r3, [r3, #10]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d3e6      	bcc.n	8007f00 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	1ad2      	subs	r2, r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007f44:	6979      	ldr	r1, [r7, #20]
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f7ff fbf0 	bl	800772c <clust2sect>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f64:	441a      	add	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007f84:	2100      	movs	r1, #0
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff feb4 	bl	8007cf4 <dir_sdi>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d12b      	bne.n	8007fee <dir_alloc+0x7a>
		n = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f7ff fb27 	bl	80075f4 <move_window>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d11d      	bne.n	8007fec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2be5      	cmp	r3, #229	; 0xe5
 8007fb8:	d004      	beq.n	8007fc4 <dir_alloc+0x50>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d107      	bne.n	8007fd4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	613b      	str	r3, [r7, #16]
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d102      	bne.n	8007fd8 <dir_alloc+0x64>
 8007fd2:	e00c      	b.n	8007fee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007fd8:	2101      	movs	r1, #1
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7ff ff05 	bl	8007dea <dir_next>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0d7      	beq.n	8007f9a <dir_alloc+0x26>
 8007fea:	e000      	b.n	8007fee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007fec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d101      	bne.n	8007ff8 <dir_alloc+0x84>
 8007ff4:	2307      	movs	r3, #7
 8007ff6:	75fb      	strb	r3, [r7, #23]
	return res;
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	331a      	adds	r3, #26
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff f83f 	bl	8007094 <ld_word>
 8008016:	4603      	mov	r3, r0
 8008018:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b03      	cmp	r3, #3
 8008020:	d109      	bne.n	8008036 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	3314      	adds	r3, #20
 8008026:	4618      	mov	r0, r3
 8008028:	f7ff f834 	bl	8007094 <ld_word>
 800802c:	4603      	mov	r3, r0
 800802e:	041b      	lsls	r3, r3, #16
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008036:	68fb      	ldr	r3, [r7, #12]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	331a      	adds	r3, #26
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	b292      	uxth	r2, r2
 8008054:	4611      	mov	r1, r2
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff f857 	bl	800710a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b03      	cmp	r3, #3
 8008062:	d109      	bne.n	8008078 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f103 0214 	add.w	r2, r3, #20
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	0c1b      	lsrs	r3, r3, #16
 800806e:	b29b      	uxth	r3, r3
 8008070:	4619      	mov	r1, r3
 8008072:	4610      	mov	r0, r2
 8008074:	f7ff f849 	bl	800710a <st_word>
	}
}
 8008078:	bf00      	nop
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800808e:	2100      	movs	r1, #0
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff fe2f 	bl	8007cf4 <dir_sdi>
 8008096:	4603      	mov	r3, r0
 8008098:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <dir_find+0x24>
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	e03e      	b.n	8008122 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	4619      	mov	r1, r3
 80080aa:	6938      	ldr	r0, [r7, #16]
 80080ac:	f7ff faa2 	bl	80075f4 <move_window>
 80080b0:	4603      	mov	r3, r0
 80080b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d12f      	bne.n	800811a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d102      	bne.n	80080ce <dir_find+0x4e>
 80080c8:	2304      	movs	r3, #4
 80080ca:	75fb      	strb	r3, [r7, #23]
 80080cc:	e028      	b.n	8008120 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	330b      	adds	r3, #11
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	330b      	adds	r3, #11
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	f003 0308 	and.w	r3, r3, #8
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10a      	bne.n	8008106 <dir_find+0x86>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a18      	ldr	r0, [r3, #32]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3324      	adds	r3, #36	; 0x24
 80080f8:	220b      	movs	r2, #11
 80080fa:	4619      	mov	r1, r3
 80080fc:	f7ff f888 	bl	8007210 <mem_cmp>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00b      	beq.n	800811e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008106:	2100      	movs	r1, #0
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff fe6e 	bl	8007dea <dir_next>
 800810e:	4603      	mov	r3, r0
 8008110:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0c5      	beq.n	80080a4 <dir_find+0x24>
 8008118:	e002      	b.n	8008120 <dir_find+0xa0>
		if (res != FR_OK) break;
 800811a:	bf00      	nop
 800811c:	e000      	b.n	8008120 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800811e:	bf00      	nop

	return res;
 8008120:	7dfb      	ldrb	r3, [r7, #23]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008138:	2101      	movs	r1, #1
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff ff1a 	bl	8007f74 <dir_alloc>
 8008140:	4603      	mov	r3, r0
 8008142:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d11c      	bne.n	8008184 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	4619      	mov	r1, r3
 8008150:	68b8      	ldr	r0, [r7, #8]
 8008152:	f7ff fa4f 	bl	80075f4 <move_window>
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d111      	bne.n	8008184 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	2220      	movs	r2, #32
 8008166:	2100      	movs	r1, #0
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff f836 	bl	80071da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a18      	ldr	r0, [r3, #32]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3324      	adds	r3, #36	; 0x24
 8008176:	220b      	movs	r2, #11
 8008178:	4619      	mov	r1, r3
 800817a:	f7ff f80d 	bl	8007198 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2201      	movs	r2, #1
 8008182:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008184:	7bfb      	ldrb	r3, [r7, #15]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3324      	adds	r3, #36	; 0x24
 80081a4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80081a6:	220b      	movs	r2, #11
 80081a8:	2120      	movs	r1, #32
 80081aa:	68b8      	ldr	r0, [r7, #8]
 80081ac:	f7ff f815 	bl	80071da <mem_set>
	si = i = 0; ni = 8;
 80081b0:	2300      	movs	r3, #0
 80081b2:	613b      	str	r3, [r7, #16]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	61fb      	str	r3, [r7, #28]
 80081b8:	2308      	movs	r3, #8
 80081ba:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	61fa      	str	r2, [r7, #28]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4413      	add	r3, r2
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80081ca:	7efb      	ldrb	r3, [r7, #27]
 80081cc:	2b20      	cmp	r3, #32
 80081ce:	d94e      	bls.n	800826e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80081d0:	7efb      	ldrb	r3, [r7, #27]
 80081d2:	2b2f      	cmp	r3, #47	; 0x2f
 80081d4:	d006      	beq.n	80081e4 <create_name+0x54>
 80081d6:	7efb      	ldrb	r3, [r7, #27]
 80081d8:	2b5c      	cmp	r3, #92	; 0x5c
 80081da:	d110      	bne.n	80081fe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80081dc:	e002      	b.n	80081e4 <create_name+0x54>
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	3301      	adds	r3, #1
 80081e2:	61fb      	str	r3, [r7, #28]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	4413      	add	r3, r2
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b2f      	cmp	r3, #47	; 0x2f
 80081ee:	d0f6      	beq.n	80081de <create_name+0x4e>
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	4413      	add	r3, r2
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b5c      	cmp	r3, #92	; 0x5c
 80081fa:	d0f0      	beq.n	80081de <create_name+0x4e>
			break;
 80081fc:	e038      	b.n	8008270 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80081fe:	7efb      	ldrb	r3, [r7, #27]
 8008200:	2b2e      	cmp	r3, #46	; 0x2e
 8008202:	d003      	beq.n	800820c <create_name+0x7c>
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	429a      	cmp	r2, r3
 800820a:	d30c      	bcc.n	8008226 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b0b      	cmp	r3, #11
 8008210:	d002      	beq.n	8008218 <create_name+0x88>
 8008212:	7efb      	ldrb	r3, [r7, #27]
 8008214:	2b2e      	cmp	r3, #46	; 0x2e
 8008216:	d001      	beq.n	800821c <create_name+0x8c>
 8008218:	2306      	movs	r3, #6
 800821a:	e044      	b.n	80082a6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800821c:	2308      	movs	r3, #8
 800821e:	613b      	str	r3, [r7, #16]
 8008220:	230b      	movs	r3, #11
 8008222:	617b      	str	r3, [r7, #20]
			continue;
 8008224:	e022      	b.n	800826c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008226:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800822a:	2b00      	cmp	r3, #0
 800822c:	da04      	bge.n	8008238 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800822e:	7efb      	ldrb	r3, [r7, #27]
 8008230:	3b80      	subs	r3, #128	; 0x80
 8008232:	4a1f      	ldr	r2, [pc, #124]	; (80082b0 <create_name+0x120>)
 8008234:	5cd3      	ldrb	r3, [r2, r3]
 8008236:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008238:	7efb      	ldrb	r3, [r7, #27]
 800823a:	4619      	mov	r1, r3
 800823c:	481d      	ldr	r0, [pc, #116]	; (80082b4 <create_name+0x124>)
 800823e:	f7ff f80e 	bl	800725e <chk_chr>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <create_name+0xbc>
 8008248:	2306      	movs	r3, #6
 800824a:	e02c      	b.n	80082a6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800824c:	7efb      	ldrb	r3, [r7, #27]
 800824e:	2b60      	cmp	r3, #96	; 0x60
 8008250:	d905      	bls.n	800825e <create_name+0xce>
 8008252:	7efb      	ldrb	r3, [r7, #27]
 8008254:	2b7a      	cmp	r3, #122	; 0x7a
 8008256:	d802      	bhi.n	800825e <create_name+0xce>
 8008258:	7efb      	ldrb	r3, [r7, #27]
 800825a:	3b20      	subs	r3, #32
 800825c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	613a      	str	r2, [r7, #16]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	4413      	add	r3, r2
 8008268:	7efa      	ldrb	r2, [r7, #27]
 800826a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800826c:	e7a6      	b.n	80081bc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800826e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	441a      	add	r2, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <create_name+0xf4>
 8008280:	2306      	movs	r3, #6
 8008282:	e010      	b.n	80082a6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2be5      	cmp	r3, #229	; 0xe5
 800828a:	d102      	bne.n	8008292 <create_name+0x102>
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2205      	movs	r2, #5
 8008290:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008292:	7efb      	ldrb	r3, [r7, #27]
 8008294:	2b20      	cmp	r3, #32
 8008296:	d801      	bhi.n	800829c <create_name+0x10c>
 8008298:	2204      	movs	r2, #4
 800829a:	e000      	b.n	800829e <create_name+0x10e>
 800829c:	2200      	movs	r2, #0
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	330b      	adds	r3, #11
 80082a2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80082a4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3720      	adds	r7, #32
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	0801593c 	.word	0x0801593c
 80082b4:	0800c3c0 	.word	0x0800c3c0

080082b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80082cc:	e002      	b.n	80082d4 <follow_path+0x1c>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	3301      	adds	r3, #1
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b2f      	cmp	r3, #47	; 0x2f
 80082da:	d0f8      	beq.n	80082ce <follow_path+0x16>
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b5c      	cmp	r3, #92	; 0x5c
 80082e2:	d0f4      	beq.n	80082ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	2200      	movs	r2, #0
 80082e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b1f      	cmp	r3, #31
 80082f0:	d80a      	bhi.n	8008308 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2280      	movs	r2, #128	; 0x80
 80082f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80082fa:	2100      	movs	r1, #0
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff fcf9 	bl	8007cf4 <dir_sdi>
 8008302:	4603      	mov	r3, r0
 8008304:	75fb      	strb	r3, [r7, #23]
 8008306:	e043      	b.n	8008390 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008308:	463b      	mov	r3, r7
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff ff3f 	bl	8008190 <create_name>
 8008312:	4603      	mov	r3, r0
 8008314:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d134      	bne.n	8008386 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff feaf 	bl	8008080 <dir_find>
 8008322:	4603      	mov	r3, r0
 8008324:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800832c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800832e:	7dfb      	ldrb	r3, [r7, #23]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00a      	beq.n	800834a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008334:	7dfb      	ldrb	r3, [r7, #23]
 8008336:	2b04      	cmp	r3, #4
 8008338:	d127      	bne.n	800838a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800833a:	7afb      	ldrb	r3, [r7, #11]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d122      	bne.n	800838a <follow_path+0xd2>
 8008344:	2305      	movs	r3, #5
 8008346:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008348:	e01f      	b.n	800838a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800834a:	7afb      	ldrb	r3, [r7, #11]
 800834c:	f003 0304 	and.w	r3, r3, #4
 8008350:	2b00      	cmp	r3, #0
 8008352:	d11c      	bne.n	800838e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	799b      	ldrb	r3, [r3, #6]
 8008358:	f003 0310 	and.w	r3, r3, #16
 800835c:	2b00      	cmp	r3, #0
 800835e:	d102      	bne.n	8008366 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008360:	2305      	movs	r3, #5
 8008362:	75fb      	strb	r3, [r7, #23]
 8008364:	e014      	b.n	8008390 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008374:	4413      	add	r3, r2
 8008376:	4619      	mov	r1, r3
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f7ff fe42 	bl	8008002 <ld_clust>
 800837e:	4602      	mov	r2, r0
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008384:	e7c0      	b.n	8008308 <follow_path+0x50>
			if (res != FR_OK) break;
 8008386:	bf00      	nop
 8008388:	e002      	b.n	8008390 <follow_path+0xd8>
				break;
 800838a:	bf00      	nop
 800838c:	e000      	b.n	8008390 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800838e:	bf00      	nop
			}
		}
	}

	return res;
 8008390:	7dfb      	ldrb	r3, [r7, #23]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800839a:	b480      	push	{r7}
 800839c:	b087      	sub	sp, #28
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80083a2:	f04f 33ff 	mov.w	r3, #4294967295
 80083a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d031      	beq.n	8008414 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	617b      	str	r3, [r7, #20]
 80083b6:	e002      	b.n	80083be <get_ldnumber+0x24>
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	3301      	adds	r3, #1
 80083bc:	617b      	str	r3, [r7, #20]
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b20      	cmp	r3, #32
 80083c4:	d903      	bls.n	80083ce <get_ldnumber+0x34>
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b3a      	cmp	r3, #58	; 0x3a
 80083cc:	d1f4      	bne.n	80083b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b3a      	cmp	r3, #58	; 0x3a
 80083d4:	d11c      	bne.n	8008410 <get_ldnumber+0x76>
			tp = *path;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	60fa      	str	r2, [r7, #12]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	3b30      	subs	r3, #48	; 0x30
 80083e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b09      	cmp	r3, #9
 80083ec:	d80e      	bhi.n	800840c <get_ldnumber+0x72>
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d10a      	bne.n	800840c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d107      	bne.n	800840c <get_ldnumber+0x72>
					vol = (int)i;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	3301      	adds	r3, #1
 8008404:	617b      	str	r3, [r7, #20]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	e002      	b.n	8008416 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008410:	2300      	movs	r3, #0
 8008412:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008414:	693b      	ldr	r3, [r7, #16]
}
 8008416:	4618      	mov	r0, r3
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
	...

08008424 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	70da      	strb	r2, [r3, #3]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f04f 32ff 	mov.w	r2, #4294967295
 800843a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7ff f8d8 	bl	80075f4 <move_window>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <check_fs+0x2a>
 800844a:	2304      	movs	r3, #4
 800844c:	e038      	b.n	80084c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	3330      	adds	r3, #48	; 0x30
 8008452:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fe1c 	bl	8007094 <ld_word>
 800845c:	4603      	mov	r3, r0
 800845e:	461a      	mov	r2, r3
 8008460:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008464:	429a      	cmp	r2, r3
 8008466:	d001      	beq.n	800846c <check_fs+0x48>
 8008468:	2303      	movs	r3, #3
 800846a:	e029      	b.n	80084c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008472:	2be9      	cmp	r3, #233	; 0xe9
 8008474:	d009      	beq.n	800848a <check_fs+0x66>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800847c:	2beb      	cmp	r3, #235	; 0xeb
 800847e:	d11e      	bne.n	80084be <check_fs+0x9a>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008486:	2b90      	cmp	r3, #144	; 0x90
 8008488:	d119      	bne.n	80084be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3330      	adds	r3, #48	; 0x30
 800848e:	3336      	adds	r3, #54	; 0x36
 8008490:	4618      	mov	r0, r3
 8008492:	f7fe fe17 	bl	80070c4 <ld_dword>
 8008496:	4603      	mov	r3, r0
 8008498:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800849c:	4a0a      	ldr	r2, [pc, #40]	; (80084c8 <check_fs+0xa4>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d101      	bne.n	80084a6 <check_fs+0x82>
 80084a2:	2300      	movs	r3, #0
 80084a4:	e00c      	b.n	80084c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	3330      	adds	r3, #48	; 0x30
 80084aa:	3352      	adds	r3, #82	; 0x52
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fe fe09 	bl	80070c4 <ld_dword>
 80084b2:	4603      	mov	r3, r0
 80084b4:	4a05      	ldr	r2, [pc, #20]	; (80084cc <check_fs+0xa8>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d101      	bne.n	80084be <check_fs+0x9a>
 80084ba:	2300      	movs	r3, #0
 80084bc:	e000      	b.n	80084c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80084be:	2302      	movs	r3, #2
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	00544146 	.word	0x00544146
 80084cc:	33544146 	.word	0x33544146

080084d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b096      	sub	sp, #88	; 0x58
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	4613      	mov	r3, r2
 80084dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f7ff ff58 	bl	800839a <get_ldnumber>
 80084ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80084ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	da01      	bge.n	80084f6 <find_volume+0x26>
 80084f2:	230b      	movs	r3, #11
 80084f4:	e22e      	b.n	8008954 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80084f6:	4aa8      	ldr	r2, [pc, #672]	; (8008798 <find_volume+0x2c8>)
 80084f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <find_volume+0x3a>
 8008506:	230c      	movs	r3, #12
 8008508:	e224      	b.n	8008954 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800850e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	f023 0301 	bic.w	r3, r3, #1
 8008516:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01a      	beq.n	8008556 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	785b      	ldrb	r3, [r3, #1]
 8008524:	4618      	mov	r0, r3
 8008526:	f7fe fd17 	bl	8006f58 <disk_status>
 800852a:	4603      	mov	r3, r0
 800852c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008530:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10c      	bne.n	8008556 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d007      	beq.n	8008552 <find_volume+0x82>
 8008542:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008546:	f003 0304 	and.w	r3, r3, #4
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800854e:	230a      	movs	r3, #10
 8008550:	e200      	b.n	8008954 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8008552:	2300      	movs	r3, #0
 8008554:	e1fe      	b.n	8008954 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	2200      	movs	r2, #0
 800855a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800855c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855e:	b2da      	uxtb	r2, r3
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	785b      	ldrb	r3, [r3, #1]
 8008568:	4618      	mov	r0, r3
 800856a:	f7fe fd0f 	bl	8006f8c <disk_initialize>
 800856e:	4603      	mov	r3, r0
 8008570:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008574:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008580:	2303      	movs	r3, #3
 8008582:	e1e7      	b.n	8008954 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008584:	79fb      	ldrb	r3, [r7, #7]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d007      	beq.n	800859a <find_volume+0xca>
 800858a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008596:	230a      	movs	r3, #10
 8008598:	e1dc      	b.n	8008954 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800859e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085a2:	f7ff ff3f 	bl	8008424 <check_fs>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80085ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d14b      	bne.n	800864c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80085b4:	2300      	movs	r3, #0
 80085b6:	643b      	str	r3, [r7, #64]	; 0x40
 80085b8:	e01f      	b.n	80085fa <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80085ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085c2:	011b      	lsls	r3, r3, #4
 80085c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80085c8:	4413      	add	r3, r2
 80085ca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	3304      	adds	r3, #4
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d006      	beq.n	80085e4 <find_volume+0x114>
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	3308      	adds	r3, #8
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fd72 	bl	80070c4 <ld_dword>
 80085e0:	4602      	mov	r2, r0
 80085e2:	e000      	b.n	80085e6 <find_volume+0x116>
 80085e4:	2200      	movs	r2, #0
 80085e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80085ee:	440b      	add	r3, r1
 80085f0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80085f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f6:	3301      	adds	r3, #1
 80085f8:	643b      	str	r3, [r7, #64]	; 0x40
 80085fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d9dc      	bls.n	80085ba <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008600:	2300      	movs	r3, #0
 8008602:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <find_volume+0x140>
 800860a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800860c:	3b01      	subs	r3, #1
 800860e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008618:	4413      	add	r3, r2
 800861a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800861e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008622:	2b00      	cmp	r3, #0
 8008624:	d005      	beq.n	8008632 <find_volume+0x162>
 8008626:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800862a:	f7ff fefb 	bl	8008424 <check_fs>
 800862e:	4603      	mov	r3, r0
 8008630:	e000      	b.n	8008634 <find_volume+0x164>
 8008632:	2303      	movs	r3, #3
 8008634:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008638:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800863c:	2b01      	cmp	r3, #1
 800863e:	d905      	bls.n	800864c <find_volume+0x17c>
 8008640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008642:	3301      	adds	r3, #1
 8008644:	643b      	str	r3, [r7, #64]	; 0x40
 8008646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008648:	2b03      	cmp	r3, #3
 800864a:	d9e1      	bls.n	8008610 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800864c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008650:	2b04      	cmp	r3, #4
 8008652:	d101      	bne.n	8008658 <find_volume+0x188>
 8008654:	2301      	movs	r3, #1
 8008656:	e17d      	b.n	8008954 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008658:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800865c:	2b01      	cmp	r3, #1
 800865e:	d901      	bls.n	8008664 <find_volume+0x194>
 8008660:	230d      	movs	r3, #13
 8008662:	e177      	b.n	8008954 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008666:	3330      	adds	r3, #48	; 0x30
 8008668:	330b      	adds	r3, #11
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe fd12 	bl	8007094 <ld_word>
 8008670:	4603      	mov	r3, r0
 8008672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008676:	d001      	beq.n	800867c <find_volume+0x1ac>
 8008678:	230d      	movs	r3, #13
 800867a:	e16b      	b.n	8008954 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867e:	3330      	adds	r3, #48	; 0x30
 8008680:	3316      	adds	r3, #22
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fd06 	bl	8007094 <ld_word>
 8008688:	4603      	mov	r3, r0
 800868a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800868c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d106      	bne.n	80086a0 <find_volume+0x1d0>
 8008692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008694:	3330      	adds	r3, #48	; 0x30
 8008696:	3324      	adds	r3, #36	; 0x24
 8008698:	4618      	mov	r0, r3
 800869a:	f7fe fd13 	bl	80070c4 <ld_dword>
 800869e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086a4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	789b      	ldrb	r3, [r3, #2]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d005      	beq.n	80086c4 <find_volume+0x1f4>
 80086b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ba:	789b      	ldrb	r3, [r3, #2]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d001      	beq.n	80086c4 <find_volume+0x1f4>
 80086c0:	230d      	movs	r3, #13
 80086c2:	e147      	b.n	8008954 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	789b      	ldrb	r3, [r3, #2]
 80086c8:	461a      	mov	r2, r3
 80086ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086cc:	fb02 f303 	mul.w	r3, r2, r3
 80086d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d8:	b29a      	uxth	r2, r3
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	895b      	ldrh	r3, [r3, #10]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d008      	beq.n	80086f8 <find_volume+0x228>
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	895b      	ldrh	r3, [r3, #10]
 80086ea:	461a      	mov	r2, r3
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	895b      	ldrh	r3, [r3, #10]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	4013      	ands	r3, r2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <find_volume+0x22c>
 80086f8:	230d      	movs	r3, #13
 80086fa:	e12b      	b.n	8008954 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	3330      	adds	r3, #48	; 0x30
 8008700:	3311      	adds	r3, #17
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe fcc6 	bl	8007094 <ld_word>
 8008708:	4603      	mov	r3, r0
 800870a:	461a      	mov	r2, r3
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	891b      	ldrh	r3, [r3, #8]
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	b29b      	uxth	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <find_volume+0x252>
 800871e:	230d      	movs	r3, #13
 8008720:	e118      	b.n	8008954 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008724:	3330      	adds	r3, #48	; 0x30
 8008726:	3313      	adds	r3, #19
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe fcb3 	bl	8007094 <ld_word>
 800872e:	4603      	mov	r3, r0
 8008730:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008734:	2b00      	cmp	r3, #0
 8008736:	d106      	bne.n	8008746 <find_volume+0x276>
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	3330      	adds	r3, #48	; 0x30
 800873c:	3320      	adds	r3, #32
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fcc0 	bl	80070c4 <ld_dword>
 8008744:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	3330      	adds	r3, #48	; 0x30
 800874a:	330e      	adds	r3, #14
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe fca1 	bl	8007094 <ld_word>
 8008752:	4603      	mov	r3, r0
 8008754:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008756:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <find_volume+0x290>
 800875c:	230d      	movs	r3, #13
 800875e:	e0f9      	b.n	8008954 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008760:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008764:	4413      	add	r3, r2
 8008766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008768:	8912      	ldrh	r2, [r2, #8]
 800876a:	0912      	lsrs	r2, r2, #4
 800876c:	b292      	uxth	r2, r2
 800876e:	4413      	add	r3, r2
 8008770:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	429a      	cmp	r2, r3
 8008778:	d201      	bcs.n	800877e <find_volume+0x2ae>
 800877a:	230d      	movs	r3, #13
 800877c:	e0ea      	b.n	8008954 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800877e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008786:	8952      	ldrh	r2, [r2, #10]
 8008788:	fbb3 f3f2 	udiv	r3, r3, r2
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	d103      	bne.n	800879c <find_volume+0x2cc>
 8008794:	230d      	movs	r3, #13
 8008796:	e0dd      	b.n	8008954 <find_volume+0x484>
 8008798:	2000a0d0 	.word	0x2000a0d0
		fmt = FS_FAT32;
 800879c:	2303      	movs	r3, #3
 800879e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d802      	bhi.n	80087b2 <find_volume+0x2e2>
 80087ac:	2302      	movs	r3, #2
 80087ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d802      	bhi.n	80087c2 <find_volume+0x2f2>
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	1c9a      	adds	r2, r3, #2
 80087c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80087ce:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80087d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80087d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d4:	441a      	add	r2, r3
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80087da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	441a      	add	r2, r3
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80087e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d11e      	bne.n	800882a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80087ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ee:	3330      	adds	r3, #48	; 0x30
 80087f0:	332a      	adds	r3, #42	; 0x2a
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe fc4e 	bl	8007094 <ld_word>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <find_volume+0x332>
 80087fe:	230d      	movs	r3, #13
 8008800:	e0a8      	b.n	8008954 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	891b      	ldrh	r3, [r3, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <find_volume+0x33e>
 800880a:	230d      	movs	r3, #13
 800880c:	e0a2      	b.n	8008954 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	3330      	adds	r3, #48	; 0x30
 8008812:	332c      	adds	r3, #44	; 0x2c
 8008814:	4618      	mov	r0, r3
 8008816:	f7fe fc55 	bl	80070c4 <ld_dword>
 800881a:	4602      	mov	r2, r0
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	647b      	str	r3, [r7, #68]	; 0x44
 8008828:	e01f      	b.n	800886a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	891b      	ldrh	r3, [r3, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <find_volume+0x366>
 8008832:	230d      	movs	r3, #13
 8008834:	e08e      	b.n	8008954 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008838:	6a1a      	ldr	r2, [r3, #32]
 800883a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800883c:	441a      	add	r2, r3
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008842:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008846:	2b02      	cmp	r3, #2
 8008848:	d103      	bne.n	8008852 <find_volume+0x382>
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	e00a      	b.n	8008868 <find_volume+0x398>
 8008852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008854:	695a      	ldr	r2, [r3, #20]
 8008856:	4613      	mov	r3, r2
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	4413      	add	r3, r2
 800885c:	085a      	lsrs	r2, r3, #1
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008868:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	699a      	ldr	r2, [r3, #24]
 800886e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008870:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008874:	0a5b      	lsrs	r3, r3, #9
 8008876:	429a      	cmp	r2, r3
 8008878:	d201      	bcs.n	800887e <find_volume+0x3ae>
 800887a:	230d      	movs	r3, #13
 800887c:	e06a      	b.n	8008954 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800887e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008880:	f04f 32ff 	mov.w	r2, #4294967295
 8008884:	611a      	str	r2, [r3, #16]
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	691a      	ldr	r2, [r3, #16]
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	2280      	movs	r2, #128	; 0x80
 8008892:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008894:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008898:	2b03      	cmp	r3, #3
 800889a:	d149      	bne.n	8008930 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800889c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889e:	3330      	adds	r3, #48	; 0x30
 80088a0:	3330      	adds	r3, #48	; 0x30
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fbf6 	bl	8007094 <ld_word>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d140      	bne.n	8008930 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80088ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b0:	3301      	adds	r3, #1
 80088b2:	4619      	mov	r1, r3
 80088b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088b6:	f7fe fe9d 	bl	80075f4 <move_window>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d137      	bne.n	8008930 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	2200      	movs	r2, #0
 80088c4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80088c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c8:	3330      	adds	r3, #48	; 0x30
 80088ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fbe0 	bl	8007094 <ld_word>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80088dc:	429a      	cmp	r2, r3
 80088de:	d127      	bne.n	8008930 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80088e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e2:	3330      	adds	r3, #48	; 0x30
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fbed 	bl	80070c4 <ld_dword>
 80088ea:	4603      	mov	r3, r0
 80088ec:	4a1b      	ldr	r2, [pc, #108]	; (800895c <find_volume+0x48c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d11e      	bne.n	8008930 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	3330      	adds	r3, #48	; 0x30
 80088f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fbe2 	bl	80070c4 <ld_dword>
 8008900:	4603      	mov	r3, r0
 8008902:	4a17      	ldr	r2, [pc, #92]	; (8008960 <find_volume+0x490>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d113      	bne.n	8008930 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890a:	3330      	adds	r3, #48	; 0x30
 800890c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe fbd7 	bl	80070c4 <ld_dword>
 8008916:	4602      	mov	r2, r0
 8008918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891e:	3330      	adds	r3, #48	; 0x30
 8008920:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008924:	4618      	mov	r0, r3
 8008926:	f7fe fbcd 	bl	80070c4 <ld_dword>
 800892a:	4602      	mov	r2, r0
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008932:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008936:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008938:	4b0a      	ldr	r3, [pc, #40]	; (8008964 <find_volume+0x494>)
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	3301      	adds	r3, #1
 800893e:	b29a      	uxth	r2, r3
 8008940:	4b08      	ldr	r3, [pc, #32]	; (8008964 <find_volume+0x494>)
 8008942:	801a      	strh	r2, [r3, #0]
 8008944:	4b07      	ldr	r3, [pc, #28]	; (8008964 <find_volume+0x494>)
 8008946:	881a      	ldrh	r2, [r3, #0]
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800894c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800894e:	f7fe fde9 	bl	8007524 <clear_lock>
#endif
	return FR_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3758      	adds	r7, #88	; 0x58
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	41615252 	.word	0x41615252
 8008960:	61417272 	.word	0x61417272
 8008964:	2000a0d4 	.word	0x2000a0d4

08008968 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008972:	2309      	movs	r3, #9
 8008974:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01c      	beq.n	80089b6 <validate+0x4e>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d018      	beq.n	80089b6 <validate+0x4e>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d013      	beq.n	80089b6 <validate+0x4e>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	889a      	ldrh	r2, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	88db      	ldrh	r3, [r3, #6]
 8008998:	429a      	cmp	r2, r3
 800899a:	d10c      	bne.n	80089b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe fad8 	bl	8006f58 <disk_status>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <validate+0x4e>
			res = FR_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d102      	bne.n	80089c2 <validate+0x5a>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	e000      	b.n	80089c4 <validate+0x5c>
 80089c2:	2300      	movs	r3, #0
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	6013      	str	r3, [r2, #0]
	return res;
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	4613      	mov	r3, r2
 80089e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80089e6:	f107 0310 	add.w	r3, r7, #16
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff fcd5 	bl	800839a <get_ldnumber>
 80089f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	da01      	bge.n	80089fc <f_mount+0x28>
 80089f8:	230b      	movs	r3, #11
 80089fa:	e02b      	b.n	8008a54 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80089fc:	4a17      	ldr	r2, [pc, #92]	; (8008a5c <f_mount+0x88>)
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a04:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d005      	beq.n	8008a18 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008a0c:	69b8      	ldr	r0, [r7, #24]
 8008a0e:	f7fe fd89 	bl	8007524 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2200      	movs	r2, #0
 8008a16:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	490d      	ldr	r1, [pc, #52]	; (8008a5c <f_mount+0x88>)
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <f_mount+0x66>
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d001      	beq.n	8008a3e <f_mount+0x6a>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e00a      	b.n	8008a54 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008a3e:	f107 010c 	add.w	r1, r7, #12
 8008a42:	f107 0308 	add.w	r3, r7, #8
 8008a46:	2200      	movs	r2, #0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff fd41 	bl	80084d0 <find_volume>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3720      	adds	r7, #32
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	2000a0d0 	.word	0x2000a0d0

08008a60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b098      	sub	sp, #96	; 0x60
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <f_open+0x18>
 8008a74:	2309      	movs	r3, #9
 8008a76:	e1ad      	b.n	8008dd4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a7e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008a80:	79fa      	ldrb	r2, [r7, #7]
 8008a82:	f107 0110 	add.w	r1, r7, #16
 8008a86:	f107 0308 	add.w	r3, r7, #8
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fd20 	bl	80084d0 <find_volume>
 8008a90:	4603      	mov	r3, r0
 8008a92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008a96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f040 8191 	bne.w	8008dc2 <f_open+0x362>
		dj.obj.fs = fs;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	f107 0314 	add.w	r3, r7, #20
 8008aaa:	4611      	mov	r1, r2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff fc03 	bl	80082b8 <follow_path>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008ab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d11a      	bne.n	8008af6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008ac0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ac4:	b25b      	sxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	da03      	bge.n	8008ad2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008aca:	2306      	movs	r3, #6
 8008acc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ad0:	e011      	b.n	8008af6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	f023 0301 	bic.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	bf14      	ite	ne
 8008adc:	2301      	movne	r3, #1
 8008ade:	2300      	moveq	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f107 0314 	add.w	r3, r7, #20
 8008ae8:	4611      	mov	r1, r2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fbd2 	bl	8007294 <chk_lock>
 8008af0:	4603      	mov	r3, r0
 8008af2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	f003 031c 	and.w	r3, r3, #28
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d07f      	beq.n	8008c00 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d017      	beq.n	8008b38 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008b08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b0c:	2b04      	cmp	r3, #4
 8008b0e:	d10e      	bne.n	8008b2e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008b10:	f7fe fc1c 	bl	800734c <enq_lock>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d006      	beq.n	8008b28 <f_open+0xc8>
 8008b1a:	f107 0314 	add.w	r3, r7, #20
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff fb03 	bl	800812a <dir_register>
 8008b24:	4603      	mov	r3, r0
 8008b26:	e000      	b.n	8008b2a <f_open+0xca>
 8008b28:	2312      	movs	r3, #18
 8008b2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008b2e:	79fb      	ldrb	r3, [r7, #7]
 8008b30:	f043 0308 	orr.w	r3, r3, #8
 8008b34:	71fb      	strb	r3, [r7, #7]
 8008b36:	e010      	b.n	8008b5a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008b38:	7ebb      	ldrb	r3, [r7, #26]
 8008b3a:	f003 0311 	and.w	r3, r3, #17
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <f_open+0xea>
					res = FR_DENIED;
 8008b42:	2307      	movs	r3, #7
 8008b44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b48:	e007      	b.n	8008b5a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008b4a:	79fb      	ldrb	r3, [r7, #7]
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <f_open+0xfa>
 8008b54:	2308      	movs	r3, #8
 8008b56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008b5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d168      	bne.n	8008c34 <f_open+0x1d4>
 8008b62:	79fb      	ldrb	r3, [r7, #7]
 8008b64:	f003 0308 	and.w	r3, r3, #8
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d063      	beq.n	8008c34 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008b6c:	f7fe f996 	bl	8006e9c <get_fattime>
 8008b70:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b74:	330e      	adds	r3, #14
 8008b76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe fae1 	bl	8007140 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b80:	3316      	adds	r3, #22
 8008b82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fe fadb 	bl	8007140 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8c:	330b      	adds	r3, #11
 8008b8e:	2220      	movs	r2, #32
 8008b90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b96:	4611      	mov	r1, r2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7ff fa32 	bl	8008002 <ld_clust>
 8008b9e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff fa4a 	bl	8008040 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bae:	331c      	adds	r3, #28
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe fac4 	bl	8007140 <st_dword>
					fs->wflag = 1;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d037      	beq.n	8008c34 <f_open+0x1d4>
						dw = fs->winsect;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008bca:	f107 0314 	add.w	r3, r7, #20
 8008bce:	2200      	movs	r2, #0
 8008bd0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fe ff5d 	bl	8007a92 <remove_chain>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d126      	bne.n	8008c34 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fe fd02 	bl	80075f4 <move_window>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bfa:	3a01      	subs	r2, #1
 8008bfc:	60da      	str	r2, [r3, #12]
 8008bfe:	e019      	b.n	8008c34 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008c00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d115      	bne.n	8008c34 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008c08:	7ebb      	ldrb	r3, [r7, #26]
 8008c0a:	f003 0310 	and.w	r3, r3, #16
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d003      	beq.n	8008c1a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008c12:	2304      	movs	r3, #4
 8008c14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008c18:	e00c      	b.n	8008c34 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008c1a:	79fb      	ldrb	r3, [r7, #7]
 8008c1c:	f003 0302 	and.w	r3, r3, #2
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d007      	beq.n	8008c34 <f_open+0x1d4>
 8008c24:	7ebb      	ldrb	r3, [r7, #26]
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <f_open+0x1d4>
						res = FR_DENIED;
 8008c2e:	2307      	movs	r3, #7
 8008c30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008c34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d128      	bne.n	8008c8e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	f003 0308 	and.w	r3, r3, #8
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	f023 0301 	bic.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	bf14      	ite	ne
 8008c66:	2301      	movne	r3, #1
 8008c68:	2300      	moveq	r3, #0
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	f107 0314 	add.w	r3, r7, #20
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fe fb8b 	bl	8007390 <inc_lock>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d102      	bne.n	8008c8e <f_open+0x22e>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f040 8095 	bne.w	8008dc2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff f9af 	bl	8008002 <ld_clust>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cac:	331c      	adds	r3, #28
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe fa08 	bl	80070c4 <ld_dword>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	88da      	ldrh	r2, [r3, #6]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	79fa      	ldrb	r2, [r7, #7]
 8008cd2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3330      	adds	r3, #48	; 0x30
 8008cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fe fa72 	bl	80071da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	f003 0320 	and.w	r3, r3, #32
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d060      	beq.n	8008dc2 <f_open+0x362>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d05c      	beq.n	8008dc2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	895b      	ldrh	r3, [r3, #10]
 8008d14:	025b      	lsls	r3, r3, #9
 8008d16:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	657b      	str	r3, [r7, #84]	; 0x54
 8008d24:	e016      	b.n	8008d54 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe fd1d 	bl	800776a <get_fat>
 8008d30:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d802      	bhi.n	8008d3e <f_open+0x2de>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d44:	d102      	bne.n	8008d4c <f_open+0x2ec>
 8008d46:	2301      	movs	r3, #1
 8008d48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	657b      	str	r3, [r7, #84]	; 0x54
 8008d54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d103      	bne.n	8008d64 <f_open+0x304>
 8008d5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d8e0      	bhi.n	8008d26 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008d6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d127      	bne.n	8008dc2 <f_open+0x362>
 8008d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d022      	beq.n	8008dc2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fe fcd3 	bl	800772c <clust2sect>
 8008d86:	6478      	str	r0, [r7, #68]	; 0x44
 8008d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d103      	bne.n	8008d96 <f_open+0x336>
						res = FR_INT_ERR;
 8008d8e:	2302      	movs	r3, #2
 8008d90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008d94:	e015      	b.n	8008dc2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d98:	0a5a      	lsrs	r2, r3, #9
 8008d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d9c:	441a      	add	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	7858      	ldrb	r0, [r3, #1]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6a1a      	ldr	r2, [r3, #32]
 8008db0:	2301      	movs	r3, #1
 8008db2:	f7fe f911 	bl	8006fd8 <disk_read>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <f_open+0x362>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008dc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <f_open+0x370>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3760      	adds	r7, #96	; 0x60
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08c      	sub	sp, #48	; 0x30
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f107 0210 	add.w	r2, r7, #16
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7ff fdb3 	bl	8008968 <validate>
 8008e02:	4603      	mov	r3, r0
 8008e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d107      	bne.n	8008e20 <f_write+0x44>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	7d5b      	ldrb	r3, [r3, #21]
 8008e14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008e18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <f_write+0x4a>
 8008e20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e24:	e14b      	b.n	80090be <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	7d1b      	ldrb	r3, [r3, #20]
 8008e2a:	f003 0302 	and.w	r3, r3, #2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <f_write+0x5a>
 8008e32:	2307      	movs	r3, #7
 8008e34:	e143      	b.n	80090be <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	699a      	ldr	r2, [r3, #24]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	441a      	add	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	f080 812d 	bcs.w	80090a2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	43db      	mvns	r3, r3
 8008e4e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008e50:	e127      	b.n	80090a2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f040 80e3 	bne.w	8009026 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	0a5b      	lsrs	r3, r3, #9
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	8952      	ldrh	r2, [r2, #10]
 8008e6a:	3a01      	subs	r2, #1
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d143      	bne.n	8008efe <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10c      	bne.n	8008e98 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d11a      	bne.n	8008ec0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe fe64 	bl	8007b5c <create_chain>
 8008e94:	62b8      	str	r0, [r7, #40]	; 0x28
 8008e96:	e013      	b.n	8008ec0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d007      	beq.n	8008eb0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f7fe fef0 	bl	8007c8c <clmt_clust>
 8008eac:	62b8      	str	r0, [r7, #40]	; 0x28
 8008eae:	e007      	b.n	8008ec0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4610      	mov	r0, r2
 8008eba:	f7fe fe4f 	bl	8007b5c <create_chain>
 8008ebe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 80f2 	beq.w	80090ac <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d104      	bne.n	8008ed8 <f_write+0xfc>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	755a      	strb	r2, [r3, #21]
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	e0f2      	b.n	80090be <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ede:	d104      	bne.n	8008eea <f_write+0x10e>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	755a      	strb	r2, [r3, #21]
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e0e9      	b.n	80090be <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <f_write+0x122>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008efc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	7d1b      	ldrb	r3, [r3, #20]
 8008f02:	b25b      	sxtb	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	da18      	bge.n	8008f3a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	7858      	ldrb	r0, [r3, #1]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a1a      	ldr	r2, [r3, #32]
 8008f16:	2301      	movs	r3, #1
 8008f18:	f7fe f87e 	bl	8007018 <disk_write>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d004      	beq.n	8008f2c <f_write+0x150>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2201      	movs	r2, #1
 8008f26:	755a      	strb	r2, [r3, #21]
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e0c8      	b.n	80090be <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	7d1b      	ldrb	r3, [r3, #20]
 8008f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	4619      	mov	r1, r3
 8008f42:	4610      	mov	r0, r2
 8008f44:	f7fe fbf2 	bl	800772c <clust2sect>
 8008f48:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d104      	bne.n	8008f5a <f_write+0x17e>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2202      	movs	r2, #2
 8008f54:	755a      	strb	r2, [r3, #21]
 8008f56:	2302      	movs	r3, #2
 8008f58:	e0b1      	b.n	80090be <f_write+0x2e2>
			sect += csect;
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	4413      	add	r3, r2
 8008f60:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	0a5b      	lsrs	r3, r3, #9
 8008f66:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008f68:	6a3b      	ldr	r3, [r7, #32]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d03c      	beq.n	8008fe8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	4413      	add	r3, r2
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	8952      	ldrh	r2, [r2, #10]
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d905      	bls.n	8008f88 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	895b      	ldrh	r3, [r3, #10]
 8008f80:	461a      	mov	r2, r3
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	7858      	ldrb	r0, [r3, #1]
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	69f9      	ldr	r1, [r7, #28]
 8008f92:	f7fe f841 	bl	8007018 <disk_write>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <f_write+0x1ca>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	755a      	strb	r2, [r3, #21]
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e08b      	b.n	80090be <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6a1a      	ldr	r2, [r3, #32]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	6a3a      	ldr	r2, [r7, #32]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d915      	bls.n	8008fe0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6a1a      	ldr	r2, [r3, #32]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	025b      	lsls	r3, r3, #9
 8008fc4:	69fa      	ldr	r2, [r7, #28]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fcc:	4619      	mov	r1, r3
 8008fce:	f7fe f8e3 	bl	8007198 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	7d1b      	ldrb	r3, [r3, #20]
 8008fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	025b      	lsls	r3, r3, #9
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008fe6:	e03f      	b.n	8009068 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d016      	beq.n	8009020 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	699a      	ldr	r2, [r3, #24]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d210      	bcs.n	8009020 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	7858      	ldrb	r0, [r3, #1]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009008:	2301      	movs	r3, #1
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	f7fd ffe4 	bl	8006fd8 <disk_read>
 8009010:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009012:	2b00      	cmp	r3, #0
 8009014:	d004      	beq.n	8009020 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	755a      	strb	r2, [r3, #21]
 800901c:	2301      	movs	r3, #1
 800901e:	e04e      	b.n	80090be <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800902e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	429a      	cmp	r2, r3
 800903a:	d901      	bls.n	8009040 <f_write+0x264>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904e:	4413      	add	r3, r2
 8009050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009052:	69f9      	ldr	r1, [r7, #28]
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe f89f 	bl	8007198 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	7d1b      	ldrb	r3, [r3, #20]
 800905e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009062:	b2da      	uxtb	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009068:	69fa      	ldr	r2, [r7, #28]
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	4413      	add	r3, r2
 800906e:	61fb      	str	r3, [r7, #28]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	699a      	ldr	r2, [r3, #24]
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	441a      	add	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	619a      	str	r2, [r3, #24]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	68da      	ldr	r2, [r3, #12]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	429a      	cmp	r2, r3
 8009086:	bf38      	it	cc
 8009088:	461a      	movcc	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	60da      	str	r2, [r3, #12]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	441a      	add	r2, r3
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f47f aed4 	bne.w	8008e52 <f_write+0x76>
 80090aa:	e000      	b.n	80090ae <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80090ac:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	7d1b      	ldrb	r3, [r3, #20]
 80090b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3730      	adds	r7, #48	; 0x30
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b086      	sub	sp, #24
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f107 0208 	add.w	r2, r7, #8
 80090d4:	4611      	mov	r1, r2
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7ff fc46 	bl	8008968 <validate>
 80090dc:	4603      	mov	r3, r0
 80090de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d168      	bne.n	80091b8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	7d1b      	ldrb	r3, [r3, #20]
 80090ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d062      	beq.n	80091b8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	7d1b      	ldrb	r3, [r3, #20]
 80090f6:	b25b      	sxtb	r3, r3
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	da15      	bge.n	8009128 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	7858      	ldrb	r0, [r3, #1]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a1a      	ldr	r2, [r3, #32]
 800910a:	2301      	movs	r3, #1
 800910c:	f7fd ff84 	bl	8007018 <disk_write>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <f_sync+0x54>
 8009116:	2301      	movs	r3, #1
 8009118:	e04f      	b.n	80091ba <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	7d1b      	ldrb	r3, [r3, #20]
 800911e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009122:	b2da      	uxtb	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009128:	f7fd feb8 	bl	8006e9c <get_fattime>
 800912c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	4619      	mov	r1, r3
 8009136:	4610      	mov	r0, r2
 8009138:	f7fe fa5c 	bl	80075f4 <move_window>
 800913c:	4603      	mov	r3, r0
 800913e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009140:	7dfb      	ldrb	r3, [r7, #23]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d138      	bne.n	80091b8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	330b      	adds	r3, #11
 8009150:	781a      	ldrb	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	330b      	adds	r3, #11
 8009156:	f042 0220 	orr.w	r2, r2, #32
 800915a:	b2d2      	uxtb	r2, r2
 800915c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	461a      	mov	r2, r3
 8009168:	68f9      	ldr	r1, [r7, #12]
 800916a:	f7fe ff69 	bl	8008040 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f103 021c 	add.w	r2, r3, #28
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	4619      	mov	r1, r3
 800917a:	4610      	mov	r0, r2
 800917c:	f7fd ffe0 	bl	8007140 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3316      	adds	r3, #22
 8009184:	6939      	ldr	r1, [r7, #16]
 8009186:	4618      	mov	r0, r3
 8009188:	f7fd ffda 	bl	8007140 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3312      	adds	r3, #18
 8009190:	2100      	movs	r1, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f7fd ffb9 	bl	800710a <st_word>
					fs->wflag = 1;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2201      	movs	r2, #1
 800919c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fe fa55 	bl	8007650 <sync_fs>
 80091a6:	4603      	mov	r3, r0
 80091a8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7d1b      	ldrb	r3, [r3, #20]
 80091ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80091b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3718      	adds	r7, #24
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7ff ff7b 	bl	80090c6 <f_sync>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d118      	bne.n	800920c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f107 0208 	add.w	r2, r7, #8
 80091e0:	4611      	mov	r1, r2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff fbc0 	bl	8008968 <validate>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10c      	bne.n	800920c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe f958 	bl	80074ac <dec_lock>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d102      	bne.n	800920c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b090      	sub	sp, #64	; 0x40
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f107 0208 	add.w	r2, r7, #8
 8009226:	4611      	mov	r1, r2
 8009228:	4618      	mov	r0, r3
 800922a:	f7ff fb9d 	bl	8008968 <validate>
 800922e:	4603      	mov	r3, r0
 8009230:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009234:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009238:	2b00      	cmp	r3, #0
 800923a:	d103      	bne.n	8009244 <f_lseek+0x2e>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	7d5b      	ldrb	r3, [r3, #21]
 8009240:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009244:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <f_lseek+0x3c>
 800924c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009250:	e1e6      	b.n	8009620 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 80d1 	beq.w	80093fe <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009262:	d15a      	bne.n	800931a <f_lseek+0x104>
			tbl = fp->cltbl;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	1d1a      	adds	r2, r3, #4
 800926e:	627a      	str	r2, [r7, #36]	; 0x24
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	617b      	str	r3, [r7, #20]
 8009274:	2302      	movs	r3, #2
 8009276:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	2b00      	cmp	r3, #0
 8009282:	d03a      	beq.n	80092fa <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009286:	613b      	str	r3, [r7, #16]
 8009288:	2300      	movs	r3, #0
 800928a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928e:	3302      	adds	r3, #2
 8009290:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009298:	3301      	adds	r3, #1
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fe fa62 	bl	800776a <get_fat>
 80092a6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d804      	bhi.n	80092b8 <f_lseek+0xa2>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2202      	movs	r2, #2
 80092b2:	755a      	strb	r2, [r3, #21]
 80092b4:	2302      	movs	r3, #2
 80092b6:	e1b3      	b.n	8009620 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092be:	d104      	bne.n	80092ca <f_lseek+0xb4>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	755a      	strb	r2, [r3, #21]
 80092c6:	2301      	movs	r3, #1
 80092c8:	e1aa      	b.n	8009620 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3301      	adds	r3, #1
 80092ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d0de      	beq.n	8009292 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80092d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d809      	bhi.n	80092f0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	1d1a      	adds	r2, r3, #4
 80092e0:	627a      	str	r2, [r7, #36]	; 0x24
 80092e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	1d1a      	adds	r2, r3, #4
 80092ea:	627a      	str	r2, [r7, #36]	; 0x24
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d3c4      	bcc.n	8009284 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009300:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	429a      	cmp	r2, r3
 8009308:	d803      	bhi.n	8009312 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	e184      	b.n	800961c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009312:	2311      	movs	r3, #17
 8009314:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009318:	e180      	b.n	800961c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d902      	bls.n	800932a <f_lseek+0x114>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 8172 	beq.w	800961c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	3b01      	subs	r3, #1
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7fe fca4 	bl	8007c8c <clmt_clust>
 8009344:	4602      	mov	r2, r0
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	4619      	mov	r1, r3
 8009352:	4610      	mov	r0, r2
 8009354:	f7fe f9ea 	bl	800772c <clust2sect>
 8009358:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d104      	bne.n	800936a <f_lseek+0x154>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	755a      	strb	r2, [r3, #21]
 8009366:	2302      	movs	r3, #2
 8009368:	e15a      	b.n	8009620 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	3b01      	subs	r3, #1
 800936e:	0a5b      	lsrs	r3, r3, #9
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	8952      	ldrh	r2, [r2, #10]
 8009374:	3a01      	subs	r2, #1
 8009376:	4013      	ands	r3, r2
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	4413      	add	r3, r2
 800937c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009386:	2b00      	cmp	r3, #0
 8009388:	f000 8148 	beq.w	800961c <f_lseek+0x406>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a1b      	ldr	r3, [r3, #32]
 8009390:	69ba      	ldr	r2, [r7, #24]
 8009392:	429a      	cmp	r2, r3
 8009394:	f000 8142 	beq.w	800961c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	7d1b      	ldrb	r3, [r3, #20]
 800939c:	b25b      	sxtb	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	da18      	bge.n	80093d4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	7858      	ldrb	r0, [r3, #1]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a1a      	ldr	r2, [r3, #32]
 80093b0:	2301      	movs	r3, #1
 80093b2:	f7fd fe31 	bl	8007018 <disk_write>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d004      	beq.n	80093c6 <f_lseek+0x1b0>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	755a      	strb	r2, [r3, #21]
 80093c2:	2301      	movs	r3, #1
 80093c4:	e12c      	b.n	8009620 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7d1b      	ldrb	r3, [r3, #20]
 80093ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	7858      	ldrb	r0, [r3, #1]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093de:	2301      	movs	r3, #1
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	f7fd fdf9 	bl	8006fd8 <disk_read>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d004      	beq.n	80093f6 <f_lseek+0x1e0>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	755a      	strb	r2, [r3, #21]
 80093f2:	2301      	movs	r3, #1
 80093f4:	e114      	b.n	8009620 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	621a      	str	r2, [r3, #32]
 80093fc:	e10e      	b.n	800961c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	429a      	cmp	r2, r3
 8009406:	d908      	bls.n	800941a <f_lseek+0x204>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7d1b      	ldrb	r3, [r3, #20]
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	637b      	str	r3, [r7, #52]	; 0x34
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009428:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80a7 	beq.w	8009580 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	895b      	ldrh	r3, [r3, #10]
 8009436:	025b      	lsls	r3, r3, #9
 8009438:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d01b      	beq.n	8009478 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	1e5a      	subs	r2, r3, #1
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	fbb2 f2f3 	udiv	r2, r2, r3
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	1e59      	subs	r1, r3, #1
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009454:	429a      	cmp	r2, r3
 8009456:	d30f      	bcc.n	8009478 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	1e5a      	subs	r2, r3, #1
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	425b      	negs	r3, r3
 8009460:	401a      	ands	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	69db      	ldr	r3, [r3, #28]
 8009474:	63bb      	str	r3, [r7, #56]	; 0x38
 8009476:	e022      	b.n	80094be <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800947e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009480:	2b00      	cmp	r3, #0
 8009482:	d119      	bne.n	80094b8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2100      	movs	r1, #0
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe fb67 	bl	8007b5c <create_chain>
 800948e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	2b01      	cmp	r3, #1
 8009494:	d104      	bne.n	80094a0 <f_lseek+0x28a>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2202      	movs	r2, #2
 800949a:	755a      	strb	r2, [r3, #21]
 800949c:	2302      	movs	r3, #2
 800949e:	e0bf      	b.n	8009620 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a6:	d104      	bne.n	80094b2 <f_lseek+0x29c>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	755a      	strb	r2, [r3, #21]
 80094ae:	2301      	movs	r3, #1
 80094b0:	e0b6      	b.n	8009620 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094b6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094bc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d05d      	beq.n	8009580 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80094c4:	e03a      	b.n	800953c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	603b      	str	r3, [r7, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	441a      	add	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	7d1b      	ldrb	r3, [r3, #20]
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00b      	beq.n	80094fe <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe fb36 	bl	8007b5c <create_chain>
 80094f0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80094f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d108      	bne.n	800950a <f_lseek+0x2f4>
							ofs = 0; break;
 80094f8:	2300      	movs	r3, #0
 80094fa:	603b      	str	r3, [r7, #0]
 80094fc:	e022      	b.n	8009544 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe f931 	bl	800776a <get_fat>
 8009508:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009510:	d104      	bne.n	800951c <f_lseek+0x306>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	755a      	strb	r2, [r3, #21]
 8009518:	2301      	movs	r3, #1
 800951a:	e081      	b.n	8009620 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	2b01      	cmp	r3, #1
 8009520:	d904      	bls.n	800952c <f_lseek+0x316>
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009528:	429a      	cmp	r2, r3
 800952a:	d304      	bcc.n	8009536 <f_lseek+0x320>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2202      	movs	r2, #2
 8009530:	755a      	strb	r2, [r3, #21]
 8009532:	2302      	movs	r3, #2
 8009534:	e074      	b.n	8009620 <f_lseek+0x40a>
					fp->clust = clst;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800953a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	429a      	cmp	r2, r3
 8009542:	d8c0      	bhi.n	80094c6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	699a      	ldr	r2, [r3, #24]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	441a      	add	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009556:	2b00      	cmp	r3, #0
 8009558:	d012      	beq.n	8009580 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe f8e4 	bl	800772c <clust2sect>
 8009564:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009568:	2b00      	cmp	r3, #0
 800956a:	d104      	bne.n	8009576 <f_lseek+0x360>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2202      	movs	r2, #2
 8009570:	755a      	strb	r2, [r3, #21]
 8009572:	2302      	movs	r3, #2
 8009574:	e054      	b.n	8009620 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	0a5b      	lsrs	r3, r3, #9
 800957a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800957c:	4413      	add	r3, r2
 800957e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	699a      	ldr	r2, [r3, #24]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	429a      	cmp	r2, r3
 800958a:	d90a      	bls.n	80095a2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	699a      	ldr	r2, [r3, #24]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7d1b      	ldrb	r3, [r3, #20]
 8009598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800959c:	b2da      	uxtb	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d036      	beq.n	800961c <f_lseek+0x406>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d031      	beq.n	800961c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7d1b      	ldrb	r3, [r3, #20]
 80095bc:	b25b      	sxtb	r3, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	da18      	bge.n	80095f4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	7858      	ldrb	r0, [r3, #1]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a1a      	ldr	r2, [r3, #32]
 80095d0:	2301      	movs	r3, #1
 80095d2:	f7fd fd21 	bl	8007018 <disk_write>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d004      	beq.n	80095e6 <f_lseek+0x3d0>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	755a      	strb	r2, [r3, #21]
 80095e2:	2301      	movs	r3, #1
 80095e4:	e01c      	b.n	8009620 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	7d1b      	ldrb	r3, [r3, #20]
 80095ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	7858      	ldrb	r0, [r3, #1]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095fe:	2301      	movs	r3, #1
 8009600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009602:	f7fd fce9 	bl	8006fd8 <disk_read>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d004      	beq.n	8009616 <f_lseek+0x400>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	755a      	strb	r2, [r3, #21]
 8009612:	2301      	movs	r3, #1
 8009614:	e004      	b.n	8009620 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800961a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800961c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009620:	4618      	mov	r0, r3
 8009622:	3740      	adds	r7, #64	; 0x40
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b092      	sub	sp, #72	; 0x48
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009634:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009638:	f107 030c 	add.w	r3, r7, #12
 800963c:	2200      	movs	r2, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe ff46 	bl	80084d0 <find_volume>
 8009644:	4603      	mov	r3, r0
 8009646:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800964a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800964e:	2b00      	cmp	r3, #0
 8009650:	f040 8099 	bne.w	8009786 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	691a      	ldr	r2, [r3, #16]
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	3b02      	subs	r3, #2
 8009664:	429a      	cmp	r2, r3
 8009666:	d804      	bhi.n	8009672 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	691a      	ldr	r2, [r3, #16]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	e089      	b.n	8009786 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d128      	bne.n	80096d0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800967e:	2302      	movs	r3, #2
 8009680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009686:	f107 0314 	add.w	r3, r7, #20
 800968a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe f86c 	bl	800776a <get_fat>
 8009692:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969a:	d103      	bne.n	80096a4 <f_getfree+0x7c>
 800969c:	2301      	movs	r3, #1
 800969e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80096a2:	e063      	b.n	800976c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80096a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d103      	bne.n	80096b2 <f_getfree+0x8a>
 80096aa:	2302      	movs	r3, #2
 80096ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80096b0:	e05c      	b.n	800976c <f_getfree+0x144>
					if (stat == 0) nfree++;
 80096b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d102      	bne.n	80096be <f_getfree+0x96>
 80096b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ba:	3301      	adds	r3, #1
 80096bc:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80096be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c0:	3301      	adds	r3, #1
 80096c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d3db      	bcc.n	8009686 <f_getfree+0x5e>
 80096ce:	e04d      	b.n	800976c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	637b      	str	r3, [r7, #52]	; 0x34
 80096e0:	2300      	movs	r3, #0
 80096e2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80096e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d113      	bne.n	8009712 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80096ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	1c5a      	adds	r2, r3, #1
 80096f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80096f2:	4619      	mov	r1, r3
 80096f4:	f7fd ff7e 	bl	80075f4 <move_window>
 80096f8:	4603      	mov	r3, r0
 80096fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80096fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009702:	2b00      	cmp	r3, #0
 8009704:	d131      	bne.n	800976a <f_getfree+0x142>
							p = fs->win;
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	3330      	adds	r3, #48	; 0x30
 800970a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800970c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009710:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	2b02      	cmp	r3, #2
 8009718:	d10f      	bne.n	800973a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800971a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800971c:	f7fd fcba 	bl	8007094 <ld_word>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d102      	bne.n	800972c <f_getfree+0x104>
 8009726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009728:	3301      	adds	r3, #1
 800972a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	3302      	adds	r3, #2
 8009730:	633b      	str	r3, [r7, #48]	; 0x30
 8009732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009734:	3b02      	subs	r3, #2
 8009736:	637b      	str	r3, [r7, #52]	; 0x34
 8009738:	e010      	b.n	800975c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800973a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800973c:	f7fd fcc2 	bl	80070c4 <ld_dword>
 8009740:	4603      	mov	r3, r0
 8009742:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d102      	bne.n	8009750 <f_getfree+0x128>
 800974a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800974c:	3301      	adds	r3, #1
 800974e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009752:	3304      	adds	r3, #4
 8009754:	633b      	str	r3, [r7, #48]	; 0x30
 8009756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009758:	3b04      	subs	r3, #4
 800975a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800975c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800975e:	3b01      	subs	r3, #1
 8009760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1bd      	bne.n	80096e4 <f_getfree+0xbc>
 8009768:	e000      	b.n	800976c <f_getfree+0x144>
							if (res != FR_OK) break;
 800976a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009770:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009776:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	791a      	ldrb	r2, [r3, #4]
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	f042 0201 	orr.w	r2, r2, #1
 8009782:	b2d2      	uxtb	r2, r2
 8009784:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009786:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800978a:	4618      	mov	r0, r3
 800978c:	3748      	adds	r7, #72	; 0x48
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	460b      	mov	r3, r1
 800979c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800979e:	78fb      	ldrb	r3, [r7, #3]
 80097a0:	2b0a      	cmp	r3, #10
 80097a2:	d103      	bne.n	80097ac <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80097a4:	210d      	movs	r1, #13
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff fff3 	bl	8009792 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	db25      	blt.n	8009804 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	60fa      	str	r2, [r7, #12]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	4413      	add	r3, r2
 80097c2:	78fa      	ldrb	r2, [r7, #3]
 80097c4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b3c      	cmp	r3, #60	; 0x3c
 80097ca:	dd12      	ble.n	80097f2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6818      	ldr	r0, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f103 010c 	add.w	r1, r3, #12
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	f107 0308 	add.w	r3, r7, #8
 80097dc:	f7ff fafe 	bl	8008ddc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d101      	bne.n	80097ec <putc_bfd+0x5a>
 80097e8:	2300      	movs	r3, #0
 80097ea:	e001      	b.n	80097f0 <putc_bfd+0x5e>
 80097ec:	f04f 33ff 	mov.w	r3, #4294967295
 80097f0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	1c5a      	adds	r2, r3, #1
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	609a      	str	r2, [r3, #8]
 8009802:	e000      	b.n	8009806 <putc_bfd+0x74>
	if (i < 0) return;
 8009804:	bf00      	nop
}
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	db16      	blt.n	800984a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6818      	ldr	r0, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f103 010c 	add.w	r1, r3, #12
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	461a      	mov	r2, r3
 800982c:	f107 030c 	add.w	r3, r7, #12
 8009830:	f7ff fad4 	bl	8008ddc <f_write>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d107      	bne.n	800984a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	4293      	cmp	r3, r2
 8009842:	d102      	bne.n	800984a <putc_flush+0x3e>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	e001      	b.n	800984e <putc_flush+0x42>
	return EOF;
 800984a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009856:	b480      	push	{r7}
 8009858:	b083      	sub	sp, #12
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	605a      	str	r2, [r3, #4]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	609a      	str	r2, [r3, #8]
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b096      	sub	sp, #88	; 0x58
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800988a:	f107 030c 	add.w	r3, r7, #12
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	4618      	mov	r0, r3
 8009892:	f7ff ffe0 	bl	8009856 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009896:	e009      	b.n	80098ac <f_puts+0x2c>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	1c5a      	adds	r2, r3, #1
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	781a      	ldrb	r2, [r3, #0]
 80098a0:	f107 030c 	add.w	r3, r7, #12
 80098a4:	4611      	mov	r1, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7ff ff73 	bl	8009792 <putc_bfd>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1f1      	bne.n	8009898 <f_puts+0x18>
	return putc_flush(&pb);
 80098b4:	f107 030c 	add.w	r3, r7, #12
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7ff ffa7 	bl	800980c <putc_flush>
 80098be:	4603      	mov	r3, r0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3758      	adds	r7, #88	; 0x58
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	4613      	mov	r3, r2
 80098d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80098d6:	2301      	movs	r3, #1
 80098d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80098de:	4b1f      	ldr	r3, [pc, #124]	; (800995c <FATFS_LinkDriverEx+0x94>)
 80098e0:	7a5b      	ldrb	r3, [r3, #9]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d131      	bne.n	800994c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80098e8:	4b1c      	ldr	r3, [pc, #112]	; (800995c <FATFS_LinkDriverEx+0x94>)
 80098ea:	7a5b      	ldrb	r3, [r3, #9]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	461a      	mov	r2, r3
 80098f0:	4b1a      	ldr	r3, [pc, #104]	; (800995c <FATFS_LinkDriverEx+0x94>)
 80098f2:	2100      	movs	r1, #0
 80098f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80098f6:	4b19      	ldr	r3, [pc, #100]	; (800995c <FATFS_LinkDriverEx+0x94>)
 80098f8:	7a5b      	ldrb	r3, [r3, #9]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	4a17      	ldr	r2, [pc, #92]	; (800995c <FATFS_LinkDriverEx+0x94>)
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009906:	4b15      	ldr	r3, [pc, #84]	; (800995c <FATFS_LinkDriverEx+0x94>)
 8009908:	7a5b      	ldrb	r3, [r3, #9]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	461a      	mov	r2, r3
 800990e:	4b13      	ldr	r3, [pc, #76]	; (800995c <FATFS_LinkDriverEx+0x94>)
 8009910:	4413      	add	r3, r2
 8009912:	79fa      	ldrb	r2, [r7, #7]
 8009914:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009916:	4b11      	ldr	r3, [pc, #68]	; (800995c <FATFS_LinkDriverEx+0x94>)
 8009918:	7a5b      	ldrb	r3, [r3, #9]
 800991a:	b2db      	uxtb	r3, r3
 800991c:	1c5a      	adds	r2, r3, #1
 800991e:	b2d1      	uxtb	r1, r2
 8009920:	4a0e      	ldr	r2, [pc, #56]	; (800995c <FATFS_LinkDriverEx+0x94>)
 8009922:	7251      	strb	r1, [r2, #9]
 8009924:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009926:	7dbb      	ldrb	r3, [r7, #22]
 8009928:	3330      	adds	r3, #48	; 0x30
 800992a:	b2da      	uxtb	r2, r3
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	3301      	adds	r3, #1
 8009934:	223a      	movs	r2, #58	; 0x3a
 8009936:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	3302      	adds	r3, #2
 800993c:	222f      	movs	r2, #47	; 0x2f
 800993e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	3303      	adds	r3, #3
 8009944:	2200      	movs	r2, #0
 8009946:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800994c:	7dfb      	ldrb	r3, [r7, #23]
}
 800994e:	4618      	mov	r0, r3
 8009950:	371c      	adds	r7, #28
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	2000a0f8 	.word	0x2000a0f8

08009960 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800996a:	2200      	movs	r2, #0
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7ff ffaa 	bl	80098c8 <FATFS_LinkDriverEx>
 8009974:	4603      	mov	r3, r0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 800997e:	b480      	push	{r7}
 8009980:	b083      	sub	sp, #12
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	881a      	ldrh	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	799b      	ldrb	r3, [r3, #6]
 8009990:	08db      	lsrs	r3, r3, #3
 8009992:	b2db      	uxtb	r3, r3
 8009994:	b29b      	uxth	r3, r3
 8009996:	fb12 f303 	smulbb	r3, r2, r3
 800999a:	b29a      	uxth	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	889b      	ldrh	r3, [r3, #4]
 80099a4:	461a      	mov	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	885b      	ldrh	r3, [r3, #2]
 80099aa:	fb03 f302 	mul.w	r3, r3, r2
 80099ae:	461a      	mov	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	60da      	str	r2, [r3, #12]
}
 80099ba:	bf00      	nop
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 80099c6:	b490      	push	{r4, r7}
 80099c8:	b086      	sub	sp, #24
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	4604      	mov	r4, r0
 80099ce:	4608      	mov	r0, r1
 80099d0:	1d39      	adds	r1, r7, #4
 80099d2:	e881 000c 	stmia.w	r1, {r2, r3}
 80099d6:	4623      	mov	r3, r4
 80099d8:	81fb      	strh	r3, [r7, #14]
 80099da:	4603      	mov	r3, r0
 80099dc:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 80099de:	2300      	movs	r3, #0
 80099e0:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 80099e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80099e6:	88ba      	ldrh	r2, [r7, #4]
 80099e8:	4293      	cmp	r3, r2
 80099ea:	da04      	bge.n	80099f6 <code+0x30>
        code |= LEFT;
 80099ec:	2201      	movs	r2, #1
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	75fb      	strb	r3, [r7, #23]
 80099f4:	e008      	b.n	8009a08 <code+0x42>
    } else if (x0 > window.x1) {
 80099f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80099fa:	893a      	ldrh	r2, [r7, #8]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	dd03      	ble.n	8009a08 <code+0x42>
        code |= RIGHT;
 8009a00:	2202      	movs	r2, #2
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8009a08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009a0c:	88fa      	ldrh	r2, [r7, #6]
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	da04      	bge.n	8009a1c <code+0x56>
        code |= BOTTOM;
 8009a12:	2204      	movs	r2, #4
 8009a14:	7dfb      	ldrb	r3, [r7, #23]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	75fb      	strb	r3, [r7, #23]
 8009a1a:	e008      	b.n	8009a2e <code+0x68>
    } else if (y0 > window.y1) {
 8009a1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009a20:	897a      	ldrh	r2, [r7, #10]
 8009a22:	4293      	cmp	r3, r2
 8009a24:	dd03      	ble.n	8009a2e <code+0x68>
        code |= TOP;
 8009a26:	2208      	movs	r2, #8
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3718      	adds	r7, #24
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc90      	pop	{r4, r7}
 8009a38:	4770      	bx	lr

08009a3a <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b088      	sub	sp, #32
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a58:	cb0c      	ldmia	r3, {r2, r3}
 8009a5a:	f7ff ffb4 	bl	80099c6 <code>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f9b3 0000 	ldrsh.w	r0, [r3]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a72:	cb0c      	ldmia	r3, {r2, r3}
 8009a74:	f7ff ffa7 	bl	80099c6 <code>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8009a80:	7ffa      	ldrb	r2, [r7, #31]
 8009a82:	7fbb      	ldrb	r3, [r7, #30]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d102      	bne.n	8009a92 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	777b      	strb	r3, [r7, #29]
            break;
 8009a90:	e0e9      	b.n	8009c66 <clip_line+0x22c>
        } else if (code0 & code1) {
 8009a92:	7ffa      	ldrb	r2, [r7, #31]
 8009a94:	7fbb      	ldrb	r3, [r7, #30]
 8009a96:	4013      	ands	r3, r2
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f040 80e2 	bne.w	8009c64 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8009aa8:	7ffb      	ldrb	r3, [r7, #31]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <clip_line+0x78>
 8009aae:	7ffb      	ldrb	r3, [r7, #31]
 8009ab0:	e000      	b.n	8009ab4 <clip_line+0x7a>
 8009ab2:	7fbb      	ldrb	r3, [r7, #30]
 8009ab4:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8009ab6:	2208      	movs	r2, #8
 8009ab8:	7dfb      	ldrb	r3, [r7, #23]
 8009aba:	4013      	ands	r3, r2
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d024      	beq.n	8009b0c <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ad8:	1acb      	subs	r3, r1, r3
 8009ada:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8009adc:	4608      	mov	r0, r1
 8009ade:	68b9      	ldr	r1, [r7, #8]
 8009ae0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8009ae4:	1a41      	subs	r1, r0, r1
 8009ae6:	fb01 f103 	mul.w	r1, r1, r3
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009af0:	4618      	mov	r0, r3
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009af8:	1ac3      	subs	r3, r0, r3
 8009afa:	fb91 f3f3 	sdiv	r3, r1, r3
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	4413      	add	r3, r2
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8009b06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b08:	833b      	strh	r3, [r7, #24]
 8009b0a:	e07f      	b.n	8009c0c <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
 8009b10:	4013      	ands	r3, r2
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d024      	beq.n	8009b62 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b26:	4619      	mov	r1, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b2e:	1acb      	subs	r3, r1, r3
 8009b30:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8009b32:	4608      	mov	r0, r1
 8009b34:	68b9      	ldr	r1, [r7, #8]
 8009b36:	f9b1 1000 	ldrsh.w	r1, [r1]
 8009b3a:	1a41      	subs	r1, r0, r1
 8009b3c:	fb01 f103 	mul.w	r1, r1, r3
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b46:	4618      	mov	r0, r3
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b4e:	1ac3      	subs	r3, r0, r3
 8009b50:	fb91 f3f3 	sdiv	r3, r1, r3
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	4413      	add	r3, r2
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8009b5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b5e:	833b      	strh	r3, [r7, #24]
 8009b60:	e054      	b.n	8009c0c <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8009b62:	2202      	movs	r2, #2
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
 8009b66:	4013      	ands	r3, r2
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d024      	beq.n	8009bb8 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b84:	1acb      	subs	r3, r1, r3
 8009b86:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8009b88:	4608      	mov	r0, r1
 8009b8a:	68f9      	ldr	r1, [r7, #12]
 8009b8c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8009b90:	1a41      	subs	r1, r0, r1
 8009b92:	fb01 f103 	mul.w	r1, r1, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ba4:	1ac3      	subs	r3, r0, r3
 8009ba6:	fb91 f3f3 	sdiv	r3, r1, r3
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	4413      	add	r3, r2
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8009bb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009bb4:	837b      	strh	r3, [r7, #26]
 8009bb6:	e029      	b.n	8009c0c <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8009bb8:	2201      	movs	r2, #1
 8009bba:	7dfb      	ldrb	r3, [r7, #23]
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d023      	beq.n	8009c0c <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bda:	1acb      	subs	r3, r1, r3
 8009bdc:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8009bde:	4608      	mov	r0, r1
 8009be0:	68f9      	ldr	r1, [r7, #12]
 8009be2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8009be6:	1a41      	subs	r1, r0, r1
 8009be8:	fb01 f103 	mul.w	r1, r1, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bfa:	1ac3      	subs	r3, r0, r3
 8009bfc:	fb91 f3f3 	sdiv	r3, r1, r3
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	4413      	add	r3, r2
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8009c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c0a:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8009c0c:	7dfa      	ldrb	r2, [r7, #23]
 8009c0e:	7ffb      	ldrb	r3, [r7, #31]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d113      	bne.n	8009c3c <clip_line+0x202>
                *x0 = x;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	8b7a      	ldrh	r2, [r7, #26]
 8009c18:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	8b3a      	ldrh	r2, [r7, #24]
 8009c1e:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f9b3 0000 	ldrsh.w	r0, [r3]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009c2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c30:	cb0c      	ldmia	r3, {r2, r3}
 8009c32:	f7ff fec8 	bl	80099c6 <code>
 8009c36:	4603      	mov	r3, r0
 8009c38:	77fb      	strb	r3, [r7, #31]
 8009c3a:	e721      	b.n	8009a80 <clip_line+0x46>
            } else {
                *x1 = x;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	8b7a      	ldrh	r2, [r7, #26]
 8009c40:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	8b3a      	ldrh	r2, [r7, #24]
 8009c46:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009c54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c58:	cb0c      	ldmia	r3, {r2, r3}
 8009c5a:	f7ff feb4 	bl	80099c6 <code>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8009c62:	e70d      	b.n	8009a80 <clip_line+0x46>
            break;
 8009c64:	bf00      	nop
            }
        }
    }

    return accept;
 8009c66:	7f7b      	ldrb	r3, [r7, #29]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3720      	adds	r7, #32
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	3306      	adds	r3, #6
 8009c80:	2208      	movs	r2, #8
 8009c82:	4619      	mov	r1, r3
 8009c84:	f001 f934 	bl	800aef0 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	7b9a      	ldrb	r2, [r3, #14]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	7bda      	ldrb	r2, [r3, #15]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	7c1a      	ldrb	r2, [r3, #16]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	72da      	strb	r2, [r3, #11]

    return 0;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b08e      	sub	sp, #56	; 0x38
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	60f8      	str	r0, [r7, #12]
 8009cb2:	60b9      	str	r1, [r7, #8]
 8009cb4:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8009cb6:	f107 0314 	add.w	r3, r7, #20
 8009cba:	6879      	ldr	r1, [r7, #4]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7ff ffd7 	bl	8009c70 <fontx_meta>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8009cc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <fontx_glyph+0x2c>
        return status;
 8009cd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cd4:	e077      	b.n	8009dc6 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8009cd6:	7f7a      	ldrb	r2, [r7, #29]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8009cdc:	7fba      	ldrb	r2, [r7, #30]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8009ce2:	7f7b      	ldrb	r3, [r7, #29]
 8009ce4:	3307      	adds	r3, #7
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	da00      	bge.n	8009cec <fontx_glyph+0x42>
 8009cea:	3307      	adds	r3, #7
 8009cec:	10db      	asrs	r3, r3, #3
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	78da      	ldrb	r2, [r3, #3]
 8009cf8:	7fbb      	ldrb	r3, [r7, #30]
 8009cfa:	fb12 f303 	smulbb	r3, r2, r3
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8009d04:	7ffb      	ldrb	r3, [r7, #31]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10f      	bne.n	8009d2a <fontx_glyph+0x80>
        if (code < 0x100) {
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2bff      	cmp	r3, #255	; 0xff
 8009d0e:	d859      	bhi.n	8009dc4 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	789b      	ldrb	r3, [r3, #2]
 8009d14:	461a      	mov	r2, r3
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	fb03 f302 	mul.w	r3, r3, r2
 8009d1c:	3311      	adds	r3, #17
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	441a      	add	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	e04d      	b.n	8009dc6 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	3312      	adds	r3, #18
 8009d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8009d30:	2300      	movs	r3, #0
 8009d32:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	3311      	adds	r3, #17
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8009d3c:	e03d      	b.n	8009dba <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	3301      	adds	r3, #1
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	021b      	lsls	r3, r3, #8
 8009d4c:	4413      	add	r3, r2
 8009d4e:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8009d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d52:	3302      	adds	r3, #2
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5a:	3303      	adds	r3, #3
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	021b      	lsls	r3, r3, #8
 8009d60:	4413      	add	r3, r2
 8009d62:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d31c      	bcc.n	8009da6 <fontx_glyph+0xfc>
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d818      	bhi.n	8009da6 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d7c:	4413      	add	r3, r2
 8009d7e:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	3311      	adds	r3, #17
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	461a      	mov	r2, r3
                    nc * glyph->size
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	789b      	ldrb	r3, [r3, #2]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d92:	fb03 f301 	mul.w	r3, r3, r1
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8009d96:	4413      	add	r3, r2
 8009d98:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	441a      	add	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	e00f      	b.n	8009dc6 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8009da6:	6a3a      	ldr	r2, [r7, #32]
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	1ad2      	subs	r2, r2, r3
 8009dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dae:	4413      	add	r3, r2
 8009db0:	3301      	adds	r3, #1
 8009db2:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8009db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db6:	3304      	adds	r3, #4
 8009db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8009dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbc:	1e5a      	subs	r2, r3, #1
 8009dbe:	633a      	str	r2, [r7, #48]	; 0x30
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1bc      	bne.n	8009d3e <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3738      	adds	r7, #56	; 0x38
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8009dce:	b480      	push	{r7}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	dd01      	ble.n	8009de4 <min+0x16>
        return b;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	e000      	b.n	8009de6 <min+0x18>
    };
    return a;
 8009de4:	687b      	ldr	r3, [r7, #4]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <max>:

static inline int max(int a, int b) {
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	dd01      	ble.n	8009e08 <max+0x16>
        return a;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	e000      	b.n	8009e0a <max+0x18>
    }
    return b;
 8009e08:	683b      	ldr	r3, [r7, #0]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
	...

08009e18 <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8009e18:	b490      	push	{r4, r7}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4604      	mov	r4, r0
 8009e20:	4608      	mov	r0, r1
 8009e22:	4611      	mov	r1, r2
 8009e24:	461a      	mov	r2, r3
 8009e26:	4623      	mov	r3, r4
 8009e28:	80fb      	strh	r3, [r7, #6]
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	80bb      	strh	r3, [r7, #4]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	807b      	strh	r3, [r7, #2]
 8009e32:	4613      	mov	r3, r2
 8009e34:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 8009e36:	4a08      	ldr	r2, [pc, #32]	; (8009e58 <hagl_set_clip_window+0x40>)
 8009e38:	88fb      	ldrh	r3, [r7, #6]
 8009e3a:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 8009e3c:	4a06      	ldr	r2, [pc, #24]	; (8009e58 <hagl_set_clip_window+0x40>)
 8009e3e:	88bb      	ldrh	r3, [r7, #4]
 8009e40:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 8009e42:	4a05      	ldr	r2, [pc, #20]	; (8009e58 <hagl_set_clip_window+0x40>)
 8009e44:	887b      	ldrh	r3, [r7, #2]
 8009e46:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 8009e48:	4a03      	ldr	r2, [pc, #12]	; (8009e58 <hagl_set_clip_window+0x40>)
 8009e4a:	883b      	ldrh	r3, [r7, #0]
 8009e4c:	80d3      	strh	r3, [r2, #6]
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bc90      	pop	{r4, r7}
 8009e56:	4770      	bx	lr
 8009e58:	20000028 	.word	0x20000028

08009e5c <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	80fb      	strh	r3, [r7, #6]
 8009e66:	460b      	mov	r3, r1
 8009e68:	80bb      	strh	r3, [r7, #4]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8009e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e72:	4a12      	ldr	r2, [pc, #72]	; (8009ebc <hagl_put_pixel+0x60>)
 8009e74:	8812      	ldrh	r2, [r2, #0]
 8009e76:	4293      	cmp	r3, r2
 8009e78:	db1a      	blt.n	8009eb0 <hagl_put_pixel+0x54>
 8009e7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009e7e:	4a0f      	ldr	r2, [pc, #60]	; (8009ebc <hagl_put_pixel+0x60>)
 8009e80:	8852      	ldrh	r2, [r2, #2]
 8009e82:	4293      	cmp	r3, r2
 8009e84:	db14      	blt.n	8009eb0 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8009e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e8a:	4a0c      	ldr	r2, [pc, #48]	; (8009ebc <hagl_put_pixel+0x60>)
 8009e8c:	8892      	ldrh	r2, [r2, #4]
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	dc10      	bgt.n	8009eb4 <hagl_put_pixel+0x58>
 8009e92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009e96:	4a09      	ldr	r2, [pc, #36]	; (8009ebc <hagl_put_pixel+0x60>)
 8009e98:	88d2      	ldrh	r2, [r2, #6]
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	dc0a      	bgt.n	8009eb4 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8009e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ea2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009ea6:	887a      	ldrh	r2, [r7, #2]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7f7 ff8f 	bl	8001dcc <lcd_put_pixel>
 8009eae:	e002      	b.n	8009eb6 <hagl_put_pixel+0x5a>
        return;
 8009eb0:	bf00      	nop
 8009eb2:	e000      	b.n	8009eb6 <hagl_put_pixel+0x5a>
        return;
 8009eb4:	bf00      	nop
}
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	20000028 	.word	0x20000028

08009ec0 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8009ec0:	b590      	push	{r4, r7, lr}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	4608      	mov	r0, r1
 8009eca:	4611      	mov	r1, r2
 8009ecc:	461a      	mov	r2, r3
 8009ece:	4623      	mov	r3, r4
 8009ed0:	80fb      	strh	r3, [r7, #6]
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	80bb      	strh	r3, [r7, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	807b      	strh	r3, [r7, #2]
 8009eda:	4613      	mov	r3, r2
 8009edc:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8009ede:	88fa      	ldrh	r2, [r7, #6]
 8009ee0:	887b      	ldrh	r3, [r7, #2]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	b21a      	sxth	r2, r3
 8009ee8:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8009eec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009ef0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8009ef4:	883b      	ldrh	r3, [r7, #0]
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	4623      	mov	r3, r4
 8009efa:	f000 f827 	bl	8009f4c <hagl_draw_line>
#endif
}
 8009efe:	bf00      	nop
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd90      	pop	{r4, r7, pc}

08009f06 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8009f06:	b590      	push	{r4, r7, lr}
 8009f08:	b085      	sub	sp, #20
 8009f0a:	af02      	add	r7, sp, #8
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	4608      	mov	r0, r1
 8009f10:	4611      	mov	r1, r2
 8009f12:	461a      	mov	r2, r3
 8009f14:	4623      	mov	r3, r4
 8009f16:	80fb      	strh	r3, [r7, #6]
 8009f18:	4603      	mov	r3, r0
 8009f1a:	80bb      	strh	r3, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	807b      	strh	r3, [r7, #2]
 8009f20:	4613      	mov	r3, r2
 8009f22:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8009f24:	88ba      	ldrh	r2, [r7, #4]
 8009f26:	887b      	ldrh	r3, [r7, #2]
 8009f28:	4413      	add	r3, r2
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	b21c      	sxth	r4, r3
 8009f2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009f32:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009f36:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8009f3a:	883b      	ldrh	r3, [r7, #0]
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	4623      	mov	r3, r4
 8009f40:	f000 f804 	bl	8009f4c <hagl_draw_line>
#endif
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd90      	pop	{r4, r7, pc}

08009f4c <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8009f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f4e:	b089      	sub	sp, #36	; 0x24
 8009f50:	af02      	add	r7, sp, #8
 8009f52:	4604      	mov	r4, r0
 8009f54:	4608      	mov	r0, r1
 8009f56:	4611      	mov	r1, r2
 8009f58:	461a      	mov	r2, r3
 8009f5a:	4623      	mov	r3, r4
 8009f5c:	80fb      	strh	r3, [r7, #6]
 8009f5e:	4603      	mov	r3, r0
 8009f60:	80bb      	strh	r3, [r7, #4]
 8009f62:	460b      	mov	r3, r1
 8009f64:	807b      	strh	r3, [r7, #2]
 8009f66:	4613      	mov	r3, r2
 8009f68:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8009f6a:	463b      	mov	r3, r7
 8009f6c:	1cba      	adds	r2, r7, #2
 8009f6e:	1d3d      	adds	r5, r7, #4
 8009f70:	1dbc      	adds	r4, r7, #6
 8009f72:	494a      	ldr	r1, [pc, #296]	; (800a09c <hagl_draw_line+0x150>)
 8009f74:	466e      	mov	r6, sp
 8009f76:	c903      	ldmia	r1, {r0, r1}
 8009f78:	e886 0003 	stmia.w	r6, {r0, r1}
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f7ff fd5b 	bl	8009a3a <clip_line>
 8009f84:	4603      	mov	r3, r0
 8009f86:	f083 0301 	eor.w	r3, r3, #1
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d17e      	bne.n	800a08e <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8009f90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f94:	461a      	mov	r2, r3
 8009f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	bfb8      	it	lt
 8009fa0:	425b      	neglt	r3, r3
 8009fa2:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8009fa4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009fa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	da01      	bge.n	8009fb4 <hagl_draw_line+0x68>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e001      	b.n	8009fb8 <hagl_draw_line+0x6c>
 8009fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb8:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8009fba:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	bfb8      	it	lt
 8009fca:	425b      	neglt	r3, r3
 8009fcc:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8009fce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009fd2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	da01      	bge.n	8009fde <hagl_draw_line+0x92>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e001      	b.n	8009fe2 <hagl_draw_line+0x96>
 8009fde:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe2:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8009fe4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8009fe8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	dd06      	ble.n	8009ffe <hagl_draw_line+0xb2>
 8009ff0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009ff4:	0fda      	lsrs	r2, r3, #31
 8009ff6:	4413      	add	r3, r2
 8009ff8:	105b      	asrs	r3, r3, #1
 8009ffa:	b21b      	sxth	r3, r3
 8009ffc:	e006      	b.n	800a00c <hagl_draw_line+0xc0>
 8009ffe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a002:	0fda      	lsrs	r2, r3, #31
 800a004:	4413      	add	r3, r2
 800a006:	105b      	asrs	r3, r3, #1
 800a008:	425b      	negs	r3, r3
 800a00a:	b21b      	sxth	r3, r3
 800a00c:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 800a00e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a012:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a016:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff ff1f 	bl	8009e5c <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 800a01e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a022:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a026:	429a      	cmp	r2, r3
 800a028:	d105      	bne.n	800a036 <hagl_draw_line+0xea>
 800a02a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a02e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a032:	429a      	cmp	r2, r3
 800a034:	d02d      	beq.n	800a092 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 800a036:	8afb      	ldrh	r3, [r7, #22]
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 800a03e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a042:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a046:	425b      	negs	r3, r3
 800a048:	429a      	cmp	r2, r3
 800a04a:	dd0c      	ble.n	800a066 <hagl_draw_line+0x11a>
            err -= dy;
 800a04c:	8afa      	ldrh	r2, [r7, #22]
 800a04e:	8a3b      	ldrh	r3, [r7, #16]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	b29b      	uxth	r3, r3
 800a054:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 800a056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	8a7b      	ldrh	r3, [r7, #18]
 800a05e:	4413      	add	r3, r2
 800a060:	b29b      	uxth	r3, r3
 800a062:	b21b      	sxth	r3, r3
 800a064:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 800a066:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a06a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a06e:	429a      	cmp	r2, r3
 800a070:	dacd      	bge.n	800a00e <hagl_draw_line+0xc2>
            err += dx;
 800a072:	8afa      	ldrh	r2, [r7, #22]
 800a074:	8abb      	ldrh	r3, [r7, #20]
 800a076:	4413      	add	r3, r2
 800a078:	b29b      	uxth	r3, r3
 800a07a:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 800a07c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a080:	b29a      	uxth	r2, r3
 800a082:	89fb      	ldrh	r3, [r7, #14]
 800a084:	4413      	add	r3, r2
 800a086:	b29b      	uxth	r3, r3
 800a088:	b21b      	sxth	r3, r3
 800a08a:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 800a08c:	e7bf      	b.n	800a00e <hagl_draw_line+0xc2>
        return;
 800a08e:	bf00      	nop
 800a090:	e000      	b.n	800a094 <hagl_draw_line+0x148>
            break;
 800a092:	bf00      	nop
        }
    }
}
 800a094:	371c      	adds	r7, #28
 800a096:	46bd      	mov	sp, r7
 800a098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a09a:	bf00      	nop
 800a09c:	20000028 	.word	0x20000028

0800a0a0 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800a0a0:	b590      	push	{r4, r7, lr}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	4623      	mov	r3, r4
 800a0b0:	80fb      	strh	r3, [r7, #6]
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	80bb      	strh	r3, [r7, #4]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	807b      	strh	r3, [r7, #2]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800a0be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a0c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	dd0e      	ble.n	800a0e8 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 800a0ca:	88fa      	ldrh	r2, [r7, #6]
 800a0cc:	887b      	ldrh	r3, [r7, #2]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800a0d4:	88fa      	ldrh	r2, [r7, #6]
 800a0d6:	887b      	ldrh	r3, [r7, #2]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800a0de:	88fa      	ldrh	r2, [r7, #6]
 800a0e0:	887b      	ldrh	r3, [r7, #2]
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800a0e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a0ec:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	dd0e      	ble.n	800a112 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 800a0f4:	88ba      	ldrh	r2, [r7, #4]
 800a0f6:	883b      	ldrh	r3, [r7, #0]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800a0fe:	88ba      	ldrh	r2, [r7, #4]
 800a100:	883b      	ldrh	r3, [r7, #0]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	b29b      	uxth	r3, r3
 800a106:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800a108:	88ba      	ldrh	r2, [r7, #4]
 800a10a:	883b      	ldrh	r3, [r7, #0]
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	b29b      	uxth	r3, r3
 800a110:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800a112:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a116:	4a24      	ldr	r2, [pc, #144]	; (800a1a8 <hagl_draw_rectangle+0x108>)
 800a118:	8812      	ldrh	r2, [r2, #0]
 800a11a:	4293      	cmp	r3, r2
 800a11c:	db3e      	blt.n	800a19c <hagl_draw_rectangle+0xfc>
 800a11e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a122:	4a21      	ldr	r2, [pc, #132]	; (800a1a8 <hagl_draw_rectangle+0x108>)
 800a124:	8852      	ldrh	r2, [r2, #2]
 800a126:	4293      	cmp	r3, r2
 800a128:	db38      	blt.n	800a19c <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a12a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a12e:	4a1e      	ldr	r2, [pc, #120]	; (800a1a8 <hagl_draw_rectangle+0x108>)
 800a130:	8892      	ldrh	r2, [r2, #4]
 800a132:	4293      	cmp	r3, r2
 800a134:	dc34      	bgt.n	800a1a0 <hagl_draw_rectangle+0x100>
 800a136:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a13a:	4a1b      	ldr	r2, [pc, #108]	; (800a1a8 <hagl_draw_rectangle+0x108>)
 800a13c:	88d2      	ldrh	r2, [r2, #6]
 800a13e:	4293      	cmp	r3, r2
 800a140:	dc2e      	bgt.n	800a1a0 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 800a142:	887a      	ldrh	r2, [r7, #2]
 800a144:	88fb      	ldrh	r3, [r7, #6]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	b29b      	uxth	r3, r3
 800a14a:	3301      	adds	r3, #1
 800a14c:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 800a14e:	883a      	ldrh	r2, [r7, #0]
 800a150:	88bb      	ldrh	r3, [r7, #4]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	b29b      	uxth	r3, r3
 800a156:	3301      	adds	r3, #1
 800a158:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 800a15a:	8c3b      	ldrh	r3, [r7, #32]
 800a15c:	89fa      	ldrh	r2, [r7, #14]
 800a15e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a162:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a166:	f7ff feab 	bl	8009ec0 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 800a16a:	8c3b      	ldrh	r3, [r7, #32]
 800a16c:	89fa      	ldrh	r2, [r7, #14]
 800a16e:	f9b7 1000 	ldrsh.w	r1, [r7]
 800a172:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a176:	f7ff fea3 	bl	8009ec0 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 800a17a:	8c3b      	ldrh	r3, [r7, #32]
 800a17c:	89ba      	ldrh	r2, [r7, #12]
 800a17e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a182:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a186:	f7ff febe 	bl	8009f06 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 800a18a:	8c3b      	ldrh	r3, [r7, #32]
 800a18c:	89ba      	ldrh	r2, [r7, #12]
 800a18e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a192:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800a196:	f7ff feb6 	bl	8009f06 <hagl_draw_vline>
 800a19a:	e002      	b.n	800a1a2 <hagl_draw_rectangle+0x102>
        return;
 800a19c:	bf00      	nop
 800a19e:	e000      	b.n	800a1a2 <hagl_draw_rectangle+0x102>
        return;
 800a1a0:	bf00      	nop
}
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd90      	pop	{r4, r7, pc}
 800a1a8:	20000028 	.word	0x20000028

0800a1ac <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800a1ac:	b590      	push	{r4, r7, lr}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4623      	mov	r3, r4
 800a1bc:	80fb      	strh	r3, [r7, #6]
 800a1be:	4603      	mov	r3, r0
 800a1c0:	80bb      	strh	r3, [r7, #4]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	807b      	strh	r3, [r7, #2]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800a1ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a1ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	dd0e      	ble.n	800a1f4 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 800a1d6:	88fa      	ldrh	r2, [r7, #6]
 800a1d8:	887b      	ldrh	r3, [r7, #2]
 800a1da:	4413      	add	r3, r2
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800a1e0:	88fa      	ldrh	r2, [r7, #6]
 800a1e2:	887b      	ldrh	r3, [r7, #2]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800a1ea:	88fa      	ldrh	r2, [r7, #6]
 800a1ec:	887b      	ldrh	r3, [r7, #2]
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800a1f4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a1f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	dd0e      	ble.n	800a21e <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 800a200:	88ba      	ldrh	r2, [r7, #4]
 800a202:	883b      	ldrh	r3, [r7, #0]
 800a204:	4413      	add	r3, r2
 800a206:	b29b      	uxth	r3, r3
 800a208:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800a20a:	88ba      	ldrh	r2, [r7, #4]
 800a20c:	883b      	ldrh	r3, [r7, #0]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	b29b      	uxth	r3, r3
 800a212:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800a214:	88ba      	ldrh	r2, [r7, #4]
 800a216:	883b      	ldrh	r3, [r7, #0]
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800a21e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a222:	4a33      	ldr	r2, [pc, #204]	; (800a2f0 <hagl_fill_rectangle+0x144>)
 800a224:	8812      	ldrh	r2, [r2, #0]
 800a226:	4293      	cmp	r3, r2
 800a228:	db5b      	blt.n	800a2e2 <hagl_fill_rectangle+0x136>
 800a22a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a22e:	4a30      	ldr	r2, [pc, #192]	; (800a2f0 <hagl_fill_rectangle+0x144>)
 800a230:	8852      	ldrh	r2, [r2, #2]
 800a232:	4293      	cmp	r3, r2
 800a234:	db55      	blt.n	800a2e2 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a23a:	4a2d      	ldr	r2, [pc, #180]	; (800a2f0 <hagl_fill_rectangle+0x144>)
 800a23c:	8892      	ldrh	r2, [r2, #4]
 800a23e:	4293      	cmp	r3, r2
 800a240:	dc51      	bgt.n	800a2e6 <hagl_fill_rectangle+0x13a>
 800a242:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a246:	4a2a      	ldr	r2, [pc, #168]	; (800a2f0 <hagl_fill_rectangle+0x144>)
 800a248:	88d2      	ldrh	r2, [r2, #6]
 800a24a:	4293      	cmp	r3, r2
 800a24c:	dc4b      	bgt.n	800a2e6 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 800a24e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a252:	4a27      	ldr	r2, [pc, #156]	; (800a2f0 <hagl_fill_rectangle+0x144>)
 800a254:	8812      	ldrh	r2, [r2, #0]
 800a256:	4611      	mov	r1, r2
 800a258:	4618      	mov	r0, r3
 800a25a:	f7ff fdca 	bl	8009df2 <max>
 800a25e:	4603      	mov	r3, r0
 800a260:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 800a262:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a266:	4a22      	ldr	r2, [pc, #136]	; (800a2f0 <hagl_fill_rectangle+0x144>)
 800a268:	8852      	ldrh	r2, [r2, #2]
 800a26a:	4611      	mov	r1, r2
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7ff fdc0 	bl	8009df2 <max>
 800a272:	4603      	mov	r3, r0
 800a274:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800a276:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a27a:	4a1d      	ldr	r2, [pc, #116]	; (800a2f0 <hagl_fill_rectangle+0x144>)
 800a27c:	8892      	ldrh	r2, [r2, #4]
 800a27e:	4611      	mov	r1, r2
 800a280:	4618      	mov	r0, r3
 800a282:	f7ff fda4 	bl	8009dce <min>
 800a286:	4603      	mov	r3, r0
 800a288:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800a28a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a28e:	4a18      	ldr	r2, [pc, #96]	; (800a2f0 <hagl_fill_rectangle+0x144>)
 800a290:	88d2      	ldrh	r2, [r2, #6]
 800a292:	4611      	mov	r1, r2
 800a294:	4618      	mov	r0, r3
 800a296:	f7ff fd9a 	bl	8009dce <min>
 800a29a:	4603      	mov	r3, r0
 800a29c:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 800a29e:	887a      	ldrh	r2, [r7, #2]
 800a2a0:	88fb      	ldrh	r3, [r7, #6]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800a2aa:	883a      	ldrh	r2, [r7, #0]
 800a2ac:	88bb      	ldrh	r3, [r7, #4]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	81fb      	strh	r3, [r7, #14]
 800a2ba:	e00d      	b.n	800a2d8 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 800a2bc:	88ba      	ldrh	r2, [r7, #4]
 800a2be:	89fb      	ldrh	r3, [r7, #14]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	b219      	sxth	r1, r3
 800a2c6:	8c3b      	ldrh	r3, [r7, #32]
 800a2c8:	89ba      	ldrh	r2, [r7, #12]
 800a2ca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a2ce:	f7ff fdf7 	bl	8009ec0 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800a2d2:	89fb      	ldrh	r3, [r7, #14]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	81fb      	strh	r3, [r7, #14]
 800a2d8:	89fa      	ldrh	r2, [r7, #14]
 800a2da:	897b      	ldrh	r3, [r7, #10]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d3ed      	bcc.n	800a2bc <hagl_fill_rectangle+0x110>
 800a2e0:	e002      	b.n	800a2e8 <hagl_fill_rectangle+0x13c>
        return;
 800a2e2:	bf00      	nop
 800a2e4:	e000      	b.n	800a2e8 <hagl_fill_rectangle+0x13c>
        return;
 800a2e6:	bf00      	nop
#endif
    }
}
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd90      	pop	{r4, r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000028 	.word	0x20000028

0800a2f4 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 800a2f4:	b590      	push	{r4, r7, lr}
 800a2f6:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	f107 0410 	add.w	r4, r7, #16
 800a302:	3c04      	subs	r4, #4
 800a304:	6020      	str	r0, [r4, #0]
 800a306:	460c      	mov	r4, r1
 800a308:	4610      	mov	r0, r2
 800a30a:	4619      	mov	r1, r3
 800a30c:	f107 0310 	add.w	r3, r7, #16
 800a310:	3b06      	subs	r3, #6
 800a312:	4622      	mov	r2, r4
 800a314:	801a      	strh	r2, [r3, #0]
 800a316:	f107 0310 	add.w	r3, r7, #16
 800a31a:	3b08      	subs	r3, #8
 800a31c:	4602      	mov	r2, r0
 800a31e:	801a      	strh	r2, [r3, #0]
 800a320:	f107 0310 	add.w	r3, r7, #16
 800a324:	3b0a      	subs	r3, #10
 800a326:	460a      	mov	r2, r1
 800a328:	801a      	strh	r2, [r3, #0]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800a32a:	f107 0310 	add.w	r3, r7, #16
 800a32e:	3b04      	subs	r3, #4
 800a330:	f107 0010 	add.w	r0, r7, #16
 800a334:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a338:	6812      	ldr	r2, [r2, #0]
 800a33a:	6819      	ldr	r1, [r3, #0]
 800a33c:	f7ff fcb5 	bl	8009caa <fontx_glyph>
 800a340:	4603      	mov	r3, r0
 800a342:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a346:	f102 0209 	add.w	r2, r2, #9
 800a34a:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 800a34c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a350:	f103 0309 	add.w	r3, r3, #9
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <hagl_put_char+0x6a>
        return 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	e0ba      	b.n	800a4d4 <hagl_put_char+0x1e0>
    }

    bitmap.width = glyph.width,
 800a35e:	f107 0310 	add.w	r3, r7, #16
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	b29a      	uxth	r2, r3
 800a366:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a36a:	3b18      	subs	r3, #24
 800a36c:	801a      	strh	r2, [r3, #0]
    bitmap.height = glyph.height,
 800a36e:	f107 0310 	add.w	r3, r7, #16
 800a372:	785b      	ldrb	r3, [r3, #1]
 800a374:	b29a      	uxth	r2, r3
 800a376:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a37a:	3b18      	subs	r3, #24
 800a37c:	805a      	strh	r2, [r3, #2]
    bitmap.depth = DISPLAY_DEPTH,
 800a37e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a382:	3b18      	subs	r3, #24
 800a384:	2210      	movs	r2, #16
 800a386:	719a      	strb	r2, [r3, #6]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 800a388:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a38c:	3a08      	subs	r2, #8
 800a38e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a392:	3b18      	subs	r3, #24
 800a394:	4611      	mov	r1, r2
 800a396:	4618      	mov	r0, r3
 800a398:	f7ff faf1 	bl	800997e <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 800a39c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a3a0:	3b18      	subs	r3, #24
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a3a8:	f102 020c 	add.w	r2, r2, #12
 800a3ac:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a3b4:	f102 020b 	add.w	r2, r2, #11
 800a3b8:	7013      	strb	r3, [r2, #0]
 800a3ba:	e06c      	b.n	800a496 <hagl_put_char+0x1a2>
        for (uint8_t x = 0; x < glyph.width; x++) {
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a3c2:	f102 020a 	add.w	r2, r2, #10
 800a3c6:	7013      	strb	r3, [r2, #0]
 800a3c8:	e046      	b.n	800a458 <hagl_put_char+0x164>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800a3ca:	f107 0310 	add.w	r3, r7, #16
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	b25a      	sxtb	r2, r3
 800a3d4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a3d8:	f103 030a 	add.w	r3, r3, #10
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	f003 0307 	and.w	r3, r3, #7
 800a3e2:	2180      	movs	r1, #128	; 0x80
 800a3e4:	fa41 f303 	asr.w	r3, r1, r3
 800a3e8:	b25b      	sxtb	r3, r3
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	b25b      	sxtb	r3, r3
 800a3ee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a3f2:	f102 0208 	add.w	r2, r2, #8
 800a3f6:	7013      	strb	r3, [r2, #0]
            if (set) {
 800a3f8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a3fc:	f103 0308 	add.w	r3, r3, #8
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d010      	beq.n	800a428 <hagl_put_char+0x134>
                *(ptr++) = color;
 800a406:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a40a:	f103 030c 	add.w	r3, r3, #12
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	1c93      	adds	r3, r2, #2
 800a412:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800a416:	f101 010c 	add.w	r1, r1, #12
 800a41a:	600b      	str	r3, [r1, #0]
 800a41c:	f107 0310 	add.w	r3, r7, #16
 800a420:	3b0a      	subs	r3, #10
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	8013      	strh	r3, [r2, #0]
 800a426:	e00c      	b.n	800a442 <hagl_put_char+0x14e>
            } else {
                *(ptr++) = 0x0000;
 800a428:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a42c:	f103 030c 	add.w	r3, r3, #12
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	1c9a      	adds	r2, r3, #2
 800a434:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800a438:	f101 010c 	add.w	r1, r1, #12
 800a43c:	600a      	str	r2, [r1, #0]
 800a43e:	2200      	movs	r2, #0
 800a440:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 800a442:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a446:	f103 030a 	add.w	r3, r3, #10
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	3301      	adds	r3, #1
 800a44e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a452:	f102 020a 	add.w	r2, r2, #10
 800a456:	7013      	strb	r3, [r2, #0]
 800a458:	f107 0310 	add.w	r3, r7, #16
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a462:	f102 020a 	add.w	r2, r2, #10
 800a466:	7812      	ldrb	r2, [r2, #0]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d3ae      	bcc.n	800a3ca <hagl_put_char+0xd6>
            }
        }
        glyph.buffer += glyph.pitch;
 800a46c:	f107 0310 	add.w	r3, r7, #16
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f107 0210 	add.w	r2, r7, #16
 800a476:	78d2      	ldrb	r2, [r2, #3]
 800a478:	441a      	add	r2, r3
 800a47a:	f107 0310 	add.w	r3, r7, #16
 800a47e:	605a      	str	r2, [r3, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 800a480:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a484:	f103 030b 	add.w	r3, r3, #11
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	3301      	adds	r3, #1
 800a48c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a490:	f102 020b 	add.w	r2, r2, #11
 800a494:	7013      	strb	r3, [r2, #0]
 800a496:	f107 0310 	add.w	r3, r7, #16
 800a49a:	785b      	ldrb	r3, [r3, #1]
 800a49c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a4a0:	f102 020b 	add.w	r2, r2, #11
 800a4a4:	7812      	ldrb	r2, [r2, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d388      	bcc.n	800a3bc <hagl_put_char+0xc8>
    }

    hagl_blit(x0, y0, &bitmap);
 800a4aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a4ae:	3a18      	subs	r2, #24
 800a4b0:	f107 0310 	add.w	r3, r7, #16
 800a4b4:	3b08      	subs	r3, #8
 800a4b6:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a4ba:	f107 0310 	add.w	r3, r7, #16
 800a4be:	3b06      	subs	r3, #6
 800a4c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 f858 	bl	800a57a <hagl_blit>

    return bitmap.width;
 800a4ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4ce:	3b18      	subs	r3, #24
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	b2db      	uxtb	r3, r3
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd90      	pop	{r4, r7, pc}

0800a4e0 <hagl_put_text>:
 * continue from the next line.
 */

//uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
uint16_t hagl_put_text(const char *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800a4e0:	b590      	push	{r4, r7, lr}
 800a4e2:	b08b      	sub	sp, #44	; 0x2c
 800a4e4:	af02      	add	r7, sp, #8
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	4608      	mov	r0, r1
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	817b      	strh	r3, [r7, #10]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	813b      	strh	r3, [r7, #8]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	80fb      	strh	r3, [r7, #6]
    char temp;
    uint8_t status;
    uint16_t original = x0;
 800a4fa:	897b      	ldrh	r3, [r7, #10]
 800a4fc:	83fb      	strh	r3, [r7, #30]
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800a4fe:	f107 0310 	add.w	r3, r7, #16
 800a502:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a504:	4618      	mov	r0, r3
 800a506:	f7ff fbb3 	bl	8009c70 <fontx_meta>
 800a50a:	4603      	mov	r3, r0
 800a50c:	777b      	strb	r3, [r7, #29]
    if (0 != status) {
 800a50e:	7f7b      	ldrb	r3, [r7, #29]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <hagl_put_text+0x38>
        return 0;
 800a514:	2300      	movs	r3, #0
 800a516:	e02c      	b.n	800a572 <hagl_put_text+0x92>
    }

    do {
        temp = *str++;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	1c5a      	adds	r2, r3, #1
 800a51c:	60fa      	str	r2, [r7, #12]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	773b      	strb	r3, [r7, #28]
        if (13 == temp || 10 == temp) {
 800a522:	7f3b      	ldrb	r3, [r7, #28]
 800a524:	2b0d      	cmp	r3, #13
 800a526:	d002      	beq.n	800a52e <hagl_put_text+0x4e>
 800a528:	7f3b      	ldrb	r3, [r7, #28]
 800a52a:	2b0a      	cmp	r3, #10
 800a52c:	d108      	bne.n	800a540 <hagl_put_text+0x60>
            x0 = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 800a532:	7ebb      	ldrb	r3, [r7, #26]
 800a534:	b29a      	uxth	r2, r3
 800a536:	893b      	ldrh	r3, [r7, #8]
 800a538:	4413      	add	r3, r2
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	813b      	strh	r3, [r7, #8]
 800a53e:	e010      	b.n	800a562 <hagl_put_text+0x82>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 800a540:	7f38      	ldrb	r0, [r7, #28]
 800a542:	88fc      	ldrh	r4, [r7, #6]
 800a544:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800a548:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	4623      	mov	r3, r4
 800a552:	f7ff fecf 	bl	800a2f4 <hagl_put_char>
 800a556:	4603      	mov	r3, r0
 800a558:	b29a      	uxth	r2, r3
 800a55a:	897b      	ldrh	r3, [r7, #10]
 800a55c:	4413      	add	r3, r2
 800a55e:	b29b      	uxth	r3, r3
 800a560:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1d6      	bne.n	800a518 <hagl_put_text+0x38>

    return x0 - original;
 800a56a:	897a      	ldrh	r2, [r7, #10]
 800a56c:	8bfb      	ldrh	r3, [r7, #30]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	b29b      	uxth	r3, r3
}
 800a572:	4618      	mov	r0, r3
 800a574:	3724      	adds	r7, #36	; 0x24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd90      	pop	{r4, r7, pc}

0800a57a <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b086      	sub	sp, #24
 800a57e:	af00      	add	r7, sp, #0
 800a580:	4603      	mov	r3, r0
 800a582:	603a      	str	r2, [r7, #0]
 800a584:	80fb      	strh	r3, [r7, #6]
 800a586:	460b      	mov	r3, r1
 800a588:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 800a590:	2300      	movs	r3, #0
 800a592:	827b      	strh	r3, [r7, #18]
 800a594:	e020      	b.n	800a5d8 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800a596:	2300      	movs	r3, #0
 800a598:	823b      	strh	r3, [r7, #16]
 800a59a:	e015      	b.n	800a5c8 <hagl_blit+0x4e>
            color = *(ptr++);
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	1c9a      	adds	r2, r3, #2
 800a5a0:	617a      	str	r2, [r7, #20]
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800a5a6:	88fa      	ldrh	r2, [r7, #6]
 800a5a8:	8a3b      	ldrh	r3, [r7, #16]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	b218      	sxth	r0, r3
 800a5b0:	88ba      	ldrh	r2, [r7, #4]
 800a5b2:	8a7b      	ldrh	r3, [r7, #18]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	b21b      	sxth	r3, r3
 800a5ba:	89fa      	ldrh	r2, [r7, #14]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	f7ff fc4d 	bl	8009e5c <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800a5c2:	8a3b      	ldrh	r3, [r7, #16]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	823b      	strh	r3, [r7, #16]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	881b      	ldrh	r3, [r3, #0]
 800a5cc:	8a3a      	ldrh	r2, [r7, #16]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d3e4      	bcc.n	800a59c <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800a5d2:	8a7b      	ldrh	r3, [r7, #18]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	827b      	strh	r3, [r7, #18]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	885b      	ldrh	r3, [r3, #2]
 800a5dc:	8a7a      	ldrh	r2, [r7, #18]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d3d9      	bcc.n	800a596 <hagl_blit+0x1c>
        }
    }
#endif
};
 800a5e2:	bf00      	nop
 800a5e4:	bf00      	nop
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 800a5f2:	4b12      	ldr	r3, [pc, #72]	; (800a63c <hagl_clear_screen+0x50>)
 800a5f4:	881b      	ldrh	r3, [r3, #0]
 800a5f6:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 800a5f8:	4b10      	ldr	r3, [pc, #64]	; (800a63c <hagl_clear_screen+0x50>)
 800a5fa:	885b      	ldrh	r3, [r3, #2]
 800a5fc:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 800a5fe:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <hagl_clear_screen+0x50>)
 800a600:	889b      	ldrh	r3, [r3, #4]
 800a602:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 800a604:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <hagl_clear_screen+0x50>)
 800a606:	88db      	ldrh	r3, [r3, #6]
 800a608:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 800a60a:	239f      	movs	r3, #159	; 0x9f
 800a60c:	227f      	movs	r2, #127	; 0x7f
 800a60e:	2100      	movs	r1, #0
 800a610:	2000      	movs	r0, #0
 800a612:	f7ff fc01 	bl	8009e18 <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 800a616:	2300      	movs	r3, #0
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	239f      	movs	r3, #159	; 0x9f
 800a61c:	227f      	movs	r2, #127	; 0x7f
 800a61e:	2100      	movs	r1, #0
 800a620:	2000      	movs	r0, #0
 800a622:	f7ff fdc3 	bl	800a1ac <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 800a626:	883b      	ldrh	r3, [r7, #0]
 800a628:	887a      	ldrh	r2, [r7, #2]
 800a62a:	88b9      	ldrh	r1, [r7, #4]
 800a62c:	88f8      	ldrh	r0, [r7, #6]
 800a62e:	f7ff fbf3 	bl	8009e18 <hagl_set_clip_window>
#endif
}
 800a632:	bf00      	nop
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20000028 	.word	0x20000028

0800a640 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 800a640:	b590      	push	{r4, r7, lr}
 800a642:	b087      	sub	sp, #28
 800a644:	af00      	add	r7, sp, #0
 800a646:	4604      	mov	r4, r0
 800a648:	4608      	mov	r0, r1
 800a64a:	4611      	mov	r1, r2
 800a64c:	461a      	mov	r2, r3
 800a64e:	4623      	mov	r3, r4
 800a650:	80fb      	strh	r3, [r7, #6]
 800a652:	4603      	mov	r3, r0
 800a654:	80bb      	strh	r3, [r7, #4]
 800a656:	460b      	mov	r3, r1
 800a658:	807b      	strh	r3, [r7, #2]
 800a65a:	4613      	mov	r3, r2
 800a65c:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800a65e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a662:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a666:	429a      	cmp	r2, r3
 800a668:	dd0e      	ble.n	800a688 <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 800a66a:	88fa      	ldrh	r2, [r7, #6]
 800a66c:	887b      	ldrh	r3, [r7, #2]
 800a66e:	4413      	add	r3, r2
 800a670:	b29b      	uxth	r3, r3
 800a672:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800a674:	88fa      	ldrh	r2, [r7, #6]
 800a676:	887b      	ldrh	r3, [r7, #2]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800a67e:	88fa      	ldrh	r2, [r7, #6]
 800a680:	887b      	ldrh	r3, [r7, #2]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	b29b      	uxth	r3, r3
 800a686:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800a688:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a68c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a690:	429a      	cmp	r2, r3
 800a692:	dd0e      	ble.n	800a6b2 <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 800a694:	88ba      	ldrh	r2, [r7, #4]
 800a696:	883b      	ldrh	r3, [r7, #0]
 800a698:	4413      	add	r3, r2
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800a69e:	88ba      	ldrh	r2, [r7, #4]
 800a6a0:	883b      	ldrh	r3, [r7, #0]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800a6a8:	88ba      	ldrh	r2, [r7, #4]
 800a6aa:	883b      	ldrh	r3, [r7, #0]
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800a6b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6b6:	4a52      	ldr	r2, [pc, #328]	; (800a800 <hagl_draw_rounded_rectangle+0x1c0>)
 800a6b8:	8812      	ldrh	r2, [r2, #0]
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	f2c0 8153 	blt.w	800a966 <hagl_draw_rounded_rectangle+0x326>
 800a6c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a6c4:	4a4e      	ldr	r2, [pc, #312]	; (800a800 <hagl_draw_rounded_rectangle+0x1c0>)
 800a6c6:	8852      	ldrh	r2, [r2, #2]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	f2c0 814c 	blt.w	800a966 <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a6ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6d2:	4a4b      	ldr	r2, [pc, #300]	; (800a800 <hagl_draw_rounded_rectangle+0x1c0>)
 800a6d4:	8892      	ldrh	r2, [r2, #4]
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	f300 8147 	bgt.w	800a96a <hagl_draw_rounded_rectangle+0x32a>
 800a6dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a6e0:	4a47      	ldr	r2, [pc, #284]	; (800a800 <hagl_draw_rounded_rectangle+0x1c0>)
 800a6e2:	88d2      	ldrh	r2, [r2, #6]
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	f300 8140 	bgt.w	800a96a <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 800a6ea:	887a      	ldrh	r2, [r7, #2]
 800a6ec:	88fb      	ldrh	r3, [r7, #6]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 800a6f6:	883a      	ldrh	r2, [r7, #0]
 800a6f8:	88bb      	ldrh	r3, [r7, #4]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	3301      	adds	r3, #1
 800a700:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 800a702:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800a706:	8a3b      	ldrh	r3, [r7, #16]
 800a708:	085b      	lsrs	r3, r3, #1
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	461a      	mov	r2, r3
 800a70e:	89fb      	ldrh	r3, [r7, #14]
 800a710:	085b      	lsrs	r3, r3, #1
 800a712:	b29b      	uxth	r3, r3
 800a714:	4619      	mov	r1, r3
 800a716:	4610      	mov	r0, r2
 800a718:	f7ff fb59 	bl	8009dce <min>
 800a71c:	4603      	mov	r3, r0
 800a71e:	4619      	mov	r1, r3
 800a720:	4620      	mov	r0, r4
 800a722:	f7ff fb54 	bl	8009dce <min>
 800a726:	4603      	mov	r3, r0
 800a728:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 800a72a:	88fa      	ldrh	r2, [r7, #6]
 800a72c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a72e:	4413      	add	r3, r2
 800a730:	b29b      	uxth	r3, r3
 800a732:	b218      	sxth	r0, r3
 800a734:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	b29b      	uxth	r3, r3
 800a73a:	8a3a      	ldrh	r2, [r7, #16]
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	b29a      	uxth	r2, r3
 800a740:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a742:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a746:	f7ff fbbb 	bl	8009ec0 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 800a74a:	88fa      	ldrh	r2, [r7, #6]
 800a74c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a74e:	4413      	add	r3, r2
 800a750:	b29b      	uxth	r3, r3
 800a752:	b218      	sxth	r0, r3
 800a754:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	b29b      	uxth	r3, r3
 800a75a:	8a3a      	ldrh	r2, [r7, #16]
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	b29a      	uxth	r2, r3
 800a760:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a762:	f9b7 1000 	ldrsh.w	r1, [r7]
 800a766:	f7ff fbab 	bl	8009ec0 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 800a76a:	88ba      	ldrh	r2, [r7, #4]
 800a76c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a76e:	4413      	add	r3, r2
 800a770:	b29b      	uxth	r3, r3
 800a772:	b219      	sxth	r1, r3
 800a774:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a776:	005b      	lsls	r3, r3, #1
 800a778:	b29b      	uxth	r3, r3
 800a77a:	89fa      	ldrh	r2, [r7, #14]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	b29a      	uxth	r2, r3
 800a780:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a782:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a786:	f7ff fbbe 	bl	8009f06 <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 800a78a:	88ba      	ldrh	r2, [r7, #4]
 800a78c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a78e:	4413      	add	r3, r2
 800a790:	b29b      	uxth	r3, r3
 800a792:	b219      	sxth	r1, r3
 800a794:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a796:	005b      	lsls	r3, r3, #1
 800a798:	b29b      	uxth	r3, r3
 800a79a:	89fa      	ldrh	r2, [r7, #14]
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a7a2:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800a7a6:	f7ff fbae 	bl	8009f06 <hagl_draw_vline>

    x = 0;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	82fb      	strh	r3, [r7, #22]
    y = r;
 800a7ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a7b0:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 800a7b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a7b4:	005b      	lsls	r3, r3, #1
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	f1c3 0303 	rsb	r3, r3, #3
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 800a7c0:	e0c9      	b.n	800a956 <hagl_draw_rounded_rectangle+0x316>
        x++;
 800a7c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 800a7ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	dd16      	ble.n	800a804 <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 800a7d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 800a7e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a7e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	8a7b      	ldrh	r3, [r7, #18]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	330a      	adds	r3, #10
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	827b      	strh	r3, [r7, #18]
 800a7fe:	e00a      	b.n	800a816 <hagl_draw_rounded_rectangle+0x1d6>
 800a800:	20000028 	.word	0x20000028
        } else {
            d = d + 4 * x + 6;
 800a804:	8afb      	ldrh	r3, [r7, #22]
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	b29a      	uxth	r2, r3
 800a80a:	8a7b      	ldrh	r3, [r7, #18]
 800a80c:	4413      	add	r3, r2
 800a80e:	b29b      	uxth	r3, r3
 800a810:	3306      	adds	r3, #6
 800a812:	b29b      	uxth	r3, r3
 800a814:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 800a816:	887a      	ldrh	r2, [r7, #2]
 800a818:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	8afb      	ldrh	r3, [r7, #22]
 800a820:	4413      	add	r3, r2
 800a822:	b29b      	uxth	r3, r3
 800a824:	b218      	sxth	r0, r3
 800a826:	88ba      	ldrh	r2, [r7, #4]
 800a828:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a82a:	4413      	add	r3, r2
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	8abb      	ldrh	r3, [r7, #20]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	b29b      	uxth	r3, r3
 800a834:	b21b      	sxth	r3, r3
 800a836:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a838:	4619      	mov	r1, r3
 800a83a:	f7ff fb0f 	bl	8009e5c <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 800a83e:	887a      	ldrh	r2, [r7, #2]
 800a840:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	b29a      	uxth	r2, r3
 800a846:	8abb      	ldrh	r3, [r7, #20]
 800a848:	4413      	add	r3, r2
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	b218      	sxth	r0, r3
 800a84e:	88ba      	ldrh	r2, [r7, #4]
 800a850:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a852:	4413      	add	r3, r2
 800a854:	b29a      	uxth	r2, r3
 800a856:	8afb      	ldrh	r3, [r7, #22]
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	b21b      	sxth	r3, r3
 800a85e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a860:	4619      	mov	r1, r3
 800a862:	f7ff fafb 	bl	8009e5c <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 800a866:	88fa      	ldrh	r2, [r7, #6]
 800a868:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a86a:	4413      	add	r3, r2
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	8afb      	ldrh	r3, [r7, #22]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	b29b      	uxth	r3, r3
 800a874:	b218      	sxth	r0, r3
 800a876:	88ba      	ldrh	r2, [r7, #4]
 800a878:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a87a:	4413      	add	r3, r2
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	8abb      	ldrh	r3, [r7, #20]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	b29b      	uxth	r3, r3
 800a884:	b21b      	sxth	r3, r3
 800a886:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a888:	4619      	mov	r1, r3
 800a88a:	f7ff fae7 	bl	8009e5c <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 800a88e:	88fa      	ldrh	r2, [r7, #6]
 800a890:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a892:	4413      	add	r3, r2
 800a894:	b29a      	uxth	r2, r3
 800a896:	8abb      	ldrh	r3, [r7, #20]
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	b218      	sxth	r0, r3
 800a89e:	88ba      	ldrh	r2, [r7, #4]
 800a8a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a8a2:	4413      	add	r3, r2
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	8afb      	ldrh	r3, [r7, #22]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	b21b      	sxth	r3, r3
 800a8ae:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	f7ff fad3 	bl	8009e5c <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 800a8b6:	887a      	ldrh	r2, [r7, #2]
 800a8b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	8afb      	ldrh	r3, [r7, #22]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	b218      	sxth	r0, r3
 800a8c6:	883a      	ldrh	r2, [r7, #0]
 800a8c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	8abb      	ldrh	r3, [r7, #20]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	b21b      	sxth	r3, r3
 800a8d6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a8d8:	4619      	mov	r1, r3
 800a8da:	f7ff fabf 	bl	8009e5c <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 800a8de:	887a      	ldrh	r2, [r7, #2]
 800a8e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	8abb      	ldrh	r3, [r7, #20]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	b218      	sxth	r0, r3
 800a8ee:	883a      	ldrh	r2, [r7, #0]
 800a8f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	8afb      	ldrh	r3, [r7, #22]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	b21b      	sxth	r3, r3
 800a8fe:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a900:	4619      	mov	r1, r3
 800a902:	f7ff faab 	bl	8009e5c <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 800a906:	88fa      	ldrh	r2, [r7, #6]
 800a908:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a90a:	4413      	add	r3, r2
 800a90c:	b29a      	uxth	r2, r3
 800a90e:	8afb      	ldrh	r3, [r7, #22]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	b29b      	uxth	r3, r3
 800a914:	b218      	sxth	r0, r3
 800a916:	883a      	ldrh	r2, [r7, #0]
 800a918:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	8abb      	ldrh	r3, [r7, #20]
 800a920:	4413      	add	r3, r2
 800a922:	b29b      	uxth	r3, r3
 800a924:	b21b      	sxth	r3, r3
 800a926:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a928:	4619      	mov	r1, r3
 800a92a:	f7ff fa97 	bl	8009e5c <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 800a92e:	88fa      	ldrh	r2, [r7, #6]
 800a930:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a932:	4413      	add	r3, r2
 800a934:	b29a      	uxth	r2, r3
 800a936:	8abb      	ldrh	r3, [r7, #20]
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	b218      	sxth	r0, r3
 800a93e:	883a      	ldrh	r2, [r7, #0]
 800a940:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	b29a      	uxth	r2, r3
 800a946:	8afb      	ldrh	r3, [r7, #22]
 800a948:	4413      	add	r3, r2
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	b21b      	sxth	r3, r3
 800a94e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a950:	4619      	mov	r1, r3
 800a952:	f7ff fa83 	bl	8009e5c <hagl_put_pixel>
    while (y >= x) {
 800a956:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a95a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a95e:	429a      	cmp	r2, r3
 800a960:	f6bf af2f 	bge.w	800a7c2 <hagl_draw_rounded_rectangle+0x182>
 800a964:	e002      	b.n	800a96c <hagl_draw_rounded_rectangle+0x32c>
        return;
 800a966:	bf00      	nop
 800a968:	e000      	b.n	800a96c <hagl_draw_rounded_rectangle+0x32c>
        return;
 800a96a:	bf00      	nop
    }
};
 800a96c:	371c      	adds	r7, #28
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd90      	pop	{r4, r7, pc}
 800a972:	bf00      	nop

0800a974 <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	4603      	mov	r3, r0
 800a97c:	71fb      	strb	r3, [r7, #7]
 800a97e:	460b      	mov	r3, r1
 800a980:	71bb      	strb	r3, [r7, #6]
 800a982:	4613      	mov	r3, r2
 800a984:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 800a986:	79fb      	ldrb	r3, [r7, #7]
 800a988:	021b      	lsls	r3, r3, #8
 800a98a:	b21b      	sxth	r3, r3
 800a98c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a990:	f023 0307 	bic.w	r3, r3, #7
 800a994:	b21a      	sxth	r2, r3
 800a996:	79bb      	ldrb	r3, [r7, #6]
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	b21b      	sxth	r3, r3
 800a99c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800a9a0:	b21b      	sxth	r3, r3
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	b21a      	sxth	r2, r3
 800a9a6:	797b      	ldrb	r3, [r7, #5]
 800a9a8:	08db      	lsrs	r3, r3, #3
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	b21b      	sxth	r3, r3
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	b21b      	sxth	r3, r3
 800a9b2:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 800a9b4:	89fb      	ldrh	r3, [r7, #14]
 800a9b6:	021b      	lsls	r3, r3, #8
 800a9b8:	b21a      	sxth	r2, r3
 800a9ba:	89fb      	ldrh	r3, [r7, #14]
 800a9bc:	0a1b      	lsrs	r3, r3, #8
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	b21b      	sxth	r3, r3
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	b21b      	sxth	r3, r3
 800a9c6:	81fb      	strh	r3, [r7, #14]

    return rgb;
 800a9c8:	89fb      	ldrh	r3, [r7, #14]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
	...

0800a9d8 <__assert_func>:
 800a9d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9da:	4614      	mov	r4, r2
 800a9dc:	461a      	mov	r2, r3
 800a9de:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <__assert_func+0x2c>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4605      	mov	r5, r0
 800a9e4:	68d8      	ldr	r0, [r3, #12]
 800a9e6:	b14c      	cbz	r4, 800a9fc <__assert_func+0x24>
 800a9e8:	4b07      	ldr	r3, [pc, #28]	; (800aa08 <__assert_func+0x30>)
 800a9ea:	9100      	str	r1, [sp, #0]
 800a9ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9f0:	4906      	ldr	r1, [pc, #24]	; (800aa0c <__assert_func+0x34>)
 800a9f2:	462b      	mov	r3, r5
 800a9f4:	f000 f9be 	bl	800ad74 <fiprintf>
 800a9f8:	f001 f830 	bl	800ba5c <abort>
 800a9fc:	4b04      	ldr	r3, [pc, #16]	; (800aa10 <__assert_func+0x38>)
 800a9fe:	461c      	mov	r4, r3
 800aa00:	e7f3      	b.n	800a9ea <__assert_func+0x12>
 800aa02:	bf00      	nop
 800aa04:	20000030 	.word	0x20000030
 800aa08:	080159bc 	.word	0x080159bc
 800aa0c:	080159c9 	.word	0x080159c9
 800aa10:	080159f7 	.word	0x080159f7

0800aa14 <__errno>:
 800aa14:	4b01      	ldr	r3, [pc, #4]	; (800aa1c <__errno+0x8>)
 800aa16:	6818      	ldr	r0, [r3, #0]
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	20000030 	.word	0x20000030

0800aa20 <__sflush_r>:
 800aa20:	898a      	ldrh	r2, [r1, #12]
 800aa22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa26:	4605      	mov	r5, r0
 800aa28:	0710      	lsls	r0, r2, #28
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	d458      	bmi.n	800aae0 <__sflush_r+0xc0>
 800aa2e:	684b      	ldr	r3, [r1, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	dc05      	bgt.n	800aa40 <__sflush_r+0x20>
 800aa34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	dc02      	bgt.n	800aa40 <__sflush_r+0x20>
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa42:	2e00      	cmp	r6, #0
 800aa44:	d0f9      	beq.n	800aa3a <__sflush_r+0x1a>
 800aa46:	2300      	movs	r3, #0
 800aa48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa4c:	682f      	ldr	r7, [r5, #0]
 800aa4e:	602b      	str	r3, [r5, #0]
 800aa50:	d032      	beq.n	800aab8 <__sflush_r+0x98>
 800aa52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	075a      	lsls	r2, r3, #29
 800aa58:	d505      	bpl.n	800aa66 <__sflush_r+0x46>
 800aa5a:	6863      	ldr	r3, [r4, #4]
 800aa5c:	1ac0      	subs	r0, r0, r3
 800aa5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa60:	b10b      	cbz	r3, 800aa66 <__sflush_r+0x46>
 800aa62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa64:	1ac0      	subs	r0, r0, r3
 800aa66:	2300      	movs	r3, #0
 800aa68:	4602      	mov	r2, r0
 800aa6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa6c:	6a21      	ldr	r1, [r4, #32]
 800aa6e:	4628      	mov	r0, r5
 800aa70:	47b0      	blx	r6
 800aa72:	1c43      	adds	r3, r0, #1
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	d106      	bne.n	800aa86 <__sflush_r+0x66>
 800aa78:	6829      	ldr	r1, [r5, #0]
 800aa7a:	291d      	cmp	r1, #29
 800aa7c:	d82c      	bhi.n	800aad8 <__sflush_r+0xb8>
 800aa7e:	4a2a      	ldr	r2, [pc, #168]	; (800ab28 <__sflush_r+0x108>)
 800aa80:	40ca      	lsrs	r2, r1
 800aa82:	07d6      	lsls	r6, r2, #31
 800aa84:	d528      	bpl.n	800aad8 <__sflush_r+0xb8>
 800aa86:	2200      	movs	r2, #0
 800aa88:	6062      	str	r2, [r4, #4]
 800aa8a:	04d9      	lsls	r1, r3, #19
 800aa8c:	6922      	ldr	r2, [r4, #16]
 800aa8e:	6022      	str	r2, [r4, #0]
 800aa90:	d504      	bpl.n	800aa9c <__sflush_r+0x7c>
 800aa92:	1c42      	adds	r2, r0, #1
 800aa94:	d101      	bne.n	800aa9a <__sflush_r+0x7a>
 800aa96:	682b      	ldr	r3, [r5, #0]
 800aa98:	b903      	cbnz	r3, 800aa9c <__sflush_r+0x7c>
 800aa9a:	6560      	str	r0, [r4, #84]	; 0x54
 800aa9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa9e:	602f      	str	r7, [r5, #0]
 800aaa0:	2900      	cmp	r1, #0
 800aaa2:	d0ca      	beq.n	800aa3a <__sflush_r+0x1a>
 800aaa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaa8:	4299      	cmp	r1, r3
 800aaaa:	d002      	beq.n	800aab2 <__sflush_r+0x92>
 800aaac:	4628      	mov	r0, r5
 800aaae:	f000 fa35 	bl	800af1c <_free_r>
 800aab2:	2000      	movs	r0, #0
 800aab4:	6360      	str	r0, [r4, #52]	; 0x34
 800aab6:	e7c1      	b.n	800aa3c <__sflush_r+0x1c>
 800aab8:	6a21      	ldr	r1, [r4, #32]
 800aaba:	2301      	movs	r3, #1
 800aabc:	4628      	mov	r0, r5
 800aabe:	47b0      	blx	r6
 800aac0:	1c41      	adds	r1, r0, #1
 800aac2:	d1c7      	bne.n	800aa54 <__sflush_r+0x34>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0c4      	beq.n	800aa54 <__sflush_r+0x34>
 800aaca:	2b1d      	cmp	r3, #29
 800aacc:	d001      	beq.n	800aad2 <__sflush_r+0xb2>
 800aace:	2b16      	cmp	r3, #22
 800aad0:	d101      	bne.n	800aad6 <__sflush_r+0xb6>
 800aad2:	602f      	str	r7, [r5, #0]
 800aad4:	e7b1      	b.n	800aa3a <__sflush_r+0x1a>
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aadc:	81a3      	strh	r3, [r4, #12]
 800aade:	e7ad      	b.n	800aa3c <__sflush_r+0x1c>
 800aae0:	690f      	ldr	r7, [r1, #16]
 800aae2:	2f00      	cmp	r7, #0
 800aae4:	d0a9      	beq.n	800aa3a <__sflush_r+0x1a>
 800aae6:	0793      	lsls	r3, r2, #30
 800aae8:	680e      	ldr	r6, [r1, #0]
 800aaea:	bf08      	it	eq
 800aaec:	694b      	ldreq	r3, [r1, #20]
 800aaee:	600f      	str	r7, [r1, #0]
 800aaf0:	bf18      	it	ne
 800aaf2:	2300      	movne	r3, #0
 800aaf4:	eba6 0807 	sub.w	r8, r6, r7
 800aaf8:	608b      	str	r3, [r1, #8]
 800aafa:	f1b8 0f00 	cmp.w	r8, #0
 800aafe:	dd9c      	ble.n	800aa3a <__sflush_r+0x1a>
 800ab00:	6a21      	ldr	r1, [r4, #32]
 800ab02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab04:	4643      	mov	r3, r8
 800ab06:	463a      	mov	r2, r7
 800ab08:	4628      	mov	r0, r5
 800ab0a:	47b0      	blx	r6
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	dc06      	bgt.n	800ab1e <__sflush_r+0xfe>
 800ab10:	89a3      	ldrh	r3, [r4, #12]
 800ab12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab16:	81a3      	strh	r3, [r4, #12]
 800ab18:	f04f 30ff 	mov.w	r0, #4294967295
 800ab1c:	e78e      	b.n	800aa3c <__sflush_r+0x1c>
 800ab1e:	4407      	add	r7, r0
 800ab20:	eba8 0800 	sub.w	r8, r8, r0
 800ab24:	e7e9      	b.n	800aafa <__sflush_r+0xda>
 800ab26:	bf00      	nop
 800ab28:	20400001 	.word	0x20400001

0800ab2c <_fflush_r>:
 800ab2c:	b538      	push	{r3, r4, r5, lr}
 800ab2e:	690b      	ldr	r3, [r1, #16]
 800ab30:	4605      	mov	r5, r0
 800ab32:	460c      	mov	r4, r1
 800ab34:	b913      	cbnz	r3, 800ab3c <_fflush_r+0x10>
 800ab36:	2500      	movs	r5, #0
 800ab38:	4628      	mov	r0, r5
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	b118      	cbz	r0, 800ab46 <_fflush_r+0x1a>
 800ab3e:	6983      	ldr	r3, [r0, #24]
 800ab40:	b90b      	cbnz	r3, 800ab46 <_fflush_r+0x1a>
 800ab42:	f000 f899 	bl	800ac78 <__sinit>
 800ab46:	4b14      	ldr	r3, [pc, #80]	; (800ab98 <_fflush_r+0x6c>)
 800ab48:	429c      	cmp	r4, r3
 800ab4a:	d11b      	bne.n	800ab84 <_fflush_r+0x58>
 800ab4c:	686c      	ldr	r4, [r5, #4]
 800ab4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0ef      	beq.n	800ab36 <_fflush_r+0xa>
 800ab56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab58:	07d0      	lsls	r0, r2, #31
 800ab5a:	d404      	bmi.n	800ab66 <_fflush_r+0x3a>
 800ab5c:	0599      	lsls	r1, r3, #22
 800ab5e:	d402      	bmi.n	800ab66 <_fflush_r+0x3a>
 800ab60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab62:	f000 f95e 	bl	800ae22 <__retarget_lock_acquire_recursive>
 800ab66:	4628      	mov	r0, r5
 800ab68:	4621      	mov	r1, r4
 800ab6a:	f7ff ff59 	bl	800aa20 <__sflush_r>
 800ab6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab70:	07da      	lsls	r2, r3, #31
 800ab72:	4605      	mov	r5, r0
 800ab74:	d4e0      	bmi.n	800ab38 <_fflush_r+0xc>
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	059b      	lsls	r3, r3, #22
 800ab7a:	d4dd      	bmi.n	800ab38 <_fflush_r+0xc>
 800ab7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab7e:	f000 f951 	bl	800ae24 <__retarget_lock_release_recursive>
 800ab82:	e7d9      	b.n	800ab38 <_fflush_r+0xc>
 800ab84:	4b05      	ldr	r3, [pc, #20]	; (800ab9c <_fflush_r+0x70>)
 800ab86:	429c      	cmp	r4, r3
 800ab88:	d101      	bne.n	800ab8e <_fflush_r+0x62>
 800ab8a:	68ac      	ldr	r4, [r5, #8]
 800ab8c:	e7df      	b.n	800ab4e <_fflush_r+0x22>
 800ab8e:	4b04      	ldr	r3, [pc, #16]	; (800aba0 <_fflush_r+0x74>)
 800ab90:	429c      	cmp	r4, r3
 800ab92:	bf08      	it	eq
 800ab94:	68ec      	ldreq	r4, [r5, #12]
 800ab96:	e7da      	b.n	800ab4e <_fflush_r+0x22>
 800ab98:	08015a18 	.word	0x08015a18
 800ab9c:	08015a38 	.word	0x08015a38
 800aba0:	080159f8 	.word	0x080159f8

0800aba4 <fflush>:
 800aba4:	4601      	mov	r1, r0
 800aba6:	b920      	cbnz	r0, 800abb2 <fflush+0xe>
 800aba8:	4b04      	ldr	r3, [pc, #16]	; (800abbc <fflush+0x18>)
 800abaa:	4905      	ldr	r1, [pc, #20]	; (800abc0 <fflush+0x1c>)
 800abac:	6818      	ldr	r0, [r3, #0]
 800abae:	f000 b8f3 	b.w	800ad98 <_fwalk_reent>
 800abb2:	4b04      	ldr	r3, [pc, #16]	; (800abc4 <fflush+0x20>)
 800abb4:	6818      	ldr	r0, [r3, #0]
 800abb6:	f7ff bfb9 	b.w	800ab2c <_fflush_r>
 800abba:	bf00      	nop
 800abbc:	08015a58 	.word	0x08015a58
 800abc0:	0800ab2d 	.word	0x0800ab2d
 800abc4:	20000030 	.word	0x20000030

0800abc8 <std>:
 800abc8:	2300      	movs	r3, #0
 800abca:	b510      	push	{r4, lr}
 800abcc:	4604      	mov	r4, r0
 800abce:	e9c0 3300 	strd	r3, r3, [r0]
 800abd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abd6:	6083      	str	r3, [r0, #8]
 800abd8:	8181      	strh	r1, [r0, #12]
 800abda:	6643      	str	r3, [r0, #100]	; 0x64
 800abdc:	81c2      	strh	r2, [r0, #14]
 800abde:	6183      	str	r3, [r0, #24]
 800abe0:	4619      	mov	r1, r3
 800abe2:	2208      	movs	r2, #8
 800abe4:	305c      	adds	r0, #92	; 0x5c
 800abe6:	f000 f991 	bl	800af0c <memset>
 800abea:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <std+0x38>)
 800abec:	6263      	str	r3, [r4, #36]	; 0x24
 800abee:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <std+0x3c>)
 800abf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800abf2:	4b05      	ldr	r3, [pc, #20]	; (800ac08 <std+0x40>)
 800abf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abf6:	4b05      	ldr	r3, [pc, #20]	; (800ac0c <std+0x44>)
 800abf8:	6224      	str	r4, [r4, #32]
 800abfa:	6323      	str	r3, [r4, #48]	; 0x30
 800abfc:	bd10      	pop	{r4, pc}
 800abfe:	bf00      	nop
 800ac00:	0800b831 	.word	0x0800b831
 800ac04:	0800b853 	.word	0x0800b853
 800ac08:	0800b88b 	.word	0x0800b88b
 800ac0c:	0800b8af 	.word	0x0800b8af

0800ac10 <_cleanup_r>:
 800ac10:	4901      	ldr	r1, [pc, #4]	; (800ac18 <_cleanup_r+0x8>)
 800ac12:	f000 b8c1 	b.w	800ad98 <_fwalk_reent>
 800ac16:	bf00      	nop
 800ac18:	0800ab2d 	.word	0x0800ab2d

0800ac1c <__sfmoreglue>:
 800ac1c:	b570      	push	{r4, r5, r6, lr}
 800ac1e:	1e4a      	subs	r2, r1, #1
 800ac20:	2568      	movs	r5, #104	; 0x68
 800ac22:	4355      	muls	r5, r2
 800ac24:	460e      	mov	r6, r1
 800ac26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac2a:	f000 f9c7 	bl	800afbc <_malloc_r>
 800ac2e:	4604      	mov	r4, r0
 800ac30:	b140      	cbz	r0, 800ac44 <__sfmoreglue+0x28>
 800ac32:	2100      	movs	r1, #0
 800ac34:	e9c0 1600 	strd	r1, r6, [r0]
 800ac38:	300c      	adds	r0, #12
 800ac3a:	60a0      	str	r0, [r4, #8]
 800ac3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac40:	f000 f964 	bl	800af0c <memset>
 800ac44:	4620      	mov	r0, r4
 800ac46:	bd70      	pop	{r4, r5, r6, pc}

0800ac48 <__sfp_lock_acquire>:
 800ac48:	4801      	ldr	r0, [pc, #4]	; (800ac50 <__sfp_lock_acquire+0x8>)
 800ac4a:	f000 b8ea 	b.w	800ae22 <__retarget_lock_acquire_recursive>
 800ac4e:	bf00      	nop
 800ac50:	2000adb4 	.word	0x2000adb4

0800ac54 <__sfp_lock_release>:
 800ac54:	4801      	ldr	r0, [pc, #4]	; (800ac5c <__sfp_lock_release+0x8>)
 800ac56:	f000 b8e5 	b.w	800ae24 <__retarget_lock_release_recursive>
 800ac5a:	bf00      	nop
 800ac5c:	2000adb4 	.word	0x2000adb4

0800ac60 <__sinit_lock_acquire>:
 800ac60:	4801      	ldr	r0, [pc, #4]	; (800ac68 <__sinit_lock_acquire+0x8>)
 800ac62:	f000 b8de 	b.w	800ae22 <__retarget_lock_acquire_recursive>
 800ac66:	bf00      	nop
 800ac68:	2000adaf 	.word	0x2000adaf

0800ac6c <__sinit_lock_release>:
 800ac6c:	4801      	ldr	r0, [pc, #4]	; (800ac74 <__sinit_lock_release+0x8>)
 800ac6e:	f000 b8d9 	b.w	800ae24 <__retarget_lock_release_recursive>
 800ac72:	bf00      	nop
 800ac74:	2000adaf 	.word	0x2000adaf

0800ac78 <__sinit>:
 800ac78:	b510      	push	{r4, lr}
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	f7ff fff0 	bl	800ac60 <__sinit_lock_acquire>
 800ac80:	69a3      	ldr	r3, [r4, #24]
 800ac82:	b11b      	cbz	r3, 800ac8c <__sinit+0x14>
 800ac84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac88:	f7ff bff0 	b.w	800ac6c <__sinit_lock_release>
 800ac8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac90:	6523      	str	r3, [r4, #80]	; 0x50
 800ac92:	4b13      	ldr	r3, [pc, #76]	; (800ace0 <__sinit+0x68>)
 800ac94:	4a13      	ldr	r2, [pc, #76]	; (800ace4 <__sinit+0x6c>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	bf04      	itt	eq
 800ac9e:	2301      	moveq	r3, #1
 800aca0:	61a3      	streq	r3, [r4, #24]
 800aca2:	4620      	mov	r0, r4
 800aca4:	f000 f820 	bl	800ace8 <__sfp>
 800aca8:	6060      	str	r0, [r4, #4]
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 f81c 	bl	800ace8 <__sfp>
 800acb0:	60a0      	str	r0, [r4, #8]
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 f818 	bl	800ace8 <__sfp>
 800acb8:	2200      	movs	r2, #0
 800acba:	60e0      	str	r0, [r4, #12]
 800acbc:	2104      	movs	r1, #4
 800acbe:	6860      	ldr	r0, [r4, #4]
 800acc0:	f7ff ff82 	bl	800abc8 <std>
 800acc4:	68a0      	ldr	r0, [r4, #8]
 800acc6:	2201      	movs	r2, #1
 800acc8:	2109      	movs	r1, #9
 800acca:	f7ff ff7d 	bl	800abc8 <std>
 800acce:	68e0      	ldr	r0, [r4, #12]
 800acd0:	2202      	movs	r2, #2
 800acd2:	2112      	movs	r1, #18
 800acd4:	f7ff ff78 	bl	800abc8 <std>
 800acd8:	2301      	movs	r3, #1
 800acda:	61a3      	str	r3, [r4, #24]
 800acdc:	e7d2      	b.n	800ac84 <__sinit+0xc>
 800acde:	bf00      	nop
 800ace0:	08015a58 	.word	0x08015a58
 800ace4:	0800ac11 	.word	0x0800ac11

0800ace8 <__sfp>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	4607      	mov	r7, r0
 800acec:	f7ff ffac 	bl	800ac48 <__sfp_lock_acquire>
 800acf0:	4b1e      	ldr	r3, [pc, #120]	; (800ad6c <__sfp+0x84>)
 800acf2:	681e      	ldr	r6, [r3, #0]
 800acf4:	69b3      	ldr	r3, [r6, #24]
 800acf6:	b913      	cbnz	r3, 800acfe <__sfp+0x16>
 800acf8:	4630      	mov	r0, r6
 800acfa:	f7ff ffbd 	bl	800ac78 <__sinit>
 800acfe:	3648      	adds	r6, #72	; 0x48
 800ad00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad04:	3b01      	subs	r3, #1
 800ad06:	d503      	bpl.n	800ad10 <__sfp+0x28>
 800ad08:	6833      	ldr	r3, [r6, #0]
 800ad0a:	b30b      	cbz	r3, 800ad50 <__sfp+0x68>
 800ad0c:	6836      	ldr	r6, [r6, #0]
 800ad0e:	e7f7      	b.n	800ad00 <__sfp+0x18>
 800ad10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad14:	b9d5      	cbnz	r5, 800ad4c <__sfp+0x64>
 800ad16:	4b16      	ldr	r3, [pc, #88]	; (800ad70 <__sfp+0x88>)
 800ad18:	60e3      	str	r3, [r4, #12]
 800ad1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad1e:	6665      	str	r5, [r4, #100]	; 0x64
 800ad20:	f000 f87e 	bl	800ae20 <__retarget_lock_init_recursive>
 800ad24:	f7ff ff96 	bl	800ac54 <__sfp_lock_release>
 800ad28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad30:	6025      	str	r5, [r4, #0]
 800ad32:	61a5      	str	r5, [r4, #24]
 800ad34:	2208      	movs	r2, #8
 800ad36:	4629      	mov	r1, r5
 800ad38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad3c:	f000 f8e6 	bl	800af0c <memset>
 800ad40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad48:	4620      	mov	r0, r4
 800ad4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad4c:	3468      	adds	r4, #104	; 0x68
 800ad4e:	e7d9      	b.n	800ad04 <__sfp+0x1c>
 800ad50:	2104      	movs	r1, #4
 800ad52:	4638      	mov	r0, r7
 800ad54:	f7ff ff62 	bl	800ac1c <__sfmoreglue>
 800ad58:	4604      	mov	r4, r0
 800ad5a:	6030      	str	r0, [r6, #0]
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d1d5      	bne.n	800ad0c <__sfp+0x24>
 800ad60:	f7ff ff78 	bl	800ac54 <__sfp_lock_release>
 800ad64:	230c      	movs	r3, #12
 800ad66:	603b      	str	r3, [r7, #0]
 800ad68:	e7ee      	b.n	800ad48 <__sfp+0x60>
 800ad6a:	bf00      	nop
 800ad6c:	08015a58 	.word	0x08015a58
 800ad70:	ffff0001 	.word	0xffff0001

0800ad74 <fiprintf>:
 800ad74:	b40e      	push	{r1, r2, r3}
 800ad76:	b503      	push	{r0, r1, lr}
 800ad78:	4601      	mov	r1, r0
 800ad7a:	ab03      	add	r3, sp, #12
 800ad7c:	4805      	ldr	r0, [pc, #20]	; (800ad94 <fiprintf+0x20>)
 800ad7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad82:	6800      	ldr	r0, [r0, #0]
 800ad84:	9301      	str	r3, [sp, #4]
 800ad86:	f000 f99d 	bl	800b0c4 <_vfiprintf_r>
 800ad8a:	b002      	add	sp, #8
 800ad8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad90:	b003      	add	sp, #12
 800ad92:	4770      	bx	lr
 800ad94:	20000030 	.word	0x20000030

0800ad98 <_fwalk_reent>:
 800ad98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	4688      	mov	r8, r1
 800ada0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ada4:	2700      	movs	r7, #0
 800ada6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adaa:	f1b9 0901 	subs.w	r9, r9, #1
 800adae:	d505      	bpl.n	800adbc <_fwalk_reent+0x24>
 800adb0:	6824      	ldr	r4, [r4, #0]
 800adb2:	2c00      	cmp	r4, #0
 800adb4:	d1f7      	bne.n	800ada6 <_fwalk_reent+0xe>
 800adb6:	4638      	mov	r0, r7
 800adb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adbc:	89ab      	ldrh	r3, [r5, #12]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d907      	bls.n	800add2 <_fwalk_reent+0x3a>
 800adc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adc6:	3301      	adds	r3, #1
 800adc8:	d003      	beq.n	800add2 <_fwalk_reent+0x3a>
 800adca:	4629      	mov	r1, r5
 800adcc:	4630      	mov	r0, r6
 800adce:	47c0      	blx	r8
 800add0:	4307      	orrs	r7, r0
 800add2:	3568      	adds	r5, #104	; 0x68
 800add4:	e7e9      	b.n	800adaa <_fwalk_reent+0x12>
	...

0800add8 <__libc_init_array>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	4d0d      	ldr	r5, [pc, #52]	; (800ae10 <__libc_init_array+0x38>)
 800addc:	4c0d      	ldr	r4, [pc, #52]	; (800ae14 <__libc_init_array+0x3c>)
 800adde:	1b64      	subs	r4, r4, r5
 800ade0:	10a4      	asrs	r4, r4, #2
 800ade2:	2600      	movs	r6, #0
 800ade4:	42a6      	cmp	r6, r4
 800ade6:	d109      	bne.n	800adfc <__libc_init_array+0x24>
 800ade8:	4d0b      	ldr	r5, [pc, #44]	; (800ae18 <__libc_init_array+0x40>)
 800adea:	4c0c      	ldr	r4, [pc, #48]	; (800ae1c <__libc_init_array+0x44>)
 800adec:	f001 f888 	bl	800bf00 <_init>
 800adf0:	1b64      	subs	r4, r4, r5
 800adf2:	10a4      	asrs	r4, r4, #2
 800adf4:	2600      	movs	r6, #0
 800adf6:	42a6      	cmp	r6, r4
 800adf8:	d105      	bne.n	800ae06 <__libc_init_array+0x2e>
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
 800adfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae00:	4798      	blx	r3
 800ae02:	3601      	adds	r6, #1
 800ae04:	e7ee      	b.n	800ade4 <__libc_init_array+0xc>
 800ae06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae0a:	4798      	blx	r3
 800ae0c:	3601      	adds	r6, #1
 800ae0e:	e7f2      	b.n	800adf6 <__libc_init_array+0x1e>
 800ae10:	08015a98 	.word	0x08015a98
 800ae14:	08015a98 	.word	0x08015a98
 800ae18:	08015a98 	.word	0x08015a98
 800ae1c:	08015a9c 	.word	0x08015a9c

0800ae20 <__retarget_lock_init_recursive>:
 800ae20:	4770      	bx	lr

0800ae22 <__retarget_lock_acquire_recursive>:
 800ae22:	4770      	bx	lr

0800ae24 <__retarget_lock_release_recursive>:
 800ae24:	4770      	bx	lr

0800ae26 <__swhatbuf_r>:
 800ae26:	b570      	push	{r4, r5, r6, lr}
 800ae28:	460e      	mov	r6, r1
 800ae2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2e:	2900      	cmp	r1, #0
 800ae30:	b096      	sub	sp, #88	; 0x58
 800ae32:	4614      	mov	r4, r2
 800ae34:	461d      	mov	r5, r3
 800ae36:	da07      	bge.n	800ae48 <__swhatbuf_r+0x22>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	602b      	str	r3, [r5, #0]
 800ae3c:	89b3      	ldrh	r3, [r6, #12]
 800ae3e:	061a      	lsls	r2, r3, #24
 800ae40:	d410      	bmi.n	800ae64 <__swhatbuf_r+0x3e>
 800ae42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae46:	e00e      	b.n	800ae66 <__swhatbuf_r+0x40>
 800ae48:	466a      	mov	r2, sp
 800ae4a:	f000 fe1f 	bl	800ba8c <_fstat_r>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	dbf2      	blt.n	800ae38 <__swhatbuf_r+0x12>
 800ae52:	9a01      	ldr	r2, [sp, #4]
 800ae54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae5c:	425a      	negs	r2, r3
 800ae5e:	415a      	adcs	r2, r3
 800ae60:	602a      	str	r2, [r5, #0]
 800ae62:	e7ee      	b.n	800ae42 <__swhatbuf_r+0x1c>
 800ae64:	2340      	movs	r3, #64	; 0x40
 800ae66:	2000      	movs	r0, #0
 800ae68:	6023      	str	r3, [r4, #0]
 800ae6a:	b016      	add	sp, #88	; 0x58
 800ae6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae70 <__smakebuf_r>:
 800ae70:	898b      	ldrh	r3, [r1, #12]
 800ae72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae74:	079d      	lsls	r5, r3, #30
 800ae76:	4606      	mov	r6, r0
 800ae78:	460c      	mov	r4, r1
 800ae7a:	d507      	bpl.n	800ae8c <__smakebuf_r+0x1c>
 800ae7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	6123      	str	r3, [r4, #16]
 800ae84:	2301      	movs	r3, #1
 800ae86:	6163      	str	r3, [r4, #20]
 800ae88:	b002      	add	sp, #8
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}
 800ae8c:	ab01      	add	r3, sp, #4
 800ae8e:	466a      	mov	r2, sp
 800ae90:	f7ff ffc9 	bl	800ae26 <__swhatbuf_r>
 800ae94:	9900      	ldr	r1, [sp, #0]
 800ae96:	4605      	mov	r5, r0
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f000 f88f 	bl	800afbc <_malloc_r>
 800ae9e:	b948      	cbnz	r0, 800aeb4 <__smakebuf_r+0x44>
 800aea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea4:	059a      	lsls	r2, r3, #22
 800aea6:	d4ef      	bmi.n	800ae88 <__smakebuf_r+0x18>
 800aea8:	f023 0303 	bic.w	r3, r3, #3
 800aeac:	f043 0302 	orr.w	r3, r3, #2
 800aeb0:	81a3      	strh	r3, [r4, #12]
 800aeb2:	e7e3      	b.n	800ae7c <__smakebuf_r+0xc>
 800aeb4:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <__smakebuf_r+0x7c>)
 800aeb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	6020      	str	r0, [r4, #0]
 800aebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec0:	81a3      	strh	r3, [r4, #12]
 800aec2:	9b00      	ldr	r3, [sp, #0]
 800aec4:	6163      	str	r3, [r4, #20]
 800aec6:	9b01      	ldr	r3, [sp, #4]
 800aec8:	6120      	str	r0, [r4, #16]
 800aeca:	b15b      	cbz	r3, 800aee4 <__smakebuf_r+0x74>
 800aecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aed0:	4630      	mov	r0, r6
 800aed2:	f000 fded 	bl	800bab0 <_isatty_r>
 800aed6:	b128      	cbz	r0, 800aee4 <__smakebuf_r+0x74>
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	f023 0303 	bic.w	r3, r3, #3
 800aede:	f043 0301 	orr.w	r3, r3, #1
 800aee2:	81a3      	strh	r3, [r4, #12]
 800aee4:	89a0      	ldrh	r0, [r4, #12]
 800aee6:	4305      	orrs	r5, r0
 800aee8:	81a5      	strh	r5, [r4, #12]
 800aeea:	e7cd      	b.n	800ae88 <__smakebuf_r+0x18>
 800aeec:	0800ac11 	.word	0x0800ac11

0800aef0 <memcpy>:
 800aef0:	440a      	add	r2, r1
 800aef2:	4291      	cmp	r1, r2
 800aef4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aef8:	d100      	bne.n	800aefc <memcpy+0xc>
 800aefa:	4770      	bx	lr
 800aefc:	b510      	push	{r4, lr}
 800aefe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af06:	4291      	cmp	r1, r2
 800af08:	d1f9      	bne.n	800aefe <memcpy+0xe>
 800af0a:	bd10      	pop	{r4, pc}

0800af0c <memset>:
 800af0c:	4402      	add	r2, r0
 800af0e:	4603      	mov	r3, r0
 800af10:	4293      	cmp	r3, r2
 800af12:	d100      	bne.n	800af16 <memset+0xa>
 800af14:	4770      	bx	lr
 800af16:	f803 1b01 	strb.w	r1, [r3], #1
 800af1a:	e7f9      	b.n	800af10 <memset+0x4>

0800af1c <_free_r>:
 800af1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af1e:	2900      	cmp	r1, #0
 800af20:	d048      	beq.n	800afb4 <_free_r+0x98>
 800af22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af26:	9001      	str	r0, [sp, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f1a1 0404 	sub.w	r4, r1, #4
 800af2e:	bfb8      	it	lt
 800af30:	18e4      	addlt	r4, r4, r3
 800af32:	f000 fdf9 	bl	800bb28 <__malloc_lock>
 800af36:	4a20      	ldr	r2, [pc, #128]	; (800afb8 <_free_r+0x9c>)
 800af38:	9801      	ldr	r0, [sp, #4]
 800af3a:	6813      	ldr	r3, [r2, #0]
 800af3c:	4615      	mov	r5, r2
 800af3e:	b933      	cbnz	r3, 800af4e <_free_r+0x32>
 800af40:	6063      	str	r3, [r4, #4]
 800af42:	6014      	str	r4, [r2, #0]
 800af44:	b003      	add	sp, #12
 800af46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af4a:	f000 bdf3 	b.w	800bb34 <__malloc_unlock>
 800af4e:	42a3      	cmp	r3, r4
 800af50:	d90b      	bls.n	800af6a <_free_r+0x4e>
 800af52:	6821      	ldr	r1, [r4, #0]
 800af54:	1862      	adds	r2, r4, r1
 800af56:	4293      	cmp	r3, r2
 800af58:	bf04      	itt	eq
 800af5a:	681a      	ldreq	r2, [r3, #0]
 800af5c:	685b      	ldreq	r3, [r3, #4]
 800af5e:	6063      	str	r3, [r4, #4]
 800af60:	bf04      	itt	eq
 800af62:	1852      	addeq	r2, r2, r1
 800af64:	6022      	streq	r2, [r4, #0]
 800af66:	602c      	str	r4, [r5, #0]
 800af68:	e7ec      	b.n	800af44 <_free_r+0x28>
 800af6a:	461a      	mov	r2, r3
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	b10b      	cbz	r3, 800af74 <_free_r+0x58>
 800af70:	42a3      	cmp	r3, r4
 800af72:	d9fa      	bls.n	800af6a <_free_r+0x4e>
 800af74:	6811      	ldr	r1, [r2, #0]
 800af76:	1855      	adds	r5, r2, r1
 800af78:	42a5      	cmp	r5, r4
 800af7a:	d10b      	bne.n	800af94 <_free_r+0x78>
 800af7c:	6824      	ldr	r4, [r4, #0]
 800af7e:	4421      	add	r1, r4
 800af80:	1854      	adds	r4, r2, r1
 800af82:	42a3      	cmp	r3, r4
 800af84:	6011      	str	r1, [r2, #0]
 800af86:	d1dd      	bne.n	800af44 <_free_r+0x28>
 800af88:	681c      	ldr	r4, [r3, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	6053      	str	r3, [r2, #4]
 800af8e:	4421      	add	r1, r4
 800af90:	6011      	str	r1, [r2, #0]
 800af92:	e7d7      	b.n	800af44 <_free_r+0x28>
 800af94:	d902      	bls.n	800af9c <_free_r+0x80>
 800af96:	230c      	movs	r3, #12
 800af98:	6003      	str	r3, [r0, #0]
 800af9a:	e7d3      	b.n	800af44 <_free_r+0x28>
 800af9c:	6825      	ldr	r5, [r4, #0]
 800af9e:	1961      	adds	r1, r4, r5
 800afa0:	428b      	cmp	r3, r1
 800afa2:	bf04      	itt	eq
 800afa4:	6819      	ldreq	r1, [r3, #0]
 800afa6:	685b      	ldreq	r3, [r3, #4]
 800afa8:	6063      	str	r3, [r4, #4]
 800afaa:	bf04      	itt	eq
 800afac:	1949      	addeq	r1, r1, r5
 800afae:	6021      	streq	r1, [r4, #0]
 800afb0:	6054      	str	r4, [r2, #4]
 800afb2:	e7c7      	b.n	800af44 <_free_r+0x28>
 800afb4:	b003      	add	sp, #12
 800afb6:	bd30      	pop	{r4, r5, pc}
 800afb8:	2000a104 	.word	0x2000a104

0800afbc <_malloc_r>:
 800afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afbe:	1ccd      	adds	r5, r1, #3
 800afc0:	f025 0503 	bic.w	r5, r5, #3
 800afc4:	3508      	adds	r5, #8
 800afc6:	2d0c      	cmp	r5, #12
 800afc8:	bf38      	it	cc
 800afca:	250c      	movcc	r5, #12
 800afcc:	2d00      	cmp	r5, #0
 800afce:	4606      	mov	r6, r0
 800afd0:	db01      	blt.n	800afd6 <_malloc_r+0x1a>
 800afd2:	42a9      	cmp	r1, r5
 800afd4:	d903      	bls.n	800afde <_malloc_r+0x22>
 800afd6:	230c      	movs	r3, #12
 800afd8:	6033      	str	r3, [r6, #0]
 800afda:	2000      	movs	r0, #0
 800afdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afde:	f000 fda3 	bl	800bb28 <__malloc_lock>
 800afe2:	4921      	ldr	r1, [pc, #132]	; (800b068 <_malloc_r+0xac>)
 800afe4:	680a      	ldr	r2, [r1, #0]
 800afe6:	4614      	mov	r4, r2
 800afe8:	b99c      	cbnz	r4, 800b012 <_malloc_r+0x56>
 800afea:	4f20      	ldr	r7, [pc, #128]	; (800b06c <_malloc_r+0xb0>)
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	b923      	cbnz	r3, 800affa <_malloc_r+0x3e>
 800aff0:	4621      	mov	r1, r4
 800aff2:	4630      	mov	r0, r6
 800aff4:	f000 fbb8 	bl	800b768 <_sbrk_r>
 800aff8:	6038      	str	r0, [r7, #0]
 800affa:	4629      	mov	r1, r5
 800affc:	4630      	mov	r0, r6
 800affe:	f000 fbb3 	bl	800b768 <_sbrk_r>
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	d123      	bne.n	800b04e <_malloc_r+0x92>
 800b006:	230c      	movs	r3, #12
 800b008:	6033      	str	r3, [r6, #0]
 800b00a:	4630      	mov	r0, r6
 800b00c:	f000 fd92 	bl	800bb34 <__malloc_unlock>
 800b010:	e7e3      	b.n	800afda <_malloc_r+0x1e>
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	1b5b      	subs	r3, r3, r5
 800b016:	d417      	bmi.n	800b048 <_malloc_r+0x8c>
 800b018:	2b0b      	cmp	r3, #11
 800b01a:	d903      	bls.n	800b024 <_malloc_r+0x68>
 800b01c:	6023      	str	r3, [r4, #0]
 800b01e:	441c      	add	r4, r3
 800b020:	6025      	str	r5, [r4, #0]
 800b022:	e004      	b.n	800b02e <_malloc_r+0x72>
 800b024:	6863      	ldr	r3, [r4, #4]
 800b026:	42a2      	cmp	r2, r4
 800b028:	bf0c      	ite	eq
 800b02a:	600b      	streq	r3, [r1, #0]
 800b02c:	6053      	strne	r3, [r2, #4]
 800b02e:	4630      	mov	r0, r6
 800b030:	f000 fd80 	bl	800bb34 <__malloc_unlock>
 800b034:	f104 000b 	add.w	r0, r4, #11
 800b038:	1d23      	adds	r3, r4, #4
 800b03a:	f020 0007 	bic.w	r0, r0, #7
 800b03e:	1ac2      	subs	r2, r0, r3
 800b040:	d0cc      	beq.n	800afdc <_malloc_r+0x20>
 800b042:	1a1b      	subs	r3, r3, r0
 800b044:	50a3      	str	r3, [r4, r2]
 800b046:	e7c9      	b.n	800afdc <_malloc_r+0x20>
 800b048:	4622      	mov	r2, r4
 800b04a:	6864      	ldr	r4, [r4, #4]
 800b04c:	e7cc      	b.n	800afe8 <_malloc_r+0x2c>
 800b04e:	1cc4      	adds	r4, r0, #3
 800b050:	f024 0403 	bic.w	r4, r4, #3
 800b054:	42a0      	cmp	r0, r4
 800b056:	d0e3      	beq.n	800b020 <_malloc_r+0x64>
 800b058:	1a21      	subs	r1, r4, r0
 800b05a:	4630      	mov	r0, r6
 800b05c:	f000 fb84 	bl	800b768 <_sbrk_r>
 800b060:	3001      	adds	r0, #1
 800b062:	d1dd      	bne.n	800b020 <_malloc_r+0x64>
 800b064:	e7cf      	b.n	800b006 <_malloc_r+0x4a>
 800b066:	bf00      	nop
 800b068:	2000a104 	.word	0x2000a104
 800b06c:	2000a108 	.word	0x2000a108

0800b070 <__sfputc_r>:
 800b070:	6893      	ldr	r3, [r2, #8]
 800b072:	3b01      	subs	r3, #1
 800b074:	2b00      	cmp	r3, #0
 800b076:	b410      	push	{r4}
 800b078:	6093      	str	r3, [r2, #8]
 800b07a:	da08      	bge.n	800b08e <__sfputc_r+0x1e>
 800b07c:	6994      	ldr	r4, [r2, #24]
 800b07e:	42a3      	cmp	r3, r4
 800b080:	db01      	blt.n	800b086 <__sfputc_r+0x16>
 800b082:	290a      	cmp	r1, #10
 800b084:	d103      	bne.n	800b08e <__sfputc_r+0x1e>
 800b086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b08a:	f000 bc15 	b.w	800b8b8 <__swbuf_r>
 800b08e:	6813      	ldr	r3, [r2, #0]
 800b090:	1c58      	adds	r0, r3, #1
 800b092:	6010      	str	r0, [r2, #0]
 800b094:	7019      	strb	r1, [r3, #0]
 800b096:	4608      	mov	r0, r1
 800b098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b09c:	4770      	bx	lr

0800b09e <__sfputs_r>:
 800b09e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a0:	4606      	mov	r6, r0
 800b0a2:	460f      	mov	r7, r1
 800b0a4:	4614      	mov	r4, r2
 800b0a6:	18d5      	adds	r5, r2, r3
 800b0a8:	42ac      	cmp	r4, r5
 800b0aa:	d101      	bne.n	800b0b0 <__sfputs_r+0x12>
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	e007      	b.n	800b0c0 <__sfputs_r+0x22>
 800b0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b4:	463a      	mov	r2, r7
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	f7ff ffda 	bl	800b070 <__sfputc_r>
 800b0bc:	1c43      	adds	r3, r0, #1
 800b0be:	d1f3      	bne.n	800b0a8 <__sfputs_r+0xa>
 800b0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0c4 <_vfiprintf_r>:
 800b0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c8:	460d      	mov	r5, r1
 800b0ca:	b09d      	sub	sp, #116	; 0x74
 800b0cc:	4614      	mov	r4, r2
 800b0ce:	4698      	mov	r8, r3
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	b118      	cbz	r0, 800b0dc <_vfiprintf_r+0x18>
 800b0d4:	6983      	ldr	r3, [r0, #24]
 800b0d6:	b90b      	cbnz	r3, 800b0dc <_vfiprintf_r+0x18>
 800b0d8:	f7ff fdce 	bl	800ac78 <__sinit>
 800b0dc:	4b89      	ldr	r3, [pc, #548]	; (800b304 <_vfiprintf_r+0x240>)
 800b0de:	429d      	cmp	r5, r3
 800b0e0:	d11b      	bne.n	800b11a <_vfiprintf_r+0x56>
 800b0e2:	6875      	ldr	r5, [r6, #4]
 800b0e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0e6:	07d9      	lsls	r1, r3, #31
 800b0e8:	d405      	bmi.n	800b0f6 <_vfiprintf_r+0x32>
 800b0ea:	89ab      	ldrh	r3, [r5, #12]
 800b0ec:	059a      	lsls	r2, r3, #22
 800b0ee:	d402      	bmi.n	800b0f6 <_vfiprintf_r+0x32>
 800b0f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0f2:	f7ff fe96 	bl	800ae22 <__retarget_lock_acquire_recursive>
 800b0f6:	89ab      	ldrh	r3, [r5, #12]
 800b0f8:	071b      	lsls	r3, r3, #28
 800b0fa:	d501      	bpl.n	800b100 <_vfiprintf_r+0x3c>
 800b0fc:	692b      	ldr	r3, [r5, #16]
 800b0fe:	b9eb      	cbnz	r3, 800b13c <_vfiprintf_r+0x78>
 800b100:	4629      	mov	r1, r5
 800b102:	4630      	mov	r0, r6
 800b104:	f000 fc3c 	bl	800b980 <__swsetup_r>
 800b108:	b1c0      	cbz	r0, 800b13c <_vfiprintf_r+0x78>
 800b10a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b10c:	07dc      	lsls	r4, r3, #31
 800b10e:	d50e      	bpl.n	800b12e <_vfiprintf_r+0x6a>
 800b110:	f04f 30ff 	mov.w	r0, #4294967295
 800b114:	b01d      	add	sp, #116	; 0x74
 800b116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11a:	4b7b      	ldr	r3, [pc, #492]	; (800b308 <_vfiprintf_r+0x244>)
 800b11c:	429d      	cmp	r5, r3
 800b11e:	d101      	bne.n	800b124 <_vfiprintf_r+0x60>
 800b120:	68b5      	ldr	r5, [r6, #8]
 800b122:	e7df      	b.n	800b0e4 <_vfiprintf_r+0x20>
 800b124:	4b79      	ldr	r3, [pc, #484]	; (800b30c <_vfiprintf_r+0x248>)
 800b126:	429d      	cmp	r5, r3
 800b128:	bf08      	it	eq
 800b12a:	68f5      	ldreq	r5, [r6, #12]
 800b12c:	e7da      	b.n	800b0e4 <_vfiprintf_r+0x20>
 800b12e:	89ab      	ldrh	r3, [r5, #12]
 800b130:	0598      	lsls	r0, r3, #22
 800b132:	d4ed      	bmi.n	800b110 <_vfiprintf_r+0x4c>
 800b134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b136:	f7ff fe75 	bl	800ae24 <__retarget_lock_release_recursive>
 800b13a:	e7e9      	b.n	800b110 <_vfiprintf_r+0x4c>
 800b13c:	2300      	movs	r3, #0
 800b13e:	9309      	str	r3, [sp, #36]	; 0x24
 800b140:	2320      	movs	r3, #32
 800b142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b146:	f8cd 800c 	str.w	r8, [sp, #12]
 800b14a:	2330      	movs	r3, #48	; 0x30
 800b14c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b310 <_vfiprintf_r+0x24c>
 800b150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b154:	f04f 0901 	mov.w	r9, #1
 800b158:	4623      	mov	r3, r4
 800b15a:	469a      	mov	sl, r3
 800b15c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b160:	b10a      	cbz	r2, 800b166 <_vfiprintf_r+0xa2>
 800b162:	2a25      	cmp	r2, #37	; 0x25
 800b164:	d1f9      	bne.n	800b15a <_vfiprintf_r+0x96>
 800b166:	ebba 0b04 	subs.w	fp, sl, r4
 800b16a:	d00b      	beq.n	800b184 <_vfiprintf_r+0xc0>
 800b16c:	465b      	mov	r3, fp
 800b16e:	4622      	mov	r2, r4
 800b170:	4629      	mov	r1, r5
 800b172:	4630      	mov	r0, r6
 800b174:	f7ff ff93 	bl	800b09e <__sfputs_r>
 800b178:	3001      	adds	r0, #1
 800b17a:	f000 80aa 	beq.w	800b2d2 <_vfiprintf_r+0x20e>
 800b17e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b180:	445a      	add	r2, fp
 800b182:	9209      	str	r2, [sp, #36]	; 0x24
 800b184:	f89a 3000 	ldrb.w	r3, [sl]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 80a2 	beq.w	800b2d2 <_vfiprintf_r+0x20e>
 800b18e:	2300      	movs	r3, #0
 800b190:	f04f 32ff 	mov.w	r2, #4294967295
 800b194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b198:	f10a 0a01 	add.w	sl, sl, #1
 800b19c:	9304      	str	r3, [sp, #16]
 800b19e:	9307      	str	r3, [sp, #28]
 800b1a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1a4:	931a      	str	r3, [sp, #104]	; 0x68
 800b1a6:	4654      	mov	r4, sl
 800b1a8:	2205      	movs	r2, #5
 800b1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ae:	4858      	ldr	r0, [pc, #352]	; (800b310 <_vfiprintf_r+0x24c>)
 800b1b0:	f7f5 f816 	bl	80001e0 <memchr>
 800b1b4:	9a04      	ldr	r2, [sp, #16]
 800b1b6:	b9d8      	cbnz	r0, 800b1f0 <_vfiprintf_r+0x12c>
 800b1b8:	06d1      	lsls	r1, r2, #27
 800b1ba:	bf44      	itt	mi
 800b1bc:	2320      	movmi	r3, #32
 800b1be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1c2:	0713      	lsls	r3, r2, #28
 800b1c4:	bf44      	itt	mi
 800b1c6:	232b      	movmi	r3, #43	; 0x2b
 800b1c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b1d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b1d2:	d015      	beq.n	800b200 <_vfiprintf_r+0x13c>
 800b1d4:	9a07      	ldr	r2, [sp, #28]
 800b1d6:	4654      	mov	r4, sl
 800b1d8:	2000      	movs	r0, #0
 800b1da:	f04f 0c0a 	mov.w	ip, #10
 800b1de:	4621      	mov	r1, r4
 800b1e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1e4:	3b30      	subs	r3, #48	; 0x30
 800b1e6:	2b09      	cmp	r3, #9
 800b1e8:	d94e      	bls.n	800b288 <_vfiprintf_r+0x1c4>
 800b1ea:	b1b0      	cbz	r0, 800b21a <_vfiprintf_r+0x156>
 800b1ec:	9207      	str	r2, [sp, #28]
 800b1ee:	e014      	b.n	800b21a <_vfiprintf_r+0x156>
 800b1f0:	eba0 0308 	sub.w	r3, r0, r8
 800b1f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	9304      	str	r3, [sp, #16]
 800b1fc:	46a2      	mov	sl, r4
 800b1fe:	e7d2      	b.n	800b1a6 <_vfiprintf_r+0xe2>
 800b200:	9b03      	ldr	r3, [sp, #12]
 800b202:	1d19      	adds	r1, r3, #4
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	9103      	str	r1, [sp, #12]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	bfbb      	ittet	lt
 800b20c:	425b      	neglt	r3, r3
 800b20e:	f042 0202 	orrlt.w	r2, r2, #2
 800b212:	9307      	strge	r3, [sp, #28]
 800b214:	9307      	strlt	r3, [sp, #28]
 800b216:	bfb8      	it	lt
 800b218:	9204      	strlt	r2, [sp, #16]
 800b21a:	7823      	ldrb	r3, [r4, #0]
 800b21c:	2b2e      	cmp	r3, #46	; 0x2e
 800b21e:	d10c      	bne.n	800b23a <_vfiprintf_r+0x176>
 800b220:	7863      	ldrb	r3, [r4, #1]
 800b222:	2b2a      	cmp	r3, #42	; 0x2a
 800b224:	d135      	bne.n	800b292 <_vfiprintf_r+0x1ce>
 800b226:	9b03      	ldr	r3, [sp, #12]
 800b228:	1d1a      	adds	r2, r3, #4
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	9203      	str	r2, [sp, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	bfb8      	it	lt
 800b232:	f04f 33ff 	movlt.w	r3, #4294967295
 800b236:	3402      	adds	r4, #2
 800b238:	9305      	str	r3, [sp, #20]
 800b23a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b320 <_vfiprintf_r+0x25c>
 800b23e:	7821      	ldrb	r1, [r4, #0]
 800b240:	2203      	movs	r2, #3
 800b242:	4650      	mov	r0, sl
 800b244:	f7f4 ffcc 	bl	80001e0 <memchr>
 800b248:	b140      	cbz	r0, 800b25c <_vfiprintf_r+0x198>
 800b24a:	2340      	movs	r3, #64	; 0x40
 800b24c:	eba0 000a 	sub.w	r0, r0, sl
 800b250:	fa03 f000 	lsl.w	r0, r3, r0
 800b254:	9b04      	ldr	r3, [sp, #16]
 800b256:	4303      	orrs	r3, r0
 800b258:	3401      	adds	r4, #1
 800b25a:	9304      	str	r3, [sp, #16]
 800b25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b260:	482c      	ldr	r0, [pc, #176]	; (800b314 <_vfiprintf_r+0x250>)
 800b262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b266:	2206      	movs	r2, #6
 800b268:	f7f4 ffba 	bl	80001e0 <memchr>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d03f      	beq.n	800b2f0 <_vfiprintf_r+0x22c>
 800b270:	4b29      	ldr	r3, [pc, #164]	; (800b318 <_vfiprintf_r+0x254>)
 800b272:	bb1b      	cbnz	r3, 800b2bc <_vfiprintf_r+0x1f8>
 800b274:	9b03      	ldr	r3, [sp, #12]
 800b276:	3307      	adds	r3, #7
 800b278:	f023 0307 	bic.w	r3, r3, #7
 800b27c:	3308      	adds	r3, #8
 800b27e:	9303      	str	r3, [sp, #12]
 800b280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b282:	443b      	add	r3, r7
 800b284:	9309      	str	r3, [sp, #36]	; 0x24
 800b286:	e767      	b.n	800b158 <_vfiprintf_r+0x94>
 800b288:	fb0c 3202 	mla	r2, ip, r2, r3
 800b28c:	460c      	mov	r4, r1
 800b28e:	2001      	movs	r0, #1
 800b290:	e7a5      	b.n	800b1de <_vfiprintf_r+0x11a>
 800b292:	2300      	movs	r3, #0
 800b294:	3401      	adds	r4, #1
 800b296:	9305      	str	r3, [sp, #20]
 800b298:	4619      	mov	r1, r3
 800b29a:	f04f 0c0a 	mov.w	ip, #10
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2a4:	3a30      	subs	r2, #48	; 0x30
 800b2a6:	2a09      	cmp	r2, #9
 800b2a8:	d903      	bls.n	800b2b2 <_vfiprintf_r+0x1ee>
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0c5      	beq.n	800b23a <_vfiprintf_r+0x176>
 800b2ae:	9105      	str	r1, [sp, #20]
 800b2b0:	e7c3      	b.n	800b23a <_vfiprintf_r+0x176>
 800b2b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e7f0      	b.n	800b29e <_vfiprintf_r+0x1da>
 800b2bc:	ab03      	add	r3, sp, #12
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	462a      	mov	r2, r5
 800b2c2:	4b16      	ldr	r3, [pc, #88]	; (800b31c <_vfiprintf_r+0x258>)
 800b2c4:	a904      	add	r1, sp, #16
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f3af 8000 	nop.w
 800b2cc:	4607      	mov	r7, r0
 800b2ce:	1c78      	adds	r0, r7, #1
 800b2d0:	d1d6      	bne.n	800b280 <_vfiprintf_r+0x1bc>
 800b2d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2d4:	07d9      	lsls	r1, r3, #31
 800b2d6:	d405      	bmi.n	800b2e4 <_vfiprintf_r+0x220>
 800b2d8:	89ab      	ldrh	r3, [r5, #12]
 800b2da:	059a      	lsls	r2, r3, #22
 800b2dc:	d402      	bmi.n	800b2e4 <_vfiprintf_r+0x220>
 800b2de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2e0:	f7ff fda0 	bl	800ae24 <__retarget_lock_release_recursive>
 800b2e4:	89ab      	ldrh	r3, [r5, #12]
 800b2e6:	065b      	lsls	r3, r3, #25
 800b2e8:	f53f af12 	bmi.w	800b110 <_vfiprintf_r+0x4c>
 800b2ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2ee:	e711      	b.n	800b114 <_vfiprintf_r+0x50>
 800b2f0:	ab03      	add	r3, sp, #12
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	462a      	mov	r2, r5
 800b2f6:	4b09      	ldr	r3, [pc, #36]	; (800b31c <_vfiprintf_r+0x258>)
 800b2f8:	a904      	add	r1, sp, #16
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f000 f880 	bl	800b400 <_printf_i>
 800b300:	e7e4      	b.n	800b2cc <_vfiprintf_r+0x208>
 800b302:	bf00      	nop
 800b304:	08015a18 	.word	0x08015a18
 800b308:	08015a38 	.word	0x08015a38
 800b30c:	080159f8 	.word	0x080159f8
 800b310:	08015a5c 	.word	0x08015a5c
 800b314:	08015a66 	.word	0x08015a66
 800b318:	00000000 	.word	0x00000000
 800b31c:	0800b09f 	.word	0x0800b09f
 800b320:	08015a62 	.word	0x08015a62

0800b324 <_printf_common>:
 800b324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b328:	4616      	mov	r6, r2
 800b32a:	4699      	mov	r9, r3
 800b32c:	688a      	ldr	r2, [r1, #8]
 800b32e:	690b      	ldr	r3, [r1, #16]
 800b330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b334:	4293      	cmp	r3, r2
 800b336:	bfb8      	it	lt
 800b338:	4613      	movlt	r3, r2
 800b33a:	6033      	str	r3, [r6, #0]
 800b33c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b340:	4607      	mov	r7, r0
 800b342:	460c      	mov	r4, r1
 800b344:	b10a      	cbz	r2, 800b34a <_printf_common+0x26>
 800b346:	3301      	adds	r3, #1
 800b348:	6033      	str	r3, [r6, #0]
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	0699      	lsls	r1, r3, #26
 800b34e:	bf42      	ittt	mi
 800b350:	6833      	ldrmi	r3, [r6, #0]
 800b352:	3302      	addmi	r3, #2
 800b354:	6033      	strmi	r3, [r6, #0]
 800b356:	6825      	ldr	r5, [r4, #0]
 800b358:	f015 0506 	ands.w	r5, r5, #6
 800b35c:	d106      	bne.n	800b36c <_printf_common+0x48>
 800b35e:	f104 0a19 	add.w	sl, r4, #25
 800b362:	68e3      	ldr	r3, [r4, #12]
 800b364:	6832      	ldr	r2, [r6, #0]
 800b366:	1a9b      	subs	r3, r3, r2
 800b368:	42ab      	cmp	r3, r5
 800b36a:	dc26      	bgt.n	800b3ba <_printf_common+0x96>
 800b36c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b370:	1e13      	subs	r3, r2, #0
 800b372:	6822      	ldr	r2, [r4, #0]
 800b374:	bf18      	it	ne
 800b376:	2301      	movne	r3, #1
 800b378:	0692      	lsls	r2, r2, #26
 800b37a:	d42b      	bmi.n	800b3d4 <_printf_common+0xb0>
 800b37c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b380:	4649      	mov	r1, r9
 800b382:	4638      	mov	r0, r7
 800b384:	47c0      	blx	r8
 800b386:	3001      	adds	r0, #1
 800b388:	d01e      	beq.n	800b3c8 <_printf_common+0xa4>
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	68e5      	ldr	r5, [r4, #12]
 800b38e:	6832      	ldr	r2, [r6, #0]
 800b390:	f003 0306 	and.w	r3, r3, #6
 800b394:	2b04      	cmp	r3, #4
 800b396:	bf08      	it	eq
 800b398:	1aad      	subeq	r5, r5, r2
 800b39a:	68a3      	ldr	r3, [r4, #8]
 800b39c:	6922      	ldr	r2, [r4, #16]
 800b39e:	bf0c      	ite	eq
 800b3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3a4:	2500      	movne	r5, #0
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	bfc4      	itt	gt
 800b3aa:	1a9b      	subgt	r3, r3, r2
 800b3ac:	18ed      	addgt	r5, r5, r3
 800b3ae:	2600      	movs	r6, #0
 800b3b0:	341a      	adds	r4, #26
 800b3b2:	42b5      	cmp	r5, r6
 800b3b4:	d11a      	bne.n	800b3ec <_printf_common+0xc8>
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	e008      	b.n	800b3cc <_printf_common+0xa8>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	4652      	mov	r2, sl
 800b3be:	4649      	mov	r1, r9
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	47c0      	blx	r8
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d103      	bne.n	800b3d0 <_printf_common+0xac>
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d0:	3501      	adds	r5, #1
 800b3d2:	e7c6      	b.n	800b362 <_printf_common+0x3e>
 800b3d4:	18e1      	adds	r1, r4, r3
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	2030      	movs	r0, #48	; 0x30
 800b3da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3de:	4422      	add	r2, r4
 800b3e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3e8:	3302      	adds	r3, #2
 800b3ea:	e7c7      	b.n	800b37c <_printf_common+0x58>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	4649      	mov	r1, r9
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	47c0      	blx	r8
 800b3f6:	3001      	adds	r0, #1
 800b3f8:	d0e6      	beq.n	800b3c8 <_printf_common+0xa4>
 800b3fa:	3601      	adds	r6, #1
 800b3fc:	e7d9      	b.n	800b3b2 <_printf_common+0x8e>
	...

0800b400 <_printf_i>:
 800b400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b404:	460c      	mov	r4, r1
 800b406:	4691      	mov	r9, r2
 800b408:	7e27      	ldrb	r7, [r4, #24]
 800b40a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b40c:	2f78      	cmp	r7, #120	; 0x78
 800b40e:	4680      	mov	r8, r0
 800b410:	469a      	mov	sl, r3
 800b412:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b416:	d807      	bhi.n	800b428 <_printf_i+0x28>
 800b418:	2f62      	cmp	r7, #98	; 0x62
 800b41a:	d80a      	bhi.n	800b432 <_printf_i+0x32>
 800b41c:	2f00      	cmp	r7, #0
 800b41e:	f000 80d8 	beq.w	800b5d2 <_printf_i+0x1d2>
 800b422:	2f58      	cmp	r7, #88	; 0x58
 800b424:	f000 80a3 	beq.w	800b56e <_printf_i+0x16e>
 800b428:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b42c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b430:	e03a      	b.n	800b4a8 <_printf_i+0xa8>
 800b432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b436:	2b15      	cmp	r3, #21
 800b438:	d8f6      	bhi.n	800b428 <_printf_i+0x28>
 800b43a:	a001      	add	r0, pc, #4	; (adr r0, 800b440 <_printf_i+0x40>)
 800b43c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b440:	0800b499 	.word	0x0800b499
 800b444:	0800b4ad 	.word	0x0800b4ad
 800b448:	0800b429 	.word	0x0800b429
 800b44c:	0800b429 	.word	0x0800b429
 800b450:	0800b429 	.word	0x0800b429
 800b454:	0800b429 	.word	0x0800b429
 800b458:	0800b4ad 	.word	0x0800b4ad
 800b45c:	0800b429 	.word	0x0800b429
 800b460:	0800b429 	.word	0x0800b429
 800b464:	0800b429 	.word	0x0800b429
 800b468:	0800b429 	.word	0x0800b429
 800b46c:	0800b5b9 	.word	0x0800b5b9
 800b470:	0800b4dd 	.word	0x0800b4dd
 800b474:	0800b59b 	.word	0x0800b59b
 800b478:	0800b429 	.word	0x0800b429
 800b47c:	0800b429 	.word	0x0800b429
 800b480:	0800b5db 	.word	0x0800b5db
 800b484:	0800b429 	.word	0x0800b429
 800b488:	0800b4dd 	.word	0x0800b4dd
 800b48c:	0800b429 	.word	0x0800b429
 800b490:	0800b429 	.word	0x0800b429
 800b494:	0800b5a3 	.word	0x0800b5a3
 800b498:	680b      	ldr	r3, [r1, #0]
 800b49a:	1d1a      	adds	r2, r3, #4
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	600a      	str	r2, [r1, #0]
 800b4a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e0a3      	b.n	800b5f4 <_printf_i+0x1f4>
 800b4ac:	6825      	ldr	r5, [r4, #0]
 800b4ae:	6808      	ldr	r0, [r1, #0]
 800b4b0:	062e      	lsls	r6, r5, #24
 800b4b2:	f100 0304 	add.w	r3, r0, #4
 800b4b6:	d50a      	bpl.n	800b4ce <_printf_i+0xce>
 800b4b8:	6805      	ldr	r5, [r0, #0]
 800b4ba:	600b      	str	r3, [r1, #0]
 800b4bc:	2d00      	cmp	r5, #0
 800b4be:	da03      	bge.n	800b4c8 <_printf_i+0xc8>
 800b4c0:	232d      	movs	r3, #45	; 0x2d
 800b4c2:	426d      	negs	r5, r5
 800b4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4c8:	485e      	ldr	r0, [pc, #376]	; (800b644 <_printf_i+0x244>)
 800b4ca:	230a      	movs	r3, #10
 800b4cc:	e019      	b.n	800b502 <_printf_i+0x102>
 800b4ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b4d2:	6805      	ldr	r5, [r0, #0]
 800b4d4:	600b      	str	r3, [r1, #0]
 800b4d6:	bf18      	it	ne
 800b4d8:	b22d      	sxthne	r5, r5
 800b4da:	e7ef      	b.n	800b4bc <_printf_i+0xbc>
 800b4dc:	680b      	ldr	r3, [r1, #0]
 800b4de:	6825      	ldr	r5, [r4, #0]
 800b4e0:	1d18      	adds	r0, r3, #4
 800b4e2:	6008      	str	r0, [r1, #0]
 800b4e4:	0628      	lsls	r0, r5, #24
 800b4e6:	d501      	bpl.n	800b4ec <_printf_i+0xec>
 800b4e8:	681d      	ldr	r5, [r3, #0]
 800b4ea:	e002      	b.n	800b4f2 <_printf_i+0xf2>
 800b4ec:	0669      	lsls	r1, r5, #25
 800b4ee:	d5fb      	bpl.n	800b4e8 <_printf_i+0xe8>
 800b4f0:	881d      	ldrh	r5, [r3, #0]
 800b4f2:	4854      	ldr	r0, [pc, #336]	; (800b644 <_printf_i+0x244>)
 800b4f4:	2f6f      	cmp	r7, #111	; 0x6f
 800b4f6:	bf0c      	ite	eq
 800b4f8:	2308      	moveq	r3, #8
 800b4fa:	230a      	movne	r3, #10
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b502:	6866      	ldr	r6, [r4, #4]
 800b504:	60a6      	str	r6, [r4, #8]
 800b506:	2e00      	cmp	r6, #0
 800b508:	bfa2      	ittt	ge
 800b50a:	6821      	ldrge	r1, [r4, #0]
 800b50c:	f021 0104 	bicge.w	r1, r1, #4
 800b510:	6021      	strge	r1, [r4, #0]
 800b512:	b90d      	cbnz	r5, 800b518 <_printf_i+0x118>
 800b514:	2e00      	cmp	r6, #0
 800b516:	d04d      	beq.n	800b5b4 <_printf_i+0x1b4>
 800b518:	4616      	mov	r6, r2
 800b51a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b51e:	fb03 5711 	mls	r7, r3, r1, r5
 800b522:	5dc7      	ldrb	r7, [r0, r7]
 800b524:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b528:	462f      	mov	r7, r5
 800b52a:	42bb      	cmp	r3, r7
 800b52c:	460d      	mov	r5, r1
 800b52e:	d9f4      	bls.n	800b51a <_printf_i+0x11a>
 800b530:	2b08      	cmp	r3, #8
 800b532:	d10b      	bne.n	800b54c <_printf_i+0x14c>
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	07df      	lsls	r7, r3, #31
 800b538:	d508      	bpl.n	800b54c <_printf_i+0x14c>
 800b53a:	6923      	ldr	r3, [r4, #16]
 800b53c:	6861      	ldr	r1, [r4, #4]
 800b53e:	4299      	cmp	r1, r3
 800b540:	bfde      	ittt	le
 800b542:	2330      	movle	r3, #48	; 0x30
 800b544:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b548:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b54c:	1b92      	subs	r2, r2, r6
 800b54e:	6122      	str	r2, [r4, #16]
 800b550:	f8cd a000 	str.w	sl, [sp]
 800b554:	464b      	mov	r3, r9
 800b556:	aa03      	add	r2, sp, #12
 800b558:	4621      	mov	r1, r4
 800b55a:	4640      	mov	r0, r8
 800b55c:	f7ff fee2 	bl	800b324 <_printf_common>
 800b560:	3001      	adds	r0, #1
 800b562:	d14c      	bne.n	800b5fe <_printf_i+0x1fe>
 800b564:	f04f 30ff 	mov.w	r0, #4294967295
 800b568:	b004      	add	sp, #16
 800b56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56e:	4835      	ldr	r0, [pc, #212]	; (800b644 <_printf_i+0x244>)
 800b570:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	680e      	ldr	r6, [r1, #0]
 800b578:	061f      	lsls	r7, r3, #24
 800b57a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b57e:	600e      	str	r6, [r1, #0]
 800b580:	d514      	bpl.n	800b5ac <_printf_i+0x1ac>
 800b582:	07d9      	lsls	r1, r3, #31
 800b584:	bf44      	itt	mi
 800b586:	f043 0320 	orrmi.w	r3, r3, #32
 800b58a:	6023      	strmi	r3, [r4, #0]
 800b58c:	b91d      	cbnz	r5, 800b596 <_printf_i+0x196>
 800b58e:	6823      	ldr	r3, [r4, #0]
 800b590:	f023 0320 	bic.w	r3, r3, #32
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	2310      	movs	r3, #16
 800b598:	e7b0      	b.n	800b4fc <_printf_i+0xfc>
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	f043 0320 	orr.w	r3, r3, #32
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	2378      	movs	r3, #120	; 0x78
 800b5a4:	4828      	ldr	r0, [pc, #160]	; (800b648 <_printf_i+0x248>)
 800b5a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5aa:	e7e3      	b.n	800b574 <_printf_i+0x174>
 800b5ac:	065e      	lsls	r6, r3, #25
 800b5ae:	bf48      	it	mi
 800b5b0:	b2ad      	uxthmi	r5, r5
 800b5b2:	e7e6      	b.n	800b582 <_printf_i+0x182>
 800b5b4:	4616      	mov	r6, r2
 800b5b6:	e7bb      	b.n	800b530 <_printf_i+0x130>
 800b5b8:	680b      	ldr	r3, [r1, #0]
 800b5ba:	6826      	ldr	r6, [r4, #0]
 800b5bc:	6960      	ldr	r0, [r4, #20]
 800b5be:	1d1d      	adds	r5, r3, #4
 800b5c0:	600d      	str	r5, [r1, #0]
 800b5c2:	0635      	lsls	r5, r6, #24
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	d501      	bpl.n	800b5cc <_printf_i+0x1cc>
 800b5c8:	6018      	str	r0, [r3, #0]
 800b5ca:	e002      	b.n	800b5d2 <_printf_i+0x1d2>
 800b5cc:	0671      	lsls	r1, r6, #25
 800b5ce:	d5fb      	bpl.n	800b5c8 <_printf_i+0x1c8>
 800b5d0:	8018      	strh	r0, [r3, #0]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	6123      	str	r3, [r4, #16]
 800b5d6:	4616      	mov	r6, r2
 800b5d8:	e7ba      	b.n	800b550 <_printf_i+0x150>
 800b5da:	680b      	ldr	r3, [r1, #0]
 800b5dc:	1d1a      	adds	r2, r3, #4
 800b5de:	600a      	str	r2, [r1, #0]
 800b5e0:	681e      	ldr	r6, [r3, #0]
 800b5e2:	6862      	ldr	r2, [r4, #4]
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f7f4 fdfa 	bl	80001e0 <memchr>
 800b5ec:	b108      	cbz	r0, 800b5f2 <_printf_i+0x1f2>
 800b5ee:	1b80      	subs	r0, r0, r6
 800b5f0:	6060      	str	r0, [r4, #4]
 800b5f2:	6863      	ldr	r3, [r4, #4]
 800b5f4:	6123      	str	r3, [r4, #16]
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5fc:	e7a8      	b.n	800b550 <_printf_i+0x150>
 800b5fe:	6923      	ldr	r3, [r4, #16]
 800b600:	4632      	mov	r2, r6
 800b602:	4649      	mov	r1, r9
 800b604:	4640      	mov	r0, r8
 800b606:	47d0      	blx	sl
 800b608:	3001      	adds	r0, #1
 800b60a:	d0ab      	beq.n	800b564 <_printf_i+0x164>
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	079b      	lsls	r3, r3, #30
 800b610:	d413      	bmi.n	800b63a <_printf_i+0x23a>
 800b612:	68e0      	ldr	r0, [r4, #12]
 800b614:	9b03      	ldr	r3, [sp, #12]
 800b616:	4298      	cmp	r0, r3
 800b618:	bfb8      	it	lt
 800b61a:	4618      	movlt	r0, r3
 800b61c:	e7a4      	b.n	800b568 <_printf_i+0x168>
 800b61e:	2301      	movs	r3, #1
 800b620:	4632      	mov	r2, r6
 800b622:	4649      	mov	r1, r9
 800b624:	4640      	mov	r0, r8
 800b626:	47d0      	blx	sl
 800b628:	3001      	adds	r0, #1
 800b62a:	d09b      	beq.n	800b564 <_printf_i+0x164>
 800b62c:	3501      	adds	r5, #1
 800b62e:	68e3      	ldr	r3, [r4, #12]
 800b630:	9903      	ldr	r1, [sp, #12]
 800b632:	1a5b      	subs	r3, r3, r1
 800b634:	42ab      	cmp	r3, r5
 800b636:	dcf2      	bgt.n	800b61e <_printf_i+0x21e>
 800b638:	e7eb      	b.n	800b612 <_printf_i+0x212>
 800b63a:	2500      	movs	r5, #0
 800b63c:	f104 0619 	add.w	r6, r4, #25
 800b640:	e7f5      	b.n	800b62e <_printf_i+0x22e>
 800b642:	bf00      	nop
 800b644:	08015a6d 	.word	0x08015a6d
 800b648:	08015a7e 	.word	0x08015a7e

0800b64c <iprintf>:
 800b64c:	b40f      	push	{r0, r1, r2, r3}
 800b64e:	4b0a      	ldr	r3, [pc, #40]	; (800b678 <iprintf+0x2c>)
 800b650:	b513      	push	{r0, r1, r4, lr}
 800b652:	681c      	ldr	r4, [r3, #0]
 800b654:	b124      	cbz	r4, 800b660 <iprintf+0x14>
 800b656:	69a3      	ldr	r3, [r4, #24]
 800b658:	b913      	cbnz	r3, 800b660 <iprintf+0x14>
 800b65a:	4620      	mov	r0, r4
 800b65c:	f7ff fb0c 	bl	800ac78 <__sinit>
 800b660:	ab05      	add	r3, sp, #20
 800b662:	9a04      	ldr	r2, [sp, #16]
 800b664:	68a1      	ldr	r1, [r4, #8]
 800b666:	9301      	str	r3, [sp, #4]
 800b668:	4620      	mov	r0, r4
 800b66a:	f7ff fd2b 	bl	800b0c4 <_vfiprintf_r>
 800b66e:	b002      	add	sp, #8
 800b670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b674:	b004      	add	sp, #16
 800b676:	4770      	bx	lr
 800b678:	20000030 	.word	0x20000030

0800b67c <_puts_r>:
 800b67c:	b570      	push	{r4, r5, r6, lr}
 800b67e:	460e      	mov	r6, r1
 800b680:	4605      	mov	r5, r0
 800b682:	b118      	cbz	r0, 800b68c <_puts_r+0x10>
 800b684:	6983      	ldr	r3, [r0, #24]
 800b686:	b90b      	cbnz	r3, 800b68c <_puts_r+0x10>
 800b688:	f7ff faf6 	bl	800ac78 <__sinit>
 800b68c:	69ab      	ldr	r3, [r5, #24]
 800b68e:	68ac      	ldr	r4, [r5, #8]
 800b690:	b913      	cbnz	r3, 800b698 <_puts_r+0x1c>
 800b692:	4628      	mov	r0, r5
 800b694:	f7ff faf0 	bl	800ac78 <__sinit>
 800b698:	4b2c      	ldr	r3, [pc, #176]	; (800b74c <_puts_r+0xd0>)
 800b69a:	429c      	cmp	r4, r3
 800b69c:	d120      	bne.n	800b6e0 <_puts_r+0x64>
 800b69e:	686c      	ldr	r4, [r5, #4]
 800b6a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6a2:	07db      	lsls	r3, r3, #31
 800b6a4:	d405      	bmi.n	800b6b2 <_puts_r+0x36>
 800b6a6:	89a3      	ldrh	r3, [r4, #12]
 800b6a8:	0598      	lsls	r0, r3, #22
 800b6aa:	d402      	bmi.n	800b6b2 <_puts_r+0x36>
 800b6ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ae:	f7ff fbb8 	bl	800ae22 <__retarget_lock_acquire_recursive>
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	0719      	lsls	r1, r3, #28
 800b6b6:	d51d      	bpl.n	800b6f4 <_puts_r+0x78>
 800b6b8:	6923      	ldr	r3, [r4, #16]
 800b6ba:	b1db      	cbz	r3, 800b6f4 <_puts_r+0x78>
 800b6bc:	3e01      	subs	r6, #1
 800b6be:	68a3      	ldr	r3, [r4, #8]
 800b6c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	60a3      	str	r3, [r4, #8]
 800b6c8:	bb39      	cbnz	r1, 800b71a <_puts_r+0x9e>
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	da38      	bge.n	800b740 <_puts_r+0xc4>
 800b6ce:	4622      	mov	r2, r4
 800b6d0:	210a      	movs	r1, #10
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f000 f8f0 	bl	800b8b8 <__swbuf_r>
 800b6d8:	3001      	adds	r0, #1
 800b6da:	d011      	beq.n	800b700 <_puts_r+0x84>
 800b6dc:	250a      	movs	r5, #10
 800b6de:	e011      	b.n	800b704 <_puts_r+0x88>
 800b6e0:	4b1b      	ldr	r3, [pc, #108]	; (800b750 <_puts_r+0xd4>)
 800b6e2:	429c      	cmp	r4, r3
 800b6e4:	d101      	bne.n	800b6ea <_puts_r+0x6e>
 800b6e6:	68ac      	ldr	r4, [r5, #8]
 800b6e8:	e7da      	b.n	800b6a0 <_puts_r+0x24>
 800b6ea:	4b1a      	ldr	r3, [pc, #104]	; (800b754 <_puts_r+0xd8>)
 800b6ec:	429c      	cmp	r4, r3
 800b6ee:	bf08      	it	eq
 800b6f0:	68ec      	ldreq	r4, [r5, #12]
 800b6f2:	e7d5      	b.n	800b6a0 <_puts_r+0x24>
 800b6f4:	4621      	mov	r1, r4
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	f000 f942 	bl	800b980 <__swsetup_r>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d0dd      	beq.n	800b6bc <_puts_r+0x40>
 800b700:	f04f 35ff 	mov.w	r5, #4294967295
 800b704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b706:	07da      	lsls	r2, r3, #31
 800b708:	d405      	bmi.n	800b716 <_puts_r+0x9a>
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	059b      	lsls	r3, r3, #22
 800b70e:	d402      	bmi.n	800b716 <_puts_r+0x9a>
 800b710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b712:	f7ff fb87 	bl	800ae24 <__retarget_lock_release_recursive>
 800b716:	4628      	mov	r0, r5
 800b718:	bd70      	pop	{r4, r5, r6, pc}
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	da04      	bge.n	800b728 <_puts_r+0xac>
 800b71e:	69a2      	ldr	r2, [r4, #24]
 800b720:	429a      	cmp	r2, r3
 800b722:	dc06      	bgt.n	800b732 <_puts_r+0xb6>
 800b724:	290a      	cmp	r1, #10
 800b726:	d004      	beq.n	800b732 <_puts_r+0xb6>
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	1c5a      	adds	r2, r3, #1
 800b72c:	6022      	str	r2, [r4, #0]
 800b72e:	7019      	strb	r1, [r3, #0]
 800b730:	e7c5      	b.n	800b6be <_puts_r+0x42>
 800b732:	4622      	mov	r2, r4
 800b734:	4628      	mov	r0, r5
 800b736:	f000 f8bf 	bl	800b8b8 <__swbuf_r>
 800b73a:	3001      	adds	r0, #1
 800b73c:	d1bf      	bne.n	800b6be <_puts_r+0x42>
 800b73e:	e7df      	b.n	800b700 <_puts_r+0x84>
 800b740:	6823      	ldr	r3, [r4, #0]
 800b742:	250a      	movs	r5, #10
 800b744:	1c5a      	adds	r2, r3, #1
 800b746:	6022      	str	r2, [r4, #0]
 800b748:	701d      	strb	r5, [r3, #0]
 800b74a:	e7db      	b.n	800b704 <_puts_r+0x88>
 800b74c:	08015a18 	.word	0x08015a18
 800b750:	08015a38 	.word	0x08015a38
 800b754:	080159f8 	.word	0x080159f8

0800b758 <puts>:
 800b758:	4b02      	ldr	r3, [pc, #8]	; (800b764 <puts+0xc>)
 800b75a:	4601      	mov	r1, r0
 800b75c:	6818      	ldr	r0, [r3, #0]
 800b75e:	f7ff bf8d 	b.w	800b67c <_puts_r>
 800b762:	bf00      	nop
 800b764:	20000030 	.word	0x20000030

0800b768 <_sbrk_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4d06      	ldr	r5, [pc, #24]	; (800b784 <_sbrk_r+0x1c>)
 800b76c:	2300      	movs	r3, #0
 800b76e:	4604      	mov	r4, r0
 800b770:	4608      	mov	r0, r1
 800b772:	602b      	str	r3, [r5, #0]
 800b774:	f7f7 fcce 	bl	8003114 <_sbrk>
 800b778:	1c43      	adds	r3, r0, #1
 800b77a:	d102      	bne.n	800b782 <_sbrk_r+0x1a>
 800b77c:	682b      	ldr	r3, [r5, #0]
 800b77e:	b103      	cbz	r3, 800b782 <_sbrk_r+0x1a>
 800b780:	6023      	str	r3, [r4, #0]
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	2000adb8 	.word	0x2000adb8

0800b788 <sniprintf>:
 800b788:	b40c      	push	{r2, r3}
 800b78a:	b530      	push	{r4, r5, lr}
 800b78c:	4b17      	ldr	r3, [pc, #92]	; (800b7ec <sniprintf+0x64>)
 800b78e:	1e0c      	subs	r4, r1, #0
 800b790:	681d      	ldr	r5, [r3, #0]
 800b792:	b09d      	sub	sp, #116	; 0x74
 800b794:	da08      	bge.n	800b7a8 <sniprintf+0x20>
 800b796:	238b      	movs	r3, #139	; 0x8b
 800b798:	602b      	str	r3, [r5, #0]
 800b79a:	f04f 30ff 	mov.w	r0, #4294967295
 800b79e:	b01d      	add	sp, #116	; 0x74
 800b7a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7a4:	b002      	add	sp, #8
 800b7a6:	4770      	bx	lr
 800b7a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b7ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b7b0:	bf14      	ite	ne
 800b7b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b7b6:	4623      	moveq	r3, r4
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	9307      	str	r3, [sp, #28]
 800b7bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7c0:	9002      	str	r0, [sp, #8]
 800b7c2:	9006      	str	r0, [sp, #24]
 800b7c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b7c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b7ca:	ab21      	add	r3, sp, #132	; 0x84
 800b7cc:	a902      	add	r1, sp, #8
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	9301      	str	r3, [sp, #4]
 800b7d2:	f000 fa37 	bl	800bc44 <_svfiprintf_r>
 800b7d6:	1c43      	adds	r3, r0, #1
 800b7d8:	bfbc      	itt	lt
 800b7da:	238b      	movlt	r3, #139	; 0x8b
 800b7dc:	602b      	strlt	r3, [r5, #0]
 800b7de:	2c00      	cmp	r4, #0
 800b7e0:	d0dd      	beq.n	800b79e <sniprintf+0x16>
 800b7e2:	9b02      	ldr	r3, [sp, #8]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	701a      	strb	r2, [r3, #0]
 800b7e8:	e7d9      	b.n	800b79e <sniprintf+0x16>
 800b7ea:	bf00      	nop
 800b7ec:	20000030 	.word	0x20000030

0800b7f0 <siprintf>:
 800b7f0:	b40e      	push	{r1, r2, r3}
 800b7f2:	b500      	push	{lr}
 800b7f4:	b09c      	sub	sp, #112	; 0x70
 800b7f6:	ab1d      	add	r3, sp, #116	; 0x74
 800b7f8:	9002      	str	r0, [sp, #8]
 800b7fa:	9006      	str	r0, [sp, #24]
 800b7fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b800:	4809      	ldr	r0, [pc, #36]	; (800b828 <siprintf+0x38>)
 800b802:	9107      	str	r1, [sp, #28]
 800b804:	9104      	str	r1, [sp, #16]
 800b806:	4909      	ldr	r1, [pc, #36]	; (800b82c <siprintf+0x3c>)
 800b808:	f853 2b04 	ldr.w	r2, [r3], #4
 800b80c:	9105      	str	r1, [sp, #20]
 800b80e:	6800      	ldr	r0, [r0, #0]
 800b810:	9301      	str	r3, [sp, #4]
 800b812:	a902      	add	r1, sp, #8
 800b814:	f000 fa16 	bl	800bc44 <_svfiprintf_r>
 800b818:	9b02      	ldr	r3, [sp, #8]
 800b81a:	2200      	movs	r2, #0
 800b81c:	701a      	strb	r2, [r3, #0]
 800b81e:	b01c      	add	sp, #112	; 0x70
 800b820:	f85d eb04 	ldr.w	lr, [sp], #4
 800b824:	b003      	add	sp, #12
 800b826:	4770      	bx	lr
 800b828:	20000030 	.word	0x20000030
 800b82c:	ffff0208 	.word	0xffff0208

0800b830 <__sread>:
 800b830:	b510      	push	{r4, lr}
 800b832:	460c      	mov	r4, r1
 800b834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b838:	f000 fb04 	bl	800be44 <_read_r>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	bfab      	itete	ge
 800b840:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b842:	89a3      	ldrhlt	r3, [r4, #12]
 800b844:	181b      	addge	r3, r3, r0
 800b846:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b84a:	bfac      	ite	ge
 800b84c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b84e:	81a3      	strhlt	r3, [r4, #12]
 800b850:	bd10      	pop	{r4, pc}

0800b852 <__swrite>:
 800b852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b856:	461f      	mov	r7, r3
 800b858:	898b      	ldrh	r3, [r1, #12]
 800b85a:	05db      	lsls	r3, r3, #23
 800b85c:	4605      	mov	r5, r0
 800b85e:	460c      	mov	r4, r1
 800b860:	4616      	mov	r6, r2
 800b862:	d505      	bpl.n	800b870 <__swrite+0x1e>
 800b864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b868:	2302      	movs	r3, #2
 800b86a:	2200      	movs	r2, #0
 800b86c:	f000 f930 	bl	800bad0 <_lseek_r>
 800b870:	89a3      	ldrh	r3, [r4, #12]
 800b872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b87a:	81a3      	strh	r3, [r4, #12]
 800b87c:	4632      	mov	r2, r6
 800b87e:	463b      	mov	r3, r7
 800b880:	4628      	mov	r0, r5
 800b882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b886:	f000 b869 	b.w	800b95c <_write_r>

0800b88a <__sseek>:
 800b88a:	b510      	push	{r4, lr}
 800b88c:	460c      	mov	r4, r1
 800b88e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b892:	f000 f91d 	bl	800bad0 <_lseek_r>
 800b896:	1c43      	adds	r3, r0, #1
 800b898:	89a3      	ldrh	r3, [r4, #12]
 800b89a:	bf15      	itete	ne
 800b89c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b89e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8a6:	81a3      	strheq	r3, [r4, #12]
 800b8a8:	bf18      	it	ne
 800b8aa:	81a3      	strhne	r3, [r4, #12]
 800b8ac:	bd10      	pop	{r4, pc}

0800b8ae <__sclose>:
 800b8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b2:	f000 b8db 	b.w	800ba6c <_close_r>
	...

0800b8b8 <__swbuf_r>:
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ba:	460e      	mov	r6, r1
 800b8bc:	4614      	mov	r4, r2
 800b8be:	4605      	mov	r5, r0
 800b8c0:	b118      	cbz	r0, 800b8ca <__swbuf_r+0x12>
 800b8c2:	6983      	ldr	r3, [r0, #24]
 800b8c4:	b90b      	cbnz	r3, 800b8ca <__swbuf_r+0x12>
 800b8c6:	f7ff f9d7 	bl	800ac78 <__sinit>
 800b8ca:	4b21      	ldr	r3, [pc, #132]	; (800b950 <__swbuf_r+0x98>)
 800b8cc:	429c      	cmp	r4, r3
 800b8ce:	d12b      	bne.n	800b928 <__swbuf_r+0x70>
 800b8d0:	686c      	ldr	r4, [r5, #4]
 800b8d2:	69a3      	ldr	r3, [r4, #24]
 800b8d4:	60a3      	str	r3, [r4, #8]
 800b8d6:	89a3      	ldrh	r3, [r4, #12]
 800b8d8:	071a      	lsls	r2, r3, #28
 800b8da:	d52f      	bpl.n	800b93c <__swbuf_r+0x84>
 800b8dc:	6923      	ldr	r3, [r4, #16]
 800b8de:	b36b      	cbz	r3, 800b93c <__swbuf_r+0x84>
 800b8e0:	6923      	ldr	r3, [r4, #16]
 800b8e2:	6820      	ldr	r0, [r4, #0]
 800b8e4:	1ac0      	subs	r0, r0, r3
 800b8e6:	6963      	ldr	r3, [r4, #20]
 800b8e8:	b2f6      	uxtb	r6, r6
 800b8ea:	4283      	cmp	r3, r0
 800b8ec:	4637      	mov	r7, r6
 800b8ee:	dc04      	bgt.n	800b8fa <__swbuf_r+0x42>
 800b8f0:	4621      	mov	r1, r4
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	f7ff f91a 	bl	800ab2c <_fflush_r>
 800b8f8:	bb30      	cbnz	r0, 800b948 <__swbuf_r+0x90>
 800b8fa:	68a3      	ldr	r3, [r4, #8]
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	60a3      	str	r3, [r4, #8]
 800b900:	6823      	ldr	r3, [r4, #0]
 800b902:	1c5a      	adds	r2, r3, #1
 800b904:	6022      	str	r2, [r4, #0]
 800b906:	701e      	strb	r6, [r3, #0]
 800b908:	6963      	ldr	r3, [r4, #20]
 800b90a:	3001      	adds	r0, #1
 800b90c:	4283      	cmp	r3, r0
 800b90e:	d004      	beq.n	800b91a <__swbuf_r+0x62>
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	07db      	lsls	r3, r3, #31
 800b914:	d506      	bpl.n	800b924 <__swbuf_r+0x6c>
 800b916:	2e0a      	cmp	r6, #10
 800b918:	d104      	bne.n	800b924 <__swbuf_r+0x6c>
 800b91a:	4621      	mov	r1, r4
 800b91c:	4628      	mov	r0, r5
 800b91e:	f7ff f905 	bl	800ab2c <_fflush_r>
 800b922:	b988      	cbnz	r0, 800b948 <__swbuf_r+0x90>
 800b924:	4638      	mov	r0, r7
 800b926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b928:	4b0a      	ldr	r3, [pc, #40]	; (800b954 <__swbuf_r+0x9c>)
 800b92a:	429c      	cmp	r4, r3
 800b92c:	d101      	bne.n	800b932 <__swbuf_r+0x7a>
 800b92e:	68ac      	ldr	r4, [r5, #8]
 800b930:	e7cf      	b.n	800b8d2 <__swbuf_r+0x1a>
 800b932:	4b09      	ldr	r3, [pc, #36]	; (800b958 <__swbuf_r+0xa0>)
 800b934:	429c      	cmp	r4, r3
 800b936:	bf08      	it	eq
 800b938:	68ec      	ldreq	r4, [r5, #12]
 800b93a:	e7ca      	b.n	800b8d2 <__swbuf_r+0x1a>
 800b93c:	4621      	mov	r1, r4
 800b93e:	4628      	mov	r0, r5
 800b940:	f000 f81e 	bl	800b980 <__swsetup_r>
 800b944:	2800      	cmp	r0, #0
 800b946:	d0cb      	beq.n	800b8e0 <__swbuf_r+0x28>
 800b948:	f04f 37ff 	mov.w	r7, #4294967295
 800b94c:	e7ea      	b.n	800b924 <__swbuf_r+0x6c>
 800b94e:	bf00      	nop
 800b950:	08015a18 	.word	0x08015a18
 800b954:	08015a38 	.word	0x08015a38
 800b958:	080159f8 	.word	0x080159f8

0800b95c <_write_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d07      	ldr	r5, [pc, #28]	; (800b97c <_write_r+0x20>)
 800b960:	4604      	mov	r4, r0
 800b962:	4608      	mov	r0, r1
 800b964:	4611      	mov	r1, r2
 800b966:	2200      	movs	r2, #0
 800b968:	602a      	str	r2, [r5, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	f7f7 fb81 	bl	8003072 <_write>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d102      	bne.n	800b97a <_write_r+0x1e>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	b103      	cbz	r3, 800b97a <_write_r+0x1e>
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
 800b97c:	2000adb8 	.word	0x2000adb8

0800b980 <__swsetup_r>:
 800b980:	4b32      	ldr	r3, [pc, #200]	; (800ba4c <__swsetup_r+0xcc>)
 800b982:	b570      	push	{r4, r5, r6, lr}
 800b984:	681d      	ldr	r5, [r3, #0]
 800b986:	4606      	mov	r6, r0
 800b988:	460c      	mov	r4, r1
 800b98a:	b125      	cbz	r5, 800b996 <__swsetup_r+0x16>
 800b98c:	69ab      	ldr	r3, [r5, #24]
 800b98e:	b913      	cbnz	r3, 800b996 <__swsetup_r+0x16>
 800b990:	4628      	mov	r0, r5
 800b992:	f7ff f971 	bl	800ac78 <__sinit>
 800b996:	4b2e      	ldr	r3, [pc, #184]	; (800ba50 <__swsetup_r+0xd0>)
 800b998:	429c      	cmp	r4, r3
 800b99a:	d10f      	bne.n	800b9bc <__swsetup_r+0x3c>
 800b99c:	686c      	ldr	r4, [r5, #4]
 800b99e:	89a3      	ldrh	r3, [r4, #12]
 800b9a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9a4:	0719      	lsls	r1, r3, #28
 800b9a6:	d42c      	bmi.n	800ba02 <__swsetup_r+0x82>
 800b9a8:	06dd      	lsls	r5, r3, #27
 800b9aa:	d411      	bmi.n	800b9d0 <__swsetup_r+0x50>
 800b9ac:	2309      	movs	r3, #9
 800b9ae:	6033      	str	r3, [r6, #0]
 800b9b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9b4:	81a3      	strh	r3, [r4, #12]
 800b9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ba:	e03e      	b.n	800ba3a <__swsetup_r+0xba>
 800b9bc:	4b25      	ldr	r3, [pc, #148]	; (800ba54 <__swsetup_r+0xd4>)
 800b9be:	429c      	cmp	r4, r3
 800b9c0:	d101      	bne.n	800b9c6 <__swsetup_r+0x46>
 800b9c2:	68ac      	ldr	r4, [r5, #8]
 800b9c4:	e7eb      	b.n	800b99e <__swsetup_r+0x1e>
 800b9c6:	4b24      	ldr	r3, [pc, #144]	; (800ba58 <__swsetup_r+0xd8>)
 800b9c8:	429c      	cmp	r4, r3
 800b9ca:	bf08      	it	eq
 800b9cc:	68ec      	ldreq	r4, [r5, #12]
 800b9ce:	e7e6      	b.n	800b99e <__swsetup_r+0x1e>
 800b9d0:	0758      	lsls	r0, r3, #29
 800b9d2:	d512      	bpl.n	800b9fa <__swsetup_r+0x7a>
 800b9d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9d6:	b141      	cbz	r1, 800b9ea <__swsetup_r+0x6a>
 800b9d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9dc:	4299      	cmp	r1, r3
 800b9de:	d002      	beq.n	800b9e6 <__swsetup_r+0x66>
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	f7ff fa9b 	bl	800af1c <_free_r>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	6363      	str	r3, [r4, #52]	; 0x34
 800b9ea:	89a3      	ldrh	r3, [r4, #12]
 800b9ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9f0:	81a3      	strh	r3, [r4, #12]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	6063      	str	r3, [r4, #4]
 800b9f6:	6923      	ldr	r3, [r4, #16]
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	89a3      	ldrh	r3, [r4, #12]
 800b9fc:	f043 0308 	orr.w	r3, r3, #8
 800ba00:	81a3      	strh	r3, [r4, #12]
 800ba02:	6923      	ldr	r3, [r4, #16]
 800ba04:	b94b      	cbnz	r3, 800ba1a <__swsetup_r+0x9a>
 800ba06:	89a3      	ldrh	r3, [r4, #12]
 800ba08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba10:	d003      	beq.n	800ba1a <__swsetup_r+0x9a>
 800ba12:	4621      	mov	r1, r4
 800ba14:	4630      	mov	r0, r6
 800ba16:	f7ff fa2b 	bl	800ae70 <__smakebuf_r>
 800ba1a:	89a0      	ldrh	r0, [r4, #12]
 800ba1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba20:	f010 0301 	ands.w	r3, r0, #1
 800ba24:	d00a      	beq.n	800ba3c <__swsetup_r+0xbc>
 800ba26:	2300      	movs	r3, #0
 800ba28:	60a3      	str	r3, [r4, #8]
 800ba2a:	6963      	ldr	r3, [r4, #20]
 800ba2c:	425b      	negs	r3, r3
 800ba2e:	61a3      	str	r3, [r4, #24]
 800ba30:	6923      	ldr	r3, [r4, #16]
 800ba32:	b943      	cbnz	r3, 800ba46 <__swsetup_r+0xc6>
 800ba34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba38:	d1ba      	bne.n	800b9b0 <__swsetup_r+0x30>
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}
 800ba3c:	0781      	lsls	r1, r0, #30
 800ba3e:	bf58      	it	pl
 800ba40:	6963      	ldrpl	r3, [r4, #20]
 800ba42:	60a3      	str	r3, [r4, #8]
 800ba44:	e7f4      	b.n	800ba30 <__swsetup_r+0xb0>
 800ba46:	2000      	movs	r0, #0
 800ba48:	e7f7      	b.n	800ba3a <__swsetup_r+0xba>
 800ba4a:	bf00      	nop
 800ba4c:	20000030 	.word	0x20000030
 800ba50:	08015a18 	.word	0x08015a18
 800ba54:	08015a38 	.word	0x08015a38
 800ba58:	080159f8 	.word	0x080159f8

0800ba5c <abort>:
 800ba5c:	b508      	push	{r3, lr}
 800ba5e:	2006      	movs	r0, #6
 800ba60:	f000 fa2a 	bl	800beb8 <raise>
 800ba64:	2001      	movs	r0, #1
 800ba66:	f7f7 fadd 	bl	8003024 <_exit>
	...

0800ba6c <_close_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4d06      	ldr	r5, [pc, #24]	; (800ba88 <_close_r+0x1c>)
 800ba70:	2300      	movs	r3, #0
 800ba72:	4604      	mov	r4, r0
 800ba74:	4608      	mov	r0, r1
 800ba76:	602b      	str	r3, [r5, #0]
 800ba78:	f7f7 fb17 	bl	80030aa <_close>
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	d102      	bne.n	800ba86 <_close_r+0x1a>
 800ba80:	682b      	ldr	r3, [r5, #0]
 800ba82:	b103      	cbz	r3, 800ba86 <_close_r+0x1a>
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	2000adb8 	.word	0x2000adb8

0800ba8c <_fstat_r>:
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	4d07      	ldr	r5, [pc, #28]	; (800baac <_fstat_r+0x20>)
 800ba90:	2300      	movs	r3, #0
 800ba92:	4604      	mov	r4, r0
 800ba94:	4608      	mov	r0, r1
 800ba96:	4611      	mov	r1, r2
 800ba98:	602b      	str	r3, [r5, #0]
 800ba9a:	f7f7 fb12 	bl	80030c2 <_fstat>
 800ba9e:	1c43      	adds	r3, r0, #1
 800baa0:	d102      	bne.n	800baa8 <_fstat_r+0x1c>
 800baa2:	682b      	ldr	r3, [r5, #0]
 800baa4:	b103      	cbz	r3, 800baa8 <_fstat_r+0x1c>
 800baa6:	6023      	str	r3, [r4, #0]
 800baa8:	bd38      	pop	{r3, r4, r5, pc}
 800baaa:	bf00      	nop
 800baac:	2000adb8 	.word	0x2000adb8

0800bab0 <_isatty_r>:
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	4d06      	ldr	r5, [pc, #24]	; (800bacc <_isatty_r+0x1c>)
 800bab4:	2300      	movs	r3, #0
 800bab6:	4604      	mov	r4, r0
 800bab8:	4608      	mov	r0, r1
 800baba:	602b      	str	r3, [r5, #0]
 800babc:	f7f7 fb11 	bl	80030e2 <_isatty>
 800bac0:	1c43      	adds	r3, r0, #1
 800bac2:	d102      	bne.n	800baca <_isatty_r+0x1a>
 800bac4:	682b      	ldr	r3, [r5, #0]
 800bac6:	b103      	cbz	r3, 800baca <_isatty_r+0x1a>
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	bd38      	pop	{r3, r4, r5, pc}
 800bacc:	2000adb8 	.word	0x2000adb8

0800bad0 <_lseek_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4d07      	ldr	r5, [pc, #28]	; (800baf0 <_lseek_r+0x20>)
 800bad4:	4604      	mov	r4, r0
 800bad6:	4608      	mov	r0, r1
 800bad8:	4611      	mov	r1, r2
 800bada:	2200      	movs	r2, #0
 800badc:	602a      	str	r2, [r5, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	f7f7 fb0a 	bl	80030f8 <_lseek>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d102      	bne.n	800baee <_lseek_r+0x1e>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b103      	cbz	r3, 800baee <_lseek_r+0x1e>
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	bd38      	pop	{r3, r4, r5, pc}
 800baf0:	2000adb8 	.word	0x2000adb8

0800baf4 <memmove>:
 800baf4:	4288      	cmp	r0, r1
 800baf6:	b510      	push	{r4, lr}
 800baf8:	eb01 0402 	add.w	r4, r1, r2
 800bafc:	d902      	bls.n	800bb04 <memmove+0x10>
 800bafe:	4284      	cmp	r4, r0
 800bb00:	4623      	mov	r3, r4
 800bb02:	d807      	bhi.n	800bb14 <memmove+0x20>
 800bb04:	1e43      	subs	r3, r0, #1
 800bb06:	42a1      	cmp	r1, r4
 800bb08:	d008      	beq.n	800bb1c <memmove+0x28>
 800bb0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb12:	e7f8      	b.n	800bb06 <memmove+0x12>
 800bb14:	4402      	add	r2, r0
 800bb16:	4601      	mov	r1, r0
 800bb18:	428a      	cmp	r2, r1
 800bb1a:	d100      	bne.n	800bb1e <memmove+0x2a>
 800bb1c:	bd10      	pop	{r4, pc}
 800bb1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb26:	e7f7      	b.n	800bb18 <memmove+0x24>

0800bb28 <__malloc_lock>:
 800bb28:	4801      	ldr	r0, [pc, #4]	; (800bb30 <__malloc_lock+0x8>)
 800bb2a:	f7ff b97a 	b.w	800ae22 <__retarget_lock_acquire_recursive>
 800bb2e:	bf00      	nop
 800bb30:	2000adb0 	.word	0x2000adb0

0800bb34 <__malloc_unlock>:
 800bb34:	4801      	ldr	r0, [pc, #4]	; (800bb3c <__malloc_unlock+0x8>)
 800bb36:	f7ff b975 	b.w	800ae24 <__retarget_lock_release_recursive>
 800bb3a:	bf00      	nop
 800bb3c:	2000adb0 	.word	0x2000adb0

0800bb40 <_realloc_r>:
 800bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb42:	4607      	mov	r7, r0
 800bb44:	4614      	mov	r4, r2
 800bb46:	460e      	mov	r6, r1
 800bb48:	b921      	cbnz	r1, 800bb54 <_realloc_r+0x14>
 800bb4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb4e:	4611      	mov	r1, r2
 800bb50:	f7ff ba34 	b.w	800afbc <_malloc_r>
 800bb54:	b922      	cbnz	r2, 800bb60 <_realloc_r+0x20>
 800bb56:	f7ff f9e1 	bl	800af1c <_free_r>
 800bb5a:	4625      	mov	r5, r4
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb60:	f000 f9c6 	bl	800bef0 <_malloc_usable_size_r>
 800bb64:	42a0      	cmp	r0, r4
 800bb66:	d20f      	bcs.n	800bb88 <_realloc_r+0x48>
 800bb68:	4621      	mov	r1, r4
 800bb6a:	4638      	mov	r0, r7
 800bb6c:	f7ff fa26 	bl	800afbc <_malloc_r>
 800bb70:	4605      	mov	r5, r0
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d0f2      	beq.n	800bb5c <_realloc_r+0x1c>
 800bb76:	4631      	mov	r1, r6
 800bb78:	4622      	mov	r2, r4
 800bb7a:	f7ff f9b9 	bl	800aef0 <memcpy>
 800bb7e:	4631      	mov	r1, r6
 800bb80:	4638      	mov	r0, r7
 800bb82:	f7ff f9cb 	bl	800af1c <_free_r>
 800bb86:	e7e9      	b.n	800bb5c <_realloc_r+0x1c>
 800bb88:	4635      	mov	r5, r6
 800bb8a:	e7e7      	b.n	800bb5c <_realloc_r+0x1c>

0800bb8c <__ssputs_r>:
 800bb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb90:	688e      	ldr	r6, [r1, #8]
 800bb92:	429e      	cmp	r6, r3
 800bb94:	4682      	mov	sl, r0
 800bb96:	460c      	mov	r4, r1
 800bb98:	4690      	mov	r8, r2
 800bb9a:	461f      	mov	r7, r3
 800bb9c:	d838      	bhi.n	800bc10 <__ssputs_r+0x84>
 800bb9e:	898a      	ldrh	r2, [r1, #12]
 800bba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bba4:	d032      	beq.n	800bc0c <__ssputs_r+0x80>
 800bba6:	6825      	ldr	r5, [r4, #0]
 800bba8:	6909      	ldr	r1, [r1, #16]
 800bbaa:	eba5 0901 	sub.w	r9, r5, r1
 800bbae:	6965      	ldr	r5, [r4, #20]
 800bbb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbb8:	3301      	adds	r3, #1
 800bbba:	444b      	add	r3, r9
 800bbbc:	106d      	asrs	r5, r5, #1
 800bbbe:	429d      	cmp	r5, r3
 800bbc0:	bf38      	it	cc
 800bbc2:	461d      	movcc	r5, r3
 800bbc4:	0553      	lsls	r3, r2, #21
 800bbc6:	d531      	bpl.n	800bc2c <__ssputs_r+0xa0>
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f7ff f9f7 	bl	800afbc <_malloc_r>
 800bbce:	4606      	mov	r6, r0
 800bbd0:	b950      	cbnz	r0, 800bbe8 <__ssputs_r+0x5c>
 800bbd2:	230c      	movs	r3, #12
 800bbd4:	f8ca 3000 	str.w	r3, [sl]
 800bbd8:	89a3      	ldrh	r3, [r4, #12]
 800bbda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbde:	81a3      	strh	r3, [r4, #12]
 800bbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbe8:	6921      	ldr	r1, [r4, #16]
 800bbea:	464a      	mov	r2, r9
 800bbec:	f7ff f980 	bl	800aef0 <memcpy>
 800bbf0:	89a3      	ldrh	r3, [r4, #12]
 800bbf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbfa:	81a3      	strh	r3, [r4, #12]
 800bbfc:	6126      	str	r6, [r4, #16]
 800bbfe:	6165      	str	r5, [r4, #20]
 800bc00:	444e      	add	r6, r9
 800bc02:	eba5 0509 	sub.w	r5, r5, r9
 800bc06:	6026      	str	r6, [r4, #0]
 800bc08:	60a5      	str	r5, [r4, #8]
 800bc0a:	463e      	mov	r6, r7
 800bc0c:	42be      	cmp	r6, r7
 800bc0e:	d900      	bls.n	800bc12 <__ssputs_r+0x86>
 800bc10:	463e      	mov	r6, r7
 800bc12:	4632      	mov	r2, r6
 800bc14:	6820      	ldr	r0, [r4, #0]
 800bc16:	4641      	mov	r1, r8
 800bc18:	f7ff ff6c 	bl	800baf4 <memmove>
 800bc1c:	68a3      	ldr	r3, [r4, #8]
 800bc1e:	6822      	ldr	r2, [r4, #0]
 800bc20:	1b9b      	subs	r3, r3, r6
 800bc22:	4432      	add	r2, r6
 800bc24:	60a3      	str	r3, [r4, #8]
 800bc26:	6022      	str	r2, [r4, #0]
 800bc28:	2000      	movs	r0, #0
 800bc2a:	e7db      	b.n	800bbe4 <__ssputs_r+0x58>
 800bc2c:	462a      	mov	r2, r5
 800bc2e:	f7ff ff87 	bl	800bb40 <_realloc_r>
 800bc32:	4606      	mov	r6, r0
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d1e1      	bne.n	800bbfc <__ssputs_r+0x70>
 800bc38:	6921      	ldr	r1, [r4, #16]
 800bc3a:	4650      	mov	r0, sl
 800bc3c:	f7ff f96e 	bl	800af1c <_free_r>
 800bc40:	e7c7      	b.n	800bbd2 <__ssputs_r+0x46>
	...

0800bc44 <_svfiprintf_r>:
 800bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc48:	4698      	mov	r8, r3
 800bc4a:	898b      	ldrh	r3, [r1, #12]
 800bc4c:	061b      	lsls	r3, r3, #24
 800bc4e:	b09d      	sub	sp, #116	; 0x74
 800bc50:	4607      	mov	r7, r0
 800bc52:	460d      	mov	r5, r1
 800bc54:	4614      	mov	r4, r2
 800bc56:	d50e      	bpl.n	800bc76 <_svfiprintf_r+0x32>
 800bc58:	690b      	ldr	r3, [r1, #16]
 800bc5a:	b963      	cbnz	r3, 800bc76 <_svfiprintf_r+0x32>
 800bc5c:	2140      	movs	r1, #64	; 0x40
 800bc5e:	f7ff f9ad 	bl	800afbc <_malloc_r>
 800bc62:	6028      	str	r0, [r5, #0]
 800bc64:	6128      	str	r0, [r5, #16]
 800bc66:	b920      	cbnz	r0, 800bc72 <_svfiprintf_r+0x2e>
 800bc68:	230c      	movs	r3, #12
 800bc6a:	603b      	str	r3, [r7, #0]
 800bc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc70:	e0d1      	b.n	800be16 <_svfiprintf_r+0x1d2>
 800bc72:	2340      	movs	r3, #64	; 0x40
 800bc74:	616b      	str	r3, [r5, #20]
 800bc76:	2300      	movs	r3, #0
 800bc78:	9309      	str	r3, [sp, #36]	; 0x24
 800bc7a:	2320      	movs	r3, #32
 800bc7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc80:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc84:	2330      	movs	r3, #48	; 0x30
 800bc86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be30 <_svfiprintf_r+0x1ec>
 800bc8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc8e:	f04f 0901 	mov.w	r9, #1
 800bc92:	4623      	mov	r3, r4
 800bc94:	469a      	mov	sl, r3
 800bc96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc9a:	b10a      	cbz	r2, 800bca0 <_svfiprintf_r+0x5c>
 800bc9c:	2a25      	cmp	r2, #37	; 0x25
 800bc9e:	d1f9      	bne.n	800bc94 <_svfiprintf_r+0x50>
 800bca0:	ebba 0b04 	subs.w	fp, sl, r4
 800bca4:	d00b      	beq.n	800bcbe <_svfiprintf_r+0x7a>
 800bca6:	465b      	mov	r3, fp
 800bca8:	4622      	mov	r2, r4
 800bcaa:	4629      	mov	r1, r5
 800bcac:	4638      	mov	r0, r7
 800bcae:	f7ff ff6d 	bl	800bb8c <__ssputs_r>
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	f000 80aa 	beq.w	800be0c <_svfiprintf_r+0x1c8>
 800bcb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcba:	445a      	add	r2, fp
 800bcbc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcbe:	f89a 3000 	ldrb.w	r3, [sl]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f000 80a2 	beq.w	800be0c <_svfiprintf_r+0x1c8>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	f04f 32ff 	mov.w	r2, #4294967295
 800bcce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcd2:	f10a 0a01 	add.w	sl, sl, #1
 800bcd6:	9304      	str	r3, [sp, #16]
 800bcd8:	9307      	str	r3, [sp, #28]
 800bcda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcde:	931a      	str	r3, [sp, #104]	; 0x68
 800bce0:	4654      	mov	r4, sl
 800bce2:	2205      	movs	r2, #5
 800bce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce8:	4851      	ldr	r0, [pc, #324]	; (800be30 <_svfiprintf_r+0x1ec>)
 800bcea:	f7f4 fa79 	bl	80001e0 <memchr>
 800bcee:	9a04      	ldr	r2, [sp, #16]
 800bcf0:	b9d8      	cbnz	r0, 800bd2a <_svfiprintf_r+0xe6>
 800bcf2:	06d0      	lsls	r0, r2, #27
 800bcf4:	bf44      	itt	mi
 800bcf6:	2320      	movmi	r3, #32
 800bcf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcfc:	0711      	lsls	r1, r2, #28
 800bcfe:	bf44      	itt	mi
 800bd00:	232b      	movmi	r3, #43	; 0x2b
 800bd02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd06:	f89a 3000 	ldrb.w	r3, [sl]
 800bd0a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd0c:	d015      	beq.n	800bd3a <_svfiprintf_r+0xf6>
 800bd0e:	9a07      	ldr	r2, [sp, #28]
 800bd10:	4654      	mov	r4, sl
 800bd12:	2000      	movs	r0, #0
 800bd14:	f04f 0c0a 	mov.w	ip, #10
 800bd18:	4621      	mov	r1, r4
 800bd1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd1e:	3b30      	subs	r3, #48	; 0x30
 800bd20:	2b09      	cmp	r3, #9
 800bd22:	d94e      	bls.n	800bdc2 <_svfiprintf_r+0x17e>
 800bd24:	b1b0      	cbz	r0, 800bd54 <_svfiprintf_r+0x110>
 800bd26:	9207      	str	r2, [sp, #28]
 800bd28:	e014      	b.n	800bd54 <_svfiprintf_r+0x110>
 800bd2a:	eba0 0308 	sub.w	r3, r0, r8
 800bd2e:	fa09 f303 	lsl.w	r3, r9, r3
 800bd32:	4313      	orrs	r3, r2
 800bd34:	9304      	str	r3, [sp, #16]
 800bd36:	46a2      	mov	sl, r4
 800bd38:	e7d2      	b.n	800bce0 <_svfiprintf_r+0x9c>
 800bd3a:	9b03      	ldr	r3, [sp, #12]
 800bd3c:	1d19      	adds	r1, r3, #4
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	9103      	str	r1, [sp, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	bfbb      	ittet	lt
 800bd46:	425b      	neglt	r3, r3
 800bd48:	f042 0202 	orrlt.w	r2, r2, #2
 800bd4c:	9307      	strge	r3, [sp, #28]
 800bd4e:	9307      	strlt	r3, [sp, #28]
 800bd50:	bfb8      	it	lt
 800bd52:	9204      	strlt	r2, [sp, #16]
 800bd54:	7823      	ldrb	r3, [r4, #0]
 800bd56:	2b2e      	cmp	r3, #46	; 0x2e
 800bd58:	d10c      	bne.n	800bd74 <_svfiprintf_r+0x130>
 800bd5a:	7863      	ldrb	r3, [r4, #1]
 800bd5c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd5e:	d135      	bne.n	800bdcc <_svfiprintf_r+0x188>
 800bd60:	9b03      	ldr	r3, [sp, #12]
 800bd62:	1d1a      	adds	r2, r3, #4
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	9203      	str	r2, [sp, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	bfb8      	it	lt
 800bd6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd70:	3402      	adds	r4, #2
 800bd72:	9305      	str	r3, [sp, #20]
 800bd74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be40 <_svfiprintf_r+0x1fc>
 800bd78:	7821      	ldrb	r1, [r4, #0]
 800bd7a:	2203      	movs	r2, #3
 800bd7c:	4650      	mov	r0, sl
 800bd7e:	f7f4 fa2f 	bl	80001e0 <memchr>
 800bd82:	b140      	cbz	r0, 800bd96 <_svfiprintf_r+0x152>
 800bd84:	2340      	movs	r3, #64	; 0x40
 800bd86:	eba0 000a 	sub.w	r0, r0, sl
 800bd8a:	fa03 f000 	lsl.w	r0, r3, r0
 800bd8e:	9b04      	ldr	r3, [sp, #16]
 800bd90:	4303      	orrs	r3, r0
 800bd92:	3401      	adds	r4, #1
 800bd94:	9304      	str	r3, [sp, #16]
 800bd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd9a:	4826      	ldr	r0, [pc, #152]	; (800be34 <_svfiprintf_r+0x1f0>)
 800bd9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bda0:	2206      	movs	r2, #6
 800bda2:	f7f4 fa1d 	bl	80001e0 <memchr>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d038      	beq.n	800be1c <_svfiprintf_r+0x1d8>
 800bdaa:	4b23      	ldr	r3, [pc, #140]	; (800be38 <_svfiprintf_r+0x1f4>)
 800bdac:	bb1b      	cbnz	r3, 800bdf6 <_svfiprintf_r+0x1b2>
 800bdae:	9b03      	ldr	r3, [sp, #12]
 800bdb0:	3307      	adds	r3, #7
 800bdb2:	f023 0307 	bic.w	r3, r3, #7
 800bdb6:	3308      	adds	r3, #8
 800bdb8:	9303      	str	r3, [sp, #12]
 800bdba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdbc:	4433      	add	r3, r6
 800bdbe:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc0:	e767      	b.n	800bc92 <_svfiprintf_r+0x4e>
 800bdc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	2001      	movs	r0, #1
 800bdca:	e7a5      	b.n	800bd18 <_svfiprintf_r+0xd4>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	3401      	adds	r4, #1
 800bdd0:	9305      	str	r3, [sp, #20]
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	f04f 0c0a 	mov.w	ip, #10
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdde:	3a30      	subs	r2, #48	; 0x30
 800bde0:	2a09      	cmp	r2, #9
 800bde2:	d903      	bls.n	800bdec <_svfiprintf_r+0x1a8>
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d0c5      	beq.n	800bd74 <_svfiprintf_r+0x130>
 800bde8:	9105      	str	r1, [sp, #20]
 800bdea:	e7c3      	b.n	800bd74 <_svfiprintf_r+0x130>
 800bdec:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e7f0      	b.n	800bdd8 <_svfiprintf_r+0x194>
 800bdf6:	ab03      	add	r3, sp, #12
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	462a      	mov	r2, r5
 800bdfc:	4b0f      	ldr	r3, [pc, #60]	; (800be3c <_svfiprintf_r+0x1f8>)
 800bdfe:	a904      	add	r1, sp, #16
 800be00:	4638      	mov	r0, r7
 800be02:	f3af 8000 	nop.w
 800be06:	1c42      	adds	r2, r0, #1
 800be08:	4606      	mov	r6, r0
 800be0a:	d1d6      	bne.n	800bdba <_svfiprintf_r+0x176>
 800be0c:	89ab      	ldrh	r3, [r5, #12]
 800be0e:	065b      	lsls	r3, r3, #25
 800be10:	f53f af2c 	bmi.w	800bc6c <_svfiprintf_r+0x28>
 800be14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be16:	b01d      	add	sp, #116	; 0x74
 800be18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1c:	ab03      	add	r3, sp, #12
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	462a      	mov	r2, r5
 800be22:	4b06      	ldr	r3, [pc, #24]	; (800be3c <_svfiprintf_r+0x1f8>)
 800be24:	a904      	add	r1, sp, #16
 800be26:	4638      	mov	r0, r7
 800be28:	f7ff faea 	bl	800b400 <_printf_i>
 800be2c:	e7eb      	b.n	800be06 <_svfiprintf_r+0x1c2>
 800be2e:	bf00      	nop
 800be30:	08015a5c 	.word	0x08015a5c
 800be34:	08015a66 	.word	0x08015a66
 800be38:	00000000 	.word	0x00000000
 800be3c:	0800bb8d 	.word	0x0800bb8d
 800be40:	08015a62 	.word	0x08015a62

0800be44 <_read_r>:
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4d07      	ldr	r5, [pc, #28]	; (800be64 <_read_r+0x20>)
 800be48:	4604      	mov	r4, r0
 800be4a:	4608      	mov	r0, r1
 800be4c:	4611      	mov	r1, r2
 800be4e:	2200      	movs	r2, #0
 800be50:	602a      	str	r2, [r5, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	f7f7 f8f0 	bl	8003038 <_read>
 800be58:	1c43      	adds	r3, r0, #1
 800be5a:	d102      	bne.n	800be62 <_read_r+0x1e>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	b103      	cbz	r3, 800be62 <_read_r+0x1e>
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	2000adb8 	.word	0x2000adb8

0800be68 <_raise_r>:
 800be68:	291f      	cmp	r1, #31
 800be6a:	b538      	push	{r3, r4, r5, lr}
 800be6c:	4604      	mov	r4, r0
 800be6e:	460d      	mov	r5, r1
 800be70:	d904      	bls.n	800be7c <_raise_r+0x14>
 800be72:	2316      	movs	r3, #22
 800be74:	6003      	str	r3, [r0, #0]
 800be76:	f04f 30ff 	mov.w	r0, #4294967295
 800be7a:	bd38      	pop	{r3, r4, r5, pc}
 800be7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be7e:	b112      	cbz	r2, 800be86 <_raise_r+0x1e>
 800be80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be84:	b94b      	cbnz	r3, 800be9a <_raise_r+0x32>
 800be86:	4620      	mov	r0, r4
 800be88:	f000 f830 	bl	800beec <_getpid_r>
 800be8c:	462a      	mov	r2, r5
 800be8e:	4601      	mov	r1, r0
 800be90:	4620      	mov	r0, r4
 800be92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be96:	f000 b817 	b.w	800bec8 <_kill_r>
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d00a      	beq.n	800beb4 <_raise_r+0x4c>
 800be9e:	1c59      	adds	r1, r3, #1
 800bea0:	d103      	bne.n	800beaa <_raise_r+0x42>
 800bea2:	2316      	movs	r3, #22
 800bea4:	6003      	str	r3, [r0, #0]
 800bea6:	2001      	movs	r0, #1
 800bea8:	e7e7      	b.n	800be7a <_raise_r+0x12>
 800beaa:	2400      	movs	r4, #0
 800beac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800beb0:	4628      	mov	r0, r5
 800beb2:	4798      	blx	r3
 800beb4:	2000      	movs	r0, #0
 800beb6:	e7e0      	b.n	800be7a <_raise_r+0x12>

0800beb8 <raise>:
 800beb8:	4b02      	ldr	r3, [pc, #8]	; (800bec4 <raise+0xc>)
 800beba:	4601      	mov	r1, r0
 800bebc:	6818      	ldr	r0, [r3, #0]
 800bebe:	f7ff bfd3 	b.w	800be68 <_raise_r>
 800bec2:	bf00      	nop
 800bec4:	20000030 	.word	0x20000030

0800bec8 <_kill_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4d07      	ldr	r5, [pc, #28]	; (800bee8 <_kill_r+0x20>)
 800becc:	2300      	movs	r3, #0
 800bece:	4604      	mov	r4, r0
 800bed0:	4608      	mov	r0, r1
 800bed2:	4611      	mov	r1, r2
 800bed4:	602b      	str	r3, [r5, #0]
 800bed6:	f7f7 f895 	bl	8003004 <_kill>
 800beda:	1c43      	adds	r3, r0, #1
 800bedc:	d102      	bne.n	800bee4 <_kill_r+0x1c>
 800bede:	682b      	ldr	r3, [r5, #0]
 800bee0:	b103      	cbz	r3, 800bee4 <_kill_r+0x1c>
 800bee2:	6023      	str	r3, [r4, #0]
 800bee4:	bd38      	pop	{r3, r4, r5, pc}
 800bee6:	bf00      	nop
 800bee8:	2000adb8 	.word	0x2000adb8

0800beec <_getpid_r>:
 800beec:	f7f7 b882 	b.w	8002ff4 <_getpid>

0800bef0 <_malloc_usable_size_r>:
 800bef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bef4:	1f18      	subs	r0, r3, #4
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	bfbc      	itt	lt
 800befa:	580b      	ldrlt	r3, [r1, r0]
 800befc:	18c0      	addlt	r0, r0, r3
 800befe:	4770      	bx	lr

0800bf00 <_init>:
 800bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf02:	bf00      	nop
 800bf04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf06:	bc08      	pop	{r3}
 800bf08:	469e      	mov	lr, r3
 800bf0a:	4770      	bx	lr

0800bf0c <_fini>:
 800bf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0e:	bf00      	nop
 800bf10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf12:	bc08      	pop	{r3}
 800bf14:	469e      	mov	lr, r3
 800bf16:	4770      	bx	lr

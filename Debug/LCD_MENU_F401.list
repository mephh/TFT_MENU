
LCD_MENU_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007970  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000097ec  08007b10  08007b10  00017b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112fc  080112fc  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080112fc  080112fc  000212fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011304  08011304  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011304  08011304  00021304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011308  08011308  00021308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801130c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a348  2000007c  08011388  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000a3c4  08011388  0003a3c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e51b  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ec  00000000  00000000  0004e5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  000528b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  00053fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2c6  00000000  00000000  00055538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f351  00000000  00000000  000717fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a655f  00000000  00000000  00090b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001370ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a6c  00000000  00000000  00137104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007af8 	.word	0x08007af8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08007af8 	.word	0x08007af8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058a:	4b52      	ldr	r3, [pc, #328]	; (80006d4 <MX_ADC1_Init+0x15c>)
 800058c:	4a52      	ldr	r2, [pc, #328]	; (80006d8 <MX_ADC1_Init+0x160>)
 800058e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000590:	4b50      	ldr	r3, [pc, #320]	; (80006d4 <MX_ADC1_Init+0x15c>)
 8000592:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000596:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000598:	4b4e      	ldr	r3, [pc, #312]	; (80006d4 <MX_ADC1_Init+0x15c>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800059e:	4b4d      	ldr	r3, [pc, #308]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005a4:	4b4b      	ldr	r3, [pc, #300]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b4a      	ldr	r3, [pc, #296]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b2:	4b48      	ldr	r3, [pc, #288]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b8:	4b46      	ldr	r3, [pc, #280]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005ba:	4a48      	ldr	r2, [pc, #288]	; (80006dc <MX_ADC1_Init+0x164>)
 80005bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005be:	4b45      	ldr	r3, [pc, #276]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80005c4:	4b43      	ldr	r3, [pc, #268]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005c6:	2208      	movs	r2, #8
 80005c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ca:	4b42      	ldr	r3, [pc, #264]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d2:	4b40      	ldr	r3, [pc, #256]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d8:	483e      	ldr	r0, [pc, #248]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005da:	f001 fd2b 	bl	8002034 <HAL_ADC_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005e4:	f000 fde6 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005f0:	2307      	movs	r3, #7
 80005f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	4619      	mov	r1, r3
 80005f8:	4836      	ldr	r0, [pc, #216]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80005fa:	f001 fe6d 	bl	80022d8 <HAL_ADC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000604:	f000 fdd6 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000608:	2302      	movs	r3, #2
 800060a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	482f      	ldr	r0, [pc, #188]	; (80006d4 <MX_ADC1_Init+0x15c>)
 8000616:	f001 fe5f 	bl	80022d8 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000620:	f000 fdc8 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000624:	2303      	movs	r3, #3
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000628:	2303      	movs	r3, #3
 800062a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4828      	ldr	r0, [pc, #160]	; (80006d4 <MX_ADC1_Init+0x15c>)
 8000632:	f001 fe51 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800063c:	f000 fdba 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000640:	2304      	movs	r3, #4
 8000642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4619      	mov	r1, r3
 800064c:	4821      	ldr	r0, [pc, #132]	; (80006d4 <MX_ADC1_Init+0x15c>)
 800064e:	f001 fe43 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000658:	f000 fdac 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800065c:	2306      	movs	r3, #6
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000660:	2305      	movs	r3, #5
 8000662:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	481a      	ldr	r0, [pc, #104]	; (80006d4 <MX_ADC1_Init+0x15c>)
 800066a:	f001 fe35 	bl	80022d8 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000674:	f000 fd9e 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000678:	2307      	movs	r3, #7
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800067c:	2306      	movs	r3, #6
 800067e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4813      	ldr	r0, [pc, #76]	; (80006d4 <MX_ADC1_Init+0x15c>)
 8000686:	f001 fe27 	bl	80022d8 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000690:	f000 fd90 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000694:	2308      	movs	r3, #8
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80006a2:	f001 fe19 	bl	80022d8 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80006ac:	f000 fd82 	bl	80011b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006b0:	2309      	movs	r3, #9
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_ADC1_Init+0x15c>)
 80006be:	f001 fe0b 	bl	80022d8 <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80006c8:	f000 fd74 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000a0b8 	.word	0x2000a0b8
 80006d8:	40012000 	.word	0x40012000
 80006dc:	0f000001 	.word	0x0f000001

080006e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3c      	ldr	r2, [pc, #240]	; (80007f0 <HAL_ADC_MspInit+0x110>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d171      	bne.n	80007e6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	4a3a      	ldr	r2, [pc, #232]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 800070c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000710:	6453      	str	r3, [r2, #68]	; 0x44
 8000712:	4b38      	ldr	r3, [pc, #224]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a33      	ldr	r2, [pc, #204]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <HAL_ADC_MspInit+0x114>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000756:	23de      	movs	r3, #222	; 0xde
 8000758:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075a:	2303      	movs	r3, #3
 800075c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	4823      	ldr	r0, [pc, #140]	; (80007f8 <HAL_ADC_MspInit+0x118>)
 800076a:	f002 fcd7 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800076e:	2303      	movs	r3, #3
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000772:	2303      	movs	r3, #3
 8000774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	481e      	ldr	r0, [pc, #120]	; (80007fc <HAL_ADC_MspInit+0x11c>)
 8000782:	f002 fccb 	bl	800311c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <HAL_ADC_MspInit+0x120>)
 8000788:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <HAL_ADC_MspInit+0x124>)
 800078a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <HAL_ADC_MspInit+0x120>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <HAL_ADC_MspInit+0x120>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <HAL_ADC_MspInit+0x120>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007cc:	f002 f936 	bl	8002a3c <HAL_DMA_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80007d6:	f000 fced 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007de:	639a      	str	r2, [r3, #56]	; 0x38
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_ADC_MspInit+0x120>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	; 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40012000 	.word	0x40012000
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40020400 	.word	0x40020400
 8000800:	2000a100 	.word	0x2000a100
 8000804:	40026410 	.word	0x40026410

08000808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_DMA_Init+0x3c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <MX_DMA_Init+0x3c>)
 8000818:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_DMA_Init+0x3c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	203b      	movs	r0, #59	; 0x3b
 8000830:	f002 f8cd 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000834:	203b      	movs	r0, #59	; 0x3b
 8000836:	f002 f8e6 	bl	8002a06 <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b46      	ldr	r3, [pc, #280]	; (800097c <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a45      	ldr	r2, [pc, #276]	; (800097c <MX_GPIO_Init+0x134>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b43      	ldr	r3, [pc, #268]	; (800097c <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b3f      	ldr	r3, [pc, #252]	; (800097c <MX_GPIO_Init+0x134>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a3e      	ldr	r2, [pc, #248]	; (800097c <MX_GPIO_Init+0x134>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b3c      	ldr	r3, [pc, #240]	; (800097c <MX_GPIO_Init+0x134>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a37      	ldr	r2, [pc, #220]	; (800097c <MX_GPIO_Init+0x134>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_GPIO_Init+0x134>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a30      	ldr	r2, [pc, #192]	; (800097c <MX_GPIO_Init+0x134>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_GPIO_Init+0x134>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80008d4:	482a      	ldr	r0, [pc, #168]	; (8000980 <MX_GPIO_Init+0x138>)
 80008d6:	f002 fdbd 	bl	8003454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	4829      	ldr	r0, [pc, #164]	; (8000984 <MX_GPIO_Init+0x13c>)
 80008e0:	f002 fdb8 	bl	8003454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WKUP_Pin;
 80008e4:	2301      	movs	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4821      	ldr	r0, [pc, #132]	; (8000980 <MX_GPIO_Init+0x138>)
 80008fa:	f002 fc0f 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000904:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090a:	2301      	movs	r3, #1
 800090c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	481b      	ldr	r0, [pc, #108]	; (8000984 <MX_GPIO_Init+0x13c>)
 8000916:	f002 fc01 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 800091a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <MX_GPIO_Init+0x138>)
 8000934:	f002 fbf2 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000938:	2340      	movs	r3, #64	; 0x40
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_GPIO_Init+0x13c>)
 8000950:	f002 fbe4 	bl	800311c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2102      	movs	r1, #2
 8000958:	2006      	movs	r0, #6
 800095a:	f002 f838 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800095e:	2006      	movs	r0, #6
 8000960:	f002 f851 	bl	8002a06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2108      	movs	r1, #8
 8000968:	2028      	movs	r0, #40	; 0x28
 800096a:	f002 f830 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800096e:	2028      	movs	r0, #40	; 0x28
 8000970:	f002 f849 	bl	8002a06 <HAL_NVIC_EnableIRQ>

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	; 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000
 8000984:	40020400 	.word	0x40020400

08000988 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_I2C1_Init+0x50>)
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_I2C1_Init+0x54>)
 8000990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_I2C1_Init+0x50>)
 8000994:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_I2C1_Init+0x58>)
 8000996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_I2C1_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009c6:	f002 fd77 	bl	80034b8 <HAL_I2C_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d0:	f000 fbf0 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000a160 	.word	0x2000a160
 80009dc:	40005400 	.word	0x40005400
 80009e0:	000186a0 	.word	0x000186a0

080009e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_I2C_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a22:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <HAL_I2C_MspInit+0x8c>)
 8000a40:	f002 fb6c 	bl	800311c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400

08000a74 <lcd_cmd>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


static void lcd_cmd(uint8_t cmd) //send any command to st7735
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <lcd_cmd+0x40>)
 8000a86:	f002 fce5 	bl	8003454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2140      	movs	r1, #64	; 0x40
 8000a8e:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <lcd_cmd+0x44>)
 8000a90:	f002 fce0 	bl	8003454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000a94:	1df9      	adds	r1, r7, #7
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4807      	ldr	r0, [pc, #28]	; (8000abc <lcd_cmd+0x48>)
 8000a9e:	f003 fcf3 	bl	8004488 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <lcd_cmd+0x44>)
 8000aa8:	f002 fcd4 	bl	8003454 <HAL_GPIO_WritePin>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020400 	.word	0x40020400
 8000abc:	2000a26c 	.word	0x2000a26c

08000ac0 <lcd_data>:

static void lcd_data(uint8_t data)//send data(value for command) to st7735, spi always uses 8bit data
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad0:	480b      	ldr	r0, [pc, #44]	; (8000b00 <lcd_data+0x40>)
 8000ad2:	f002 fcbf 	bl	8003454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	480a      	ldr	r0, [pc, #40]	; (8000b04 <lcd_data+0x44>)
 8000adc:	f002 fcba 	bl	8003454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000ae0:	1df9      	adds	r1, r7, #7
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4807      	ldr	r0, [pc, #28]	; (8000b08 <lcd_data+0x48>)
 8000aea:	f003 fccd 	bl	8004488 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2140      	movs	r1, #64	; 0x40
 8000af2:	4804      	ldr	r0, [pc, #16]	; (8000b04 <lcd_data+0x44>)
 8000af4:	f002 fcae 	bl	8003454 <HAL_GPIO_WritePin>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020400 	.word	0x40020400
 8000b08:	2000a26c 	.word	0x2000a26c

08000b0c <lcd_data16>:

static void lcd_data16(uint16_t value)//function that allows to send 16bit data as 2x 8bit
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ffce 	bl	8000ac0 <lcd_data>
	lcd_data(value);
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ffc9 	bl	8000ac0 <lcd_data>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);	//command to set window columns
 8000b44:	202a      	movs	r0, #42	; 0x2a
 8000b46:	f7ff ff95 	bl	8000a74 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);	//start col
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ffdc 	bl	8000b0c <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);	//end col
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	4413      	add	r3, r2
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	3b01      	subs	r3, #1
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ffd1 	bl	8000b0c <lcd_data16>

	lcd_cmd(ST7735S_RASET);	//command to set window rows
 8000b6a:	202b      	movs	r0, #43	; 0x2b
 8000b6c:	f7ff ff82 	bl	8000a74 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);	//start row
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ffc9 	bl	8000b0c <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height - 1);	//end row
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4413      	add	r3, r2
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	3b01      	subs	r3, #1
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ffbe 	bl	8000b0c <lcd_data16>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <lcd_send>:

static void lcd_send(uint16_t value) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) { //checks if value is a command (9th bit is 1) or data (9th bit is 0)
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <lcd_send+0x20>
		lcd_cmd(value);
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff5f 	bl	8000a74 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8000bb6:	e004      	b.n	8000bc2 <lcd_send+0x2a>
		lcd_data(value);
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff7f 	bl	8000ac0 <lcd_data>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <lcd_init>:
		0x22, 0x1f, 0x1b, 0x23, 0x37, 0x00, 0x07, 0x02, 0x10, CMD(
				ST7735S_GAMCTRN1), 0x0f, 0x1b, 0x0f, 0x17, 0x33, 0x2c, 0x29,
		0x2e, 0x30, 0x30, 0x39, 0x3f, 0x00, 0x07, 0x03, 0x10, CMD(0xf0), 0x01,
		CMD(0xf6), 0x00, CMD(ST7735S_COLMOD), 0x05, CMD(ST7735S_MADCTL), 0x00, };

void lcd_init(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	int i;

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd8:	4817      	ldr	r0, [pc, #92]	; (8000c38 <lcd_init+0x6c>)
 8000bda:	f002 fc3b 	bl	8003454 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000bde:	2064      	movs	r0, #100	; 0x64
 8000be0:	f001 fa04 	bl	8001fec <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bea:	4813      	ldr	r0, [pc, #76]	; (8000c38 <lcd_init+0x6c>)
 8000bec:	f002 fc32 	bl	8003454 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000bf0:	2064      	movs	r0, #100	; 0x64
 8000bf2:	f001 f9fb 	bl	8001fec <HAL_Delay>

	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	e009      	b.n	8000c10 <lcd_init+0x44>
		lcd_send(init_table[i]);
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <lcd_init+0x70>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ffc7 	bl	8000b98 <lcd_send>
	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b4b      	cmp	r3, #75	; 0x4b
 8000c14:	d9f2      	bls.n	8000bfc <lcd_init+0x30>
	}

	HAL_Delay(200);
 8000c16:	20c8      	movs	r0, #200	; 0xc8
 8000c18:	f001 f9e8 	bl	8001fec <HAL_Delay>

	lcd_cmd(ST7735S_SLPOUT);
 8000c1c:	2011      	movs	r0, #17
 8000c1e:	f7ff ff29 	bl	8000a74 <lcd_cmd>
	HAL_Delay(120);
 8000c22:	2078      	movs	r0, #120	; 0x78
 8000c24:	f001 f9e2 	bl	8001fec <HAL_Delay>

	lcd_cmd(ST7735S_DISPON);
 8000c28:	2029      	movs	r0, #41	; 0x29
 8000c2a:	f7ff ff23 	bl	8000a74 <lcd_cmd>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	08007cf0 	.word	0x08007cf0

08000c40 <lcd_put_pixel>:


void lcd_put_pixel(int x, int y, uint16_t color) {
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	01da      	lsls	r2, r3, #7
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4413      	add	r3, r2
 8000c56:	4905      	ldr	r1, [pc, #20]	; (8000c6c <lcd_put_pixel+0x2c>)
 8000c58:	88fa      	ldrh	r2, [r7, #6]
 8000c5a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000098 	.word	0x20000098

08000c70 <lcd_copy>:


void lcd_copy(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000c74:	23a0      	movs	r3, #160	; 0xa0
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff ff5b 	bl	8000b36 <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 8000c80:	202c      	movs	r0, #44	; 0x2c
 8000c82:	f7ff fef7 	bl	8000a74 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c8c:	4807      	ldr	r0, [pc, #28]	; (8000cac <lcd_copy+0x3c>)
 8000c8e:	f002 fbe1 	bl	8003454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2140      	movs	r1, #64	; 0x40
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <lcd_copy+0x40>)
 8000c98:	f002 fbdc 	bl	8003454 <HAL_GPIO_WritePin>
//	HAL_SPI_Transmit(&hspi2, (uint8_t *)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)frame_buffer, sizeof(frame_buffer));
 8000c9c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000ca0:	4904      	ldr	r1, [pc, #16]	; (8000cb4 <lcd_copy+0x44>)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <lcd_copy+0x48>)
 8000ca4:	f003 fd2c 	bl	8004700 <HAL_SPI_Transmit_DMA>
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	20000098 	.word	0x20000098
 8000cb8:	2000a26c 	.word	0x2000a26c

08000cbc <lcd_transfer_done>:


void lcd_transfer_done(void){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2140      	movs	r1, #64	; 0x40
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <lcd_transfer_done+0x14>)
 8000cc6:	f002 fbc5 	bl	8003454 <HAL_GPIO_WritePin>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40020400 	.word	0x40020400

08000cd4 <__io_putchar>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int __io_putchar(int ch)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b0a      	cmp	r3, #10
 8000ce0:	d102      	bne.n	8000ce8 <__io_putchar+0x14>
    __io_putchar('\r');
 8000ce2:	200d      	movs	r0, #13
 8000ce4:	f7ff fff6 	bl	8000cd4 <__io_putchar>
  }

  HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ce8:	1d39      	adds	r1, r7, #4
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <__io_putchar+0x2c>)
 8000cf2:	f004 f9b0 	bl	8005056 <HAL_UART_Transmit>

  return 1;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000a36c 	.word	0x2000a36c

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0a:	f001 f8fd 	bl	8001f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0e:	f000 f9b5 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d12:	f7ff fd99 	bl	8000848 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d16:	f7ff fd77 	bl	8000808 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d1a:	f000 fd1f 	bl	800175c <MX_SPI1_Init>
  MX_ADC1_Init();
 8000d1e:	f7ff fc2b 	bl	8000578 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d22:	f7ff fe31 	bl	8000988 <MX_I2C1_Init>
  MX_RTC_Init();
 8000d26:	f000 fcc7 	bl	80016b8 <MX_RTC_Init>
  MX_SPI2_Init();
 8000d2a:	f000 fd4d 	bl	80017c8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000d2e:	f000 ff97 	bl	8001c60 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000d32:	f001 f84d 	bl	8001dd0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  	printf("Starting..\n");
 8000d36:	489b      	ldr	r0, [pc, #620]	; (8000fa4 <main+0x2a0>)
 8000d38:	f006 fb2a 	bl	8007390 <puts>
  	fflush(stdout);
 8000d3c:	4b9a      	ldr	r3, [pc, #616]	; (8000fa8 <main+0x2a4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f005 fd62 	bl	800680c <fflush>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensor_data,
 8000d48:	2208      	movs	r2, #8
 8000d4a:	4998      	ldr	r1, [pc, #608]	; (8000fac <main+0x2a8>)
 8000d4c:	4898      	ldr	r0, [pc, #608]	; (8000fb0 <main+0x2ac>)
 8000d4e:	f001 f9b5 	bl	80020bc <HAL_ADC_Start_DMA>
			sizeof(sensor_data) / sizeof(int16_t));
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000d52:	213c      	movs	r1, #60	; 0x3c
 8000d54:	4897      	ldr	r0, [pc, #604]	; (8000fb4 <main+0x2b0>)
 8000d56:	f003 ff8f 	bl	8004c78 <HAL_TIM_Encoder_Start>
	//start LCD
	lcd_init();
 8000d5a:	f7ff ff37 	bl	8000bcc <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (activeScreen) {
 8000d5e:	4b96      	ldr	r3, [pc, #600]	; (8000fb8 <main+0x2b4>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	f200 80c2 	bhi.w	8000eee <main+0x1ea>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <main+0x6c>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000d81 	.word	0x08000d81
 8000d74:	08000da9 	.word	0x08000da9
 8000d78:	08000e23 	.word	0x08000e23
 8000d7c:	08000e89 	.word	0x08000e89
		case 0:
			show_sensor_data(sensor_data, activeChannels);
 8000d80:	4b8e      	ldr	r3, [pc, #568]	; (8000fbc <main+0x2b8>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	4889      	ldr	r0, [pc, #548]	; (8000fac <main+0x2a8>)
 8000d88:	f000 fbb0 	bl	80014ec <show_sensor_data>
			HAL_Delay(1000);
 8000d8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d90:	f001 f92c 	bl	8001fec <HAL_Delay>
			printf("Sensor data case executed.\n");
 8000d94:	488a      	ldr	r0, [pc, #552]	; (8000fc0 <main+0x2bc>)
 8000d96:	f006 fafb 	bl	8007390 <puts>
			fflush(stdout);
 8000d9a:	4b83      	ldr	r3, [pc, #524]	; (8000fa8 <main+0x2a4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f005 fd33 	bl	800680c <fflush>
			break;
 8000da6:	e0a2      	b.n	8000eee <main+0x1ea>
		case 1:
			currentItem = (__HAL_TIM_GET_COUNTER(&htim2)>>1) % menuMaxIndex;
 8000da8:	4b82      	ldr	r3, [pc, #520]	; (8000fb4 <main+0x2b0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	085b      	lsrs	r3, r3, #1
 8000db0:	4a84      	ldr	r2, [pc, #528]	; (8000fc4 <main+0x2c0>)
 8000db2:	8812      	ldrh	r2, [r2, #0]
 8000db4:	b212      	sxth	r2, r2
 8000db6:	fbb3 f1f2 	udiv	r1, r3, r2
 8000dba:	fb02 f201 	mul.w	r2, r2, r1
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b81      	ldr	r3, [pc, #516]	; (8000fc8 <main+0x2c4>)
 8000dc4:	701a      	strb	r2, [r3, #0]
			assert(currentItem <= menuMaxIndex-1);
 8000dc6:	4b7f      	ldr	r3, [pc, #508]	; (8000fc4 <main+0x2c0>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b7e      	ldr	r3, [pc, #504]	; (8000fc8 <main+0x2c4>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	dc05      	bgt.n	8000de2 <main+0xde>
 8000dd6:	4b7d      	ldr	r3, [pc, #500]	; (8000fcc <main+0x2c8>)
 8000dd8:	4a7d      	ldr	r2, [pc, #500]	; (8000fd0 <main+0x2cc>)
 8000dda:	219a      	movs	r1, #154	; 0x9a
 8000ddc:	487d      	ldr	r0, [pc, #500]	; (8000fd4 <main+0x2d0>)
 8000dde:	f005 fc2f 	bl	8006640 <__assert_func>
			show_menu_window();
 8000de2:	f000 f9ed 	bl	80011c0 <show_menu_window>
			deselect_item(previousItem);
 8000de6:	4b7c      	ldr	r3, [pc, #496]	; (8000fd8 <main+0x2d4>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fc3b 	bl	8001666 <deselect_item>
			select_item(currentItem);
 8000df0:	4b75      	ldr	r3, [pc, #468]	; (8000fc8 <main+0x2c4>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fc0d 	bl	8001614 <select_item>
			if (previousItem != currentItem) {
 8000dfa:	4b77      	ldr	r3, [pc, #476]	; (8000fd8 <main+0x2d4>)
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	4b72      	ldr	r3, [pc, #456]	; (8000fc8 <main+0x2c4>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d003      	beq.n	8000e0e <main+0x10a>
				previousItem = currentItem;
 8000e06:	4b70      	ldr	r3, [pc, #448]	; (8000fc8 <main+0x2c4>)
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	4b73      	ldr	r3, [pc, #460]	; (8000fd8 <main+0x2d4>)
 8000e0c:	701a      	strb	r2, [r3, #0]
			}
			printf("Main menu case executed..\n");
 8000e0e:	4873      	ldr	r0, [pc, #460]	; (8000fdc <main+0x2d8>)
 8000e10:	f006 fabe 	bl	8007390 <puts>
			fflush(stdout);
 8000e14:	4b64      	ldr	r3, [pc, #400]	; (8000fa8 <main+0x2a4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f005 fcf6 	bl	800680c <fflush>
			break;
 8000e20:	e065      	b.n	8000eee <main+0x1ea>
		case 2:
			activeChannels = __HAL_TIM_GET_COUNTER(&htim2)>>1;
 8000e22:	4b64      	ldr	r3, [pc, #400]	; (8000fb4 <main+0x2b0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	085b      	lsrs	r3, r3, #1
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b63      	ldr	r3, [pc, #396]	; (8000fbc <main+0x2b8>)
 8000e2e:	701a      	strb	r2, [r3, #0]
			if (activeChannels < 1){
 8000e30:	4b62      	ldr	r3, [pc, #392]	; (8000fbc <main+0x2b8>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d106      	bne.n	8000e46 <main+0x142>
				activeChannels = 1;
 8000e38:	4b60      	ldr	r3, [pc, #384]	; (8000fbc <main+0x2b8>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 2);
 8000e3e:	4b5d      	ldr	r3, [pc, #372]	; (8000fb4 <main+0x2b0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2202      	movs	r2, #2
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (activeChannels > 8) {
 8000e46:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <main+0x2b8>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b08      	cmp	r3, #8
 8000e4c:	d906      	bls.n	8000e5c <main+0x158>
				activeChannels = 8;
 8000e4e:	4b5b      	ldr	r3, [pc, #364]	; (8000fbc <main+0x2b8>)
 8000e50:	2208      	movs	r2, #8
 8000e52:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 16);
 8000e54:	4b57      	ldr	r3, [pc, #348]	; (8000fb4 <main+0x2b0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2210      	movs	r2, #16
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
			}
			update_channels_value(activeChannels, rgb565(200, 200, 200));
 8000e5c:	4b57      	ldr	r3, [pc, #348]	; (8000fbc <main+0x2b8>)
 8000e5e:	781c      	ldrb	r4, [r3, #0]
 8000e60:	22c8      	movs	r2, #200	; 0xc8
 8000e62:	21c8      	movs	r1, #200	; 0xc8
 8000e64:	20c8      	movs	r0, #200	; 0xc8
 8000e66:	f005 fbb9 	bl	80065dc <rgb565>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f000 fa4c 	bl	800130c <update_channels_value>
			printf("Active channels case executed..\n");
 8000e74:	485a      	ldr	r0, [pc, #360]	; (8000fe0 <main+0x2dc>)
 8000e76:	f006 fa8b 	bl	8007390 <puts>
			fflush(stdout);
 8000e7a:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <main+0x2a4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f005 fcc3 	bl	800680c <fflush>
			break;
 8000e86:	e032      	b.n	8000eee <main+0x1ea>
		case 3:
			oversamplingPrescaler = __HAL_TIM_GET_COUNTER(&htim2)>>1;
 8000e88:	4b4a      	ldr	r3, [pc, #296]	; (8000fb4 <main+0x2b0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8e:	085b      	lsrs	r3, r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b54      	ldr	r3, [pc, #336]	; (8000fe4 <main+0x2e0>)
 8000e94:	701a      	strb	r2, [r3, #0]
			if (oversamplingPrescaler < 1) {
 8000e96:	4b53      	ldr	r3, [pc, #332]	; (8000fe4 <main+0x2e0>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <main+0x1a8>
				oversamplingPrescaler = 1;
 8000e9e:	4b51      	ldr	r3, [pc, #324]	; (8000fe4 <main+0x2e0>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 2);
 8000ea4:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <main+0x2b0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (oversamplingPrescaler > 15) {
 8000eac:	4b4d      	ldr	r3, [pc, #308]	; (8000fe4 <main+0x2e0>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d906      	bls.n	8000ec2 <main+0x1be>
				oversamplingPrescaler = 15;
 8000eb4:	4b4b      	ldr	r3, [pc, #300]	; (8000fe4 <main+0x2e0>)
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 30);
 8000eba:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <main+0x2b0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	221e      	movs	r2, #30
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
			}
			update_oversampling_prescaler(oversamplingPrescaler, rgb565(220, 220, 220));
 8000ec2:	4b48      	ldr	r3, [pc, #288]	; (8000fe4 <main+0x2e0>)
 8000ec4:	781c      	ldrb	r4, [r3, #0]
 8000ec6:	22dc      	movs	r2, #220	; 0xdc
 8000ec8:	21dc      	movs	r1, #220	; 0xdc
 8000eca:	20dc      	movs	r0, #220	; 0xdc
 8000ecc:	f005 fb86 	bl	80065dc <rgb565>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	f000 fa7f 	bl	80013d8 <update_oversampling_prescaler>
			printf("Oversampling case executed...\n");
 8000eda:	4843      	ldr	r0, [pc, #268]	; (8000fe8 <main+0x2e4>)
 8000edc:	f006 fa58 	bl	8007390 <puts>
			fflush(stdout);
 8000ee0:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <main+0x2a4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f005 fc90 	bl	800680c <fflush>
			break;
 8000eec:	bf00      	nop
		}
		if (encoderBtnFlag) {
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <main+0x2e8>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 8085 	beq.w	8001004 <main+0x300>
			encoderBtnFlag = 0;
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <main+0x2e8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
			switch (activeScreen) {
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <main+0x2b4>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d872      	bhi.n	8000ff0 <main+0x2ec>
 8000f0a:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <main+0x20c>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f21 	.word	0x08000f21
 8000f14:	08000f31 	.word	0x08000f31
 8000f18:	08000f83 	.word	0x08000f83
 8000f1c:	08000f93 	.word	0x08000f93
			case 0: //sensor to menu
				__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f20:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <main+0x2b0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 8000f28:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <main+0x2b4>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
				break;
 8000f2e:	e060      	b.n	8000ff2 <main+0x2ee>
			case 1:	//menu to ...
				//menu to sensor
				if (currentItem == (menuMaxIndex - 1)) {
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <main+0x2c4>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <main+0x2c0>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d103      	bne.n	8000f4a <main+0x246>
					activeScreen = 0;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <main+0x2b4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
					break;
 8000f48:	e053      	b.n	8000ff2 <main+0x2ee>
				}
				//menu to activechannels
				else if (currentItem == 0) {
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <main+0x2c4>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d109      	bne.n	8000f66 <main+0x262>
					__HAL_TIM_GET_COUNTER(&htim2) = activeChannels*2; //you can't assign value to shifted value, hence no >> is used, silly me tried..
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <main+0x2b8>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	005a      	lsls	r2, r3, #1
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <main+0x2b0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 2;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <main+0x2b4>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	701a      	strb	r2, [r3, #0]
					break;
 8000f64:	e045      	b.n	8000ff2 <main+0x2ee>
				}
				else if (currentItem == 1) {
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <main+0x2c4>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d109      	bne.n	8000f82 <main+0x27e>
					__HAL_TIM_GET_COUNTER(&htim2) = oversamplingPrescaler*2; //you can't assign value to shifted value, hence no >> is used, silly me tried..
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <main+0x2e0>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	005a      	lsls	r2, r3, #1
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <main+0x2b0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 3;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <main+0x2b4>)
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	701a      	strb	r2, [r3, #0]
					break;
 8000f80:	e037      	b.n	8000ff2 <main+0x2ee>
				}
			case 2:
				__HAL_TIM_GET_COUNTER(&htim2) = 0;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <main+0x2b0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <main+0x2b4>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
				break;
 8000f90:	e02f      	b.n	8000ff2 <main+0x2ee>
			case 3:
				__HAL_TIM_GET_COUNTER(&htim2) = 0;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <main+0x2b0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <main+0x2b4>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
				break;
 8000fa0:	e027      	b.n	8000ff2 <main+0x2ee>
 8000fa2:	bf00      	nop
 8000fa4:	08007b10 	.word	0x08007b10
 8000fa8:	20000018 	.word	0x20000018
 8000fac:	2000a1b4 	.word	0x2000a1b4
 8000fb0:	2000a0b8 	.word	0x2000a0b8
 8000fb4:	2000a324 	.word	0x2000a324
 8000fb8:	2000a098 	.word	0x2000a098
 8000fbc:	20000002 	.word	0x20000002
 8000fc0:	08007b1c 	.word	0x08007b1c
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	2000a1c6 	.word	0x2000a1c6
 8000fcc:	08007b38 	.word	0x08007b38
 8000fd0:	0800ad40 	.word	0x0800ad40
 8000fd4:	08007b58 	.word	0x08007b58
 8000fd8:	2000a1c4 	.word	0x2000a1c4
 8000fdc:	08007b6c 	.word	0x08007b6c
 8000fe0:	08007b88 	.word	0x08007b88
 8000fe4:	20000003 	.word	0x20000003
 8000fe8:	08007ba8 	.word	0x08007ba8
 8000fec:	2000a1c5 	.word	0x2000a1c5
			default:
				break;
 8000ff0:	bf00      	nop
			}
			printf("Button interrupt executed....\n");
 8000ff2:	481a      	ldr	r0, [pc, #104]	; (800105c <main+0x358>)
 8000ff4:	f006 f9cc 	bl	8007390 <puts>
			fflush(stdout);
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <main+0x35c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f005 fc04 	bl	800680c <fflush>
		}

		snprintf(debug_text, 25, "MENU:%u | active:%d", currentItem,
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <main+0x360>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <main+0x364>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	4613      	mov	r3, r2
 8001014:	4a15      	ldr	r2, [pc, #84]	; (800106c <main+0x368>)
 8001016:	2119      	movs	r1, #25
 8001018:	4815      	ldr	r0, [pc, #84]	; (8001070 <main+0x36c>)
 800101a:	f006 f9d1 	bl	80073c0 <sniprintf>
				activeScreen);
		hagl_put_text(debug_text, 10, 145, rgb565(245, 245, 255), font6x9);
 800101e:	22ff      	movs	r2, #255	; 0xff
 8001020:	21f5      	movs	r1, #245	; 0xf5
 8001022:	20f5      	movs	r0, #245	; 0xf5
 8001024:	f005 fada 	bl	80065dc <rgb565>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <main+0x370>)
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4613      	mov	r3, r2
 8001032:	2291      	movs	r2, #145	; 0x91
 8001034:	210a      	movs	r1, #10
 8001036:	480e      	ldr	r0, [pc, #56]	; (8001070 <main+0x36c>)
 8001038:	f005 f886 	bl	8006148 <hagl_put_text>
		lcd_copy();
 800103c:	f7ff fe18 	bl	8000c70 <lcd_copy>
		printf("Main while loop executed.............................\n");
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <main+0x374>)
 8001042:	f006 f9a5 	bl	8007390 <puts>
		fflush(stdout);
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <main+0x35c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4618      	mov	r0, r3
 800104e:	f005 fbdd 	bl	800680c <fflush>
		HAL_Delay(100);
 8001052:	2064      	movs	r0, #100	; 0x64
 8001054:	f000 ffca 	bl	8001fec <HAL_Delay>
		switch (activeScreen) {
 8001058:	e681      	b.n	8000d5e <main+0x5a>
 800105a:	bf00      	nop
 800105c:	08007bc8 	.word	0x08007bc8
 8001060:	20000018 	.word	0x20000018
 8001064:	2000a1c6 	.word	0x2000a1c6
 8001068:	2000a098 	.word	0x2000a098
 800106c:	08007be8 	.word	0x08007be8
 8001070:	2000a1c8 	.word	0x2000a1c8
 8001074:	08007d88 	.word	0x08007d88
 8001078:	08007bfc 	.word	0x08007bfc

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2230      	movs	r2, #48	; 0x30
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f005 fd72 	bl	8006b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4b29      	ldr	r3, [pc, #164]	; (800114c <SystemClock_Config+0xd0>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	4a28      	ldr	r2, [pc, #160]	; (800114c <SystemClock_Config+0xd0>)
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <SystemClock_Config+0xd0>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <SystemClock_Config+0xd4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c8:	4a21      	ldr	r2, [pc, #132]	; (8001150 <SystemClock_Config+0xd4>)
 80010ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <SystemClock_Config+0xd4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010dc:	230a      	movs	r3, #10
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e4:	2310      	movs	r3, #16
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ec:	2302      	movs	r3, #2
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010f4:	2308      	movs	r3, #8
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80010f8:	2354      	movs	r3, #84	; 0x54
 80010fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	4618      	mov	r0, r3
 800110a:	f002 fb19 	bl	8003740 <HAL_RCC_OscConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001114:	f000 f84e 	bl	80011b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001118:	230f      	movs	r3, #15
 800111a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	2302      	movs	r3, #2
 800111e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2102      	movs	r1, #2
 8001134:	4618      	mov	r0, r3
 8001136:	f002 fd7b 	bl	8003c30 <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001140:	f000 f838 	bl	80011b4 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3750      	adds	r7, #80	; 0x50
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
if (hspi == &hspi1) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_SPI_TxCpltCallback+0x1c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d101      	bne.n	8001168 <HAL_SPI_TxCpltCallback+0x14>
	lcd_transfer_done();
 8001164:	f7ff fdaa 	bl	8000cbc <lcd_transfer_done>
}
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000a26c 	.word	0x2000a26c

08001174 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
if (GPIO_Pin == ENC_BTN_Pin) {
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001184:	d10e      	bne.n	80011a4 <HAL_GPIO_EXTI_Callback+0x30>
	while (HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_RESET) {
 8001186:	bf00      	nop
 8001188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <HAL_GPIO_EXTI_Callback+0x38>)
 800118e:	f002 f949 	bl	8003424 <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f7      	beq.n	8001188 <HAL_GPIO_EXTI_Callback+0x14>

	}
	HAL_Delay(50); //basic debounce
 8001198:	2032      	movs	r0, #50	; 0x32
 800119a:	f000 ff27 	bl	8001fec <HAL_Delay>
	encoderBtnFlag = 1;
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
}
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40020400 	.word	0x40020400
 80011b0:	2000a1c5 	.word	0x2000a1c5

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 80011bc:	e7fe      	b.n	80011bc <Error_Handler+0x8>
	...

080011c0 <show_menu_window>:

char text_to_parse[16];
static uint16_t ch_buffer[4];
static uint16_t os_buffer[4];

void show_menu_window() {
 80011c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af02      	add	r7, sp, #8
	hagl_clear_screen();
 80011c8:	f005 f844 	bl	8006254 <hagl_clear_screen>

	for (int i = 0; i < 5; ++i) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	e028      	b.n	8001224 <show_menu_window+0x64>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	b21d      	sxth	r5, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	b21e      	sxth	r6, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	fa0f f883 	sxth.w	r8, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	fa0f f983 	sxth.w	r9, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	f1c3 0305 	rsb	r3, r3, #5
 80011fe:	b29b      	uxth	r3, r3
 8001200:	b21c      	sxth	r4, r3
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	20ff      	movs	r0, #255	; 0xff
 8001208:	f005 f9e8 	bl	80065dc <rgb565>
 800120c:	4603      	mov	r3, r0
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	9400      	str	r4, [sp, #0]
 8001212:	464b      	mov	r3, r9
 8001214:	4642      	mov	r2, r8
 8001216:	4631      	mov	r1, r6
 8001218:	4628      	mov	r0, r5
 800121a:	f005 f845 	bl	80062a8 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3301      	adds	r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b04      	cmp	r3, #4
 8001228:	ddd3      	ble.n	80011d2 <show_menu_window+0x12>
				rgb565(255, 0, 0));
	}
	hagl_put_text("USTAWIENIA", 10, 10, rgb565(255, 0, 0), font6x9);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	20ff      	movs	r0, #255	; 0xff
 8001230:	f005 f9d4 	bl	80065dc <rgb565>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <show_menu_window+0x12c>)
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	220a      	movs	r2, #10
 8001240:	210a      	movs	r1, #10
 8001242:	482b      	ldr	r0, [pc, #172]	; (80012f0 <show_menu_window+0x130>)
 8001244:	f004 ff80 	bl	8006148 <hagl_put_text>
	hagl_put_text("Ilosc kanalow:", 10, 30, rgb565(0, 102, 204), font5x7);
 8001248:	22cc      	movs	r2, #204	; 0xcc
 800124a:	2166      	movs	r1, #102	; 0x66
 800124c:	2000      	movs	r0, #0
 800124e:	f005 f9c5 	bl	80065dc <rgb565>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <show_menu_window+0x134>)
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4613      	mov	r3, r2
 800125c:	221e      	movs	r2, #30
 800125e:	210a      	movs	r1, #10
 8001260:	4825      	ldr	r0, [pc, #148]	; (80012f8 <show_menu_window+0x138>)
 8001262:	f004 ff71 	bl	8006148 <hagl_put_text>
	hagl_put_text("Oversampling:", 10, 50, rgb565(0, 102, 204), font5x7);
 8001266:	22cc      	movs	r2, #204	; 0xcc
 8001268:	2166      	movs	r1, #102	; 0x66
 800126a:	2000      	movs	r0, #0
 800126c:	f005 f9b6 	bl	80065dc <rgb565>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <show_menu_window+0x134>)
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	4613      	mov	r3, r2
 800127a:	2232      	movs	r2, #50	; 0x32
 800127c:	210a      	movs	r1, #10
 800127e:	481f      	ldr	r0, [pc, #124]	; (80012fc <show_menu_window+0x13c>)
 8001280:	f004 ff62 	bl	8006148 <hagl_put_text>
	hagl_put_text("Kalibracja", 10, 70, rgb565(0, 102, 204), font5x7);
 8001284:	22cc      	movs	r2, #204	; 0xcc
 8001286:	2166      	movs	r1, #102	; 0x66
 8001288:	2000      	movs	r0, #0
 800128a:	f005 f9a7 	bl	80065dc <rgb565>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <show_menu_window+0x134>)
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	4613      	mov	r3, r2
 8001298:	2246      	movs	r2, #70	; 0x46
 800129a:	210a      	movs	r1, #10
 800129c:	4818      	ldr	r0, [pc, #96]	; (8001300 <show_menu_window+0x140>)
 800129e:	f004 ff53 	bl	8006148 <hagl_put_text>
	hagl_put_text("Inne", 10, 90, rgb565(0, 102, 204), font5x7);
 80012a2:	22cc      	movs	r2, #204	; 0xcc
 80012a4:	2166      	movs	r1, #102	; 0x66
 80012a6:	2000      	movs	r0, #0
 80012a8:	f005 f998 	bl	80065dc <rgb565>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <show_menu_window+0x134>)
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	4613      	mov	r3, r2
 80012b6:	225a      	movs	r2, #90	; 0x5a
 80012b8:	210a      	movs	r1, #10
 80012ba:	4812      	ldr	r0, [pc, #72]	; (8001304 <show_menu_window+0x144>)
 80012bc:	f004 ff44 	bl	8006148 <hagl_put_text>
	hagl_put_text("Powrot", 10, 110, rgb565(102, 255, 102), font5x7);
 80012c0:	2266      	movs	r2, #102	; 0x66
 80012c2:	21ff      	movs	r1, #255	; 0xff
 80012c4:	2066      	movs	r0, #102	; 0x66
 80012c6:	f005 f989 	bl	80065dc <rgb565>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <show_menu_window+0x134>)
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	4613      	mov	r3, r2
 80012d4:	226e      	movs	r2, #110	; 0x6e
 80012d6:	210a      	movs	r1, #10
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <show_menu_window+0x148>)
 80012da:	f004 ff35 	bl	8006148 <hagl_put_text>
	lcd_copy();
 80012de:	f7ff fcc7 	bl	8000c70 <lcd_copy>
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012ec:	0800ad48 	.word	0x0800ad48
 80012f0:	08007c34 	.word	0x08007c34
 80012f4:	0800dd00 	.word	0x0800dd00
 80012f8:	08007c40 	.word	0x08007c40
 80012fc:	08007c50 	.word	0x08007c50
 8001300:	08007c60 	.word	0x08007c60
 8001304:	08007c6c 	.word	0x08007c6c
 8001308:	08007c74 	.word	0x08007c74

0800130c <update_channels_value>:

void update_channels_value(uint8_t activeChannels, uint16_t color) {
 800130c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001310:	b087      	sub	sp, #28
 8001312:	af02      	add	r7, sp, #8
 8001314:	4603      	mov	r3, r0
 8001316:	460a      	mov	r2, r1
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	4613      	mov	r3, r2
 800131c:	80bb      	strh	r3, [r7, #4]
	hagl_clear_screen();
 800131e:	f004 ff99 	bl	8006254 <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	e028      	b.n	800137a <update_channels_value+0x6e>
			hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	b21d      	sxth	r5, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	b21e      	sxth	r6, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	b29b      	uxth	r3, r3
 8001334:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001338:	b29b      	uxth	r3, r3
 800133a:	fa0f f883 	sxth.w	r8, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	b29b      	uxth	r3, r3
 8001342:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001346:	b29b      	uxth	r3, r3
 8001348:	fa0f f983 	sxth.w	r9, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	b29b      	uxth	r3, r3
 8001350:	f1c3 0305 	rsb	r3, r3, #5
 8001354:	b29b      	uxth	r3, r3
 8001356:	b21c      	sxth	r4, r3
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	20ff      	movs	r0, #255	; 0xff
 800135e:	f005 f93d 	bl	80065dc <rgb565>
 8001362:	4603      	mov	r3, r0
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	9400      	str	r4, [sp, #0]
 8001368:	464b      	mov	r3, r9
 800136a:	4642      	mov	r2, r8
 800136c:	4631      	mov	r1, r6
 800136e:	4628      	mov	r0, r5
 8001370:	f004 ff9a 	bl	80062a8 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b04      	cmp	r3, #4
 800137e:	ddd3      	ble.n	8001328 <update_channels_value+0x1c>
					rgb565(255, 0, 0));
		}
	hagl_put_text("AKTYWNE KANALY", 20, 10, rgb565(255, 0, 0), font6x9);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	20ff      	movs	r0, #255	; 0xff
 8001386:	f005 f929 	bl	80065dc <rgb565>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <update_channels_value+0xbc>)
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	4613      	mov	r3, r2
 8001394:	220a      	movs	r2, #10
 8001396:	2114      	movs	r1, #20
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <update_channels_value+0xc0>)
 800139a:	f004 fed5 	bl	8006148 <hagl_put_text>
	snprintf(ch_buffer, 4, "%u", activeChannels);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <update_channels_value+0xc4>)
 80013a2:	2104      	movs	r1, #4
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <update_channels_value+0xc8>)
 80013a6:	f006 f80b 	bl	80073c0 <sniprintf>
	hagl_put_text((char *)ch_buffer, 60, 50, color, font6x9);
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <update_channels_value+0xbc>)
 80013ae:	9200      	str	r2, [sp, #0]
 80013b0:	2232      	movs	r2, #50	; 0x32
 80013b2:	213c      	movs	r1, #60	; 0x3c
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <update_channels_value+0xc8>)
 80013b6:	f004 fec7 	bl	8006148 <hagl_put_text>
	lcd_copy();
 80013ba:	f7ff fc59 	bl	8000c70 <lcd_copy>
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013c8:	0800ad48 	.word	0x0800ad48
 80013cc:	08007c7c 	.word	0x08007c7c
 80013d0:	08007c8c 	.word	0x08007c8c
 80013d4:	2000a09c 	.word	0x2000a09c

080013d8 <update_oversampling_prescaler>:

void update_oversampling_prescaler(uint8_t oversamplingPrescaler, uint16_t color) {
 80013d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013dc:	b087      	sub	sp, #28
 80013de:	af02      	add	r7, sp, #8
 80013e0:	4603      	mov	r3, r0
 80013e2:	460a      	mov	r2, r1
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	4613      	mov	r3, r2
 80013e8:	80bb      	strh	r3, [r7, #4]
	hagl_clear_screen();
 80013ea:	f004 ff33 	bl	8006254 <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e028      	b.n	8001446 <update_oversampling_prescaler+0x6e>
			hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	b21d      	sxth	r5, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	b21e      	sxth	r6, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001404:	b29b      	uxth	r3, r3
 8001406:	fa0f f883 	sxth.w	r8, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	b29b      	uxth	r3, r3
 800140e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001412:	b29b      	uxth	r3, r3
 8001414:	fa0f f983 	sxth.w	r9, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	b29b      	uxth	r3, r3
 800141c:	f1c3 0305 	rsb	r3, r3, #5
 8001420:	b29b      	uxth	r3, r3
 8001422:	b21c      	sxth	r4, r3
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	20ff      	movs	r0, #255	; 0xff
 800142a:	f005 f8d7 	bl	80065dc <rgb565>
 800142e:	4603      	mov	r3, r0
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	9400      	str	r4, [sp, #0]
 8001434:	464b      	mov	r3, r9
 8001436:	4642      	mov	r2, r8
 8001438:	4631      	mov	r1, r6
 800143a:	4628      	mov	r0, r5
 800143c:	f004 ff34 	bl	80062a8 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b04      	cmp	r3, #4
 800144a:	ddd3      	ble.n	80013f4 <update_oversampling_prescaler+0x1c>
					rgb565(255, 0, 0));
		}
	hagl_put_text("OVERSAMPLING", 30, 10, rgb565(255, 0, 0), font6x9);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	20ff      	movs	r0, #255	; 0xff
 8001452:	f005 f8c3 	bl	80065dc <rgb565>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <update_oversampling_prescaler+0xf8>)
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	4613      	mov	r3, r2
 8001460:	220a      	movs	r2, #10
 8001462:	211e      	movs	r1, #30
 8001464:	481b      	ldr	r0, [pc, #108]	; (80014d4 <update_oversampling_prescaler+0xfc>)
 8001466:	f004 fe6f 	bl	8006148 <hagl_put_text>
	hagl_put_text("Wybierz z ilu probek ", 15, 30, rgb565(0, 102, 204), font5x7);
 800146a:	22cc      	movs	r2, #204	; 0xcc
 800146c:	2166      	movs	r1, #102	; 0x66
 800146e:	2000      	movs	r0, #0
 8001470:	f005 f8b4 	bl	80065dc <rgb565>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <update_oversampling_prescaler+0x100>)
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4613      	mov	r3, r2
 800147e:	221e      	movs	r2, #30
 8001480:	210f      	movs	r1, #15
 8001482:	4816      	ldr	r0, [pc, #88]	; (80014dc <update_oversampling_prescaler+0x104>)
 8001484:	f004 fe60 	bl	8006148 <hagl_put_text>
	hagl_put_text("  usredniac pomiar", 15, 40, rgb565(0, 102, 204), font5x7);
 8001488:	22cc      	movs	r2, #204	; 0xcc
 800148a:	2166      	movs	r1, #102	; 0x66
 800148c:	2000      	movs	r0, #0
 800148e:	f005 f8a5 	bl	80065dc <rgb565>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <update_oversampling_prescaler+0x100>)
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	4613      	mov	r3, r2
 800149c:	2228      	movs	r2, #40	; 0x28
 800149e:	210f      	movs	r1, #15
 80014a0:	480f      	ldr	r0, [pc, #60]	; (80014e0 <update_oversampling_prescaler+0x108>)
 80014a2:	f004 fe51 	bl	8006148 <hagl_put_text>
	snprintf(os_buffer, 4, "%u", oversamplingPrescaler);
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <update_oversampling_prescaler+0x10c>)
 80014aa:	2104      	movs	r1, #4
 80014ac:	480e      	ldr	r0, [pc, #56]	; (80014e8 <update_oversampling_prescaler+0x110>)
 80014ae:	f005 ff87 	bl	80073c0 <sniprintf>
	hagl_put_text((char *)os_buffer, 60, 70, color, font6x9);
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <update_oversampling_prescaler+0xf8>)
 80014b6:	9200      	str	r2, [sp, #0]
 80014b8:	2246      	movs	r2, #70	; 0x46
 80014ba:	213c      	movs	r1, #60	; 0x3c
 80014bc:	480a      	ldr	r0, [pc, #40]	; (80014e8 <update_oversampling_prescaler+0x110>)
 80014be:	f004 fe43 	bl	8006148 <hagl_put_text>
	lcd_copy();
 80014c2:	f7ff fbd5 	bl	8000c70 <lcd_copy>
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014d0:	0800ad48 	.word	0x0800ad48
 80014d4:	08007c90 	.word	0x08007c90
 80014d8:	0800dd00 	.word	0x0800dd00
 80014dc:	08007ca0 	.word	0x08007ca0
 80014e0:	08007cb8 	.word	0x08007cb8
 80014e4:	08007c8c 	.word	0x08007c8c
 80014e8:	2000a0a4 	.word	0x2000a0a4

080014ec <show_sensor_data>:


void show_sensor_data(uint16_t sensor_data[], uint8_t activeChannels) {
 80014ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014f0:	b087      	sub	sp, #28
 80014f2:	af02      	add	r7, sp, #8
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	70fb      	strb	r3, [r7, #3]
	hagl_clear_screen();
 80014fa:	f004 feab 	bl	8006254 <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e028      	b.n	8001556 <show_sensor_data+0x6a>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	b21d      	sxth	r5, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	b21e      	sxth	r6, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	b29b      	uxth	r3, r3
 8001510:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001514:	b29b      	uxth	r3, r3
 8001516:	fa0f f883 	sxth.w	r8, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	b29b      	uxth	r3, r3
 800151e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001522:	b29b      	uxth	r3, r3
 8001524:	fa0f f983 	sxth.w	r9, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	b29b      	uxth	r3, r3
 800152c:	f1c3 0305 	rsb	r3, r3, #5
 8001530:	b29b      	uxth	r3, r3
 8001532:	b21c      	sxth	r4, r3
 8001534:	2266      	movs	r2, #102	; 0x66
 8001536:	2133      	movs	r1, #51	; 0x33
 8001538:	2000      	movs	r0, #0
 800153a:	f005 f84f 	bl	80065dc <rgb565>
 800153e:	4603      	mov	r3, r0
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	9400      	str	r4, [sp, #0]
 8001544:	464b      	mov	r3, r9
 8001546:	4642      	mov	r2, r8
 8001548:	4631      	mov	r1, r6
 800154a:	4628      	mov	r0, r5
 800154c:	f004 feac 	bl	80062a8 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3301      	adds	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b04      	cmp	r3, #4
 800155a:	ddd3      	ble.n	8001504 <show_sensor_data+0x18>
				rgb565(0, 51, 102));
	}
	hagl_put_text("DANE Z CZUJNIKOW", 10, 10, rgb565(15, 127, 225), font6x9);
 800155c:	22e1      	movs	r2, #225	; 0xe1
 800155e:	217f      	movs	r1, #127	; 0x7f
 8001560:	200f      	movs	r0, #15
 8001562:	f005 f83b 	bl	80065dc <rgb565>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <show_sensor_data+0x114>)
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	4613      	mov	r3, r2
 8001570:	220a      	movs	r2, #10
 8001572:	210a      	movs	r1, #10
 8001574:	4823      	ldr	r0, [pc, #140]	; (8001604 <show_sensor_data+0x118>)
 8001576:	f004 fde7 	bl	8006148 <hagl_put_text>
	hagl_fill_rectangle(7, 27, LCD_WIDTH - 7, LCD_HEIGHT - 7, rgb565(0, 0, 0));
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2000      	movs	r0, #0
 8001580:	f005 f82c 	bl	80065dc <rgb565>
 8001584:	4603      	mov	r3, r0
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2399      	movs	r3, #153	; 0x99
 800158a:	2279      	movs	r2, #121	; 0x79
 800158c:	211b      	movs	r1, #27
 800158e:	2007      	movs	r0, #7
 8001590:	f004 fc40 	bl	8005e14 <hagl_fill_rectangle>
	for (int var = 0; var < activeChannels; ++var) {
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	e026      	b.n	80015e8 <show_sensor_data+0xfc>
		snprintf(text_to_parse, 16, "Kanal %u: \t\t%u", var, sensor_data[var]);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <show_sensor_data+0x11c>)
 80015aa:	2110      	movs	r1, #16
 80015ac:	4817      	ldr	r0, [pc, #92]	; (800160c <show_sensor_data+0x120>)
 80015ae:	f005 ff07 	bl	80073c0 <sniprintf>
		hagl_put_text(text_to_parse, 10, 30 + var * 15, rgb565(15, 127, 225),
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	b29b      	uxth	r3, r3
 80015be:	331e      	adds	r3, #30
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b21c      	sxth	r4, r3
 80015c4:	22e1      	movs	r2, #225	; 0xe1
 80015c6:	217f      	movs	r1, #127	; 0x7f
 80015c8:	200f      	movs	r0, #15
 80015ca:	f005 f807 	bl	80065dc <rgb565>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <show_sensor_data+0x124>)
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4613      	mov	r3, r2
 80015d8:	4622      	mov	r2, r4
 80015da:	210a      	movs	r1, #10
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <show_sensor_data+0x120>)
 80015de:	f004 fdb3 	bl	8006148 <hagl_put_text>
	for (int var = 0; var < activeChannels; ++var) {
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3301      	adds	r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbd4      	blt.n	800159a <show_sensor_data+0xae>
				font5x7);
	}
	lcd_copy();
 80015f0:	f7ff fb3e 	bl	8000c70 <lcd_copy>
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015fe:	bf00      	nop
 8001600:	0800ad48 	.word	0x0800ad48
 8001604:	08007ccc 	.word	0x08007ccc
 8001608:	08007ce0 	.word	0x08007ce0
 800160c:	2000a1e4 	.word	0x2000a1e4
 8001610:	0800dd00 	.word	0x0800dd00

08001614 <select_item>:

void select_item(int index) {
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af02      	add	r7, sp, #8
 800161a:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	b29b      	uxth	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	b29b      	uxth	r3, r3
 800162a:	3328      	adds	r3, #40	; 0x28
 800162c:	b29b      	uxth	r3, r3
 800162e:	b21c      	sxth	r4, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	b29b      	uxth	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	b29b      	uxth	r3, r3
 800163e:	3319      	adds	r3, #25
 8001640:	b29b      	uxth	r3, r3
 8001642:	b21d      	sxth	r5, r3
 8001644:	2200      	movs	r2, #0
 8001646:	21ff      	movs	r1, #255	; 0xff
 8001648:	20ff      	movs	r0, #255	; 0xff
 800164a:	f004 ffc7 	bl	80065dc <rgb565>
 800164e:	4603      	mov	r3, r0
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	462b      	mov	r3, r5
 8001654:	2278      	movs	r2, #120	; 0x78
 8001656:	4621      	mov	r1, r4
 8001658:	2008      	movs	r0, #8
 800165a:	f004 fb55 	bl	8005d08 <hagl_draw_rectangle>
			rgb565(255, 255, 0));
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bdb0      	pop	{r4, r5, r7, pc}

08001666 <deselect_item>:

void deselect_item(int index) {
 8001666:	b5b0      	push	{r4, r5, r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af02      	add	r7, sp, #8
 800166c:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	b29b      	uxth	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	b29b      	uxth	r3, r3
 800167c:	3328      	adds	r3, #40	; 0x28
 800167e:	b29b      	uxth	r3, r3
 8001680:	b21c      	sxth	r4, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	b29b      	uxth	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	0092      	lsls	r2, r2, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	b29b      	uxth	r3, r3
 8001690:	3319      	adds	r3, #25
 8001692:	b29b      	uxth	r3, r3
 8001694:	b21d      	sxth	r5, r3
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	2000      	movs	r0, #0
 800169c:	f004 ff9e 	bl	80065dc <rgb565>
 80016a0:	4603      	mov	r3, r0
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	462b      	mov	r3, r5
 80016a6:	2278      	movs	r2, #120	; 0x78
 80016a8:	4621      	mov	r1, r4
 80016aa:	2008      	movs	r0, #8
 80016ac:	f004 fb2c 	bl	8005d08 <hagl_draw_rectangle>
			rgb565(0, 0, 0));
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bdb0      	pop	{r4, r5, r7, pc}

080016b8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_RTC_Init+0x44>)
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <MX_RTC_Init+0x48>)
 80016c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_RTC_Init+0x44>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_RTC_Init+0x44>)
 80016ca:	227f      	movs	r2, #127	; 0x7f
 80016cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MX_RTC_Init+0x44>)
 80016d0:	22ff      	movs	r2, #255	; 0xff
 80016d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_RTC_Init+0x44>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <MX_RTC_Init+0x44>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_RTC_Init+0x44>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_RTC_Init+0x44>)
 80016e8:	f002 fd60 	bl	80041ac <HAL_RTC_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80016f2:	f7ff fd5f 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000a1f4 	.word	0x2000a1f4
 8001700:	40002800 	.word	0x40002800

08001704 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <HAL_RTC_MspInit+0x50>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d111      	bne.n	800174a <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001726:	2302      	movs	r3, #2
 8001728:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800172a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800172e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4618      	mov	r0, r3
 8001736:	f002 fc4b 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001740:	f7ff fd38 	bl	80011b4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_RTC_MspInit+0x54>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40002800 	.word	0x40002800
 8001758:	42470e3c 	.word	0x42470e3c

0800175c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_SPI1_Init+0x64>)
 8001762:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <MX_SPI1_Init+0x68>)
 8001764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_SPI1_Init+0x64>)
 8001768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800176c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_SPI1_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_SPI1_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_SPI1_Init+0x64>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_SPI1_Init+0x64>)
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_SPI1_Init+0x64>)
 8001788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_SPI1_Init+0x64>)
 8001790:	2218      	movs	r2, #24
 8001792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <MX_SPI1_Init+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_SPI1_Init+0x64>)
 800179c:	2200      	movs	r2, #0
 800179e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <MX_SPI1_Init+0x64>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_SPI1_Init+0x64>)
 80017a8:	220a      	movs	r2, #10
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_SPI1_Init+0x64>)
 80017ae:	f002 fde2 	bl	8004376 <HAL_SPI_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017b8:	f7ff fcfc 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000a26c 	.word	0x2000a26c
 80017c4:	40013000 	.word	0x40013000

080017c8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_SPI2_Init+0x64>)
 80017ce:	4a18      	ldr	r2, [pc, #96]	; (8001830 <MX_SPI2_Init+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_SPI2_Init+0x64>)
 80017d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_SPI2_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_SPI2_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_SPI2_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_SPI2_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_SPI2_Init+0x64>)
 80017f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_SPI2_Init+0x64>)
 80017fc:	2208      	movs	r2, #8
 80017fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <MX_SPI2_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_SPI2_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <MX_SPI2_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_SPI2_Init+0x64>)
 8001814:	220a      	movs	r2, #10
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_SPI2_Init+0x64>)
 800181a:	f002 fdac 	bl	8004376 <HAL_SPI_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001824:	f7ff fcc6 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000a214 	.word	0x2000a214
 8001830:	40003800 	.word	0x40003800

08001834 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a58      	ldr	r2, [pc, #352]	; (80019b4 <HAL_SPI_MspInit+0x180>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d178      	bne.n	8001948 <HAL_SPI_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	4b57      	ldr	r3, [pc, #348]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a56      	ldr	r2, [pc, #344]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 8001860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b54      	ldr	r3, [pc, #336]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a4f      	ldr	r2, [pc, #316]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a48      	ldr	r2, [pc, #288]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b46      	ldr	r3, [pc, #280]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018aa:	2320      	movs	r3, #32
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ba:	2305      	movs	r3, #5
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	483d      	ldr	r0, [pc, #244]	; (80019bc <HAL_SPI_MspInit+0x188>)
 80018c6:	f001 fc29 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018ca:	2320      	movs	r3, #32
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018da:	2305      	movs	r3, #5
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	4836      	ldr	r0, [pc, #216]	; (80019c0 <HAL_SPI_MspInit+0x18c>)
 80018e6:	f001 fc19 	bl	800311c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80018ea:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 80018ec:	4a36      	ldr	r2, [pc, #216]	; (80019c8 <HAL_SPI_MspInit+0x194>)
 80018ee:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80018f0:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 80018f2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80018f6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f8:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 80018fa:	2240      	movs	r2, #64	; 0x40
 80018fc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 8001906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800190c:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001918:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800191e:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800192a:	4826      	ldr	r0, [pc, #152]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 800192c:	f001 f886 	bl	8002a3c <HAL_DMA_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8001936:	f7ff fc3d 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 800193e:	649a      	str	r2, [r3, #72]	; 0x48
 8001940:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <HAL_SPI_MspInit+0x190>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001946:	e031      	b.n	80019ac <HAL_SPI_MspInit+0x178>
  else if(spiHandle->Instance==SPI2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <HAL_SPI_MspInit+0x198>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d12c      	bne.n	80019ac <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_SPI_MspInit+0x184>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800198a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800199c:	2305      	movs	r3, #5
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <HAL_SPI_MspInit+0x18c>)
 80019a8:	f001 fbb8 	bl	800311c <HAL_GPIO_Init>
}
 80019ac:	bf00      	nop
 80019ae:	3730      	adds	r7, #48	; 0x30
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40013000 	.word	0x40013000
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020400 	.word	0x40020400
 80019c4:	2000a2c4 	.word	0x2000a2c4
 80019c8:	40026458 	.word	0x40026458
 80019cc:	40003800 	.word	0x40003800

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_MspInit+0x4c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <HAL_MspInit+0x4c>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_MspInit+0x4c>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_MspInit+0x4c>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_MspInit+0x4c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6c:	f000 fa9e 	bl	8001fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f001 fd05 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001a86:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a8a:	f001 fcfd 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <DMA2_Stream3_IRQHandler+0x10>)
 8001a9a:	f001 f8d5 	bl	8002c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000a2c4 	.word	0x2000a2c4

08001aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
	return 1;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_kill>:

int _kill(int pid, int sig)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ac2:	f004 fddb 	bl	800667c <__errno>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2216      	movs	r2, #22
 8001aca:	601a      	str	r2, [r3, #0]
	return -1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_exit>:

void _exit (int status)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ffe7 	bl	8001ab8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aea:	e7fe      	b.n	8001aea <_exit+0x12>

08001aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e00a      	b.n	8001b14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001afe:	f3af 8000 	nop.w
 8001b02:	4601      	mov	r1, r0
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	60ba      	str	r2, [r7, #8]
 8001b0a:	b2ca      	uxtb	r2, r1
 8001b0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbf0      	blt.n	8001afe <_read+0x12>
	}

return len;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e009      	b.n	8001b4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60ba      	str	r2, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f8c7 	bl	8000cd4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	dbf1      	blt.n	8001b38 <_write+0x12>
	}
	return len;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_close>:

int _close(int file)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
	return -1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b86:	605a      	str	r2, [r3, #4]
	return 0;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <_isatty>:

int _isatty(int file)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f004 fd40 	bl	800667c <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20010000 	.word	0x20010000
 8001c28:	00002000 	.word	0x00002000
 8001c2c:	2000a0ac 	.word	0x2000a0ac
 8001c30:	2000a3c8 	.word	0x2000a3c8

08001c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <SystemInit+0x28>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <SystemInit+0x28>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SystemInit+0x28>)
 8001c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c4e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	2224      	movs	r2, #36	; 0x24
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 ff80 	bl	8006b74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <MX_TIM2_Init+0xa0>)
 8001c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c84:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <MX_TIM2_Init+0xa0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <MX_TIM2_Init+0xa0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <MX_TIM2_Init+0xa0>)
 8001c92:	2227      	movs	r2, #39	; 0x27
 8001c94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <MX_TIM2_Init+0xa0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_TIM2_Init+0xa0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001caa:	2301      	movs	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_TIM2_Init+0xa0>)
 8001cce:	f002 ff2d 	bl	8004b2c <HAL_TIM_Encoder_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001cd8:	f7ff fa6c 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_TIM2_Init+0xa0>)
 8001cea:	f003 f8f9 	bl	8004ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001cf4:	f7ff fa5e 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	3730      	adds	r7, #48	; 0x30
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000a324 	.word	0x2000a324

08001d04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d24:	d14a      	bne.n	8001dbc <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a25      	ldr	r2, [pc, #148]	; (8001dc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a1e      	ldr	r2, [pc, #120]	; (8001dc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001d98:	f001 f9c0 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dac:	2301      	movs	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <HAL_TIM_Encoder_MspInit+0xc8>)
 8001db8:	f001 f9b0 	bl	800311c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400

08001dd0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_USART6_UART_Init+0x4c>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <MX_USART6_UART_Init+0x50>)
 8001dd8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <MX_USART6_UART_Init+0x4c>)
 8001ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_USART6_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_USART6_UART_Init+0x4c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <MX_USART6_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_USART6_UART_Init+0x4c>)
 8001df6:	220c      	movs	r2, #12
 8001df8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <MX_USART6_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_USART6_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_USART6_UART_Init+0x4c>)
 8001e08:	f003 f8d8 	bl	8004fbc <HAL_UART_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e12:	f7ff f9cf 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000a36c 	.word	0x2000a36c
 8001e20:	40011400 	.word	0x40011400

08001e24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_UART_MspInit+0x84>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12c      	bne.n	8001ea0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_UART_MspInit+0x88>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_UART_MspInit+0x88>)
 8001e50:	f043 0320 	orr.w	r3, r3, #32
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_UART_MspInit+0x88>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_UART_MspInit+0x88>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_UART_MspInit+0x88>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_UART_MspInit+0x88>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e90:	2308      	movs	r3, #8
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <HAL_UART_MspInit+0x8c>)
 8001e9c:	f001 f93e 	bl	800311c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40011400 	.word	0x40011400
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001eb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eba:	e003      	b.n	8001ec4 <LoopCopyDataInit>

08001ebc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ebe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ec0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ec2:	3104      	adds	r1, #4

08001ec4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ec4:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ec8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001eca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ecc:	d3f6      	bcc.n	8001ebc <CopyDataInit>
  ldr  r2, =_sbss
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ed0:	e002      	b.n	8001ed8 <LoopFillZerobss>

08001ed2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ed2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ed4:	f842 3b04 	str.w	r3, [r2], #4

08001ed8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001edc:	d3f9      	bcc.n	8001ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ede:	f7ff fea9 	bl	8001c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f004 fdad 	bl	8006a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee6:	f7fe ff0d 	bl	8000d04 <main>
  bx  lr    
 8001eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eec:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001ef0:	0801130c 	.word	0x0801130c
  ldr  r0, =_sdata
 8001ef4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ef8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001efc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001f00:	2000a3c4 	.word	0x2000a3c4

08001f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC_IRQHandler>
	...

08001f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <HAL_Init+0x40>)
 8001f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <HAL_Init+0x40>)
 8001f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <HAL_Init+0x40>)
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f30:	2003      	movs	r0, #3
 8001f32:	f000 fd41 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f000 f808 	bl	8001f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f3c:	f7ff fd48 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023c00 	.word	0x40023c00

08001f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_InitTick+0x54>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_InitTick+0x58>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fd59 	bl	8002a22 <HAL_SYSTICK_Config>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00e      	b.n	8001f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b0f      	cmp	r3, #15
 8001f7e:	d80a      	bhi.n	8001f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f80:	2200      	movs	r2, #0
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f000 fd21 	bl	80029ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <HAL_InitTick+0x5c>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	20000008 	.word	0x20000008

08001fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_IncTick+0x20>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x24>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_IncTick+0x24>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	2000000c 	.word	0x2000000c
 8001fd0:	2000a3b0 	.word	0x2000a3b0

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	2000a3b0 	.word	0x2000a3b0

08001fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff ffee 	bl	8001fd4 <HAL_GetTick>
 8001ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002004:	d005      	beq.n	8002012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_Delay+0x44>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002012:	bf00      	nop
 8002014:	f7ff ffde 	bl	8001fd4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d8f7      	bhi.n	8002014 <HAL_Delay+0x28>
  {
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000000c 	.word	0x2000000c

08002034 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e033      	b.n	80020b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fb44 	bl	80006e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	d118      	bne.n	80020a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800207a:	f023 0302 	bic.w	r3, r3, #2
 800207e:	f043 0202 	orr.w	r2, r3, #2
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fa48 	bl	800251c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f023 0303 	bic.w	r3, r3, #3
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
 80020a2:	e001      	b.n	80020a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Start_DMA+0x1e>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e0ce      	b.n	8002278 <HAL_ADC_Start_DMA+0x1bc>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d018      	beq.n	8002122 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002100:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <HAL_ADC_Start_DMA+0x1c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5f      	ldr	r2, [pc, #380]	; (8002284 <HAL_ADC_Start_DMA+0x1c8>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0c9a      	lsrs	r2, r3, #18
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002114:	e002      	b.n	800211c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	3b01      	subs	r3, #1
 800211a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f9      	bne.n	8002116 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002130:	d107      	bne.n	8002142 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002140:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	f040 8086 	bne.w	800225e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800217c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002190:	d106      	bne.n	80021a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f023 0206 	bic.w	r2, r3, #6
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	645a      	str	r2, [r3, #68]	; 0x44
 800219e:	e002      	b.n	80021a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ae:	4b36      	ldr	r3, [pc, #216]	; (8002288 <HAL_ADC_Start_DMA+0x1cc>)
 80021b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	4a35      	ldr	r2, [pc, #212]	; (800228c <HAL_ADC_Start_DMA+0x1d0>)
 80021b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	4a34      	ldr	r2, [pc, #208]	; (8002290 <HAL_ADC_Start_DMA+0x1d4>)
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	4a33      	ldr	r2, [pc, #204]	; (8002294 <HAL_ADC_Start_DMA+0x1d8>)
 80021c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	334c      	adds	r3, #76	; 0x4c
 80021fe:	4619      	mov	r1, r3
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f000 fcc8 	bl	8002b98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10f      	bne.n	8002234 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d129      	bne.n	8002276 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	e020      	b.n	8002276 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_ADC_Start_DMA+0x1dc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d11b      	bne.n	8002276 <HAL_ADC_Start_DMA+0x1ba>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d114      	bne.n	8002276 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e00b      	b.n	8002276 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f043 0210 	orr.w	r2, r3, #16
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000004 	.word	0x20000004
 8002284:	431bde83 	.word	0x431bde83
 8002288:	40012300 	.word	0x40012300
 800228c:	08002715 	.word	0x08002715
 8002290:	080027cf 	.word	0x080027cf
 8002294:	080027eb 	.word	0x080027eb
 8002298:	40012000 	.word	0x40012000

0800229c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x1c>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e105      	b.n	8002500 <HAL_ADC_ConfigChannel+0x228>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b09      	cmp	r3, #9
 8002302:	d925      	bls.n	8002350 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68d9      	ldr	r1, [r3, #12]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	3b1e      	subs	r3, #30
 800231a:	2207      	movs	r2, #7
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43da      	mvns	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	400a      	ands	r2, r1
 8002328:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68d9      	ldr	r1, [r3, #12]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	4618      	mov	r0, r3
 800233c:	4603      	mov	r3, r0
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4403      	add	r3, r0
 8002342:	3b1e      	subs	r3, #30
 8002344:	409a      	lsls	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	e022      	b.n	8002396 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	2207      	movs	r2, #7
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	400a      	ands	r2, r1
 8002372:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6919      	ldr	r1, [r3, #16]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	4618      	mov	r0, r3
 8002386:	4603      	mov	r3, r0
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4403      	add	r3, r0
 800238c:	409a      	lsls	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b06      	cmp	r3, #6
 800239c:	d824      	bhi.n	80023e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3b05      	subs	r3, #5
 80023b0:	221f      	movs	r2, #31
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	400a      	ands	r2, r1
 80023be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	3b05      	subs	r3, #5
 80023da:	fa00 f203 	lsl.w	r2, r0, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	635a      	str	r2, [r3, #52]	; 0x34
 80023e6:	e04c      	b.n	8002482 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d824      	bhi.n	800243a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	3b23      	subs	r3, #35	; 0x23
 8002402:	221f      	movs	r2, #31
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43da      	mvns	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	400a      	ands	r2, r1
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	4618      	mov	r0, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	3b23      	subs	r3, #35	; 0x23
 800242c:	fa00 f203 	lsl.w	r2, r0, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	631a      	str	r2, [r3, #48]	; 0x30
 8002438:	e023      	b.n	8002482 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3b41      	subs	r3, #65	; 0x41
 800244c:	221f      	movs	r2, #31
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	400a      	ands	r2, r1
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	3b41      	subs	r3, #65	; 0x41
 8002476:	fa00 f203 	lsl.w	r2, r0, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_ADC_ConfigChannel+0x234>)
 8002484:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a21      	ldr	r2, [pc, #132]	; (8002510 <HAL_ADC_ConfigChannel+0x238>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d109      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b12      	cmp	r3, #18
 8002496:	d105      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a19      	ldr	r2, [pc, #100]	; (8002510 <HAL_ADC_ConfigChannel+0x238>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d123      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x21e>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b10      	cmp	r3, #16
 80024b4:	d003      	beq.n	80024be <HAL_ADC_ConfigChannel+0x1e6>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b11      	cmp	r3, #17
 80024bc:	d11b      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d111      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_ADC_ConfigChannel+0x23c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <HAL_ADC_ConfigChannel+0x240>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	0c9a      	lsrs	r2, r3, #18
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40012300 	.word	0x40012300
 8002510:	40012000 	.word	0x40012000
 8002514:	20000004 	.word	0x20000004
 8002518:	431bde83 	.word	0x431bde83

0800251c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002524:	4b79      	ldr	r3, [pc, #484]	; (800270c <ADC_Init+0x1f0>)
 8002526:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	431a      	orrs	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	021a      	lsls	r2, r3, #8
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002596:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6899      	ldr	r1, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	4a58      	ldr	r2, [pc, #352]	; (8002710 <ADC_Init+0x1f4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d022      	beq.n	80025fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6899      	ldr	r1, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	e00f      	b.n	800261a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002618:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0202 	bic.w	r2, r2, #2
 8002628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6899      	ldr	r1, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7e1b      	ldrb	r3, [r3, #24]
 8002634:	005a      	lsls	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01b      	beq.n	8002680 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002656:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002666:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	3b01      	subs	r3, #1
 8002674:	035a      	lsls	r2, r3, #13
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	e007      	b.n	8002690 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800268e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	051a      	lsls	r2, r3, #20
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6899      	ldr	r1, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026d2:	025a      	lsls	r2, r3, #9
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6899      	ldr	r1, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	029a      	lsls	r2, r3, #10
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	609a      	str	r2, [r3, #8]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40012300 	.word	0x40012300
 8002710:	0f000001 	.word	0x0f000001

08002714 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800272a:	2b00      	cmp	r3, #0
 800272c:	d13c      	bne.n	80027a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d12b      	bne.n	80027a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800274c:	2b00      	cmp	r3, #0
 800274e:	d127      	bne.n	80027a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800275a:	2b00      	cmp	r3, #0
 800275c:	d006      	beq.n	800276c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002768:	2b00      	cmp	r3, #0
 800276a:	d119      	bne.n	80027a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0220 	bic.w	r2, r2, #32
 800277a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f043 0201 	orr.w	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff fd7b 	bl	800229c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027a6:	e00e      	b.n	80027c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f7ff fd85 	bl	80022c4 <HAL_ADC_ErrorCallback>
}
 80027ba:	e004      	b.n	80027c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7ff fd67 	bl	80022b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2240      	movs	r2, #64	; 0x40
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f043 0204 	orr.w	r2, r3, #4
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f7ff fd5a 	bl	80022c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <__NVIC_GetPriorityGrouping+0x18>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 0307 	and.w	r3, r3, #7
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	db0b      	blt.n	80028a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	4907      	ldr	r1, [pc, #28]	; (80028b4 <__NVIC_EnableIRQ+0x38>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2001      	movs	r0, #1
 800289e:	fa00 f202 	lsl.w	r2, r0, r2
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	; (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f7ff ff8e 	bl	80028b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff29 	bl	8002818 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff3e 	bl	8002860 <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff8e 	bl	800290c <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5d 	bl	80028b8 <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff31 	bl	800287c <__NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffa2 	bl	8002974 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff fac4 	bl	8001fd4 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e099      	b.n	8002b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a78:	e00f      	b.n	8002a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a7a:	f7ff faab 	bl	8001fd4 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d908      	bls.n	8002a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2203      	movs	r2, #3
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e078      	b.n	8002b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e8      	bne.n	8002a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4b38      	ldr	r3, [pc, #224]	; (8002b94 <HAL_DMA_Init+0x158>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d107      	bne.n	8002b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	4313      	orrs	r3, r2
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0307 	bic.w	r3, r3, #7
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d117      	bne.n	8002b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00e      	beq.n	8002b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa6f 	bl	8003024 <DMA_CheckFifoParam>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2240      	movs	r2, #64	; 0x40
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e016      	b.n	8002b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fa26 	bl	8002fb8 <DMA_CalcBaseAndBitshift>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	223f      	movs	r2, #63	; 0x3f
 8002b76:	409a      	lsls	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	f010803f 	.word	0xf010803f

08002b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_DMA_Start_IT+0x26>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e040      	b.n	8002c40 <HAL_DMA_Start_IT+0xa8>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d12f      	bne.n	8002c32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f9b8 	bl	8002f5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	223f      	movs	r2, #63	; 0x3f
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0216 	orr.w	r2, r2, #22
 8002c06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d007      	beq.n	8002c20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0208 	orr.w	r2, r2, #8
 8002c1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e005      	b.n	8002c3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c54:	4b92      	ldr	r3, [pc, #584]	; (8002ea0 <HAL_DMA_IRQHandler+0x258>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a92      	ldr	r2, [pc, #584]	; (8002ea4 <HAL_DMA_IRQHandler+0x25c>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0a9b      	lsrs	r3, r3, #10
 8002c60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	2208      	movs	r2, #8
 8002c74:	409a      	lsls	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01a      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	2201      	movs	r2, #1
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f043 0202 	orr.w	r2, r3, #2
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	2204      	movs	r2, #4
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	f043 0204 	orr.w	r2, r3, #4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	2210      	movs	r2, #16
 8002d26:	409a      	lsls	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d043      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03c      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d42:	2210      	movs	r2, #16
 8002d44:	409a      	lsls	r2, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d018      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d024      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
 8002d76:	e01f      	b.n	8002db8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01b      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
 8002d88:	e016      	b.n	8002db8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0208 	bic.w	r2, r2, #8
 8002da6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 808e 	beq.w	8002ee6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8086 	beq.w	8002ee6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dde:	2220      	movs	r2, #32
 8002de0:	409a      	lsls	r2, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b05      	cmp	r3, #5
 8002df0:	d136      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0216 	bic.w	r2, r2, #22
 8002e00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <HAL_DMA_IRQHandler+0x1da>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0208 	bic.w	r2, r2, #8
 8002e30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	223f      	movs	r2, #63	; 0x3f
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d07d      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4798      	blx	r3
        }
        return;
 8002e5e:	e078      	b.n	8002f52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01c      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d108      	bne.n	8002e8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d030      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
 8002e8c:	e02b      	b.n	8002ee6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d027      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	4798      	blx	r3
 8002e9e:	e022      	b.n	8002ee6 <HAL_DMA_IRQHandler+0x29e>
 8002ea0:	20000004 	.word	0x20000004
 8002ea4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0210 	bic.w	r2, r2, #16
 8002ec4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d032      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d022      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2205      	movs	r2, #5
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3301      	adds	r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d307      	bcc.n	8002f2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f2      	bne.n	8002f12 <HAL_DMA_IRQHandler+0x2ca>
 8002f2c:	e000      	b.n	8002f30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f2e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
 8002f50:	e000      	b.n	8002f54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f52:	bf00      	nop
    }
  }
}
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop

08002f5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d108      	bne.n	8002f9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f9a:	e007      	b.n	8002fac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	60da      	str	r2, [r3, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	3b10      	subs	r3, #16
 8002fc8:	4a14      	ldr	r2, [pc, #80]	; (800301c <DMA_CalcBaseAndBitshift+0x64>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fd2:	4a13      	ldr	r2, [pc, #76]	; (8003020 <DMA_CalcBaseAndBitshift+0x68>)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d909      	bls.n	8002ffa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	1d1a      	adds	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ff8:	e007      	b.n	800300a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	aaaaaaab 	.word	0xaaaaaaab
 8003020:	08011220 	.word	0x08011220

08003024 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d11f      	bne.n	800307e <DMA_CheckFifoParam+0x5a>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d856      	bhi.n	80030f2 <DMA_CheckFifoParam+0xce>
 8003044:	a201      	add	r2, pc, #4	; (adr r2, 800304c <DMA_CheckFifoParam+0x28>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	0800305d 	.word	0x0800305d
 8003050:	0800306f 	.word	0x0800306f
 8003054:	0800305d 	.word	0x0800305d
 8003058:	080030f3 	.word	0x080030f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d046      	beq.n	80030f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306c:	e043      	b.n	80030f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003076:	d140      	bne.n	80030fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800307c:	e03d      	b.n	80030fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003086:	d121      	bne.n	80030cc <DMA_CheckFifoParam+0xa8>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b03      	cmp	r3, #3
 800308c:	d837      	bhi.n	80030fe <DMA_CheckFifoParam+0xda>
 800308e:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <DMA_CheckFifoParam+0x70>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030ab 	.word	0x080030ab
 800309c:	080030a5 	.word	0x080030a5
 80030a0:	080030bd 	.word	0x080030bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      break;
 80030a8:	e030      	b.n	800310c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d025      	beq.n	8003102 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ba:	e022      	b.n	8003102 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030c4:	d11f      	bne.n	8003106 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030ca:	e01c      	b.n	8003106 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d903      	bls.n	80030da <DMA_CheckFifoParam+0xb6>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d003      	beq.n	80030e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030d8:	e018      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
      break;
 80030de:	e015      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00e      	beq.n	800310a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      break;
 80030f0:	e00b      	b.n	800310a <DMA_CheckFifoParam+0xe6>
      break;
 80030f2:	bf00      	nop
 80030f4:	e00a      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 80030f6:	bf00      	nop
 80030f8:	e008      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 80030fa:	bf00      	nop
 80030fc:	e006      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 80030fe:	bf00      	nop
 8003100:	e004      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 8003102:	bf00      	nop
 8003104:	e002      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;   
 8003106:	bf00      	nop
 8003108:	e000      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 800310a:	bf00      	nop
    }
  } 
  
  return status; 
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	; 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	e159      	b.n	80033ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003138:	2201      	movs	r2, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	f040 8148 	bne.w	80033e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d005      	beq.n	800316e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800316a:	2b02      	cmp	r3, #2
 800316c:	d130      	bne.n	80031d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	2203      	movs	r2, #3
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a4:	2201      	movs	r2, #1
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 0201 	and.w	r2, r3, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d017      	beq.n	800320c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2203      	movs	r2, #3
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d123      	bne.n	8003260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	08da      	lsrs	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3208      	adds	r2, #8
 800325a:	69b9      	ldr	r1, [r7, #24]
 800325c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80a2 	beq.w	80033e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	4b57      	ldr	r3, [pc, #348]	; (8003404 <HAL_GPIO_Init+0x2e8>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	4a56      	ldr	r2, [pc, #344]	; (8003404 <HAL_GPIO_Init+0x2e8>)
 80032ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b0:	6453      	str	r3, [r2, #68]	; 0x44
 80032b2:	4b54      	ldr	r3, [pc, #336]	; (8003404 <HAL_GPIO_Init+0x2e8>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032be:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_GPIO_Init+0x2ec>)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	220f      	movs	r2, #15
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a49      	ldr	r2, [pc, #292]	; (800340c <HAL_GPIO_Init+0x2f0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d019      	beq.n	800331e <HAL_GPIO_Init+0x202>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a48      	ldr	r2, [pc, #288]	; (8003410 <HAL_GPIO_Init+0x2f4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_GPIO_Init+0x1fe>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a47      	ldr	r2, [pc, #284]	; (8003414 <HAL_GPIO_Init+0x2f8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00d      	beq.n	8003316 <HAL_GPIO_Init+0x1fa>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a46      	ldr	r2, [pc, #280]	; (8003418 <HAL_GPIO_Init+0x2fc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <HAL_GPIO_Init+0x1f6>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a45      	ldr	r2, [pc, #276]	; (800341c <HAL_GPIO_Init+0x300>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_GPIO_Init+0x1f2>
 800330a:	2304      	movs	r3, #4
 800330c:	e008      	b.n	8003320 <HAL_GPIO_Init+0x204>
 800330e:	2307      	movs	r3, #7
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x204>
 8003312:	2303      	movs	r3, #3
 8003314:	e004      	b.n	8003320 <HAL_GPIO_Init+0x204>
 8003316:	2302      	movs	r3, #2
 8003318:	e002      	b.n	8003320 <HAL_GPIO_Init+0x204>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x204>
 800331e:	2300      	movs	r3, #0
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	f002 0203 	and.w	r2, r2, #3
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4093      	lsls	r3, r2
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003330:	4935      	ldr	r1, [pc, #212]	; (8003408 <HAL_GPIO_Init+0x2ec>)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800333e:	4b38      	ldr	r3, [pc, #224]	; (8003420 <HAL_GPIO_Init+0x304>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003362:	4a2f      	ldr	r2, [pc, #188]	; (8003420 <HAL_GPIO_Init+0x304>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003368:	4b2d      	ldr	r3, [pc, #180]	; (8003420 <HAL_GPIO_Init+0x304>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800338c:	4a24      	ldr	r2, [pc, #144]	; (8003420 <HAL_GPIO_Init+0x304>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003392:	4b23      	ldr	r3, [pc, #140]	; (8003420 <HAL_GPIO_Init+0x304>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033b6:	4a1a      	ldr	r2, [pc, #104]	; (8003420 <HAL_GPIO_Init+0x304>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <HAL_GPIO_Init+0x304>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e0:	4a0f      	ldr	r2, [pc, #60]	; (8003420 <HAL_GPIO_Init+0x304>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3301      	adds	r3, #1
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	f67f aea2 	bls.w	8003138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	40013800 	.word	0x40013800
 800340c:	40020000 	.word	0x40020000
 8003410:	40020400 	.word	0x40020400
 8003414:	40020800 	.word	0x40020800
 8003418:	40020c00 	.word	0x40020c00
 800341c:	40021000 	.word	0x40021000
 8003420:	40013c00 	.word	0x40013c00

08003424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	e001      	b.n	8003446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003446:	7bfb      	ldrb	r3, [r7, #15]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	807b      	strh	r3, [r7, #2]
 8003460:	4613      	mov	r3, r2
 8003462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003464:	787b      	ldrb	r3, [r7, #1]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800346a:	887a      	ldrh	r2, [r7, #2]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003470:	e003      	b.n	800347a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003472:	887b      	ldrh	r3, [r7, #2]
 8003474:	041a      	lsls	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	619a      	str	r2, [r3, #24]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd fe64 	bl	8001174 <HAL_GPIO_EXTI_Callback>
  }
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40013c00 	.word	0x40013c00

080034b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e12b      	b.n	8003722 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd fa80 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800350a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800351a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800351c:	f000 fd30 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 8003520:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4a81      	ldr	r2, [pc, #516]	; (800372c <HAL_I2C_Init+0x274>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d807      	bhi.n	800353c <HAL_I2C_Init+0x84>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a80      	ldr	r2, [pc, #512]	; (8003730 <HAL_I2C_Init+0x278>)
 8003530:	4293      	cmp	r3, r2
 8003532:	bf94      	ite	ls
 8003534:	2301      	movls	r3, #1
 8003536:	2300      	movhi	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e006      	b.n	800354a <HAL_I2C_Init+0x92>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a7d      	ldr	r2, [pc, #500]	; (8003734 <HAL_I2C_Init+0x27c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	bf94      	ite	ls
 8003544:	2301      	movls	r3, #1
 8003546:	2300      	movhi	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0e7      	b.n	8003722 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a78      	ldr	r2, [pc, #480]	; (8003738 <HAL_I2C_Init+0x280>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	0c9b      	lsrs	r3, r3, #18
 800355c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a6a      	ldr	r2, [pc, #424]	; (800372c <HAL_I2C_Init+0x274>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d802      	bhi.n	800358c <HAL_I2C_Init+0xd4>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	3301      	adds	r3, #1
 800358a:	e009      	b.n	80035a0 <HAL_I2C_Init+0xe8>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	4a69      	ldr	r2, [pc, #420]	; (800373c <HAL_I2C_Init+0x284>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	3301      	adds	r3, #1
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	495c      	ldr	r1, [pc, #368]	; (800372c <HAL_I2C_Init+0x274>)
 80035bc:	428b      	cmp	r3, r1
 80035be:	d819      	bhi.n	80035f4 <HAL_I2C_Init+0x13c>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e59      	subs	r1, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ce:	1c59      	adds	r1, r3, #1
 80035d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035d4:	400b      	ands	r3, r1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_I2C_Init+0x138>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1e59      	subs	r1, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ee:	e051      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 80035f0:	2304      	movs	r3, #4
 80035f2:	e04f      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d111      	bne.n	8003620 <HAL_I2C_Init+0x168>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1e58      	subs	r0, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	440b      	add	r3, r1
 800360a:	fbb0 f3f3 	udiv	r3, r0, r3
 800360e:	3301      	adds	r3, #1
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e012      	b.n	8003646 <HAL_I2C_Init+0x18e>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	0099      	lsls	r1, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	fbb0 f3f3 	udiv	r3, r0, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Init+0x196>
 800364a:	2301      	movs	r3, #1
 800364c:	e022      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10e      	bne.n	8003674 <HAL_I2C_Init+0x1bc>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1e58      	subs	r0, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	440b      	add	r3, r1
 8003664:	fbb0 f3f3 	udiv	r3, r0, r3
 8003668:	3301      	adds	r3, #1
 800366a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003672:	e00f      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1e58      	subs	r0, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	0099      	lsls	r1, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	fbb0 f3f3 	udiv	r3, r0, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	6809      	ldr	r1, [r1, #0]
 8003698:	4313      	orrs	r3, r2
 800369a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6911      	ldr	r1, [r2, #16]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68d2      	ldr	r2, [r2, #12]
 80036ce:	4311      	orrs	r1, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	000186a0 	.word	0x000186a0
 8003730:	001e847f 	.word	0x001e847f
 8003734:	003d08ff 	.word	0x003d08ff
 8003738:	431bde83 	.word	0x431bde83
 800373c:	10624dd3 	.word	0x10624dd3

08003740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e264      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d075      	beq.n	800384a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375e:	4ba3      	ldr	r3, [pc, #652]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b04      	cmp	r3, #4
 8003768:	d00c      	beq.n	8003784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376a:	4ba0      	ldr	r3, [pc, #640]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003772:	2b08      	cmp	r3, #8
 8003774:	d112      	bne.n	800379c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003776:	4b9d      	ldr	r3, [pc, #628]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003782:	d10b      	bne.n	800379c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	4b99      	ldr	r3, [pc, #612]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d05b      	beq.n	8003848 <HAL_RCC_OscConfig+0x108>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d157      	bne.n	8003848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e23f      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d106      	bne.n	80037b4 <HAL_RCC_OscConfig+0x74>
 80037a6:	4b91      	ldr	r3, [pc, #580]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a90      	ldr	r2, [pc, #576]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e01d      	b.n	80037f0 <HAL_RCC_OscConfig+0xb0>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x98>
 80037be:	4b8b      	ldr	r3, [pc, #556]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a8a      	ldr	r2, [pc, #552]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4b88      	ldr	r3, [pc, #544]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a87      	ldr	r2, [pc, #540]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e00b      	b.n	80037f0 <HAL_RCC_OscConfig+0xb0>
 80037d8:	4b84      	ldr	r3, [pc, #528]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a83      	ldr	r2, [pc, #524]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b81      	ldr	r3, [pc, #516]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a80      	ldr	r2, [pc, #512]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80037ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d013      	beq.n	8003820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fe fbec 	bl	8001fd4 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003800:	f7fe fbe8 	bl	8001fd4 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e204      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	4b76      	ldr	r3, [pc, #472]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0xc0>
 800381e:	e014      	b.n	800384a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fe fbd8 	bl	8001fd4 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003828:	f7fe fbd4 	bl	8001fd4 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e1f0      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383a:	4b6c      	ldr	r3, [pc, #432]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0xe8>
 8003846:	e000      	b.n	800384a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d063      	beq.n	800391e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003856:	4b65      	ldr	r3, [pc, #404]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003862:	4b62      	ldr	r3, [pc, #392]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800386a:	2b08      	cmp	r3, #8
 800386c:	d11c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386e:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d116      	bne.n	80038a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387a:	4b5c      	ldr	r3, [pc, #368]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_RCC_OscConfig+0x152>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e1c4      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003892:	4b56      	ldr	r3, [pc, #344]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4952      	ldr	r1, [pc, #328]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a6:	e03a      	b.n	800391e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b0:	4b4f      	ldr	r3, [pc, #316]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b6:	f7fe fb8d 	bl	8001fd4 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038be:	f7fe fb89 	bl	8001fd4 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e1a5      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d0:	4b46      	ldr	r3, [pc, #280]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038dc:	4b43      	ldr	r3, [pc, #268]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4940      	ldr	r1, [pc, #256]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]
 80038f0:	e015      	b.n	800391e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f2:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fe fb6c 	bl	8001fd4 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003900:	f7fe fb68 	bl	8001fd4 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e184      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d030      	beq.n	800398c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003932:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <HAL_RCC_OscConfig+0x2b4>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7fe fb4c 	bl	8001fd4 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003940:	f7fe fb48 	bl	8001fd4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e164      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x200>
 800395e:	e015      	b.n	800398c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003960:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_OscConfig+0x2b4>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003966:	f7fe fb35 	bl	8001fd4 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396e:	f7fe fb31 	bl	8001fd4 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e14d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 8003982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f0      	bne.n	800396e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a0 	beq.w	8003ada <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c6:	2301      	movs	r3, #1
 80039c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_OscConfig+0x2b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d121      	bne.n	8003a1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_RCC_OscConfig+0x2b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <HAL_RCC_OscConfig+0x2b8>)
 80039dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e2:	f7fe faf7 	bl	8001fd4 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	e011      	b.n	8003a0e <HAL_RCC_OscConfig+0x2ce>
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	42470000 	.word	0x42470000
 80039f4:	42470e80 	.word	0x42470e80
 80039f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fc:	f7fe faea 	bl	8001fd4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e106      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0e:	4b85      	ldr	r3, [pc, #532]	; (8003c24 <HAL_RCC_OscConfig+0x4e4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d106      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2f0>
 8003a22:	4b81      	ldr	r3, [pc, #516]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	4a80      	ldr	r2, [pc, #512]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2e:	e01c      	b.n	8003a6a <HAL_RCC_OscConfig+0x32a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCC_OscConfig+0x312>
 8003a38:	4b7b      	ldr	r3, [pc, #492]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4a7a      	ldr	r2, [pc, #488]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a3e:	f043 0304 	orr.w	r3, r3, #4
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
 8003a44:	4b78      	ldr	r3, [pc, #480]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a77      	ldr	r2, [pc, #476]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a50:	e00b      	b.n	8003a6a <HAL_RCC_OscConfig+0x32a>
 8003a52:	4b75      	ldr	r3, [pc, #468]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a74      	ldr	r2, [pc, #464]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5e:	4b72      	ldr	r3, [pc, #456]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4a71      	ldr	r2, [pc, #452]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a64:	f023 0304 	bic.w	r3, r3, #4
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d015      	beq.n	8003a9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a72:	f7fe faaf 	bl	8001fd4 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	e00a      	b.n	8003a90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fe faab 	bl	8001fd4 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e0c5      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a90:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0ee      	beq.n	8003a7a <HAL_RCC_OscConfig+0x33a>
 8003a9c:	e014      	b.n	8003ac8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9e:	f7fe fa99 	bl	8001fd4 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa4:	e00a      	b.n	8003abc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fe fa95 	bl	8001fd4 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e0af      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abc:	4b5a      	ldr	r3, [pc, #360]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ee      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d105      	bne.n	8003ada <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ace:	4b56      	ldr	r3, [pc, #344]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	4a55      	ldr	r2, [pc, #340]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 809b 	beq.w	8003c1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ae4:	4b50      	ldr	r3, [pc, #320]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d05c      	beq.n	8003baa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d141      	bne.n	8003b7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af8:	4b4c      	ldr	r3, [pc, #304]	; (8003c2c <HAL_RCC_OscConfig+0x4ec>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fe fa69 	bl	8001fd4 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fe fa65 	bl	8001fd4 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e081      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b18:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	019b      	lsls	r3, r3, #6
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	085b      	lsrs	r3, r3, #1
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	4937      	ldr	r1, [pc, #220]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <HAL_RCC_OscConfig+0x4ec>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fa3e 	bl	8001fd4 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fe fa3a 	bl	8001fd4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e056      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6e:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x41c>
 8003b7a:	e04e      	b.n	8003c1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_RCC_OscConfig+0x4ec>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fe fa27 	bl	8001fd4 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7fe fa23 	bl	8001fd4 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e03f      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9c:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x44a>
 8003ba8:	e037      	b.n	8003c1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e032      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <HAL_RCC_OscConfig+0x4e8>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d028      	beq.n	8003c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d121      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d11a      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d111      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40007000 	.word	0x40007000
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	42470060 	.word	0x42470060

08003c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0cc      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c44:	4b68      	ldr	r3, [pc, #416]	; (8003de8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d90c      	bls.n	8003c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b65      	ldr	r3, [pc, #404]	; (8003de8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b63      	ldr	r3, [pc, #396]	; (8003de8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0b8      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d020      	beq.n	8003cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c84:	4b59      	ldr	r3, [pc, #356]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4a58      	ldr	r2, [pc, #352]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c9c:	4b53      	ldr	r3, [pc, #332]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4a52      	ldr	r2, [pc, #328]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca8:	4b50      	ldr	r3, [pc, #320]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	494d      	ldr	r1, [pc, #308]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d044      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d119      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07f      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d003      	beq.n	8003cee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cee:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e06f      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfe:	4b3b      	ldr	r3, [pc, #236]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e067      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0e:	4b37      	ldr	r3, [pc, #220]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f023 0203 	bic.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4934      	ldr	r1, [pc, #208]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d20:	f7fe f958 	bl	8001fd4 <HAL_GetTick>
 8003d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d28:	f7fe f954 	bl	8001fd4 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e04f      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	4b2b      	ldr	r3, [pc, #172]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 020c 	and.w	r2, r3, #12
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d1eb      	bne.n	8003d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d50:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d20c      	bcs.n	8003d78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e032      	b.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d84:	4b19      	ldr	r3, [pc, #100]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4916      	ldr	r1, [pc, #88]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	490e      	ldr	r1, [pc, #56]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003db6:	f000 f821 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	490a      	ldr	r1, [pc, #40]	; (8003df0 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc8:	5ccb      	ldrb	r3, [r1, r3]
 8003dca:	fa22 f303 	lsr.w	r3, r2, r3
 8003dce:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe f8b8 	bl	8001f4c <HAL_InitTick>

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40023c00 	.word	0x40023c00
 8003dec:	40023800 	.word	0x40023800
 8003df0:	08011208 	.word	0x08011208
 8003df4:	20000004 	.word	0x20000004
 8003df8:	20000008 	.word	0x20000008

08003dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	b5b0      	push	{r4, r5, r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e02:	2100      	movs	r1, #0
 8003e04:	6079      	str	r1, [r7, #4]
 8003e06:	2100      	movs	r1, #0
 8003e08:	60f9      	str	r1, [r7, #12]
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e0e:	2100      	movs	r1, #0
 8003e10:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e12:	4952      	ldr	r1, [pc, #328]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e14:	6889      	ldr	r1, [r1, #8]
 8003e16:	f001 010c 	and.w	r1, r1, #12
 8003e1a:	2908      	cmp	r1, #8
 8003e1c:	d00d      	beq.n	8003e3a <HAL_RCC_GetSysClockFreq+0x3e>
 8003e1e:	2908      	cmp	r1, #8
 8003e20:	f200 8094 	bhi.w	8003f4c <HAL_RCC_GetSysClockFreq+0x150>
 8003e24:	2900      	cmp	r1, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_RCC_GetSysClockFreq+0x32>
 8003e28:	2904      	cmp	r1, #4
 8003e2a:	d003      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x38>
 8003e2c:	e08e      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e2e:	4b4c      	ldr	r3, [pc, #304]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e30:	60bb      	str	r3, [r7, #8]
       break;
 8003e32:	e08e      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e34:	4b4b      	ldr	r3, [pc, #300]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e36:	60bb      	str	r3, [r7, #8]
      break;
 8003e38:	e08b      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e3a:	4948      	ldr	r1, [pc, #288]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e3c:	6849      	ldr	r1, [r1, #4]
 8003e3e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003e42:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e44:	4945      	ldr	r1, [pc, #276]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e46:	6849      	ldr	r1, [r1, #4]
 8003e48:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	d024      	beq.n	8003e9a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e50:	4942      	ldr	r1, [pc, #264]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e52:	6849      	ldr	r1, [r1, #4]
 8003e54:	0989      	lsrs	r1, r1, #6
 8003e56:	4608      	mov	r0, r1
 8003e58:	f04f 0100 	mov.w	r1, #0
 8003e5c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003e60:	f04f 0500 	mov.w	r5, #0
 8003e64:	ea00 0204 	and.w	r2, r0, r4
 8003e68:	ea01 0305 	and.w	r3, r1, r5
 8003e6c:	493d      	ldr	r1, [pc, #244]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e6e:	fb01 f003 	mul.w	r0, r1, r3
 8003e72:	2100      	movs	r1, #0
 8003e74:	fb01 f102 	mul.w	r1, r1, r2
 8003e78:	1844      	adds	r4, r0, r1
 8003e7a:	493a      	ldr	r1, [pc, #232]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e7c:	fba2 0101 	umull	r0, r1, r2, r1
 8003e80:	1863      	adds	r3, r4, r1
 8003e82:	4619      	mov	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	f7fc f9f8 	bl	8000280 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4613      	mov	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e04a      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9a:	4b30      	ldr	r3, [pc, #192]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	ea02 0400 	and.w	r4, r2, r0
 8003eb2:	ea03 0501 	and.w	r5, r3, r1
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	4629      	mov	r1, r5
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	014b      	lsls	r3, r1, #5
 8003ec4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ec8:	0142      	lsls	r2, r0, #5
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	1b00      	subs	r0, r0, r4
 8003ed0:	eb61 0105 	sbc.w	r1, r1, r5
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	018b      	lsls	r3, r1, #6
 8003ede:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ee2:	0182      	lsls	r2, r0, #6
 8003ee4:	1a12      	subs	r2, r2, r0
 8003ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eea:	f04f 0000 	mov.w	r0, #0
 8003eee:	f04f 0100 	mov.w	r1, #0
 8003ef2:	00d9      	lsls	r1, r3, #3
 8003ef4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ef8:	00d0      	lsls	r0, r2, #3
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	1912      	adds	r2, r2, r4
 8003f00:	eb45 0303 	adc.w	r3, r5, r3
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	f04f 0100 	mov.w	r1, #0
 8003f0c:	0299      	lsls	r1, r3, #10
 8003f0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f12:	0290      	lsls	r0, r2, #10
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	f7fc f9ac 	bl	8000280 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	60bb      	str	r3, [r7, #8]
      break;
 8003f4a:	e002      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f4c:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f4e:	60bb      	str	r3, [r7, #8]
      break;
 8003f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f52:	68bb      	ldr	r3, [r7, #8]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	00f42400 	.word	0x00f42400
 8003f64:	017d7840 	.word	0x017d7840

08003f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000004 	.word	0x20000004

08003f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f84:	f7ff fff0 	bl	8003f68 <HAL_RCC_GetHCLKFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	0a9b      	lsrs	r3, r3, #10
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	4903      	ldr	r1, [pc, #12]	; (8003fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	08011218 	.word	0x08011218

08003fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fac:	f7ff ffdc 	bl	8003f68 <HAL_RCC_GetHCLKFreq>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	0b5b      	lsrs	r3, r3, #13
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	4903      	ldr	r1, [pc, #12]	; (8003fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fbe:	5ccb      	ldrb	r3, [r1, r3]
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	08011218 	.word	0x08011218

08003fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d035      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ff8:	4b67      	ldr	r3, [pc, #412]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ffe:	f7fd ffe9 	bl	8001fd4 <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004006:	f7fd ffe5 	bl	8001fd4 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e0ba      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004018:	4b60      	ldr	r3, [pc, #384]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f0      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	019a      	lsls	r2, r3, #6
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	071b      	lsls	r3, r3, #28
 8004030:	495a      	ldr	r1, [pc, #360]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004038:	4b57      	ldr	r3, [pc, #348]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800403e:	f7fd ffc9 	bl	8001fd4 <HAL_GetTick>
 8004042:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004046:	f7fd ffc5 	bl	8001fd4 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e09a      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004058:	4b50      	ldr	r3, [pc, #320]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8083 	beq.w	8004178 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	4b49      	ldr	r3, [pc, #292]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	4a48      	ldr	r2, [pc, #288]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800407c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004080:	6413      	str	r3, [r2, #64]	; 0x40
 8004082:	4b46      	ldr	r3, [pc, #280]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800408e:	4b44      	ldr	r3, [pc, #272]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a43      	ldr	r2, [pc, #268]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004098:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800409a:	f7fd ff9b 	bl	8001fd4 <HAL_GetTick>
 800409e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040a2:	f7fd ff97 	bl	8001fd4 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e06c      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040b4:	4b3a      	ldr	r3, [pc, #232]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040c0:	4b36      	ldr	r3, [pc, #216]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d02f      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d028      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040de:	4b2f      	ldr	r3, [pc, #188]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040e8:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ee:	4b2d      	ldr	r3, [pc, #180]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040f4:	4a29      	ldr	r2, [pc, #164]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040fa:	4b28      	ldr	r3, [pc, #160]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b01      	cmp	r3, #1
 8004104:	d114      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004106:	f7fd ff65 	bl	8001fd4 <HAL_GetTick>
 800410a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fd ff61 	bl	8001fd4 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e034      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004124:	4b1d      	ldr	r3, [pc, #116]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ee      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800413c:	d10d      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004152:	4912      	ldr	r1, [pc, #72]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]
 8004158:	e005      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800415a:	4b10      	ldr	r3, [pc, #64]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	4a0f      	ldr	r2, [pc, #60]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004160:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004164:	6093      	str	r3, [r2, #8]
 8004166:	4b0d      	ldr	r3, [pc, #52]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004168:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004172:	490a      	ldr	r1, [pc, #40]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004174:	4313      	orrs	r3, r2
 8004176:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	7c1a      	ldrb	r2, [r3, #16]
 8004188:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800418a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	42470068 	.word	0x42470068
 800419c:	40023800 	.word	0x40023800
 80041a0:	40007000 	.word	0x40007000
 80041a4:	42470e40 	.word	0x42470e40
 80041a8:	424711e0 	.word	0x424711e0

080041ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e083      	b.n	80042c6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	7f5b      	ldrb	r3, [r3, #29]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fd fa98 	bl	8001704 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	22ca      	movs	r2, #202	; 0xca
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2253      	movs	r2, #83	; 0x53
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f897 	bl	800431e <RTC_EnterInitMode>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	22ff      	movs	r2, #255	; 0xff
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2204      	movs	r2, #4
 8004202:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e05e      	b.n	80042c6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6899      	ldr	r1, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	68d2      	ldr	r2, [r2, #12]
 8004242:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6919      	ldr	r1, [r3, #16]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	041a      	lsls	r2, r3, #16
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004266:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10e      	bne.n	8004294 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f829 	bl	80042ce <HAL_RTC_WaitForSynchro>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	22ff      	movs	r2, #255	; 0xff
 8004288:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2204      	movs	r2, #4
 800428e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e018      	b.n	80042c6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	22ff      	movs	r2, #255	; 0xff
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80042c4:	2300      	movs	r3, #0
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042ea:	f7fd fe73 	bl	8001fd4 <HAL_GetTick>
 80042ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80042f0:	e009      	b.n	8004306 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80042f2:	f7fd fe6f 	bl	8001fd4 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004300:	d901      	bls.n	8004306 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e007      	b.n	8004316 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ee      	beq.n	80042f2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d119      	bne.n	800436c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f04f 32ff 	mov.w	r2, #4294967295
 8004340:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004342:	f7fd fe47 	bl	8001fd4 <HAL_GetTick>
 8004346:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004348:	e009      	b.n	800435e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800434a:	f7fd fe43 	bl	8001fd4 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004358:	d901      	bls.n	800435e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e007      	b.n	800436e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0ee      	beq.n	800434a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e07b      	b.n	8004480 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	d108      	bne.n	80043a2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004398:	d009      	beq.n	80043ae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	61da      	str	r2, [r3, #28]
 80043a0:	e005      	b.n	80043ae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d106      	bne.n	80043ce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fd fa33 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004432:	ea42 0103 	orr.w	r1, r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	0c1b      	lsrs	r3, r3, #16
 800444c:	f003 0104 	and.w	r1, r3, #4
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f003 0210 	and.w	r2, r3, #16
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_SPI_Transmit+0x22>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e126      	b.n	80046f8 <HAL_SPI_Transmit+0x270>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b2:	f7fd fd8f 	bl	8001fd4 <HAL_GetTick>
 80044b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d002      	beq.n	80044ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
 80044ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044cc:	e10b      	b.n	80046e6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_SPI_Transmit+0x52>
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d102      	bne.n	80044e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044de:	e102      	b.n	80046e6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2203      	movs	r2, #3
 80044e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	88fa      	ldrh	r2, [r7, #6]
 80044fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004526:	d10f      	bne.n	8004548 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004536:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004546:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b40      	cmp	r3, #64	; 0x40
 8004554:	d007      	beq.n	8004566 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004564:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800456e:	d14b      	bne.n	8004608 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_SPI_Transmit+0xf6>
 8004578:	8afb      	ldrh	r3, [r7, #22]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d13e      	bne.n	80045fc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	881a      	ldrh	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	1c9a      	adds	r2, r3, #2
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045a2:	e02b      	b.n	80045fc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d112      	bne.n	80045d8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	881a      	ldrh	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	1c9a      	adds	r2, r3, #2
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80045d6:	e011      	b.n	80045fc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045d8:	f7fd fcfc 	bl	8001fd4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d803      	bhi.n	80045f0 <HAL_SPI_Transmit+0x168>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d102      	bne.n	80045f6 <HAL_SPI_Transmit+0x16e>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d102      	bne.n	80045fc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045fa:	e074      	b.n	80046e6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1ce      	bne.n	80045a4 <HAL_SPI_Transmit+0x11c>
 8004606:	e04c      	b.n	80046a2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <HAL_SPI_Transmit+0x18e>
 8004610:	8afb      	ldrh	r3, [r7, #22]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d140      	bne.n	8004698 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	7812      	ldrb	r2, [r2, #0]
 8004622:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800463c:	e02c      	b.n	8004698 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b02      	cmp	r3, #2
 800464a:	d113      	bne.n	8004674 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	7812      	ldrb	r2, [r2, #0]
 8004658:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	86da      	strh	r2, [r3, #54]	; 0x36
 8004672:	e011      	b.n	8004698 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004674:	f7fd fcae 	bl	8001fd4 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d803      	bhi.n	800468c <HAL_SPI_Transmit+0x204>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	d102      	bne.n	8004692 <HAL_SPI_Transmit+0x20a>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004696:	e026      	b.n	80046e6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1cd      	bne.n	800463e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	6839      	ldr	r1, [r7, #0]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f9fe 	bl	8004aa8 <SPI_EndRxTxTransaction>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	77fb      	strb	r3, [r7, #31]
 80046e2:	e000      	b.n	80046e6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80046e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3720      	adds	r7, #32
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	4613      	mov	r3, r2
 800470c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_SPI_Transmit_DMA+0x20>
 800471c:	2302      	movs	r3, #2
 800471e:	e09b      	b.n	8004858 <HAL_SPI_Transmit_DMA+0x158>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	d002      	beq.n	800473a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004734:	2302      	movs	r3, #2
 8004736:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004738:	e089      	b.n	800484e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_SPI_Transmit_DMA+0x46>
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
    goto error;
 800474a:	e080      	b.n	800484e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2203      	movs	r2, #3
 8004750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	88fa      	ldrh	r2, [r7, #6]
 8004764:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	88fa      	ldrh	r2, [r7, #6]
 800476a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004792:	d10f      	bne.n	80047b4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b8:	4a29      	ldr	r2, [pc, #164]	; (8004860 <HAL_SPI_Transmit_DMA+0x160>)
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c0:	4a28      	ldr	r2, [pc, #160]	; (8004864 <HAL_SPI_Transmit_DMA+0x164>)
 80047c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c8:	4a27      	ldr	r2, [pc, #156]	; (8004868 <HAL_SPI_Transmit_DMA+0x168>)
 80047ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d0:	2200      	movs	r2, #0
 80047d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	4619      	mov	r1, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047ec:	f7fe f9d4 	bl	8002b98 <HAL_DMA_Start_IT>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00c      	beq.n	8004810 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	f043 0210 	orr.w	r2, r3, #16
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800480e:	e01e      	b.n	800484e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b40      	cmp	r3, #64	; 0x40
 800481c:	d007      	beq.n	800482e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800482c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0220 	orr.w	r2, r2, #32
 800483c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0202 	orr.w	r2, r2, #2
 800484c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004856:	7dfb      	ldrb	r3, [r7, #23]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	0800493d 	.word	0x0800493d
 8004864:	08004895 	.word	0x08004895
 8004868:	08004959 	.word	0x08004959

0800486c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048a2:	f7fd fb97 	bl	8001fd4 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	d03b      	beq.n	8004930 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0220 	bic.w	r2, r2, #32
 80048c6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0202 	bic.w	r2, r2, #2
 80048d6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	2164      	movs	r1, #100	; 0x64
 80048dc:	6978      	ldr	r0, [r7, #20]
 80048de:	f000 f8e3 	bl	8004aa8 <SPI_EndRxTxTransaction>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	f043 0220 	orr.w	r2, r3, #32
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2200      	movs	r2, #0
 8004916:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004928:	6978      	ldr	r0, [r7, #20]
 800492a:	f7ff ffa9 	bl	8004880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800492e:	e002      	b.n	8004936 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004930:	6978      	ldr	r0, [r7, #20]
 8004932:	f7fc fc0f 	bl	8001154 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f7ff ff8e 	bl	800486c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0203 	bic.w	r2, r2, #3
 8004974:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	f043 0210 	orr.w	r2, r3, #16
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f7ff ff78 	bl	8004880 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	4613      	mov	r3, r2
 80049a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049a8:	f7fd fb14 	bl	8001fd4 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	4413      	add	r3, r2
 80049b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049b8:	f7fd fb0c 	bl	8001fd4 <HAL_GetTick>
 80049bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049be:	4b39      	ldr	r3, [pc, #228]	; (8004aa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	015b      	lsls	r3, r3, #5
 80049c4:	0d1b      	lsrs	r3, r3, #20
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ce:	e054      	b.n	8004a7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d6:	d050      	beq.n	8004a7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049d8:	f7fd fafc 	bl	8001fd4 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d902      	bls.n	80049ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d13d      	bne.n	8004a6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a06:	d111      	bne.n	8004a2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a10:	d004      	beq.n	8004a1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1a:	d107      	bne.n	8004a2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a34:	d10f      	bne.n	8004a56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e017      	b.n	8004a9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4013      	ands	r3, r2
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	bf0c      	ite	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d19b      	bne.n	80049d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000004 	.word	0x20000004

08004aa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <SPI_EndRxTxTransaction+0x7c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <SPI_EndRxTxTransaction+0x80>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	0d5b      	lsrs	r3, r3, #21
 8004ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ad2:	d112      	bne.n	8004afa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2200      	movs	r2, #0
 8004adc:	2180      	movs	r1, #128	; 0x80
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff ff5a 	bl	8004998 <SPI_WaitFlagStateUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d016      	beq.n	8004b18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e00f      	b.n	8004b1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b10:	2b80      	cmp	r3, #128	; 0x80
 8004b12:	d0f2      	beq.n	8004afa <SPI_EndRxTxTransaction+0x52>
 8004b14:	e000      	b.n	8004b18 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b16:	bf00      	nop
  }

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000004 	.word	0x20000004
 8004b28:	165e9f81 	.word	0x165e9f81

08004b2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e097      	b.n	8004c70 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7fd f8d5 	bl	8001d04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b70:	f023 0307 	bic.w	r3, r3, #7
 8004b74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f000 f907 	bl	8004d94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bae:	f023 0303 	bic.w	r3, r3, #3
 8004bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bcc:	f023 030c 	bic.w	r3, r3, #12
 8004bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	4313      	orrs	r3, r2
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	011a      	lsls	r2, r3, #4
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	031b      	lsls	r3, r3, #12
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ca0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d110      	bne.n	8004cca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d102      	bne.n	8004cb4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cae:	7b7b      	ldrb	r3, [r7, #13]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d001      	beq.n	8004cb8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e069      	b.n	8004d8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc8:	e031      	b.n	8004d2e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d110      	bne.n	8004cf2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd0:	7bbb      	ldrb	r3, [r7, #14]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d102      	bne.n	8004cdc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cd6:	7b3b      	ldrb	r3, [r7, #12]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d001      	beq.n	8004ce0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e055      	b.n	8004d8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cf0:	e01d      	b.n	8004d2e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d108      	bne.n	8004d0a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf8:	7bbb      	ldrb	r3, [r7, #14]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d105      	bne.n	8004d0a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cfe:	7b7b      	ldrb	r3, [r7, #13]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d102      	bne.n	8004d0a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d04:	7b3b      	ldrb	r3, [r7, #12]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d001      	beq.n	8004d0e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e03e      	b.n	8004d8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2202      	movs	r2, #2
 8004d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_TIM_Encoder_Start+0xc4>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d008      	beq.n	8004d4c <HAL_TIM_Encoder_Start+0xd4>
 8004d3a:	e00f      	b.n	8004d5c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2201      	movs	r2, #1
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f8a5 	bl	8004e94 <TIM_CCxChannelCmd>
      break;
 8004d4a:	e016      	b.n	8004d7a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2201      	movs	r2, #1
 8004d52:	2104      	movs	r1, #4
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 f89d 	bl	8004e94 <TIM_CCxChannelCmd>
      break;
 8004d5a:	e00e      	b.n	8004d7a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2201      	movs	r2, #1
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 f895 	bl	8004e94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	2104      	movs	r1, #4
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f88e 	bl	8004e94 <TIM_CCxChannelCmd>
      break;
 8004d78:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a34      	ldr	r2, [pc, #208]	; (8004e78 <TIM_Base_SetConfig+0xe4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00f      	beq.n	8004dcc <TIM_Base_SetConfig+0x38>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d00b      	beq.n	8004dcc <TIM_Base_SetConfig+0x38>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a31      	ldr	r2, [pc, #196]	; (8004e7c <TIM_Base_SetConfig+0xe8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_Base_SetConfig+0x38>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a30      	ldr	r2, [pc, #192]	; (8004e80 <TIM_Base_SetConfig+0xec>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_Base_SetConfig+0x38>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a2f      	ldr	r2, [pc, #188]	; (8004e84 <TIM_Base_SetConfig+0xf0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d108      	bne.n	8004dde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a25      	ldr	r2, [pc, #148]	; (8004e78 <TIM_Base_SetConfig+0xe4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01b      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dec:	d017      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <TIM_Base_SetConfig+0xe8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a21      	ldr	r2, [pc, #132]	; (8004e80 <TIM_Base_SetConfig+0xec>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00f      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a20      	ldr	r2, [pc, #128]	; (8004e84 <TIM_Base_SetConfig+0xf0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00b      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <TIM_Base_SetConfig+0xf4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d007      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <TIM_Base_SetConfig+0xf8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d003      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a1d      	ldr	r2, [pc, #116]	; (8004e90 <TIM_Base_SetConfig+0xfc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d108      	bne.n	8004e30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <TIM_Base_SetConfig+0xe4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d103      	bne.n	8004e64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	615a      	str	r2, [r3, #20]
}
 8004e6a:	bf00      	nop
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40000c00 	.word	0x40000c00
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40014400 	.word	0x40014400
 8004e90:	40014800 	.word	0x40014800

08004e94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 031f 	and.w	r3, r3, #31
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1a      	ldr	r2, [r3, #32]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a1a      	ldr	r2, [r3, #32]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
	...

08004ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e050      	b.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d018      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f44:	d013      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a18      	ldr	r2, [pc, #96]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00e      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d009      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a13      	ldr	r2, [pc, #76]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d10c      	bne.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800
 8004fb4:	40000c00 	.word	0x40000c00
 8004fb8:	40014000 	.word	0x40014000

08004fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e03f      	b.n	800504e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc ff1e 	bl	8001e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2224      	movs	r2, #36	; 0x24
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f929 	bl	8005258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b08a      	sub	sp, #40	; 0x28
 800505a:	af02      	add	r7, sp, #8
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b20      	cmp	r3, #32
 8005074:	d17c      	bne.n	8005170 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <HAL_UART_Transmit+0x2c>
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e075      	b.n	8005172 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_UART_Transmit+0x3e>
 8005090:	2302      	movs	r3, #2
 8005092:	e06e      	b.n	8005172 <HAL_UART_Transmit+0x11c>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2221      	movs	r2, #33	; 0x21
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050aa:	f7fc ff93 	bl	8001fd4 <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	88fa      	ldrh	r2, [r7, #6]
 80050ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c4:	d108      	bne.n	80050d8 <HAL_UART_Transmit+0x82>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	e003      	b.n	80050e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050e8:	e02a      	b.n	8005140 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2200      	movs	r2, #0
 80050f2:	2180      	movs	r1, #128	; 0x80
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f840 	bl	800517a <UART_WaitOnFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e036      	b.n	8005172 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10b      	bne.n	8005122 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005118:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	3302      	adds	r3, #2
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e007      	b.n	8005132 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	3301      	adds	r3, #1
 8005130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1cf      	bne.n	80050ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2200      	movs	r2, #0
 8005152:	2140      	movs	r1, #64	; 0x40
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f810 	bl	800517a <UART_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e006      	b.n	8005172 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
  }
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b090      	sub	sp, #64	; 0x40
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	603b      	str	r3, [r7, #0]
 8005186:	4613      	mov	r3, r2
 8005188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518a:	e050      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d04c      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0x30>
 800519a:	f7fc ff1b 	bl	8001fd4 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d241      	bcs.n	800522e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	330c      	adds	r3, #12
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051ca:	637a      	str	r2, [r7, #52]	; 0x34
 80051cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e5      	bne.n	80051aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3314      	adds	r3, #20
 80051e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	613b      	str	r3, [r7, #16]
   return(result);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3314      	adds	r3, #20
 80051fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fe:	623a      	str	r2, [r7, #32]
 8005200:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	69f9      	ldr	r1, [r7, #28]
 8005204:	6a3a      	ldr	r2, [r7, #32]
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	61bb      	str	r3, [r7, #24]
   return(result);
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e5      	bne.n	80051de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e00f      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4013      	ands	r3, r2
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	bf0c      	ite	eq
 800523e:	2301      	moveq	r3, #1
 8005240:	2300      	movne	r3, #0
 8005242:	b2db      	uxtb	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	429a      	cmp	r2, r3
 800524a:	d09f      	beq.n	800518c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3740      	adds	r7, #64	; 0x40
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	b09f      	sub	sp, #124	; 0x7c
 800525e:	af00      	add	r7, sp, #0
 8005260:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800526c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526e:	68d9      	ldr	r1, [r3, #12]
 8005270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	ea40 0301 	orr.w	r3, r0, r1
 8005278:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800527a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	431a      	orrs	r2, r3
 8005284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	431a      	orrs	r2, r3
 800528a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	4313      	orrs	r3, r2
 8005290:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800529c:	f021 010c 	bic.w	r1, r1, #12
 80052a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052a6:	430b      	orrs	r3, r1
 80052a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b6:	6999      	ldr	r1, [r3, #24]
 80052b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	ea40 0301 	orr.w	r3, r0, r1
 80052c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4bc5      	ldr	r3, [pc, #788]	; (80055dc <UART_SetConfig+0x384>)
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d004      	beq.n	80052d6 <UART_SetConfig+0x7e>
 80052cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4bc3      	ldr	r3, [pc, #780]	; (80055e0 <UART_SetConfig+0x388>)
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d103      	bne.n	80052de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052d6:	f7fe fe67 	bl	8003fa8 <HAL_RCC_GetPCLK2Freq>
 80052da:	6778      	str	r0, [r7, #116]	; 0x74
 80052dc:	e002      	b.n	80052e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052de:	f7fe fe4f 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 80052e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ec:	f040 80b6 	bne.w	800545c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f2:	461c      	mov	r4, r3
 80052f4:	f04f 0500 	mov.w	r5, #0
 80052f8:	4622      	mov	r2, r4
 80052fa:	462b      	mov	r3, r5
 80052fc:	1891      	adds	r1, r2, r2
 80052fe:	6439      	str	r1, [r7, #64]	; 0x40
 8005300:	415b      	adcs	r3, r3
 8005302:	647b      	str	r3, [r7, #68]	; 0x44
 8005304:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005308:	1912      	adds	r2, r2, r4
 800530a:	eb45 0303 	adc.w	r3, r5, r3
 800530e:	f04f 0000 	mov.w	r0, #0
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	00d9      	lsls	r1, r3, #3
 8005318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800531c:	00d0      	lsls	r0, r2, #3
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	1911      	adds	r1, r2, r4
 8005324:	6639      	str	r1, [r7, #96]	; 0x60
 8005326:	416b      	adcs	r3, r5
 8005328:	667b      	str	r3, [r7, #100]	; 0x64
 800532a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	461a      	mov	r2, r3
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	1891      	adds	r1, r2, r2
 8005336:	63b9      	str	r1, [r7, #56]	; 0x38
 8005338:	415b      	adcs	r3, r3
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005340:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005344:	f7fa ff9c 	bl	8000280 <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4ba5      	ldr	r3, [pc, #660]	; (80055e4 <UART_SetConfig+0x38c>)
 800534e:	fba3 2302 	umull	r2, r3, r3, r2
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	011e      	lsls	r6, r3, #4
 8005356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005358:	461c      	mov	r4, r3
 800535a:	f04f 0500 	mov.w	r5, #0
 800535e:	4622      	mov	r2, r4
 8005360:	462b      	mov	r3, r5
 8005362:	1891      	adds	r1, r2, r2
 8005364:	6339      	str	r1, [r7, #48]	; 0x30
 8005366:	415b      	adcs	r3, r3
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
 800536a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800536e:	1912      	adds	r2, r2, r4
 8005370:	eb45 0303 	adc.w	r3, r5, r3
 8005374:	f04f 0000 	mov.w	r0, #0
 8005378:	f04f 0100 	mov.w	r1, #0
 800537c:	00d9      	lsls	r1, r3, #3
 800537e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005382:	00d0      	lsls	r0, r2, #3
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	1911      	adds	r1, r2, r4
 800538a:	65b9      	str	r1, [r7, #88]	; 0x58
 800538c:	416b      	adcs	r3, r5
 800538e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	461a      	mov	r2, r3
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	1891      	adds	r1, r2, r2
 800539c:	62b9      	str	r1, [r7, #40]	; 0x28
 800539e:	415b      	adcs	r3, r3
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80053aa:	f7fa ff69 	bl	8000280 <__aeabi_uldivmod>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4b8c      	ldr	r3, [pc, #560]	; (80055e4 <UART_SetConfig+0x38c>)
 80053b4:	fba3 1302 	umull	r1, r3, r3, r2
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	2164      	movs	r1, #100	; 0x64
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	3332      	adds	r3, #50	; 0x32
 80053c6:	4a87      	ldr	r2, [pc, #540]	; (80055e4 <UART_SetConfig+0x38c>)
 80053c8:	fba2 2303 	umull	r2, r3, r2, r3
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053d4:	441e      	add	r6, r3
 80053d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053d8:	4618      	mov	r0, r3
 80053da:	f04f 0100 	mov.w	r1, #0
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	1894      	adds	r4, r2, r2
 80053e4:	623c      	str	r4, [r7, #32]
 80053e6:	415b      	adcs	r3, r3
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053ee:	1812      	adds	r2, r2, r0
 80053f0:	eb41 0303 	adc.w	r3, r1, r3
 80053f4:	f04f 0400 	mov.w	r4, #0
 80053f8:	f04f 0500 	mov.w	r5, #0
 80053fc:	00dd      	lsls	r5, r3, #3
 80053fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005402:	00d4      	lsls	r4, r2, #3
 8005404:	4622      	mov	r2, r4
 8005406:	462b      	mov	r3, r5
 8005408:	1814      	adds	r4, r2, r0
 800540a:	653c      	str	r4, [r7, #80]	; 0x50
 800540c:	414b      	adcs	r3, r1
 800540e:	657b      	str	r3, [r7, #84]	; 0x54
 8005410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	461a      	mov	r2, r3
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	1891      	adds	r1, r2, r2
 800541c:	61b9      	str	r1, [r7, #24]
 800541e:	415b      	adcs	r3, r3
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005426:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800542a:	f7fa ff29 	bl	8000280 <__aeabi_uldivmod>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4b6c      	ldr	r3, [pc, #432]	; (80055e4 <UART_SetConfig+0x38c>)
 8005434:	fba3 1302 	umull	r1, r3, r3, r2
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	2164      	movs	r1, #100	; 0x64
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	3332      	adds	r3, #50	; 0x32
 8005446:	4a67      	ldr	r2, [pc, #412]	; (80055e4 <UART_SetConfig+0x38c>)
 8005448:	fba2 2303 	umull	r2, r3, r2, r3
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	f003 0207 	and.w	r2, r3, #7
 8005452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4432      	add	r2, r6
 8005458:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800545a:	e0b9      	b.n	80055d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800545c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800545e:	461c      	mov	r4, r3
 8005460:	f04f 0500 	mov.w	r5, #0
 8005464:	4622      	mov	r2, r4
 8005466:	462b      	mov	r3, r5
 8005468:	1891      	adds	r1, r2, r2
 800546a:	6139      	str	r1, [r7, #16]
 800546c:	415b      	adcs	r3, r3
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005474:	1912      	adds	r2, r2, r4
 8005476:	eb45 0303 	adc.w	r3, r5, r3
 800547a:	f04f 0000 	mov.w	r0, #0
 800547e:	f04f 0100 	mov.w	r1, #0
 8005482:	00d9      	lsls	r1, r3, #3
 8005484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005488:	00d0      	lsls	r0, r2, #3
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	eb12 0804 	adds.w	r8, r2, r4
 8005492:	eb43 0905 	adc.w	r9, r3, r5
 8005496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4618      	mov	r0, r3
 800549c:	f04f 0100 	mov.w	r1, #0
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	008b      	lsls	r3, r1, #2
 80054aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054ae:	0082      	lsls	r2, r0, #2
 80054b0:	4640      	mov	r0, r8
 80054b2:	4649      	mov	r1, r9
 80054b4:	f7fa fee4 	bl	8000280 <__aeabi_uldivmod>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4b49      	ldr	r3, [pc, #292]	; (80055e4 <UART_SetConfig+0x38c>)
 80054be:	fba3 2302 	umull	r2, r3, r3, r2
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	011e      	lsls	r6, r3, #4
 80054c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c8:	4618      	mov	r0, r3
 80054ca:	f04f 0100 	mov.w	r1, #0
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	1894      	adds	r4, r2, r2
 80054d4:	60bc      	str	r4, [r7, #8]
 80054d6:	415b      	adcs	r3, r3
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054de:	1812      	adds	r2, r2, r0
 80054e0:	eb41 0303 	adc.w	r3, r1, r3
 80054e4:	f04f 0400 	mov.w	r4, #0
 80054e8:	f04f 0500 	mov.w	r5, #0
 80054ec:	00dd      	lsls	r5, r3, #3
 80054ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054f2:	00d4      	lsls	r4, r2, #3
 80054f4:	4622      	mov	r2, r4
 80054f6:	462b      	mov	r3, r5
 80054f8:	1814      	adds	r4, r2, r0
 80054fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80054fc:	414b      	adcs	r3, r1
 80054fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4618      	mov	r0, r3
 8005506:	f04f 0100 	mov.w	r1, #0
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	008b      	lsls	r3, r1, #2
 8005514:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005518:	0082      	lsls	r2, r0, #2
 800551a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800551e:	f7fa feaf 	bl	8000280 <__aeabi_uldivmod>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <UART_SetConfig+0x38c>)
 8005528:	fba3 1302 	umull	r1, r3, r3, r2
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	2164      	movs	r1, #100	; 0x64
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	3332      	adds	r3, #50	; 0x32
 800553a:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <UART_SetConfig+0x38c>)
 800553c:	fba2 2303 	umull	r2, r3, r2, r3
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005546:	441e      	add	r6, r3
 8005548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800554a:	4618      	mov	r0, r3
 800554c:	f04f 0100 	mov.w	r1, #0
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	1894      	adds	r4, r2, r2
 8005556:	603c      	str	r4, [r7, #0]
 8005558:	415b      	adcs	r3, r3
 800555a:	607b      	str	r3, [r7, #4]
 800555c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005560:	1812      	adds	r2, r2, r0
 8005562:	eb41 0303 	adc.w	r3, r1, r3
 8005566:	f04f 0400 	mov.w	r4, #0
 800556a:	f04f 0500 	mov.w	r5, #0
 800556e:	00dd      	lsls	r5, r3, #3
 8005570:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005574:	00d4      	lsls	r4, r2, #3
 8005576:	4622      	mov	r2, r4
 8005578:	462b      	mov	r3, r5
 800557a:	eb12 0a00 	adds.w	sl, r2, r0
 800557e:	eb43 0b01 	adc.w	fp, r3, r1
 8005582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4618      	mov	r0, r3
 8005588:	f04f 0100 	mov.w	r1, #0
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	008b      	lsls	r3, r1, #2
 8005596:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800559a:	0082      	lsls	r2, r0, #2
 800559c:	4650      	mov	r0, sl
 800559e:	4659      	mov	r1, fp
 80055a0:	f7fa fe6e 	bl	8000280 <__aeabi_uldivmod>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <UART_SetConfig+0x38c>)
 80055aa:	fba3 1302 	umull	r1, r3, r3, r2
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	2164      	movs	r1, #100	; 0x64
 80055b2:	fb01 f303 	mul.w	r3, r1, r3
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	3332      	adds	r3, #50	; 0x32
 80055bc:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <UART_SetConfig+0x38c>)
 80055be:	fba2 2303 	umull	r2, r3, r2, r3
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	f003 020f 	and.w	r2, r3, #15
 80055c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4432      	add	r2, r6
 80055ce:	609a      	str	r2, [r3, #8]
}
 80055d0:	bf00      	nop
 80055d2:	377c      	adds	r7, #124	; 0x7c
 80055d4:	46bd      	mov	sp, r7
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055da:	bf00      	nop
 80055dc:	40011000 	.word	0x40011000
 80055e0:	40011400 	.word	0x40011400
 80055e4:	51eb851f 	.word	0x51eb851f

080055e8 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	881a      	ldrh	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	799b      	ldrb	r3, [r3, #6]
 80055fa:	08db      	lsrs	r3, r3, #3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	b29b      	uxth	r3, r3
 8005600:	fb12 f303 	smulbb	r3, r2, r3
 8005604:	b29a      	uxth	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	889b      	ldrh	r3, [r3, #4]
 800560e:	461a      	mov	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	885b      	ldrh	r3, [r3, #2]
 8005614:	fb03 f302 	mul.w	r3, r3, r2
 8005618:	461a      	mov	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	60da      	str	r2, [r3, #12]
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8005630:	b490      	push	{r4, r7}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	4604      	mov	r4, r0
 8005638:	4608      	mov	r0, r1
 800563a:	1d39      	adds	r1, r7, #4
 800563c:	e881 000c 	stmia.w	r1, {r2, r3}
 8005640:	4623      	mov	r3, r4
 8005642:	81fb      	strh	r3, [r7, #14]
 8005644:	4603      	mov	r3, r0
 8005646:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8005648:	2300      	movs	r3, #0
 800564a:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 800564c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005650:	88ba      	ldrh	r2, [r7, #4]
 8005652:	4293      	cmp	r3, r2
 8005654:	da04      	bge.n	8005660 <code+0x30>
        code |= LEFT;
 8005656:	2201      	movs	r2, #1
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	4313      	orrs	r3, r2
 800565c:	75fb      	strb	r3, [r7, #23]
 800565e:	e008      	b.n	8005672 <code+0x42>
    } else if (x0 > window.x1) {
 8005660:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005664:	893a      	ldrh	r2, [r7, #8]
 8005666:	4293      	cmp	r3, r2
 8005668:	dd03      	ble.n	8005672 <code+0x42>
        code |= RIGHT;
 800566a:	2202      	movs	r2, #2
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	4313      	orrs	r3, r2
 8005670:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8005672:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	4293      	cmp	r3, r2
 800567a:	da04      	bge.n	8005686 <code+0x56>
        code |= BOTTOM;
 800567c:	2204      	movs	r2, #4
 800567e:	7dfb      	ldrb	r3, [r7, #23]
 8005680:	4313      	orrs	r3, r2
 8005682:	75fb      	strb	r3, [r7, #23]
 8005684:	e008      	b.n	8005698 <code+0x68>
    } else if (y0 > window.y1) {
 8005686:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800568a:	897a      	ldrh	r2, [r7, #10]
 800568c:	4293      	cmp	r3, r2
 800568e:	dd03      	ble.n	8005698 <code+0x68>
        code |= TOP;
 8005690:	2208      	movs	r2, #8
 8005692:	7dfb      	ldrb	r3, [r7, #23]
 8005694:	4313      	orrs	r3, r2
 8005696:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8005698:	7dfb      	ldrb	r3, [r7, #23]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc90      	pop	{r4, r7}
 80056a2:	4770      	bx	lr

080056a4 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f9b3 1000 	ldrsh.w	r1, [r3]
 80056be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056c2:	cb0c      	ldmia	r3, {r2, r3}
 80056c4:	f7ff ffb4 	bl	8005630 <code>
 80056c8:	4603      	mov	r3, r0
 80056ca:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f9b3 0000 	ldrsh.w	r0, [r3]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80056d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056dc:	cb0c      	ldmia	r3, {r2, r3}
 80056de:	f7ff ffa7 	bl	8005630 <code>
 80056e2:	4603      	mov	r3, r0
 80056e4:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 80056e6:	2300      	movs	r3, #0
 80056e8:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 80056ea:	7ffa      	ldrb	r2, [r7, #31]
 80056ec:	7fbb      	ldrb	r3, [r7, #30]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 80056f6:	2301      	movs	r3, #1
 80056f8:	777b      	strb	r3, [r7, #29]
            break;
 80056fa:	e0e9      	b.n	80058d0 <clip_line+0x22c>
        } else if (code0 & code1) {
 80056fc:	7ffa      	ldrb	r2, [r7, #31]
 80056fe:	7fbb      	ldrb	r3, [r7, #30]
 8005700:	4013      	ands	r3, r2
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	f040 80e2 	bne.w	80058ce <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8005712:	7ffb      	ldrb	r3, [r7, #31]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <clip_line+0x78>
 8005718:	7ffb      	ldrb	r3, [r7, #31]
 800571a:	e000      	b.n	800571e <clip_line+0x7a>
 800571c:	7fbb      	ldrb	r3, [r7, #30]
 800571e:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8005720:	2208      	movs	r2, #8
 8005722:	7dfb      	ldrb	r3, [r7, #23]
 8005724:	4013      	ands	r3, r2
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d024      	beq.n	8005776 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005732:	b29a      	uxth	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800573a:	4619      	mov	r1, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005742:	1acb      	subs	r3, r1, r3
 8005744:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8005746:	4608      	mov	r0, r1
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	f9b1 1000 	ldrsh.w	r1, [r1]
 800574e:	1a41      	subs	r1, r0, r1
 8005750:	fb01 f103 	mul.w	r1, r1, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800575a:	4618      	mov	r0, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005762:	1ac3      	subs	r3, r0, r3
 8005764:	fb91 f3f3 	sdiv	r3, r1, r3
 8005768:	b29b      	uxth	r3, r3
 800576a:	4413      	add	r3, r2
 800576c:	b29b      	uxth	r3, r3
 800576e:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8005770:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005772:	833b      	strh	r3, [r7, #24]
 8005774:	e07f      	b.n	8005876 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8005776:	2204      	movs	r2, #4
 8005778:	7dfb      	ldrb	r3, [r7, #23]
 800577a:	4013      	ands	r3, r2
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d024      	beq.n	80057cc <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005788:	b29a      	uxth	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005790:	4619      	mov	r1, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005798:	1acb      	subs	r3, r1, r3
 800579a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800579c:	4608      	mov	r0, r1
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80057a4:	1a41      	subs	r1, r0, r1
 80057a6:	fb01 f103 	mul.w	r1, r1, r3
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057b0:	4618      	mov	r0, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057b8:	1ac3      	subs	r3, r0, r3
 80057ba:	fb91 f3f3 	sdiv	r3, r1, r3
 80057be:	b29b      	uxth	r3, r3
 80057c0:	4413      	add	r3, r2
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 80057c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057c8:	833b      	strh	r3, [r7, #24]
 80057ca:	e054      	b.n	8005876 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 80057cc:	2202      	movs	r2, #2
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	4013      	ands	r3, r2
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d024      	beq.n	8005822 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057de:	b29a      	uxth	r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057e6:	4619      	mov	r1, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057ee:	1acb      	subs	r3, r1, r3
 80057f0:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80057f2:	4608      	mov	r0, r1
 80057f4:	68f9      	ldr	r1, [r7, #12]
 80057f6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80057fa:	1a41      	subs	r1, r0, r1
 80057fc:	fb01 f103 	mul.w	r1, r1, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005806:	4618      	mov	r0, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800580e:	1ac3      	subs	r3, r0, r3
 8005810:	fb91 f3f3 	sdiv	r3, r1, r3
 8005814:	b29b      	uxth	r3, r3
 8005816:	4413      	add	r3, r2
 8005818:	b29b      	uxth	r3, r3
 800581a:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 800581c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800581e:	837b      	strh	r3, [r7, #26]
 8005820:	e029      	b.n	8005876 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8005822:	2201      	movs	r2, #1
 8005824:	7dfb      	ldrb	r3, [r7, #23]
 8005826:	4013      	ands	r3, r2
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d023      	beq.n	8005876 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005834:	b29a      	uxth	r2, r3
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800583c:	4619      	mov	r1, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005844:	1acb      	subs	r3, r1, r3
 8005846:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8005848:	4608      	mov	r0, r1
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005850:	1a41      	subs	r1, r0, r1
 8005852:	fb01 f103 	mul.w	r1, r1, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800585c:	4618      	mov	r0, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005864:	1ac3      	subs	r3, r0, r3
 8005866:	fb91 f3f3 	sdiv	r3, r1, r3
 800586a:	b29b      	uxth	r3, r3
 800586c:	4413      	add	r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8005872:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005874:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8005876:	7dfa      	ldrb	r2, [r7, #23]
 8005878:	7ffb      	ldrb	r3, [r7, #31]
 800587a:	429a      	cmp	r2, r3
 800587c:	d113      	bne.n	80058a6 <clip_line+0x202>
                *x0 = x;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8b7a      	ldrh	r2, [r7, #26]
 8005882:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	8b3a      	ldrh	r2, [r7, #24]
 8005888:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800589a:	cb0c      	ldmia	r3, {r2, r3}
 800589c:	f7ff fec8 	bl	8005630 <code>
 80058a0:	4603      	mov	r3, r0
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e721      	b.n	80056ea <clip_line+0x46>
            } else {
                *x1 = x;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8b7a      	ldrh	r2, [r7, #26]
 80058aa:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	8b3a      	ldrh	r2, [r7, #24]
 80058b0:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	f9b3 1000 	ldrsh.w	r1, [r3]
 80058be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058c2:	cb0c      	ldmia	r3, {r2, r3}
 80058c4:	f7ff feb4 	bl	8005630 <code>
 80058c8:	4603      	mov	r3, r0
 80058ca:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 80058cc:	e70d      	b.n	80056ea <clip_line+0x46>
            break;
 80058ce:	bf00      	nop
            }
        }
    }

    return accept;
 80058d0:	7f7b      	ldrb	r3, [r7, #29]
 80058d2:	4618      	mov	r0, r3
 80058d4:	3720      	adds	r7, #32
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	3306      	adds	r3, #6
 80058ea:	2208      	movs	r2, #8
 80058ec:	4619      	mov	r1, r3
 80058ee:	f001 f933 	bl	8006b58 <memcpy>
    meta->width = font[FONTX_WIDTH];
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	7b9a      	ldrb	r2, [r3, #14]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	7bda      	ldrb	r2, [r3, #15]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	7c1a      	ldrb	r2, [r3, #16]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	72da      	strb	r2, [r3, #11]

    return 0;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b08e      	sub	sp, #56	; 0x38
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8005920:	f107 0314 	add.w	r3, r7, #20
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ffd7 	bl	80058da <fontx_meta>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8005932:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <fontx_glyph+0x2c>
        return status;
 800593a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800593e:	e077      	b.n	8005a30 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8005940:	7f7a      	ldrb	r2, [r7, #29]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8005946:	7fba      	ldrb	r2, [r7, #30]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 800594c:	7f7b      	ldrb	r3, [r7, #29]
 800594e:	3307      	adds	r3, #7
 8005950:	2b00      	cmp	r3, #0
 8005952:	da00      	bge.n	8005956 <fontx_glyph+0x42>
 8005954:	3307      	adds	r3, #7
 8005956:	10db      	asrs	r3, r3, #3
 8005958:	b2da      	uxtb	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	78da      	ldrb	r2, [r3, #3]
 8005962:	7fbb      	ldrb	r3, [r7, #30]
 8005964:	fb12 f303 	smulbb	r3, r2, r3
 8005968:	b2da      	uxtb	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 800596e:	7ffb      	ldrb	r3, [r7, #31]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10f      	bne.n	8005994 <fontx_glyph+0x80>
        if (code < 0x100) {
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2bff      	cmp	r3, #255	; 0xff
 8005978:	d859      	bhi.n	8005a2e <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	789b      	ldrb	r3, [r3, #2]
 800597e:	461a      	mov	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	fb03 f302 	mul.w	r3, r3, r2
 8005986:	3311      	adds	r3, #17
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	441a      	add	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e04d      	b.n	8005a30 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3312      	adds	r3, #18
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3311      	adds	r3, #17
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 80059a6:	e03d      	b.n	8005a24 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	3301      	adds	r3, #1
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	4413      	add	r3, r2
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	3302      	adds	r3, #2
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c4:	3303      	adds	r3, #3
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	4413      	add	r3, r2
 80059cc:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d31c      	bcc.n	8005a10 <fontx_glyph+0xfc>
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d818      	bhi.n	8005a10 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059e6:	4413      	add	r3, r2
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3311      	adds	r3, #17
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	461a      	mov	r2, r3
                    nc * glyph->size
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	789b      	ldrb	r3, [r3, #2]
 80059f8:	4619      	mov	r1, r3
 80059fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fc:	fb03 f301 	mul.w	r3, r3, r1
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8005a00:	4413      	add	r3, r2
 8005a02:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	441a      	add	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e00f      	b.n	8005a30 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8005a10:	6a3a      	ldr	r2, [r7, #32]
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	1ad2      	subs	r2, r2, r3
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a18:	4413      	add	r3, r2
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	3304      	adds	r3, #4
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	1e5a      	subs	r2, r3, #1
 8005a28:	633a      	str	r2, [r7, #48]	; 0x30
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1bc      	bne.n	80059a8 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4618      	mov	r0, r3
 8005a32:	3738      	adds	r7, #56	; 0x38
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	dd01      	ble.n	8005a4e <min+0x16>
        return b;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	e000      	b.n	8005a50 <min+0x18>
    };
    return a;
 8005a4e:	687b      	ldr	r3, [r7, #4]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <max>:

static inline int max(int a, int b) {
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	dd01      	ble.n	8005a72 <max+0x16>
        return a;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	e000      	b.n	8005a74 <max+0x18>
    }
    return b;
 8005a72:	683b      	ldr	r3, [r7, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8005a80:	b490      	push	{r4, r7}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4623      	mov	r3, r4
 8005a90:	80fb      	strh	r3, [r7, #6]
 8005a92:	4603      	mov	r3, r0
 8005a94:	80bb      	strh	r3, [r7, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	807b      	strh	r3, [r7, #2]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 8005a9e:	4a08      	ldr	r2, [pc, #32]	; (8005ac0 <hagl_set_clip_window+0x40>)
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 8005aa4:	4a06      	ldr	r2, [pc, #24]	; (8005ac0 <hagl_set_clip_window+0x40>)
 8005aa6:	88bb      	ldrh	r3, [r7, #4]
 8005aa8:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 8005aaa:	4a05      	ldr	r2, [pc, #20]	; (8005ac0 <hagl_set_clip_window+0x40>)
 8005aac:	887b      	ldrh	r3, [r7, #2]
 8005aae:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 8005ab0:	4a03      	ldr	r2, [pc, #12]	; (8005ac0 <hagl_set_clip_window+0x40>)
 8005ab2:	883b      	ldrh	r3, [r7, #0]
 8005ab4:	80d3      	strh	r3, [r2, #6]
}
 8005ab6:	bf00      	nop
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc90      	pop	{r4, r7}
 8005abe:	4770      	bx	lr
 8005ac0:	20000010 	.word	0x20000010

08005ac4 <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	80fb      	strh	r3, [r7, #6]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	80bb      	strh	r3, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8005ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ada:	4a12      	ldr	r2, [pc, #72]	; (8005b24 <hagl_put_pixel+0x60>)
 8005adc:	8812      	ldrh	r2, [r2, #0]
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	db1a      	blt.n	8005b18 <hagl_put_pixel+0x54>
 8005ae2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ae6:	4a0f      	ldr	r2, [pc, #60]	; (8005b24 <hagl_put_pixel+0x60>)
 8005ae8:	8852      	ldrh	r2, [r2, #2]
 8005aea:	4293      	cmp	r3, r2
 8005aec:	db14      	blt.n	8005b18 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8005aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005af2:	4a0c      	ldr	r2, [pc, #48]	; (8005b24 <hagl_put_pixel+0x60>)
 8005af4:	8892      	ldrh	r2, [r2, #4]
 8005af6:	4293      	cmp	r3, r2
 8005af8:	dc10      	bgt.n	8005b1c <hagl_put_pixel+0x58>
 8005afa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005afe:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <hagl_put_pixel+0x60>)
 8005b00:	88d2      	ldrh	r2, [r2, #6]
 8005b02:	4293      	cmp	r3, r2
 8005b04:	dc0a      	bgt.n	8005b1c <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8005b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b0a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b0e:	887a      	ldrh	r2, [r7, #2]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fb f895 	bl	8000c40 <lcd_put_pixel>
 8005b16:	e002      	b.n	8005b1e <hagl_put_pixel+0x5a>
        return;
 8005b18:	bf00      	nop
 8005b1a:	e000      	b.n	8005b1e <hagl_put_pixel+0x5a>
        return;
 8005b1c:	bf00      	nop
}
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20000010 	.word	0x20000010

08005b28 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	461a      	mov	r2, r3
 8005b36:	4623      	mov	r3, r4
 8005b38:	80fb      	strh	r3, [r7, #6]
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	80bb      	strh	r3, [r7, #4]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	807b      	strh	r3, [r7, #2]
 8005b42:	4613      	mov	r3, r2
 8005b44:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8005b46:	88fa      	ldrh	r2, [r7, #6]
 8005b48:	887b      	ldrh	r3, [r7, #2]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	b21a      	sxth	r2, r3
 8005b50:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005b54:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b58:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b5c:	883b      	ldrh	r3, [r7, #0]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	4623      	mov	r3, r4
 8005b62:	f000 f827 	bl	8005bb4 <hagl_draw_line>
#endif
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd90      	pop	{r4, r7, pc}

08005b6e <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8005b6e:	b590      	push	{r4, r7, lr}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af02      	add	r7, sp, #8
 8005b74:	4604      	mov	r4, r0
 8005b76:	4608      	mov	r0, r1
 8005b78:	4611      	mov	r1, r2
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4623      	mov	r3, r4
 8005b7e:	80fb      	strh	r3, [r7, #6]
 8005b80:	4603      	mov	r3, r0
 8005b82:	80bb      	strh	r3, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	807b      	strh	r3, [r7, #2]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8005b8c:	88ba      	ldrh	r2, [r7, #4]
 8005b8e:	887b      	ldrh	r3, [r7, #2]
 8005b90:	4413      	add	r3, r2
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	b21c      	sxth	r4, r3
 8005b96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b9a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b9e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005ba2:	883b      	ldrh	r3, [r7, #0]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	4623      	mov	r3, r4
 8005ba8:	f000 f804 	bl	8005bb4 <hagl_draw_line>
#endif
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd90      	pop	{r4, r7, pc}

08005bb4 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8005bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb6:	b089      	sub	sp, #36	; 0x24
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	4604      	mov	r4, r0
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	80fb      	strh	r3, [r7, #6]
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	80bb      	strh	r3, [r7, #4]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	807b      	strh	r3, [r7, #2]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8005bd2:	463b      	mov	r3, r7
 8005bd4:	1cba      	adds	r2, r7, #2
 8005bd6:	1d3d      	adds	r5, r7, #4
 8005bd8:	1dbc      	adds	r4, r7, #6
 8005bda:	494a      	ldr	r1, [pc, #296]	; (8005d04 <hagl_draw_line+0x150>)
 8005bdc:	466e      	mov	r6, sp
 8005bde:	c903      	ldmia	r1, {r0, r1}
 8005be0:	e886 0003 	stmia.w	r6, {r0, r1}
 8005be4:	4629      	mov	r1, r5
 8005be6:	4620      	mov	r0, r4
 8005be8:	f7ff fd5c 	bl	80056a4 <clip_line>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f083 0301 	eor.w	r3, r3, #1
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d17e      	bne.n	8005cf6 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8005bf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	bfb8      	it	lt
 8005c08:	425b      	neglt	r3, r3
 8005c0a:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8005c0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	da01      	bge.n	8005c1c <hagl_draw_line+0x68>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e001      	b.n	8005c20 <hagl_draw_line+0x6c>
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c20:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8005c22:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	bfb8      	it	lt
 8005c32:	425b      	neglt	r3, r3
 8005c34:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8005c36:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005c3a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	da01      	bge.n	8005c46 <hagl_draw_line+0x92>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e001      	b.n	8005c4a <hagl_draw_line+0x96>
 8005c46:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4a:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8005c4c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005c50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	dd06      	ble.n	8005c66 <hagl_draw_line+0xb2>
 8005c58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c5c:	0fda      	lsrs	r2, r3, #31
 8005c5e:	4413      	add	r3, r2
 8005c60:	105b      	asrs	r3, r3, #1
 8005c62:	b21b      	sxth	r3, r3
 8005c64:	e006      	b.n	8005c74 <hagl_draw_line+0xc0>
 8005c66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c6a:	0fda      	lsrs	r2, r3, #31
 8005c6c:	4413      	add	r3, r2
 8005c6e:	105b      	asrs	r3, r3, #1
 8005c70:	425b      	negs	r3, r3
 8005c72:	b21b      	sxth	r3, r3
 8005c74:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8005c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c7a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005c7e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff ff1f 	bl	8005ac4 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8005c86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d105      	bne.n	8005c9e <hagl_draw_line+0xea>
 8005c92:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005c96:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d02d      	beq.n	8005cfa <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8005c9e:	8afb      	ldrh	r3, [r7, #22]
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8005ca6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005caa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005cae:	425b      	negs	r3, r3
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	dd0c      	ble.n	8005cce <hagl_draw_line+0x11a>
            err -= dy;
 8005cb4:	8afa      	ldrh	r2, [r7, #22]
 8005cb6:	8a3b      	ldrh	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8005cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	8a7b      	ldrh	r3, [r7, #18]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	b21b      	sxth	r3, r3
 8005ccc:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8005cce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005cd2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	dacd      	bge.n	8005c76 <hagl_draw_line+0xc2>
            err += dx;
 8005cda:	8afa      	ldrh	r2, [r7, #22]
 8005cdc:	8abb      	ldrh	r3, [r7, #20]
 8005cde:	4413      	add	r3, r2
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8005ce4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	89fb      	ldrh	r3, [r7, #14]
 8005cec:	4413      	add	r3, r2
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	b21b      	sxth	r3, r3
 8005cf2:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8005cf4:	e7bf      	b.n	8005c76 <hagl_draw_line+0xc2>
        return;
 8005cf6:	bf00      	nop
 8005cf8:	e000      	b.n	8005cfc <hagl_draw_line+0x148>
            break;
 8005cfa:	bf00      	nop
        }
    }
}
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000010 	.word	0x20000010

08005d08 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	4611      	mov	r1, r2
 8005d14:	461a      	mov	r2, r3
 8005d16:	4623      	mov	r3, r4
 8005d18:	80fb      	strh	r3, [r7, #6]
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	80bb      	strh	r3, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	807b      	strh	r3, [r7, #2]
 8005d22:	4613      	mov	r3, r2
 8005d24:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8005d26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	dd0e      	ble.n	8005d50 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 8005d32:	88fa      	ldrh	r2, [r7, #6]
 8005d34:	887b      	ldrh	r3, [r7, #2]
 8005d36:	4413      	add	r3, r2
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8005d3c:	88fa      	ldrh	r2, [r7, #6]
 8005d3e:	887b      	ldrh	r3, [r7, #2]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8005d46:	88fa      	ldrh	r2, [r7, #6]
 8005d48:	887b      	ldrh	r3, [r7, #2]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8005d50:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005d54:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	dd0e      	ble.n	8005d7a <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8005d5c:	88ba      	ldrh	r2, [r7, #4]
 8005d5e:	883b      	ldrh	r3, [r7, #0]
 8005d60:	4413      	add	r3, r2
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8005d66:	88ba      	ldrh	r2, [r7, #4]
 8005d68:	883b      	ldrh	r3, [r7, #0]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8005d70:	88ba      	ldrh	r2, [r7, #4]
 8005d72:	883b      	ldrh	r3, [r7, #0]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8005d7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d7e:	4a24      	ldr	r2, [pc, #144]	; (8005e10 <hagl_draw_rectangle+0x108>)
 8005d80:	8812      	ldrh	r2, [r2, #0]
 8005d82:	4293      	cmp	r3, r2
 8005d84:	db3e      	blt.n	8005e04 <hagl_draw_rectangle+0xfc>
 8005d86:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005d8a:	4a21      	ldr	r2, [pc, #132]	; (8005e10 <hagl_draw_rectangle+0x108>)
 8005d8c:	8852      	ldrh	r2, [r2, #2]
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	db38      	blt.n	8005e04 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8005d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d96:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <hagl_draw_rectangle+0x108>)
 8005d98:	8892      	ldrh	r2, [r2, #4]
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	dc34      	bgt.n	8005e08 <hagl_draw_rectangle+0x100>
 8005d9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005da2:	4a1b      	ldr	r2, [pc, #108]	; (8005e10 <hagl_draw_rectangle+0x108>)
 8005da4:	88d2      	ldrh	r2, [r2, #6]
 8005da6:	4293      	cmp	r3, r2
 8005da8:	dc2e      	bgt.n	8005e08 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 8005daa:	887a      	ldrh	r2, [r7, #2]
 8005dac:	88fb      	ldrh	r3, [r7, #6]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3301      	adds	r3, #1
 8005db4:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 8005db6:	883a      	ldrh	r2, [r7, #0]
 8005db8:	88bb      	ldrh	r3, [r7, #4]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 8005dc2:	8c3b      	ldrh	r3, [r7, #32]
 8005dc4:	89fa      	ldrh	r2, [r7, #14]
 8005dc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005dca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005dce:	f7ff feab 	bl	8005b28 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 8005dd2:	8c3b      	ldrh	r3, [r7, #32]
 8005dd4:	89fa      	ldrh	r2, [r7, #14]
 8005dd6:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005dda:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005dde:	f7ff fea3 	bl	8005b28 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 8005de2:	8c3b      	ldrh	r3, [r7, #32]
 8005de4:	89ba      	ldrh	r2, [r7, #12]
 8005de6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005dea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005dee:	f7ff febe 	bl	8005b6e <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 8005df2:	8c3b      	ldrh	r3, [r7, #32]
 8005df4:	89ba      	ldrh	r2, [r7, #12]
 8005df6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005dfa:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005dfe:	f7ff feb6 	bl	8005b6e <hagl_draw_vline>
 8005e02:	e002      	b.n	8005e0a <hagl_draw_rectangle+0x102>
        return;
 8005e04:	bf00      	nop
 8005e06:	e000      	b.n	8005e0a <hagl_draw_rectangle+0x102>
        return;
 8005e08:	bf00      	nop
}
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd90      	pop	{r4, r7, pc}
 8005e10:	20000010 	.word	0x20000010

08005e14 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8005e14:	b590      	push	{r4, r7, lr}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	461a      	mov	r2, r3
 8005e22:	4623      	mov	r3, r4
 8005e24:	80fb      	strh	r3, [r7, #6]
 8005e26:	4603      	mov	r3, r0
 8005e28:	80bb      	strh	r3, [r7, #4]
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	807b      	strh	r3, [r7, #2]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8005e32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	dd0e      	ble.n	8005e5c <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8005e3e:	88fa      	ldrh	r2, [r7, #6]
 8005e40:	887b      	ldrh	r3, [r7, #2]
 8005e42:	4413      	add	r3, r2
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8005e48:	88fa      	ldrh	r2, [r7, #6]
 8005e4a:	887b      	ldrh	r3, [r7, #2]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8005e52:	88fa      	ldrh	r2, [r7, #6]
 8005e54:	887b      	ldrh	r3, [r7, #2]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8005e5c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005e60:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	dd0e      	ble.n	8005e86 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8005e68:	88ba      	ldrh	r2, [r7, #4]
 8005e6a:	883b      	ldrh	r3, [r7, #0]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8005e72:	88ba      	ldrh	r2, [r7, #4]
 8005e74:	883b      	ldrh	r3, [r7, #0]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8005e7c:	88ba      	ldrh	r2, [r7, #4]
 8005e7e:	883b      	ldrh	r3, [r7, #0]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8005e86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e8a:	4a33      	ldr	r2, [pc, #204]	; (8005f58 <hagl_fill_rectangle+0x144>)
 8005e8c:	8812      	ldrh	r2, [r2, #0]
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	db5b      	blt.n	8005f4a <hagl_fill_rectangle+0x136>
 8005e92:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005e96:	4a30      	ldr	r2, [pc, #192]	; (8005f58 <hagl_fill_rectangle+0x144>)
 8005e98:	8852      	ldrh	r2, [r2, #2]
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	db55      	blt.n	8005f4a <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8005e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ea2:	4a2d      	ldr	r2, [pc, #180]	; (8005f58 <hagl_fill_rectangle+0x144>)
 8005ea4:	8892      	ldrh	r2, [r2, #4]
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	dc51      	bgt.n	8005f4e <hagl_fill_rectangle+0x13a>
 8005eaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005eae:	4a2a      	ldr	r2, [pc, #168]	; (8005f58 <hagl_fill_rectangle+0x144>)
 8005eb0:	88d2      	ldrh	r2, [r2, #6]
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	dc4b      	bgt.n	8005f4e <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8005eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eba:	4a27      	ldr	r2, [pc, #156]	; (8005f58 <hagl_fill_rectangle+0x144>)
 8005ebc:	8812      	ldrh	r2, [r2, #0]
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff fdcb 	bl	8005a5c <max>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8005eca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ece:	4a22      	ldr	r2, [pc, #136]	; (8005f58 <hagl_fill_rectangle+0x144>)
 8005ed0:	8852      	ldrh	r2, [r2, #2]
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fdc1 	bl	8005a5c <max>
 8005eda:	4603      	mov	r3, r0
 8005edc:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8005ede:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ee2:	4a1d      	ldr	r2, [pc, #116]	; (8005f58 <hagl_fill_rectangle+0x144>)
 8005ee4:	8892      	ldrh	r2, [r2, #4]
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff fda5 	bl	8005a38 <min>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8005ef2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005ef6:	4a18      	ldr	r2, [pc, #96]	; (8005f58 <hagl_fill_rectangle+0x144>)
 8005ef8:	88d2      	ldrh	r2, [r2, #6]
 8005efa:	4611      	mov	r1, r2
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fd9b 	bl	8005a38 <min>
 8005f02:	4603      	mov	r3, r0
 8005f04:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8005f06:	887a      	ldrh	r2, [r7, #2]
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3301      	adds	r3, #1
 8005f10:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8005f12:	883a      	ldrh	r2, [r7, #0]
 8005f14:	88bb      	ldrh	r3, [r7, #4]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8005f1e:	2300      	movs	r3, #0
 8005f20:	81fb      	strh	r3, [r7, #14]
 8005f22:	e00d      	b.n	8005f40 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8005f24:	88ba      	ldrh	r2, [r7, #4]
 8005f26:	89fb      	ldrh	r3, [r7, #14]
 8005f28:	4413      	add	r3, r2
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	b219      	sxth	r1, r3
 8005f2e:	8c3b      	ldrh	r3, [r7, #32]
 8005f30:	89ba      	ldrh	r2, [r7, #12]
 8005f32:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005f36:	f7ff fdf7 	bl	8005b28 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8005f3a:	89fb      	ldrh	r3, [r7, #14]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	81fb      	strh	r3, [r7, #14]
 8005f40:	89fa      	ldrh	r2, [r7, #14]
 8005f42:	897b      	ldrh	r3, [r7, #10]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d3ed      	bcc.n	8005f24 <hagl_fill_rectangle+0x110>
 8005f48:	e002      	b.n	8005f50 <hagl_fill_rectangle+0x13c>
        return;
 8005f4a:	bf00      	nop
 8005f4c:	e000      	b.n	8005f50 <hagl_fill_rectangle+0x13c>
        return;
 8005f4e:	bf00      	nop
#endif
    }
}
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd90      	pop	{r4, r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000010 	.word	0x20000010

08005f5c <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8005f5c:	b590      	push	{r4, r7, lr}
 8005f5e:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	f107 0410 	add.w	r4, r7, #16
 8005f6a:	3c04      	subs	r4, #4
 8005f6c:	6020      	str	r0, [r4, #0]
 8005f6e:	460c      	mov	r4, r1
 8005f70:	4610      	mov	r0, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	f107 0310 	add.w	r3, r7, #16
 8005f78:	3b06      	subs	r3, #6
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	f107 0310 	add.w	r3, r7, #16
 8005f82:	3b08      	subs	r3, #8
 8005f84:	4602      	mov	r2, r0
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	f107 0310 	add.w	r3, r7, #16
 8005f8c:	3b0a      	subs	r3, #10
 8005f8e:	460a      	mov	r2, r1
 8005f90:	801a      	strh	r2, [r3, #0]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8005f92:	f107 0310 	add.w	r3, r7, #16
 8005f96:	3b04      	subs	r3, #4
 8005f98:	f107 0010 	add.w	r0, r7, #16
 8005f9c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	f7ff fcb6 	bl	8005914 <fontx_glyph>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005fae:	f102 0209 	add.w	r2, r2, #9
 8005fb2:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8005fb4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005fb8:	f103 0309 	add.w	r3, r3, #9
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <hagl_put_char+0x6a>
        return 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e0ba      	b.n	800613c <hagl_put_char+0x1e0>
    }

    bitmap.width = glyph.width,
 8005fc6:	f107 0310 	add.w	r3, r7, #16
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fd2:	3b18      	subs	r3, #24
 8005fd4:	801a      	strh	r2, [r3, #0]
    bitmap.height = glyph.height,
 8005fd6:	f107 0310 	add.w	r3, r7, #16
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fe2:	3b18      	subs	r3, #24
 8005fe4:	805a      	strh	r2, [r3, #2]
    bitmap.depth = DISPLAY_DEPTH,
 8005fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fea:	3b18      	subs	r3, #24
 8005fec:	2210      	movs	r2, #16
 8005fee:	719a      	strb	r2, [r3, #6]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8005ff0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005ff4:	3a08      	subs	r2, #8
 8005ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ffa:	3b18      	subs	r3, #24
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff faf2 	bl	80055e8 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8006004:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006008:	3b18      	subs	r3, #24
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006010:	f102 020c 	add.w	r2, r2, #12
 8006014:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8006016:	2300      	movs	r3, #0
 8006018:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800601c:	f102 020b 	add.w	r2, r2, #11
 8006020:	7013      	strb	r3, [r2, #0]
 8006022:	e06c      	b.n	80060fe <hagl_put_char+0x1a2>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006024:	2300      	movs	r3, #0
 8006026:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800602a:	f102 020a 	add.w	r2, r2, #10
 800602e:	7013      	strb	r3, [r2, #0]
 8006030:	e046      	b.n	80060c0 <hagl_put_char+0x164>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8006032:	f107 0310 	add.w	r3, r7, #16
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	b25a      	sxtb	r2, r3
 800603c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006040:	f103 030a 	add.w	r3, r3, #10
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	fa41 f303 	asr.w	r3, r1, r3
 8006050:	b25b      	sxtb	r3, r3
 8006052:	4013      	ands	r3, r2
 8006054:	b25b      	sxtb	r3, r3
 8006056:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800605a:	f102 0208 	add.w	r2, r2, #8
 800605e:	7013      	strb	r3, [r2, #0]
            if (set) {
 8006060:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006064:	f103 0308 	add.w	r3, r3, #8
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d010      	beq.n	8006090 <hagl_put_char+0x134>
                *(ptr++) = color;
 800606e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006072:	f103 030c 	add.w	r3, r3, #12
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	1c93      	adds	r3, r2, #2
 800607a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800607e:	f101 010c 	add.w	r1, r1, #12
 8006082:	600b      	str	r3, [r1, #0]
 8006084:	f107 0310 	add.w	r3, r7, #16
 8006088:	3b0a      	subs	r3, #10
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	8013      	strh	r3, [r2, #0]
 800608e:	e00c      	b.n	80060aa <hagl_put_char+0x14e>
            } else {
                *(ptr++) = 0x0000;
 8006090:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006094:	f103 030c 	add.w	r3, r3, #12
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	1c9a      	adds	r2, r3, #2
 800609c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80060a0:	f101 010c 	add.w	r1, r1, #12
 80060a4:	600a      	str	r2, [r1, #0]
 80060a6:	2200      	movs	r2, #0
 80060a8:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80060aa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80060ae:	f103 030a 	add.w	r3, r3, #10
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80060ba:	f102 020a 	add.w	r2, r2, #10
 80060be:	7013      	strb	r3, [r2, #0]
 80060c0:	f107 0310 	add.w	r3, r7, #16
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80060ca:	f102 020a 	add.w	r2, r2, #10
 80060ce:	7812      	ldrb	r2, [r2, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d3ae      	bcc.n	8006032 <hagl_put_char+0xd6>
            }
        }
        glyph.buffer += glyph.pitch;
 80060d4:	f107 0310 	add.w	r3, r7, #16
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f107 0210 	add.w	r2, r7, #16
 80060de:	78d2      	ldrb	r2, [r2, #3]
 80060e0:	441a      	add	r2, r3
 80060e2:	f107 0310 	add.w	r3, r7, #16
 80060e6:	605a      	str	r2, [r3, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80060e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80060ec:	f103 030b 	add.w	r3, r3, #11
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	3301      	adds	r3, #1
 80060f4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80060f8:	f102 020b 	add.w	r2, r2, #11
 80060fc:	7013      	strb	r3, [r2, #0]
 80060fe:	f107 0310 	add.w	r3, r7, #16
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006108:	f102 020b 	add.w	r2, r2, #11
 800610c:	7812      	ldrb	r2, [r2, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d388      	bcc.n	8006024 <hagl_put_char+0xc8>
    }

    hagl_blit(x0, y0, &bitmap);
 8006112:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006116:	3a18      	subs	r2, #24
 8006118:	f107 0310 	add.w	r3, r7, #16
 800611c:	3b08      	subs	r3, #8
 800611e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006122:	f107 0310 	add.w	r3, r7, #16
 8006126:	3b06      	subs	r3, #6
 8006128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800612c:	4618      	mov	r0, r3
 800612e:	f000 f858 	bl	80061e2 <hagl_blit>

    return bitmap.width;
 8006132:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006136:	3b18      	subs	r3, #24
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b2db      	uxtb	r3, r3
}
 800613c:	4618      	mov	r0, r3
 800613e:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	bd90      	pop	{r4, r7, pc}

08006148 <hagl_put_text>:
 * continue from the next line.
 */

//uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
uint16_t hagl_put_text(const char *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8006148:	b590      	push	{r4, r7, lr}
 800614a:	b08b      	sub	sp, #44	; 0x2c
 800614c:	af02      	add	r7, sp, #8
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	4608      	mov	r0, r1
 8006152:	4611      	mov	r1, r2
 8006154:	461a      	mov	r2, r3
 8006156:	4603      	mov	r3, r0
 8006158:	817b      	strh	r3, [r7, #10]
 800615a:	460b      	mov	r3, r1
 800615c:	813b      	strh	r3, [r7, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	80fb      	strh	r3, [r7, #6]
    char temp;
    uint8_t status;
    uint16_t original = x0;
 8006162:	897b      	ldrh	r3, [r7, #10]
 8006164:	83fb      	strh	r3, [r7, #30]
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006166:	f107 0310 	add.w	r3, r7, #16
 800616a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fbb4 	bl	80058da <fontx_meta>
 8006172:	4603      	mov	r3, r0
 8006174:	777b      	strb	r3, [r7, #29]
    if (0 != status) {
 8006176:	7f7b      	ldrb	r3, [r7, #29]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <hagl_put_text+0x38>
        return 0;
 800617c:	2300      	movs	r3, #0
 800617e:	e02c      	b.n	80061da <hagl_put_text+0x92>
    }

    do {
        temp = *str++;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	60fa      	str	r2, [r7, #12]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	773b      	strb	r3, [r7, #28]
        if (13 == temp || 10 == temp) {
 800618a:	7f3b      	ldrb	r3, [r7, #28]
 800618c:	2b0d      	cmp	r3, #13
 800618e:	d002      	beq.n	8006196 <hagl_put_text+0x4e>
 8006190:	7f3b      	ldrb	r3, [r7, #28]
 8006192:	2b0a      	cmp	r3, #10
 8006194:	d108      	bne.n	80061a8 <hagl_put_text+0x60>
            x0 = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 800619a:	7ebb      	ldrb	r3, [r7, #26]
 800619c:	b29a      	uxth	r2, r3
 800619e:	893b      	ldrh	r3, [r7, #8]
 80061a0:	4413      	add	r3, r2
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	813b      	strh	r3, [r7, #8]
 80061a6:	e010      	b.n	80061ca <hagl_put_text+0x82>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80061a8:	7f38      	ldrb	r0, [r7, #28]
 80061aa:	88fc      	ldrh	r4, [r7, #6]
 80061ac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80061b0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	4623      	mov	r3, r4
 80061ba:	f7ff fecf 	bl	8005f5c <hagl_put_char>
 80061be:	4603      	mov	r3, r0
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	897b      	ldrh	r3, [r7, #10]
 80061c4:	4413      	add	r3, r2
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1d6      	bne.n	8006180 <hagl_put_text+0x38>

    return x0 - original;
 80061d2:	897a      	ldrh	r2, [r7, #10]
 80061d4:	8bfb      	ldrh	r3, [r7, #30]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	b29b      	uxth	r3, r3
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3724      	adds	r7, #36	; 0x24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd90      	pop	{r4, r7, pc}

080061e2 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b086      	sub	sp, #24
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	4603      	mov	r3, r0
 80061ea:	603a      	str	r2, [r7, #0]
 80061ec:	80fb      	strh	r3, [r7, #6]
 80061ee:	460b      	mov	r3, r1
 80061f0:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 80061f8:	2300      	movs	r3, #0
 80061fa:	827b      	strh	r3, [r7, #18]
 80061fc:	e020      	b.n	8006240 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 80061fe:	2300      	movs	r3, #0
 8006200:	823b      	strh	r3, [r7, #16]
 8006202:	e015      	b.n	8006230 <hagl_blit+0x4e>
            color = *(ptr++);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	1c9a      	adds	r2, r3, #2
 8006208:	617a      	str	r2, [r7, #20]
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800620e:	88fa      	ldrh	r2, [r7, #6]
 8006210:	8a3b      	ldrh	r3, [r7, #16]
 8006212:	4413      	add	r3, r2
 8006214:	b29b      	uxth	r3, r3
 8006216:	b218      	sxth	r0, r3
 8006218:	88ba      	ldrh	r2, [r7, #4]
 800621a:	8a7b      	ldrh	r3, [r7, #18]
 800621c:	4413      	add	r3, r2
 800621e:	b29b      	uxth	r3, r3
 8006220:	b21b      	sxth	r3, r3
 8006222:	89fa      	ldrh	r2, [r7, #14]
 8006224:	4619      	mov	r1, r3
 8006226:	f7ff fc4d 	bl	8005ac4 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800622a:	8a3b      	ldrh	r3, [r7, #16]
 800622c:	3301      	adds	r3, #1
 800622e:	823b      	strh	r3, [r7, #16]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	8a3a      	ldrh	r2, [r7, #16]
 8006236:	429a      	cmp	r2, r3
 8006238:	d3e4      	bcc.n	8006204 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800623a:	8a7b      	ldrh	r3, [r7, #18]
 800623c:	3301      	adds	r3, #1
 800623e:	827b      	strh	r3, [r7, #18]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	885b      	ldrh	r3, [r3, #2]
 8006244:	8a7a      	ldrh	r2, [r7, #18]
 8006246:	429a      	cmp	r2, r3
 8006248:	d3d9      	bcc.n	80061fe <hagl_blit+0x1c>
        }
    }
#endif
};
 800624a:	bf00      	nop
 800624c:	bf00      	nop
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <hagl_clear_screen+0x50>)
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 8006260:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <hagl_clear_screen+0x50>)
 8006262:	885b      	ldrh	r3, [r3, #2]
 8006264:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <hagl_clear_screen+0x50>)
 8006268:	889b      	ldrh	r3, [r3, #4]
 800626a:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 800626c:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <hagl_clear_screen+0x50>)
 800626e:	88db      	ldrh	r3, [r3, #6]
 8006270:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 8006272:	239f      	movs	r3, #159	; 0x9f
 8006274:	227f      	movs	r2, #127	; 0x7f
 8006276:	2100      	movs	r1, #0
 8006278:	2000      	movs	r0, #0
 800627a:	f7ff fc01 	bl	8005a80 <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 800627e:	2300      	movs	r3, #0
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	239f      	movs	r3, #159	; 0x9f
 8006284:	227f      	movs	r2, #127	; 0x7f
 8006286:	2100      	movs	r1, #0
 8006288:	2000      	movs	r0, #0
 800628a:	f7ff fdc3 	bl	8005e14 <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 800628e:	883b      	ldrh	r3, [r7, #0]
 8006290:	887a      	ldrh	r2, [r7, #2]
 8006292:	88b9      	ldrh	r1, [r7, #4]
 8006294:	88f8      	ldrh	r0, [r7, #6]
 8006296:	f7ff fbf3 	bl	8005a80 <hagl_set_clip_window>
#endif
}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000010 	.word	0x20000010

080062a8 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 80062a8:	b590      	push	{r4, r7, lr}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4604      	mov	r4, r0
 80062b0:	4608      	mov	r0, r1
 80062b2:	4611      	mov	r1, r2
 80062b4:	461a      	mov	r2, r3
 80062b6:	4623      	mov	r3, r4
 80062b8:	80fb      	strh	r3, [r7, #6]
 80062ba:	4603      	mov	r3, r0
 80062bc:	80bb      	strh	r3, [r7, #4]
 80062be:	460b      	mov	r3, r1
 80062c0:	807b      	strh	r3, [r7, #2]
 80062c2:	4613      	mov	r3, r2
 80062c4:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80062c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80062ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	dd0e      	ble.n	80062f0 <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 80062d2:	88fa      	ldrh	r2, [r7, #6]
 80062d4:	887b      	ldrh	r3, [r7, #2]
 80062d6:	4413      	add	r3, r2
 80062d8:	b29b      	uxth	r3, r3
 80062da:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 80062dc:	88fa      	ldrh	r2, [r7, #6]
 80062de:	887b      	ldrh	r3, [r7, #2]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 80062e6:	88fa      	ldrh	r2, [r7, #6]
 80062e8:	887b      	ldrh	r3, [r7, #2]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 80062f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80062f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	dd0e      	ble.n	800631a <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 80062fc:	88ba      	ldrh	r2, [r7, #4]
 80062fe:	883b      	ldrh	r3, [r7, #0]
 8006300:	4413      	add	r3, r2
 8006302:	b29b      	uxth	r3, r3
 8006304:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8006306:	88ba      	ldrh	r2, [r7, #4]
 8006308:	883b      	ldrh	r3, [r7, #0]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	b29b      	uxth	r3, r3
 800630e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006310:	88ba      	ldrh	r2, [r7, #4]
 8006312:	883b      	ldrh	r3, [r7, #0]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	b29b      	uxth	r3, r3
 8006318:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800631a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800631e:	4a52      	ldr	r2, [pc, #328]	; (8006468 <hagl_draw_rounded_rectangle+0x1c0>)
 8006320:	8812      	ldrh	r2, [r2, #0]
 8006322:	4293      	cmp	r3, r2
 8006324:	f2c0 8153 	blt.w	80065ce <hagl_draw_rounded_rectangle+0x326>
 8006328:	f9b7 3000 	ldrsh.w	r3, [r7]
 800632c:	4a4e      	ldr	r2, [pc, #312]	; (8006468 <hagl_draw_rounded_rectangle+0x1c0>)
 800632e:	8852      	ldrh	r2, [r2, #2]
 8006330:	4293      	cmp	r3, r2
 8006332:	f2c0 814c 	blt.w	80065ce <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800633a:	4a4b      	ldr	r2, [pc, #300]	; (8006468 <hagl_draw_rounded_rectangle+0x1c0>)
 800633c:	8892      	ldrh	r2, [r2, #4]
 800633e:	4293      	cmp	r3, r2
 8006340:	f300 8147 	bgt.w	80065d2 <hagl_draw_rounded_rectangle+0x32a>
 8006344:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006348:	4a47      	ldr	r2, [pc, #284]	; (8006468 <hagl_draw_rounded_rectangle+0x1c0>)
 800634a:	88d2      	ldrh	r2, [r2, #6]
 800634c:	4293      	cmp	r3, r2
 800634e:	f300 8140 	bgt.w	80065d2 <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 8006352:	887a      	ldrh	r2, [r7, #2]
 8006354:	88fb      	ldrh	r3, [r7, #6]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	b29b      	uxth	r3, r3
 800635a:	3301      	adds	r3, #1
 800635c:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 800635e:	883a      	ldrh	r2, [r7, #0]
 8006360:	88bb      	ldrh	r3, [r7, #4]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	b29b      	uxth	r3, r3
 8006366:	3301      	adds	r3, #1
 8006368:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 800636a:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800636e:	8a3b      	ldrh	r3, [r7, #16]
 8006370:	085b      	lsrs	r3, r3, #1
 8006372:	b29b      	uxth	r3, r3
 8006374:	461a      	mov	r2, r3
 8006376:	89fb      	ldrh	r3, [r7, #14]
 8006378:	085b      	lsrs	r3, r3, #1
 800637a:	b29b      	uxth	r3, r3
 800637c:	4619      	mov	r1, r3
 800637e:	4610      	mov	r0, r2
 8006380:	f7ff fb5a 	bl	8005a38 <min>
 8006384:	4603      	mov	r3, r0
 8006386:	4619      	mov	r1, r3
 8006388:	4620      	mov	r0, r4
 800638a:	f7ff fb55 	bl	8005a38 <min>
 800638e:	4603      	mov	r3, r0
 8006390:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 8006392:	88fa      	ldrh	r2, [r7, #6]
 8006394:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006396:	4413      	add	r3, r2
 8006398:	b29b      	uxth	r3, r3
 800639a:	b218      	sxth	r0, r3
 800639c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	8a3a      	ldrh	r2, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80063aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80063ae:	f7ff fbbb 	bl	8005b28 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 80063b2:	88fa      	ldrh	r2, [r7, #6]
 80063b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063b6:	4413      	add	r3, r2
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	b218      	sxth	r0, r3
 80063bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	8a3a      	ldrh	r2, [r7, #16]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80063ca:	f9b7 1000 	ldrsh.w	r1, [r7]
 80063ce:	f7ff fbab 	bl	8005b28 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 80063d2:	88ba      	ldrh	r2, [r7, #4]
 80063d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063d6:	4413      	add	r3, r2
 80063d8:	b29b      	uxth	r3, r3
 80063da:	b219      	sxth	r1, r3
 80063dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	89fa      	ldrh	r2, [r7, #14]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80063ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80063ee:	f7ff fbbe 	bl	8005b6e <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 80063f2:	88ba      	ldrh	r2, [r7, #4]
 80063f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063f6:	4413      	add	r3, r2
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	b219      	sxth	r1, r3
 80063fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	b29b      	uxth	r3, r3
 8006402:	89fa      	ldrh	r2, [r7, #14]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	b29a      	uxth	r2, r3
 8006408:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800640a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800640e:	f7ff fbae 	bl	8005b6e <hagl_draw_vline>

    x = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	82fb      	strh	r3, [r7, #22]
    y = r;
 8006416:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006418:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 800641a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	b29b      	uxth	r3, r3
 8006420:	f1c3 0303 	rsb	r3, r3, #3
 8006424:	b29b      	uxth	r3, r3
 8006426:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 8006428:	e0c9      	b.n	80065be <hagl_draw_rounded_rectangle+0x316>
        x++;
 800642a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800642e:	b29b      	uxth	r3, r3
 8006430:	3301      	adds	r3, #1
 8006432:	b29b      	uxth	r3, r3
 8006434:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 8006436:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800643a:	2b00      	cmp	r3, #0
 800643c:	dd16      	ble.n	800646c <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 800643e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29b      	uxth	r3, r3
 8006448:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 800644a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800644e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	b29b      	uxth	r3, r3
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	b29a      	uxth	r2, r3
 800645a:	8a7b      	ldrh	r3, [r7, #18]
 800645c:	4413      	add	r3, r2
 800645e:	b29b      	uxth	r3, r3
 8006460:	330a      	adds	r3, #10
 8006462:	b29b      	uxth	r3, r3
 8006464:	827b      	strh	r3, [r7, #18]
 8006466:	e00a      	b.n	800647e <hagl_draw_rounded_rectangle+0x1d6>
 8006468:	20000010 	.word	0x20000010
        } else {
            d = d + 4 * x + 6;
 800646c:	8afb      	ldrh	r3, [r7, #22]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	b29a      	uxth	r2, r3
 8006472:	8a7b      	ldrh	r3, [r7, #18]
 8006474:	4413      	add	r3, r2
 8006476:	b29b      	uxth	r3, r3
 8006478:	3306      	adds	r3, #6
 800647a:	b29b      	uxth	r3, r3
 800647c:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 800647e:	887a      	ldrh	r2, [r7, #2]
 8006480:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	b29a      	uxth	r2, r3
 8006486:	8afb      	ldrh	r3, [r7, #22]
 8006488:	4413      	add	r3, r2
 800648a:	b29b      	uxth	r3, r3
 800648c:	b218      	sxth	r0, r3
 800648e:	88ba      	ldrh	r2, [r7, #4]
 8006490:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006492:	4413      	add	r3, r2
 8006494:	b29a      	uxth	r2, r3
 8006496:	8abb      	ldrh	r3, [r7, #20]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	b29b      	uxth	r3, r3
 800649c:	b21b      	sxth	r3, r3
 800649e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80064a0:	4619      	mov	r1, r3
 80064a2:	f7ff fb0f 	bl	8005ac4 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 80064a6:	887a      	ldrh	r2, [r7, #2]
 80064a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	8abb      	ldrh	r3, [r7, #20]
 80064b0:	4413      	add	r3, r2
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	b218      	sxth	r0, r3
 80064b6:	88ba      	ldrh	r2, [r7, #4]
 80064b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064ba:	4413      	add	r3, r2
 80064bc:	b29a      	uxth	r2, r3
 80064be:	8afb      	ldrh	r3, [r7, #22]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	b21b      	sxth	r3, r3
 80064c6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80064c8:	4619      	mov	r1, r3
 80064ca:	f7ff fafb 	bl	8005ac4 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 80064ce:	88fa      	ldrh	r2, [r7, #6]
 80064d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064d2:	4413      	add	r3, r2
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	8afb      	ldrh	r3, [r7, #22]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	b29b      	uxth	r3, r3
 80064dc:	b218      	sxth	r0, r3
 80064de:	88ba      	ldrh	r2, [r7, #4]
 80064e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064e2:	4413      	add	r3, r2
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	8abb      	ldrh	r3, [r7, #20]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	b21b      	sxth	r3, r3
 80064ee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80064f0:	4619      	mov	r1, r3
 80064f2:	f7ff fae7 	bl	8005ac4 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 80064f6:	88fa      	ldrh	r2, [r7, #6]
 80064f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064fa:	4413      	add	r3, r2
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	8abb      	ldrh	r3, [r7, #20]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	b29b      	uxth	r3, r3
 8006504:	b218      	sxth	r0, r3
 8006506:	88ba      	ldrh	r2, [r7, #4]
 8006508:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800650a:	4413      	add	r3, r2
 800650c:	b29a      	uxth	r2, r3
 800650e:	8afb      	ldrh	r3, [r7, #22]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	b29b      	uxth	r3, r3
 8006514:	b21b      	sxth	r3, r3
 8006516:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006518:	4619      	mov	r1, r3
 800651a:	f7ff fad3 	bl	8005ac4 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 800651e:	887a      	ldrh	r2, [r7, #2]
 8006520:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	b29a      	uxth	r2, r3
 8006526:	8afb      	ldrh	r3, [r7, #22]
 8006528:	4413      	add	r3, r2
 800652a:	b29b      	uxth	r3, r3
 800652c:	b218      	sxth	r0, r3
 800652e:	883a      	ldrh	r2, [r7, #0]
 8006530:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	b29a      	uxth	r2, r3
 8006536:	8abb      	ldrh	r3, [r7, #20]
 8006538:	4413      	add	r3, r2
 800653a:	b29b      	uxth	r3, r3
 800653c:	b21b      	sxth	r3, r3
 800653e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006540:	4619      	mov	r1, r3
 8006542:	f7ff fabf 	bl	8005ac4 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 8006546:	887a      	ldrh	r2, [r7, #2]
 8006548:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	b29a      	uxth	r2, r3
 800654e:	8abb      	ldrh	r3, [r7, #20]
 8006550:	4413      	add	r3, r2
 8006552:	b29b      	uxth	r3, r3
 8006554:	b218      	sxth	r0, r3
 8006556:	883a      	ldrh	r2, [r7, #0]
 8006558:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	b29a      	uxth	r2, r3
 800655e:	8afb      	ldrh	r3, [r7, #22]
 8006560:	4413      	add	r3, r2
 8006562:	b29b      	uxth	r3, r3
 8006564:	b21b      	sxth	r3, r3
 8006566:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006568:	4619      	mov	r1, r3
 800656a:	f7ff faab 	bl	8005ac4 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006572:	4413      	add	r3, r2
 8006574:	b29a      	uxth	r2, r3
 8006576:	8afb      	ldrh	r3, [r7, #22]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	b29b      	uxth	r3, r3
 800657c:	b218      	sxth	r0, r3
 800657e:	883a      	ldrh	r2, [r7, #0]
 8006580:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	b29a      	uxth	r2, r3
 8006586:	8abb      	ldrh	r3, [r7, #20]
 8006588:	4413      	add	r3, r2
 800658a:	b29b      	uxth	r3, r3
 800658c:	b21b      	sxth	r3, r3
 800658e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006590:	4619      	mov	r1, r3
 8006592:	f7ff fa97 	bl	8005ac4 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 8006596:	88fa      	ldrh	r2, [r7, #6]
 8006598:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800659a:	4413      	add	r3, r2
 800659c:	b29a      	uxth	r2, r3
 800659e:	8abb      	ldrh	r3, [r7, #20]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	b218      	sxth	r0, r3
 80065a6:	883a      	ldrh	r2, [r7, #0]
 80065a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	8afb      	ldrh	r3, [r7, #22]
 80065b0:	4413      	add	r3, r2
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	b21b      	sxth	r3, r3
 80065b6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80065b8:	4619      	mov	r1, r3
 80065ba:	f7ff fa83 	bl	8005ac4 <hagl_put_pixel>
    while (y >= x) {
 80065be:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80065c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	f6bf af2f 	bge.w	800642a <hagl_draw_rounded_rectangle+0x182>
 80065cc:	e002      	b.n	80065d4 <hagl_draw_rounded_rectangle+0x32c>
        return;
 80065ce:	bf00      	nop
 80065d0:	e000      	b.n	80065d4 <hagl_draw_rounded_rectangle+0x32c>
        return;
 80065d2:	bf00      	nop
    }
};
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd90      	pop	{r4, r7, pc}
 80065da:	bf00      	nop

080065dc <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	4603      	mov	r3, r0
 80065e4:	71fb      	strb	r3, [r7, #7]
 80065e6:	460b      	mov	r3, r1
 80065e8:	71bb      	strb	r3, [r7, #6]
 80065ea:	4613      	mov	r3, r2
 80065ec:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	b21b      	sxth	r3, r3
 80065f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065f8:	f023 0307 	bic.w	r3, r3, #7
 80065fc:	b21a      	sxth	r2, r3
 80065fe:	79bb      	ldrb	r3, [r7, #6]
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	b21b      	sxth	r3, r3
 8006604:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8006608:	b21b      	sxth	r3, r3
 800660a:	4313      	orrs	r3, r2
 800660c:	b21a      	sxth	r2, r3
 800660e:	797b      	ldrb	r3, [r7, #5]
 8006610:	08db      	lsrs	r3, r3, #3
 8006612:	b2db      	uxtb	r3, r3
 8006614:	b21b      	sxth	r3, r3
 8006616:	4313      	orrs	r3, r2
 8006618:	b21b      	sxth	r3, r3
 800661a:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 800661c:	89fb      	ldrh	r3, [r7, #14]
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	b21a      	sxth	r2, r3
 8006622:	89fb      	ldrh	r3, [r7, #14]
 8006624:	0a1b      	lsrs	r3, r3, #8
 8006626:	b29b      	uxth	r3, r3
 8006628:	b21b      	sxth	r3, r3
 800662a:	4313      	orrs	r3, r2
 800662c:	b21b      	sxth	r3, r3
 800662e:	81fb      	strh	r3, [r7, #14]

    return rgb;
 8006630:	89fb      	ldrh	r3, [r7, #14]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <__assert_func>:
 8006640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006642:	4614      	mov	r4, r2
 8006644:	461a      	mov	r2, r3
 8006646:	4b09      	ldr	r3, [pc, #36]	; (800666c <__assert_func+0x2c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4605      	mov	r5, r0
 800664c:	68d8      	ldr	r0, [r3, #12]
 800664e:	b14c      	cbz	r4, 8006664 <__assert_func+0x24>
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <__assert_func+0x30>)
 8006652:	9100      	str	r1, [sp, #0]
 8006654:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006658:	4906      	ldr	r1, [pc, #24]	; (8006674 <__assert_func+0x34>)
 800665a:	462b      	mov	r3, r5
 800665c:	f000 f9be 	bl	80069dc <fiprintf>
 8006660:	f000 fff8 	bl	8007654 <abort>
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <__assert_func+0x38>)
 8006666:	461c      	mov	r4, r3
 8006668:	e7f3      	b.n	8006652 <__assert_func+0x12>
 800666a:	bf00      	nop
 800666c:	20000018 	.word	0x20000018
 8006670:	08011228 	.word	0x08011228
 8006674:	08011235 	.word	0x08011235
 8006678:	08011263 	.word	0x08011263

0800667c <__errno>:
 800667c:	4b01      	ldr	r3, [pc, #4]	; (8006684 <__errno+0x8>)
 800667e:	6818      	ldr	r0, [r3, #0]
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20000018 	.word	0x20000018

08006688 <__sflush_r>:
 8006688:	898a      	ldrh	r2, [r1, #12]
 800668a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668e:	4605      	mov	r5, r0
 8006690:	0710      	lsls	r0, r2, #28
 8006692:	460c      	mov	r4, r1
 8006694:	d458      	bmi.n	8006748 <__sflush_r+0xc0>
 8006696:	684b      	ldr	r3, [r1, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc05      	bgt.n	80066a8 <__sflush_r+0x20>
 800669c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	dc02      	bgt.n	80066a8 <__sflush_r+0x20>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	d0f9      	beq.n	80066a2 <__sflush_r+0x1a>
 80066ae:	2300      	movs	r3, #0
 80066b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066b4:	682f      	ldr	r7, [r5, #0]
 80066b6:	602b      	str	r3, [r5, #0]
 80066b8:	d032      	beq.n	8006720 <__sflush_r+0x98>
 80066ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	075a      	lsls	r2, r3, #29
 80066c0:	d505      	bpl.n	80066ce <__sflush_r+0x46>
 80066c2:	6863      	ldr	r3, [r4, #4]
 80066c4:	1ac0      	subs	r0, r0, r3
 80066c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066c8:	b10b      	cbz	r3, 80066ce <__sflush_r+0x46>
 80066ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066cc:	1ac0      	subs	r0, r0, r3
 80066ce:	2300      	movs	r3, #0
 80066d0:	4602      	mov	r2, r0
 80066d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066d4:	6a21      	ldr	r1, [r4, #32]
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b0      	blx	r6
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	d106      	bne.n	80066ee <__sflush_r+0x66>
 80066e0:	6829      	ldr	r1, [r5, #0]
 80066e2:	291d      	cmp	r1, #29
 80066e4:	d82c      	bhi.n	8006740 <__sflush_r+0xb8>
 80066e6:	4a2a      	ldr	r2, [pc, #168]	; (8006790 <__sflush_r+0x108>)
 80066e8:	40ca      	lsrs	r2, r1
 80066ea:	07d6      	lsls	r6, r2, #31
 80066ec:	d528      	bpl.n	8006740 <__sflush_r+0xb8>
 80066ee:	2200      	movs	r2, #0
 80066f0:	6062      	str	r2, [r4, #4]
 80066f2:	04d9      	lsls	r1, r3, #19
 80066f4:	6922      	ldr	r2, [r4, #16]
 80066f6:	6022      	str	r2, [r4, #0]
 80066f8:	d504      	bpl.n	8006704 <__sflush_r+0x7c>
 80066fa:	1c42      	adds	r2, r0, #1
 80066fc:	d101      	bne.n	8006702 <__sflush_r+0x7a>
 80066fe:	682b      	ldr	r3, [r5, #0]
 8006700:	b903      	cbnz	r3, 8006704 <__sflush_r+0x7c>
 8006702:	6560      	str	r0, [r4, #84]	; 0x54
 8006704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006706:	602f      	str	r7, [r5, #0]
 8006708:	2900      	cmp	r1, #0
 800670a:	d0ca      	beq.n	80066a2 <__sflush_r+0x1a>
 800670c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006710:	4299      	cmp	r1, r3
 8006712:	d002      	beq.n	800671a <__sflush_r+0x92>
 8006714:	4628      	mov	r0, r5
 8006716:	f000 fa35 	bl	8006b84 <_free_r>
 800671a:	2000      	movs	r0, #0
 800671c:	6360      	str	r0, [r4, #52]	; 0x34
 800671e:	e7c1      	b.n	80066a4 <__sflush_r+0x1c>
 8006720:	6a21      	ldr	r1, [r4, #32]
 8006722:	2301      	movs	r3, #1
 8006724:	4628      	mov	r0, r5
 8006726:	47b0      	blx	r6
 8006728:	1c41      	adds	r1, r0, #1
 800672a:	d1c7      	bne.n	80066bc <__sflush_r+0x34>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0c4      	beq.n	80066bc <__sflush_r+0x34>
 8006732:	2b1d      	cmp	r3, #29
 8006734:	d001      	beq.n	800673a <__sflush_r+0xb2>
 8006736:	2b16      	cmp	r3, #22
 8006738:	d101      	bne.n	800673e <__sflush_r+0xb6>
 800673a:	602f      	str	r7, [r5, #0]
 800673c:	e7b1      	b.n	80066a2 <__sflush_r+0x1a>
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	e7ad      	b.n	80066a4 <__sflush_r+0x1c>
 8006748:	690f      	ldr	r7, [r1, #16]
 800674a:	2f00      	cmp	r7, #0
 800674c:	d0a9      	beq.n	80066a2 <__sflush_r+0x1a>
 800674e:	0793      	lsls	r3, r2, #30
 8006750:	680e      	ldr	r6, [r1, #0]
 8006752:	bf08      	it	eq
 8006754:	694b      	ldreq	r3, [r1, #20]
 8006756:	600f      	str	r7, [r1, #0]
 8006758:	bf18      	it	ne
 800675a:	2300      	movne	r3, #0
 800675c:	eba6 0807 	sub.w	r8, r6, r7
 8006760:	608b      	str	r3, [r1, #8]
 8006762:	f1b8 0f00 	cmp.w	r8, #0
 8006766:	dd9c      	ble.n	80066a2 <__sflush_r+0x1a>
 8006768:	6a21      	ldr	r1, [r4, #32]
 800676a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800676c:	4643      	mov	r3, r8
 800676e:	463a      	mov	r2, r7
 8006770:	4628      	mov	r0, r5
 8006772:	47b0      	blx	r6
 8006774:	2800      	cmp	r0, #0
 8006776:	dc06      	bgt.n	8006786 <__sflush_r+0xfe>
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	e78e      	b.n	80066a4 <__sflush_r+0x1c>
 8006786:	4407      	add	r7, r0
 8006788:	eba8 0800 	sub.w	r8, r8, r0
 800678c:	e7e9      	b.n	8006762 <__sflush_r+0xda>
 800678e:	bf00      	nop
 8006790:	20400001 	.word	0x20400001

08006794 <_fflush_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	690b      	ldr	r3, [r1, #16]
 8006798:	4605      	mov	r5, r0
 800679a:	460c      	mov	r4, r1
 800679c:	b913      	cbnz	r3, 80067a4 <_fflush_r+0x10>
 800679e:	2500      	movs	r5, #0
 80067a0:	4628      	mov	r0, r5
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	b118      	cbz	r0, 80067ae <_fflush_r+0x1a>
 80067a6:	6983      	ldr	r3, [r0, #24]
 80067a8:	b90b      	cbnz	r3, 80067ae <_fflush_r+0x1a>
 80067aa:	f000 f899 	bl	80068e0 <__sinit>
 80067ae:	4b14      	ldr	r3, [pc, #80]	; (8006800 <_fflush_r+0x6c>)
 80067b0:	429c      	cmp	r4, r3
 80067b2:	d11b      	bne.n	80067ec <_fflush_r+0x58>
 80067b4:	686c      	ldr	r4, [r5, #4]
 80067b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0ef      	beq.n	800679e <_fflush_r+0xa>
 80067be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067c0:	07d0      	lsls	r0, r2, #31
 80067c2:	d404      	bmi.n	80067ce <_fflush_r+0x3a>
 80067c4:	0599      	lsls	r1, r3, #22
 80067c6:	d402      	bmi.n	80067ce <_fflush_r+0x3a>
 80067c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ca:	f000 f95e 	bl	8006a8a <__retarget_lock_acquire_recursive>
 80067ce:	4628      	mov	r0, r5
 80067d0:	4621      	mov	r1, r4
 80067d2:	f7ff ff59 	bl	8006688 <__sflush_r>
 80067d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067d8:	07da      	lsls	r2, r3, #31
 80067da:	4605      	mov	r5, r0
 80067dc:	d4e0      	bmi.n	80067a0 <_fflush_r+0xc>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	059b      	lsls	r3, r3, #22
 80067e2:	d4dd      	bmi.n	80067a0 <_fflush_r+0xc>
 80067e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067e6:	f000 f951 	bl	8006a8c <__retarget_lock_release_recursive>
 80067ea:	e7d9      	b.n	80067a0 <_fflush_r+0xc>
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <_fflush_r+0x70>)
 80067ee:	429c      	cmp	r4, r3
 80067f0:	d101      	bne.n	80067f6 <_fflush_r+0x62>
 80067f2:	68ac      	ldr	r4, [r5, #8]
 80067f4:	e7df      	b.n	80067b6 <_fflush_r+0x22>
 80067f6:	4b04      	ldr	r3, [pc, #16]	; (8006808 <_fflush_r+0x74>)
 80067f8:	429c      	cmp	r4, r3
 80067fa:	bf08      	it	eq
 80067fc:	68ec      	ldreq	r4, [r5, #12]
 80067fe:	e7da      	b.n	80067b6 <_fflush_r+0x22>
 8006800:	08011284 	.word	0x08011284
 8006804:	080112a4 	.word	0x080112a4
 8006808:	08011264 	.word	0x08011264

0800680c <fflush>:
 800680c:	4601      	mov	r1, r0
 800680e:	b920      	cbnz	r0, 800681a <fflush+0xe>
 8006810:	4b04      	ldr	r3, [pc, #16]	; (8006824 <fflush+0x18>)
 8006812:	4905      	ldr	r1, [pc, #20]	; (8006828 <fflush+0x1c>)
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	f000 b8f3 	b.w	8006a00 <_fwalk_reent>
 800681a:	4b04      	ldr	r3, [pc, #16]	; (800682c <fflush+0x20>)
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	f7ff bfb9 	b.w	8006794 <_fflush_r>
 8006822:	bf00      	nop
 8006824:	080112c4 	.word	0x080112c4
 8006828:	08006795 	.word	0x08006795
 800682c:	20000018 	.word	0x20000018

08006830 <std>:
 8006830:	2300      	movs	r3, #0
 8006832:	b510      	push	{r4, lr}
 8006834:	4604      	mov	r4, r0
 8006836:	e9c0 3300 	strd	r3, r3, [r0]
 800683a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800683e:	6083      	str	r3, [r0, #8]
 8006840:	8181      	strh	r1, [r0, #12]
 8006842:	6643      	str	r3, [r0, #100]	; 0x64
 8006844:	81c2      	strh	r2, [r0, #14]
 8006846:	6183      	str	r3, [r0, #24]
 8006848:	4619      	mov	r1, r3
 800684a:	2208      	movs	r2, #8
 800684c:	305c      	adds	r0, #92	; 0x5c
 800684e:	f000 f991 	bl	8006b74 <memset>
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <std+0x38>)
 8006854:	6263      	str	r3, [r4, #36]	; 0x24
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <std+0x3c>)
 8006858:	62a3      	str	r3, [r4, #40]	; 0x28
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <std+0x40>)
 800685c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800685e:	4b05      	ldr	r3, [pc, #20]	; (8006874 <std+0x44>)
 8006860:	6224      	str	r4, [r4, #32]
 8006862:	6323      	str	r3, [r4, #48]	; 0x30
 8006864:	bd10      	pop	{r4, pc}
 8006866:	bf00      	nop
 8006868:	08007429 	.word	0x08007429
 800686c:	0800744b 	.word	0x0800744b
 8006870:	08007483 	.word	0x08007483
 8006874:	080074a7 	.word	0x080074a7

08006878 <_cleanup_r>:
 8006878:	4901      	ldr	r1, [pc, #4]	; (8006880 <_cleanup_r+0x8>)
 800687a:	f000 b8c1 	b.w	8006a00 <_fwalk_reent>
 800687e:	bf00      	nop
 8006880:	08006795 	.word	0x08006795

08006884 <__sfmoreglue>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	1e4a      	subs	r2, r1, #1
 8006888:	2568      	movs	r5, #104	; 0x68
 800688a:	4355      	muls	r5, r2
 800688c:	460e      	mov	r6, r1
 800688e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006892:	f000 f9c7 	bl	8006c24 <_malloc_r>
 8006896:	4604      	mov	r4, r0
 8006898:	b140      	cbz	r0, 80068ac <__sfmoreglue+0x28>
 800689a:	2100      	movs	r1, #0
 800689c:	e9c0 1600 	strd	r1, r6, [r0]
 80068a0:	300c      	adds	r0, #12
 80068a2:	60a0      	str	r0, [r4, #8]
 80068a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068a8:	f000 f964 	bl	8006b74 <memset>
 80068ac:	4620      	mov	r0, r4
 80068ae:	bd70      	pop	{r4, r5, r6, pc}

080068b0 <__sfp_lock_acquire>:
 80068b0:	4801      	ldr	r0, [pc, #4]	; (80068b8 <__sfp_lock_acquire+0x8>)
 80068b2:	f000 b8ea 	b.w	8006a8a <__retarget_lock_acquire_recursive>
 80068b6:	bf00      	nop
 80068b8:	2000a3bc 	.word	0x2000a3bc

080068bc <__sfp_lock_release>:
 80068bc:	4801      	ldr	r0, [pc, #4]	; (80068c4 <__sfp_lock_release+0x8>)
 80068be:	f000 b8e5 	b.w	8006a8c <__retarget_lock_release_recursive>
 80068c2:	bf00      	nop
 80068c4:	2000a3bc 	.word	0x2000a3bc

080068c8 <__sinit_lock_acquire>:
 80068c8:	4801      	ldr	r0, [pc, #4]	; (80068d0 <__sinit_lock_acquire+0x8>)
 80068ca:	f000 b8de 	b.w	8006a8a <__retarget_lock_acquire_recursive>
 80068ce:	bf00      	nop
 80068d0:	2000a3b7 	.word	0x2000a3b7

080068d4 <__sinit_lock_release>:
 80068d4:	4801      	ldr	r0, [pc, #4]	; (80068dc <__sinit_lock_release+0x8>)
 80068d6:	f000 b8d9 	b.w	8006a8c <__retarget_lock_release_recursive>
 80068da:	bf00      	nop
 80068dc:	2000a3b7 	.word	0x2000a3b7

080068e0 <__sinit>:
 80068e0:	b510      	push	{r4, lr}
 80068e2:	4604      	mov	r4, r0
 80068e4:	f7ff fff0 	bl	80068c8 <__sinit_lock_acquire>
 80068e8:	69a3      	ldr	r3, [r4, #24]
 80068ea:	b11b      	cbz	r3, 80068f4 <__sinit+0x14>
 80068ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f0:	f7ff bff0 	b.w	80068d4 <__sinit_lock_release>
 80068f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068f8:	6523      	str	r3, [r4, #80]	; 0x50
 80068fa:	4b13      	ldr	r3, [pc, #76]	; (8006948 <__sinit+0x68>)
 80068fc:	4a13      	ldr	r2, [pc, #76]	; (800694c <__sinit+0x6c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	62a2      	str	r2, [r4, #40]	; 0x28
 8006902:	42a3      	cmp	r3, r4
 8006904:	bf04      	itt	eq
 8006906:	2301      	moveq	r3, #1
 8006908:	61a3      	streq	r3, [r4, #24]
 800690a:	4620      	mov	r0, r4
 800690c:	f000 f820 	bl	8006950 <__sfp>
 8006910:	6060      	str	r0, [r4, #4]
 8006912:	4620      	mov	r0, r4
 8006914:	f000 f81c 	bl	8006950 <__sfp>
 8006918:	60a0      	str	r0, [r4, #8]
 800691a:	4620      	mov	r0, r4
 800691c:	f000 f818 	bl	8006950 <__sfp>
 8006920:	2200      	movs	r2, #0
 8006922:	60e0      	str	r0, [r4, #12]
 8006924:	2104      	movs	r1, #4
 8006926:	6860      	ldr	r0, [r4, #4]
 8006928:	f7ff ff82 	bl	8006830 <std>
 800692c:	68a0      	ldr	r0, [r4, #8]
 800692e:	2201      	movs	r2, #1
 8006930:	2109      	movs	r1, #9
 8006932:	f7ff ff7d 	bl	8006830 <std>
 8006936:	68e0      	ldr	r0, [r4, #12]
 8006938:	2202      	movs	r2, #2
 800693a:	2112      	movs	r1, #18
 800693c:	f7ff ff78 	bl	8006830 <std>
 8006940:	2301      	movs	r3, #1
 8006942:	61a3      	str	r3, [r4, #24]
 8006944:	e7d2      	b.n	80068ec <__sinit+0xc>
 8006946:	bf00      	nop
 8006948:	080112c4 	.word	0x080112c4
 800694c:	08006879 	.word	0x08006879

08006950 <__sfp>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	4607      	mov	r7, r0
 8006954:	f7ff ffac 	bl	80068b0 <__sfp_lock_acquire>
 8006958:	4b1e      	ldr	r3, [pc, #120]	; (80069d4 <__sfp+0x84>)
 800695a:	681e      	ldr	r6, [r3, #0]
 800695c:	69b3      	ldr	r3, [r6, #24]
 800695e:	b913      	cbnz	r3, 8006966 <__sfp+0x16>
 8006960:	4630      	mov	r0, r6
 8006962:	f7ff ffbd 	bl	80068e0 <__sinit>
 8006966:	3648      	adds	r6, #72	; 0x48
 8006968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800696c:	3b01      	subs	r3, #1
 800696e:	d503      	bpl.n	8006978 <__sfp+0x28>
 8006970:	6833      	ldr	r3, [r6, #0]
 8006972:	b30b      	cbz	r3, 80069b8 <__sfp+0x68>
 8006974:	6836      	ldr	r6, [r6, #0]
 8006976:	e7f7      	b.n	8006968 <__sfp+0x18>
 8006978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800697c:	b9d5      	cbnz	r5, 80069b4 <__sfp+0x64>
 800697e:	4b16      	ldr	r3, [pc, #88]	; (80069d8 <__sfp+0x88>)
 8006980:	60e3      	str	r3, [r4, #12]
 8006982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006986:	6665      	str	r5, [r4, #100]	; 0x64
 8006988:	f000 f87e 	bl	8006a88 <__retarget_lock_init_recursive>
 800698c:	f7ff ff96 	bl	80068bc <__sfp_lock_release>
 8006990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006998:	6025      	str	r5, [r4, #0]
 800699a:	61a5      	str	r5, [r4, #24]
 800699c:	2208      	movs	r2, #8
 800699e:	4629      	mov	r1, r5
 80069a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069a4:	f000 f8e6 	bl	8006b74 <memset>
 80069a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069b0:	4620      	mov	r0, r4
 80069b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b4:	3468      	adds	r4, #104	; 0x68
 80069b6:	e7d9      	b.n	800696c <__sfp+0x1c>
 80069b8:	2104      	movs	r1, #4
 80069ba:	4638      	mov	r0, r7
 80069bc:	f7ff ff62 	bl	8006884 <__sfmoreglue>
 80069c0:	4604      	mov	r4, r0
 80069c2:	6030      	str	r0, [r6, #0]
 80069c4:	2800      	cmp	r0, #0
 80069c6:	d1d5      	bne.n	8006974 <__sfp+0x24>
 80069c8:	f7ff ff78 	bl	80068bc <__sfp_lock_release>
 80069cc:	230c      	movs	r3, #12
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	e7ee      	b.n	80069b0 <__sfp+0x60>
 80069d2:	bf00      	nop
 80069d4:	080112c4 	.word	0x080112c4
 80069d8:	ffff0001 	.word	0xffff0001

080069dc <fiprintf>:
 80069dc:	b40e      	push	{r1, r2, r3}
 80069de:	b503      	push	{r0, r1, lr}
 80069e0:	4601      	mov	r1, r0
 80069e2:	ab03      	add	r3, sp, #12
 80069e4:	4805      	ldr	r0, [pc, #20]	; (80069fc <fiprintf+0x20>)
 80069e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ea:	6800      	ldr	r0, [r0, #0]
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	f000 f99d 	bl	8006d2c <_vfiprintf_r>
 80069f2:	b002      	add	sp, #8
 80069f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f8:	b003      	add	sp, #12
 80069fa:	4770      	bx	lr
 80069fc:	20000018 	.word	0x20000018

08006a00 <_fwalk_reent>:
 8006a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a04:	4606      	mov	r6, r0
 8006a06:	4688      	mov	r8, r1
 8006a08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a0c:	2700      	movs	r7, #0
 8006a0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a12:	f1b9 0901 	subs.w	r9, r9, #1
 8006a16:	d505      	bpl.n	8006a24 <_fwalk_reent+0x24>
 8006a18:	6824      	ldr	r4, [r4, #0]
 8006a1a:	2c00      	cmp	r4, #0
 8006a1c:	d1f7      	bne.n	8006a0e <_fwalk_reent+0xe>
 8006a1e:	4638      	mov	r0, r7
 8006a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a24:	89ab      	ldrh	r3, [r5, #12]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d907      	bls.n	8006a3a <_fwalk_reent+0x3a>
 8006a2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	d003      	beq.n	8006a3a <_fwalk_reent+0x3a>
 8006a32:	4629      	mov	r1, r5
 8006a34:	4630      	mov	r0, r6
 8006a36:	47c0      	blx	r8
 8006a38:	4307      	orrs	r7, r0
 8006a3a:	3568      	adds	r5, #104	; 0x68
 8006a3c:	e7e9      	b.n	8006a12 <_fwalk_reent+0x12>
	...

08006a40 <__libc_init_array>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	4d0d      	ldr	r5, [pc, #52]	; (8006a78 <__libc_init_array+0x38>)
 8006a44:	4c0d      	ldr	r4, [pc, #52]	; (8006a7c <__libc_init_array+0x3c>)
 8006a46:	1b64      	subs	r4, r4, r5
 8006a48:	10a4      	asrs	r4, r4, #2
 8006a4a:	2600      	movs	r6, #0
 8006a4c:	42a6      	cmp	r6, r4
 8006a4e:	d109      	bne.n	8006a64 <__libc_init_array+0x24>
 8006a50:	4d0b      	ldr	r5, [pc, #44]	; (8006a80 <__libc_init_array+0x40>)
 8006a52:	4c0c      	ldr	r4, [pc, #48]	; (8006a84 <__libc_init_array+0x44>)
 8006a54:	f001 f850 	bl	8007af8 <_init>
 8006a58:	1b64      	subs	r4, r4, r5
 8006a5a:	10a4      	asrs	r4, r4, #2
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	42a6      	cmp	r6, r4
 8006a60:	d105      	bne.n	8006a6e <__libc_init_array+0x2e>
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
 8006a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a68:	4798      	blx	r3
 8006a6a:	3601      	adds	r6, #1
 8006a6c:	e7ee      	b.n	8006a4c <__libc_init_array+0xc>
 8006a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a72:	4798      	blx	r3
 8006a74:	3601      	adds	r6, #1
 8006a76:	e7f2      	b.n	8006a5e <__libc_init_array+0x1e>
 8006a78:	08011304 	.word	0x08011304
 8006a7c:	08011304 	.word	0x08011304
 8006a80:	08011304 	.word	0x08011304
 8006a84:	08011308 	.word	0x08011308

08006a88 <__retarget_lock_init_recursive>:
 8006a88:	4770      	bx	lr

08006a8a <__retarget_lock_acquire_recursive>:
 8006a8a:	4770      	bx	lr

08006a8c <__retarget_lock_release_recursive>:
 8006a8c:	4770      	bx	lr

08006a8e <__swhatbuf_r>:
 8006a8e:	b570      	push	{r4, r5, r6, lr}
 8006a90:	460e      	mov	r6, r1
 8006a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a96:	2900      	cmp	r1, #0
 8006a98:	b096      	sub	sp, #88	; 0x58
 8006a9a:	4614      	mov	r4, r2
 8006a9c:	461d      	mov	r5, r3
 8006a9e:	da07      	bge.n	8006ab0 <__swhatbuf_r+0x22>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	602b      	str	r3, [r5, #0]
 8006aa4:	89b3      	ldrh	r3, [r6, #12]
 8006aa6:	061a      	lsls	r2, r3, #24
 8006aa8:	d410      	bmi.n	8006acc <__swhatbuf_r+0x3e>
 8006aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aae:	e00e      	b.n	8006ace <__swhatbuf_r+0x40>
 8006ab0:	466a      	mov	r2, sp
 8006ab2:	f000 fde7 	bl	8007684 <_fstat_r>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	dbf2      	blt.n	8006aa0 <__swhatbuf_r+0x12>
 8006aba:	9a01      	ldr	r2, [sp, #4]
 8006abc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ac0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ac4:	425a      	negs	r2, r3
 8006ac6:	415a      	adcs	r2, r3
 8006ac8:	602a      	str	r2, [r5, #0]
 8006aca:	e7ee      	b.n	8006aaa <__swhatbuf_r+0x1c>
 8006acc:	2340      	movs	r3, #64	; 0x40
 8006ace:	2000      	movs	r0, #0
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	b016      	add	sp, #88	; 0x58
 8006ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ad8 <__smakebuf_r>:
 8006ad8:	898b      	ldrh	r3, [r1, #12]
 8006ada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006adc:	079d      	lsls	r5, r3, #30
 8006ade:	4606      	mov	r6, r0
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	d507      	bpl.n	8006af4 <__smakebuf_r+0x1c>
 8006ae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	6123      	str	r3, [r4, #16]
 8006aec:	2301      	movs	r3, #1
 8006aee:	6163      	str	r3, [r4, #20]
 8006af0:	b002      	add	sp, #8
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	ab01      	add	r3, sp, #4
 8006af6:	466a      	mov	r2, sp
 8006af8:	f7ff ffc9 	bl	8006a8e <__swhatbuf_r>
 8006afc:	9900      	ldr	r1, [sp, #0]
 8006afe:	4605      	mov	r5, r0
 8006b00:	4630      	mov	r0, r6
 8006b02:	f000 f88f 	bl	8006c24 <_malloc_r>
 8006b06:	b948      	cbnz	r0, 8006b1c <__smakebuf_r+0x44>
 8006b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b0c:	059a      	lsls	r2, r3, #22
 8006b0e:	d4ef      	bmi.n	8006af0 <__smakebuf_r+0x18>
 8006b10:	f023 0303 	bic.w	r3, r3, #3
 8006b14:	f043 0302 	orr.w	r3, r3, #2
 8006b18:	81a3      	strh	r3, [r4, #12]
 8006b1a:	e7e3      	b.n	8006ae4 <__smakebuf_r+0xc>
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <__smakebuf_r+0x7c>)
 8006b1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	6020      	str	r0, [r4, #0]
 8006b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b28:	81a3      	strh	r3, [r4, #12]
 8006b2a:	9b00      	ldr	r3, [sp, #0]
 8006b2c:	6163      	str	r3, [r4, #20]
 8006b2e:	9b01      	ldr	r3, [sp, #4]
 8006b30:	6120      	str	r0, [r4, #16]
 8006b32:	b15b      	cbz	r3, 8006b4c <__smakebuf_r+0x74>
 8006b34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f000 fdb5 	bl	80076a8 <_isatty_r>
 8006b3e:	b128      	cbz	r0, 8006b4c <__smakebuf_r+0x74>
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	f023 0303 	bic.w	r3, r3, #3
 8006b46:	f043 0301 	orr.w	r3, r3, #1
 8006b4a:	81a3      	strh	r3, [r4, #12]
 8006b4c:	89a0      	ldrh	r0, [r4, #12]
 8006b4e:	4305      	orrs	r5, r0
 8006b50:	81a5      	strh	r5, [r4, #12]
 8006b52:	e7cd      	b.n	8006af0 <__smakebuf_r+0x18>
 8006b54:	08006879 	.word	0x08006879

08006b58 <memcpy>:
 8006b58:	440a      	add	r2, r1
 8006b5a:	4291      	cmp	r1, r2
 8006b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b60:	d100      	bne.n	8006b64 <memcpy+0xc>
 8006b62:	4770      	bx	lr
 8006b64:	b510      	push	{r4, lr}
 8006b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b6e:	4291      	cmp	r1, r2
 8006b70:	d1f9      	bne.n	8006b66 <memcpy+0xe>
 8006b72:	bd10      	pop	{r4, pc}

08006b74 <memset>:
 8006b74:	4402      	add	r2, r0
 8006b76:	4603      	mov	r3, r0
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d100      	bne.n	8006b7e <memset+0xa>
 8006b7c:	4770      	bx	lr
 8006b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b82:	e7f9      	b.n	8006b78 <memset+0x4>

08006b84 <_free_r>:
 8006b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b86:	2900      	cmp	r1, #0
 8006b88:	d048      	beq.n	8006c1c <_free_r+0x98>
 8006b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b8e:	9001      	str	r0, [sp, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f1a1 0404 	sub.w	r4, r1, #4
 8006b96:	bfb8      	it	lt
 8006b98:	18e4      	addlt	r4, r4, r3
 8006b9a:	f000 fdc1 	bl	8007720 <__malloc_lock>
 8006b9e:	4a20      	ldr	r2, [pc, #128]	; (8006c20 <_free_r+0x9c>)
 8006ba0:	9801      	ldr	r0, [sp, #4]
 8006ba2:	6813      	ldr	r3, [r2, #0]
 8006ba4:	4615      	mov	r5, r2
 8006ba6:	b933      	cbnz	r3, 8006bb6 <_free_r+0x32>
 8006ba8:	6063      	str	r3, [r4, #4]
 8006baa:	6014      	str	r4, [r2, #0]
 8006bac:	b003      	add	sp, #12
 8006bae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bb2:	f000 bdbb 	b.w	800772c <__malloc_unlock>
 8006bb6:	42a3      	cmp	r3, r4
 8006bb8:	d90b      	bls.n	8006bd2 <_free_r+0x4e>
 8006bba:	6821      	ldr	r1, [r4, #0]
 8006bbc:	1862      	adds	r2, r4, r1
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	bf04      	itt	eq
 8006bc2:	681a      	ldreq	r2, [r3, #0]
 8006bc4:	685b      	ldreq	r3, [r3, #4]
 8006bc6:	6063      	str	r3, [r4, #4]
 8006bc8:	bf04      	itt	eq
 8006bca:	1852      	addeq	r2, r2, r1
 8006bcc:	6022      	streq	r2, [r4, #0]
 8006bce:	602c      	str	r4, [r5, #0]
 8006bd0:	e7ec      	b.n	8006bac <_free_r+0x28>
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	b10b      	cbz	r3, 8006bdc <_free_r+0x58>
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d9fa      	bls.n	8006bd2 <_free_r+0x4e>
 8006bdc:	6811      	ldr	r1, [r2, #0]
 8006bde:	1855      	adds	r5, r2, r1
 8006be0:	42a5      	cmp	r5, r4
 8006be2:	d10b      	bne.n	8006bfc <_free_r+0x78>
 8006be4:	6824      	ldr	r4, [r4, #0]
 8006be6:	4421      	add	r1, r4
 8006be8:	1854      	adds	r4, r2, r1
 8006bea:	42a3      	cmp	r3, r4
 8006bec:	6011      	str	r1, [r2, #0]
 8006bee:	d1dd      	bne.n	8006bac <_free_r+0x28>
 8006bf0:	681c      	ldr	r4, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	6053      	str	r3, [r2, #4]
 8006bf6:	4421      	add	r1, r4
 8006bf8:	6011      	str	r1, [r2, #0]
 8006bfa:	e7d7      	b.n	8006bac <_free_r+0x28>
 8006bfc:	d902      	bls.n	8006c04 <_free_r+0x80>
 8006bfe:	230c      	movs	r3, #12
 8006c00:	6003      	str	r3, [r0, #0]
 8006c02:	e7d3      	b.n	8006bac <_free_r+0x28>
 8006c04:	6825      	ldr	r5, [r4, #0]
 8006c06:	1961      	adds	r1, r4, r5
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	bf04      	itt	eq
 8006c0c:	6819      	ldreq	r1, [r3, #0]
 8006c0e:	685b      	ldreq	r3, [r3, #4]
 8006c10:	6063      	str	r3, [r4, #4]
 8006c12:	bf04      	itt	eq
 8006c14:	1949      	addeq	r1, r1, r5
 8006c16:	6021      	streq	r1, [r4, #0]
 8006c18:	6054      	str	r4, [r2, #4]
 8006c1a:	e7c7      	b.n	8006bac <_free_r+0x28>
 8006c1c:	b003      	add	sp, #12
 8006c1e:	bd30      	pop	{r4, r5, pc}
 8006c20:	2000a0b0 	.word	0x2000a0b0

08006c24 <_malloc_r>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	1ccd      	adds	r5, r1, #3
 8006c28:	f025 0503 	bic.w	r5, r5, #3
 8006c2c:	3508      	adds	r5, #8
 8006c2e:	2d0c      	cmp	r5, #12
 8006c30:	bf38      	it	cc
 8006c32:	250c      	movcc	r5, #12
 8006c34:	2d00      	cmp	r5, #0
 8006c36:	4606      	mov	r6, r0
 8006c38:	db01      	blt.n	8006c3e <_malloc_r+0x1a>
 8006c3a:	42a9      	cmp	r1, r5
 8006c3c:	d903      	bls.n	8006c46 <_malloc_r+0x22>
 8006c3e:	230c      	movs	r3, #12
 8006c40:	6033      	str	r3, [r6, #0]
 8006c42:	2000      	movs	r0, #0
 8006c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c46:	f000 fd6b 	bl	8007720 <__malloc_lock>
 8006c4a:	4921      	ldr	r1, [pc, #132]	; (8006cd0 <_malloc_r+0xac>)
 8006c4c:	680a      	ldr	r2, [r1, #0]
 8006c4e:	4614      	mov	r4, r2
 8006c50:	b99c      	cbnz	r4, 8006c7a <_malloc_r+0x56>
 8006c52:	4f20      	ldr	r7, [pc, #128]	; (8006cd4 <_malloc_r+0xb0>)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	b923      	cbnz	r3, 8006c62 <_malloc_r+0x3e>
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f000 fba0 	bl	80073a0 <_sbrk_r>
 8006c60:	6038      	str	r0, [r7, #0]
 8006c62:	4629      	mov	r1, r5
 8006c64:	4630      	mov	r0, r6
 8006c66:	f000 fb9b 	bl	80073a0 <_sbrk_r>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	d123      	bne.n	8006cb6 <_malloc_r+0x92>
 8006c6e:	230c      	movs	r3, #12
 8006c70:	6033      	str	r3, [r6, #0]
 8006c72:	4630      	mov	r0, r6
 8006c74:	f000 fd5a 	bl	800772c <__malloc_unlock>
 8006c78:	e7e3      	b.n	8006c42 <_malloc_r+0x1e>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	1b5b      	subs	r3, r3, r5
 8006c7e:	d417      	bmi.n	8006cb0 <_malloc_r+0x8c>
 8006c80:	2b0b      	cmp	r3, #11
 8006c82:	d903      	bls.n	8006c8c <_malloc_r+0x68>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	441c      	add	r4, r3
 8006c88:	6025      	str	r5, [r4, #0]
 8006c8a:	e004      	b.n	8006c96 <_malloc_r+0x72>
 8006c8c:	6863      	ldr	r3, [r4, #4]
 8006c8e:	42a2      	cmp	r2, r4
 8006c90:	bf0c      	ite	eq
 8006c92:	600b      	streq	r3, [r1, #0]
 8006c94:	6053      	strne	r3, [r2, #4]
 8006c96:	4630      	mov	r0, r6
 8006c98:	f000 fd48 	bl	800772c <__malloc_unlock>
 8006c9c:	f104 000b 	add.w	r0, r4, #11
 8006ca0:	1d23      	adds	r3, r4, #4
 8006ca2:	f020 0007 	bic.w	r0, r0, #7
 8006ca6:	1ac2      	subs	r2, r0, r3
 8006ca8:	d0cc      	beq.n	8006c44 <_malloc_r+0x20>
 8006caa:	1a1b      	subs	r3, r3, r0
 8006cac:	50a3      	str	r3, [r4, r2]
 8006cae:	e7c9      	b.n	8006c44 <_malloc_r+0x20>
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	6864      	ldr	r4, [r4, #4]
 8006cb4:	e7cc      	b.n	8006c50 <_malloc_r+0x2c>
 8006cb6:	1cc4      	adds	r4, r0, #3
 8006cb8:	f024 0403 	bic.w	r4, r4, #3
 8006cbc:	42a0      	cmp	r0, r4
 8006cbe:	d0e3      	beq.n	8006c88 <_malloc_r+0x64>
 8006cc0:	1a21      	subs	r1, r4, r0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f000 fb6c 	bl	80073a0 <_sbrk_r>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d1dd      	bne.n	8006c88 <_malloc_r+0x64>
 8006ccc:	e7cf      	b.n	8006c6e <_malloc_r+0x4a>
 8006cce:	bf00      	nop
 8006cd0:	2000a0b0 	.word	0x2000a0b0
 8006cd4:	2000a0b4 	.word	0x2000a0b4

08006cd8 <__sfputc_r>:
 8006cd8:	6893      	ldr	r3, [r2, #8]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	b410      	push	{r4}
 8006ce0:	6093      	str	r3, [r2, #8]
 8006ce2:	da08      	bge.n	8006cf6 <__sfputc_r+0x1e>
 8006ce4:	6994      	ldr	r4, [r2, #24]
 8006ce6:	42a3      	cmp	r3, r4
 8006ce8:	db01      	blt.n	8006cee <__sfputc_r+0x16>
 8006cea:	290a      	cmp	r1, #10
 8006cec:	d103      	bne.n	8006cf6 <__sfputc_r+0x1e>
 8006cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cf2:	f000 bbdd 	b.w	80074b0 <__swbuf_r>
 8006cf6:	6813      	ldr	r3, [r2, #0]
 8006cf8:	1c58      	adds	r0, r3, #1
 8006cfa:	6010      	str	r0, [r2, #0]
 8006cfc:	7019      	strb	r1, [r3, #0]
 8006cfe:	4608      	mov	r0, r1
 8006d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <__sfputs_r>:
 8006d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d08:	4606      	mov	r6, r0
 8006d0a:	460f      	mov	r7, r1
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	18d5      	adds	r5, r2, r3
 8006d10:	42ac      	cmp	r4, r5
 8006d12:	d101      	bne.n	8006d18 <__sfputs_r+0x12>
 8006d14:	2000      	movs	r0, #0
 8006d16:	e007      	b.n	8006d28 <__sfputs_r+0x22>
 8006d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d1c:	463a      	mov	r2, r7
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f7ff ffda 	bl	8006cd8 <__sfputc_r>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d1f3      	bne.n	8006d10 <__sfputs_r+0xa>
 8006d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d2c <_vfiprintf_r>:
 8006d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	460d      	mov	r5, r1
 8006d32:	b09d      	sub	sp, #116	; 0x74
 8006d34:	4614      	mov	r4, r2
 8006d36:	4698      	mov	r8, r3
 8006d38:	4606      	mov	r6, r0
 8006d3a:	b118      	cbz	r0, 8006d44 <_vfiprintf_r+0x18>
 8006d3c:	6983      	ldr	r3, [r0, #24]
 8006d3e:	b90b      	cbnz	r3, 8006d44 <_vfiprintf_r+0x18>
 8006d40:	f7ff fdce 	bl	80068e0 <__sinit>
 8006d44:	4b89      	ldr	r3, [pc, #548]	; (8006f6c <_vfiprintf_r+0x240>)
 8006d46:	429d      	cmp	r5, r3
 8006d48:	d11b      	bne.n	8006d82 <_vfiprintf_r+0x56>
 8006d4a:	6875      	ldr	r5, [r6, #4]
 8006d4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d4e:	07d9      	lsls	r1, r3, #31
 8006d50:	d405      	bmi.n	8006d5e <_vfiprintf_r+0x32>
 8006d52:	89ab      	ldrh	r3, [r5, #12]
 8006d54:	059a      	lsls	r2, r3, #22
 8006d56:	d402      	bmi.n	8006d5e <_vfiprintf_r+0x32>
 8006d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d5a:	f7ff fe96 	bl	8006a8a <__retarget_lock_acquire_recursive>
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	071b      	lsls	r3, r3, #28
 8006d62:	d501      	bpl.n	8006d68 <_vfiprintf_r+0x3c>
 8006d64:	692b      	ldr	r3, [r5, #16]
 8006d66:	b9eb      	cbnz	r3, 8006da4 <_vfiprintf_r+0x78>
 8006d68:	4629      	mov	r1, r5
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f000 fc04 	bl	8007578 <__swsetup_r>
 8006d70:	b1c0      	cbz	r0, 8006da4 <_vfiprintf_r+0x78>
 8006d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d74:	07dc      	lsls	r4, r3, #31
 8006d76:	d50e      	bpl.n	8006d96 <_vfiprintf_r+0x6a>
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	b01d      	add	sp, #116	; 0x74
 8006d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d82:	4b7b      	ldr	r3, [pc, #492]	; (8006f70 <_vfiprintf_r+0x244>)
 8006d84:	429d      	cmp	r5, r3
 8006d86:	d101      	bne.n	8006d8c <_vfiprintf_r+0x60>
 8006d88:	68b5      	ldr	r5, [r6, #8]
 8006d8a:	e7df      	b.n	8006d4c <_vfiprintf_r+0x20>
 8006d8c:	4b79      	ldr	r3, [pc, #484]	; (8006f74 <_vfiprintf_r+0x248>)
 8006d8e:	429d      	cmp	r5, r3
 8006d90:	bf08      	it	eq
 8006d92:	68f5      	ldreq	r5, [r6, #12]
 8006d94:	e7da      	b.n	8006d4c <_vfiprintf_r+0x20>
 8006d96:	89ab      	ldrh	r3, [r5, #12]
 8006d98:	0598      	lsls	r0, r3, #22
 8006d9a:	d4ed      	bmi.n	8006d78 <_vfiprintf_r+0x4c>
 8006d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d9e:	f7ff fe75 	bl	8006a8c <__retarget_lock_release_recursive>
 8006da2:	e7e9      	b.n	8006d78 <_vfiprintf_r+0x4c>
 8006da4:	2300      	movs	r3, #0
 8006da6:	9309      	str	r3, [sp, #36]	; 0x24
 8006da8:	2320      	movs	r3, #32
 8006daa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8006db2:	2330      	movs	r3, #48	; 0x30
 8006db4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f78 <_vfiprintf_r+0x24c>
 8006db8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dbc:	f04f 0901 	mov.w	r9, #1
 8006dc0:	4623      	mov	r3, r4
 8006dc2:	469a      	mov	sl, r3
 8006dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc8:	b10a      	cbz	r2, 8006dce <_vfiprintf_r+0xa2>
 8006dca:	2a25      	cmp	r2, #37	; 0x25
 8006dcc:	d1f9      	bne.n	8006dc2 <_vfiprintf_r+0x96>
 8006dce:	ebba 0b04 	subs.w	fp, sl, r4
 8006dd2:	d00b      	beq.n	8006dec <_vfiprintf_r+0xc0>
 8006dd4:	465b      	mov	r3, fp
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	4629      	mov	r1, r5
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7ff ff93 	bl	8006d06 <__sfputs_r>
 8006de0:	3001      	adds	r0, #1
 8006de2:	f000 80aa 	beq.w	8006f3a <_vfiprintf_r+0x20e>
 8006de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006de8:	445a      	add	r2, fp
 8006dea:	9209      	str	r2, [sp, #36]	; 0x24
 8006dec:	f89a 3000 	ldrb.w	r3, [sl]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 80a2 	beq.w	8006f3a <_vfiprintf_r+0x20e>
 8006df6:	2300      	movs	r3, #0
 8006df8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e00:	f10a 0a01 	add.w	sl, sl, #1
 8006e04:	9304      	str	r3, [sp, #16]
 8006e06:	9307      	str	r3, [sp, #28]
 8006e08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e0c:	931a      	str	r3, [sp, #104]	; 0x68
 8006e0e:	4654      	mov	r4, sl
 8006e10:	2205      	movs	r2, #5
 8006e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e16:	4858      	ldr	r0, [pc, #352]	; (8006f78 <_vfiprintf_r+0x24c>)
 8006e18:	f7f9 f9e2 	bl	80001e0 <memchr>
 8006e1c:	9a04      	ldr	r2, [sp, #16]
 8006e1e:	b9d8      	cbnz	r0, 8006e58 <_vfiprintf_r+0x12c>
 8006e20:	06d1      	lsls	r1, r2, #27
 8006e22:	bf44      	itt	mi
 8006e24:	2320      	movmi	r3, #32
 8006e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e2a:	0713      	lsls	r3, r2, #28
 8006e2c:	bf44      	itt	mi
 8006e2e:	232b      	movmi	r3, #43	; 0x2b
 8006e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e34:	f89a 3000 	ldrb.w	r3, [sl]
 8006e38:	2b2a      	cmp	r3, #42	; 0x2a
 8006e3a:	d015      	beq.n	8006e68 <_vfiprintf_r+0x13c>
 8006e3c:	9a07      	ldr	r2, [sp, #28]
 8006e3e:	4654      	mov	r4, sl
 8006e40:	2000      	movs	r0, #0
 8006e42:	f04f 0c0a 	mov.w	ip, #10
 8006e46:	4621      	mov	r1, r4
 8006e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e4c:	3b30      	subs	r3, #48	; 0x30
 8006e4e:	2b09      	cmp	r3, #9
 8006e50:	d94e      	bls.n	8006ef0 <_vfiprintf_r+0x1c4>
 8006e52:	b1b0      	cbz	r0, 8006e82 <_vfiprintf_r+0x156>
 8006e54:	9207      	str	r2, [sp, #28]
 8006e56:	e014      	b.n	8006e82 <_vfiprintf_r+0x156>
 8006e58:	eba0 0308 	sub.w	r3, r0, r8
 8006e5c:	fa09 f303 	lsl.w	r3, r9, r3
 8006e60:	4313      	orrs	r3, r2
 8006e62:	9304      	str	r3, [sp, #16]
 8006e64:	46a2      	mov	sl, r4
 8006e66:	e7d2      	b.n	8006e0e <_vfiprintf_r+0xe2>
 8006e68:	9b03      	ldr	r3, [sp, #12]
 8006e6a:	1d19      	adds	r1, r3, #4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	9103      	str	r1, [sp, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	bfbb      	ittet	lt
 8006e74:	425b      	neglt	r3, r3
 8006e76:	f042 0202 	orrlt.w	r2, r2, #2
 8006e7a:	9307      	strge	r3, [sp, #28]
 8006e7c:	9307      	strlt	r3, [sp, #28]
 8006e7e:	bfb8      	it	lt
 8006e80:	9204      	strlt	r2, [sp, #16]
 8006e82:	7823      	ldrb	r3, [r4, #0]
 8006e84:	2b2e      	cmp	r3, #46	; 0x2e
 8006e86:	d10c      	bne.n	8006ea2 <_vfiprintf_r+0x176>
 8006e88:	7863      	ldrb	r3, [r4, #1]
 8006e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e8c:	d135      	bne.n	8006efa <_vfiprintf_r+0x1ce>
 8006e8e:	9b03      	ldr	r3, [sp, #12]
 8006e90:	1d1a      	adds	r2, r3, #4
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	9203      	str	r2, [sp, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bfb8      	it	lt
 8006e9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e9e:	3402      	adds	r4, #2
 8006ea0:	9305      	str	r3, [sp, #20]
 8006ea2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f88 <_vfiprintf_r+0x25c>
 8006ea6:	7821      	ldrb	r1, [r4, #0]
 8006ea8:	2203      	movs	r2, #3
 8006eaa:	4650      	mov	r0, sl
 8006eac:	f7f9 f998 	bl	80001e0 <memchr>
 8006eb0:	b140      	cbz	r0, 8006ec4 <_vfiprintf_r+0x198>
 8006eb2:	2340      	movs	r3, #64	; 0x40
 8006eb4:	eba0 000a 	sub.w	r0, r0, sl
 8006eb8:	fa03 f000 	lsl.w	r0, r3, r0
 8006ebc:	9b04      	ldr	r3, [sp, #16]
 8006ebe:	4303      	orrs	r3, r0
 8006ec0:	3401      	adds	r4, #1
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec8:	482c      	ldr	r0, [pc, #176]	; (8006f7c <_vfiprintf_r+0x250>)
 8006eca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ece:	2206      	movs	r2, #6
 8006ed0:	f7f9 f986 	bl	80001e0 <memchr>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d03f      	beq.n	8006f58 <_vfiprintf_r+0x22c>
 8006ed8:	4b29      	ldr	r3, [pc, #164]	; (8006f80 <_vfiprintf_r+0x254>)
 8006eda:	bb1b      	cbnz	r3, 8006f24 <_vfiprintf_r+0x1f8>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	3307      	adds	r3, #7
 8006ee0:	f023 0307 	bic.w	r3, r3, #7
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	9303      	str	r3, [sp, #12]
 8006ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eea:	443b      	add	r3, r7
 8006eec:	9309      	str	r3, [sp, #36]	; 0x24
 8006eee:	e767      	b.n	8006dc0 <_vfiprintf_r+0x94>
 8006ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	2001      	movs	r0, #1
 8006ef8:	e7a5      	b.n	8006e46 <_vfiprintf_r+0x11a>
 8006efa:	2300      	movs	r3, #0
 8006efc:	3401      	adds	r4, #1
 8006efe:	9305      	str	r3, [sp, #20]
 8006f00:	4619      	mov	r1, r3
 8006f02:	f04f 0c0a 	mov.w	ip, #10
 8006f06:	4620      	mov	r0, r4
 8006f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f0c:	3a30      	subs	r2, #48	; 0x30
 8006f0e:	2a09      	cmp	r2, #9
 8006f10:	d903      	bls.n	8006f1a <_vfiprintf_r+0x1ee>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0c5      	beq.n	8006ea2 <_vfiprintf_r+0x176>
 8006f16:	9105      	str	r1, [sp, #20]
 8006f18:	e7c3      	b.n	8006ea2 <_vfiprintf_r+0x176>
 8006f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f1e:	4604      	mov	r4, r0
 8006f20:	2301      	movs	r3, #1
 8006f22:	e7f0      	b.n	8006f06 <_vfiprintf_r+0x1da>
 8006f24:	ab03      	add	r3, sp, #12
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	462a      	mov	r2, r5
 8006f2a:	4b16      	ldr	r3, [pc, #88]	; (8006f84 <_vfiprintf_r+0x258>)
 8006f2c:	a904      	add	r1, sp, #16
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f3af 8000 	nop.w
 8006f34:	4607      	mov	r7, r0
 8006f36:	1c78      	adds	r0, r7, #1
 8006f38:	d1d6      	bne.n	8006ee8 <_vfiprintf_r+0x1bc>
 8006f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f3c:	07d9      	lsls	r1, r3, #31
 8006f3e:	d405      	bmi.n	8006f4c <_vfiprintf_r+0x220>
 8006f40:	89ab      	ldrh	r3, [r5, #12]
 8006f42:	059a      	lsls	r2, r3, #22
 8006f44:	d402      	bmi.n	8006f4c <_vfiprintf_r+0x220>
 8006f46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f48:	f7ff fda0 	bl	8006a8c <__retarget_lock_release_recursive>
 8006f4c:	89ab      	ldrh	r3, [r5, #12]
 8006f4e:	065b      	lsls	r3, r3, #25
 8006f50:	f53f af12 	bmi.w	8006d78 <_vfiprintf_r+0x4c>
 8006f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f56:	e711      	b.n	8006d7c <_vfiprintf_r+0x50>
 8006f58:	ab03      	add	r3, sp, #12
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	462a      	mov	r2, r5
 8006f5e:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <_vfiprintf_r+0x258>)
 8006f60:	a904      	add	r1, sp, #16
 8006f62:	4630      	mov	r0, r6
 8006f64:	f000 f880 	bl	8007068 <_printf_i>
 8006f68:	e7e4      	b.n	8006f34 <_vfiprintf_r+0x208>
 8006f6a:	bf00      	nop
 8006f6c:	08011284 	.word	0x08011284
 8006f70:	080112a4 	.word	0x080112a4
 8006f74:	08011264 	.word	0x08011264
 8006f78:	080112c8 	.word	0x080112c8
 8006f7c:	080112d2 	.word	0x080112d2
 8006f80:	00000000 	.word	0x00000000
 8006f84:	08006d07 	.word	0x08006d07
 8006f88:	080112ce 	.word	0x080112ce

08006f8c <_printf_common>:
 8006f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f90:	4616      	mov	r6, r2
 8006f92:	4699      	mov	r9, r3
 8006f94:	688a      	ldr	r2, [r1, #8]
 8006f96:	690b      	ldr	r3, [r1, #16]
 8006f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	bfb8      	it	lt
 8006fa0:	4613      	movlt	r3, r2
 8006fa2:	6033      	str	r3, [r6, #0]
 8006fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fa8:	4607      	mov	r7, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	b10a      	cbz	r2, 8006fb2 <_printf_common+0x26>
 8006fae:	3301      	adds	r3, #1
 8006fb0:	6033      	str	r3, [r6, #0]
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	0699      	lsls	r1, r3, #26
 8006fb6:	bf42      	ittt	mi
 8006fb8:	6833      	ldrmi	r3, [r6, #0]
 8006fba:	3302      	addmi	r3, #2
 8006fbc:	6033      	strmi	r3, [r6, #0]
 8006fbe:	6825      	ldr	r5, [r4, #0]
 8006fc0:	f015 0506 	ands.w	r5, r5, #6
 8006fc4:	d106      	bne.n	8006fd4 <_printf_common+0x48>
 8006fc6:	f104 0a19 	add.w	sl, r4, #25
 8006fca:	68e3      	ldr	r3, [r4, #12]
 8006fcc:	6832      	ldr	r2, [r6, #0]
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	42ab      	cmp	r3, r5
 8006fd2:	dc26      	bgt.n	8007022 <_printf_common+0x96>
 8006fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fd8:	1e13      	subs	r3, r2, #0
 8006fda:	6822      	ldr	r2, [r4, #0]
 8006fdc:	bf18      	it	ne
 8006fde:	2301      	movne	r3, #1
 8006fe0:	0692      	lsls	r2, r2, #26
 8006fe2:	d42b      	bmi.n	800703c <_printf_common+0xb0>
 8006fe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fe8:	4649      	mov	r1, r9
 8006fea:	4638      	mov	r0, r7
 8006fec:	47c0      	blx	r8
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d01e      	beq.n	8007030 <_printf_common+0xa4>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	68e5      	ldr	r5, [r4, #12]
 8006ff6:	6832      	ldr	r2, [r6, #0]
 8006ff8:	f003 0306 	and.w	r3, r3, #6
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	bf08      	it	eq
 8007000:	1aad      	subeq	r5, r5, r2
 8007002:	68a3      	ldr	r3, [r4, #8]
 8007004:	6922      	ldr	r2, [r4, #16]
 8007006:	bf0c      	ite	eq
 8007008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800700c:	2500      	movne	r5, #0
 800700e:	4293      	cmp	r3, r2
 8007010:	bfc4      	itt	gt
 8007012:	1a9b      	subgt	r3, r3, r2
 8007014:	18ed      	addgt	r5, r5, r3
 8007016:	2600      	movs	r6, #0
 8007018:	341a      	adds	r4, #26
 800701a:	42b5      	cmp	r5, r6
 800701c:	d11a      	bne.n	8007054 <_printf_common+0xc8>
 800701e:	2000      	movs	r0, #0
 8007020:	e008      	b.n	8007034 <_printf_common+0xa8>
 8007022:	2301      	movs	r3, #1
 8007024:	4652      	mov	r2, sl
 8007026:	4649      	mov	r1, r9
 8007028:	4638      	mov	r0, r7
 800702a:	47c0      	blx	r8
 800702c:	3001      	adds	r0, #1
 800702e:	d103      	bne.n	8007038 <_printf_common+0xac>
 8007030:	f04f 30ff 	mov.w	r0, #4294967295
 8007034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007038:	3501      	adds	r5, #1
 800703a:	e7c6      	b.n	8006fca <_printf_common+0x3e>
 800703c:	18e1      	adds	r1, r4, r3
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	2030      	movs	r0, #48	; 0x30
 8007042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007046:	4422      	add	r2, r4
 8007048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800704c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007050:	3302      	adds	r3, #2
 8007052:	e7c7      	b.n	8006fe4 <_printf_common+0x58>
 8007054:	2301      	movs	r3, #1
 8007056:	4622      	mov	r2, r4
 8007058:	4649      	mov	r1, r9
 800705a:	4638      	mov	r0, r7
 800705c:	47c0      	blx	r8
 800705e:	3001      	adds	r0, #1
 8007060:	d0e6      	beq.n	8007030 <_printf_common+0xa4>
 8007062:	3601      	adds	r6, #1
 8007064:	e7d9      	b.n	800701a <_printf_common+0x8e>
	...

08007068 <_printf_i>:
 8007068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	460c      	mov	r4, r1
 800706e:	4691      	mov	r9, r2
 8007070:	7e27      	ldrb	r7, [r4, #24]
 8007072:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007074:	2f78      	cmp	r7, #120	; 0x78
 8007076:	4680      	mov	r8, r0
 8007078:	469a      	mov	sl, r3
 800707a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800707e:	d807      	bhi.n	8007090 <_printf_i+0x28>
 8007080:	2f62      	cmp	r7, #98	; 0x62
 8007082:	d80a      	bhi.n	800709a <_printf_i+0x32>
 8007084:	2f00      	cmp	r7, #0
 8007086:	f000 80d8 	beq.w	800723a <_printf_i+0x1d2>
 800708a:	2f58      	cmp	r7, #88	; 0x58
 800708c:	f000 80a3 	beq.w	80071d6 <_printf_i+0x16e>
 8007090:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007098:	e03a      	b.n	8007110 <_printf_i+0xa8>
 800709a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800709e:	2b15      	cmp	r3, #21
 80070a0:	d8f6      	bhi.n	8007090 <_printf_i+0x28>
 80070a2:	a001      	add	r0, pc, #4	; (adr r0, 80070a8 <_printf_i+0x40>)
 80070a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80070a8:	08007101 	.word	0x08007101
 80070ac:	08007115 	.word	0x08007115
 80070b0:	08007091 	.word	0x08007091
 80070b4:	08007091 	.word	0x08007091
 80070b8:	08007091 	.word	0x08007091
 80070bc:	08007091 	.word	0x08007091
 80070c0:	08007115 	.word	0x08007115
 80070c4:	08007091 	.word	0x08007091
 80070c8:	08007091 	.word	0x08007091
 80070cc:	08007091 	.word	0x08007091
 80070d0:	08007091 	.word	0x08007091
 80070d4:	08007221 	.word	0x08007221
 80070d8:	08007145 	.word	0x08007145
 80070dc:	08007203 	.word	0x08007203
 80070e0:	08007091 	.word	0x08007091
 80070e4:	08007091 	.word	0x08007091
 80070e8:	08007243 	.word	0x08007243
 80070ec:	08007091 	.word	0x08007091
 80070f0:	08007145 	.word	0x08007145
 80070f4:	08007091 	.word	0x08007091
 80070f8:	08007091 	.word	0x08007091
 80070fc:	0800720b 	.word	0x0800720b
 8007100:	680b      	ldr	r3, [r1, #0]
 8007102:	1d1a      	adds	r2, r3, #4
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	600a      	str	r2, [r1, #0]
 8007108:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800710c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007110:	2301      	movs	r3, #1
 8007112:	e0a3      	b.n	800725c <_printf_i+0x1f4>
 8007114:	6825      	ldr	r5, [r4, #0]
 8007116:	6808      	ldr	r0, [r1, #0]
 8007118:	062e      	lsls	r6, r5, #24
 800711a:	f100 0304 	add.w	r3, r0, #4
 800711e:	d50a      	bpl.n	8007136 <_printf_i+0xce>
 8007120:	6805      	ldr	r5, [r0, #0]
 8007122:	600b      	str	r3, [r1, #0]
 8007124:	2d00      	cmp	r5, #0
 8007126:	da03      	bge.n	8007130 <_printf_i+0xc8>
 8007128:	232d      	movs	r3, #45	; 0x2d
 800712a:	426d      	negs	r5, r5
 800712c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007130:	485e      	ldr	r0, [pc, #376]	; (80072ac <_printf_i+0x244>)
 8007132:	230a      	movs	r3, #10
 8007134:	e019      	b.n	800716a <_printf_i+0x102>
 8007136:	f015 0f40 	tst.w	r5, #64	; 0x40
 800713a:	6805      	ldr	r5, [r0, #0]
 800713c:	600b      	str	r3, [r1, #0]
 800713e:	bf18      	it	ne
 8007140:	b22d      	sxthne	r5, r5
 8007142:	e7ef      	b.n	8007124 <_printf_i+0xbc>
 8007144:	680b      	ldr	r3, [r1, #0]
 8007146:	6825      	ldr	r5, [r4, #0]
 8007148:	1d18      	adds	r0, r3, #4
 800714a:	6008      	str	r0, [r1, #0]
 800714c:	0628      	lsls	r0, r5, #24
 800714e:	d501      	bpl.n	8007154 <_printf_i+0xec>
 8007150:	681d      	ldr	r5, [r3, #0]
 8007152:	e002      	b.n	800715a <_printf_i+0xf2>
 8007154:	0669      	lsls	r1, r5, #25
 8007156:	d5fb      	bpl.n	8007150 <_printf_i+0xe8>
 8007158:	881d      	ldrh	r5, [r3, #0]
 800715a:	4854      	ldr	r0, [pc, #336]	; (80072ac <_printf_i+0x244>)
 800715c:	2f6f      	cmp	r7, #111	; 0x6f
 800715e:	bf0c      	ite	eq
 8007160:	2308      	moveq	r3, #8
 8007162:	230a      	movne	r3, #10
 8007164:	2100      	movs	r1, #0
 8007166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800716a:	6866      	ldr	r6, [r4, #4]
 800716c:	60a6      	str	r6, [r4, #8]
 800716e:	2e00      	cmp	r6, #0
 8007170:	bfa2      	ittt	ge
 8007172:	6821      	ldrge	r1, [r4, #0]
 8007174:	f021 0104 	bicge.w	r1, r1, #4
 8007178:	6021      	strge	r1, [r4, #0]
 800717a:	b90d      	cbnz	r5, 8007180 <_printf_i+0x118>
 800717c:	2e00      	cmp	r6, #0
 800717e:	d04d      	beq.n	800721c <_printf_i+0x1b4>
 8007180:	4616      	mov	r6, r2
 8007182:	fbb5 f1f3 	udiv	r1, r5, r3
 8007186:	fb03 5711 	mls	r7, r3, r1, r5
 800718a:	5dc7      	ldrb	r7, [r0, r7]
 800718c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007190:	462f      	mov	r7, r5
 8007192:	42bb      	cmp	r3, r7
 8007194:	460d      	mov	r5, r1
 8007196:	d9f4      	bls.n	8007182 <_printf_i+0x11a>
 8007198:	2b08      	cmp	r3, #8
 800719a:	d10b      	bne.n	80071b4 <_printf_i+0x14c>
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	07df      	lsls	r7, r3, #31
 80071a0:	d508      	bpl.n	80071b4 <_printf_i+0x14c>
 80071a2:	6923      	ldr	r3, [r4, #16]
 80071a4:	6861      	ldr	r1, [r4, #4]
 80071a6:	4299      	cmp	r1, r3
 80071a8:	bfde      	ittt	le
 80071aa:	2330      	movle	r3, #48	; 0x30
 80071ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071b4:	1b92      	subs	r2, r2, r6
 80071b6:	6122      	str	r2, [r4, #16]
 80071b8:	f8cd a000 	str.w	sl, [sp]
 80071bc:	464b      	mov	r3, r9
 80071be:	aa03      	add	r2, sp, #12
 80071c0:	4621      	mov	r1, r4
 80071c2:	4640      	mov	r0, r8
 80071c4:	f7ff fee2 	bl	8006f8c <_printf_common>
 80071c8:	3001      	adds	r0, #1
 80071ca:	d14c      	bne.n	8007266 <_printf_i+0x1fe>
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295
 80071d0:	b004      	add	sp, #16
 80071d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d6:	4835      	ldr	r0, [pc, #212]	; (80072ac <_printf_i+0x244>)
 80071d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	680e      	ldr	r6, [r1, #0]
 80071e0:	061f      	lsls	r7, r3, #24
 80071e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80071e6:	600e      	str	r6, [r1, #0]
 80071e8:	d514      	bpl.n	8007214 <_printf_i+0x1ac>
 80071ea:	07d9      	lsls	r1, r3, #31
 80071ec:	bf44      	itt	mi
 80071ee:	f043 0320 	orrmi.w	r3, r3, #32
 80071f2:	6023      	strmi	r3, [r4, #0]
 80071f4:	b91d      	cbnz	r5, 80071fe <_printf_i+0x196>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	f023 0320 	bic.w	r3, r3, #32
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	2310      	movs	r3, #16
 8007200:	e7b0      	b.n	8007164 <_printf_i+0xfc>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	f043 0320 	orr.w	r3, r3, #32
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	2378      	movs	r3, #120	; 0x78
 800720c:	4828      	ldr	r0, [pc, #160]	; (80072b0 <_printf_i+0x248>)
 800720e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007212:	e7e3      	b.n	80071dc <_printf_i+0x174>
 8007214:	065e      	lsls	r6, r3, #25
 8007216:	bf48      	it	mi
 8007218:	b2ad      	uxthmi	r5, r5
 800721a:	e7e6      	b.n	80071ea <_printf_i+0x182>
 800721c:	4616      	mov	r6, r2
 800721e:	e7bb      	b.n	8007198 <_printf_i+0x130>
 8007220:	680b      	ldr	r3, [r1, #0]
 8007222:	6826      	ldr	r6, [r4, #0]
 8007224:	6960      	ldr	r0, [r4, #20]
 8007226:	1d1d      	adds	r5, r3, #4
 8007228:	600d      	str	r5, [r1, #0]
 800722a:	0635      	lsls	r5, r6, #24
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	d501      	bpl.n	8007234 <_printf_i+0x1cc>
 8007230:	6018      	str	r0, [r3, #0]
 8007232:	e002      	b.n	800723a <_printf_i+0x1d2>
 8007234:	0671      	lsls	r1, r6, #25
 8007236:	d5fb      	bpl.n	8007230 <_printf_i+0x1c8>
 8007238:	8018      	strh	r0, [r3, #0]
 800723a:	2300      	movs	r3, #0
 800723c:	6123      	str	r3, [r4, #16]
 800723e:	4616      	mov	r6, r2
 8007240:	e7ba      	b.n	80071b8 <_printf_i+0x150>
 8007242:	680b      	ldr	r3, [r1, #0]
 8007244:	1d1a      	adds	r2, r3, #4
 8007246:	600a      	str	r2, [r1, #0]
 8007248:	681e      	ldr	r6, [r3, #0]
 800724a:	6862      	ldr	r2, [r4, #4]
 800724c:	2100      	movs	r1, #0
 800724e:	4630      	mov	r0, r6
 8007250:	f7f8 ffc6 	bl	80001e0 <memchr>
 8007254:	b108      	cbz	r0, 800725a <_printf_i+0x1f2>
 8007256:	1b80      	subs	r0, r0, r6
 8007258:	6060      	str	r0, [r4, #4]
 800725a:	6863      	ldr	r3, [r4, #4]
 800725c:	6123      	str	r3, [r4, #16]
 800725e:	2300      	movs	r3, #0
 8007260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007264:	e7a8      	b.n	80071b8 <_printf_i+0x150>
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	4632      	mov	r2, r6
 800726a:	4649      	mov	r1, r9
 800726c:	4640      	mov	r0, r8
 800726e:	47d0      	blx	sl
 8007270:	3001      	adds	r0, #1
 8007272:	d0ab      	beq.n	80071cc <_printf_i+0x164>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	079b      	lsls	r3, r3, #30
 8007278:	d413      	bmi.n	80072a2 <_printf_i+0x23a>
 800727a:	68e0      	ldr	r0, [r4, #12]
 800727c:	9b03      	ldr	r3, [sp, #12]
 800727e:	4298      	cmp	r0, r3
 8007280:	bfb8      	it	lt
 8007282:	4618      	movlt	r0, r3
 8007284:	e7a4      	b.n	80071d0 <_printf_i+0x168>
 8007286:	2301      	movs	r3, #1
 8007288:	4632      	mov	r2, r6
 800728a:	4649      	mov	r1, r9
 800728c:	4640      	mov	r0, r8
 800728e:	47d0      	blx	sl
 8007290:	3001      	adds	r0, #1
 8007292:	d09b      	beq.n	80071cc <_printf_i+0x164>
 8007294:	3501      	adds	r5, #1
 8007296:	68e3      	ldr	r3, [r4, #12]
 8007298:	9903      	ldr	r1, [sp, #12]
 800729a:	1a5b      	subs	r3, r3, r1
 800729c:	42ab      	cmp	r3, r5
 800729e:	dcf2      	bgt.n	8007286 <_printf_i+0x21e>
 80072a0:	e7eb      	b.n	800727a <_printf_i+0x212>
 80072a2:	2500      	movs	r5, #0
 80072a4:	f104 0619 	add.w	r6, r4, #25
 80072a8:	e7f5      	b.n	8007296 <_printf_i+0x22e>
 80072aa:	bf00      	nop
 80072ac:	080112d9 	.word	0x080112d9
 80072b0:	080112ea 	.word	0x080112ea

080072b4 <_puts_r>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	460e      	mov	r6, r1
 80072b8:	4605      	mov	r5, r0
 80072ba:	b118      	cbz	r0, 80072c4 <_puts_r+0x10>
 80072bc:	6983      	ldr	r3, [r0, #24]
 80072be:	b90b      	cbnz	r3, 80072c4 <_puts_r+0x10>
 80072c0:	f7ff fb0e 	bl	80068e0 <__sinit>
 80072c4:	69ab      	ldr	r3, [r5, #24]
 80072c6:	68ac      	ldr	r4, [r5, #8]
 80072c8:	b913      	cbnz	r3, 80072d0 <_puts_r+0x1c>
 80072ca:	4628      	mov	r0, r5
 80072cc:	f7ff fb08 	bl	80068e0 <__sinit>
 80072d0:	4b2c      	ldr	r3, [pc, #176]	; (8007384 <_puts_r+0xd0>)
 80072d2:	429c      	cmp	r4, r3
 80072d4:	d120      	bne.n	8007318 <_puts_r+0x64>
 80072d6:	686c      	ldr	r4, [r5, #4]
 80072d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072da:	07db      	lsls	r3, r3, #31
 80072dc:	d405      	bmi.n	80072ea <_puts_r+0x36>
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	0598      	lsls	r0, r3, #22
 80072e2:	d402      	bmi.n	80072ea <_puts_r+0x36>
 80072e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072e6:	f7ff fbd0 	bl	8006a8a <__retarget_lock_acquire_recursive>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	0719      	lsls	r1, r3, #28
 80072ee:	d51d      	bpl.n	800732c <_puts_r+0x78>
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	b1db      	cbz	r3, 800732c <_puts_r+0x78>
 80072f4:	3e01      	subs	r6, #1
 80072f6:	68a3      	ldr	r3, [r4, #8]
 80072f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072fc:	3b01      	subs	r3, #1
 80072fe:	60a3      	str	r3, [r4, #8]
 8007300:	bb39      	cbnz	r1, 8007352 <_puts_r+0x9e>
 8007302:	2b00      	cmp	r3, #0
 8007304:	da38      	bge.n	8007378 <_puts_r+0xc4>
 8007306:	4622      	mov	r2, r4
 8007308:	210a      	movs	r1, #10
 800730a:	4628      	mov	r0, r5
 800730c:	f000 f8d0 	bl	80074b0 <__swbuf_r>
 8007310:	3001      	adds	r0, #1
 8007312:	d011      	beq.n	8007338 <_puts_r+0x84>
 8007314:	250a      	movs	r5, #10
 8007316:	e011      	b.n	800733c <_puts_r+0x88>
 8007318:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <_puts_r+0xd4>)
 800731a:	429c      	cmp	r4, r3
 800731c:	d101      	bne.n	8007322 <_puts_r+0x6e>
 800731e:	68ac      	ldr	r4, [r5, #8]
 8007320:	e7da      	b.n	80072d8 <_puts_r+0x24>
 8007322:	4b1a      	ldr	r3, [pc, #104]	; (800738c <_puts_r+0xd8>)
 8007324:	429c      	cmp	r4, r3
 8007326:	bf08      	it	eq
 8007328:	68ec      	ldreq	r4, [r5, #12]
 800732a:	e7d5      	b.n	80072d8 <_puts_r+0x24>
 800732c:	4621      	mov	r1, r4
 800732e:	4628      	mov	r0, r5
 8007330:	f000 f922 	bl	8007578 <__swsetup_r>
 8007334:	2800      	cmp	r0, #0
 8007336:	d0dd      	beq.n	80072f4 <_puts_r+0x40>
 8007338:	f04f 35ff 	mov.w	r5, #4294967295
 800733c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800733e:	07da      	lsls	r2, r3, #31
 8007340:	d405      	bmi.n	800734e <_puts_r+0x9a>
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	059b      	lsls	r3, r3, #22
 8007346:	d402      	bmi.n	800734e <_puts_r+0x9a>
 8007348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800734a:	f7ff fb9f 	bl	8006a8c <__retarget_lock_release_recursive>
 800734e:	4628      	mov	r0, r5
 8007350:	bd70      	pop	{r4, r5, r6, pc}
 8007352:	2b00      	cmp	r3, #0
 8007354:	da04      	bge.n	8007360 <_puts_r+0xac>
 8007356:	69a2      	ldr	r2, [r4, #24]
 8007358:	429a      	cmp	r2, r3
 800735a:	dc06      	bgt.n	800736a <_puts_r+0xb6>
 800735c:	290a      	cmp	r1, #10
 800735e:	d004      	beq.n	800736a <_puts_r+0xb6>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	6022      	str	r2, [r4, #0]
 8007366:	7019      	strb	r1, [r3, #0]
 8007368:	e7c5      	b.n	80072f6 <_puts_r+0x42>
 800736a:	4622      	mov	r2, r4
 800736c:	4628      	mov	r0, r5
 800736e:	f000 f89f 	bl	80074b0 <__swbuf_r>
 8007372:	3001      	adds	r0, #1
 8007374:	d1bf      	bne.n	80072f6 <_puts_r+0x42>
 8007376:	e7df      	b.n	8007338 <_puts_r+0x84>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	250a      	movs	r5, #10
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	6022      	str	r2, [r4, #0]
 8007380:	701d      	strb	r5, [r3, #0]
 8007382:	e7db      	b.n	800733c <_puts_r+0x88>
 8007384:	08011284 	.word	0x08011284
 8007388:	080112a4 	.word	0x080112a4
 800738c:	08011264 	.word	0x08011264

08007390 <puts>:
 8007390:	4b02      	ldr	r3, [pc, #8]	; (800739c <puts+0xc>)
 8007392:	4601      	mov	r1, r0
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	f7ff bf8d 	b.w	80072b4 <_puts_r>
 800739a:	bf00      	nop
 800739c:	20000018 	.word	0x20000018

080073a0 <_sbrk_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4d06      	ldr	r5, [pc, #24]	; (80073bc <_sbrk_r+0x1c>)
 80073a4:	2300      	movs	r3, #0
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	f7fa fc0c 	bl	8001bc8 <_sbrk>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_sbrk_r+0x1a>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_sbrk_r+0x1a>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	2000a3c0 	.word	0x2000a3c0

080073c0 <sniprintf>:
 80073c0:	b40c      	push	{r2, r3}
 80073c2:	b530      	push	{r4, r5, lr}
 80073c4:	4b17      	ldr	r3, [pc, #92]	; (8007424 <sniprintf+0x64>)
 80073c6:	1e0c      	subs	r4, r1, #0
 80073c8:	681d      	ldr	r5, [r3, #0]
 80073ca:	b09d      	sub	sp, #116	; 0x74
 80073cc:	da08      	bge.n	80073e0 <sniprintf+0x20>
 80073ce:	238b      	movs	r3, #139	; 0x8b
 80073d0:	602b      	str	r3, [r5, #0]
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295
 80073d6:	b01d      	add	sp, #116	; 0x74
 80073d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073dc:	b002      	add	sp, #8
 80073de:	4770      	bx	lr
 80073e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80073e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80073e8:	bf14      	ite	ne
 80073ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80073ee:	4623      	moveq	r3, r4
 80073f0:	9304      	str	r3, [sp, #16]
 80073f2:	9307      	str	r3, [sp, #28]
 80073f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073f8:	9002      	str	r0, [sp, #8]
 80073fa:	9006      	str	r0, [sp, #24]
 80073fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007400:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007402:	ab21      	add	r3, sp, #132	; 0x84
 8007404:	a902      	add	r1, sp, #8
 8007406:	4628      	mov	r0, r5
 8007408:	9301      	str	r3, [sp, #4]
 800740a:	f000 fa17 	bl	800783c <_svfiprintf_r>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	bfbc      	itt	lt
 8007412:	238b      	movlt	r3, #139	; 0x8b
 8007414:	602b      	strlt	r3, [r5, #0]
 8007416:	2c00      	cmp	r4, #0
 8007418:	d0dd      	beq.n	80073d6 <sniprintf+0x16>
 800741a:	9b02      	ldr	r3, [sp, #8]
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	e7d9      	b.n	80073d6 <sniprintf+0x16>
 8007422:	bf00      	nop
 8007424:	20000018 	.word	0x20000018

08007428 <__sread>:
 8007428:	b510      	push	{r4, lr}
 800742a:	460c      	mov	r4, r1
 800742c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007430:	f000 fb04 	bl	8007a3c <_read_r>
 8007434:	2800      	cmp	r0, #0
 8007436:	bfab      	itete	ge
 8007438:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800743a:	89a3      	ldrhlt	r3, [r4, #12]
 800743c:	181b      	addge	r3, r3, r0
 800743e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007442:	bfac      	ite	ge
 8007444:	6563      	strge	r3, [r4, #84]	; 0x54
 8007446:	81a3      	strhlt	r3, [r4, #12]
 8007448:	bd10      	pop	{r4, pc}

0800744a <__swrite>:
 800744a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744e:	461f      	mov	r7, r3
 8007450:	898b      	ldrh	r3, [r1, #12]
 8007452:	05db      	lsls	r3, r3, #23
 8007454:	4605      	mov	r5, r0
 8007456:	460c      	mov	r4, r1
 8007458:	4616      	mov	r6, r2
 800745a:	d505      	bpl.n	8007468 <__swrite+0x1e>
 800745c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007460:	2302      	movs	r3, #2
 8007462:	2200      	movs	r2, #0
 8007464:	f000 f930 	bl	80076c8 <_lseek_r>
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800746e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007472:	81a3      	strh	r3, [r4, #12]
 8007474:	4632      	mov	r2, r6
 8007476:	463b      	mov	r3, r7
 8007478:	4628      	mov	r0, r5
 800747a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800747e:	f000 b869 	b.w	8007554 <_write_r>

08007482 <__sseek>:
 8007482:	b510      	push	{r4, lr}
 8007484:	460c      	mov	r4, r1
 8007486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748a:	f000 f91d 	bl	80076c8 <_lseek_r>
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	bf15      	itete	ne
 8007494:	6560      	strne	r0, [r4, #84]	; 0x54
 8007496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800749a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800749e:	81a3      	strheq	r3, [r4, #12]
 80074a0:	bf18      	it	ne
 80074a2:	81a3      	strhne	r3, [r4, #12]
 80074a4:	bd10      	pop	{r4, pc}

080074a6 <__sclose>:
 80074a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074aa:	f000 b8db 	b.w	8007664 <_close_r>
	...

080074b0 <__swbuf_r>:
 80074b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b2:	460e      	mov	r6, r1
 80074b4:	4614      	mov	r4, r2
 80074b6:	4605      	mov	r5, r0
 80074b8:	b118      	cbz	r0, 80074c2 <__swbuf_r+0x12>
 80074ba:	6983      	ldr	r3, [r0, #24]
 80074bc:	b90b      	cbnz	r3, 80074c2 <__swbuf_r+0x12>
 80074be:	f7ff fa0f 	bl	80068e0 <__sinit>
 80074c2:	4b21      	ldr	r3, [pc, #132]	; (8007548 <__swbuf_r+0x98>)
 80074c4:	429c      	cmp	r4, r3
 80074c6:	d12b      	bne.n	8007520 <__swbuf_r+0x70>
 80074c8:	686c      	ldr	r4, [r5, #4]
 80074ca:	69a3      	ldr	r3, [r4, #24]
 80074cc:	60a3      	str	r3, [r4, #8]
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	071a      	lsls	r2, r3, #28
 80074d2:	d52f      	bpl.n	8007534 <__swbuf_r+0x84>
 80074d4:	6923      	ldr	r3, [r4, #16]
 80074d6:	b36b      	cbz	r3, 8007534 <__swbuf_r+0x84>
 80074d8:	6923      	ldr	r3, [r4, #16]
 80074da:	6820      	ldr	r0, [r4, #0]
 80074dc:	1ac0      	subs	r0, r0, r3
 80074de:	6963      	ldr	r3, [r4, #20]
 80074e0:	b2f6      	uxtb	r6, r6
 80074e2:	4283      	cmp	r3, r0
 80074e4:	4637      	mov	r7, r6
 80074e6:	dc04      	bgt.n	80074f2 <__swbuf_r+0x42>
 80074e8:	4621      	mov	r1, r4
 80074ea:	4628      	mov	r0, r5
 80074ec:	f7ff f952 	bl	8006794 <_fflush_r>
 80074f0:	bb30      	cbnz	r0, 8007540 <__swbuf_r+0x90>
 80074f2:	68a3      	ldr	r3, [r4, #8]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	60a3      	str	r3, [r4, #8]
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	6022      	str	r2, [r4, #0]
 80074fe:	701e      	strb	r6, [r3, #0]
 8007500:	6963      	ldr	r3, [r4, #20]
 8007502:	3001      	adds	r0, #1
 8007504:	4283      	cmp	r3, r0
 8007506:	d004      	beq.n	8007512 <__swbuf_r+0x62>
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	07db      	lsls	r3, r3, #31
 800750c:	d506      	bpl.n	800751c <__swbuf_r+0x6c>
 800750e:	2e0a      	cmp	r6, #10
 8007510:	d104      	bne.n	800751c <__swbuf_r+0x6c>
 8007512:	4621      	mov	r1, r4
 8007514:	4628      	mov	r0, r5
 8007516:	f7ff f93d 	bl	8006794 <_fflush_r>
 800751a:	b988      	cbnz	r0, 8007540 <__swbuf_r+0x90>
 800751c:	4638      	mov	r0, r7
 800751e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007520:	4b0a      	ldr	r3, [pc, #40]	; (800754c <__swbuf_r+0x9c>)
 8007522:	429c      	cmp	r4, r3
 8007524:	d101      	bne.n	800752a <__swbuf_r+0x7a>
 8007526:	68ac      	ldr	r4, [r5, #8]
 8007528:	e7cf      	b.n	80074ca <__swbuf_r+0x1a>
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <__swbuf_r+0xa0>)
 800752c:	429c      	cmp	r4, r3
 800752e:	bf08      	it	eq
 8007530:	68ec      	ldreq	r4, [r5, #12]
 8007532:	e7ca      	b.n	80074ca <__swbuf_r+0x1a>
 8007534:	4621      	mov	r1, r4
 8007536:	4628      	mov	r0, r5
 8007538:	f000 f81e 	bl	8007578 <__swsetup_r>
 800753c:	2800      	cmp	r0, #0
 800753e:	d0cb      	beq.n	80074d8 <__swbuf_r+0x28>
 8007540:	f04f 37ff 	mov.w	r7, #4294967295
 8007544:	e7ea      	b.n	800751c <__swbuf_r+0x6c>
 8007546:	bf00      	nop
 8007548:	08011284 	.word	0x08011284
 800754c:	080112a4 	.word	0x080112a4
 8007550:	08011264 	.word	0x08011264

08007554 <_write_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4d07      	ldr	r5, [pc, #28]	; (8007574 <_write_r+0x20>)
 8007558:	4604      	mov	r4, r0
 800755a:	4608      	mov	r0, r1
 800755c:	4611      	mov	r1, r2
 800755e:	2200      	movs	r2, #0
 8007560:	602a      	str	r2, [r5, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	f7fa fadf 	bl	8001b26 <_write>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d102      	bne.n	8007572 <_write_r+0x1e>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b103      	cbz	r3, 8007572 <_write_r+0x1e>
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	2000a3c0 	.word	0x2000a3c0

08007578 <__swsetup_r>:
 8007578:	4b32      	ldr	r3, [pc, #200]	; (8007644 <__swsetup_r+0xcc>)
 800757a:	b570      	push	{r4, r5, r6, lr}
 800757c:	681d      	ldr	r5, [r3, #0]
 800757e:	4606      	mov	r6, r0
 8007580:	460c      	mov	r4, r1
 8007582:	b125      	cbz	r5, 800758e <__swsetup_r+0x16>
 8007584:	69ab      	ldr	r3, [r5, #24]
 8007586:	b913      	cbnz	r3, 800758e <__swsetup_r+0x16>
 8007588:	4628      	mov	r0, r5
 800758a:	f7ff f9a9 	bl	80068e0 <__sinit>
 800758e:	4b2e      	ldr	r3, [pc, #184]	; (8007648 <__swsetup_r+0xd0>)
 8007590:	429c      	cmp	r4, r3
 8007592:	d10f      	bne.n	80075b4 <__swsetup_r+0x3c>
 8007594:	686c      	ldr	r4, [r5, #4]
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800759c:	0719      	lsls	r1, r3, #28
 800759e:	d42c      	bmi.n	80075fa <__swsetup_r+0x82>
 80075a0:	06dd      	lsls	r5, r3, #27
 80075a2:	d411      	bmi.n	80075c8 <__swsetup_r+0x50>
 80075a4:	2309      	movs	r3, #9
 80075a6:	6033      	str	r3, [r6, #0]
 80075a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075ac:	81a3      	strh	r3, [r4, #12]
 80075ae:	f04f 30ff 	mov.w	r0, #4294967295
 80075b2:	e03e      	b.n	8007632 <__swsetup_r+0xba>
 80075b4:	4b25      	ldr	r3, [pc, #148]	; (800764c <__swsetup_r+0xd4>)
 80075b6:	429c      	cmp	r4, r3
 80075b8:	d101      	bne.n	80075be <__swsetup_r+0x46>
 80075ba:	68ac      	ldr	r4, [r5, #8]
 80075bc:	e7eb      	b.n	8007596 <__swsetup_r+0x1e>
 80075be:	4b24      	ldr	r3, [pc, #144]	; (8007650 <__swsetup_r+0xd8>)
 80075c0:	429c      	cmp	r4, r3
 80075c2:	bf08      	it	eq
 80075c4:	68ec      	ldreq	r4, [r5, #12]
 80075c6:	e7e6      	b.n	8007596 <__swsetup_r+0x1e>
 80075c8:	0758      	lsls	r0, r3, #29
 80075ca:	d512      	bpl.n	80075f2 <__swsetup_r+0x7a>
 80075cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ce:	b141      	cbz	r1, 80075e2 <__swsetup_r+0x6a>
 80075d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075d4:	4299      	cmp	r1, r3
 80075d6:	d002      	beq.n	80075de <__swsetup_r+0x66>
 80075d8:	4630      	mov	r0, r6
 80075da:	f7ff fad3 	bl	8006b84 <_free_r>
 80075de:	2300      	movs	r3, #0
 80075e0:	6363      	str	r3, [r4, #52]	; 0x34
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	2300      	movs	r3, #0
 80075ec:	6063      	str	r3, [r4, #4]
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	f043 0308 	orr.w	r3, r3, #8
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	b94b      	cbnz	r3, 8007612 <__swsetup_r+0x9a>
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007608:	d003      	beq.n	8007612 <__swsetup_r+0x9a>
 800760a:	4621      	mov	r1, r4
 800760c:	4630      	mov	r0, r6
 800760e:	f7ff fa63 	bl	8006ad8 <__smakebuf_r>
 8007612:	89a0      	ldrh	r0, [r4, #12]
 8007614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007618:	f010 0301 	ands.w	r3, r0, #1
 800761c:	d00a      	beq.n	8007634 <__swsetup_r+0xbc>
 800761e:	2300      	movs	r3, #0
 8007620:	60a3      	str	r3, [r4, #8]
 8007622:	6963      	ldr	r3, [r4, #20]
 8007624:	425b      	negs	r3, r3
 8007626:	61a3      	str	r3, [r4, #24]
 8007628:	6923      	ldr	r3, [r4, #16]
 800762a:	b943      	cbnz	r3, 800763e <__swsetup_r+0xc6>
 800762c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007630:	d1ba      	bne.n	80075a8 <__swsetup_r+0x30>
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	0781      	lsls	r1, r0, #30
 8007636:	bf58      	it	pl
 8007638:	6963      	ldrpl	r3, [r4, #20]
 800763a:	60a3      	str	r3, [r4, #8]
 800763c:	e7f4      	b.n	8007628 <__swsetup_r+0xb0>
 800763e:	2000      	movs	r0, #0
 8007640:	e7f7      	b.n	8007632 <__swsetup_r+0xba>
 8007642:	bf00      	nop
 8007644:	20000018 	.word	0x20000018
 8007648:	08011284 	.word	0x08011284
 800764c:	080112a4 	.word	0x080112a4
 8007650:	08011264 	.word	0x08011264

08007654 <abort>:
 8007654:	b508      	push	{r3, lr}
 8007656:	2006      	movs	r0, #6
 8007658:	f000 fa2a 	bl	8007ab0 <raise>
 800765c:	2001      	movs	r0, #1
 800765e:	f7fa fa3b 	bl	8001ad8 <_exit>
	...

08007664 <_close_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4d06      	ldr	r5, [pc, #24]	; (8007680 <_close_r+0x1c>)
 8007668:	2300      	movs	r3, #0
 800766a:	4604      	mov	r4, r0
 800766c:	4608      	mov	r0, r1
 800766e:	602b      	str	r3, [r5, #0]
 8007670:	f7fa fa75 	bl	8001b5e <_close>
 8007674:	1c43      	adds	r3, r0, #1
 8007676:	d102      	bne.n	800767e <_close_r+0x1a>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	b103      	cbz	r3, 800767e <_close_r+0x1a>
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	bd38      	pop	{r3, r4, r5, pc}
 8007680:	2000a3c0 	.word	0x2000a3c0

08007684 <_fstat_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4d07      	ldr	r5, [pc, #28]	; (80076a4 <_fstat_r+0x20>)
 8007688:	2300      	movs	r3, #0
 800768a:	4604      	mov	r4, r0
 800768c:	4608      	mov	r0, r1
 800768e:	4611      	mov	r1, r2
 8007690:	602b      	str	r3, [r5, #0]
 8007692:	f7fa fa70 	bl	8001b76 <_fstat>
 8007696:	1c43      	adds	r3, r0, #1
 8007698:	d102      	bne.n	80076a0 <_fstat_r+0x1c>
 800769a:	682b      	ldr	r3, [r5, #0]
 800769c:	b103      	cbz	r3, 80076a0 <_fstat_r+0x1c>
 800769e:	6023      	str	r3, [r4, #0]
 80076a0:	bd38      	pop	{r3, r4, r5, pc}
 80076a2:	bf00      	nop
 80076a4:	2000a3c0 	.word	0x2000a3c0

080076a8 <_isatty_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4d06      	ldr	r5, [pc, #24]	; (80076c4 <_isatty_r+0x1c>)
 80076ac:	2300      	movs	r3, #0
 80076ae:	4604      	mov	r4, r0
 80076b0:	4608      	mov	r0, r1
 80076b2:	602b      	str	r3, [r5, #0]
 80076b4:	f7fa fa6f 	bl	8001b96 <_isatty>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d102      	bne.n	80076c2 <_isatty_r+0x1a>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	b103      	cbz	r3, 80076c2 <_isatty_r+0x1a>
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	bd38      	pop	{r3, r4, r5, pc}
 80076c4:	2000a3c0 	.word	0x2000a3c0

080076c8 <_lseek_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4d07      	ldr	r5, [pc, #28]	; (80076e8 <_lseek_r+0x20>)
 80076cc:	4604      	mov	r4, r0
 80076ce:	4608      	mov	r0, r1
 80076d0:	4611      	mov	r1, r2
 80076d2:	2200      	movs	r2, #0
 80076d4:	602a      	str	r2, [r5, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	f7fa fa68 	bl	8001bac <_lseek>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d102      	bne.n	80076e6 <_lseek_r+0x1e>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	b103      	cbz	r3, 80076e6 <_lseek_r+0x1e>
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	2000a3c0 	.word	0x2000a3c0

080076ec <memmove>:
 80076ec:	4288      	cmp	r0, r1
 80076ee:	b510      	push	{r4, lr}
 80076f0:	eb01 0402 	add.w	r4, r1, r2
 80076f4:	d902      	bls.n	80076fc <memmove+0x10>
 80076f6:	4284      	cmp	r4, r0
 80076f8:	4623      	mov	r3, r4
 80076fa:	d807      	bhi.n	800770c <memmove+0x20>
 80076fc:	1e43      	subs	r3, r0, #1
 80076fe:	42a1      	cmp	r1, r4
 8007700:	d008      	beq.n	8007714 <memmove+0x28>
 8007702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800770a:	e7f8      	b.n	80076fe <memmove+0x12>
 800770c:	4402      	add	r2, r0
 800770e:	4601      	mov	r1, r0
 8007710:	428a      	cmp	r2, r1
 8007712:	d100      	bne.n	8007716 <memmove+0x2a>
 8007714:	bd10      	pop	{r4, pc}
 8007716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800771a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800771e:	e7f7      	b.n	8007710 <memmove+0x24>

08007720 <__malloc_lock>:
 8007720:	4801      	ldr	r0, [pc, #4]	; (8007728 <__malloc_lock+0x8>)
 8007722:	f7ff b9b2 	b.w	8006a8a <__retarget_lock_acquire_recursive>
 8007726:	bf00      	nop
 8007728:	2000a3b8 	.word	0x2000a3b8

0800772c <__malloc_unlock>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__malloc_unlock+0x8>)
 800772e:	f7ff b9ad 	b.w	8006a8c <__retarget_lock_release_recursive>
 8007732:	bf00      	nop
 8007734:	2000a3b8 	.word	0x2000a3b8

08007738 <_realloc_r>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	4607      	mov	r7, r0
 800773c:	4614      	mov	r4, r2
 800773e:	460e      	mov	r6, r1
 8007740:	b921      	cbnz	r1, 800774c <_realloc_r+0x14>
 8007742:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007746:	4611      	mov	r1, r2
 8007748:	f7ff ba6c 	b.w	8006c24 <_malloc_r>
 800774c:	b922      	cbnz	r2, 8007758 <_realloc_r+0x20>
 800774e:	f7ff fa19 	bl	8006b84 <_free_r>
 8007752:	4625      	mov	r5, r4
 8007754:	4628      	mov	r0, r5
 8007756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007758:	f000 f9c6 	bl	8007ae8 <_malloc_usable_size_r>
 800775c:	42a0      	cmp	r0, r4
 800775e:	d20f      	bcs.n	8007780 <_realloc_r+0x48>
 8007760:	4621      	mov	r1, r4
 8007762:	4638      	mov	r0, r7
 8007764:	f7ff fa5e 	bl	8006c24 <_malloc_r>
 8007768:	4605      	mov	r5, r0
 800776a:	2800      	cmp	r0, #0
 800776c:	d0f2      	beq.n	8007754 <_realloc_r+0x1c>
 800776e:	4631      	mov	r1, r6
 8007770:	4622      	mov	r2, r4
 8007772:	f7ff f9f1 	bl	8006b58 <memcpy>
 8007776:	4631      	mov	r1, r6
 8007778:	4638      	mov	r0, r7
 800777a:	f7ff fa03 	bl	8006b84 <_free_r>
 800777e:	e7e9      	b.n	8007754 <_realloc_r+0x1c>
 8007780:	4635      	mov	r5, r6
 8007782:	e7e7      	b.n	8007754 <_realloc_r+0x1c>

08007784 <__ssputs_r>:
 8007784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007788:	688e      	ldr	r6, [r1, #8]
 800778a:	429e      	cmp	r6, r3
 800778c:	4682      	mov	sl, r0
 800778e:	460c      	mov	r4, r1
 8007790:	4690      	mov	r8, r2
 8007792:	461f      	mov	r7, r3
 8007794:	d838      	bhi.n	8007808 <__ssputs_r+0x84>
 8007796:	898a      	ldrh	r2, [r1, #12]
 8007798:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800779c:	d032      	beq.n	8007804 <__ssputs_r+0x80>
 800779e:	6825      	ldr	r5, [r4, #0]
 80077a0:	6909      	ldr	r1, [r1, #16]
 80077a2:	eba5 0901 	sub.w	r9, r5, r1
 80077a6:	6965      	ldr	r5, [r4, #20]
 80077a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077b0:	3301      	adds	r3, #1
 80077b2:	444b      	add	r3, r9
 80077b4:	106d      	asrs	r5, r5, #1
 80077b6:	429d      	cmp	r5, r3
 80077b8:	bf38      	it	cc
 80077ba:	461d      	movcc	r5, r3
 80077bc:	0553      	lsls	r3, r2, #21
 80077be:	d531      	bpl.n	8007824 <__ssputs_r+0xa0>
 80077c0:	4629      	mov	r1, r5
 80077c2:	f7ff fa2f 	bl	8006c24 <_malloc_r>
 80077c6:	4606      	mov	r6, r0
 80077c8:	b950      	cbnz	r0, 80077e0 <__ssputs_r+0x5c>
 80077ca:	230c      	movs	r3, #12
 80077cc:	f8ca 3000 	str.w	r3, [sl]
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295
 80077dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e0:	6921      	ldr	r1, [r4, #16]
 80077e2:	464a      	mov	r2, r9
 80077e4:	f7ff f9b8 	bl	8006b58 <memcpy>
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f2:	81a3      	strh	r3, [r4, #12]
 80077f4:	6126      	str	r6, [r4, #16]
 80077f6:	6165      	str	r5, [r4, #20]
 80077f8:	444e      	add	r6, r9
 80077fa:	eba5 0509 	sub.w	r5, r5, r9
 80077fe:	6026      	str	r6, [r4, #0]
 8007800:	60a5      	str	r5, [r4, #8]
 8007802:	463e      	mov	r6, r7
 8007804:	42be      	cmp	r6, r7
 8007806:	d900      	bls.n	800780a <__ssputs_r+0x86>
 8007808:	463e      	mov	r6, r7
 800780a:	4632      	mov	r2, r6
 800780c:	6820      	ldr	r0, [r4, #0]
 800780e:	4641      	mov	r1, r8
 8007810:	f7ff ff6c 	bl	80076ec <memmove>
 8007814:	68a3      	ldr	r3, [r4, #8]
 8007816:	6822      	ldr	r2, [r4, #0]
 8007818:	1b9b      	subs	r3, r3, r6
 800781a:	4432      	add	r2, r6
 800781c:	60a3      	str	r3, [r4, #8]
 800781e:	6022      	str	r2, [r4, #0]
 8007820:	2000      	movs	r0, #0
 8007822:	e7db      	b.n	80077dc <__ssputs_r+0x58>
 8007824:	462a      	mov	r2, r5
 8007826:	f7ff ff87 	bl	8007738 <_realloc_r>
 800782a:	4606      	mov	r6, r0
 800782c:	2800      	cmp	r0, #0
 800782e:	d1e1      	bne.n	80077f4 <__ssputs_r+0x70>
 8007830:	6921      	ldr	r1, [r4, #16]
 8007832:	4650      	mov	r0, sl
 8007834:	f7ff f9a6 	bl	8006b84 <_free_r>
 8007838:	e7c7      	b.n	80077ca <__ssputs_r+0x46>
	...

0800783c <_svfiprintf_r>:
 800783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007840:	4698      	mov	r8, r3
 8007842:	898b      	ldrh	r3, [r1, #12]
 8007844:	061b      	lsls	r3, r3, #24
 8007846:	b09d      	sub	sp, #116	; 0x74
 8007848:	4607      	mov	r7, r0
 800784a:	460d      	mov	r5, r1
 800784c:	4614      	mov	r4, r2
 800784e:	d50e      	bpl.n	800786e <_svfiprintf_r+0x32>
 8007850:	690b      	ldr	r3, [r1, #16]
 8007852:	b963      	cbnz	r3, 800786e <_svfiprintf_r+0x32>
 8007854:	2140      	movs	r1, #64	; 0x40
 8007856:	f7ff f9e5 	bl	8006c24 <_malloc_r>
 800785a:	6028      	str	r0, [r5, #0]
 800785c:	6128      	str	r0, [r5, #16]
 800785e:	b920      	cbnz	r0, 800786a <_svfiprintf_r+0x2e>
 8007860:	230c      	movs	r3, #12
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	f04f 30ff 	mov.w	r0, #4294967295
 8007868:	e0d1      	b.n	8007a0e <_svfiprintf_r+0x1d2>
 800786a:	2340      	movs	r3, #64	; 0x40
 800786c:	616b      	str	r3, [r5, #20]
 800786e:	2300      	movs	r3, #0
 8007870:	9309      	str	r3, [sp, #36]	; 0x24
 8007872:	2320      	movs	r3, #32
 8007874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007878:	f8cd 800c 	str.w	r8, [sp, #12]
 800787c:	2330      	movs	r3, #48	; 0x30
 800787e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a28 <_svfiprintf_r+0x1ec>
 8007882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007886:	f04f 0901 	mov.w	r9, #1
 800788a:	4623      	mov	r3, r4
 800788c:	469a      	mov	sl, r3
 800788e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007892:	b10a      	cbz	r2, 8007898 <_svfiprintf_r+0x5c>
 8007894:	2a25      	cmp	r2, #37	; 0x25
 8007896:	d1f9      	bne.n	800788c <_svfiprintf_r+0x50>
 8007898:	ebba 0b04 	subs.w	fp, sl, r4
 800789c:	d00b      	beq.n	80078b6 <_svfiprintf_r+0x7a>
 800789e:	465b      	mov	r3, fp
 80078a0:	4622      	mov	r2, r4
 80078a2:	4629      	mov	r1, r5
 80078a4:	4638      	mov	r0, r7
 80078a6:	f7ff ff6d 	bl	8007784 <__ssputs_r>
 80078aa:	3001      	adds	r0, #1
 80078ac:	f000 80aa 	beq.w	8007a04 <_svfiprintf_r+0x1c8>
 80078b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078b2:	445a      	add	r2, fp
 80078b4:	9209      	str	r2, [sp, #36]	; 0x24
 80078b6:	f89a 3000 	ldrb.w	r3, [sl]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 80a2 	beq.w	8007a04 <_svfiprintf_r+0x1c8>
 80078c0:	2300      	movs	r3, #0
 80078c2:	f04f 32ff 	mov.w	r2, #4294967295
 80078c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ca:	f10a 0a01 	add.w	sl, sl, #1
 80078ce:	9304      	str	r3, [sp, #16]
 80078d0:	9307      	str	r3, [sp, #28]
 80078d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078d6:	931a      	str	r3, [sp, #104]	; 0x68
 80078d8:	4654      	mov	r4, sl
 80078da:	2205      	movs	r2, #5
 80078dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e0:	4851      	ldr	r0, [pc, #324]	; (8007a28 <_svfiprintf_r+0x1ec>)
 80078e2:	f7f8 fc7d 	bl	80001e0 <memchr>
 80078e6:	9a04      	ldr	r2, [sp, #16]
 80078e8:	b9d8      	cbnz	r0, 8007922 <_svfiprintf_r+0xe6>
 80078ea:	06d0      	lsls	r0, r2, #27
 80078ec:	bf44      	itt	mi
 80078ee:	2320      	movmi	r3, #32
 80078f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078f4:	0711      	lsls	r1, r2, #28
 80078f6:	bf44      	itt	mi
 80078f8:	232b      	movmi	r3, #43	; 0x2b
 80078fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007902:	2b2a      	cmp	r3, #42	; 0x2a
 8007904:	d015      	beq.n	8007932 <_svfiprintf_r+0xf6>
 8007906:	9a07      	ldr	r2, [sp, #28]
 8007908:	4654      	mov	r4, sl
 800790a:	2000      	movs	r0, #0
 800790c:	f04f 0c0a 	mov.w	ip, #10
 8007910:	4621      	mov	r1, r4
 8007912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007916:	3b30      	subs	r3, #48	; 0x30
 8007918:	2b09      	cmp	r3, #9
 800791a:	d94e      	bls.n	80079ba <_svfiprintf_r+0x17e>
 800791c:	b1b0      	cbz	r0, 800794c <_svfiprintf_r+0x110>
 800791e:	9207      	str	r2, [sp, #28]
 8007920:	e014      	b.n	800794c <_svfiprintf_r+0x110>
 8007922:	eba0 0308 	sub.w	r3, r0, r8
 8007926:	fa09 f303 	lsl.w	r3, r9, r3
 800792a:	4313      	orrs	r3, r2
 800792c:	9304      	str	r3, [sp, #16]
 800792e:	46a2      	mov	sl, r4
 8007930:	e7d2      	b.n	80078d8 <_svfiprintf_r+0x9c>
 8007932:	9b03      	ldr	r3, [sp, #12]
 8007934:	1d19      	adds	r1, r3, #4
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	9103      	str	r1, [sp, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	bfbb      	ittet	lt
 800793e:	425b      	neglt	r3, r3
 8007940:	f042 0202 	orrlt.w	r2, r2, #2
 8007944:	9307      	strge	r3, [sp, #28]
 8007946:	9307      	strlt	r3, [sp, #28]
 8007948:	bfb8      	it	lt
 800794a:	9204      	strlt	r2, [sp, #16]
 800794c:	7823      	ldrb	r3, [r4, #0]
 800794e:	2b2e      	cmp	r3, #46	; 0x2e
 8007950:	d10c      	bne.n	800796c <_svfiprintf_r+0x130>
 8007952:	7863      	ldrb	r3, [r4, #1]
 8007954:	2b2a      	cmp	r3, #42	; 0x2a
 8007956:	d135      	bne.n	80079c4 <_svfiprintf_r+0x188>
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	1d1a      	adds	r2, r3, #4
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	9203      	str	r2, [sp, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	bfb8      	it	lt
 8007964:	f04f 33ff 	movlt.w	r3, #4294967295
 8007968:	3402      	adds	r4, #2
 800796a:	9305      	str	r3, [sp, #20]
 800796c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a38 <_svfiprintf_r+0x1fc>
 8007970:	7821      	ldrb	r1, [r4, #0]
 8007972:	2203      	movs	r2, #3
 8007974:	4650      	mov	r0, sl
 8007976:	f7f8 fc33 	bl	80001e0 <memchr>
 800797a:	b140      	cbz	r0, 800798e <_svfiprintf_r+0x152>
 800797c:	2340      	movs	r3, #64	; 0x40
 800797e:	eba0 000a 	sub.w	r0, r0, sl
 8007982:	fa03 f000 	lsl.w	r0, r3, r0
 8007986:	9b04      	ldr	r3, [sp, #16]
 8007988:	4303      	orrs	r3, r0
 800798a:	3401      	adds	r4, #1
 800798c:	9304      	str	r3, [sp, #16]
 800798e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007992:	4826      	ldr	r0, [pc, #152]	; (8007a2c <_svfiprintf_r+0x1f0>)
 8007994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007998:	2206      	movs	r2, #6
 800799a:	f7f8 fc21 	bl	80001e0 <memchr>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d038      	beq.n	8007a14 <_svfiprintf_r+0x1d8>
 80079a2:	4b23      	ldr	r3, [pc, #140]	; (8007a30 <_svfiprintf_r+0x1f4>)
 80079a4:	bb1b      	cbnz	r3, 80079ee <_svfiprintf_r+0x1b2>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	3307      	adds	r3, #7
 80079aa:	f023 0307 	bic.w	r3, r3, #7
 80079ae:	3308      	adds	r3, #8
 80079b0:	9303      	str	r3, [sp, #12]
 80079b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b4:	4433      	add	r3, r6
 80079b6:	9309      	str	r3, [sp, #36]	; 0x24
 80079b8:	e767      	b.n	800788a <_svfiprintf_r+0x4e>
 80079ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80079be:	460c      	mov	r4, r1
 80079c0:	2001      	movs	r0, #1
 80079c2:	e7a5      	b.n	8007910 <_svfiprintf_r+0xd4>
 80079c4:	2300      	movs	r3, #0
 80079c6:	3401      	adds	r4, #1
 80079c8:	9305      	str	r3, [sp, #20]
 80079ca:	4619      	mov	r1, r3
 80079cc:	f04f 0c0a 	mov.w	ip, #10
 80079d0:	4620      	mov	r0, r4
 80079d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079d6:	3a30      	subs	r2, #48	; 0x30
 80079d8:	2a09      	cmp	r2, #9
 80079da:	d903      	bls.n	80079e4 <_svfiprintf_r+0x1a8>
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d0c5      	beq.n	800796c <_svfiprintf_r+0x130>
 80079e0:	9105      	str	r1, [sp, #20]
 80079e2:	e7c3      	b.n	800796c <_svfiprintf_r+0x130>
 80079e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80079e8:	4604      	mov	r4, r0
 80079ea:	2301      	movs	r3, #1
 80079ec:	e7f0      	b.n	80079d0 <_svfiprintf_r+0x194>
 80079ee:	ab03      	add	r3, sp, #12
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	462a      	mov	r2, r5
 80079f4:	4b0f      	ldr	r3, [pc, #60]	; (8007a34 <_svfiprintf_r+0x1f8>)
 80079f6:	a904      	add	r1, sp, #16
 80079f8:	4638      	mov	r0, r7
 80079fa:	f3af 8000 	nop.w
 80079fe:	1c42      	adds	r2, r0, #1
 8007a00:	4606      	mov	r6, r0
 8007a02:	d1d6      	bne.n	80079b2 <_svfiprintf_r+0x176>
 8007a04:	89ab      	ldrh	r3, [r5, #12]
 8007a06:	065b      	lsls	r3, r3, #25
 8007a08:	f53f af2c 	bmi.w	8007864 <_svfiprintf_r+0x28>
 8007a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a0e:	b01d      	add	sp, #116	; 0x74
 8007a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a14:	ab03      	add	r3, sp, #12
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	462a      	mov	r2, r5
 8007a1a:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <_svfiprintf_r+0x1f8>)
 8007a1c:	a904      	add	r1, sp, #16
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f7ff fb22 	bl	8007068 <_printf_i>
 8007a24:	e7eb      	b.n	80079fe <_svfiprintf_r+0x1c2>
 8007a26:	bf00      	nop
 8007a28:	080112c8 	.word	0x080112c8
 8007a2c:	080112d2 	.word	0x080112d2
 8007a30:	00000000 	.word	0x00000000
 8007a34:	08007785 	.word	0x08007785
 8007a38:	080112ce 	.word	0x080112ce

08007a3c <_read_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d07      	ldr	r5, [pc, #28]	; (8007a5c <_read_r+0x20>)
 8007a40:	4604      	mov	r4, r0
 8007a42:	4608      	mov	r0, r1
 8007a44:	4611      	mov	r1, r2
 8007a46:	2200      	movs	r2, #0
 8007a48:	602a      	str	r2, [r5, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f7fa f84e 	bl	8001aec <_read>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_read_r+0x1e>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_read_r+0x1e>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	2000a3c0 	.word	0x2000a3c0

08007a60 <_raise_r>:
 8007a60:	291f      	cmp	r1, #31
 8007a62:	b538      	push	{r3, r4, r5, lr}
 8007a64:	4604      	mov	r4, r0
 8007a66:	460d      	mov	r5, r1
 8007a68:	d904      	bls.n	8007a74 <_raise_r+0x14>
 8007a6a:	2316      	movs	r3, #22
 8007a6c:	6003      	str	r3, [r0, #0]
 8007a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a76:	b112      	cbz	r2, 8007a7e <_raise_r+0x1e>
 8007a78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a7c:	b94b      	cbnz	r3, 8007a92 <_raise_r+0x32>
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f000 f830 	bl	8007ae4 <_getpid_r>
 8007a84:	462a      	mov	r2, r5
 8007a86:	4601      	mov	r1, r0
 8007a88:	4620      	mov	r0, r4
 8007a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a8e:	f000 b817 	b.w	8007ac0 <_kill_r>
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d00a      	beq.n	8007aac <_raise_r+0x4c>
 8007a96:	1c59      	adds	r1, r3, #1
 8007a98:	d103      	bne.n	8007aa2 <_raise_r+0x42>
 8007a9a:	2316      	movs	r3, #22
 8007a9c:	6003      	str	r3, [r0, #0]
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	e7e7      	b.n	8007a72 <_raise_r+0x12>
 8007aa2:	2400      	movs	r4, #0
 8007aa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	4798      	blx	r3
 8007aac:	2000      	movs	r0, #0
 8007aae:	e7e0      	b.n	8007a72 <_raise_r+0x12>

08007ab0 <raise>:
 8007ab0:	4b02      	ldr	r3, [pc, #8]	; (8007abc <raise+0xc>)
 8007ab2:	4601      	mov	r1, r0
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	f7ff bfd3 	b.w	8007a60 <_raise_r>
 8007aba:	bf00      	nop
 8007abc:	20000018 	.word	0x20000018

08007ac0 <_kill_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4d07      	ldr	r5, [pc, #28]	; (8007ae0 <_kill_r+0x20>)
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	4608      	mov	r0, r1
 8007aca:	4611      	mov	r1, r2
 8007acc:	602b      	str	r3, [r5, #0]
 8007ace:	f7f9 fff3 	bl	8001ab8 <_kill>
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	d102      	bne.n	8007adc <_kill_r+0x1c>
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	b103      	cbz	r3, 8007adc <_kill_r+0x1c>
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	bd38      	pop	{r3, r4, r5, pc}
 8007ade:	bf00      	nop
 8007ae0:	2000a3c0 	.word	0x2000a3c0

08007ae4 <_getpid_r>:
 8007ae4:	f7f9 bfe0 	b.w	8001aa8 <_getpid>

08007ae8 <_malloc_usable_size_r>:
 8007ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aec:	1f18      	subs	r0, r3, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	bfbc      	itt	lt
 8007af2:	580b      	ldrlt	r3, [r1, r0]
 8007af4:	18c0      	addlt	r0, r0, r3
 8007af6:	4770      	bx	lr

08007af8 <_init>:
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	bf00      	nop
 8007afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afe:	bc08      	pop	{r3}
 8007b00:	469e      	mov	lr, r3
 8007b02:	4770      	bx	lr

08007b04 <_fini>:
 8007b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b06:	bf00      	nop
 8007b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0a:	bc08      	pop	{r3}
 8007b0c:	469e      	mov	lr, r3
 8007b0e:	4770      	bx	lr

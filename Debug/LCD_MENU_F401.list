
LCD_MENU_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009bcc  0800c134  0800c134  0001c134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015d00  08015d00  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08015d00  08015d00  00025d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015d08  08015d08  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015d08  08015d08  00025d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015d0c  08015d0c  00025d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08015d10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad28  20000094  08015da4  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000adbc  08015da4  0003adbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000265e3  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005324  00000000  00000000  000566a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  0005b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001910  00000000  00000000  0005d510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e24d  00000000  00000000  0005ee20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000264be  00000000  00000000  0007d06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a83dd  00000000  00000000  000a352b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d2c  00000000  00000000  0014b95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c11c 	.word	0x0800c11c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	0800c11c 	.word	0x0800c11c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d66:	4b52      	ldr	r3, [pc, #328]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d68:	4a52      	ldr	r2, [pc, #328]	; (8000eb4 <MX_ADC1_Init+0x160>)
 8000d6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d74:	4b4e      	ldr	r3, [pc, #312]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d7a:	4b4d      	ldr	r3, [pc, #308]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d80:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d86:	4b4a      	ldr	r3, [pc, #296]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d8e:	4b48      	ldr	r3, [pc, #288]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d94:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d96:	4a48      	ldr	r2, [pc, #288]	; (8000eb8 <MX_ADC1_Init+0x164>)
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d9a:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000da0:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000da2:	2208      	movs	r2, #8
 8000da4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000da6:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dae:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db4:	483e      	ldr	r0, [pc, #248]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000db6:	f002 fcf1 	bl	800379c <HAL_ADC_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dc0:	f001 fcf0 	bl	80027a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4836      	ldr	r0, [pc, #216]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000dd6:	f002 fe33 	bl	8003a40 <HAL_ADC_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000de0:	f001 fce0 	bl	80027a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	482f      	ldr	r0, [pc, #188]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000df2:	f002 fe25 	bl	8003a40 <HAL_ADC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dfc:	f001 fcd2 	bl	80027a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e00:	2303      	movs	r3, #3
 8000e02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e04:	2303      	movs	r3, #3
 8000e06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4828      	ldr	r0, [pc, #160]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e0e:	f002 fe17 	bl	8003a40 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000e18:	f001 fcc4 	bl	80027a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e20:	2304      	movs	r3, #4
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e2a:	f002 fe09 	bl	8003a40 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e34:	f001 fcb6 	bl	80027a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e38:	2306      	movs	r3, #6
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e40:	463b      	mov	r3, r7
 8000e42:	4619      	mov	r1, r3
 8000e44:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e46:	f002 fdfb 	bl	8003a40 <HAL_ADC_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e50:	f001 fca8 	bl	80027a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e54:	2307      	movs	r3, #7
 8000e56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000e58:	2306      	movs	r3, #6
 8000e5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e62:	f002 fded 	bl	8003a40 <HAL_ADC_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e6c:	f001 fc9a 	bl	80027a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e70:	2308      	movs	r3, #8
 8000e72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000e74:	2307      	movs	r3, #7
 8000e76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e7e:	f002 fddf 	bl	8003a40 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000e88:	f001 fc8c 	bl	80027a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e8c:	2309      	movs	r3, #9
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000e90:	2308      	movs	r3, #8
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_ADC1_Init+0x15c>)
 8000e9a:	f002 fdd1 	bl	8003a40 <HAL_ADC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000ea4:	f001 fc7e 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000a10c 	.word	0x2000a10c
 8000eb4:	40012000 	.word	0x40012000
 8000eb8:	0f000001 	.word	0x0f000001

08000ebc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a3c      	ldr	r2, [pc, #240]	; (8000fcc <HAL_ADC_MspInit+0x110>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d171      	bne.n	8000fc2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a3a      	ldr	r2, [pc, #232]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a33      	ldr	r2, [pc, #204]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a2c      	ldr	r2, [pc, #176]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f32:	23de      	movs	r3, #222	; 0xde
 8000f34:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f36:	2303      	movs	r3, #3
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <HAL_ADC_MspInit+0x118>)
 8000f46:	f003 fc9d 	bl	8004884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <HAL_ADC_MspInit+0x11c>)
 8000f5e:	f003 fc91 	bl	8004884 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <HAL_ADC_MspInit+0x124>)
 8000f66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fa8:	f003 f8fc 	bl	80041a4 <HAL_DMA_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fb2:	f001 fbf7 	bl	80027a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fba:	639a      	str	r2, [r3, #56]	; 0x38
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40012000 	.word	0x40012000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	2000a154 	.word	0x2000a154
 8000fe0:	40026410 	.word	0x40026410

08000fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_DMA_Init+0x3c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <MX_DMA_Init+0x3c>)
 8000ff4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_DMA_Init+0x3c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	203b      	movs	r0, #59	; 0x3b
 800100c:	f003 f893 	bl	8004136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001010:	203b      	movs	r0, #59	; 0x3b
 8001012:	f003 f8ac 	bl	800416e <HAL_NVIC_EnableIRQ>

}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800

08001024 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <SELECT+0x1c>)
 8001030:	f003 fdc4 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001034:	2001      	movs	r0, #1
 8001036:	f002 fb8d 	bl	8003754 <HAL_Delay>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400

08001044 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <DESELECT+0x1c>)
 8001050:	f003 fdb4 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f002 fb7d 	bl	8003754 <HAL_Delay>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020400 	.word	0x40020400

08001064 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800106e:	bf00      	nop
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <SPI_TxByte+0x30>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b02      	cmp	r3, #2
 800107c:	d1f8      	bne.n	8001070 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800107e:	1df9      	adds	r1, r7, #7
 8001080:	2364      	movs	r3, #100	; 0x64
 8001082:	2201      	movs	r2, #1
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <SPI_TxByte+0x30>)
 8001086:	f004 fdb3 	bl	8005bf0 <HAL_SPI_Transmit>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000a7a0 	.word	0x2000a7a0

08001098 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010a4:	bf00      	nop
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <SPI_TxBuffer+0x30>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d1f8      	bne.n	80010a6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80010b4:	887a      	ldrh	r2, [r7, #2]
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <SPI_TxBuffer+0x30>)
 80010bc:	f004 fd98 	bl	8005bf0 <HAL_SPI_Transmit>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000a7a0 	.word	0x2000a7a0

080010cc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010d6:	bf00      	nop
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <SPI_RxByte+0x34>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d1f8      	bne.n	80010d8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010e6:	1dba      	adds	r2, r7, #6
 80010e8:	1df9      	adds	r1, r7, #7
 80010ea:	2364      	movs	r3, #100	; 0x64
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <SPI_RxByte+0x34>)
 80010f2:	f004 feb9 	bl	8005e68 <HAL_SPI_TransmitReceive>

	return data;
 80010f6:	79bb      	ldrb	r3, [r7, #6]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000a7a0 	.word	0x2000a7a0

08001104 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800110c:	f7ff ffde 	bl	80010cc <SPI_RxByte>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	701a      	strb	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <SD_ReadyWait+0x30>)
 8001128:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800112c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800112e:	f7ff ffcd 	bl	80010cc <SPI_RxByte>
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2bff      	cmp	r3, #255	; 0xff
 800113a:	d004      	beq.n	8001146 <SD_ReadyWait+0x26>
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SD_ReadyWait+0x30>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f3      	bne.n	800112e <SD_ReadyWait+0xe>

	return res;
 8001146:	79fb      	ldrb	r3, [r7, #7]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000a8b0 	.word	0x2000a8b0

08001154 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800115a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800115e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001160:	f7ff ff70 	bl	8001044 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	e005      	b.n	8001176 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800116a:	20ff      	movs	r0, #255	; 0xff
 800116c:	f7ff ff7a 	bl	8001064 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3301      	adds	r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b09      	cmp	r3, #9
 800117a:	ddf6      	ble.n	800116a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800117c:	f7ff ff52 	bl	8001024 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001194:	2395      	movs	r3, #149	; 0x95
 8001196:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001198:	463b      	mov	r3, r7
 800119a:	2106      	movs	r1, #6
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff7b 	bl	8001098 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80011a2:	e002      	b.n	80011aa <SD_PowerOn+0x56>
	{
		cnt--;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80011aa:	f7ff ff8f 	bl	80010cc <SPI_RxByte>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d002      	beq.n	80011ba <SD_PowerOn+0x66>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f4      	bne.n	80011a4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80011ba:	f7ff ff43 	bl	8001044 <DESELECT>
	SPI_TxByte(0XFF);
 80011be:	20ff      	movs	r0, #255	; 0xff
 80011c0:	f7ff ff50 	bl	8001064 <SPI_TxByte>

	PowerFlag = 1;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <SD_PowerOn+0x80>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000b1 	.word	0x200000b1

080011d8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <SD_PowerOff+0x14>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	200000b1 	.word	0x200000b1

080011f0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <SD_CheckPower+0x14>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200000b1 	.word	0x200000b1

08001208 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <SD_RxDataBlock+0x5c>)
 8001214:	22c8      	movs	r2, #200	; 0xc8
 8001216:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001218:	f7ff ff58 	bl	80010cc <SPI_RxByte>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	2bff      	cmp	r3, #255	; 0xff
 8001224:	d104      	bne.n	8001230 <SD_RxDataBlock+0x28>
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <SD_RxDataBlock+0x5c>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f3      	bne.n	8001218 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2bfe      	cmp	r3, #254	; 0xfe
 8001234:	d001      	beq.n	800123a <SD_RxDataBlock+0x32>
 8001236:	2300      	movs	r3, #0
 8001238:	e00f      	b.n	800125a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5f 	bl	8001104 <SPI_RxBytePtr>
	} while(len--);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	603a      	str	r2, [r7, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f4      	bne.n	800123a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001250:	f7ff ff3c 	bl	80010cc <SPI_RxByte>
	SPI_RxByte();
 8001254:	f7ff ff3a 	bl	80010cc <SPI_RxByte>

	return TRUE;
 8001258:	2301      	movs	r3, #1
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000a8b1 	.word	0x2000a8b1

08001268 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001278:	f7ff ff52 	bl	8001120 <SD_ReadyWait>
 800127c:	4603      	mov	r3, r0
 800127e:	2bff      	cmp	r3, #255	; 0xff
 8001280:	d001      	beq.n	8001286 <SD_TxDataBlock+0x1e>
 8001282:	2300      	movs	r3, #0
 8001284:	e02f      	b.n	80012e6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff feeb 	bl	8001064 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	2bfd      	cmp	r3, #253	; 0xfd
 8001292:	d020      	beq.n	80012d6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fefd 	bl	8001098 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800129e:	f7ff ff15 	bl	80010cc <SPI_RxByte>
		SPI_RxByte();
 80012a2:	f7ff ff13 	bl	80010cc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80012a6:	e00b      	b.n	80012c0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80012a8:	f7ff ff10 	bl	80010cc <SPI_RxByte>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d006      	beq.n	80012c8 <SD_TxDataBlock+0x60>
			i++;
 80012ba:	7bbb      	ldrb	r3, [r7, #14]
 80012bc:	3301      	adds	r3, #1
 80012be:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	2b40      	cmp	r3, #64	; 0x40
 80012c4:	d9f0      	bls.n	80012a8 <SD_TxDataBlock+0x40>
 80012c6:	e000      	b.n	80012ca <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80012c8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80012ca:	bf00      	nop
 80012cc:	f7ff fefe 	bl	80010cc <SPI_RxByte>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0fa      	beq.n	80012cc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	2b05      	cmp	r3, #5
 80012de:	d101      	bne.n	80012e4 <SD_TxDataBlock+0x7c>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	6039      	str	r1, [r7, #0]
 80012f8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012fa:	f7ff ff11 	bl	8001120 <SD_ReadyWait>
 80012fe:	4603      	mov	r3, r0
 8001300:	2bff      	cmp	r3, #255	; 0xff
 8001302:	d001      	beq.n	8001308 <SD_SendCmd+0x1a>
 8001304:	23ff      	movs	r3, #255	; 0xff
 8001306:	e042      	b.n	800138e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff feaa 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	0e1b      	lsrs	r3, r3, #24
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fea4 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	0c1b      	lsrs	r3, r3, #16
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe9e 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fe98 	bl	8001064 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe93 	bl	8001064 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b40      	cmp	r3, #64	; 0x40
 8001342:	d102      	bne.n	800134a <SD_SendCmd+0x5c>
 8001344:	2395      	movs	r3, #149	; 0x95
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e007      	b.n	800135a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b48      	cmp	r3, #72	; 0x48
 800134e:	d102      	bne.n	8001356 <SD_SendCmd+0x68>
 8001350:	2387      	movs	r3, #135	; 0x87
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e001      	b.n	800135a <SD_SendCmd+0x6c>
	else crc = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe81 	bl	8001064 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b4c      	cmp	r3, #76	; 0x4c
 8001366:	d101      	bne.n	800136c <SD_SendCmd+0x7e>
 8001368:	f7ff feb0 	bl	80010cc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800136c:	230a      	movs	r3, #10
 800136e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001370:	f7ff feac 	bl	80010cc <SPI_RxByte>
 8001374:	4603      	mov	r3, r0
 8001376:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001378:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800137c:	2b00      	cmp	r3, #0
 800137e:	da05      	bge.n	800138c <SD_SendCmd+0x9e>
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	3b01      	subs	r3, #1
 8001384:	73bb      	strb	r3, [r7, #14]
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f1      	bne.n	8001370 <SD_SendCmd+0x82>

	return res;
 800138c:	7b7b      	ldrb	r3, [r7, #13]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SD_disk_initialize+0x14>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0d6      	b.n	800155a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80013ac:	4b6d      	ldr	r3, [pc, #436]	; (8001564 <SD_disk_initialize+0x1cc>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <SD_disk_initialize+0x2a>
 80013ba:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <SD_disk_initialize+0x1cc>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	e0cb      	b.n	800155a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80013c2:	f7ff fec7 	bl	8001154 <SD_PowerOn>

	/* slave select */
	SELECT();
 80013c6:	f7ff fe2d 	bl	8001024 <SELECT>

	/* check disk type */
	type = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80013ce:	2100      	movs	r1, #0
 80013d0:	2040      	movs	r0, #64	; 0x40
 80013d2:	f7ff ff8c 	bl	80012ee <SD_SendCmd>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b01      	cmp	r3, #1
 80013da:	f040 80a6 	bne.w	800152a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80013de:	4b62      	ldr	r3, [pc, #392]	; (8001568 <SD_disk_initialize+0x1d0>)
 80013e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013ea:	2048      	movs	r0, #72	; 0x48
 80013ec:	f7ff ff7f 	bl	80012ee <SD_SendCmd>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d158      	bne.n	80014a8 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e00c      	b.n	8001416 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80013fc:	7bfc      	ldrb	r4, [r7, #15]
 80013fe:	f7ff fe65 	bl	80010cc <SPI_RxByte>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4423      	add	r3, r4
 800140c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	3301      	adds	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d9ef      	bls.n	80013fc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800141c:	7abb      	ldrb	r3, [r7, #10]
 800141e:	2b01      	cmp	r3, #1
 8001420:	f040 8083 	bne.w	800152a <SD_disk_initialize+0x192>
 8001424:	7afb      	ldrb	r3, [r7, #11]
 8001426:	2baa      	cmp	r3, #170	; 0xaa
 8001428:	d17f      	bne.n	800152a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800142a:	2100      	movs	r1, #0
 800142c:	2077      	movs	r0, #119	; 0x77
 800142e:	f7ff ff5e 	bl	80012ee <SD_SendCmd>
 8001432:	4603      	mov	r3, r0
 8001434:	2b01      	cmp	r3, #1
 8001436:	d807      	bhi.n	8001448 <SD_disk_initialize+0xb0>
 8001438:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800143c:	2069      	movs	r0, #105	; 0x69
 800143e:	f7ff ff56 	bl	80012ee <SD_SendCmd>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001448:	4b47      	ldr	r3, [pc, #284]	; (8001568 <SD_disk_initialize+0x1d0>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1eb      	bne.n	800142a <SD_disk_initialize+0x92>
 8001452:	e000      	b.n	8001456 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001454:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <SD_disk_initialize+0x1d0>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d064      	beq.n	800152a <SD_disk_initialize+0x192>
 8001460:	2100      	movs	r1, #0
 8001462:	207a      	movs	r0, #122	; 0x7a
 8001464:	f7ff ff43 	bl	80012ee <SD_SendCmd>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d15d      	bne.n	800152a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e00c      	b.n	800148e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001474:	7bfc      	ldrb	r4, [r7, #15]
 8001476:	f7ff fe29 	bl	80010cc <SPI_RxByte>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4423      	add	r3, r4
 8001484:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3301      	adds	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d9ef      	bls.n	8001474 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001494:	7a3b      	ldrb	r3, [r7, #8]
 8001496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SD_disk_initialize+0x10a>
 800149e:	230c      	movs	r3, #12
 80014a0:	e000      	b.n	80014a4 <SD_disk_initialize+0x10c>
 80014a2:	2304      	movs	r3, #4
 80014a4:	73bb      	strb	r3, [r7, #14]
 80014a6:	e040      	b.n	800152a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80014a8:	2100      	movs	r1, #0
 80014aa:	2077      	movs	r0, #119	; 0x77
 80014ac:	f7ff ff1f 	bl	80012ee <SD_SendCmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d808      	bhi.n	80014c8 <SD_disk_initialize+0x130>
 80014b6:	2100      	movs	r1, #0
 80014b8:	2069      	movs	r0, #105	; 0x69
 80014ba:	f7ff ff18 	bl	80012ee <SD_SendCmd>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d801      	bhi.n	80014c8 <SD_disk_initialize+0x130>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e000      	b.n	80014ca <SD_disk_initialize+0x132>
 80014c8:	2301      	movs	r3, #1
 80014ca:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d10e      	bne.n	80014f0 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80014d2:	2100      	movs	r1, #0
 80014d4:	2077      	movs	r0, #119	; 0x77
 80014d6:	f7ff ff0a 	bl	80012ee <SD_SendCmd>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d80e      	bhi.n	80014fe <SD_disk_initialize+0x166>
 80014e0:	2100      	movs	r1, #0
 80014e2:	2069      	movs	r0, #105	; 0x69
 80014e4:	f7ff ff03 	bl	80012ee <SD_SendCmd>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d107      	bne.n	80014fe <SD_disk_initialize+0x166>
 80014ee:	e00d      	b.n	800150c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014f0:	2100      	movs	r1, #0
 80014f2:	2041      	movs	r0, #65	; 0x41
 80014f4:	f7ff fefb 	bl	80012ee <SD_SendCmd>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <SD_disk_initialize+0x1d0>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e1      	bne.n	80014cc <SD_disk_initialize+0x134>
 8001508:	e000      	b.n	800150c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800150a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <SD_disk_initialize+0x1d0>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <SD_disk_initialize+0x18e>
 8001516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151a:	2050      	movs	r0, #80	; 0x50
 800151c:	f7ff fee7 	bl	80012ee <SD_SendCmd>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SD_disk_initialize+0x192>
 8001526:	2300      	movs	r3, #0
 8001528:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <SD_disk_initialize+0x1d4>)
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001530:	f7ff fd88 	bl	8001044 <DESELECT>
	SPI_RxByte();
 8001534:	f7ff fdca 	bl	80010cc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <SD_disk_initialize+0x1cc>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SD_disk_initialize+0x1cc>)
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e001      	b.n	8001554 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001550:	f7ff fe42 	bl	80011d8 <SD_PowerOff>
	}

	return Stat;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <SD_disk_initialize+0x1cc>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	20000000 	.word	0x20000000
 8001568:	2000a8b1 	.word	0x2000a8b1
 800156c:	200000b0 	.word	0x200000b0

08001570 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SD_disk_status+0x14>
 8001580:	2301      	movs	r3, #1
 8001582:	e002      	b.n	800158a <SD_disk_status+0x1a>
	return Stat;
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SD_disk_status+0x28>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000

0800159c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <SD_disk_read+0x1c>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <SD_disk_read+0x20>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e051      	b.n	8001660 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <SD_disk_read+0xcc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SD_disk_read+0x32>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e048      	b.n	8001660 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <SD_disk_read+0xd0>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <SD_disk_read+0x44>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	607b      	str	r3, [r7, #4]

	SELECT();
 80015e0:	f7ff fd20 	bl	8001024 <SELECT>

	if (count == 1)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d111      	bne.n	800160e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	2051      	movs	r0, #81	; 0x51
 80015ee:	f7ff fe7e 	bl	80012ee <SD_SendCmd>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d129      	bne.n	800164c <SD_disk_read+0xb0>
 80015f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fc:	68b8      	ldr	r0, [r7, #8]
 80015fe:	f7ff fe03 	bl	8001208 <SD_RxDataBlock>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d021      	beq.n	800164c <SD_disk_read+0xb0>
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	e01e      	b.n	800164c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	2052      	movs	r0, #82	; 0x52
 8001612:	f7ff fe6c 	bl	80012ee <SD_SendCmd>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d117      	bne.n	800164c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800161c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001620:	68b8      	ldr	r0, [r7, #8]
 8001622:	f7ff fdf1 	bl	8001208 <SD_RxDataBlock>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00a      	beq.n	8001642 <SD_disk_read+0xa6>
				buff += 512;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001632:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3b01      	subs	r3, #1
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ed      	bne.n	800161c <SD_disk_read+0x80>
 8001640:	e000      	b.n	8001644 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001642:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001644:	2100      	movs	r1, #0
 8001646:	204c      	movs	r0, #76	; 0x4c
 8001648:	f7ff fe51 	bl	80012ee <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800164c:	f7ff fcfa 	bl	8001044 <DESELECT>
	SPI_RxByte();
 8001650:	f7ff fd3c 	bl	80010cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000000 	.word	0x20000000
 800166c:	200000b0 	.word	0x200000b0

08001670 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <SD_disk_write+0x1c>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <SD_disk_write+0x20>
 800168c:	2304      	movs	r3, #4
 800168e:	e06b      	b.n	8001768 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001690:	4b37      	ldr	r3, [pc, #220]	; (8001770 <SD_disk_write+0x100>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SD_disk_write+0x32>
 800169e:	2303      	movs	r3, #3
 80016a0:	e062      	b.n	8001768 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80016a2:	4b33      	ldr	r3, [pc, #204]	; (8001770 <SD_disk_write+0x100>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SD_disk_write+0x44>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e059      	b.n	8001768 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80016b4:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <SD_disk_write+0x104>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <SD_disk_write+0x56>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	607b      	str	r3, [r7, #4]

	SELECT();
 80016c6:	f7ff fcad 	bl	8001024 <SELECT>

	if (count == 1)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d110      	bne.n	80016f2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	2058      	movs	r0, #88	; 0x58
 80016d4:	f7ff fe0b 	bl	80012ee <SD_SendCmd>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d13a      	bne.n	8001754 <SD_disk_write+0xe4>
 80016de:	21fe      	movs	r1, #254	; 0xfe
 80016e0:	68b8      	ldr	r0, [r7, #8]
 80016e2:	f7ff fdc1 	bl	8001268 <SD_TxDataBlock>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d033      	beq.n	8001754 <SD_disk_write+0xe4>
			count = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	e030      	b.n	8001754 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <SD_disk_write+0x104>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80016fe:	2100      	movs	r1, #0
 8001700:	2077      	movs	r0, #119	; 0x77
 8001702:	f7ff fdf4 	bl	80012ee <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	2057      	movs	r0, #87	; 0x57
 800170a:	f7ff fdf0 	bl	80012ee <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	2059      	movs	r0, #89	; 0x59
 8001712:	f7ff fdec 	bl	80012ee <SD_SendCmd>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d11b      	bne.n	8001754 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800171c:	21fc      	movs	r1, #252	; 0xfc
 800171e:	68b8      	ldr	r0, [r7, #8]
 8001720:	f7ff fda2 	bl	8001268 <SD_TxDataBlock>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00a      	beq.n	8001740 <SD_disk_write+0xd0>
				buff += 512;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001730:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3b01      	subs	r3, #1
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ee      	bne.n	800171c <SD_disk_write+0xac>
 800173e:	e000      	b.n	8001742 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001740:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001742:	21fd      	movs	r1, #253	; 0xfd
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fd8f 	bl	8001268 <SD_TxDataBlock>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <SD_disk_write+0xe4>
			{
				count = 1;
 8001750:	2301      	movs	r3, #1
 8001752:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001754:	f7ff fc76 	bl	8001044 <DESELECT>
	SPI_RxByte();
 8001758:	f7ff fcb8 	bl	80010cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000000 	.word	0x20000000
 8001774:	200000b0 	.word	0x200000b0

08001778 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b08b      	sub	sp, #44	; 0x2c
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	603a      	str	r2, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
 8001784:	460b      	mov	r3, r1
 8001786:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SD_disk_ioctl+0x1e>
 8001792:	2304      	movs	r3, #4
 8001794:	e115      	b.n	80019c2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d124      	bne.n	80017ec <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d012      	beq.n	80017d0 <SD_disk_ioctl+0x58>
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	dc1a      	bgt.n	80017e4 <SD_disk_ioctl+0x6c>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <SD_disk_ioctl+0x40>
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d006      	beq.n	80017c4 <SD_disk_ioctl+0x4c>
 80017b6:	e015      	b.n	80017e4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80017b8:	f7ff fd0e 	bl	80011d8 <SD_PowerOff>
			res = RES_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017c2:	e0fc      	b.n	80019be <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80017c4:	f7ff fcc6 	bl	8001154 <SD_PowerOn>
			res = RES_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017ce:	e0f6      	b.n	80019be <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	1c5c      	adds	r4, r3, #1
 80017d4:	f7ff fd0c 	bl	80011f0 <SD_CheckPower>
 80017d8:	4603      	mov	r3, r0
 80017da:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017e2:	e0ec      	b.n	80019be <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80017e4:	2304      	movs	r3, #4
 80017e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017ea:	e0e8      	b.n	80019be <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017ec:	4b77      	ldr	r3, [pc, #476]	; (80019cc <SD_disk_ioctl+0x254>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SD_disk_ioctl+0x86>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0e1      	b.n	80019c2 <SD_disk_ioctl+0x24a>

		SELECT();
 80017fe:	f7ff fc11 	bl	8001024 <SELECT>

		switch (ctrl)
 8001802:	79bb      	ldrb	r3, [r7, #6]
 8001804:	2b0d      	cmp	r3, #13
 8001806:	f200 80cb 	bhi.w	80019a0 <SD_disk_ioctl+0x228>
 800180a:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <SD_disk_ioctl+0x98>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	0800190b 	.word	0x0800190b
 8001814:	08001849 	.word	0x08001849
 8001818:	080018fb 	.word	0x080018fb
 800181c:	080019a1 	.word	0x080019a1
 8001820:	080019a1 	.word	0x080019a1
 8001824:	080019a1 	.word	0x080019a1
 8001828:	080019a1 	.word	0x080019a1
 800182c:	080019a1 	.word	0x080019a1
 8001830:	080019a1 	.word	0x080019a1
 8001834:	080019a1 	.word	0x080019a1
 8001838:	080019a1 	.word	0x080019a1
 800183c:	0800191d 	.word	0x0800191d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001965 	.word	0x08001965
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001848:	2100      	movs	r1, #0
 800184a:	2049      	movs	r0, #73	; 0x49
 800184c:	f7ff fd4f 	bl	80012ee <SD_SendCmd>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 80a8 	bne.w	80019a8 <SD_disk_ioctl+0x230>
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	2110      	movs	r1, #16
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fcd2 	bl	8001208 <SD_RxDataBlock>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 809e 	beq.w	80019a8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800186c:	7b3b      	ldrb	r3, [r7, #12]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10e      	bne.n	8001894 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001876:	7d7b      	ldrb	r3, [r7, #21]
 8001878:	b29a      	uxth	r2, r3
 800187a:	7d3b      	ldrb	r3, [r7, #20]
 800187c:	b29b      	uxth	r3, r3
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	b29b      	uxth	r3, r3
 8001882:	4413      	add	r3, r2
 8001884:	b29b      	uxth	r3, r3
 8001886:	3301      	adds	r3, #1
 8001888:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800188a:	8bfb      	ldrh	r3, [r7, #30]
 800188c:	029a      	lsls	r2, r3, #10
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e02e      	b.n	80018f2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001894:	7c7b      	ldrb	r3, [r7, #17]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	b2da      	uxtb	r2, r3
 800189c:	7dbb      	ldrb	r3, [r7, #22]
 800189e:	09db      	lsrs	r3, r3, #7
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	7d7b      	ldrb	r3, [r7, #21]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f003 0306 	and.w	r3, r3, #6
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3302      	adds	r3, #2
 80018b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80018bc:	7d3b      	ldrb	r3, [r7, #20]
 80018be:	099b      	lsrs	r3, r3, #6
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	7cfb      	ldrb	r3, [r7, #19]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	7cbb      	ldrb	r3, [r7, #18]
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4413      	add	r3, r2
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80018e4:	8bfa      	ldrh	r2, [r7, #30]
 80018e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ea:	3b09      	subs	r3, #9
 80018ec:	409a      	lsls	r2, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80018f8:	e056      	b.n	80019a8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001900:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001908:	e055      	b.n	80019b6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800190a:	f7ff fc09 	bl	8001120 <SD_ReadyWait>
 800190e:	4603      	mov	r3, r0
 8001910:	2bff      	cmp	r3, #255	; 0xff
 8001912:	d14b      	bne.n	80019ac <SD_disk_ioctl+0x234>
 8001914:	2300      	movs	r3, #0
 8001916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800191a:	e047      	b.n	80019ac <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800191c:	2100      	movs	r1, #0
 800191e:	2049      	movs	r0, #73	; 0x49
 8001920:	f7ff fce5 	bl	80012ee <SD_SendCmd>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d142      	bne.n	80019b0 <SD_disk_ioctl+0x238>
 800192a:	2110      	movs	r1, #16
 800192c:	6a38      	ldr	r0, [r7, #32]
 800192e:	f7ff fc6b 	bl	8001208 <SD_RxDataBlock>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d03b      	beq.n	80019b0 <SD_disk_ioctl+0x238>
 8001938:	2300      	movs	r3, #0
 800193a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800193e:	e037      	b.n	80019b0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001940:	2100      	movs	r1, #0
 8001942:	204a      	movs	r0, #74	; 0x4a
 8001944:	f7ff fcd3 	bl	80012ee <SD_SendCmd>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d132      	bne.n	80019b4 <SD_disk_ioctl+0x23c>
 800194e:	2110      	movs	r1, #16
 8001950:	6a38      	ldr	r0, [r7, #32]
 8001952:	f7ff fc59 	bl	8001208 <SD_RxDataBlock>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d02b      	beq.n	80019b4 <SD_disk_ioctl+0x23c>
 800195c:	2300      	movs	r3, #0
 800195e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001962:	e027      	b.n	80019b4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001964:	2100      	movs	r1, #0
 8001966:	207a      	movs	r0, #122	; 0x7a
 8001968:	f7ff fcc1 	bl	80012ee <SD_SendCmd>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d116      	bne.n	80019a0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001972:	2300      	movs	r3, #0
 8001974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001978:	e00b      	b.n	8001992 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800197a:	6a3c      	ldr	r4, [r7, #32]
 800197c:	1c63      	adds	r3, r4, #1
 800197e:	623b      	str	r3, [r7, #32]
 8001980:	f7ff fba4 	bl	80010cc <SPI_RxByte>
 8001984:	4603      	mov	r3, r0
 8001986:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800198c:	3301      	adds	r3, #1
 800198e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001996:	2b03      	cmp	r3, #3
 8001998:	d9ef      	bls.n	800197a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80019a0:	2304      	movs	r3, #4
 80019a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019a6:	e006      	b.n	80019b6 <SD_disk_ioctl+0x23e>
			break;
 80019a8:	bf00      	nop
 80019aa:	e004      	b.n	80019b6 <SD_disk_ioctl+0x23e>
			break;
 80019ac:	bf00      	nop
 80019ae:	e002      	b.n	80019b6 <SD_disk_ioctl+0x23e>
			break;
 80019b0:	bf00      	nop
 80019b2:	e000      	b.n	80019b6 <SD_disk_ioctl+0x23e>
			break;
 80019b4:	bf00      	nop
		}

		DESELECT();
 80019b6:	f7ff fb45 	bl	8001044 <DESELECT>
		SPI_RxByte();
 80019ba:	f7ff fb87 	bl	80010cc <SPI_RxByte>
	}

	return res;
 80019be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	372c      	adds	r7, #44	; 0x2c
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000

080019d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <MX_GPIO_Init+0x138>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <MX_GPIO_Init+0x138>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b44      	ldr	r3, [pc, #272]	; (8001b08 <MX_GPIO_Init+0x138>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a3f      	ldr	r2, [pc, #252]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a38      	ldr	r2, [pc, #224]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <MX_GPIO_Init+0x138>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8001a5c:	482b      	ldr	r0, [pc, #172]	; (8001b0c <MX_GPIO_Init+0x13c>)
 8001a5e:	f003 f8ad 	bl	8004bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a68:	4829      	ldr	r0, [pc, #164]	; (8001b10 <MX_GPIO_Init+0x140>)
 8001a6a:	f003 f8a7 	bl	8004bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WKUP_Pin;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4823      	ldr	r0, [pc, #140]	; (8001b10 <MX_GPIO_Init+0x140>)
 8001a84:	f002 fefe 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	481b      	ldr	r0, [pc, #108]	; (8001b0c <MX_GPIO_Init+0x13c>)
 8001aa0:	f002 fef0 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin;
 8001aa4:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4813      	ldr	r0, [pc, #76]	; (8001b0c <MX_GPIO_Init+0x13c>)
 8001abe:	f002 fee1 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 8001ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MX_GPIO_Init+0x140>)
 8001adc:	f002 fed2 	bl	8004884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	2006      	movs	r0, #6
 8001ae6:	f002 fb26 	bl	8004136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001aea:	2006      	movs	r0, #6
 8001aec:	f002 fb3f 	bl	800416e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2108      	movs	r1, #8
 8001af4:	2028      	movs	r0, #40	; 0x28
 8001af6:	f002 fb1e 	bl	8004136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f002 fb37 	bl	800416e <HAL_NVIC_EnableIRQ>

}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	40020000 	.word	0x40020000

08001b14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b1a:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <MX_I2C1_Init+0x54>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b20:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <MX_I2C1_Init+0x58>)
 8001b22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b52:	f003 f865 	bl	8004c20 <HAL_I2C_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b5c:	f000 fe22 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2000a1b4 	.word	0x2000a1b4
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	000186a0 	.word	0x000186a0

08001b70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_I2C_MspInit+0x84>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d12c      	bne.n	8001bec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001bae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb4:	2312      	movs	r3, #18
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480c      	ldr	r0, [pc, #48]	; (8001bfc <HAL_I2C_MspInit+0x8c>)
 8001bcc:	f002 fe5a 	bl	8004884 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001bda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	; 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40005400 	.word	0x40005400
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020400 	.word	0x40020400

08001c00 <lcd_cmd>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


static void lcd_cmd(uint8_t cmd) //send any command to st7735
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <lcd_cmd+0x40>)
 8001c12:	f002 ffd3 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2140      	movs	r1, #64	; 0x40
 8001c1a:	480a      	ldr	r0, [pc, #40]	; (8001c44 <lcd_cmd+0x44>)
 8001c1c:	f002 ffce 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001c20:	1df9      	adds	r1, r7, #7
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	2201      	movs	r2, #1
 8001c28:	4807      	ldr	r0, [pc, #28]	; (8001c48 <lcd_cmd+0x48>)
 8001c2a:	f003 ffe1 	bl	8005bf0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2140      	movs	r1, #64	; 0x40
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <lcd_cmd+0x44>)
 8001c34:	f002 ffc2 	bl	8004bbc <HAL_GPIO_WritePin>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	2000a7f8 	.word	0x2000a7f8

08001c4c <lcd_data>:

static void lcd_data(uint8_t data)//send data(value for command) to st7735, spi always uses 8bit data
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c5c:	480b      	ldr	r0, [pc, #44]	; (8001c8c <lcd_data+0x40>)
 8001c5e:	f002 ffad 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	480a      	ldr	r0, [pc, #40]	; (8001c90 <lcd_data+0x44>)
 8001c68:	f002 ffa8 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001c6c:	1df9      	adds	r1, r7, #7
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	2201      	movs	r2, #1
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <lcd_data+0x48>)
 8001c76:	f003 ffbb 	bl	8005bf0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2140      	movs	r1, #64	; 0x40
 8001c7e:	4804      	ldr	r0, [pc, #16]	; (8001c90 <lcd_data+0x44>)
 8001c80:	f002 ff9c 	bl	8004bbc <HAL_GPIO_WritePin>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40020400 	.word	0x40020400
 8001c94:	2000a7f8 	.word	0x2000a7f8

08001c98 <lcd_data16>:

static void lcd_data16(uint16_t value)//function that allows to send 16bit data as 2x 8bit
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ffce 	bl	8001c4c <lcd_data>
	lcd_data(value);
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ffc9 	bl	8001c4c <lcd_data>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height) {
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);	//command to set window columns
 8001cd0:	202a      	movs	r0, #42	; 0x2a
 8001cd2:	f7ff ff95 	bl	8001c00 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);	//start col
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ffdc 	bl	8001c98 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);	//end col
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ffd1 	bl	8001c98 <lcd_data16>

	lcd_cmd(ST7735S_RASET);	//command to set window rows
 8001cf6:	202b      	movs	r0, #43	; 0x2b
 8001cf8:	f7ff ff82 	bl	8001c00 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);	//start row
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ffc9 	bl	8001c98 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height - 1);	//end row
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ffbe 	bl	8001c98 <lcd_data16>
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <lcd_send>:

static void lcd_send(uint16_t value) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) { //checks if value is a command (9th bit is 1) or data (9th bit is 0)
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <lcd_send+0x20>
		lcd_cmd(value);
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff5f 	bl	8001c00 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8001d42:	e004      	b.n	8001d4e <lcd_send+0x2a>
		lcd_data(value);
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff7f 	bl	8001c4c <lcd_data>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <lcd_init>:
		0x22, 0x1f, 0x1b, 0x23, 0x37, 0x00, 0x07, 0x02, 0x10, CMD(
				ST7735S_GAMCTRN1), 0x0f, 0x1b, 0x0f, 0x17, 0x33, 0x2c, 0x29,
		0x2e, 0x30, 0x30, 0x39, 0x3f, 0x00, 0x07, 0x03, 0x10, CMD(0xf0), 0x01,
		CMD(0xf6), 0x00, CMD(ST7735S_COLMOD), 0x05, CMD(ST7735S_MADCTL), 0x00, };

void lcd_init(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
	int i;

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d64:	4817      	ldr	r0, [pc, #92]	; (8001dc4 <lcd_init+0x6c>)
 8001d66:	f002 ff29 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001d6a:	2064      	movs	r0, #100	; 0x64
 8001d6c:	f001 fcf2 	bl	8003754 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001d70:	2201      	movs	r2, #1
 8001d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d76:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <lcd_init+0x6c>)
 8001d78:	f002 ff20 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001d7c:	2064      	movs	r0, #100	; 0x64
 8001d7e:	f001 fce9 	bl	8003754 <HAL_Delay>

	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	e009      	b.n	8001d9c <lcd_init+0x44>
		lcd_send(init_table[i]);
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <lcd_init+0x70>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ffc7 	bl	8001d24 <lcd_send>
	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b4b      	cmp	r3, #75	; 0x4b
 8001da0:	d9f2      	bls.n	8001d88 <lcd_init+0x30>
	}

	HAL_Delay(200);
 8001da2:	20c8      	movs	r0, #200	; 0xc8
 8001da4:	f001 fcd6 	bl	8003754 <HAL_Delay>

	lcd_cmd(ST7735S_SLPOUT);
 8001da8:	2011      	movs	r0, #17
 8001daa:	f7ff ff29 	bl	8001c00 <lcd_cmd>
	HAL_Delay(120);
 8001dae:	2078      	movs	r0, #120	; 0x78
 8001db0:	f001 fcd0 	bl	8003754 <HAL_Delay>

	lcd_cmd(ST7735S_DISPON);
 8001db4:	2029      	movs	r0, #41	; 0x29
 8001db6:	f7ff ff23 	bl	8001c00 <lcd_cmd>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	0800c674 	.word	0x0800c674

08001dcc <lcd_put_pixel>:


void lcd_put_pixel(int x, int y, uint16_t color) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	01da      	lsls	r2, r3, #7
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	4905      	ldr	r1, [pc, #20]	; (8001df8 <lcd_put_pixel+0x2c>)
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	200000b4 	.word	0x200000b4

08001dfc <lcd_copy>:


void lcd_copy(void) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001e00:	23a0      	movs	r3, #160	; 0xa0
 8001e02:	2280      	movs	r2, #128	; 0x80
 8001e04:	2100      	movs	r1, #0
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff ff5b 	bl	8001cc2 <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 8001e0c:	202c      	movs	r0, #44	; 0x2c
 8001e0e:	f7ff fef7 	bl	8001c00 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001e12:	2201      	movs	r2, #1
 8001e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e18:	4807      	ldr	r0, [pc, #28]	; (8001e38 <lcd_copy+0x3c>)
 8001e1a:	f002 fecf 	bl	8004bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2140      	movs	r1, #64	; 0x40
 8001e22:	4806      	ldr	r0, [pc, #24]	; (8001e3c <lcd_copy+0x40>)
 8001e24:	f002 feca 	bl	8004bbc <HAL_GPIO_WritePin>
//	HAL_SPI_Transmit(&hspi2, (uint8_t *)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)frame_buffer, sizeof(frame_buffer));
 8001e28:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001e2c:	4904      	ldr	r1, [pc, #16]	; (8001e40 <lcd_copy+0x44>)
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <lcd_copy+0x48>)
 8001e30:	f004 f9bc 	bl	80061ac <HAL_SPI_Transmit_DMA>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	200000b4 	.word	0x200000b4
 8001e44:	2000a7f8 	.word	0x2000a7f8

08001e48 <lcd_transfer_done>:


void lcd_transfer_done(void){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2140      	movs	r1, #64	; 0x40
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <lcd_transfer_done+0x14>)
 8001e52:	f002 feb3 	bl	8004bbc <HAL_GPIO_WritePin>
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40020400 	.word	0x40020400

08001e60 <__io_putchar>:
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int __io_putchar(int ch) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b0a      	cmp	r3, #10
 8001e6c:	d102      	bne.n	8001e74 <__io_putchar+0x14>
		__io_putchar('\r');
 8001e6e:	200d      	movs	r0, #13
 8001e70:	f7ff fff6 	bl	8001e60 <__io_putchar>
	}

	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001e74:	1d39      	adds	r1, r7, #4
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4803      	ldr	r0, [pc, #12]	; (8001e8c <__io_putchar+0x2c>)
 8001e7e:	f004 fe40 	bl	8006b02 <HAL_UART_Transmit>

	return 1;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2000a8fc 	.word	0x2000a8fc

08001e90 <clear_buffer>:
	while (*buf++ != '\0')
		i++;
	return i;
}

void clear_buffer(void) {
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUFFER_SIZE; i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	e007      	b.n	8001eac <clear_buffer+0x1c>
		buffer[i] = '\0';
 8001e9c:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <clear_buffer+0x30>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b7f      	cmp	r3, #127	; 0x7f
 8001eb0:	ddf4      	ble.n	8001e9c <clear_buffer+0xc>
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	2000a470 	.word	0x2000a470

08001ec4 <sd_card_mount>:

void sd_card_mount(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	490a      	ldr	r1, [pc, #40]	; (8001ef4 <sd_card_mount+0x30>)
 8001ecc:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <sd_card_mount+0x34>)
 8001ece:	f006 fe8f 	bl	8008bf0 <f_mount>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <sd_card_mount+0x38>)
 8001ed8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <sd_card_mount+0x38>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <sd_card_mount+0x26>
		printf("ERROR!!! in mounting SD CARD...\n\n");
 8001ee2:	4807      	ldr	r0, [pc, #28]	; (8001f00 <sd_card_mount+0x3c>)
 8001ee4:	f009 fd46 	bl	800b974 <puts>
	else
		printf("SD CARD mounted successfully...\n\n");
}
 8001ee8:	e002      	b.n	8001ef0 <sd_card_mount+0x2c>
		printf("SD CARD mounted successfully...\n\n");
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <sd_card_mount+0x40>)
 8001eec:	f009 fd42 	bl	800b974 <puts>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	0800c134 	.word	0x0800c134
 8001ef8:	2000a238 	.word	0x2000a238
 8001efc:	2000a508 	.word	0x2000a508
 8001f00:	0800c138 	.word	0x0800c138
 8001f04:	0800c15c 	.word	0x0800c15c

08001f08 <sd_card_check_capacity>:
	fresult = f_mount(NULL, "/", 1);
	if (fresult == FR_OK)
		printf("SD CARD UNMOUNTED successfully...\n");
}

void sd_card_check_capacity(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	f_getfree("", &fre_clust, &pfs);
 8001f0c:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <sd_card_check_capacity+0xa8>)
 8001f0e:	4929      	ldr	r1, [pc, #164]	; (8001fb4 <sd_card_check_capacity+0xac>)
 8001f10:	4829      	ldr	r0, [pc, #164]	; (8001fb8 <sd_card_check_capacity+0xb0>)
 8001f12:	f007 fc97 	bl	8009844 <f_getfree>
	total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <sd_card_check_capacity+0xa8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	3b02      	subs	r3, #2
 8001f1e:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <sd_card_check_capacity+0xa8>)
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	8952      	ldrh	r2, [r2, #10]
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe faeb 	bl	8000504 <__aeabi_ui2d>
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <sd_card_check_capacity+0xb4>)
 8001f34:	f7fe fb60 	bl	80005f8 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7fe fd6c 	bl	8000a1c <__aeabi_d2uiz>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4a1e      	ldr	r2, [pc, #120]	; (8001fc0 <sd_card_check_capacity+0xb8>)
 8001f48:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "SD CARD Total Size: \t%lu\n", total);
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <sd_card_check_capacity+0xb8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	491c      	ldr	r1, [pc, #112]	; (8001fc4 <sd_card_check_capacity+0xbc>)
 8001f52:	481d      	ldr	r0, [pc, #116]	; (8001fc8 <sd_card_check_capacity+0xc0>)
 8001f54:	f009 fd5a 	bl	800ba0c <siprintf>
	printf(buffer);
 8001f58:	481b      	ldr	r0, [pc, #108]	; (8001fc8 <sd_card_check_capacity+0xc0>)
 8001f5a:	f009 fc85 	bl	800b868 <iprintf>
	clear_buffer();
 8001f5e:	f7ff ff97 	bl	8001e90 <clear_buffer>
	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <sd_card_check_capacity+0xa8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	895b      	ldrh	r3, [r3, #10]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <sd_card_check_capacity+0xac>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fb03 f302 	mul.w	r3, r3, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fac6 	bl	8000504 <__aeabi_ui2d>
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <sd_card_check_capacity+0xb4>)
 8001f7e:	f7fe fb3b 	bl	80005f8 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fd47 	bl	8000a1c <__aeabi_d2uiz>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <sd_card_check_capacity+0xc4>)
 8001f92:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "SD CARD Free Space: \t%lu\n\n", free_space);
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <sd_card_check_capacity+0xc4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	490d      	ldr	r1, [pc, #52]	; (8001fd0 <sd_card_check_capacity+0xc8>)
 8001f9c:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <sd_card_check_capacity+0xc0>)
 8001f9e:	f009 fd35 	bl	800ba0c <siprintf>
	printf(buffer);
 8001fa2:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <sd_card_check_capacity+0xc0>)
 8001fa4:	f009 fc60 	bl	800b868 <iprintf>
	clear_buffer();
 8001fa8:	f7ff ff72 	bl	8001e90 <clear_buffer>
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	2000a4f4 	.word	0x2000a4f4
 8001fb4:	2000a208 	.word	0x2000a208
 8001fb8:	0800c1a4 	.word	0x0800c1a4
 8001fbc:	3fe00000 	.word	0x3fe00000
 8001fc0:	2000a520 	.word	0x2000a520
 8001fc4:	0800c1a8 	.word	0x0800c1a8
 8001fc8:	2000a470 	.word	0x2000a470
 8001fcc:	2000a46c 	.word	0x2000a46c
 8001fd0:	0800c1c4 	.word	0x0800c1c4

08001fd4 <sd_card_basic_write_to_file>:

void sd_card_basic_write_to_file(char *filename) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001fdc:	2213      	movs	r2, #19
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	480e      	ldr	r0, [pc, #56]	; (800201c <sd_card_basic_write_to_file+0x48>)
 8001fe2:	f006 fe4b 	bl	8008c7c <f_open>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <sd_card_basic_write_to_file+0x4c>)
 8001fec:	701a      	strb	r2, [r3, #0]

	/* Writing text */
	f_puts(
 8001fee:	490b      	ldr	r1, [pc, #44]	; (800201c <sd_card_basic_write_to_file+0x48>)
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <sd_card_basic_write_to_file+0x50>)
 8001ff2:	f007 fd53 	bl	8009a9c <f_puts>
			"DateTime - Channel 0 - Channel 1 - Channel 2 - Channel 3 - Channel 4 - Channel 5 - Channel 6 - Channel 7\n",
			&fil);

	/* Close file */
	fresult = f_close(&fil);
 8001ff6:	4809      	ldr	r0, [pc, #36]	; (800201c <sd_card_basic_write_to_file+0x48>)
 8001ff8:	f007 f9f1 	bl	80093de <f_close>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <sd_card_basic_write_to_file+0x4c>)
 8002002:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <sd_card_basic_write_to_file+0x4c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <sd_card_basic_write_to_file+0x3e>
		printf("READINGS.txt created and the data is written \n");
 800200c:	4806      	ldr	r0, [pc, #24]	; (8002028 <sd_card_basic_write_to_file+0x54>)
 800200e:	f009 fcb1 	bl	800b974 <puts>

}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000a524 	.word	0x2000a524
 8002020:	2000a508 	.word	0x2000a508
 8002024:	0800c1e0 	.word	0x0800c1e0
 8002028:	0800c24c 	.word	0x0800c24c

0800202c <sd_card_update_file>:
	f_close(&fil);

	clear_buffer();
}

void sd_card_update_file(char *filename, uint16_t *measurements) {
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202e:	b08b      	sub	sp, #44	; 0x2c
 8002030:	af08      	add	r7, sp, #32
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
	/* Open the file with write access */
	fresult = f_open(&fil, filename, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8002036:	2203      	movs	r2, #3
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	482a      	ldr	r0, [pc, #168]	; (80020e4 <sd_card_update_file+0xb8>)
 800203c:	f006 fe1e 	bl	8008c7c <f_open>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <sd_card_update_file+0xbc>)
 8002046:	701a      	strb	r2, [r3, #0]

	/* Move to offset to the end of the file */
	fresult = f_lseek(&fil, f_size(&fil));
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <sd_card_update_file+0xb8>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4619      	mov	r1, r3
 800204e:	4825      	ldr	r0, [pc, #148]	; (80020e4 <sd_card_update_file+0xb8>)
 8002050:	f007 f9ef 	bl	8009432 <f_lseek>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <sd_card_update_file+0xbc>)
 800205a:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <sd_card_update_file+0xbc>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <sd_card_update_file+0x3e>
		printf("About to update the filename.txt\n");
 8002064:	4821      	ldr	r0, [pc, #132]	; (80020ec <sd_card_update_file+0xc0>)
 8002066:	f009 fc85 	bl	800b974 <puts>

	/* write the string to the file */
	snprintf(buffer, sizeof(buffer),
			"01/01/2021 - %d - %d - %d - %d - %d - %d - %d - %d\n",
			measurements[0], measurements[1], measurements[2], measurements[3],
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800206e:	469c      	mov	ip, r3
			measurements[0], measurements[1], measurements[2], measurements[3],
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	3302      	adds	r3, #2
 8002074:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 8002076:	461a      	mov	r2, r3
			measurements[0], measurements[1], measurements[2], measurements[3],
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	3304      	adds	r3, #4
 800207c:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800207e:	4619      	mov	r1, r3
			measurements[0], measurements[1], measurements[2], measurements[3],
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	3306      	adds	r3, #6
 8002084:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 8002086:	4618      	mov	r0, r3
			measurements[4], measurements[5], measurements[6], measurements[7]);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	3308      	adds	r3, #8
 800208c:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800208e:	461c      	mov	r4, r3
			measurements[4], measurements[5], measurements[6], measurements[7]);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	330a      	adds	r3, #10
 8002094:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 8002096:	461d      	mov	r5, r3
			measurements[4], measurements[5], measurements[6], measurements[7]);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	330c      	adds	r3, #12
 800209c:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 800209e:	461e      	mov	r6, r3
			measurements[4], measurements[5], measurements[6], measurements[7]);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	330e      	adds	r3, #14
 80020a4:	881b      	ldrh	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer),
 80020a6:	9306      	str	r3, [sp, #24]
 80020a8:	9605      	str	r6, [sp, #20]
 80020aa:	9504      	str	r5, [sp, #16]
 80020ac:	9403      	str	r4, [sp, #12]
 80020ae:	9002      	str	r0, [sp, #8]
 80020b0:	9101      	str	r1, [sp, #4]
 80020b2:	9200      	str	r2, [sp, #0]
 80020b4:	4663      	mov	r3, ip
 80020b6:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <sd_card_update_file+0xc4>)
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	480e      	ldr	r0, [pc, #56]	; (80020f4 <sd_card_update_file+0xc8>)
 80020bc:	f009 fc72 	bl	800b9a4 <sniprintf>
	fresult = f_puts(buffer, &fil);
 80020c0:	4908      	ldr	r1, [pc, #32]	; (80020e4 <sd_card_update_file+0xb8>)
 80020c2:	480c      	ldr	r0, [pc, #48]	; (80020f4 <sd_card_update_file+0xc8>)
 80020c4:	f007 fcea 	bl	8009a9c <f_puts>
 80020c8:	4603      	mov	r3, r0
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <sd_card_update_file+0xbc>)
 80020ce:	701a      	strb	r2, [r3, #0]

	f_close(&fil);
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <sd_card_update_file+0xb8>)
 80020d2:	f007 f984 	bl	80093de <f_close>

	clear_buffer();
 80020d6:	f7ff fedb 	bl	8001e90 <clear_buffer>
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000a524 	.word	0x2000a524
 80020e8:	2000a508 	.word	0x2000a508
 80020ec:	0800c34c 	.word	0x0800c34c
 80020f0:	0800c370 	.word	0x0800c370
 80020f4:	2000a470 	.word	0x2000a470

080020f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80020fe:	f001 fab7 	bl	8003670 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002102:	f000 fab3 	bl	800266c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002106:	f7ff fc63 	bl	80019d0 <MX_GPIO_Init>
	MX_DMA_Init();
 800210a:	f7fe ff6b 	bl	8000fe4 <MX_DMA_Init>
	MX_SPI1_Init();
 800210e:	f000 fea1 	bl	8002e54 <MX_SPI1_Init>
	MX_ADC1_Init();
 8002112:	f7fe fe1f 	bl	8000d54 <MX_ADC1_Init>
	MX_I2C1_Init();
 8002116:	f7ff fcfd 	bl	8001b14 <MX_I2C1_Init>
	MX_RTC_Init();
 800211a:	f000 fe49 	bl	8002db0 <MX_RTC_Init>
	MX_SPI2_Init();
 800211e:	f000 fecf 	bl	8002ec0 <MX_SPI2_Init>
	MX_TIM2_Init();
 8002122:	f001 f951 	bl	80033c8 <MX_TIM2_Init>
	MX_USART6_UART_Init();
 8002126:	f001 fa07 	bl	8003538 <MX_USART6_UART_Init>
	MX_FATFS_Init();
 800212a:	f004 ffb3 	bl	8007094 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
//*******************************************************SD_CARD FUNCTIONS**************************************
	HAL_Delay(500);
 800212e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002132:	f001 fb0f 	bl	8003754 <HAL_Delay>

	/*************** Card capacity details ********************/
	sd_card_mount();
 8002136:	f7ff fec5 	bl	8001ec4 <sd_card_mount>
	/* Check free space */
	sd_card_check_capacity();
 800213a:	f7ff fee5 	bl	8001f08 <sd_card_check_capacity>

//*******************************************************SD_CARD FUNCTIONS**************************************
	printf("Starting..\n");
 800213e:	48a1      	ldr	r0, [pc, #644]	; (80023c4 <main+0x2cc>)
 8002140:	f009 fc18 	bl	800b974 <puts>
	fflush(stdout);
 8002144:	4ba0      	ldr	r3, [pc, #640]	; (80023c8 <main+0x2d0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	4618      	mov	r0, r3
 800214c:	f008 fe38 	bl	800adc0 <fflush>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensor_data,
 8002150:	2208      	movs	r2, #8
 8002152:	499e      	ldr	r1, [pc, #632]	; (80023cc <main+0x2d4>)
 8002154:	489e      	ldr	r0, [pc, #632]	; (80023d0 <main+0x2d8>)
 8002156:	f001 fb65 	bl	8003824 <HAL_ADC_Start_DMA>
			sizeof(sensor_data) / sizeof(int16_t));
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800215a:	213c      	movs	r1, #60	; 0x3c
 800215c:	489d      	ldr	r0, [pc, #628]	; (80023d4 <main+0x2dc>)
 800215e:	f004 fae1 	bl	8006724 <HAL_TIM_Encoder_Start>
	//start LCD
	lcd_init();
 8002162:	f7ff fdf9 	bl	8001d58 <lcd_init>
	//generate filename from RTC
	sd_card_basic_write_to_file("POMIARY.txt");
 8002166:	489c      	ldr	r0, [pc, #624]	; (80023d8 <main+0x2e0>)
 8002168:	f7ff ff34 	bl	8001fd4 <sd_card_basic_write_to_file>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//************************CHANGING SCREENS************************
		switch (activeScreen) {
 800216c:	4b9b      	ldr	r3, [pc, #620]	; (80023dc <main+0x2e4>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b0e      	cmp	r3, #14
 8002174:	f200 8185 	bhi.w	8002482 <main+0x38a>
 8002178:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <main+0x88>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	080021bd 	.word	0x080021bd
 8002184:	0800227d 	.word	0x0800227d
 8002188:	08002483 	.word	0x08002483
 800218c:	08002483 	.word	0x08002483
 8002190:	08002483 	.word	0x08002483
 8002194:	08002483 	.word	0x08002483
 8002198:	08002483 	.word	0x08002483
 800219c:	08002483 	.word	0x08002483
 80021a0:	08002483 	.word	0x08002483
 80021a4:	08002483 	.word	0x08002483
 80021a8:	08002483 	.word	0x08002483
 80021ac:	080022f9 	.word	0x080022f9
 80021b0:	0800235f 	.word	0x0800235f
 80021b4:	08002483 	.word	0x08002483
 80021b8:	08002419 	.word	0x08002419
		case 0:  //ADC data screen
			for (int currentIter = 0; currentIter < oversamplingPrescaler;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	e01f      	b.n	8002202 <main+0x10a>
					++currentIter) {
				for (int currentChan = 0; currentChan < activeChannels;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	e010      	b.n	80021ea <main+0xf2>
						++currentChan) {
					summed_data[currentChan] += sensor_data[currentChan];
 80021c8:	4a85      	ldr	r2, [pc, #532]	; (80023e0 <main+0x2e8>)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80021d0:	497e      	ldr	r1, [pc, #504]	; (80023cc <main+0x2d4>)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80021d8:	4413      	add	r3, r2
 80021da:	b299      	uxth	r1, r3
 80021dc:	4a80      	ldr	r2, [pc, #512]	; (80023e0 <main+0x2e8>)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						++currentChan) {
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
				for (int currentChan = 0; currentChan < activeChannels;
 80021ea:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <main+0x2ec>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4293      	cmp	r3, r2
 80021f4:	dbe8      	blt.n	80021c8 <main+0xd0>
					assert_param(summed_data[currentChan] <= UINT16_MAX);
				}
				HAL_Delay(50);
 80021f6:	2032      	movs	r0, #50	; 0x32
 80021f8:	f001 faac 	bl	8003754 <HAL_Delay>
					++currentIter) {
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3301      	adds	r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
			for (int currentIter = 0; currentIter < oversamplingPrescaler;
 8002202:	4b79      	ldr	r3, [pc, #484]	; (80023e8 <main+0x2f0>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4293      	cmp	r3, r2
 800220c:	dbd9      	blt.n	80021c2 <main+0xca>
			}
			for (int var = 0; var < activeChannels; ++var) {
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	e015      	b.n	8002240 <main+0x148>
				averaged_data[var] = summed_data[var] / oversamplingPrescaler;
 8002214:	4a72      	ldr	r2, [pc, #456]	; (80023e0 <main+0x2e8>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800221c:	461a      	mov	r2, r3
 800221e:	4b72      	ldr	r3, [pc, #456]	; (80023e8 <main+0x2f0>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	fb92 f3f3 	sdiv	r3, r2, r3
 8002226:	b299      	uxth	r1, r3
 8002228:	4a70      	ldr	r2, [pc, #448]	; (80023ec <main+0x2f4>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				summed_data[var] = 0;
 8002230:	4a6b      	ldr	r2, [pc, #428]	; (80023e0 <main+0x2e8>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2100      	movs	r1, #0
 8002236:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int var = 0; var < activeChannels; ++var) {
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3301      	adds	r3, #1
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <main+0x2ec>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4293      	cmp	r3, r2
 800224a:	dbe3      	blt.n	8002214 <main+0x11c>
			}
			show_sensor_data(averaged_data, activeChannels);
 800224c:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <main+0x2ec>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	4866      	ldr	r0, [pc, #408]	; (80023ec <main+0x2f4>)
 8002254:	f000 fcc6 	bl	8002be4 <show_sensor_data>
			sd_card_update_file("POMIARY.txt", averaged_data);
 8002258:	4964      	ldr	r1, [pc, #400]	; (80023ec <main+0x2f4>)
 800225a:	485f      	ldr	r0, [pc, #380]	; (80023d8 <main+0x2e0>)
 800225c:	f7ff fee6 	bl	800202c <sd_card_update_file>
			HAL_Delay(1000);
 8002260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002264:	f001 fa76 	bl	8003754 <HAL_Delay>
			printf("Sensor data case executed.\n");
 8002268:	4861      	ldr	r0, [pc, #388]	; (80023f0 <main+0x2f8>)
 800226a:	f009 fb83 	bl	800b974 <puts>
			fflush(stdout);
 800226e:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <main+0x2d0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4618      	mov	r0, r3
 8002276:	f008 fda3 	bl	800adc0 <fflush>
			break;
 800227a:	e102      	b.n	8002482 <main+0x38a>
		case 1:  //main menu screen
			currentItem = (__HAL_TIM_GET_COUNTER(&htim2) >> 1) % menuMaxIndex;
 800227c:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <main+0x2dc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	085b      	lsrs	r3, r3, #1
 8002284:	4a5b      	ldr	r2, [pc, #364]	; (80023f4 <main+0x2fc>)
 8002286:	8812      	ldrh	r2, [r2, #0]
 8002288:	b212      	sxth	r2, r2
 800228a:	fbb3 f1f2 	udiv	r1, r3, r2
 800228e:	fb02 f201 	mul.w	r2, r2, r1
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b58      	ldr	r3, [pc, #352]	; (80023f8 <main+0x300>)
 8002298:	701a      	strb	r2, [r3, #0]
			assert(currentItem <= menuMaxIndex - 1);
 800229a:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <main+0x2fc>)
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b21b      	sxth	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b55      	ldr	r3, [pc, #340]	; (80023f8 <main+0x300>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dc06      	bgt.n	80022b8 <main+0x1c0>
 80022aa:	4b54      	ldr	r3, [pc, #336]	; (80023fc <main+0x304>)
 80022ac:	4a54      	ldr	r2, [pc, #336]	; (8002400 <main+0x308>)
 80022ae:	f240 115f 	movw	r1, #351	; 0x15f
 80022b2:	4854      	ldr	r0, [pc, #336]	; (8002404 <main+0x30c>)
 80022b4:	f008 fc9e 	bl	800abf4 <__assert_func>
			show_menu_window();
 80022b8:	f000 fa7a 	bl	80027b0 <show_menu_window>
			deselect_item(previousItem);
 80022bc:	4b52      	ldr	r3, [pc, #328]	; (8002408 <main+0x310>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fd4c 	bl	8002d5e <deselect_item>
			select_item(currentItem);
 80022c6:	4b4c      	ldr	r3, [pc, #304]	; (80023f8 <main+0x300>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fd1e 	bl	8002d0c <select_item>
			if (previousItem != currentItem) {
 80022d0:	4b4d      	ldr	r3, [pc, #308]	; (8002408 <main+0x310>)
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	4b48      	ldr	r3, [pc, #288]	; (80023f8 <main+0x300>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d003      	beq.n	80022e4 <main+0x1ec>
				previousItem = currentItem;
 80022dc:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <main+0x300>)
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	4b49      	ldr	r3, [pc, #292]	; (8002408 <main+0x310>)
 80022e2:	701a      	strb	r2, [r3, #0]
			}
			printf("Main menu case executed..\n");
 80022e4:	4849      	ldr	r0, [pc, #292]	; (800240c <main+0x314>)
 80022e6:	f009 fb45 	bl	800b974 <puts>
			fflush(stdout);
 80022ea:	4b37      	ldr	r3, [pc, #220]	; (80023c8 <main+0x2d0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f008 fd65 	bl	800adc0 <fflush>
			break;
 80022f6:	e0c4      	b.n	8002482 <main+0x38a>
		case 11:  //active channels selection screen
			activeChannels = __HAL_TIM_GET_COUNTER(&htim2) >> 1;
 80022f8:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <main+0x2dc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <main+0x2ec>)
 8002304:	701a      	strb	r2, [r3, #0]
			if (activeChannels < 1) {
 8002306:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <main+0x2ec>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <main+0x224>
				activeChannels = 1;
 800230e:	4b35      	ldr	r3, [pc, #212]	; (80023e4 <main+0x2ec>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 2);
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <main+0x2dc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2202      	movs	r2, #2
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (activeChannels > 8) {
 800231c:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <main+0x2ec>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d906      	bls.n	8002332 <main+0x23a>
				activeChannels = 8;
 8002324:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <main+0x2ec>)
 8002326:	2208      	movs	r2, #8
 8002328:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 16);
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <main+0x2dc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2210      	movs	r2, #16
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
			}
			update_channels_value(activeChannels, rgb565(200, 200, 200));
 8002332:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <main+0x2ec>)
 8002334:	781c      	ldrb	r4, [r3, #0]
 8002336:	22c8      	movs	r2, #200	; 0xc8
 8002338:	21c8      	movs	r1, #200	; 0xc8
 800233a:	20c8      	movs	r0, #200	; 0xc8
 800233c:	f008 fc28 	bl	800ab90 <rgb565>
 8002340:	4603      	mov	r3, r0
 8002342:	4619      	mov	r1, r3
 8002344:	4620      	mov	r0, r4
 8002346:	f000 fb5d 	bl	8002a04 <update_channels_value>
			printf("Active channels case executed..\n");
 800234a:	4831      	ldr	r0, [pc, #196]	; (8002410 <main+0x318>)
 800234c:	f009 fb12 	bl	800b974 <puts>
			fflush(stdout);
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <main+0x2d0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4618      	mov	r0, r3
 8002358:	f008 fd32 	bl	800adc0 <fflush>
			break;
 800235c:	e091      	b.n	8002482 <main+0x38a>
		case 12:  //oversampling selection screen
			oversamplingPrescaler = __HAL_TIM_GET_COUNTER(&htim2) >> 1;
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <main+0x2dc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <main+0x2f0>)
 800236a:	701a      	strb	r2, [r3, #0]
			if (oversamplingPrescaler < 1) {
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <main+0x2f0>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <main+0x28a>
				oversamplingPrescaler = 1;
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <main+0x2f0>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 2);
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <main+0x2dc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2202      	movs	r2, #2
 8002380:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (oversamplingPrescaler > 15) {
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <main+0x2f0>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	d906      	bls.n	8002398 <main+0x2a0>
				oversamplingPrescaler = 15;
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <main+0x2f0>)
 800238c:	220f      	movs	r2, #15
 800238e:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 30); //encoder counts up to 19 so 19*2 is max available value rn
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <main+0x2dc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	221e      	movs	r2, #30
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
			}
			update_oversampling_prescaler(oversamplingPrescaler,
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <main+0x2f0>)
 800239a:	781c      	ldrb	r4, [r3, #0]
 800239c:	22dc      	movs	r2, #220	; 0xdc
 800239e:	21dc      	movs	r1, #220	; 0xdc
 80023a0:	20dc      	movs	r0, #220	; 0xdc
 80023a2:	f008 fbf5 	bl	800ab90 <rgb565>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4619      	mov	r1, r3
 80023aa:	4620      	mov	r0, r4
 80023ac:	f000 fb90 	bl	8002ad0 <update_oversampling_prescaler>
					rgb565(220, 220, 220));
			printf("Oversampling case executed...\n");
 80023b0:	4818      	ldr	r0, [pc, #96]	; (8002414 <main+0x31c>)
 80023b2:	f009 fadf 	bl	800b974 <puts>
			fflush(stdout);
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <main+0x2d0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4618      	mov	r0, r3
 80023be:	f008 fcff 	bl	800adc0 <fflush>
			break;
 80023c2:	e05e      	b.n	8002482 <main+0x38a>
 80023c4:	0800c3f8 	.word	0x0800c3f8
 80023c8:	20000030 	.word	0x20000030
 80023cc:	2000a20c 	.word	0x2000a20c
 80023d0:	2000a10c 	.word	0x2000a10c
 80023d4:	2000a8b4 	.word	0x2000a8b4
 80023d8:	0800c404 	.word	0x0800c404
 80023dc:	2000a0b4 	.word	0x2000a0b4
 80023e0:	2000a4f8 	.word	0x2000a4f8
 80023e4:	20000004 	.word	0x20000004
 80023e8:	20000005 	.word	0x20000005
 80023ec:	2000a50c 	.word	0x2000a50c
 80023f0:	0800c410 	.word	0x0800c410
 80023f4:	20000002 	.word	0x20000002
 80023f8:	2000a51c 	.word	0x2000a51c
 80023fc:	0800c42c 	.word	0x0800c42c
 8002400:	0800f6c4 	.word	0x0800f6c4
 8002404:	0800c44c 	.word	0x0800c44c
 8002408:	2000a21c 	.word	0x2000a21c
 800240c:	0800c460 	.word	0x0800c460
 8002410:	0800c47c 	.word	0x0800c47c
 8002414:	0800c49c 	.word	0x0800c49c
		case 14:
			currentItem = (__HAL_TIM_GET_COUNTER(&htim2) >> 1) % menuMaxIndex;
 8002418:	4b83      	ldr	r3, [pc, #524]	; (8002628 <main+0x530>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	085b      	lsrs	r3, r3, #1
 8002420:	4a82      	ldr	r2, [pc, #520]	; (800262c <main+0x534>)
 8002422:	8812      	ldrh	r2, [r2, #0]
 8002424:	b212      	sxth	r2, r2
 8002426:	fbb3 f1f2 	udiv	r1, r3, r2
 800242a:	fb02 f201 	mul.w	r2, r2, r1
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b7f      	ldr	r3, [pc, #508]	; (8002630 <main+0x538>)
 8002434:	701a      	strb	r2, [r3, #0]
			assert(currentItem <= menuMaxIndex - 1);
 8002436:	4b7d      	ldr	r3, [pc, #500]	; (800262c <main+0x534>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b21b      	sxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	4b7c      	ldr	r3, [pc, #496]	; (8002630 <main+0x538>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	dc06      	bgt.n	8002454 <main+0x35c>
 8002446:	4b7b      	ldr	r3, [pc, #492]	; (8002634 <main+0x53c>)
 8002448:	4a7b      	ldr	r2, [pc, #492]	; (8002638 <main+0x540>)
 800244a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800244e:	487b      	ldr	r0, [pc, #492]	; (800263c <main+0x544>)
 8002450:	f008 fbd0 	bl	800abf4 <__assert_func>
			show_misc_menu();
 8002454:	f000 fa52 	bl	80028fc <show_misc_menu>
			deselect_item(previousItem);
 8002458:	4b79      	ldr	r3, [pc, #484]	; (8002640 <main+0x548>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fc7e 	bl	8002d5e <deselect_item>
			select_item(currentItem);
 8002462:	4b73      	ldr	r3, [pc, #460]	; (8002630 <main+0x538>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fc50 	bl	8002d0c <select_item>
			if (previousItem != currentItem) {
 800246c:	4b74      	ldr	r3, [pc, #464]	; (8002640 <main+0x548>)
 800246e:	781a      	ldrb	r2, [r3, #0]
 8002470:	4b6f      	ldr	r3, [pc, #444]	; (8002630 <main+0x538>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d003      	beq.n	8002480 <main+0x388>
				previousItem = currentItem;
 8002478:	4b6d      	ldr	r3, [pc, #436]	; (8002630 <main+0x538>)
 800247a:	781a      	ldrb	r2, [r3, #0]
 800247c:	4b70      	ldr	r3, [pc, #448]	; (8002640 <main+0x548>)
 800247e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002480:	bf00      	nop
		}
		//************************CHANGING SCREENS************************
		if (encoderBtnFlag) {
 8002482:	4b70      	ldr	r3, [pc, #448]	; (8002644 <main+0x54c>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 809f 	beq.w	80025cc <main+0x4d4>
			encoderBtnFlag = 0;
 800248e:	4b6d      	ldr	r3, [pc, #436]	; (8002644 <main+0x54c>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
			switch (activeScreen) {
 8002494:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <main+0x550>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b0e      	cmp	r3, #14
 800249c:	f200 8098 	bhi.w	80025d0 <main+0x4d8>
 80024a0:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <main+0x3b0>)
 80024a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a6:	bf00      	nop
 80024a8:	080024e5 	.word	0x080024e5
 80024ac:	080024fb 	.word	0x080024fb
 80024b0:	080025d1 	.word	0x080025d1
 80024b4:	080025d1 	.word	0x080025d1
 80024b8:	080025d1 	.word	0x080025d1
 80024bc:	080025d1 	.word	0x080025d1
 80024c0:	080025d1 	.word	0x080025d1
 80024c4:	080025d1 	.word	0x080025d1
 80024c8:	080025d1 	.word	0x080025d1
 80024cc:	080025d1 	.word	0x080025d1
 80024d0:	080025d1 	.word	0x080025d1
 80024d4:	0800256b 	.word	0x0800256b
 80024d8:	0800257b 	.word	0x0800257b
 80024dc:	080025d1 	.word	0x080025d1
 80024e0:	0800258b 	.word	0x0800258b
			case 0: //sensor to menu
				__HAL_TIM_SET_COUNTER(&htim2, 0);
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <main+0x530>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2200      	movs	r2, #0
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 80024ec:	4b56      	ldr	r3, [pc, #344]	; (8002648 <main+0x550>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
				menuMaxIndex = 5;
 80024f2:	4b4e      	ldr	r3, [pc, #312]	; (800262c <main+0x534>)
 80024f4:	2205      	movs	r2, #5
 80024f6:	801a      	strh	r2, [r3, #0]
				break;
 80024f8:	e06b      	b.n	80025d2 <main+0x4da>
			case 1:	//menu to ...
				//menu to sensor
				if (currentItem == (menuMaxIndex - 1)) {
 80024fa:	4b4d      	ldr	r3, [pc, #308]	; (8002630 <main+0x538>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	4b4a      	ldr	r3, [pc, #296]	; (800262c <main+0x534>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b21b      	sxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	429a      	cmp	r2, r3
 800250a:	d103      	bne.n	8002514 <main+0x41c>
					activeScreen = 0;
 800250c:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <main+0x550>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
					break;
 8002512:	e05e      	b.n	80025d2 <main+0x4da>
				}
				//menu to activechannels
				else if (currentItem == 0) {
 8002514:	4b46      	ldr	r3, [pc, #280]	; (8002630 <main+0x538>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <main+0x438>
					__HAL_TIM_GET_COUNTER(&htim2) = activeChannels * 2; //you can't assign value to shifted value, hence no >> is used, silly me tried..
 800251c:	4b4b      	ldr	r3, [pc, #300]	; (800264c <main+0x554>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	005a      	lsls	r2, r3, #1
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <main+0x530>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 11;
 8002528:	4b47      	ldr	r3, [pc, #284]	; (8002648 <main+0x550>)
 800252a:	220b      	movs	r2, #11
 800252c:	701a      	strb	r2, [r3, #0]
					break;
 800252e:	e050      	b.n	80025d2 <main+0x4da>
				} else if (currentItem == 1) {
 8002530:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <main+0x538>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d109      	bne.n	800254c <main+0x454>
					__HAL_TIM_GET_COUNTER(&htim2) = oversamplingPrescaler * 2; //you can't assign value to shifted value, hence no >> is used, silly me tried..
 8002538:	4b45      	ldr	r3, [pc, #276]	; (8002650 <main+0x558>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	005a      	lsls	r2, r3, #1
 800253e:	4b3a      	ldr	r3, [pc, #232]	; (8002628 <main+0x530>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 12;
 8002544:	4b40      	ldr	r3, [pc, #256]	; (8002648 <main+0x550>)
 8002546:	220c      	movs	r2, #12
 8002548:	701a      	strb	r2, [r3, #0]
					break;
 800254a:	e042      	b.n	80025d2 <main+0x4da>
				} else if (currentItem == 3) {
 800254c:	4b38      	ldr	r3, [pc, #224]	; (8002630 <main+0x538>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d10a      	bne.n	800256a <main+0x472>
					activeScreen = 14;
 8002554:	4b3c      	ldr	r3, [pc, #240]	; (8002648 <main+0x550>)
 8002556:	220e      	movs	r2, #14
 8002558:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_GET_COUNTER(&htim2) = 0;
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <main+0x530>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	625a      	str	r2, [r3, #36]	; 0x24
					menuMaxIndex = 4;
 8002562:	4b32      	ldr	r3, [pc, #200]	; (800262c <main+0x534>)
 8002564:	2204      	movs	r2, #4
 8002566:	801a      	strh	r2, [r3, #0]
					break;
 8002568:	e033      	b.n	80025d2 <main+0x4da>
				}
			case 11: //channels to main menu
				__HAL_TIM_GET_COUNTER(&htim2) = 0;
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <main+0x530>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 8002572:	4b35      	ldr	r3, [pc, #212]	; (8002648 <main+0x550>)
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
				break;
 8002578:	e02b      	b.n	80025d2 <main+0x4da>
			case 12: //sampling to main menu
				__HAL_TIM_GET_COUNTER(&htim2) = 0;
 800257a:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <main+0x530>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <main+0x550>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
				break;
 8002588:	e023      	b.n	80025d2 <main+0x4da>
			case 14: //misc menu to main menu
				if (currentItem == (menuMaxIndex - 1)) {
 800258a:	4b29      	ldr	r3, [pc, #164]	; (8002630 <main+0x538>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	4b26      	ldr	r3, [pc, #152]	; (800262c <main+0x534>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b21b      	sxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	429a      	cmp	r2, r3
 800259a:	d10d      	bne.n	80025b8 <main+0x4c0>
					activeScreen = 1;
 800259c:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <main+0x550>)
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
					menuMaxIndex = 5;
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <main+0x534>)
 80025a4:	2205      	movs	r2, #5
 80025a6:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_GET_COUNTER(&htim2) = 0;
 80025a8:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <main+0x530>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 1;
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <main+0x550>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
					break;
 80025b6:	e00c      	b.n	80025d2 <main+0x4da>
			default:
					break;
				}
				printf("Button interrupt executed....\n");
 80025b8:	4826      	ldr	r0, [pc, #152]	; (8002654 <main+0x55c>)
 80025ba:	f009 f9db 	bl	800b974 <puts>
				fflush(stdout);
 80025be:	4b26      	ldr	r3, [pc, #152]	; (8002658 <main+0x560>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f008 fbfb 	bl	800adc0 <fflush>
 80025ca:	e002      	b.n	80025d2 <main+0x4da>
			}
		}
 80025cc:	bf00      	nop
 80025ce:	e000      	b.n	80025d2 <main+0x4da>
					break;
 80025d0:	bf00      	nop

		snprintf(debug_text, 25, "MENU:%u | active:%d", currentItem,
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <main+0x538>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <main+0x550>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	4a1e      	ldr	r2, [pc, #120]	; (800265c <main+0x564>)
 80025e4:	2119      	movs	r1, #25
 80025e6:	481e      	ldr	r0, [pc, #120]	; (8002660 <main+0x568>)
 80025e8:	f009 f9dc 	bl	800b9a4 <sniprintf>
				activeScreen);
		hagl_put_text(debug_text, 10, 145, rgb565(245, 245, 255), font6x9);
 80025ec:	22ff      	movs	r2, #255	; 0xff
 80025ee:	21f5      	movs	r1, #245	; 0xf5
 80025f0:	20f5      	movs	r0, #245	; 0xf5
 80025f2:	f008 facd 	bl	800ab90 <rgb565>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <main+0x56c>)
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	2291      	movs	r2, #145	; 0x91
 8002602:	210a      	movs	r1, #10
 8002604:	4816      	ldr	r0, [pc, #88]	; (8002660 <main+0x568>)
 8002606:	f008 f879 	bl	800a6fc <hagl_put_text>
		lcd_copy();
 800260a:	f7ff fbf7 	bl	8001dfc <lcd_copy>
		printf("Main while loop executed.............................\n");
 800260e:	4816      	ldr	r0, [pc, #88]	; (8002668 <main+0x570>)
 8002610:	f009 f9b0 	bl	800b974 <puts>
		fflush(stdout);
 8002614:	4b10      	ldr	r3, [pc, #64]	; (8002658 <main+0x560>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	4618      	mov	r0, r3
 800261c:	f008 fbd0 	bl	800adc0 <fflush>
		HAL_Delay(100);
 8002620:	2064      	movs	r0, #100	; 0x64
 8002622:	f001 f897 	bl	8003754 <HAL_Delay>
		switch (activeScreen) {
 8002626:	e5a1      	b.n	800216c <main+0x74>
 8002628:	2000a8b4 	.word	0x2000a8b4
 800262c:	20000002 	.word	0x20000002
 8002630:	2000a51c 	.word	0x2000a51c
 8002634:	0800c42c 	.word	0x0800c42c
 8002638:	0800f6c4 	.word	0x0800f6c4
 800263c:	0800c44c 	.word	0x0800c44c
 8002640:	2000a21c 	.word	0x2000a21c
 8002644:	2000a21d 	.word	0x2000a21d
 8002648:	2000a0b4 	.word	0x2000a0b4
 800264c:	20000004 	.word	0x20000004
 8002650:	20000005 	.word	0x20000005
 8002654:	0800c4bc 	.word	0x0800c4bc
 8002658:	20000030 	.word	0x20000030
 800265c:	0800c4dc 	.word	0x0800c4dc
 8002660:	2000a754 	.word	0x2000a754
 8002664:	0800c70c 	.word	0x0800c70c
 8002668:	0800c4f0 	.word	0x0800c4f0

0800266c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b094      	sub	sp, #80	; 0x50
 8002670:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002672:	f107 0320 	add.w	r3, r7, #32
 8002676:	2230      	movs	r2, #48	; 0x30
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f008 fd54 	bl	800b128 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	4b29      	ldr	r3, [pc, #164]	; (800273c <SystemClock_Config+0xd0>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a28      	ldr	r2, [pc, #160]	; (800273c <SystemClock_Config+0xd0>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
 80026a0:	4b26      	ldr	r3, [pc, #152]	; (800273c <SystemClock_Config+0xd0>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80026ac:	2300      	movs	r3, #0
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	4b23      	ldr	r3, [pc, #140]	; (8002740 <SystemClock_Config+0xd4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026b8:	4a21      	ldr	r2, [pc, #132]	; (8002740 <SystemClock_Config+0xd4>)
 80026ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <SystemClock_Config+0xd4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80026cc:	230a      	movs	r3, #10
 80026ce:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026d0:	2301      	movs	r3, #1
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026d4:	2310      	movs	r3, #16
 80026d6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80026d8:	2301      	movs	r3, #1
 80026da:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026dc:	2302      	movs	r3, #2
 80026de:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026e0:	2300      	movs	r3, #0
 80026e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80026e4:	2308      	movs	r3, #8
 80026e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 80026e8:	2354      	movs	r3, #84	; 0x54
 80026ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026ec:	2302      	movs	r3, #2
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80026f0:	2304      	movs	r3, #4
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80026f4:	f107 0320 	add.w	r3, r7, #32
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 fbd5 	bl	8004ea8 <HAL_RCC_OscConfig>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <SystemClock_Config+0x9c>
		Error_Handler();
 8002704:	f000 f84e 	bl	80027a4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002708:	230f      	movs	r3, #15
 800270a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800270c:	2302      	movs	r3, #2
 800270e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002718:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	2102      	movs	r1, #2
 8002724:	4618      	mov	r0, r3
 8002726:	f002 fe37 	bl	8005398 <HAL_RCC_ClockConfig>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <SystemClock_Config+0xc8>
		Error_Handler();
 8002730:	f000 f838 	bl	80027a4 <Error_Handler>
	}
}
 8002734:	bf00      	nop
 8002736:	3750      	adds	r7, #80	; 0x50
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	40007000 	.word	0x40007000

08002744 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a04      	ldr	r2, [pc, #16]	; (8002760 <HAL_SPI_TxCpltCallback+0x1c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d101      	bne.n	8002758 <HAL_SPI_TxCpltCallback+0x14>
		lcd_transfer_done();
 8002754:	f7ff fb78 	bl	8001e48 <lcd_transfer_done>
	}
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	2000a7f8 	.word	0x2000a7f8

08002764 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENC_BTN_Pin) {
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002774:	d10e      	bne.n	8002794 <HAL_GPIO_EXTI_Callback+0x30>
		HAL_Delay(50); //basic debounce
 8002776:	2032      	movs	r0, #50	; 0x32
 8002778:	f000 ffec 	bl	8003754 <HAL_Delay>
		while (HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)
 800277c:	bf00      	nop
 800277e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002782:	4806      	ldr	r0, [pc, #24]	; (800279c <HAL_GPIO_EXTI_Callback+0x38>)
 8002784:	f002 fa02 	bl	8004b8c <HAL_GPIO_ReadPin>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f7      	beq.n	800277e <HAL_GPIO_EXTI_Callback+0x1a>
				== GPIO_PIN_RESET) {

		}
		encoderBtnFlag = 1;
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
	}
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40020400 	.word	0x40020400
 80027a0:	2000a21d 	.word	0x2000a21d

080027a4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a8:	b672      	cpsid	i
}
 80027aa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027ac:	e7fe      	b.n	80027ac <Error_Handler+0x8>
	...

080027b0 <show_menu_window>:
char text_to_parse[16];
static uint16_t ch_buffer[4];
static uint16_t os_buffer[4];
int status = 0;

void show_menu_window() {
 80027b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af02      	add	r7, sp, #8
	hagl_clear_screen();
 80027b8:	f008 f826 	bl	800a808 <hagl_clear_screen>

	for (int i = 0; i < 5; ++i) {
 80027bc:	2300      	movs	r3, #0
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	e028      	b.n	8002814 <show_menu_window+0x64>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	b21d      	sxth	r5, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	b21e      	sxth	r6, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	fa0f f883 	sxth.w	r8, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	fa0f f983 	sxth.w	r9, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f1c3 0305 	rsb	r3, r3, #5
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	b21c      	sxth	r4, r3
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	20ff      	movs	r0, #255	; 0xff
 80027f8:	f008 f9ca 	bl	800ab90 <rgb565>
 80027fc:	4603      	mov	r3, r0
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	9400      	str	r4, [sp, #0]
 8002802:	464b      	mov	r3, r9
 8002804:	4642      	mov	r2, r8
 8002806:	4631      	mov	r1, r6
 8002808:	4628      	mov	r0, r5
 800280a:	f008 f827 	bl	800a85c <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3301      	adds	r3, #1
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b04      	cmp	r3, #4
 8002818:	ddd3      	ble.n	80027c2 <show_menu_window+0x12>
				rgb565(255, 0, 0));
	}
	hagl_put_text("USTAWIENIA", 10, 10, rgb565(255, 0, 0), font6x9);
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	20ff      	movs	r0, #255	; 0xff
 8002820:	f008 f9b6 	bl	800ab90 <rgb565>
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <show_menu_window+0x12c>)
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	220a      	movs	r2, #10
 8002830:	210a      	movs	r1, #10
 8002832:	482b      	ldr	r0, [pc, #172]	; (80028e0 <show_menu_window+0x130>)
 8002834:	f007 ff62 	bl	800a6fc <hagl_put_text>
	hagl_put_text("Ilosc kanalow:", 10, 30, rgb565(0, 102, 204), font5x7);
 8002838:	22cc      	movs	r2, #204	; 0xcc
 800283a:	2166      	movs	r1, #102	; 0x66
 800283c:	2000      	movs	r0, #0
 800283e:	f008 f9a7 	bl	800ab90 <rgb565>
 8002842:	4603      	mov	r3, r0
 8002844:	461a      	mov	r2, r3
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <show_menu_window+0x134>)
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	4613      	mov	r3, r2
 800284c:	221e      	movs	r2, #30
 800284e:	210a      	movs	r1, #10
 8002850:	4825      	ldr	r0, [pc, #148]	; (80028e8 <show_menu_window+0x138>)
 8002852:	f007 ff53 	bl	800a6fc <hagl_put_text>
	hagl_put_text("Oversampling:", 10, 50, rgb565(0, 102, 204), font5x7);
 8002856:	22cc      	movs	r2, #204	; 0xcc
 8002858:	2166      	movs	r1, #102	; 0x66
 800285a:	2000      	movs	r0, #0
 800285c:	f008 f998 	bl	800ab90 <rgb565>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <show_menu_window+0x134>)
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	4613      	mov	r3, r2
 800286a:	2232      	movs	r2, #50	; 0x32
 800286c:	210a      	movs	r1, #10
 800286e:	481f      	ldr	r0, [pc, #124]	; (80028ec <show_menu_window+0x13c>)
 8002870:	f007 ff44 	bl	800a6fc <hagl_put_text>
	hagl_put_text("Kalibracja", 10, 70, rgb565(0, 102, 204), font5x7);
 8002874:	22cc      	movs	r2, #204	; 0xcc
 8002876:	2166      	movs	r1, #102	; 0x66
 8002878:	2000      	movs	r0, #0
 800287a:	f008 f989 	bl	800ab90 <rgb565>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <show_menu_window+0x134>)
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	2246      	movs	r2, #70	; 0x46
 800288a:	210a      	movs	r1, #10
 800288c:	4818      	ldr	r0, [pc, #96]	; (80028f0 <show_menu_window+0x140>)
 800288e:	f007 ff35 	bl	800a6fc <hagl_put_text>
	hagl_put_text("Inne", 10, 90, rgb565(0, 102, 204), font5x7);
 8002892:	22cc      	movs	r2, #204	; 0xcc
 8002894:	2166      	movs	r1, #102	; 0x66
 8002896:	2000      	movs	r0, #0
 8002898:	f008 f97a 	bl	800ab90 <rgb565>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <show_menu_window+0x134>)
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	225a      	movs	r2, #90	; 0x5a
 80028a8:	210a      	movs	r1, #10
 80028aa:	4812      	ldr	r0, [pc, #72]	; (80028f4 <show_menu_window+0x144>)
 80028ac:	f007 ff26 	bl	800a6fc <hagl_put_text>
	hagl_put_text("Powrot", 10, 110, rgb565(102, 255, 102), font5x7);
 80028b0:	2266      	movs	r2, #102	; 0x66
 80028b2:	21ff      	movs	r1, #255	; 0xff
 80028b4:	2066      	movs	r0, #102	; 0x66
 80028b6:	f008 f96b 	bl	800ab90 <rgb565>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461a      	mov	r2, r3
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <show_menu_window+0x134>)
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	226e      	movs	r2, #110	; 0x6e
 80028c6:	210a      	movs	r1, #10
 80028c8:	480b      	ldr	r0, [pc, #44]	; (80028f8 <show_menu_window+0x148>)
 80028ca:	f007 ff17 	bl	800a6fc <hagl_put_text>
	lcd_copy();
 80028ce:	f7ff fa95 	bl	8001dfc <lcd_copy>
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028dc:	0800f6cc 	.word	0x0800f6cc
 80028e0:	0800c528 	.word	0x0800c528
 80028e4:	08012684 	.word	0x08012684
 80028e8:	0800c534 	.word	0x0800c534
 80028ec:	0800c544 	.word	0x0800c544
 80028f0:	0800c554 	.word	0x0800c554
 80028f4:	0800c560 	.word	0x0800c560
 80028f8:	0800c568 	.word	0x0800c568

080028fc <show_misc_menu>:

void show_misc_menu() {
 80028fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002900:	b085      	sub	sp, #20
 8002902:	af02      	add	r7, sp, #8
	hagl_clear_screen();
 8002904:	f007 ff80 	bl	800a808 <hagl_clear_screen>

	for (int i = 0; i < 5; ++i) {
 8002908:	2300      	movs	r3, #0
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	e028      	b.n	8002960 <show_misc_menu+0x64>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	b21d      	sxth	r5, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	b21e      	sxth	r6, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800291e:	b29b      	uxth	r3, r3
 8002920:	fa0f f883 	sxth.w	r8, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	b29b      	uxth	r3, r3
 8002928:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800292c:	b29b      	uxth	r3, r3
 800292e:	fa0f f983 	sxth.w	r9, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	b29b      	uxth	r3, r3
 8002936:	f1c3 0305 	rsb	r3, r3, #5
 800293a:	b29b      	uxth	r3, r3
 800293c:	b21c      	sxth	r4, r3
 800293e:	220a      	movs	r2, #10
 8002940:	21c3      	movs	r1, #195	; 0xc3
 8002942:	2060      	movs	r0, #96	; 0x60
 8002944:	f008 f924 	bl	800ab90 <rgb565>
 8002948:	4603      	mov	r3, r0
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	9400      	str	r4, [sp, #0]
 800294e:	464b      	mov	r3, r9
 8002950:	4642      	mov	r2, r8
 8002952:	4631      	mov	r1, r6
 8002954:	4628      	mov	r0, r5
 8002956:	f007 ff81 	bl	800a85c <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3301      	adds	r3, #1
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b04      	cmp	r3, #4
 8002964:	ddd3      	ble.n	800290e <show_misc_menu+0x12>
				rgb565(96, 195, 10));
	}
	hagl_put_text("INNE", 10, 10, rgb565(255, 0, 0), font6x9);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	20ff      	movs	r0, #255	; 0xff
 800296c:	f008 f910 	bl	800ab90 <rgb565>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <show_misc_menu+0xf0>)
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	220a      	movs	r2, #10
 800297c:	210a      	movs	r1, #10
 800297e:	481c      	ldr	r0, [pc, #112]	; (80029f0 <show_misc_menu+0xf4>)
 8002980:	f007 febc 	bl	800a6fc <hagl_put_text>
	hagl_put_text("Data/Godzina", 10, 30, rgb565(0, 102, 204), font5x7);
 8002984:	22cc      	movs	r2, #204	; 0xcc
 8002986:	2166      	movs	r1, #102	; 0x66
 8002988:	2000      	movs	r0, #0
 800298a:	f008 f901 	bl	800ab90 <rgb565>
 800298e:	4603      	mov	r3, r0
 8002990:	461a      	mov	r2, r3
 8002992:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <show_misc_menu+0xf8>)
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4613      	mov	r3, r2
 8002998:	221e      	movs	r2, #30
 800299a:	210a      	movs	r1, #10
 800299c:	4816      	ldr	r0, [pc, #88]	; (80029f8 <show_misc_menu+0xfc>)
 800299e:	f007 fead 	bl	800a6fc <hagl_put_text>
	hagl_put_text("Status karty SD", 10, 50, rgb565(0, 102, 204), font5x7);
 80029a2:	22cc      	movs	r2, #204	; 0xcc
 80029a4:	2166      	movs	r1, #102	; 0x66
 80029a6:	2000      	movs	r0, #0
 80029a8:	f008 f8f2 	bl	800ab90 <rgb565>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <show_misc_menu+0xf8>)
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	2232      	movs	r2, #50	; 0x32
 80029b8:	210a      	movs	r1, #10
 80029ba:	4810      	ldr	r0, [pc, #64]	; (80029fc <show_misc_menu+0x100>)
 80029bc:	f007 fe9e 	bl	800a6fc <hagl_put_text>
//	hagl_put_text("Kalibracja", 10, 70, rgb565(0, 102, 204), font5x7);
//	hagl_put_text("Inne", 10, 90, rgb565(0, 102, 204), font5x7);
	hagl_put_text("Powrot", 10, 110, rgb565(102, 255, 102), font5x7);
 80029c0:	2266      	movs	r2, #102	; 0x66
 80029c2:	21ff      	movs	r1, #255	; 0xff
 80029c4:	2066      	movs	r0, #102	; 0x66
 80029c6:	f008 f8e3 	bl	800ab90 <rgb565>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <show_misc_menu+0xf8>)
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	4613      	mov	r3, r2
 80029d4:	226e      	movs	r2, #110	; 0x6e
 80029d6:	210a      	movs	r1, #10
 80029d8:	4809      	ldr	r0, [pc, #36]	; (8002a00 <show_misc_menu+0x104>)
 80029da:	f007 fe8f 	bl	800a6fc <hagl_put_text>
	lcd_copy();
 80029de:	f7ff fa0d 	bl	8001dfc <lcd_copy>
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029ec:	0800f6cc 	.word	0x0800f6cc
 80029f0:	0800c570 	.word	0x0800c570
 80029f4:	08012684 	.word	0x08012684
 80029f8:	0800c578 	.word	0x0800c578
 80029fc:	0800c588 	.word	0x0800c588
 8002a00:	0800c568 	.word	0x0800c568

08002a04 <update_channels_value>:

void update_channels_value(uint8_t activeChannels, uint16_t color) {
 8002a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a08:	b087      	sub	sp, #28
 8002a0a:	af02      	add	r7, sp, #8
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	460a      	mov	r2, r1
 8002a10:	71fb      	strb	r3, [r7, #7]
 8002a12:	4613      	mov	r3, r2
 8002a14:	80bb      	strh	r3, [r7, #4]
	hagl_clear_screen();
 8002a16:	f007 fef7 	bl	800a808 <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e028      	b.n	8002a72 <update_channels_value+0x6e>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	b21d      	sxth	r5, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	b21e      	sxth	r6, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	fa0f f883 	sxth.w	r8, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	fa0f f983 	sxth.w	r9, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f1c3 0305 	rsb	r3, r3, #5
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	b21c      	sxth	r4, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	20ff      	movs	r0, #255	; 0xff
 8002a56:	f008 f89b 	bl	800ab90 <rgb565>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	9400      	str	r4, [sp, #0]
 8002a60:	464b      	mov	r3, r9
 8002a62:	4642      	mov	r2, r8
 8002a64:	4631      	mov	r1, r6
 8002a66:	4628      	mov	r0, r5
 8002a68:	f007 fef8 	bl	800a85c <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	ddd3      	ble.n	8002a20 <update_channels_value+0x1c>
				rgb565(255, 0, 0));
	}
	hagl_put_text("AKTYWNE KANALY", 20, 10, rgb565(255, 0, 0), font6x9);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	20ff      	movs	r0, #255	; 0xff
 8002a7e:	f008 f887 	bl	800ab90 <rgb565>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <update_channels_value+0xbc>)
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	220a      	movs	r2, #10
 8002a8e:	2114      	movs	r1, #20
 8002a90:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <update_channels_value+0xc0>)
 8002a92:	f007 fe33 	bl	800a6fc <hagl_put_text>
	snprintf((char*)ch_buffer, 4, "%u", activeChannels);
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <update_channels_value+0xc4>)
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	480b      	ldr	r0, [pc, #44]	; (8002acc <update_channels_value+0xc8>)
 8002a9e:	f008 ff81 	bl	800b9a4 <sniprintf>
	hagl_put_text((char*) ch_buffer, 60, 50, color, font6x9);
 8002aa2:	88bb      	ldrh	r3, [r7, #4]
 8002aa4:	4a06      	ldr	r2, [pc, #24]	; (8002ac0 <update_channels_value+0xbc>)
 8002aa6:	9200      	str	r2, [sp, #0]
 8002aa8:	2232      	movs	r2, #50	; 0x32
 8002aaa:	213c      	movs	r1, #60	; 0x3c
 8002aac:	4807      	ldr	r0, [pc, #28]	; (8002acc <update_channels_value+0xc8>)
 8002aae:	f007 fe25 	bl	800a6fc <hagl_put_text>
	lcd_copy();
 8002ab2:	f7ff f9a3 	bl	8001dfc <lcd_copy>
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ac0:	0800f6cc 	.word	0x0800f6cc
 8002ac4:	0800c598 	.word	0x0800c598
 8002ac8:	0800c5a8 	.word	0x0800c5a8
 8002acc:	2000a0b8 	.word	0x2000a0b8

08002ad0 <update_oversampling_prescaler>:

void update_oversampling_prescaler(uint8_t oversamplingPrescaler,
		uint16_t color) {
 8002ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af02      	add	r7, sp, #8
 8002ad8:	4603      	mov	r3, r0
 8002ada:	460a      	mov	r2, r1
 8002adc:	71fb      	strb	r3, [r7, #7]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	80bb      	strh	r3, [r7, #4]
	hagl_clear_screen();
 8002ae2:	f007 fe91 	bl	800a808 <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	e028      	b.n	8002b3e <update_oversampling_prescaler+0x6e>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	b21d      	sxth	r5, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	b21e      	sxth	r6, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	fa0f f883 	sxth.w	r8, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	fa0f f983 	sxth.w	r9, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f1c3 0305 	rsb	r3, r3, #5
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	b21c      	sxth	r4, r3
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	20ff      	movs	r0, #255	; 0xff
 8002b22:	f008 f835 	bl	800ab90 <rgb565>
 8002b26:	4603      	mov	r3, r0
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	9400      	str	r4, [sp, #0]
 8002b2c:	464b      	mov	r3, r9
 8002b2e:	4642      	mov	r2, r8
 8002b30:	4631      	mov	r1, r6
 8002b32:	4628      	mov	r0, r5
 8002b34:	f007 fe92 	bl	800a85c <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	ddd3      	ble.n	8002aec <update_oversampling_prescaler+0x1c>
				rgb565(255, 0, 0));
	}
	hagl_put_text("OVERSAMPLING", 30, 10, rgb565(255, 0, 0), font6x9);
 8002b44:	2200      	movs	r2, #0
 8002b46:	2100      	movs	r1, #0
 8002b48:	20ff      	movs	r0, #255	; 0xff
 8002b4a:	f008 f821 	bl	800ab90 <rgb565>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <update_oversampling_prescaler+0xf8>)
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	4613      	mov	r3, r2
 8002b58:	220a      	movs	r2, #10
 8002b5a:	211e      	movs	r1, #30
 8002b5c:	481b      	ldr	r0, [pc, #108]	; (8002bcc <update_oversampling_prescaler+0xfc>)
 8002b5e:	f007 fdcd 	bl	800a6fc <hagl_put_text>
	hagl_put_text("Wybierz z ilu probek ", 15, 30, rgb565(0, 102, 204),
 8002b62:	22cc      	movs	r2, #204	; 0xcc
 8002b64:	2166      	movs	r1, #102	; 0x66
 8002b66:	2000      	movs	r0, #0
 8002b68:	f008 f812 	bl	800ab90 <rgb565>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <update_oversampling_prescaler+0x100>)
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	221e      	movs	r2, #30
 8002b78:	210f      	movs	r1, #15
 8002b7a:	4816      	ldr	r0, [pc, #88]	; (8002bd4 <update_oversampling_prescaler+0x104>)
 8002b7c:	f007 fdbe 	bl	800a6fc <hagl_put_text>
			font5x7);
	hagl_put_text("  usredniac pomiar", 15, 40, rgb565(0, 102, 204), font5x7);
 8002b80:	22cc      	movs	r2, #204	; 0xcc
 8002b82:	2166      	movs	r1, #102	; 0x66
 8002b84:	2000      	movs	r0, #0
 8002b86:	f008 f803 	bl	800ab90 <rgb565>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <update_oversampling_prescaler+0x100>)
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	2228      	movs	r2, #40	; 0x28
 8002b96:	210f      	movs	r1, #15
 8002b98:	480f      	ldr	r0, [pc, #60]	; (8002bd8 <update_oversampling_prescaler+0x108>)
 8002b9a:	f007 fdaf 	bl	800a6fc <hagl_put_text>
	snprintf((char*)os_buffer, 4, "%u", oversamplingPrescaler);
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <update_oversampling_prescaler+0x10c>)
 8002ba2:	2104      	movs	r1, #4
 8002ba4:	480e      	ldr	r0, [pc, #56]	; (8002be0 <update_oversampling_prescaler+0x110>)
 8002ba6:	f008 fefd 	bl	800b9a4 <sniprintf>
	hagl_put_text((char*) os_buffer, 60, 70, color, font6x9);
 8002baa:	88bb      	ldrh	r3, [r7, #4]
 8002bac:	4a06      	ldr	r2, [pc, #24]	; (8002bc8 <update_oversampling_prescaler+0xf8>)
 8002bae:	9200      	str	r2, [sp, #0]
 8002bb0:	2246      	movs	r2, #70	; 0x46
 8002bb2:	213c      	movs	r1, #60	; 0x3c
 8002bb4:	480a      	ldr	r0, [pc, #40]	; (8002be0 <update_oversampling_prescaler+0x110>)
 8002bb6:	f007 fda1 	bl	800a6fc <hagl_put_text>
	lcd_copy();
 8002bba:	f7ff f91f 	bl	8001dfc <lcd_copy>
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bc8:	0800f6cc 	.word	0x0800f6cc
 8002bcc:	0800c5ac 	.word	0x0800c5ac
 8002bd0:	08012684 	.word	0x08012684
 8002bd4:	0800c5bc 	.word	0x0800c5bc
 8002bd8:	0800c5d4 	.word	0x0800c5d4
 8002bdc:	0800c5a8 	.word	0x0800c5a8
 8002be0:	2000a0c0 	.word	0x2000a0c0

08002be4 <show_sensor_data>:

void show_sensor_data(uint16_t sensor_data[], uint8_t activeChannels) {
 8002be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002be8:	b087      	sub	sp, #28
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	70fb      	strb	r3, [r7, #3]
	hagl_clear_screen();
 8002bf2:	f007 fe09 	bl	800a808 <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e028      	b.n	8002c4e <show_sensor_data+0x6a>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	b21d      	sxth	r5, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	b21e      	sxth	r6, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	fa0f f883 	sxth.w	r8, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	fa0f f983 	sxth.w	r9, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f1c3 0305 	rsb	r3, r3, #5
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	b21c      	sxth	r4, r3
 8002c2c:	2266      	movs	r2, #102	; 0x66
 8002c2e:	2133      	movs	r1, #51	; 0x33
 8002c30:	2000      	movs	r0, #0
 8002c32:	f007 ffad 	bl	800ab90 <rgb565>
 8002c36:	4603      	mov	r3, r0
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	9400      	str	r4, [sp, #0]
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	4642      	mov	r2, r8
 8002c40:	4631      	mov	r1, r6
 8002c42:	4628      	mov	r0, r5
 8002c44:	f007 fe0a 	bl	800a85c <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	ddd3      	ble.n	8002bfc <show_sensor_data+0x18>
				rgb565(0, 51, 102));
	}
	hagl_put_text("DANE Z CZUJNIKOW", 10, 10, rgb565(15, 127, 225), font6x9);
 8002c54:	22e1      	movs	r2, #225	; 0xe1
 8002c56:	217f      	movs	r1, #127	; 0x7f
 8002c58:	200f      	movs	r0, #15
 8002c5a:	f007 ff99 	bl	800ab90 <rgb565>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	461a      	mov	r2, r3
 8002c62:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <show_sensor_data+0x114>)
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	4613      	mov	r3, r2
 8002c68:	220a      	movs	r2, #10
 8002c6a:	210a      	movs	r1, #10
 8002c6c:	4823      	ldr	r0, [pc, #140]	; (8002cfc <show_sensor_data+0x118>)
 8002c6e:	f007 fd45 	bl	800a6fc <hagl_put_text>
	hagl_fill_rectangle(7, 27, LCD_WIDTH - 7, LCD_HEIGHT - 7, rgb565(0, 0, 0));
 8002c72:	2200      	movs	r2, #0
 8002c74:	2100      	movs	r1, #0
 8002c76:	2000      	movs	r0, #0
 8002c78:	f007 ff8a 	bl	800ab90 <rgb565>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2399      	movs	r3, #153	; 0x99
 8002c82:	2279      	movs	r2, #121	; 0x79
 8002c84:	211b      	movs	r1, #27
 8002c86:	2007      	movs	r0, #7
 8002c88:	f007 fb9e 	bl	800a3c8 <hagl_fill_rectangle>
	for (int var = 0; var < activeChannels; ++var) {
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	e026      	b.n	8002ce0 <show_sensor_data+0xfc>
		snprintf(text_to_parse, 16, "Kanal %u: \t\t%u", var, sensor_data[var]);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <show_sensor_data+0x11c>)
 8002ca2:	2110      	movs	r1, #16
 8002ca4:	4817      	ldr	r0, [pc, #92]	; (8002d04 <show_sensor_data+0x120>)
 8002ca6:	f008 fe7d 	bl	800b9a4 <sniprintf>
		hagl_put_text(text_to_parse, 10, 30 + var * 15, rgb565(15, 127, 225),
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	331e      	adds	r3, #30
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b21c      	sxth	r4, r3
 8002cbc:	22e1      	movs	r2, #225	; 0xe1
 8002cbe:	217f      	movs	r1, #127	; 0x7f
 8002cc0:	200f      	movs	r0, #15
 8002cc2:	f007 ff65 	bl	800ab90 <rgb565>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <show_sensor_data+0x124>)
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	210a      	movs	r1, #10
 8002cd4:	480b      	ldr	r0, [pc, #44]	; (8002d04 <show_sensor_data+0x120>)
 8002cd6:	f007 fd11 	bl	800a6fc <hagl_put_text>
	for (int var = 0; var < activeChannels; ++var) {
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	dbd4      	blt.n	8002c92 <show_sensor_data+0xae>
				font5x7);
	}
	lcd_copy();
 8002ce8:	f7ff f888 	bl	8001dfc <lcd_copy>
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cf6:	bf00      	nop
 8002cf8:	0800f6cc 	.word	0x0800f6cc
 8002cfc:	0800c5e8 	.word	0x0800c5e8
 8002d00:	0800c5fc 	.word	0x0800c5fc
 8002d04:	2000a770 	.word	0x2000a770
 8002d08:	08012684 	.word	0x08012684

08002d0c <select_item>:


	lcd_copy();
}

void select_item(int index) {
 8002d0c:	b5b0      	push	{r4, r5, r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	0092      	lsls	r2, r2, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3328      	adds	r3, #40	; 0x28
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	b21c      	sxth	r4, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3319      	adds	r3, #25
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	b21d      	sxth	r5, r3
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	21ff      	movs	r1, #255	; 0xff
 8002d40:	20ff      	movs	r0, #255	; 0xff
 8002d42:	f007 ff25 	bl	800ab90 <rgb565>
 8002d46:	4603      	mov	r3, r0
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	462b      	mov	r3, r5
 8002d4c:	2278      	movs	r2, #120	; 0x78
 8002d4e:	4621      	mov	r1, r4
 8002d50:	2008      	movs	r0, #8
 8002d52:	f007 fab3 	bl	800a2bc <hagl_draw_rectangle>
			rgb565(255, 255, 0));
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bdb0      	pop	{r4, r5, r7, pc}

08002d5e <deselect_item>:

void deselect_item(int index) {
 8002d5e:	b5b0      	push	{r4, r5, r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af02      	add	r7, sp, #8
 8002d64:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3328      	adds	r3, #40	; 0x28
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	b21c      	sxth	r4, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	0092      	lsls	r2, r2, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3319      	adds	r3, #25
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	b21d      	sxth	r5, r3
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2100      	movs	r1, #0
 8002d92:	2000      	movs	r0, #0
 8002d94:	f007 fefc 	bl	800ab90 <rgb565>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	462b      	mov	r3, r5
 8002d9e:	2278      	movs	r2, #120	; 0x78
 8002da0:	4621      	mov	r1, r4
 8002da2:	2008      	movs	r0, #8
 8002da4:	f007 fa8a 	bl	800a2bc <hagl_draw_rectangle>
			rgb565(0, 0, 0));
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bdb0      	pop	{r4, r5, r7, pc}

08002db0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <MX_RTC_Init+0x44>)
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <MX_RTC_Init+0x48>)
 8002db8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <MX_RTC_Init+0x44>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <MX_RTC_Init+0x44>)
 8002dc2:	227f      	movs	r2, #127	; 0x7f
 8002dc4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <MX_RTC_Init+0x44>)
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <MX_RTC_Init+0x44>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <MX_RTC_Init+0x44>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <MX_RTC_Init+0x44>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dde:	4805      	ldr	r0, [pc, #20]	; (8002df4 <MX_RTC_Init+0x44>)
 8002de0:	f002 fd98 	bl	8005914 <HAL_RTC_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002dea:	f7ff fcdb 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	2000a780 	.word	0x2000a780
 8002df8:	40002800 	.word	0x40002800

08002dfc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <HAL_RTC_MspInit+0x50>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d111      	bne.n	8002e42 <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e26:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f002 fc83 	bl	8005738 <HAL_RCCEx_PeriphCLKConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002e38:	f7ff fcb4 	bl	80027a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <HAL_RTC_MspInit+0x54>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002e42:	bf00      	nop
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40002800 	.word	0x40002800
 8002e50:	42470e3c 	.word	0x42470e3c

08002e54 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002e5a:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <MX_SPI1_Init+0x68>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002e88:	2218      	movs	r2, #24
 8002e8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002ea0:	220a      	movs	r2, #10
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ea4:	4804      	ldr	r0, [pc, #16]	; (8002eb8 <MX_SPI1_Init+0x64>)
 8002ea6:	f002 fe1a 	bl	8005ade <HAL_SPI_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002eb0:	f7ff fc78 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002eb4:	bf00      	nop
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	2000a7f8 	.word	0x2000a7f8
 8002ebc:	40013000 	.word	0x40013000

08002ec0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002ec4:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002ec6:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <MX_SPI2_Init+0x68>)
 8002ec8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002eca:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002ecc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ed0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ed8:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002ef4:	2218      	movs	r2, #24
 8002ef6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002efe:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f04:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002f0c:	220a      	movs	r2, #10
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f10:	4804      	ldr	r0, [pc, #16]	; (8002f24 <MX_SPI2_Init+0x64>)
 8002f12:	f002 fde4 	bl	8005ade <HAL_SPI_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002f1c:	f7ff fc42 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	2000a7a0 	.word	0x2000a7a0
 8002f28:	40003800 	.word	0x40003800

08002f2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	; 0x30
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a58      	ldr	r2, [pc, #352]	; (80030ac <HAL_SPI_MspInit+0x180>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d178      	bne.n	8003040 <HAL_SPI_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	4b57      	ldr	r3, [pc, #348]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a56      	ldr	r2, [pc, #344]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8002f58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b54      	ldr	r3, [pc, #336]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	4b50      	ldr	r3, [pc, #320]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a4f      	ldr	r2, [pc, #316]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b4d      	ldr	r3, [pc, #308]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	4b49      	ldr	r3, [pc, #292]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a48      	ldr	r2, [pc, #288]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b46      	ldr	r3, [pc, #280]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fb2:	2305      	movs	r3, #5
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb6:	f107 031c 	add.w	r3, r7, #28
 8002fba:	4619      	mov	r1, r3
 8002fbc:	483d      	ldr	r0, [pc, #244]	; (80030b4 <HAL_SPI_MspInit+0x188>)
 8002fbe:	f001 fc61 	bl	8004884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002fc2:	2320      	movs	r3, #32
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fd2:	2305      	movs	r3, #5
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd6:	f107 031c 	add.w	r3, r7, #28
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4836      	ldr	r0, [pc, #216]	; (80030b8 <HAL_SPI_MspInit+0x18c>)
 8002fde:	f001 fc51 	bl	8004884 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002fe2:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_SPI_MspInit+0x190>)
 8002fe4:	4a36      	ldr	r2, [pc, #216]	; (80030c0 <HAL_SPI_MspInit+0x194>)
 8002fe6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002fe8:	4b34      	ldr	r3, [pc, #208]	; (80030bc <HAL_SPI_MspInit+0x190>)
 8002fea:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002fee:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ff0:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_SPI_MspInit+0x190>)
 8002ff2:	2240      	movs	r2, #64	; 0x40
 8002ff4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff6:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_SPI_MspInit+0x190>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ffc:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <HAL_SPI_MspInit+0x190>)
 8002ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003002:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003004:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <HAL_SPI_MspInit+0x190>)
 8003006:	2200      	movs	r2, #0
 8003008:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800300a:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <HAL_SPI_MspInit+0x190>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003010:	4b2a      	ldr	r3, [pc, #168]	; (80030bc <HAL_SPI_MspInit+0x190>)
 8003012:	2200      	movs	r2, #0
 8003014:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003016:	4b29      	ldr	r3, [pc, #164]	; (80030bc <HAL_SPI_MspInit+0x190>)
 8003018:	2200      	movs	r2, #0
 800301a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_SPI_MspInit+0x190>)
 800301e:	2200      	movs	r2, #0
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003022:	4826      	ldr	r0, [pc, #152]	; (80030bc <HAL_SPI_MspInit+0x190>)
 8003024:	f001 f8be 	bl	80041a4 <HAL_DMA_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 800302e:	f7ff fbb9 	bl	80027a4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a21      	ldr	r2, [pc, #132]	; (80030bc <HAL_SPI_MspInit+0x190>)
 8003036:	649a      	str	r2, [r3, #72]	; 0x48
 8003038:	4a20      	ldr	r2, [pc, #128]	; (80030bc <HAL_SPI_MspInit+0x190>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800303e:	e031      	b.n	80030a4 <HAL_SPI_MspInit+0x178>
  else if(spiHandle->Instance==SPI2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_SPI_MspInit+0x198>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d12c      	bne.n	80030a4 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8003054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a10      	ldr	r2, [pc, #64]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_SPI_MspInit+0x184>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8003082:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003090:	2303      	movs	r3, #3
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003094:	2305      	movs	r3, #5
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	4619      	mov	r1, r3
 800309e:	4806      	ldr	r0, [pc, #24]	; (80030b8 <HAL_SPI_MspInit+0x18c>)
 80030a0:	f001 fbf0 	bl	8004884 <HAL_GPIO_Init>
}
 80030a4:	bf00      	nop
 80030a6:	3730      	adds	r7, #48	; 0x30
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40013000 	.word	0x40013000
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020000 	.word	0x40020000
 80030b8:	40020400 	.word	0x40020400
 80030bc:	2000a850 	.word	0x2000a850
 80030c0:	40026458 	.word	0x40026458
 80030c4:	40003800 	.word	0x40003800

080030c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_MspInit+0x4c>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	4a0f      	ldr	r2, [pc, #60]	; (8003114 <HAL_MspInit+0x4c>)
 80030d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_MspInit+0x4c>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_MspInit+0x4c>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <HAL_MspInit+0x4c>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_MspInit+0x4c>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800

08003118 <SDTimer_Handler>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void SDTimer_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <SDTimer_Handler+0x40>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <SDTimer_Handler+0x1c>
    Timer1--;
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <SDTimer_Handler+0x40>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b2da      	uxtb	r2, r3
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <SDTimer_Handler+0x40>)
 8003132:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <SDTimer_Handler+0x44>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d006      	beq.n	800314c <SDTimer_Handler+0x34>
    Timer2--;
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <SDTimer_Handler+0x44>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b2da      	uxtb	r2, r3
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <SDTimer_Handler+0x44>)
 800314a:	701a      	strb	r2, [r3, #0]
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	2000a8b1 	.word	0x2000a8b1
 800315c:	2000a8b0 	.word	0x2000a8b0

08003160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003164:	e7fe      	b.n	8003164 <NMI_Handler+0x4>

08003166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800316a:	e7fe      	b.n	800316a <HardFault_Handler+0x4>

0800316c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <MemManage_Handler+0x4>

08003172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003176:	e7fe      	b.n	8003176 <BusFault_Handler+0x4>

08003178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800317c:	e7fe      	b.n	800317c <UsageFault_Handler+0x4>

0800317e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <SysTick_Handler+0x30>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <SysTick_Handler+0x30>)
 80031b8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <SysTick_Handler+0x30>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b09      	cmp	r3, #9
 80031c2:	d904      	bls.n	80031ce <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <SysTick_Handler+0x30>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80031ca:	f7ff ffa5 	bl	8003118 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ce:	f000 faa1 	bl	8003714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	2000a0c8 	.word	0x2000a0c8

080031dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80031e0:	2001      	movs	r0, #1
 80031e2:	f001 fd05 	bl	8004bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}

080031ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80031ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80031f2:	f001 fcfd 	bl	8004bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <DMA2_Stream3_IRQHandler+0x10>)
 8003202:	f001 f8d5 	bl	80043b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	2000a850 	.word	0x2000a850

08003210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
	return 1;
 8003214:	2301      	movs	r3, #1
}
 8003216:	4618      	mov	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_kill>:

int _kill(int pid, int sig)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800322a:	f007 fd01 	bl	800ac30 <__errno>
 800322e:	4603      	mov	r3, r0
 8003230:	2216      	movs	r2, #22
 8003232:	601a      	str	r2, [r3, #0]
	return -1;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <_exit>:

void _exit (int status)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003248:	f04f 31ff 	mov.w	r1, #4294967295
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff ffe7 	bl	8003220 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003252:	e7fe      	b.n	8003252 <_exit+0x12>

08003254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e00a      	b.n	800327c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003266:	f3af 8000 	nop.w
 800326a:	4601      	mov	r1, r0
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	60ba      	str	r2, [r7, #8]
 8003272:	b2ca      	uxtb	r2, r1
 8003274:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3301      	adds	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	429a      	cmp	r2, r3
 8003282:	dbf0      	blt.n	8003266 <_read+0x12>
	}

return len;
 8003284:	687b      	ldr	r3, [r7, #4]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b086      	sub	sp, #24
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	e009      	b.n	80032b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	60ba      	str	r2, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe fdd9 	bl	8001e60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	3301      	adds	r3, #1
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	dbf1      	blt.n	80032a0 <_write+0x12>
	}
	return len;
 80032bc:	687b      	ldr	r3, [r7, #4]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <_close>:

int _close(int file)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
	return -1;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ee:	605a      	str	r2, [r3, #4]
	return 0;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <_isatty>:

int _isatty(int file)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
	return 1;
 8003306:	2301      	movs	r3, #1
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
	return 0;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003338:	4a14      	ldr	r2, [pc, #80]	; (800338c <_sbrk+0x5c>)
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <_sbrk+0x60>)
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <_sbrk+0x64>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d102      	bne.n	8003352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <_sbrk+0x64>)
 800334e:	4a12      	ldr	r2, [pc, #72]	; (8003398 <_sbrk+0x68>)
 8003350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <_sbrk+0x64>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	429a      	cmp	r2, r3
 800335e:	d207      	bcs.n	8003370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003360:	f007 fc66 	bl	800ac30 <__errno>
 8003364:	4603      	mov	r3, r0
 8003366:	220c      	movs	r2, #12
 8003368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800336a:	f04f 33ff 	mov.w	r3, #4294967295
 800336e:	e009      	b.n	8003384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003370:	4b08      	ldr	r3, [pc, #32]	; (8003394 <_sbrk+0x64>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003376:	4b07      	ldr	r3, [pc, #28]	; (8003394 <_sbrk+0x64>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	4a05      	ldr	r2, [pc, #20]	; (8003394 <_sbrk+0x64>)
 8003380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003382:	68fb      	ldr	r3, [r7, #12]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20010000 	.word	0x20010000
 8003390:	00002000 	.word	0x00002000
 8003394:	2000a0cc 	.word	0x2000a0cc
 8003398:	2000adc0 	.word	0x2000adc0

0800339c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <SystemInit+0x28>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	4a07      	ldr	r2, [pc, #28]	; (80033c4 <SystemInit+0x28>)
 80033a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <SystemInit+0x28>)
 80033b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033b6:	609a      	str	r2, [r3, #8]
#endif
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033ce:	f107 030c 	add.w	r3, r7, #12
 80033d2:	2224      	movs	r2, #36	; 0x24
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f007 fea6 	bl	800b128 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033e4:	4b20      	ldr	r3, [pc, #128]	; (8003468 <MX_TIM2_Init+0xa0>)
 80033e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80033ec:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <MX_TIM2_Init+0xa0>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <MX_TIM2_Init+0xa0>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <MX_TIM2_Init+0xa0>)
 80033fa:	2227      	movs	r2, #39	; 0x27
 80033fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <MX_TIM2_Init+0xa0>)
 8003400:	2200      	movs	r2, #0
 8003402:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003404:	4b18      	ldr	r3, [pc, #96]	; (8003468 <MX_TIM2_Init+0xa0>)
 8003406:	2200      	movs	r2, #0
 8003408:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800340a:	2301      	movs	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003412:	2301      	movs	r3, #1
 8003414:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800341e:	2300      	movs	r3, #0
 8003420:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003422:	2301      	movs	r3, #1
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003426:	2300      	movs	r3, #0
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	4619      	mov	r1, r3
 8003434:	480c      	ldr	r0, [pc, #48]	; (8003468 <MX_TIM2_Init+0xa0>)
 8003436:	f003 f8cf 	bl	80065d8 <HAL_TIM_Encoder_Init>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003440:	f7ff f9b0 	bl	80027a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003444:	2300      	movs	r3, #0
 8003446:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003448:	2300      	movs	r3, #0
 800344a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800344c:	1d3b      	adds	r3, r7, #4
 800344e:	4619      	mov	r1, r3
 8003450:	4805      	ldr	r0, [pc, #20]	; (8003468 <MX_TIM2_Init+0xa0>)
 8003452:	f003 fa9b 	bl	800698c <HAL_TIMEx_MasterConfigSynchronization>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800345c:	f7ff f9a2 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003460:	bf00      	nop
 8003462:	3730      	adds	r7, #48	; 0x30
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000a8b4 	.word	0x2000a8b4

0800346c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348c:	d14a      	bne.n	8003524 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_TIM_Encoder_MspInit+0xc0>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4a25      	ldr	r2, [pc, #148]	; (800352c <HAL_TIM_Encoder_MspInit+0xc0>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
 800349e:	4b23      	ldr	r3, [pc, #140]	; (800352c <HAL_TIM_Encoder_MspInit+0xc0>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b1f      	ldr	r3, [pc, #124]	; (800352c <HAL_TIM_Encoder_MspInit+0xc0>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a1e      	ldr	r2, [pc, #120]	; (800352c <HAL_TIM_Encoder_MspInit+0xc0>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b1c      	ldr	r3, [pc, #112]	; (800352c <HAL_TIM_Encoder_MspInit+0xc0>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <HAL_TIM_Encoder_MspInit+0xc0>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a17      	ldr	r2, [pc, #92]	; (800352c <HAL_TIM_Encoder_MspInit+0xc0>)
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <HAL_TIM_Encoder_MspInit+0xc0>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034f4:	2301      	movs	r3, #1
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	4619      	mov	r1, r3
 80034fe:	480c      	ldr	r0, [pc, #48]	; (8003530 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003500:	f001 f9c0 	bl	8004884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003504:	2308      	movs	r3, #8
 8003506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2300      	movs	r3, #0
 8003512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003514:	2301      	movs	r3, #1
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	4805      	ldr	r0, [pc, #20]	; (8003534 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003520:	f001 f9b0 	bl	8004884 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003524:	bf00      	nop
 8003526:	3728      	adds	r7, #40	; 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40023800 	.word	0x40023800
 8003530:	40020000 	.word	0x40020000
 8003534:	40020400 	.word	0x40020400

08003538 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <MX_USART6_UART_Init+0x4c>)
 800353e:	4a12      	ldr	r2, [pc, #72]	; (8003588 <MX_USART6_UART_Init+0x50>)
 8003540:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <MX_USART6_UART_Init+0x4c>)
 8003544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003548:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <MX_USART6_UART_Init+0x4c>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <MX_USART6_UART_Init+0x4c>)
 8003552:	2200      	movs	r2, #0
 8003554:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <MX_USART6_UART_Init+0x4c>)
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <MX_USART6_UART_Init+0x4c>)
 800355e:	220c      	movs	r2, #12
 8003560:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <MX_USART6_UART_Init+0x4c>)
 8003564:	2200      	movs	r2, #0
 8003566:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <MX_USART6_UART_Init+0x4c>)
 800356a:	2200      	movs	r2, #0
 800356c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800356e:	4805      	ldr	r0, [pc, #20]	; (8003584 <MX_USART6_UART_Init+0x4c>)
 8003570:	f003 fa7a 	bl	8006a68 <HAL_UART_Init>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800357a:	f7ff f913 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	2000a8fc 	.word	0x2000a8fc
 8003588:	40011400 	.word	0x40011400

0800358c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_UART_MspInit+0x84>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d12c      	bne.n	8003608 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <HAL_UART_MspInit+0x88>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	4a17      	ldr	r2, [pc, #92]	; (8003614 <HAL_UART_MspInit+0x88>)
 80035b8:	f043 0320 	orr.w	r3, r3, #32
 80035bc:	6453      	str	r3, [r2, #68]	; 0x44
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_UART_MspInit+0x88>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	4b11      	ldr	r3, [pc, #68]	; (8003614 <HAL_UART_MspInit+0x88>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a10      	ldr	r2, [pc, #64]	; (8003614 <HAL_UART_MspInit+0x88>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <HAL_UART_MspInit+0x88>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80035e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80035ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ec:	2302      	movs	r3, #2
 80035ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f4:	2303      	movs	r3, #3
 80035f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035f8:	2308      	movs	r3, #8
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fc:	f107 0314 	add.w	r3, r7, #20
 8003600:	4619      	mov	r1, r3
 8003602:	4805      	ldr	r0, [pc, #20]	; (8003618 <HAL_UART_MspInit+0x8c>)
 8003604:	f001 f93e 	bl	8004884 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003608:	bf00      	nop
 800360a:	3728      	adds	r7, #40	; 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40011400 	.word	0x40011400
 8003614:	40023800 	.word	0x40023800
 8003618:	40020000 	.word	0x40020000

0800361c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800361c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003654 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003620:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003622:	e003      	b.n	800362c <LoopCopyDataInit>

08003624 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003626:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003628:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800362a:	3104      	adds	r1, #4

0800362c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800362c:	480b      	ldr	r0, [pc, #44]	; (800365c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800362e:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003630:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003632:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003634:	d3f6      	bcc.n	8003624 <CopyDataInit>
  ldr  r2, =_sbss
 8003636:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003638:	e002      	b.n	8003640 <LoopFillZerobss>

0800363a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800363a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800363c:	f842 3b04 	str.w	r3, [r2], #4

08003640 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003642:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003644:	d3f9      	bcc.n	800363a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003646:	f7ff fea9 	bl	800339c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800364a:	f007 fcd3 	bl	800aff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800364e:	f7fe fd53 	bl	80020f8 <main>
  bx  lr    
 8003652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003654:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8003658:	08015d10 	.word	0x08015d10
  ldr  r0, =_sdata
 800365c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003660:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8003664:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8003668:	2000adbc 	.word	0x2000adbc

0800366c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800366c:	e7fe      	b.n	800366c <ADC_IRQHandler>
	...

08003670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003674:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_Init+0x40>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0d      	ldr	r2, [pc, #52]	; (80036b0 <HAL_Init+0x40>)
 800367a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800367e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_Init+0x40>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <HAL_Init+0x40>)
 8003686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800368a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_Init+0x40>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <HAL_Init+0x40>)
 8003692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003698:	2003      	movs	r0, #3
 800369a:	f000 fd41 	bl	8004120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800369e:	2000      	movs	r0, #0
 80036a0:	f000 f808 	bl	80036b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a4:	f7ff fd10 	bl	80030c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023c00 	.word	0x40023c00

080036b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_InitTick+0x54>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_InitTick+0x58>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4619      	mov	r1, r3
 80036c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fd59 	bl	800418a <HAL_SYSTICK_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e00e      	b.n	8003700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b0f      	cmp	r3, #15
 80036e6:	d80a      	bhi.n	80036fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036e8:	2200      	movs	r2, #0
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	f000 fd21 	bl	8004136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036f4:	4a06      	ldr	r2, [pc, #24]	; (8003710 <HAL_InitTick+0x5c>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000008 	.word	0x20000008
 800370c:	20000010 	.word	0x20000010
 8003710:	2000000c 	.word	0x2000000c

08003714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_IncTick+0x20>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_IncTick+0x24>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4413      	add	r3, r2
 8003724:	4a04      	ldr	r2, [pc, #16]	; (8003738 <HAL_IncTick+0x24>)
 8003726:	6013      	str	r3, [r2, #0]
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000010 	.word	0x20000010
 8003738:	2000a940 	.word	0x2000a940

0800373c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return uwTick;
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_GetTick+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	2000a940 	.word	0x2000a940

08003754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800375c:	f7ff ffee 	bl	800373c <HAL_GetTick>
 8003760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d005      	beq.n	800377a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800376e:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <HAL_Delay+0x44>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800377a:	bf00      	nop
 800377c:	f7ff ffde 	bl	800373c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	d8f7      	bhi.n	800377c <HAL_Delay+0x28>
  {
  }
}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000010 	.word	0x20000010

0800379c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e033      	b.n	800381a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd fb7e 	bl	8000ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d118      	bne.n	800380c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037e2:	f023 0302 	bic.w	r3, r3, #2
 80037e6:	f043 0202 	orr.w	r2, r3, #2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa48 	bl	8003c84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f023 0303 	bic.w	r3, r3, #3
 8003802:	f043 0201 	orr.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
 800380a:	e001      	b.n	8003810 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_ADC_Start_DMA+0x1e>
 800383e:	2302      	movs	r3, #2
 8003840:	e0ce      	b.n	80039e0 <HAL_ADC_Start_DMA+0x1bc>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d018      	beq.n	800388a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003868:	4b5f      	ldr	r3, [pc, #380]	; (80039e8 <HAL_ADC_Start_DMA+0x1c4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5f      	ldr	r2, [pc, #380]	; (80039ec <HAL_ADC_Start_DMA+0x1c8>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0c9a      	lsrs	r2, r3, #18
 8003874:	4613      	mov	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4413      	add	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800387c:	e002      	b.n	8003884 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	3b01      	subs	r3, #1
 8003882:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f9      	bne.n	800387e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003898:	d107      	bne.n	80038aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	f040 8086 	bne.w	80039c6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f8:	d106      	bne.n	8003908 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f023 0206 	bic.w	r2, r3, #6
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
 8003906:	e002      	b.n	800390e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003916:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <HAL_ADC_Start_DMA+0x1cc>)
 8003918:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	4a35      	ldr	r2, [pc, #212]	; (80039f4 <HAL_ADC_Start_DMA+0x1d0>)
 8003920:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	4a34      	ldr	r2, [pc, #208]	; (80039f8 <HAL_ADC_Start_DMA+0x1d4>)
 8003928:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	4a33      	ldr	r2, [pc, #204]	; (80039fc <HAL_ADC_Start_DMA+0x1d8>)
 8003930:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800393a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800394a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800395a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	334c      	adds	r3, #76	; 0x4c
 8003966:	4619      	mov	r1, r3
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f000 fcc8 	bl	8004300 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10f      	bne.n	800399c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d129      	bne.n	80039de <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	e020      	b.n	80039de <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a17      	ldr	r2, [pc, #92]	; (8003a00 <HAL_ADC_Start_DMA+0x1dc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d11b      	bne.n	80039de <HAL_ADC_Start_DMA+0x1ba>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d114      	bne.n	80039de <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	e00b      	b.n	80039de <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f043 0210 	orr.w	r2, r3, #16
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f043 0201 	orr.w	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000008 	.word	0x20000008
 80039ec:	431bde83 	.word	0x431bde83
 80039f0:	40012300 	.word	0x40012300
 80039f4:	08003e7d 	.word	0x08003e7d
 80039f8:	08003f37 	.word	0x08003f37
 80039fc:	08003f53 	.word	0x08003f53
 8003a00:	40012000 	.word	0x40012000

08003a04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1c>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e105      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x228>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b09      	cmp	r3, #9
 8003a6a:	d925      	bls.n	8003ab8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68d9      	ldr	r1, [r3, #12]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	3b1e      	subs	r3, #30
 8003a82:	2207      	movs	r2, #7
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43da      	mvns	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	400a      	ands	r2, r1
 8003a90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68d9      	ldr	r1, [r3, #12]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4403      	add	r3, r0
 8003aaa:	3b1e      	subs	r3, #30
 8003aac:	409a      	lsls	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	e022      	b.n	8003afe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6919      	ldr	r1, [r3, #16]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	2207      	movs	r2, #7
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	400a      	ands	r2, r1
 8003ada:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6919      	ldr	r1, [r3, #16]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	4618      	mov	r0, r3
 8003aee:	4603      	mov	r3, r0
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4403      	add	r3, r0
 8003af4:	409a      	lsls	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b06      	cmp	r3, #6
 8003b04:	d824      	bhi.n	8003b50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	3b05      	subs	r3, #5
 8003b18:	221f      	movs	r2, #31
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43da      	mvns	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	400a      	ands	r2, r1
 8003b26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	4618      	mov	r0, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	3b05      	subs	r3, #5
 8003b42:	fa00 f203 	lsl.w	r2, r0, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b4e:	e04c      	b.n	8003bea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	d824      	bhi.n	8003ba2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	3b23      	subs	r3, #35	; 0x23
 8003b6a:	221f      	movs	r2, #31
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43da      	mvns	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	400a      	ands	r2, r1
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	4618      	mov	r0, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	3b23      	subs	r3, #35	; 0x23
 8003b94:	fa00 f203 	lsl.w	r2, r0, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba0:	e023      	b.n	8003bea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3b41      	subs	r3, #65	; 0x41
 8003bb4:	221f      	movs	r2, #31
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43da      	mvns	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	3b41      	subs	r3, #65	; 0x41
 8003bde:	fa00 f203 	lsl.w	r2, r0, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bea:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <HAL_ADC_ConfigChannel+0x234>)
 8003bec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <HAL_ADC_ConfigChannel+0x238>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d109      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x1cc>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b12      	cmp	r3, #18
 8003bfe:	d105      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a19      	ldr	r2, [pc, #100]	; (8003c78 <HAL_ADC_ConfigChannel+0x238>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d123      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x21e>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b10      	cmp	r3, #16
 8003c1c:	d003      	beq.n	8003c26 <HAL_ADC_ConfigChannel+0x1e6>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b11      	cmp	r3, #17
 8003c24:	d11b      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d111      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <HAL_ADC_ConfigChannel+0x23c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a10      	ldr	r2, [pc, #64]	; (8003c80 <HAL_ADC_ConfigChannel+0x240>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	0c9a      	lsrs	r2, r3, #18
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c50:	e002      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f9      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40012300 	.word	0x40012300
 8003c78:	40012000 	.word	0x40012000
 8003c7c:	20000008 	.word	0x20000008
 8003c80:	431bde83 	.word	0x431bde83

08003c84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c8c:	4b79      	ldr	r3, [pc, #484]	; (8003e74 <ADC_Init+0x1f0>)
 8003c8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	021a      	lsls	r2, r3, #8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6899      	ldr	r1, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	4a58      	ldr	r2, [pc, #352]	; (8003e78 <ADC_Init+0x1f4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d022      	beq.n	8003d62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6899      	ldr	r1, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	e00f      	b.n	8003d82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0202 	bic.w	r2, r2, #2
 8003d90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6899      	ldr	r1, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	7e1b      	ldrb	r3, [r3, #24]
 8003d9c:	005a      	lsls	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01b      	beq.n	8003de8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003dce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	035a      	lsls	r2, r3, #13
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	e007      	b.n	8003df8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	051a      	lsls	r2, r3, #20
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6899      	ldr	r1, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e3a:	025a      	lsls	r2, r3, #9
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6899      	ldr	r1, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	029a      	lsls	r2, r3, #10
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40012300 	.word	0x40012300
 8003e78:	0f000001 	.word	0x0f000001

08003e7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d13c      	bne.n	8003f10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d12b      	bne.n	8003f08 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d127      	bne.n	8003f08 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d006      	beq.n	8003ed4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d119      	bne.n	8003f08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0220 	bic.w	r2, r2, #32
 8003ee2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d105      	bne.n	8003f08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	f043 0201 	orr.w	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff fd7b 	bl	8003a04 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f0e:	e00e      	b.n	8003f2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff fd85 	bl	8003a2c <HAL_ADC_ErrorCallback>
}
 8003f22:	e004      	b.n	8003f2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff fd67 	bl	8003a18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2240      	movs	r2, #64	; 0x40
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	f043 0204 	orr.w	r2, r3, #4
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff fd5a 	bl	8003a2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fb2:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	60d3      	str	r3, [r2, #12]
}
 8003fb8:	bf00      	nop
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	e000ed00 	.word	0xe000ed00

08003fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fcc:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	f003 0307 	and.w	r3, r3, #7
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	e000ed00 	.word	0xe000ed00

08003fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	db0b      	blt.n	800400e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	f003 021f 	and.w	r2, r3, #31
 8003ffc:	4907      	ldr	r1, [pc, #28]	; (800401c <__NVIC_EnableIRQ+0x38>)
 8003ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	2001      	movs	r0, #1
 8004006:	fa00 f202 	lsl.w	r2, r0, r2
 800400a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	e000e100 	.word	0xe000e100

08004020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004030:	2b00      	cmp	r3, #0
 8004032:	db0a      	blt.n	800404a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	b2da      	uxtb	r2, r3
 8004038:	490c      	ldr	r1, [pc, #48]	; (800406c <__NVIC_SetPriority+0x4c>)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	0112      	lsls	r2, r2, #4
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	440b      	add	r3, r1
 8004044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004048:	e00a      	b.n	8004060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	4908      	ldr	r1, [pc, #32]	; (8004070 <__NVIC_SetPriority+0x50>)
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	3b04      	subs	r3, #4
 8004058:	0112      	lsls	r2, r2, #4
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	440b      	add	r3, r1
 800405e:	761a      	strb	r2, [r3, #24]
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000e100 	.word	0xe000e100
 8004070:	e000ed00 	.word	0xe000ed00

08004074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004074:	b480      	push	{r7}
 8004076:	b089      	sub	sp, #36	; 0x24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f1c3 0307 	rsb	r3, r3, #7
 800408e:	2b04      	cmp	r3, #4
 8004090:	bf28      	it	cs
 8004092:	2304      	movcs	r3, #4
 8004094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	3304      	adds	r3, #4
 800409a:	2b06      	cmp	r3, #6
 800409c:	d902      	bls.n	80040a4 <NVIC_EncodePriority+0x30>
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	3b03      	subs	r3, #3
 80040a2:	e000      	b.n	80040a6 <NVIC_EncodePriority+0x32>
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a8:	f04f 32ff 	mov.w	r2, #4294967295
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43da      	mvns	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	401a      	ands	r2, r3
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040bc:	f04f 31ff 	mov.w	r1, #4294967295
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	fa01 f303 	lsl.w	r3, r1, r3
 80040c6:	43d9      	mvns	r1, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040cc:	4313      	orrs	r3, r2
         );
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3724      	adds	r7, #36	; 0x24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040ec:	d301      	bcc.n	80040f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ee:	2301      	movs	r3, #1
 80040f0:	e00f      	b.n	8004112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040f2:	4a0a      	ldr	r2, [pc, #40]	; (800411c <SysTick_Config+0x40>)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040fa:	210f      	movs	r1, #15
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	f7ff ff8e 	bl	8004020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <SysTick_Config+0x40>)
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800410a:	4b04      	ldr	r3, [pc, #16]	; (800411c <SysTick_Config+0x40>)
 800410c:	2207      	movs	r2, #7
 800410e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	e000e010 	.word	0xe000e010

08004120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff ff29 	bl	8003f80 <__NVIC_SetPriorityGrouping>
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004136:	b580      	push	{r7, lr}
 8004138:	b086      	sub	sp, #24
 800413a:	af00      	add	r7, sp, #0
 800413c:	4603      	mov	r3, r0
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004148:	f7ff ff3e 	bl	8003fc8 <__NVIC_GetPriorityGrouping>
 800414c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	6978      	ldr	r0, [r7, #20]
 8004154:	f7ff ff8e 	bl	8004074 <NVIC_EncodePriority>
 8004158:	4602      	mov	r2, r0
 800415a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff ff5d 	bl	8004020 <__NVIC_SetPriority>
}
 8004166:	bf00      	nop
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	4603      	mov	r3, r0
 8004176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff ff31 	bl	8003fe4 <__NVIC_EnableIRQ>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff ffa2 	bl	80040dc <SysTick_Config>
 8004198:	4603      	mov	r3, r0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041b0:	f7ff fac4 	bl	800373c <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e099      	b.n	80042f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041e0:	e00f      	b.n	8004202 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041e2:	f7ff faab 	bl	800373c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b05      	cmp	r3, #5
 80041ee:	d908      	bls.n	8004202 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2203      	movs	r2, #3
 80041fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e078      	b.n	80042f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e8      	bne.n	80041e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4b38      	ldr	r3, [pc, #224]	; (80042fc <HAL_DMA_Init+0x158>)
 800421c:	4013      	ands	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800422e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800423a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	2b04      	cmp	r3, #4
 800425a:	d107      	bne.n	800426c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	4313      	orrs	r3, r2
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0307 	bic.w	r3, r3, #7
 8004282:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	2b04      	cmp	r3, #4
 8004294:	d117      	bne.n	80042c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00e      	beq.n	80042c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fa6f 	bl	800478c <DMA_CheckFifoParam>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2240      	movs	r2, #64	; 0x40
 80042b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80042c2:	2301      	movs	r3, #1
 80042c4:	e016      	b.n	80042f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa26 	bl	8004720 <DMA_CalcBaseAndBitshift>
 80042d4:	4603      	mov	r3, r0
 80042d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	223f      	movs	r2, #63	; 0x3f
 80042de:	409a      	lsls	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	f010803f 	.word	0xf010803f

08004300 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_DMA_Start_IT+0x26>
 8004322:	2302      	movs	r3, #2
 8004324:	e040      	b.n	80043a8 <HAL_DMA_Start_IT+0xa8>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d12f      	bne.n	800439a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f9b8 	bl	80046c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	223f      	movs	r2, #63	; 0x3f
 800435a:	409a      	lsls	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0216 	orr.w	r2, r2, #22
 800436e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0208 	orr.w	r2, r2, #8
 8004386:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e005      	b.n	80043a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
 80043a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043bc:	4b92      	ldr	r3, [pc, #584]	; (8004608 <HAL_DMA_IRQHandler+0x258>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a92      	ldr	r2, [pc, #584]	; (800460c <HAL_DMA_IRQHandler+0x25c>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	0a9b      	lsrs	r3, r3, #10
 80043c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043da:	2208      	movs	r2, #8
 80043dc:	409a      	lsls	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01a      	beq.n	800441c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d013      	beq.n	800441c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0204 	bic.w	r2, r2, #4
 8004402:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004408:	2208      	movs	r2, #8
 800440a:	409a      	lsls	r2, r3
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	f043 0201 	orr.w	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004420:	2201      	movs	r2, #1
 8004422:	409a      	lsls	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d012      	beq.n	8004452 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	2201      	movs	r2, #1
 8004440:	409a      	lsls	r2, r3
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	f043 0202 	orr.w	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004456:	2204      	movs	r2, #4
 8004458:	409a      	lsls	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d012      	beq.n	8004488 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	2204      	movs	r2, #4
 8004476:	409a      	lsls	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	f043 0204 	orr.w	r2, r3, #4
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	2210      	movs	r2, #16
 800448e:	409a      	lsls	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d043      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03c      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044aa:	2210      	movs	r2, #16
 80044ac:	409a      	lsls	r2, r3
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d018      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d108      	bne.n	80044e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d024      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	4798      	blx	r3
 80044de:	e01f      	b.n	8004520 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
 80044f0:	e016      	b.n	8004520 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d107      	bne.n	8004510 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0208 	bic.w	r2, r2, #8
 800450e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004524:	2220      	movs	r2, #32
 8004526:	409a      	lsls	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 808e 	beq.w	800464e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8086 	beq.w	800464e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004546:	2220      	movs	r2, #32
 8004548:	409a      	lsls	r2, r3
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b05      	cmp	r3, #5
 8004558:	d136      	bne.n	80045c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0216 	bic.w	r2, r2, #22
 8004568:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004578:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <HAL_DMA_IRQHandler+0x1da>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0208 	bic.w	r2, r2, #8
 8004598:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459e:	223f      	movs	r2, #63	; 0x3f
 80045a0:	409a      	lsls	r2, r3
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d07d      	beq.n	80046ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	4798      	blx	r3
        }
        return;
 80045c6:	e078      	b.n	80046ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01c      	beq.n	8004610 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d108      	bne.n	80045f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d030      	beq.n	800464e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
 80045f4:	e02b      	b.n	800464e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d027      	beq.n	800464e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	4798      	blx	r3
 8004606:	e022      	b.n	800464e <HAL_DMA_IRQHandler+0x29e>
 8004608:	20000008 	.word	0x20000008
 800460c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10f      	bne.n	800463e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0210 	bic.w	r2, r2, #16
 800462c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	2b00      	cmp	r3, #0
 8004654:	d032      	beq.n	80046bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d022      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2205      	movs	r2, #5
 8004666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	3301      	adds	r3, #1
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	429a      	cmp	r2, r3
 8004684:	d307      	bcc.n	8004696 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f2      	bne.n	800467a <HAL_DMA_IRQHandler+0x2ca>
 8004694:	e000      	b.n	8004698 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004696:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
 80046b8:	e000      	b.n	80046bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80046ba:	bf00      	nop
    }
  }
}
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop

080046c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d108      	bne.n	8004704 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004702:	e007      	b.n	8004714 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	3b10      	subs	r3, #16
 8004730:	4a14      	ldr	r2, [pc, #80]	; (8004784 <DMA_CalcBaseAndBitshift+0x64>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800473a:	4a13      	ldr	r2, [pc, #76]	; (8004788 <DMA_CalcBaseAndBitshift+0x68>)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b03      	cmp	r3, #3
 800474c:	d909      	bls.n	8004762 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	1d1a      	adds	r2, r3, #4
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	659a      	str	r2, [r3, #88]	; 0x58
 8004760:	e007      	b.n	8004772 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800476a:	f023 0303 	bic.w	r3, r3, #3
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	aaaaaaab 	.word	0xaaaaaaab
 8004788:	08015ba4 	.word	0x08015ba4

0800478c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d11f      	bne.n	80047e6 <DMA_CheckFifoParam+0x5a>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d856      	bhi.n	800485a <DMA_CheckFifoParam+0xce>
 80047ac:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <DMA_CheckFifoParam+0x28>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047c5 	.word	0x080047c5
 80047b8:	080047d7 	.word	0x080047d7
 80047bc:	080047c5 	.word	0x080047c5
 80047c0:	0800485b 	.word	0x0800485b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d046      	beq.n	800485e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d4:	e043      	b.n	800485e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047de:	d140      	bne.n	8004862 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e4:	e03d      	b.n	8004862 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ee:	d121      	bne.n	8004834 <DMA_CheckFifoParam+0xa8>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d837      	bhi.n	8004866 <DMA_CheckFifoParam+0xda>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <DMA_CheckFifoParam+0x70>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	0800480d 	.word	0x0800480d
 8004800:	08004813 	.word	0x08004813
 8004804:	0800480d 	.word	0x0800480d
 8004808:	08004825 	.word	0x08004825
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
      break;
 8004810:	e030      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d025      	beq.n	800486a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004822:	e022      	b.n	800486a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800482c:	d11f      	bne.n	800486e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004832:	e01c      	b.n	800486e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d903      	bls.n	8004842 <DMA_CheckFifoParam+0xb6>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d003      	beq.n	8004848 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004840:	e018      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
      break;
 8004846:	e015      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00e      	beq.n	8004872 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      break;
 8004858:	e00b      	b.n	8004872 <DMA_CheckFifoParam+0xe6>
      break;
 800485a:	bf00      	nop
 800485c:	e00a      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 800485e:	bf00      	nop
 8004860:	e008      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 8004862:	bf00      	nop
 8004864:	e006      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 8004866:	bf00      	nop
 8004868:	e004      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 800486a:	bf00      	nop
 800486c:	e002      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;   
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 8004872:	bf00      	nop
    }
  } 
  
  return status; 
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop

08004884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	; 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004896:	2300      	movs	r3, #0
 8004898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	e159      	b.n	8004b54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048a0:	2201      	movs	r2, #1
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	f040 8148 	bne.w	8004b4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d005      	beq.n	80048d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d130      	bne.n	8004938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	2203      	movs	r2, #3
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800490c:	2201      	movs	r2, #1
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 0201 	and.w	r2, r3, #1
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b03      	cmp	r3, #3
 8004942:	d017      	beq.n	8004974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2203      	movs	r2, #3
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4013      	ands	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d123      	bne.n	80049c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	08da      	lsrs	r2, r3, #3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3208      	adds	r2, #8
 8004988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	220f      	movs	r2, #15
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	08da      	lsrs	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3208      	adds	r2, #8
 80049c2:	69b9      	ldr	r1, [r7, #24]
 80049c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	2203      	movs	r2, #3
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	43db      	mvns	r3, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4013      	ands	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 0203 	and.w	r2, r3, #3
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80a2 	beq.w	8004b4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	4b57      	ldr	r3, [pc, #348]	; (8004b6c <HAL_GPIO_Init+0x2e8>)
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	4a56      	ldr	r2, [pc, #344]	; (8004b6c <HAL_GPIO_Init+0x2e8>)
 8004a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a18:	6453      	str	r3, [r2, #68]	; 0x44
 8004a1a:	4b54      	ldr	r3, [pc, #336]	; (8004b6c <HAL_GPIO_Init+0x2e8>)
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a26:	4a52      	ldr	r2, [pc, #328]	; (8004b70 <HAL_GPIO_Init+0x2ec>)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	089b      	lsrs	r3, r3, #2
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	220f      	movs	r2, #15
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a49      	ldr	r2, [pc, #292]	; (8004b74 <HAL_GPIO_Init+0x2f0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d019      	beq.n	8004a86 <HAL_GPIO_Init+0x202>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a48      	ldr	r2, [pc, #288]	; (8004b78 <HAL_GPIO_Init+0x2f4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d013      	beq.n	8004a82 <HAL_GPIO_Init+0x1fe>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a47      	ldr	r2, [pc, #284]	; (8004b7c <HAL_GPIO_Init+0x2f8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00d      	beq.n	8004a7e <HAL_GPIO_Init+0x1fa>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a46      	ldr	r2, [pc, #280]	; (8004b80 <HAL_GPIO_Init+0x2fc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d007      	beq.n	8004a7a <HAL_GPIO_Init+0x1f6>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a45      	ldr	r2, [pc, #276]	; (8004b84 <HAL_GPIO_Init+0x300>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d101      	bne.n	8004a76 <HAL_GPIO_Init+0x1f2>
 8004a72:	2304      	movs	r3, #4
 8004a74:	e008      	b.n	8004a88 <HAL_GPIO_Init+0x204>
 8004a76:	2307      	movs	r3, #7
 8004a78:	e006      	b.n	8004a88 <HAL_GPIO_Init+0x204>
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e004      	b.n	8004a88 <HAL_GPIO_Init+0x204>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e002      	b.n	8004a88 <HAL_GPIO_Init+0x204>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_GPIO_Init+0x204>
 8004a86:	2300      	movs	r3, #0
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	f002 0203 	and.w	r2, r2, #3
 8004a8e:	0092      	lsls	r2, r2, #2
 8004a90:	4093      	lsls	r3, r2
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a98:	4935      	ldr	r1, [pc, #212]	; (8004b70 <HAL_GPIO_Init+0x2ec>)
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	089b      	lsrs	r3, r3, #2
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004aa6:	4b38      	ldr	r3, [pc, #224]	; (8004b88 <HAL_GPIO_Init+0x304>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aca:	4a2f      	ldr	r2, [pc, #188]	; (8004b88 <HAL_GPIO_Init+0x304>)
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ad0:	4b2d      	ldr	r3, [pc, #180]	; (8004b88 <HAL_GPIO_Init+0x304>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004af4:	4a24      	ldr	r2, [pc, #144]	; (8004b88 <HAL_GPIO_Init+0x304>)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <HAL_GPIO_Init+0x304>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	43db      	mvns	r3, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4013      	ands	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b1e:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <HAL_GPIO_Init+0x304>)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b24:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <HAL_GPIO_Init+0x304>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b48:	4a0f      	ldr	r2, [pc, #60]	; (8004b88 <HAL_GPIO_Init+0x304>)
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3301      	adds	r3, #1
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	2b0f      	cmp	r3, #15
 8004b58:	f67f aea2 	bls.w	80048a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	3724      	adds	r7, #36	; 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40013800 	.word	0x40013800
 8004b74:	40020000 	.word	0x40020000
 8004b78:	40020400 	.word	0x40020400
 8004b7c:	40020800 	.word	0x40020800
 8004b80:	40020c00 	.word	0x40020c00
 8004b84:	40021000 	.word	0x40021000
 8004b88:	40013c00 	.word	0x40013c00

08004b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	887b      	ldrh	r3, [r7, #2]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
 8004ba8:	e001      	b.n	8004bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004baa:	2300      	movs	r3, #0
 8004bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	807b      	strh	r3, [r7, #2]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bcc:	787b      	ldrb	r3, [r7, #1]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bd8:	e003      	b.n	8004be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bda:	887b      	ldrh	r3, [r7, #2]
 8004bdc:	041a      	lsls	r2, r3, #16
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	619a      	str	r2, [r3, #24]
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004bfa:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d006      	beq.n	8004c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c06:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fd fda8 	bl	8002764 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40013c00 	.word	0x40013c00

08004c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e12b      	b.n	8004e8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc ff92 	bl	8001b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c84:	f000 fd30 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8004c88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4a81      	ldr	r2, [pc, #516]	; (8004e94 <HAL_I2C_Init+0x274>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d807      	bhi.n	8004ca4 <HAL_I2C_Init+0x84>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a80      	ldr	r2, [pc, #512]	; (8004e98 <HAL_I2C_Init+0x278>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	bf94      	ite	ls
 8004c9c:	2301      	movls	r3, #1
 8004c9e:	2300      	movhi	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	e006      	b.n	8004cb2 <HAL_I2C_Init+0x92>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a7d      	ldr	r2, [pc, #500]	; (8004e9c <HAL_I2C_Init+0x27c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	bf94      	ite	ls
 8004cac:	2301      	movls	r3, #1
 8004cae:	2300      	movhi	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e0e7      	b.n	8004e8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a78      	ldr	r2, [pc, #480]	; (8004ea0 <HAL_I2C_Init+0x280>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	0c9b      	lsrs	r3, r3, #18
 8004cc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4a6a      	ldr	r2, [pc, #424]	; (8004e94 <HAL_I2C_Init+0x274>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d802      	bhi.n	8004cf4 <HAL_I2C_Init+0xd4>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	e009      	b.n	8004d08 <HAL_I2C_Init+0xe8>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	4a69      	ldr	r2, [pc, #420]	; (8004ea4 <HAL_I2C_Init+0x284>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	099b      	lsrs	r3, r3, #6
 8004d06:	3301      	adds	r3, #1
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	495c      	ldr	r1, [pc, #368]	; (8004e94 <HAL_I2C_Init+0x274>)
 8004d24:	428b      	cmp	r3, r1
 8004d26:	d819      	bhi.n	8004d5c <HAL_I2C_Init+0x13c>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1e59      	subs	r1, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d36:	1c59      	adds	r1, r3, #1
 8004d38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d3c:	400b      	ands	r3, r1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_I2C_Init+0x138>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1e59      	subs	r1, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d50:	3301      	adds	r3, #1
 8004d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d56:	e051      	b.n	8004dfc <HAL_I2C_Init+0x1dc>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	e04f      	b.n	8004dfc <HAL_I2C_Init+0x1dc>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d111      	bne.n	8004d88 <HAL_I2C_Init+0x168>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	1e58      	subs	r0, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6859      	ldr	r1, [r3, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	440b      	add	r3, r1
 8004d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d76:	3301      	adds	r3, #1
 8004d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e012      	b.n	8004dae <HAL_I2C_Init+0x18e>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1e58      	subs	r0, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6859      	ldr	r1, [r3, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	0099      	lsls	r1, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d9e:	3301      	adds	r3, #1
 8004da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf0c      	ite	eq
 8004da8:	2301      	moveq	r3, #1
 8004daa:	2300      	movne	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_I2C_Init+0x196>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e022      	b.n	8004dfc <HAL_I2C_Init+0x1dc>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10e      	bne.n	8004ddc <HAL_I2C_Init+0x1bc>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1e58      	subs	r0, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	440b      	add	r3, r1
 8004dcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dda:	e00f      	b.n	8004dfc <HAL_I2C_Init+0x1dc>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	1e58      	subs	r0, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6859      	ldr	r1, [r3, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	0099      	lsls	r1, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004df2:	3301      	adds	r3, #1
 8004df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	6809      	ldr	r1, [r1, #0]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69da      	ldr	r2, [r3, #28]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6911      	ldr	r1, [r2, #16]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68d2      	ldr	r2, [r2, #12]
 8004e36:	4311      	orrs	r1, r2
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	000186a0 	.word	0x000186a0
 8004e98:	001e847f 	.word	0x001e847f
 8004e9c:	003d08ff 	.word	0x003d08ff
 8004ea0:	431bde83 	.word	0x431bde83
 8004ea4:	10624dd3 	.word	0x10624dd3

08004ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e264      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d075      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ec6:	4ba3      	ldr	r3, [pc, #652]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d00c      	beq.n	8004eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ed2:	4ba0      	ldr	r3, [pc, #640]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d112      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ede:	4b9d      	ldr	r3, [pc, #628]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	4b99      	ldr	r3, [pc, #612]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d05b      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x108>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d157      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e23f      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d106      	bne.n	8004f1c <HAL_RCC_OscConfig+0x74>
 8004f0e:	4b91      	ldr	r3, [pc, #580]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a90      	ldr	r2, [pc, #576]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e01d      	b.n	8004f58 <HAL_RCC_OscConfig+0xb0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x98>
 8004f26:	4b8b      	ldr	r3, [pc, #556]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a8a      	ldr	r2, [pc, #552]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4b88      	ldr	r3, [pc, #544]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a87      	ldr	r2, [pc, #540]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e00b      	b.n	8004f58 <HAL_RCC_OscConfig+0xb0>
 8004f40:	4b84      	ldr	r3, [pc, #528]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a83      	ldr	r2, [pc, #524]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	4b81      	ldr	r3, [pc, #516]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a80      	ldr	r2, [pc, #512]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f60:	f7fe fbec 	bl	800373c <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fe fbe8 	bl	800373c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e204      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b76      	ldr	r3, [pc, #472]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0xc0>
 8004f86:	e014      	b.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f88:	f7fe fbd8 	bl	800373c <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f90:	f7fe fbd4 	bl	800373c <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	; 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e1f0      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa2:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0xe8>
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d063      	beq.n	8005086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fbe:	4b65      	ldr	r3, [pc, #404]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fca:	4b62      	ldr	r3, [pc, #392]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d11c      	bne.n	8005010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fd6:	4b5f      	ldr	r3, [pc, #380]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d116      	bne.n	8005010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	4b5c      	ldr	r3, [pc, #368]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_RCC_OscConfig+0x152>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e1c4      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b56      	ldr	r3, [pc, #344]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4952      	ldr	r1, [pc, #328]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	e03a      	b.n	8005086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005018:	4b4f      	ldr	r3, [pc, #316]	; (8005158 <HAL_RCC_OscConfig+0x2b0>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fe fb8d 	bl	800373c <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005026:	f7fe fb89 	bl	800373c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e1a5      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005038:	4b46      	ldr	r3, [pc, #280]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b43      	ldr	r3, [pc, #268]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4940      	ldr	r1, [pc, #256]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]
 8005058:	e015      	b.n	8005086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800505a:	4b3f      	ldr	r3, [pc, #252]	; (8005158 <HAL_RCC_OscConfig+0x2b0>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7fe fb6c 	bl	800373c <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005068:	f7fe fb68 	bl	800373c <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e184      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507a:	4b36      	ldr	r3, [pc, #216]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d030      	beq.n	80050f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509a:	4b30      	ldr	r3, [pc, #192]	; (800515c <HAL_RCC_OscConfig+0x2b4>)
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fe fb4c 	bl	800373c <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fe fb48 	bl	800373c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e164      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ba:	4b26      	ldr	r3, [pc, #152]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x200>
 80050c6:	e015      	b.n	80050f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c8:	4b24      	ldr	r3, [pc, #144]	; (800515c <HAL_RCC_OscConfig+0x2b4>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ce:	f7fe fb35 	bl	800373c <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d6:	f7fe fb31 	bl	800373c <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e14d      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e8:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 80050ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f0      	bne.n	80050d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80a0 	beq.w	8005242 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005106:	4b13      	ldr	r3, [pc, #76]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10f      	bne.n	8005132 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	4a0e      	ldr	r2, [pc, #56]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 800511c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005120:	6413      	str	r3, [r2, #64]	; 0x40
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512a:	60bb      	str	r3, [r7, #8]
 800512c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800512e:	2301      	movs	r3, #1
 8005130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCC_OscConfig+0x2b8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d121      	bne.n	8005182 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <HAL_RCC_OscConfig+0x2b8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a07      	ldr	r2, [pc, #28]	; (8005160 <HAL_RCC_OscConfig+0x2b8>)
 8005144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800514a:	f7fe faf7 	bl	800373c <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005150:	e011      	b.n	8005176 <HAL_RCC_OscConfig+0x2ce>
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	42470000 	.word	0x42470000
 800515c:	42470e80 	.word	0x42470e80
 8005160:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005164:	f7fe faea 	bl	800373c <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e106      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	4b85      	ldr	r3, [pc, #532]	; (800538c <HAL_RCC_OscConfig+0x4e4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d106      	bne.n	8005198 <HAL_RCC_OscConfig+0x2f0>
 800518a:	4b81      	ldr	r3, [pc, #516]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a80      	ldr	r2, [pc, #512]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6713      	str	r3, [r2, #112]	; 0x70
 8005196:	e01c      	b.n	80051d2 <HAL_RCC_OscConfig+0x32a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b05      	cmp	r3, #5
 800519e:	d10c      	bne.n	80051ba <HAL_RCC_OscConfig+0x312>
 80051a0:	4b7b      	ldr	r3, [pc, #492]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a4:	4a7a      	ldr	r2, [pc, #488]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	6713      	str	r3, [r2, #112]	; 0x70
 80051ac:	4b78      	ldr	r3, [pc, #480]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	4a77      	ldr	r2, [pc, #476]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	6713      	str	r3, [r2, #112]	; 0x70
 80051b8:	e00b      	b.n	80051d2 <HAL_RCC_OscConfig+0x32a>
 80051ba:	4b75      	ldr	r3, [pc, #468]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	4a74      	ldr	r2, [pc, #464]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	6713      	str	r3, [r2, #112]	; 0x70
 80051c6:	4b72      	ldr	r3, [pc, #456]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	4a71      	ldr	r2, [pc, #452]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d015      	beq.n	8005206 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051da:	f7fe faaf 	bl	800373c <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fe faab 	bl	800373c <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0c5      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f8:	4b65      	ldr	r3, [pc, #404]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ee      	beq.n	80051e2 <HAL_RCC_OscConfig+0x33a>
 8005204:	e014      	b.n	8005230 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005206:	f7fe fa99 	bl	800373c <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520c:	e00a      	b.n	8005224 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fe fa95 	bl	800373c <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e0af      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005224:	4b5a      	ldr	r3, [pc, #360]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1ee      	bne.n	800520e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005236:	4b56      	ldr	r3, [pc, #344]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	4a55      	ldr	r2, [pc, #340]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 800523c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 809b 	beq.w	8005382 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800524c:	4b50      	ldr	r3, [pc, #320]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	2b08      	cmp	r3, #8
 8005256:	d05c      	beq.n	8005312 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d141      	bne.n	80052e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005260:	4b4c      	ldr	r3, [pc, #304]	; (8005394 <HAL_RCC_OscConfig+0x4ec>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005266:	f7fe fa69 	bl	800373c <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800526e:	f7fe fa65 	bl	800373c <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e081      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005280:	4b43      	ldr	r3, [pc, #268]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	019b      	lsls	r3, r3, #6
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	3b01      	subs	r3, #1
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	061b      	lsls	r3, r3, #24
 80052b0:	4937      	ldr	r1, [pc, #220]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b6:	4b37      	ldr	r3, [pc, #220]	; (8005394 <HAL_RCC_OscConfig+0x4ec>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fe fa3e 	bl	800373c <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fe fa3a 	bl	800373c <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e056      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d6:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0x41c>
 80052e2:	e04e      	b.n	8005382 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e4:	4b2b      	ldr	r3, [pc, #172]	; (8005394 <HAL_RCC_OscConfig+0x4ec>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ea:	f7fe fa27 	bl	800373c <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f2:	f7fe fa23 	bl	800373c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e03f      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005304:	4b22      	ldr	r3, [pc, #136]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f0      	bne.n	80052f2 <HAL_RCC_OscConfig+0x44a>
 8005310:	e037      	b.n	8005382 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e032      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800531e:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <HAL_RCC_OscConfig+0x4e8>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d028      	beq.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d121      	bne.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d11a      	bne.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800534e:	4013      	ands	r3, r2
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005354:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005356:	4293      	cmp	r3, r2
 8005358:	d111      	bne.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	085b      	lsrs	r3, r3, #1
 8005366:	3b01      	subs	r3, #1
 8005368:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d107      	bne.n	800537e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800537a:	429a      	cmp	r2, r3
 800537c:	d001      	beq.n	8005382 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40007000 	.word	0x40007000
 8005390:	40023800 	.word	0x40023800
 8005394:	42470060 	.word	0x42470060

08005398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0cc      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053ac:	4b68      	ldr	r3, [pc, #416]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d90c      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ba:	4b65      	ldr	r3, [pc, #404]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b63      	ldr	r3, [pc, #396]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0b8      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053ec:	4b59      	ldr	r3, [pc, #356]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a58      	ldr	r2, [pc, #352]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005404:	4b53      	ldr	r3, [pc, #332]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	4a52      	ldr	r2, [pc, #328]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800540e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005410:	4b50      	ldr	r3, [pc, #320]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	494d      	ldr	r1, [pc, #308]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d044      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005436:	4b47      	ldr	r3, [pc, #284]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d119      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e07f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d003      	beq.n	8005456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005452:	2b03      	cmp	r3, #3
 8005454:	d107      	bne.n	8005466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005456:	4b3f      	ldr	r3, [pc, #252]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e06f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005466:	4b3b      	ldr	r3, [pc, #236]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e067      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005476:	4b37      	ldr	r3, [pc, #220]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f023 0203 	bic.w	r2, r3, #3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	4934      	ldr	r1, [pc, #208]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	4313      	orrs	r3, r2
 8005486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005488:	f7fe f958 	bl	800373c <HAL_GetTick>
 800548c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	e00a      	b.n	80054a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005490:	f7fe f954 	bl	800373c <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	f241 3288 	movw	r2, #5000	; 0x1388
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e04f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a6:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 020c 	and.w	r2, r3, #12
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d1eb      	bne.n	8005490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d20c      	bcs.n	80054e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c6:	4b22      	ldr	r3, [pc, #136]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b20      	ldr	r3, [pc, #128]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e032      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ec:	4b19      	ldr	r3, [pc, #100]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4916      	ldr	r1, [pc, #88]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800550a:	4b12      	ldr	r3, [pc, #72]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	490e      	ldr	r1, [pc, #56]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800551e:	f000 f821 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 8005522:	4602      	mov	r2, r0
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	490a      	ldr	r1, [pc, #40]	; (8005558 <HAL_RCC_ClockConfig+0x1c0>)
 8005530:	5ccb      	ldrb	r3, [r1, r3]
 8005532:	fa22 f303 	lsr.w	r3, r2, r3
 8005536:	4a09      	ldr	r2, [pc, #36]	; (800555c <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <HAL_RCC_ClockConfig+0x1c8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe f8b8 	bl	80036b4 <HAL_InitTick>

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40023c00 	.word	0x40023c00
 8005554:	40023800 	.word	0x40023800
 8005558:	08015b8c 	.word	0x08015b8c
 800555c:	20000008 	.word	0x20000008
 8005560:	2000000c 	.word	0x2000000c

08005564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005564:	b5b0      	push	{r4, r5, r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800556a:	2100      	movs	r1, #0
 800556c:	6079      	str	r1, [r7, #4]
 800556e:	2100      	movs	r1, #0
 8005570:	60f9      	str	r1, [r7, #12]
 8005572:	2100      	movs	r1, #0
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005576:	2100      	movs	r1, #0
 8005578:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800557a:	4952      	ldr	r1, [pc, #328]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800557c:	6889      	ldr	r1, [r1, #8]
 800557e:	f001 010c 	and.w	r1, r1, #12
 8005582:	2908      	cmp	r1, #8
 8005584:	d00d      	beq.n	80055a2 <HAL_RCC_GetSysClockFreq+0x3e>
 8005586:	2908      	cmp	r1, #8
 8005588:	f200 8094 	bhi.w	80056b4 <HAL_RCC_GetSysClockFreq+0x150>
 800558c:	2900      	cmp	r1, #0
 800558e:	d002      	beq.n	8005596 <HAL_RCC_GetSysClockFreq+0x32>
 8005590:	2904      	cmp	r1, #4
 8005592:	d003      	beq.n	800559c <HAL_RCC_GetSysClockFreq+0x38>
 8005594:	e08e      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005596:	4b4c      	ldr	r3, [pc, #304]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005598:	60bb      	str	r3, [r7, #8]
       break;
 800559a:	e08e      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800559c:	4b4b      	ldr	r3, [pc, #300]	; (80056cc <HAL_RCC_GetSysClockFreq+0x168>)
 800559e:	60bb      	str	r3, [r7, #8]
      break;
 80055a0:	e08b      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055a2:	4948      	ldr	r1, [pc, #288]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80055a4:	6849      	ldr	r1, [r1, #4]
 80055a6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80055aa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055ac:	4945      	ldr	r1, [pc, #276]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80055ae:	6849      	ldr	r1, [r1, #4]
 80055b0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80055b4:	2900      	cmp	r1, #0
 80055b6:	d024      	beq.n	8005602 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b8:	4942      	ldr	r1, [pc, #264]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80055ba:	6849      	ldr	r1, [r1, #4]
 80055bc:	0989      	lsrs	r1, r1, #6
 80055be:	4608      	mov	r0, r1
 80055c0:	f04f 0100 	mov.w	r1, #0
 80055c4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80055c8:	f04f 0500 	mov.w	r5, #0
 80055cc:	ea00 0204 	and.w	r2, r0, r4
 80055d0:	ea01 0305 	and.w	r3, r1, r5
 80055d4:	493d      	ldr	r1, [pc, #244]	; (80056cc <HAL_RCC_GetSysClockFreq+0x168>)
 80055d6:	fb01 f003 	mul.w	r0, r1, r3
 80055da:	2100      	movs	r1, #0
 80055dc:	fb01 f102 	mul.w	r1, r1, r2
 80055e0:	1844      	adds	r4, r0, r1
 80055e2:	493a      	ldr	r1, [pc, #232]	; (80056cc <HAL_RCC_GetSysClockFreq+0x168>)
 80055e4:	fba2 0101 	umull	r0, r1, r2, r1
 80055e8:	1863      	adds	r3, r4, r1
 80055ea:	4619      	mov	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	f7fb fa32 	bl	8000a5c <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4613      	mov	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e04a      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005602:	4b30      	ldr	r3, [pc, #192]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	099b      	lsrs	r3, r3, #6
 8005608:	461a      	mov	r2, r3
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	ea02 0400 	and.w	r4, r2, r0
 800561a:	ea03 0501 	and.w	r5, r3, r1
 800561e:	4620      	mov	r0, r4
 8005620:	4629      	mov	r1, r5
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	014b      	lsls	r3, r1, #5
 800562c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005630:	0142      	lsls	r2, r0, #5
 8005632:	4610      	mov	r0, r2
 8005634:	4619      	mov	r1, r3
 8005636:	1b00      	subs	r0, r0, r4
 8005638:	eb61 0105 	sbc.w	r1, r1, r5
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	018b      	lsls	r3, r1, #6
 8005646:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800564a:	0182      	lsls	r2, r0, #6
 800564c:	1a12      	subs	r2, r2, r0
 800564e:	eb63 0301 	sbc.w	r3, r3, r1
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f04f 0100 	mov.w	r1, #0
 800565a:	00d9      	lsls	r1, r3, #3
 800565c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005660:	00d0      	lsls	r0, r2, #3
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	1912      	adds	r2, r2, r4
 8005668:	eb45 0303 	adc.w	r3, r5, r3
 800566c:	f04f 0000 	mov.w	r0, #0
 8005670:	f04f 0100 	mov.w	r1, #0
 8005674:	0299      	lsls	r1, r3, #10
 8005676:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800567a:	0290      	lsls	r0, r2, #10
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4610      	mov	r0, r2
 8005682:	4619      	mov	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	461a      	mov	r2, r3
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	f7fb f9e6 	bl	8000a5c <__aeabi_uldivmod>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4613      	mov	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	3301      	adds	r3, #1
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	60bb      	str	r3, [r7, #8]
      break;
 80056b2:	e002      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b4:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x164>)
 80056b6:	60bb      	str	r3, [r7, #8]
      break;
 80056b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ba:	68bb      	ldr	r3, [r7, #8]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bdb0      	pop	{r4, r5, r7, pc}
 80056c4:	40023800 	.word	0x40023800
 80056c8:	00f42400 	.word	0x00f42400
 80056cc:	017d7840 	.word	0x017d7840

080056d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d4:	4b03      	ldr	r3, [pc, #12]	; (80056e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000008 	.word	0x20000008

080056e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056ec:	f7ff fff0 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	0a9b      	lsrs	r3, r3, #10
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	4903      	ldr	r1, [pc, #12]	; (800570c <HAL_RCC_GetPCLK1Freq+0x24>)
 80056fe:	5ccb      	ldrb	r3, [r1, r3]
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005704:	4618      	mov	r0, r3
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40023800 	.word	0x40023800
 800570c:	08015b9c 	.word	0x08015b9c

08005710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005714:	f7ff ffdc 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 8005718:	4602      	mov	r2, r0
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	0b5b      	lsrs	r3, r3, #13
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	4903      	ldr	r1, [pc, #12]	; (8005734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005726:	5ccb      	ldrb	r3, [r1, r3]
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800572c:	4618      	mov	r0, r3
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40023800 	.word	0x40023800
 8005734:	08015b9c 	.word	0x08015b9c

08005738 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d105      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800575c:	2b00      	cmp	r3, #0
 800575e:	d035      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005760:	4b67      	ldr	r3, [pc, #412]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005766:	f7fd ffe9 	bl	800373c <HAL_GetTick>
 800576a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800576e:	f7fd ffe5 	bl	800373c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e0ba      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005780:	4b60      	ldr	r3, [pc, #384]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f0      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	019a      	lsls	r2, r3, #6
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	071b      	lsls	r3, r3, #28
 8005798:	495a      	ldr	r1, [pc, #360]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057a0:	4b57      	ldr	r3, [pc, #348]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057a6:	f7fd ffc9 	bl	800373c <HAL_GetTick>
 80057aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057ae:	f7fd ffc5 	bl	800373c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e09a      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057c0:	4b50      	ldr	r3, [pc, #320]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8083 	beq.w	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	4b49      	ldr	r3, [pc, #292]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	4a48      	ldr	r2, [pc, #288]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ea:	4b46      	ldr	r3, [pc, #280]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80057f6:	4b44      	ldr	r3, [pc, #272]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a43      	ldr	r2, [pc, #268]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005800:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005802:	f7fd ff9b 	bl	800373c <HAL_GetTick>
 8005806:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005808:	e008      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800580a:	f7fd ff97 	bl	800373c <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e06c      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800581c:	4b3a      	ldr	r3, [pc, #232]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f0      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005828:	4b36      	ldr	r3, [pc, #216]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800582a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005830:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d02f      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	429a      	cmp	r2, r3
 8005844:	d028      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005846:	4b2f      	ldr	r3, [pc, #188]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005850:	4b2e      	ldr	r3, [pc, #184]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005856:	4b2d      	ldr	r3, [pc, #180]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800585c:	4a29      	ldr	r2, [pc, #164]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005862:	4b28      	ldr	r3, [pc, #160]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b01      	cmp	r3, #1
 800586c:	d114      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800586e:	f7fd ff65 	bl	800373c <HAL_GetTick>
 8005872:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005874:	e00a      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005876:	f7fd ff61 	bl	800373c <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f241 3288 	movw	r2, #5000	; 0x1388
 8005884:	4293      	cmp	r3, r2
 8005886:	d901      	bls.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e034      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800588c:	4b1d      	ldr	r3, [pc, #116]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0ee      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058a4:	d10d      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80058a6:	4b17      	ldr	r3, [pc, #92]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80058b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ba:	4912      	ldr	r1, [pc, #72]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	608b      	str	r3, [r1, #8]
 80058c0:	e005      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 80058c2:	4b10      	ldr	r3, [pc, #64]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	4a0f      	ldr	r2, [pc, #60]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80058cc:	6093      	str	r3, [r2, #8]
 80058ce:	4b0d      	ldr	r3, [pc, #52]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058da:	490a      	ldr	r1, [pc, #40]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	7c1a      	ldrb	r2, [r3, #16]
 80058f0:	4b07      	ldr	r3, [pc, #28]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058f2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	42470068 	.word	0x42470068
 8005904:	40023800 	.word	0x40023800
 8005908:	40007000 	.word	0x40007000
 800590c:	42470e40 	.word	0x42470e40
 8005910:	424711e0 	.word	0x424711e0

08005914 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e083      	b.n	8005a2e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	7f5b      	ldrb	r3, [r3, #29]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d105      	bne.n	800593c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fd fa60 	bl	8002dfc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	22ca      	movs	r2, #202	; 0xca
 8005948:	625a      	str	r2, [r3, #36]	; 0x24
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2253      	movs	r2, #83	; 0x53
 8005950:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f897 	bl	8005a86 <RTC_EnterInitMode>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d008      	beq.n	8005970 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	22ff      	movs	r2, #255	; 0xff
 8005964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2204      	movs	r2, #4
 800596a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e05e      	b.n	8005a2e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800597e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005982:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6899      	ldr	r1, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	431a      	orrs	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	68d2      	ldr	r2, [r2, #12]
 80059aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6919      	ldr	r1, [r3, #16]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	041a      	lsls	r2, r3, #16
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10e      	bne.n	80059fc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f829 	bl	8005a36 <HAL_RTC_WaitForSynchro>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d008      	beq.n	80059fc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	22ff      	movs	r2, #255	; 0xff
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2204      	movs	r2, #4
 80059f6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e018      	b.n	8005a2e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	22ff      	movs	r2, #255	; 0xff
 8005a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
  }
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a50:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a52:	f7fd fe73 	bl	800373c <HAL_GetTick>
 8005a56:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005a58:	e009      	b.n	8005a6e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a5a:	f7fd fe6f 	bl	800373c <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a68:	d901      	bls.n	8005a6e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e007      	b.n	8005a7e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ee      	beq.n	8005a5a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d119      	bne.n	8005ad4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aaa:	f7fd fe47 	bl	800373c <HAL_GetTick>
 8005aae:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005ab0:	e009      	b.n	8005ac6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ab2:	f7fd fe43 	bl	800373c <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ac0:	d901      	bls.n	8005ac6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e007      	b.n	8005ad6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0ee      	beq.n	8005ab2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e07b      	b.n	8005be8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d108      	bne.n	8005b0a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b00:	d009      	beq.n	8005b16 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	61da      	str	r2, [r3, #28]
 8005b08:	e005      	b.n	8005b16 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fd f9fb 	bl	8002f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	ea42 0103 	orr.w	r1, r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	0c1b      	lsrs	r3, r3, #16
 8005bb4:	f003 0104 	and.w	r1, r3, #4
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	f003 0210 	and.w	r2, r3, #16
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_SPI_Transmit+0x22>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e126      	b.n	8005e60 <HAL_SPI_Transmit+0x270>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c1a:	f7fd fd8f 	bl	800373c <HAL_GetTick>
 8005c1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c20:	88fb      	ldrh	r3, [r7, #6]
 8005c22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d002      	beq.n	8005c36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
 8005c32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c34:	e10b      	b.n	8005e4e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_SPI_Transmit+0x52>
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d102      	bne.n	8005c48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c46:	e102      	b.n	8005e4e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2203      	movs	r2, #3
 8005c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	88fa      	ldrh	r2, [r7, #6]
 8005c60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	88fa      	ldrh	r2, [r7, #6]
 8005c66:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8e:	d10f      	bne.n	8005cb0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b40      	cmp	r3, #64	; 0x40
 8005cbc:	d007      	beq.n	8005cce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ccc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd6:	d14b      	bne.n	8005d70 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <HAL_SPI_Transmit+0xf6>
 8005ce0:	8afb      	ldrh	r3, [r7, #22]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d13e      	bne.n	8005d64 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	881a      	ldrh	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	1c9a      	adds	r2, r3, #2
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d0a:	e02b      	b.n	8005d64 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d112      	bne.n	8005d40 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	881a      	ldrh	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	1c9a      	adds	r2, r3, #2
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d3e:	e011      	b.n	8005d64 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d40:	f7fd fcfc 	bl	800373c <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d803      	bhi.n	8005d58 <HAL_SPI_Transmit+0x168>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d102      	bne.n	8005d5e <HAL_SPI_Transmit+0x16e>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d102      	bne.n	8005d64 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d62:	e074      	b.n	8005e4e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1ce      	bne.n	8005d0c <HAL_SPI_Transmit+0x11c>
 8005d6e:	e04c      	b.n	8005e0a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <HAL_SPI_Transmit+0x18e>
 8005d78:	8afb      	ldrh	r3, [r7, #22]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d140      	bne.n	8005e00 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	330c      	adds	r3, #12
 8005d88:	7812      	ldrb	r2, [r2, #0]
 8005d8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005da4:	e02c      	b.n	8005e00 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d113      	bne.n	8005ddc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dda:	e011      	b.n	8005e00 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ddc:	f7fd fcae 	bl	800373c <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d803      	bhi.n	8005df4 <HAL_SPI_Transmit+0x204>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d102      	bne.n	8005dfa <HAL_SPI_Transmit+0x20a>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dfe:	e026      	b.n	8005e4e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1cd      	bne.n	8005da6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 fba0 	bl	8006554 <SPI_EndRxTxTransaction>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	77fb      	strb	r3, [r7, #31]
 8005e4a:	e000      	b.n	8005e4e <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3720      	adds	r7, #32
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08c      	sub	sp, #48	; 0x30
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e76:	2301      	movs	r3, #1
 8005e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_SPI_TransmitReceive+0x26>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e18a      	b.n	80061a4 <HAL_SPI_TransmitReceive+0x33c>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e96:	f7fd fc51 	bl	800373c <HAL_GetTick>
 8005e9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005eac:	887b      	ldrh	r3, [r7, #2]
 8005eae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d00f      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x70>
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ebe:	d107      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x68>
 8005ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d003      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ed6:	e15b      	b.n	8006190 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x82>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x82>
 8005ee4:	887b      	ldrh	r3, [r7, #2]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d103      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ef0:	e14e      	b.n	8006190 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d003      	beq.n	8005f06 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2205      	movs	r2, #5
 8005f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	887a      	ldrh	r2, [r7, #2]
 8005f16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	887a      	ldrh	r2, [r7, #2]
 8005f1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	887a      	ldrh	r2, [r7, #2]
 8005f28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	887a      	ldrh	r2, [r7, #2]
 8005f2e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	d007      	beq.n	8005f5a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f62:	d178      	bne.n	8006056 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <HAL_SPI_TransmitReceive+0x10a>
 8005f6c:	8b7b      	ldrh	r3, [r7, #26]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d166      	bne.n	8006040 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	881a      	ldrh	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	1c9a      	adds	r2, r3, #2
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f96:	e053      	b.n	8006040 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d11b      	bne.n	8005fde <HAL_SPI_TransmitReceive+0x176>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d016      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x176>
 8005fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d113      	bne.n	8005fde <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	881a      	ldrh	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	1c9a      	adds	r2, r3, #2
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d119      	bne.n	8006020 <HAL_SPI_TransmitReceive+0x1b8>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d014      	beq.n	8006020 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	b292      	uxth	r2, r2
 8006002:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	1c9a      	adds	r2, r3, #2
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800601c:	2301      	movs	r3, #1
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006020:	f7fd fb8c 	bl	800373c <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800602c:	429a      	cmp	r2, r3
 800602e:	d807      	bhi.n	8006040 <HAL_SPI_TransmitReceive+0x1d8>
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006036:	d003      	beq.n	8006040 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800603e:	e0a7      	b.n	8006190 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1a6      	bne.n	8005f98 <HAL_SPI_TransmitReceive+0x130>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1a1      	bne.n	8005f98 <HAL_SPI_TransmitReceive+0x130>
 8006054:	e07c      	b.n	8006150 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <HAL_SPI_TransmitReceive+0x1fc>
 800605e:	8b7b      	ldrh	r3, [r7, #26]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d16b      	bne.n	800613c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	330c      	adds	r3, #12
 800606e:	7812      	ldrb	r2, [r2, #0]
 8006070:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800608a:	e057      	b.n	800613c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d11c      	bne.n	80060d4 <HAL_SPI_TransmitReceive+0x26c>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d017      	beq.n	80060d4 <HAL_SPI_TransmitReceive+0x26c>
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d114      	bne.n	80060d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	7812      	ldrb	r2, [r2, #0]
 80060b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d119      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x2ae>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d014      	beq.n	8006116 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006112:	2301      	movs	r3, #1
 8006114:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006116:	f7fd fb11 	bl	800373c <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006122:	429a      	cmp	r2, r3
 8006124:	d803      	bhi.n	800612e <HAL_SPI_TransmitReceive+0x2c6>
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d102      	bne.n	8006134 <HAL_SPI_TransmitReceive+0x2cc>
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	2b00      	cmp	r3, #0
 8006132:	d103      	bne.n	800613c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800613a:	e029      	b.n	8006190 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1a2      	bne.n	800608c <HAL_SPI_TransmitReceive+0x224>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d19d      	bne.n	800608c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f9fd 	bl	8006554 <SPI_EndRxTxTransaction>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d006      	beq.n	800616e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800616c:	e010      	b.n	8006190 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	617b      	str	r3, [r7, #20]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	e000      	b.n	8006190 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800618e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3730      	adds	r7, #48	; 0x30
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	4613      	mov	r3, r2
 80061b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_SPI_Transmit_DMA+0x20>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e09b      	b.n	8006304 <HAL_SPI_Transmit_DMA+0x158>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d002      	beq.n	80061e6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
 80061e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061e4:	e089      	b.n	80062fa <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <HAL_SPI_Transmit_DMA+0x46>
 80061ec:	88fb      	ldrh	r3, [r7, #6]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d102      	bne.n	80061f8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061f6:	e080      	b.n	80062fa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2203      	movs	r2, #3
 80061fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	88fa      	ldrh	r2, [r7, #6]
 8006210:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	88fa      	ldrh	r2, [r7, #6]
 8006216:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800623e:	d10f      	bne.n	8006260 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800625e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006264:	4a29      	ldr	r2, [pc, #164]	; (800630c <HAL_SPI_Transmit_DMA+0x160>)
 8006266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626c:	4a28      	ldr	r2, [pc, #160]	; (8006310 <HAL_SPI_Transmit_DMA+0x164>)
 800626e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006274:	4a27      	ldr	r2, [pc, #156]	; (8006314 <HAL_SPI_Transmit_DMA+0x168>)
 8006276:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627c:	2200      	movs	r2, #0
 800627e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	4619      	mov	r1, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	330c      	adds	r3, #12
 8006290:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006296:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006298:	f7fe f832 	bl	8004300 <HAL_DMA_Start_IT>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00c      	beq.n	80062bc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a6:	f043 0210 	orr.w	r2, r3, #16
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80062ba:	e01e      	b.n	80062fa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	d007      	beq.n	80062da <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0220 	orr.w	r2, r2, #32
 80062e8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0202 	orr.w	r2, r2, #2
 80062f8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006302:	7dfb      	ldrb	r3, [r7, #23]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	080063e9 	.word	0x080063e9
 8006310:	08006341 	.word	0x08006341
 8006314:	08006405 	.word	0x08006405

08006318 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800634e:	f7fd f9f5 	bl	800373c <HAL_GetTick>
 8006352:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006362:	d03b      	beq.n	80063dc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0220 	bic.w	r2, r2, #32
 8006372:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0202 	bic.w	r2, r2, #2
 8006382:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	2164      	movs	r1, #100	; 0x64
 8006388:	6978      	ldr	r0, [r7, #20]
 800638a:	f000 f8e3 	bl	8006554 <SPI_EndRxTxTransaction>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006398:	f043 0220 	orr.w	r2, r3, #32
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2200      	movs	r2, #0
 80063c2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80063d4:	6978      	ldr	r0, [r7, #20]
 80063d6:	f7ff ffa9 	bl	800632c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80063da:	e002      	b.n	80063e2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80063dc:	6978      	ldr	r0, [r7, #20]
 80063de:	f7fc f9b1 	bl	8002744 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff ff8e 	bl	8006318 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0203 	bic.w	r2, r2, #3
 8006420:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006426:	f043 0210 	orr.w	r2, r3, #16
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f7ff ff78 	bl	800632c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800643c:	bf00      	nop
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006454:	f7fd f972 	bl	800373c <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	4413      	add	r3, r2
 8006462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006464:	f7fd f96a 	bl	800373c <HAL_GetTick>
 8006468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800646a:	4b39      	ldr	r3, [pc, #228]	; (8006550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	015b      	lsls	r3, r3, #5
 8006470:	0d1b      	lsrs	r3, r3, #20
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	fb02 f303 	mul.w	r3, r2, r3
 8006478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800647a:	e054      	b.n	8006526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006482:	d050      	beq.n	8006526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006484:	f7fd f95a 	bl	800373c <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	429a      	cmp	r2, r3
 8006492:	d902      	bls.n	800649a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d13d      	bne.n	8006516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064b2:	d111      	bne.n	80064d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064bc:	d004      	beq.n	80064c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c6:	d107      	bne.n	80064d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e0:	d10f      	bne.n	8006502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e017      	b.n	8006546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	3b01      	subs	r3, #1
 8006524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4013      	ands	r3, r2
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	429a      	cmp	r2, r3
 8006534:	bf0c      	ite	eq
 8006536:	2301      	moveq	r3, #1
 8006538:	2300      	movne	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	429a      	cmp	r2, r3
 8006542:	d19b      	bne.n	800647c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3720      	adds	r7, #32
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000008 	.word	0x20000008

08006554 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006560:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <SPI_EndRxTxTransaction+0x7c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1b      	ldr	r2, [pc, #108]	; (80065d4 <SPI_EndRxTxTransaction+0x80>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	0d5b      	lsrs	r3, r3, #21
 800656c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006570:	fb02 f303 	mul.w	r3, r2, r3
 8006574:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800657e:	d112      	bne.n	80065a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2200      	movs	r2, #0
 8006588:	2180      	movs	r1, #128	; 0x80
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f7ff ff5a 	bl	8006444 <SPI_WaitFlagStateUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d016      	beq.n	80065c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659a:	f043 0220 	orr.w	r2, r3, #32
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e00f      	b.n	80065c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065bc:	2b80      	cmp	r3, #128	; 0x80
 80065be:	d0f2      	beq.n	80065a6 <SPI_EndRxTxTransaction+0x52>
 80065c0:	e000      	b.n	80065c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80065c2:	bf00      	nop
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000008 	.word	0x20000008
 80065d4:	165e9f81 	.word	0x165e9f81

080065d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e097      	b.n	800671c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d106      	bne.n	8006606 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7fc ff33 	bl	800346c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2202      	movs	r2, #2
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6812      	ldr	r2, [r2, #0]
 8006618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800661c:	f023 0307 	bic.w	r3, r3, #7
 8006620:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3304      	adds	r3, #4
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f000 f907 	bl	8006840 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665a:	f023 0303 	bic.w	r3, r3, #3
 800665e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	4313      	orrs	r3, r2
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006678:	f023 030c 	bic.w	r3, r3, #12
 800667c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	4313      	orrs	r3, r2
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	011a      	lsls	r2, r3, #4
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	031b      	lsls	r3, r3, #12
 80066a8:	4313      	orrs	r3, r2
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	4313      	orrs	r3, r2
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006734:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800673c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006744:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800674c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d110      	bne.n	8006776 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d102      	bne.n	8006760 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800675a:	7b7b      	ldrb	r3, [r7, #13]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d001      	beq.n	8006764 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e069      	b.n	8006838 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006774:	e031      	b.n	80067da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b04      	cmp	r3, #4
 800677a:	d110      	bne.n	800679e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d102      	bne.n	8006788 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006782:	7b3b      	ldrb	r3, [r7, #12]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d001      	beq.n	800678c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e055      	b.n	8006838 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800679c:	e01d      	b.n	80067da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d108      	bne.n	80067b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d105      	bne.n	80067b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067aa:	7b7b      	ldrb	r3, [r7, #13]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d102      	bne.n	80067b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067b0:	7b3b      	ldrb	r3, [r7, #12]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d001      	beq.n	80067ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e03e      	b.n	8006838 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2202      	movs	r2, #2
 80067be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2202      	movs	r2, #2
 80067ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2202      	movs	r2, #2
 80067d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <HAL_TIM_Encoder_Start+0xc4>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d008      	beq.n	80067f8 <HAL_TIM_Encoder_Start+0xd4>
 80067e6:	e00f      	b.n	8006808 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2201      	movs	r2, #1
 80067ee:	2100      	movs	r1, #0
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f8a5 	bl	8006940 <TIM_CCxChannelCmd>
      break;
 80067f6:	e016      	b.n	8006826 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2201      	movs	r2, #1
 80067fe:	2104      	movs	r1, #4
 8006800:	4618      	mov	r0, r3
 8006802:	f000 f89d 	bl	8006940 <TIM_CCxChannelCmd>
      break;
 8006806:	e00e      	b.n	8006826 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2201      	movs	r2, #1
 800680e:	2100      	movs	r1, #0
 8006810:	4618      	mov	r0, r3
 8006812:	f000 f895 	bl	8006940 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2201      	movs	r2, #1
 800681c:	2104      	movs	r1, #4
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f88e 	bl	8006940 <TIM_CCxChannelCmd>
      break;
 8006824:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f042 0201 	orr.w	r2, r2, #1
 8006834:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a34      	ldr	r2, [pc, #208]	; (8006924 <TIM_Base_SetConfig+0xe4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00f      	beq.n	8006878 <TIM_Base_SetConfig+0x38>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685e:	d00b      	beq.n	8006878 <TIM_Base_SetConfig+0x38>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a31      	ldr	r2, [pc, #196]	; (8006928 <TIM_Base_SetConfig+0xe8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d007      	beq.n	8006878 <TIM_Base_SetConfig+0x38>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a30      	ldr	r2, [pc, #192]	; (800692c <TIM_Base_SetConfig+0xec>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_Base_SetConfig+0x38>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a2f      	ldr	r2, [pc, #188]	; (8006930 <TIM_Base_SetConfig+0xf0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d108      	bne.n	800688a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a25      	ldr	r2, [pc, #148]	; (8006924 <TIM_Base_SetConfig+0xe4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01b      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006898:	d017      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a22      	ldr	r2, [pc, #136]	; (8006928 <TIM_Base_SetConfig+0xe8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a21      	ldr	r2, [pc, #132]	; (800692c <TIM_Base_SetConfig+0xec>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00f      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a20      	ldr	r2, [pc, #128]	; (8006930 <TIM_Base_SetConfig+0xf0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00b      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a1f      	ldr	r2, [pc, #124]	; (8006934 <TIM_Base_SetConfig+0xf4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <TIM_Base_SetConfig+0xf8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_Base_SetConfig+0x8a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a1d      	ldr	r2, [pc, #116]	; (800693c <TIM_Base_SetConfig+0xfc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d108      	bne.n	80068dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a08      	ldr	r2, [pc, #32]	; (8006924 <TIM_Base_SetConfig+0xe4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d103      	bne.n	8006910 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	615a      	str	r2, [r3, #20]
}
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40010000 	.word	0x40010000
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800
 8006930:	40000c00 	.word	0x40000c00
 8006934:	40014000 	.word	0x40014000
 8006938:	40014400 	.word	0x40014400
 800693c:	40014800 	.word	0x40014800

08006940 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 031f 	and.w	r3, r3, #31
 8006952:	2201      	movs	r2, #1
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a1a      	ldr	r2, [r3, #32]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	43db      	mvns	r3, r3
 8006962:	401a      	ands	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a1a      	ldr	r2, [r3, #32]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f003 031f 	and.w	r3, r3, #31
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	fa01 f303 	lsl.w	r3, r1, r3
 8006978:	431a      	orrs	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e050      	b.n	8006a46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1c      	ldr	r2, [pc, #112]	; (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d018      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f0:	d013      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a18      	ldr	r2, [pc, #96]	; (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00e      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a16      	ldr	r2, [pc, #88]	; (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d009      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a15      	ldr	r2, [pc, #84]	; (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d004      	beq.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a13      	ldr	r2, [pc, #76]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d10c      	bne.n	8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40010000 	.word	0x40010000
 8006a58:	40000400 	.word	0x40000400
 8006a5c:	40000800 	.word	0x40000800
 8006a60:	40000c00 	.word	0x40000c00
 8006a64:	40014000 	.word	0x40014000

08006a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e03f      	b.n	8006afa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fc fd7c 	bl	800358c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2224      	movs	r2, #36	; 0x24
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f929 	bl	8006d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	695a      	ldr	r2, [r3, #20]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b08a      	sub	sp, #40	; 0x28
 8006b06:	af02      	add	r7, sp, #8
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	603b      	str	r3, [r7, #0]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d17c      	bne.n	8006c1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <HAL_UART_Transmit+0x2c>
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e075      	b.n	8006c1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_UART_Transmit+0x3e>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e06e      	b.n	8006c1e <HAL_UART_Transmit+0x11c>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2221      	movs	r2, #33	; 0x21
 8006b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b56:	f7fc fdf1 	bl	800373c <HAL_GetTick>
 8006b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	88fa      	ldrh	r2, [r7, #6]
 8006b60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	88fa      	ldrh	r2, [r7, #6]
 8006b66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b70:	d108      	bne.n	8006b84 <HAL_UART_Transmit+0x82>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d104      	bne.n	8006b84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	61bb      	str	r3, [r7, #24]
 8006b82:	e003      	b.n	8006b8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b94:	e02a      	b.n	8006bec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2180      	movs	r1, #128	; 0x80
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f840 	bl	8006c26 <UART_WaitOnFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e036      	b.n	8006c1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	3302      	adds	r3, #2
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	e007      	b.n	8006bde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	781a      	ldrb	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1cf      	bne.n	8006b96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2140      	movs	r1, #64	; 0x40
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f810 	bl	8006c26 <UART_WaitOnFlagUntilTimeout>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e006      	b.n	8006c1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	e000      	b.n	8006c1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c1c:	2302      	movs	r3, #2
  }
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b090      	sub	sp, #64	; 0x40
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	603b      	str	r3, [r7, #0]
 8006c32:	4613      	mov	r3, r2
 8006c34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c36:	e050      	b.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d04c      	beq.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d007      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c46:	f7fc fd79 	bl	800373c <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d241      	bcs.n	8006cda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	330c      	adds	r3, #12
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	330c      	adds	r3, #12
 8006c74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c76:	637a      	str	r2, [r7, #52]	; 0x34
 8006c78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e5      	bne.n	8006c56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3314      	adds	r3, #20
 8006c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	613b      	str	r3, [r7, #16]
   return(result);
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3314      	adds	r3, #20
 8006ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006caa:	623a      	str	r2, [r7, #32]
 8006cac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	69f9      	ldr	r1, [r7, #28]
 8006cb0:	6a3a      	ldr	r2, [r7, #32]
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e5      	bne.n	8006c8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e00f      	b.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	bf0c      	ite	eq
 8006cea:	2301      	moveq	r3, #1
 8006cec:	2300      	movne	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	79fb      	ldrb	r3, [r7, #7]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d09f      	beq.n	8006c38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3740      	adds	r7, #64	; 0x40
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d08:	b09f      	sub	sp, #124	; 0x7c
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1a:	68d9      	ldr	r1, [r3, #12]
 8006d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	ea40 0301 	orr.w	r3, r0, r1
 8006d24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	431a      	orrs	r2, r3
 8006d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d48:	f021 010c 	bic.w	r1, r1, #12
 8006d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d52:	430b      	orrs	r3, r1
 8006d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d62:	6999      	ldr	r1, [r3, #24]
 8006d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	ea40 0301 	orr.w	r3, r0, r1
 8006d6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4bc5      	ldr	r3, [pc, #788]	; (8007088 <UART_SetConfig+0x384>)
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d004      	beq.n	8006d82 <UART_SetConfig+0x7e>
 8006d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	4bc3      	ldr	r3, [pc, #780]	; (800708c <UART_SetConfig+0x388>)
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d103      	bne.n	8006d8a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d82:	f7fe fcc5 	bl	8005710 <HAL_RCC_GetPCLK2Freq>
 8006d86:	6778      	str	r0, [r7, #116]	; 0x74
 8006d88:	e002      	b.n	8006d90 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d8a:	f7fe fcad 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8006d8e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d98:	f040 80b6 	bne.w	8006f08 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d9e:	461c      	mov	r4, r3
 8006da0:	f04f 0500 	mov.w	r5, #0
 8006da4:	4622      	mov	r2, r4
 8006da6:	462b      	mov	r3, r5
 8006da8:	1891      	adds	r1, r2, r2
 8006daa:	6439      	str	r1, [r7, #64]	; 0x40
 8006dac:	415b      	adcs	r3, r3
 8006dae:	647b      	str	r3, [r7, #68]	; 0x44
 8006db0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006db4:	1912      	adds	r2, r2, r4
 8006db6:	eb45 0303 	adc.w	r3, r5, r3
 8006dba:	f04f 0000 	mov.w	r0, #0
 8006dbe:	f04f 0100 	mov.w	r1, #0
 8006dc2:	00d9      	lsls	r1, r3, #3
 8006dc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dc8:	00d0      	lsls	r0, r2, #3
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	1911      	adds	r1, r2, r4
 8006dd0:	6639      	str	r1, [r7, #96]	; 0x60
 8006dd2:	416b      	adcs	r3, r5
 8006dd4:	667b      	str	r3, [r7, #100]	; 0x64
 8006dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	1891      	adds	r1, r2, r2
 8006de2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006de4:	415b      	adcs	r3, r3
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006dec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006df0:	f7f9 fe34 	bl	8000a5c <__aeabi_uldivmod>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4ba5      	ldr	r3, [pc, #660]	; (8007090 <UART_SetConfig+0x38c>)
 8006dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	011e      	lsls	r6, r3, #4
 8006e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e04:	461c      	mov	r4, r3
 8006e06:	f04f 0500 	mov.w	r5, #0
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	462b      	mov	r3, r5
 8006e0e:	1891      	adds	r1, r2, r2
 8006e10:	6339      	str	r1, [r7, #48]	; 0x30
 8006e12:	415b      	adcs	r3, r3
 8006e14:	637b      	str	r3, [r7, #52]	; 0x34
 8006e16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e1a:	1912      	adds	r2, r2, r4
 8006e1c:	eb45 0303 	adc.w	r3, r5, r3
 8006e20:	f04f 0000 	mov.w	r0, #0
 8006e24:	f04f 0100 	mov.w	r1, #0
 8006e28:	00d9      	lsls	r1, r3, #3
 8006e2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e2e:	00d0      	lsls	r0, r2, #3
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	1911      	adds	r1, r2, r4
 8006e36:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e38:	416b      	adcs	r3, r5
 8006e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	461a      	mov	r2, r3
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	1891      	adds	r1, r2, r2
 8006e48:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e4a:	415b      	adcs	r3, r3
 8006e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006e56:	f7f9 fe01 	bl	8000a5c <__aeabi_uldivmod>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4b8c      	ldr	r3, [pc, #560]	; (8007090 <UART_SetConfig+0x38c>)
 8006e60:	fba3 1302 	umull	r1, r3, r3, r2
 8006e64:	095b      	lsrs	r3, r3, #5
 8006e66:	2164      	movs	r1, #100	; 0x64
 8006e68:	fb01 f303 	mul.w	r3, r1, r3
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	3332      	adds	r3, #50	; 0x32
 8006e72:	4a87      	ldr	r2, [pc, #540]	; (8007090 <UART_SetConfig+0x38c>)
 8006e74:	fba2 2303 	umull	r2, r3, r2, r3
 8006e78:	095b      	lsrs	r3, r3, #5
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e80:	441e      	add	r6, r3
 8006e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e84:	4618      	mov	r0, r3
 8006e86:	f04f 0100 	mov.w	r1, #0
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	1894      	adds	r4, r2, r2
 8006e90:	623c      	str	r4, [r7, #32]
 8006e92:	415b      	adcs	r3, r3
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
 8006e96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e9a:	1812      	adds	r2, r2, r0
 8006e9c:	eb41 0303 	adc.w	r3, r1, r3
 8006ea0:	f04f 0400 	mov.w	r4, #0
 8006ea4:	f04f 0500 	mov.w	r5, #0
 8006ea8:	00dd      	lsls	r5, r3, #3
 8006eaa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006eae:	00d4      	lsls	r4, r2, #3
 8006eb0:	4622      	mov	r2, r4
 8006eb2:	462b      	mov	r3, r5
 8006eb4:	1814      	adds	r4, r2, r0
 8006eb6:	653c      	str	r4, [r7, #80]	; 0x50
 8006eb8:	414b      	adcs	r3, r1
 8006eba:	657b      	str	r3, [r7, #84]	; 0x54
 8006ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f04f 0300 	mov.w	r3, #0
 8006ec6:	1891      	adds	r1, r2, r2
 8006ec8:	61b9      	str	r1, [r7, #24]
 8006eca:	415b      	adcs	r3, r3
 8006ecc:	61fb      	str	r3, [r7, #28]
 8006ece:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ed2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006ed6:	f7f9 fdc1 	bl	8000a5c <__aeabi_uldivmod>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4b6c      	ldr	r3, [pc, #432]	; (8007090 <UART_SetConfig+0x38c>)
 8006ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	2164      	movs	r1, #100	; 0x64
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	3332      	adds	r3, #50	; 0x32
 8006ef2:	4a67      	ldr	r2, [pc, #412]	; (8007090 <UART_SetConfig+0x38c>)
 8006ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	f003 0207 	and.w	r2, r3, #7
 8006efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4432      	add	r2, r6
 8006f04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f06:	e0b9      	b.n	800707c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f0a:	461c      	mov	r4, r3
 8006f0c:	f04f 0500 	mov.w	r5, #0
 8006f10:	4622      	mov	r2, r4
 8006f12:	462b      	mov	r3, r5
 8006f14:	1891      	adds	r1, r2, r2
 8006f16:	6139      	str	r1, [r7, #16]
 8006f18:	415b      	adcs	r3, r3
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f20:	1912      	adds	r2, r2, r4
 8006f22:	eb45 0303 	adc.w	r3, r5, r3
 8006f26:	f04f 0000 	mov.w	r0, #0
 8006f2a:	f04f 0100 	mov.w	r1, #0
 8006f2e:	00d9      	lsls	r1, r3, #3
 8006f30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f34:	00d0      	lsls	r0, r2, #3
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	eb12 0804 	adds.w	r8, r2, r4
 8006f3e:	eb43 0905 	adc.w	r9, r3, r5
 8006f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f04f 0100 	mov.w	r1, #0
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	008b      	lsls	r3, r1, #2
 8006f56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f5a:	0082      	lsls	r2, r0, #2
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	4649      	mov	r1, r9
 8006f60:	f7f9 fd7c 	bl	8000a5c <__aeabi_uldivmod>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4b49      	ldr	r3, [pc, #292]	; (8007090 <UART_SetConfig+0x38c>)
 8006f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	011e      	lsls	r6, r3, #4
 8006f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f74:	4618      	mov	r0, r3
 8006f76:	f04f 0100 	mov.w	r1, #0
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	1894      	adds	r4, r2, r2
 8006f80:	60bc      	str	r4, [r7, #8]
 8006f82:	415b      	adcs	r3, r3
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f8a:	1812      	adds	r2, r2, r0
 8006f8c:	eb41 0303 	adc.w	r3, r1, r3
 8006f90:	f04f 0400 	mov.w	r4, #0
 8006f94:	f04f 0500 	mov.w	r5, #0
 8006f98:	00dd      	lsls	r5, r3, #3
 8006f9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f9e:	00d4      	lsls	r4, r2, #3
 8006fa0:	4622      	mov	r2, r4
 8006fa2:	462b      	mov	r3, r5
 8006fa4:	1814      	adds	r4, r2, r0
 8006fa6:	64bc      	str	r4, [r7, #72]	; 0x48
 8006fa8:	414b      	adcs	r3, r1
 8006faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f04f 0100 	mov.w	r1, #0
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	008b      	lsls	r3, r1, #2
 8006fc0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fc4:	0082      	lsls	r2, r0, #2
 8006fc6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006fca:	f7f9 fd47 	bl	8000a5c <__aeabi_uldivmod>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4b2f      	ldr	r3, [pc, #188]	; (8007090 <UART_SetConfig+0x38c>)
 8006fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd8:	095b      	lsrs	r3, r3, #5
 8006fda:	2164      	movs	r1, #100	; 0x64
 8006fdc:	fb01 f303 	mul.w	r3, r1, r3
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	3332      	adds	r3, #50	; 0x32
 8006fe6:	4a2a      	ldr	r2, [pc, #168]	; (8007090 <UART_SetConfig+0x38c>)
 8006fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ff2:	441e      	add	r6, r3
 8006ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f04f 0100 	mov.w	r1, #0
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	1894      	adds	r4, r2, r2
 8007002:	603c      	str	r4, [r7, #0]
 8007004:	415b      	adcs	r3, r3
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800700c:	1812      	adds	r2, r2, r0
 800700e:	eb41 0303 	adc.w	r3, r1, r3
 8007012:	f04f 0400 	mov.w	r4, #0
 8007016:	f04f 0500 	mov.w	r5, #0
 800701a:	00dd      	lsls	r5, r3, #3
 800701c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007020:	00d4      	lsls	r4, r2, #3
 8007022:	4622      	mov	r2, r4
 8007024:	462b      	mov	r3, r5
 8007026:	eb12 0a00 	adds.w	sl, r2, r0
 800702a:	eb43 0b01 	adc.w	fp, r3, r1
 800702e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	4618      	mov	r0, r3
 8007034:	f04f 0100 	mov.w	r1, #0
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	008b      	lsls	r3, r1, #2
 8007042:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007046:	0082      	lsls	r2, r0, #2
 8007048:	4650      	mov	r0, sl
 800704a:	4659      	mov	r1, fp
 800704c:	f7f9 fd06 	bl	8000a5c <__aeabi_uldivmod>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4b0e      	ldr	r3, [pc, #56]	; (8007090 <UART_SetConfig+0x38c>)
 8007056:	fba3 1302 	umull	r1, r3, r3, r2
 800705a:	095b      	lsrs	r3, r3, #5
 800705c:	2164      	movs	r1, #100	; 0x64
 800705e:	fb01 f303 	mul.w	r3, r1, r3
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	3332      	adds	r3, #50	; 0x32
 8007068:	4a09      	ldr	r2, [pc, #36]	; (8007090 <UART_SetConfig+0x38c>)
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	f003 020f 	and.w	r2, r3, #15
 8007074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4432      	add	r2, r6
 800707a:	609a      	str	r2, [r3, #8]
}
 800707c:	bf00      	nop
 800707e:	377c      	adds	r7, #124	; 0x7c
 8007080:	46bd      	mov	sp, r7
 8007082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007086:	bf00      	nop
 8007088:	40011000 	.word	0x40011000
 800708c:	40011400 	.word	0x40011400
 8007090:	51eb851f 	.word	0x51eb851f

08007094 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007098:	4904      	ldr	r1, [pc, #16]	; (80070ac <MX_FATFS_Init+0x18>)
 800709a:	4805      	ldr	r0, [pc, #20]	; (80070b0 <MX_FATFS_Init+0x1c>)
 800709c:	f002 fd6e 	bl	8009b7c <FATFS_LinkDriver>
 80070a0:	4603      	mov	r3, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	4b03      	ldr	r3, [pc, #12]	; (80070b4 <MX_FATFS_Init+0x20>)
 80070a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80070a8:	bf00      	nop
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	2000a944 	.word	0x2000a944
 80070b0:	20000014 	.word	0x20000014
 80070b4:	2000a948 	.word	0x2000a948

080070b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80070bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80070be:	4618      	mov	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fa f95f 	bl	8001398 <SD_disk_initialize>
 80070da:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fa fa3d 	bl	8001570 <SD_disk_status>
 80070f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	4603      	mov	r3, r0
 800710e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8007110:	7bf8      	ldrb	r0, [r7, #15]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	f7fa fa40 	bl	800159c <SD_disk_read>
 800711c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	4603      	mov	r3, r0
 8007134:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8007136:	7bf8      	ldrb	r0, [r7, #15]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	f7fa fa97 	bl	8001670 <SD_disk_write>
 8007142:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	603a      	str	r2, [r7, #0]
 8007156:	71fb      	strb	r3, [r7, #7]
 8007158:	460b      	mov	r3, r1
 800715a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800715c:	79b9      	ldrb	r1, [r7, #6]
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	4618      	mov	r0, r3
 8007164:	f7fa fb08 	bl	8001778 <SD_disk_ioctl>
 8007168:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	4a08      	ldr	r2, [pc, #32]	; (80071a4 <disk_status+0x30>)
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	79fa      	ldrb	r2, [r7, #7]
 800718c:	4905      	ldr	r1, [pc, #20]	; (80071a4 <disk_status+0x30>)
 800718e:	440a      	add	r2, r1
 8007190:	7a12      	ldrb	r2, [r2, #8]
 8007192:	4610      	mov	r0, r2
 8007194:	4798      	blx	r3
 8007196:	4603      	mov	r3, r0
 8007198:	73fb      	strb	r3, [r7, #15]
  return stat;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	2000a0f8 	.word	0x2000a0f8

080071a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	4a0d      	ldr	r2, [pc, #52]	; (80071f0 <disk_initialize+0x48>)
 80071ba:	5cd3      	ldrb	r3, [r2, r3]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d111      	bne.n	80071e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	4a0b      	ldr	r2, [pc, #44]	; (80071f0 <disk_initialize+0x48>)
 80071c4:	2101      	movs	r1, #1
 80071c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	4a09      	ldr	r2, [pc, #36]	; (80071f0 <disk_initialize+0x48>)
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	79fa      	ldrb	r2, [r7, #7]
 80071d6:	4906      	ldr	r1, [pc, #24]	; (80071f0 <disk_initialize+0x48>)
 80071d8:	440a      	add	r2, r1
 80071da:	7a12      	ldrb	r2, [r2, #8]
 80071dc:	4610      	mov	r0, r2
 80071de:	4798      	blx	r3
 80071e0:	4603      	mov	r3, r0
 80071e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	2000a0f8 	.word	0x2000a0f8

080071f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80071f4:	b590      	push	{r4, r7, lr}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	4603      	mov	r3, r0
 8007202:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007204:	7bfb      	ldrb	r3, [r7, #15]
 8007206:	4a0a      	ldr	r2, [pc, #40]	; (8007230 <disk_read+0x3c>)
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	689c      	ldr	r4, [r3, #8]
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	4a07      	ldr	r2, [pc, #28]	; (8007230 <disk_read+0x3c>)
 8007214:	4413      	add	r3, r2
 8007216:	7a18      	ldrb	r0, [r3, #8]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	47a0      	blx	r4
 8007220:	4603      	mov	r3, r0
 8007222:	75fb      	strb	r3, [r7, #23]
  return res;
 8007224:	7dfb      	ldrb	r3, [r7, #23]
}
 8007226:	4618      	mov	r0, r3
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	bd90      	pop	{r4, r7, pc}
 800722e:	bf00      	nop
 8007230:	2000a0f8 	.word	0x2000a0f8

08007234 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007234:	b590      	push	{r4, r7, lr}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	603b      	str	r3, [r7, #0]
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	4a0a      	ldr	r2, [pc, #40]	; (8007270 <disk_write+0x3c>)
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	68dc      	ldr	r4, [r3, #12]
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	4a07      	ldr	r2, [pc, #28]	; (8007270 <disk_write+0x3c>)
 8007254:	4413      	add	r3, r2
 8007256:	7a18      	ldrb	r0, [r3, #8]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	47a0      	blx	r4
 8007260:	4603      	mov	r3, r0
 8007262:	75fb      	strb	r3, [r7, #23]
  return res;
 8007264:	7dfb      	ldrb	r3, [r7, #23]
}
 8007266:	4618      	mov	r0, r3
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	bd90      	pop	{r4, r7, pc}
 800726e:	bf00      	nop
 8007270:	2000a0f8 	.word	0x2000a0f8

08007274 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	603a      	str	r2, [r7, #0]
 800727e:	71fb      	strb	r3, [r7, #7]
 8007280:	460b      	mov	r3, r1
 8007282:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	4a09      	ldr	r2, [pc, #36]	; (80072ac <disk_ioctl+0x38>)
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	79fa      	ldrb	r2, [r7, #7]
 8007292:	4906      	ldr	r1, [pc, #24]	; (80072ac <disk_ioctl+0x38>)
 8007294:	440a      	add	r2, r1
 8007296:	7a10      	ldrb	r0, [r2, #8]
 8007298:	79b9      	ldrb	r1, [r7, #6]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	4798      	blx	r3
 800729e:	4603      	mov	r3, r0
 80072a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	2000a0f8 	.word	0x2000a0f8

080072b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3301      	adds	r3, #1
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80072c0:	89fb      	ldrh	r3, [r7, #14]
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	b21a      	sxth	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b21b      	sxth	r3, r3
 80072cc:	4313      	orrs	r3, r2
 80072ce:	b21b      	sxth	r3, r3
 80072d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80072d2:	89fb      	ldrh	r3, [r7, #14]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3303      	adds	r3, #3
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	021b      	lsls	r3, r3, #8
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	3202      	adds	r2, #2
 80072f8:	7812      	ldrb	r2, [r2, #0]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	021b      	lsls	r3, r3, #8
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	3201      	adds	r2, #1
 8007306:	7812      	ldrb	r2, [r2, #0]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	021b      	lsls	r3, r3, #8
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7812      	ldrb	r2, [r2, #0]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
	return rv;
 8007318:	68fb      	ldr	r3, [r7, #12]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	460b      	mov	r3, r1
 8007330:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	887a      	ldrh	r2, [r7, #2]
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	887b      	ldrh	r3, [r7, #2]
 8007340:	0a1b      	lsrs	r3, r3, #8
 8007342:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	887a      	ldrh	r2, [r7, #2]
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	701a      	strb	r2, [r3, #0]
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	701a      	strb	r2, [r3, #0]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	0a1b      	lsrs	r3, r3, #8
 8007376:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	607a      	str	r2, [r7, #4]
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	0a1b      	lsrs	r3, r3, #8
 800739a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	607a      	str	r2, [r7, #4]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	b2d2      	uxtb	r2, r2
 80073a6:	701a      	strb	r2, [r3, #0]
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00d      	beq.n	80073ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	1c53      	adds	r3, r2, #1
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	1c59      	adds	r1, r3, #1
 80073d8:	6179      	str	r1, [r7, #20]
 80073da:	7812      	ldrb	r2, [r2, #0]
 80073dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	607b      	str	r3, [r7, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f1      	bne.n	80073ce <mem_cpy+0x1a>
	}
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80073f6:	b480      	push	{r7}
 80073f8:	b087      	sub	sp, #28
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	617a      	str	r2, [r7, #20]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3b01      	subs	r3, #1
 8007416:	607b      	str	r3, [r7, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1f3      	bne.n	8007406 <mem_set+0x10>
}
 800741e:	bf00      	nop
 8007420:	bf00      	nop
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800742c:	b480      	push	{r7}
 800742e:	b089      	sub	sp, #36	; 0x24
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	61fa      	str	r2, [r7, #28]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	4619      	mov	r1, r3
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	61ba      	str	r2, [r7, #24]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	1acb      	subs	r3, r1, r3
 8007458:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3b01      	subs	r3, #1
 800745e:	607b      	str	r3, [r7, #4]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <mem_cmp+0x40>
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0eb      	beq.n	8007444 <mem_cmp+0x18>

	return r;
 800746c:	697b      	ldr	r3, [r7, #20]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3724      	adds	r7, #36	; 0x24
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007484:	e002      	b.n	800748c <chk_chr+0x12>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3301      	adds	r3, #1
 800748a:	607b      	str	r3, [r7, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <chk_chr+0x26>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	461a      	mov	r2, r3
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	4293      	cmp	r3, r2
 800749e:	d1f2      	bne.n	8007486 <chk_chr+0xc>
	return *str;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	781b      	ldrb	r3, [r3, #0]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80074ba:	2300      	movs	r3, #0
 80074bc:	60bb      	str	r3, [r7, #8]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e029      	b.n	8007518 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80074c4:	4a27      	ldr	r2, [pc, #156]	; (8007564 <chk_lock+0xb4>)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	4413      	add	r3, r2
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01d      	beq.n	800750e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074d2:	4a24      	ldr	r2, [pc, #144]	; (8007564 <chk_lock+0xb4>)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	4413      	add	r3, r2
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d116      	bne.n	8007512 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80074e4:	4a1f      	ldr	r2, [pc, #124]	; (8007564 <chk_lock+0xb4>)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	4413      	add	r3, r2
 80074ec:	3304      	adds	r3, #4
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d10c      	bne.n	8007512 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074f8:	4a1a      	ldr	r2, [pc, #104]	; (8007564 <chk_lock+0xb4>)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	4413      	add	r3, r2
 8007500:	3308      	adds	r3, #8
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007508:	429a      	cmp	r2, r3
 800750a:	d102      	bne.n	8007512 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800750c:	e007      	b.n	800751e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800750e:	2301      	movs	r3, #1
 8007510:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3301      	adds	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d9d2      	bls.n	80074c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d109      	bne.n	8007538 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d102      	bne.n	8007530 <chk_lock+0x80>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b02      	cmp	r3, #2
 800752e:	d101      	bne.n	8007534 <chk_lock+0x84>
 8007530:	2300      	movs	r3, #0
 8007532:	e010      	b.n	8007556 <chk_lock+0xa6>
 8007534:	2312      	movs	r3, #18
 8007536:	e00e      	b.n	8007556 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d108      	bne.n	8007550 <chk_lock+0xa0>
 800753e:	4a09      	ldr	r2, [pc, #36]	; (8007564 <chk_lock+0xb4>)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	4413      	add	r3, r2
 8007546:	330c      	adds	r3, #12
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800754e:	d101      	bne.n	8007554 <chk_lock+0xa4>
 8007550:	2310      	movs	r3, #16
 8007552:	e000      	b.n	8007556 <chk_lock+0xa6>
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	2000a0d8 	.word	0x2000a0d8

08007568 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800756e:	2300      	movs	r3, #0
 8007570:	607b      	str	r3, [r7, #4]
 8007572:	e002      	b.n	800757a <enq_lock+0x12>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3301      	adds	r3, #1
 8007578:	607b      	str	r3, [r7, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d806      	bhi.n	800758e <enq_lock+0x26>
 8007580:	4a09      	ldr	r2, [pc, #36]	; (80075a8 <enq_lock+0x40>)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	4413      	add	r3, r2
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1f2      	bne.n	8007574 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b02      	cmp	r3, #2
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	2000a0d8 	.word	0x2000a0d8

080075ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	e01f      	b.n	80075fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80075bc:	4a41      	ldr	r2, [pc, #260]	; (80076c4 <inc_lock+0x118>)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	4413      	add	r3, r2
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d113      	bne.n	80075f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80075ce:	4a3d      	ldr	r2, [pc, #244]	; (80076c4 <inc_lock+0x118>)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	4413      	add	r3, r2
 80075d6:	3304      	adds	r3, #4
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80075de:	429a      	cmp	r2, r3
 80075e0:	d109      	bne.n	80075f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80075e2:	4a38      	ldr	r2, [pc, #224]	; (80076c4 <inc_lock+0x118>)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	4413      	add	r3, r2
 80075ea:	3308      	adds	r3, #8
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d006      	beq.n	8007604 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3301      	adds	r3, #1
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d9dc      	bls.n	80075bc <inc_lock+0x10>
 8007602:	e000      	b.n	8007606 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007604:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b02      	cmp	r3, #2
 800760a:	d132      	bne.n	8007672 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	e002      	b.n	8007618 <inc_lock+0x6c>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3301      	adds	r3, #1
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d806      	bhi.n	800762c <inc_lock+0x80>
 800761e:	4a29      	ldr	r2, [pc, #164]	; (80076c4 <inc_lock+0x118>)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	4413      	add	r3, r2
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1f2      	bne.n	8007612 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d101      	bne.n	8007636 <inc_lock+0x8a>
 8007632:	2300      	movs	r3, #0
 8007634:	e040      	b.n	80076b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	4922      	ldr	r1, [pc, #136]	; (80076c4 <inc_lock+0x118>)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	011b      	lsls	r3, r3, #4
 8007640:	440b      	add	r3, r1
 8007642:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	491e      	ldr	r1, [pc, #120]	; (80076c4 <inc_lock+0x118>)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	440b      	add	r3, r1
 8007650:	3304      	adds	r3, #4
 8007652:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	695a      	ldr	r2, [r3, #20]
 8007658:	491a      	ldr	r1, [pc, #104]	; (80076c4 <inc_lock+0x118>)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	011b      	lsls	r3, r3, #4
 800765e:	440b      	add	r3, r1
 8007660:	3308      	adds	r3, #8
 8007662:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007664:	4a17      	ldr	r2, [pc, #92]	; (80076c4 <inc_lock+0x118>)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	4413      	add	r3, r2
 800766c:	330c      	adds	r3, #12
 800766e:	2200      	movs	r2, #0
 8007670:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d009      	beq.n	800768c <inc_lock+0xe0>
 8007678:	4a12      	ldr	r2, [pc, #72]	; (80076c4 <inc_lock+0x118>)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	4413      	add	r3, r2
 8007680:	330c      	adds	r3, #12
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <inc_lock+0xe0>
 8007688:	2300      	movs	r3, #0
 800768a:	e015      	b.n	80076b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d108      	bne.n	80076a4 <inc_lock+0xf8>
 8007692:	4a0c      	ldr	r2, [pc, #48]	; (80076c4 <inc_lock+0x118>)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	4413      	add	r3, r2
 800769a:	330c      	adds	r3, #12
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	3301      	adds	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	e001      	b.n	80076a8 <inc_lock+0xfc>
 80076a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076a8:	4906      	ldr	r1, [pc, #24]	; (80076c4 <inc_lock+0x118>)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	011b      	lsls	r3, r3, #4
 80076ae:	440b      	add	r3, r1
 80076b0:	330c      	adds	r3, #12
 80076b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	2000a0d8 	.word	0x2000a0d8

080076c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	607b      	str	r3, [r7, #4]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d825      	bhi.n	8007728 <dec_lock+0x60>
		n = Files[i].ctr;
 80076dc:	4a17      	ldr	r2, [pc, #92]	; (800773c <dec_lock+0x74>)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	4413      	add	r3, r2
 80076e4:	330c      	adds	r3, #12
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80076ea:	89fb      	ldrh	r3, [r7, #14]
 80076ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076f0:	d101      	bne.n	80076f6 <dec_lock+0x2e>
 80076f2:	2300      	movs	r3, #0
 80076f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80076f6:	89fb      	ldrh	r3, [r7, #14]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <dec_lock+0x3a>
 80076fc:	89fb      	ldrh	r3, [r7, #14]
 80076fe:	3b01      	subs	r3, #1
 8007700:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007702:	4a0e      	ldr	r2, [pc, #56]	; (800773c <dec_lock+0x74>)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	4413      	add	r3, r2
 800770a:	330c      	adds	r3, #12
 800770c:	89fa      	ldrh	r2, [r7, #14]
 800770e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007710:	89fb      	ldrh	r3, [r7, #14]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d105      	bne.n	8007722 <dec_lock+0x5a>
 8007716:	4a09      	ldr	r2, [pc, #36]	; (800773c <dec_lock+0x74>)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	4413      	add	r3, r2
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	737b      	strb	r3, [r7, #13]
 8007726:	e001      	b.n	800772c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007728:	2302      	movs	r3, #2
 800772a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800772c:	7b7b      	ldrb	r3, [r7, #13]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	2000a0d8 	.word	0x2000a0d8

08007740 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	e010      	b.n	8007770 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800774e:	4a0d      	ldr	r2, [pc, #52]	; (8007784 <clear_lock+0x44>)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	4413      	add	r3, r2
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	429a      	cmp	r2, r3
 800775c:	d105      	bne.n	800776a <clear_lock+0x2a>
 800775e:	4a09      	ldr	r2, [pc, #36]	; (8007784 <clear_lock+0x44>)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	4413      	add	r3, r2
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d9eb      	bls.n	800774e <clear_lock+0xe>
	}
}
 8007776:	bf00      	nop
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	2000a0d8 	.word	0x2000a0d8

08007788 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	78db      	ldrb	r3, [r3, #3]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d034      	beq.n	8007806 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	7858      	ldrb	r0, [r3, #1]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077ac:	2301      	movs	r3, #1
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	f7ff fd40 	bl	8007234 <disk_write>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	73fb      	strb	r3, [r7, #15]
 80077be:	e022      	b.n	8007806 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	1ad2      	subs	r2, r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d217      	bcs.n	8007806 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	789b      	ldrb	r3, [r3, #2]
 80077da:	613b      	str	r3, [r7, #16]
 80077dc:	e010      	b.n	8007800 <sync_window+0x78>
					wsect += fs->fsize;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	4413      	add	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	7858      	ldrb	r0, [r3, #1]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077f2:	2301      	movs	r3, #1
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	f7ff fd1d 	bl	8007234 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	613b      	str	r3, [r7, #16]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d8eb      	bhi.n	80077de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007806:	7bfb      	ldrb	r3, [r7, #15]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d01b      	beq.n	8007860 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff ffad 	bl	8007788 <sync_window>
 800782e:	4603      	mov	r3, r0
 8007830:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d113      	bne.n	8007860 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	7858      	ldrb	r0, [r3, #1]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007842:	2301      	movs	r3, #1
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	f7ff fcd5 	bl	80071f4 <disk_read>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007850:	f04f 33ff 	mov.w	r3, #4294967295
 8007854:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007856:	2301      	movs	r3, #1
 8007858:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff ff87 	bl	8007788 <sync_window>
 800787a:	4603      	mov	r3, r0
 800787c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d158      	bne.n	8007936 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b03      	cmp	r3, #3
 800788a:	d148      	bne.n	800791e <sync_fs+0xb2>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	791b      	ldrb	r3, [r3, #4]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d144      	bne.n	800791e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3330      	adds	r3, #48	; 0x30
 8007898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800789c:	2100      	movs	r1, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff fda9 	bl	80073f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3330      	adds	r3, #48	; 0x30
 80078a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078ac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff fd38 	bl	8007326 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3330      	adds	r3, #48	; 0x30
 80078ba:	4921      	ldr	r1, [pc, #132]	; (8007940 <sync_fs+0xd4>)
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff fd4d 	bl	800735c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3330      	adds	r3, #48	; 0x30
 80078c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80078ca:	491e      	ldr	r1, [pc, #120]	; (8007944 <sync_fs+0xd8>)
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff fd45 	bl	800735c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3330      	adds	r3, #48	; 0x30
 80078d6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	4619      	mov	r1, r3
 80078e0:	4610      	mov	r0, r2
 80078e2:	f7ff fd3b 	bl	800735c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3330      	adds	r3, #48	; 0x30
 80078ea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7ff fd31 	bl	800735c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	7858      	ldrb	r0, [r3, #1]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007912:	2301      	movs	r3, #1
 8007914:	f7ff fc8e 	bl	8007234 <disk_write>
			fs->fsi_flag = 0;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2200      	movs	r2, #0
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff fca4 	bl	8007274 <disk_ioctl>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <sync_fs+0xca>
 8007932:	2301      	movs	r3, #1
 8007934:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007936:	7bfb      	ldrb	r3, [r7, #15]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	41615252 	.word	0x41615252
 8007944:	61417272 	.word	0x61417272

08007948 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	3b02      	subs	r3, #2
 8007956:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	3b02      	subs	r3, #2
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d301      	bcc.n	8007968 <clust2sect+0x20>
 8007964:	2300      	movs	r3, #0
 8007966:	e008      	b.n	800797a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	895b      	ldrh	r3, [r3, #10]
 800796c:	461a      	mov	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	fb03 f202 	mul.w	r2, r3, r2
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007978:	4413      	add	r3, r2
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b086      	sub	sp, #24
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d904      	bls.n	80079a6 <get_fat+0x20>
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d302      	bcc.n	80079ac <get_fat+0x26>
		val = 1;	/* Internal error */
 80079a6:	2301      	movs	r3, #1
 80079a8:	617b      	str	r3, [r7, #20]
 80079aa:	e08f      	b.n	8007acc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80079ac:	f04f 33ff 	mov.w	r3, #4294967295
 80079b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d062      	beq.n	8007a80 <get_fat+0xfa>
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	dc7c      	bgt.n	8007ab8 <get_fat+0x132>
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d002      	beq.n	80079c8 <get_fat+0x42>
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d042      	beq.n	8007a4c <get_fat+0xc6>
 80079c6:	e077      	b.n	8007ab8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	085b      	lsrs	r3, r3, #1
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	4413      	add	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	6a1a      	ldr	r2, [r3, #32]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	0a5b      	lsrs	r3, r3, #9
 80079de:	4413      	add	r3, r2
 80079e0:	4619      	mov	r1, r3
 80079e2:	6938      	ldr	r0, [r7, #16]
 80079e4:	f7ff ff14 	bl	8007810 <move_window>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d167      	bne.n	8007abe <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	60fa      	str	r2, [r7, #12]
 80079f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4413      	add	r3, r2
 80079fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	6a1a      	ldr	r2, [r3, #32]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	0a5b      	lsrs	r3, r3, #9
 8007a0a:	4413      	add	r3, r2
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6938      	ldr	r0, [r7, #16]
 8007a10:	f7ff fefe 	bl	8007810 <move_window>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d153      	bne.n	8007ac2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4413      	add	r3, r2
 8007a24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <get_fat+0xbc>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	091b      	lsrs	r3, r3, #4
 8007a40:	e002      	b.n	8007a48 <get_fat+0xc2>
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a48:	617b      	str	r3, [r7, #20]
			break;
 8007a4a:	e03f      	b.n	8007acc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	6a1a      	ldr	r2, [r3, #32]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	0a1b      	lsrs	r3, r3, #8
 8007a54:	4413      	add	r3, r2
 8007a56:	4619      	mov	r1, r3
 8007a58:	6938      	ldr	r0, [r7, #16]
 8007a5a:	f7ff fed9 	bl	8007810 <move_window>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d130      	bne.n	8007ac6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007a72:	4413      	add	r3, r2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff fc1b 	bl	80072b0 <ld_word>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	617b      	str	r3, [r7, #20]
			break;
 8007a7e:	e025      	b.n	8007acc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	6a1a      	ldr	r2, [r3, #32]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	09db      	lsrs	r3, r3, #7
 8007a88:	4413      	add	r3, r2
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6938      	ldr	r0, [r7, #16]
 8007a8e:	f7ff febf 	bl	8007810 <move_window>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d118      	bne.n	8007aca <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007aa6:	4413      	add	r3, r2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fc19 	bl	80072e0 <ld_dword>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ab4:	617b      	str	r3, [r7, #20]
			break;
 8007ab6:	e009      	b.n	8007acc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ab8:	2301      	movs	r3, #1
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	e006      	b.n	8007acc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007abe:	bf00      	nop
 8007ac0:	e004      	b.n	8007acc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ac2:	bf00      	nop
 8007ac4:	e002      	b.n	8007acc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ac6:	bf00      	nop
 8007ac8:	e000      	b.n	8007acc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007aca:	bf00      	nop
		}
	}

	return val;
 8007acc:	697b      	ldr	r3, [r7, #20]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007ad6:	b590      	push	{r4, r7, lr}
 8007ad8:	b089      	sub	sp, #36	; 0x24
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	f240 80d2 	bls.w	8007c92 <put_fat+0x1bc>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	f080 80cc 	bcs.w	8007c92 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	f000 8096 	beq.w	8007c30 <put_fat+0x15a>
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	f300 80cd 	bgt.w	8007ca4 <put_fat+0x1ce>
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d002      	beq.n	8007b14 <put_fat+0x3e>
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d06e      	beq.n	8007bf0 <put_fat+0x11a>
 8007b12:	e0c7      	b.n	8007ca4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	61bb      	str	r3, [r7, #24]
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	085b      	lsrs	r3, r3, #1
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	4413      	add	r3, r2
 8007b20:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a1a      	ldr	r2, [r3, #32]
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	0a5b      	lsrs	r3, r3, #9
 8007b2a:	4413      	add	r3, r2
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f7ff fe6e 	bl	8007810 <move_window>
 8007b34:	4603      	mov	r3, r0
 8007b36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b38:	7ffb      	ldrb	r3, [r7, #31]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f040 80ab 	bne.w	8007c96 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	1c59      	adds	r1, r3, #1
 8007b4a:	61b9      	str	r1, [r7, #24]
 8007b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b50:	4413      	add	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00d      	beq.n	8007b7a <put_fat+0xa4>
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	b25b      	sxtb	r3, r3
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	b25a      	sxtb	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	011b      	lsls	r3, r3, #4
 8007b70:	b25b      	sxtb	r3, r3
 8007b72:	4313      	orrs	r3, r2
 8007b74:	b25b      	sxtb	r3, r3
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	e001      	b.n	8007b7e <put_fat+0xa8>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a1a      	ldr	r2, [r3, #32]
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	0a5b      	lsrs	r3, r3, #9
 8007b90:	4413      	add	r3, r2
 8007b92:	4619      	mov	r1, r3
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f7ff fe3b 	bl	8007810 <move_window>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b9e:	7ffb      	ldrb	r3, [r7, #31]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d17a      	bne.n	8007c9a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb0:	4413      	add	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <put_fat+0xf0>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	091b      	lsrs	r3, r3, #4
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	e00e      	b.n	8007be4 <put_fat+0x10e>
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	b25b      	sxtb	r3, r3
 8007bcc:	f023 030f 	bic.w	r3, r3, #15
 8007bd0:	b25a      	sxtb	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	0a1b      	lsrs	r3, r3, #8
 8007bd6:	b25b      	sxtb	r3, r3
 8007bd8:	f003 030f 	and.w	r3, r3, #15
 8007bdc:	b25b      	sxtb	r3, r3
 8007bde:	4313      	orrs	r3, r2
 8007be0:	b25b      	sxtb	r3, r3
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	70da      	strb	r2, [r3, #3]
			break;
 8007bee:	e059      	b.n	8007ca4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6a1a      	ldr	r2, [r3, #32]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	0a1b      	lsrs	r3, r3, #8
 8007bf8:	4413      	add	r3, r2
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f7ff fe07 	bl	8007810 <move_window>
 8007c02:	4603      	mov	r3, r0
 8007c04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c06:	7ffb      	ldrb	r3, [r7, #31]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d148      	bne.n	8007c9e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007c1a:	4413      	add	r3, r2
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	b292      	uxth	r2, r2
 8007c20:	4611      	mov	r1, r2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff fb7f 	bl	8007326 <st_word>
			fs->wflag = 1;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	70da      	strb	r2, [r3, #3]
			break;
 8007c2e:	e039      	b.n	8007ca4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a1a      	ldr	r2, [r3, #32]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	09db      	lsrs	r3, r3, #7
 8007c38:	4413      	add	r3, r2
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff fde7 	bl	8007810 <move_window>
 8007c42:	4603      	mov	r3, r0
 8007c44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c46:	7ffb      	ldrb	r3, [r7, #31]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d12a      	bne.n	8007ca2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007c60:	4413      	add	r3, r2
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff fb3c 	bl	80072e0 <ld_dword>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007c6e:	4323      	orrs	r3, r4
 8007c70:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007c80:	4413      	add	r3, r2
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff fb69 	bl	800735c <st_dword>
			fs->wflag = 1;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	70da      	strb	r2, [r3, #3]
			break;
 8007c90:	e008      	b.n	8007ca4 <put_fat+0x1ce>
		}
	}
 8007c92:	bf00      	nop
 8007c94:	e006      	b.n	8007ca4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007c96:	bf00      	nop
 8007c98:	e004      	b.n	8007ca4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007c9a:	bf00      	nop
 8007c9c:	e002      	b.n	8007ca4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007c9e:	bf00      	nop
 8007ca0:	e000      	b.n	8007ca4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007ca2:	bf00      	nop
	return res;
 8007ca4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3724      	adds	r7, #36	; 0x24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd90      	pop	{r4, r7, pc}

08007cae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b088      	sub	sp, #32
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d904      	bls.n	8007cd4 <remove_chain+0x26>
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d301      	bcc.n	8007cd8 <remove_chain+0x2a>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e04b      	b.n	8007d70 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00c      	beq.n	8007cf8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007cde:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce2:	6879      	ldr	r1, [r7, #4]
 8007ce4:	69b8      	ldr	r0, [r7, #24]
 8007ce6:	f7ff fef6 	bl	8007ad6 <put_fat>
 8007cea:	4603      	mov	r3, r0
 8007cec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007cee:	7ffb      	ldrb	r3, [r7, #31]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <remove_chain+0x4a>
 8007cf4:	7ffb      	ldrb	r3, [r7, #31]
 8007cf6:	e03b      	b.n	8007d70 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007cf8:	68b9      	ldr	r1, [r7, #8]
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7ff fe43 	bl	8007986 <get_fat>
 8007d00:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d031      	beq.n	8007d6c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <remove_chain+0x64>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e02e      	b.n	8007d70 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d18:	d101      	bne.n	8007d1e <remove_chain+0x70>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e028      	b.n	8007d70 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007d1e:	2200      	movs	r2, #0
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	69b8      	ldr	r0, [r7, #24]
 8007d24:	f7ff fed7 	bl	8007ad6 <put_fat>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007d2c:	7ffb      	ldrb	r3, [r7, #31]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <remove_chain+0x88>
 8007d32:	7ffb      	ldrb	r3, [r7, #31]
 8007d34:	e01c      	b.n	8007d70 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	3b02      	subs	r3, #2
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d20b      	bcs.n	8007d5c <remove_chain+0xae>
			fs->free_clst++;
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	791b      	ldrb	r3, [r3, #4]
 8007d52:	f043 0301 	orr.w	r3, r3, #1
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d3c6      	bcc.n	8007cf8 <remove_chain+0x4a>
 8007d6a:	e000      	b.n	8007d6e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007d6c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3720      	adds	r7, #32
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10d      	bne.n	8007daa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <create_chain+0x2c>
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d31b      	bcc.n	8007ddc <create_chain+0x64>
 8007da4:	2301      	movs	r3, #1
 8007da6:	61bb      	str	r3, [r7, #24]
 8007da8:	e018      	b.n	8007ddc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7ff fdea 	bl	8007986 <get_fat>
 8007db2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d801      	bhi.n	8007dbe <create_chain+0x46>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e070      	b.n	8007ea0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc4:	d101      	bne.n	8007dca <create_chain+0x52>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	e06a      	b.n	8007ea0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d201      	bcs.n	8007dd8 <create_chain+0x60>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	e063      	b.n	8007ea0 <create_chain+0x128>
		scl = clst;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	3301      	adds	r3, #1
 8007de4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d307      	bcc.n	8007e00 <create_chain+0x88>
				ncl = 2;
 8007df0:	2302      	movs	r3, #2
 8007df2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007df4:	69fa      	ldr	r2, [r7, #28]
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d901      	bls.n	8007e00 <create_chain+0x88>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	e04f      	b.n	8007ea0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007e00:	69f9      	ldr	r1, [r7, #28]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff fdbf 	bl	8007986 <get_fat>
 8007e08:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00e      	beq.n	8007e2e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d003      	beq.n	8007e1e <create_chain+0xa6>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1c:	d101      	bne.n	8007e22 <create_chain+0xaa>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	e03e      	b.n	8007ea0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d1da      	bne.n	8007de0 <create_chain+0x68>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	e038      	b.n	8007ea0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007e2e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007e30:	f04f 32ff 	mov.w	r2, #4294967295
 8007e34:	69f9      	ldr	r1, [r7, #28]
 8007e36:	6938      	ldr	r0, [r7, #16]
 8007e38:	f7ff fe4d 	bl	8007ad6 <put_fat>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d109      	bne.n	8007e5a <create_chain+0xe2>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d006      	beq.n	8007e5a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007e4c:	69fa      	ldr	r2, [r7, #28]
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6938      	ldr	r0, [r7, #16]
 8007e52:	f7ff fe40 	bl	8007ad6 <put_fat>
 8007e56:	4603      	mov	r3, r0
 8007e58:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d116      	bne.n	8007e8e <create_chain+0x116>
		fs->last_clst = ncl;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	691a      	ldr	r2, [r3, #16]
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	3b02      	subs	r3, #2
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d804      	bhi.n	8007e7e <create_chain+0x106>
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	1e5a      	subs	r2, r3, #1
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	791b      	ldrb	r3, [r3, #4]
 8007e82:	f043 0301 	orr.w	r3, r3, #1
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	711a      	strb	r2, [r3, #4]
 8007e8c:	e007      	b.n	8007e9e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d102      	bne.n	8007e9a <create_chain+0x122>
 8007e94:	f04f 33ff 	mov.w	r3, #4294967295
 8007e98:	e000      	b.n	8007e9c <create_chain+0x124>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007e9e:	69fb      	ldr	r3, [r7, #28]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3720      	adds	r7, #32
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	0a5b      	lsrs	r3, r3, #9
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	8952      	ldrh	r2, [r2, #10]
 8007ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ecc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	1d1a      	adds	r2, r3, #4
 8007ed2:	613a      	str	r2, [r7, #16]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <clmt_clust+0x3a>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e010      	b.n	8007f04 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d307      	bcc.n	8007efa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	617b      	str	r3, [r7, #20]
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ef8:	e7e9      	b.n	8007ece <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007efa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	4413      	add	r3, r2
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	371c      	adds	r7, #28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f26:	d204      	bcs.n	8007f32 <dir_sdi+0x22>
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	f003 031f 	and.w	r3, r3, #31
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007f32:	2302      	movs	r3, #2
 8007f34:	e063      	b.n	8007ffe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d106      	bne.n	8007f56 <dir_sdi+0x46>
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d902      	bls.n	8007f56 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10c      	bne.n	8007f76 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	095b      	lsrs	r3, r3, #5
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	8912      	ldrh	r2, [r2, #8]
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d301      	bcc.n	8007f6c <dir_sdi+0x5c>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e048      	b.n	8007ffe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	61da      	str	r2, [r3, #28]
 8007f74:	e029      	b.n	8007fca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	895b      	ldrh	r3, [r3, #10]
 8007f7a:	025b      	lsls	r3, r3, #9
 8007f7c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f7e:	e019      	b.n	8007fb4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6979      	ldr	r1, [r7, #20]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff fcfe 	bl	8007986 <get_fat>
 8007f8a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f92:	d101      	bne.n	8007f98 <dir_sdi+0x88>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e032      	b.n	8007ffe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d904      	bls.n	8007fa8 <dir_sdi+0x98>
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d301      	bcc.n	8007fac <dir_sdi+0x9c>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e028      	b.n	8007ffe <dir_sdi+0xee>
			ofs -= csz;
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d2e1      	bcs.n	8007f80 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007fbc:	6979      	ldr	r1, [r7, #20]
 8007fbe:	6938      	ldr	r0, [r7, #16]
 8007fc0:	f7ff fcc2 	bl	8007948 <clust2sect>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <dir_sdi+0xcc>
 8007fd8:	2302      	movs	r3, #2
 8007fda:	e010      	b.n	8007ffe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	69da      	ldr	r2, [r3, #28]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	0a5b      	lsrs	r3, r3, #9
 8007fe4:	441a      	add	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff6:	441a      	add	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b086      	sub	sp, #24
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	3320      	adds	r3, #32
 800801c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <dir_next+0x28>
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800802c:	d301      	bcc.n	8008032 <dir_next+0x2c>
 800802e:	2304      	movs	r3, #4
 8008030:	e0aa      	b.n	8008188 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008038:	2b00      	cmp	r3, #0
 800803a:	f040 8098 	bne.w	800816e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10b      	bne.n	8008068 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	095b      	lsrs	r3, r3, #5
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	8912      	ldrh	r2, [r2, #8]
 8008058:	4293      	cmp	r3, r2
 800805a:	f0c0 8088 	bcc.w	800816e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	61da      	str	r2, [r3, #28]
 8008064:	2304      	movs	r3, #4
 8008066:	e08f      	b.n	8008188 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	0a5b      	lsrs	r3, r3, #9
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	8952      	ldrh	r2, [r2, #10]
 8008070:	3a01      	subs	r2, #1
 8008072:	4013      	ands	r3, r2
 8008074:	2b00      	cmp	r3, #0
 8008076:	d17a      	bne.n	800816e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	4619      	mov	r1, r3
 8008080:	4610      	mov	r0, r2
 8008082:	f7ff fc80 	bl	8007986 <get_fat>
 8008086:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d801      	bhi.n	8008092 <dir_next+0x8c>
 800808e:	2302      	movs	r3, #2
 8008090:	e07a      	b.n	8008188 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d101      	bne.n	800809e <dir_next+0x98>
 800809a:	2301      	movs	r3, #1
 800809c:	e074      	b.n	8008188 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d358      	bcc.n	800815a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d104      	bne.n	80080b8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	61da      	str	r2, [r3, #28]
 80080b4:	2304      	movs	r3, #4
 80080b6:	e067      	b.n	8008188 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	4619      	mov	r1, r3
 80080c0:	4610      	mov	r0, r2
 80080c2:	f7ff fe59 	bl	8007d78 <create_chain>
 80080c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <dir_next+0xcc>
 80080ce:	2307      	movs	r3, #7
 80080d0:	e05a      	b.n	8008188 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <dir_next+0xd6>
 80080d8:	2302      	movs	r3, #2
 80080da:	e055      	b.n	8008188 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e2:	d101      	bne.n	80080e8 <dir_next+0xe2>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e04f      	b.n	8008188 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f7ff fb4d 	bl	8007788 <sync_window>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <dir_next+0xf2>
 80080f4:	2301      	movs	r3, #1
 80080f6:	e047      	b.n	8008188 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3330      	adds	r3, #48	; 0x30
 80080fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008100:	2100      	movs	r1, #0
 8008102:	4618      	mov	r0, r3
 8008104:	f7ff f977 	bl	80073f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008108:	2300      	movs	r3, #0
 800810a:	613b      	str	r3, [r7, #16]
 800810c:	6979      	ldr	r1, [r7, #20]
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff fc1a 	bl	8007948 <clust2sect>
 8008114:	4602      	mov	r2, r0
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	62da      	str	r2, [r3, #44]	; 0x2c
 800811a:	e012      	b.n	8008142 <dir_next+0x13c>
						fs->wflag = 1;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2201      	movs	r2, #1
 8008120:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7ff fb30 	bl	8007788 <sync_window>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <dir_next+0x12c>
 800812e:	2301      	movs	r3, #1
 8008130:	e02a      	b.n	8008188 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	3301      	adds	r3, #1
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	62da      	str	r2, [r3, #44]	; 0x2c
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	895b      	ldrh	r3, [r3, #10]
 8008146:	461a      	mov	r2, r3
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	4293      	cmp	r3, r2
 800814c:	d3e6      	bcc.n	800811c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	1ad2      	subs	r2, r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008160:	6979      	ldr	r1, [r7, #20]
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff fbf0 	bl	8007948 <clust2sect>
 8008168:	4602      	mov	r2, r0
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008180:	441a      	add	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80081a0:	2100      	movs	r1, #0
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7ff feb4 	bl	8007f10 <dir_sdi>
 80081a8:	4603      	mov	r3, r0
 80081aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d12b      	bne.n	800820a <dir_alloc+0x7a>
		n = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	4619      	mov	r1, r3
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f7ff fb27 	bl	8007810 <move_window>
 80081c2:	4603      	mov	r3, r0
 80081c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d11d      	bne.n	8008208 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2be5      	cmp	r3, #229	; 0xe5
 80081d4:	d004      	beq.n	80081e0 <dir_alloc+0x50>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d107      	bne.n	80081f0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	3301      	adds	r3, #1
 80081e4:	613b      	str	r3, [r7, #16]
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d102      	bne.n	80081f4 <dir_alloc+0x64>
 80081ee:	e00c      	b.n	800820a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80081f0:	2300      	movs	r3, #0
 80081f2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80081f4:	2101      	movs	r1, #1
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff ff05 	bl	8008006 <dir_next>
 80081fc:	4603      	mov	r3, r0
 80081fe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008200:	7dfb      	ldrb	r3, [r7, #23]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0d7      	beq.n	80081b6 <dir_alloc+0x26>
 8008206:	e000      	b.n	800820a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008208:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	2b04      	cmp	r3, #4
 800820e:	d101      	bne.n	8008214 <dir_alloc+0x84>
 8008210:	2307      	movs	r3, #7
 8008212:	75fb      	strb	r3, [r7, #23]
	return res;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	331a      	adds	r3, #26
 800822c:	4618      	mov	r0, r3
 800822e:	f7ff f83f 	bl	80072b0 <ld_word>
 8008232:	4603      	mov	r3, r0
 8008234:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b03      	cmp	r3, #3
 800823c:	d109      	bne.n	8008252 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	3314      	adds	r3, #20
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff f834 	bl	80072b0 <ld_word>
 8008248:	4603      	mov	r3, r0
 800824a:	041b      	lsls	r3, r3, #16
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008252:	68fb      	ldr	r3, [r7, #12]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	331a      	adds	r3, #26
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	b292      	uxth	r2, r2
 8008270:	4611      	mov	r1, r2
 8008272:	4618      	mov	r0, r3
 8008274:	f7ff f857 	bl	8007326 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b03      	cmp	r3, #3
 800827e:	d109      	bne.n	8008294 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f103 0214 	add.w	r2, r3, #20
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	0c1b      	lsrs	r3, r3, #16
 800828a:	b29b      	uxth	r3, r3
 800828c:	4619      	mov	r1, r3
 800828e:	4610      	mov	r0, r2
 8008290:	f7ff f849 	bl	8007326 <st_word>
	}
}
 8008294:	bf00      	nop
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80082aa:	2100      	movs	r1, #0
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff fe2f 	bl	8007f10 <dir_sdi>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <dir_find+0x24>
 80082bc:	7dfb      	ldrb	r3, [r7, #23]
 80082be:	e03e      	b.n	800833e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	4619      	mov	r1, r3
 80082c6:	6938      	ldr	r0, [r7, #16]
 80082c8:	f7ff faa2 	bl	8007810 <move_window>
 80082cc:	4603      	mov	r3, r0
 80082ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d12f      	bne.n	8008336 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d102      	bne.n	80082ea <dir_find+0x4e>
 80082e4:	2304      	movs	r3, #4
 80082e6:	75fb      	strb	r3, [r7, #23]
 80082e8:	e028      	b.n	800833c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	330b      	adds	r3, #11
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	330b      	adds	r3, #11
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <dir_find+0x86>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a18      	ldr	r0, [r3, #32]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3324      	adds	r3, #36	; 0x24
 8008314:	220b      	movs	r2, #11
 8008316:	4619      	mov	r1, r3
 8008318:	f7ff f888 	bl	800742c <mem_cmp>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00b      	beq.n	800833a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008322:	2100      	movs	r1, #0
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff fe6e 	bl	8008006 <dir_next>
 800832a:	4603      	mov	r3, r0
 800832c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800832e:	7dfb      	ldrb	r3, [r7, #23]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0c5      	beq.n	80082c0 <dir_find+0x24>
 8008334:	e002      	b.n	800833c <dir_find+0xa0>
		if (res != FR_OK) break;
 8008336:	bf00      	nop
 8008338:	e000      	b.n	800833c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800833a:	bf00      	nop

	return res;
 800833c:	7dfb      	ldrb	r3, [r7, #23]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008354:	2101      	movs	r1, #1
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff ff1a 	bl	8008190 <dir_alloc>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d11c      	bne.n	80083a0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	4619      	mov	r1, r3
 800836c:	68b8      	ldr	r0, [r7, #8]
 800836e:	f7ff fa4f 	bl	8007810 <move_window>
 8008372:	4603      	mov	r3, r0
 8008374:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d111      	bne.n	80083a0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	2220      	movs	r2, #32
 8008382:	2100      	movs	r1, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff f836 	bl	80073f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a18      	ldr	r0, [r3, #32]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	3324      	adds	r3, #36	; 0x24
 8008392:	220b      	movs	r2, #11
 8008394:	4619      	mov	r1, r3
 8008396:	f7ff f80d 	bl	80073b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2201      	movs	r2, #1
 800839e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
	...

080083ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3324      	adds	r3, #36	; 0x24
 80083c0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80083c2:	220b      	movs	r2, #11
 80083c4:	2120      	movs	r1, #32
 80083c6:	68b8      	ldr	r0, [r7, #8]
 80083c8:	f7ff f815 	bl	80073f6 <mem_set>
	si = i = 0; ni = 8;
 80083cc:	2300      	movs	r3, #0
 80083ce:	613b      	str	r3, [r7, #16]
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	2308      	movs	r3, #8
 80083d6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	61fa      	str	r2, [r7, #28]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80083e6:	7efb      	ldrb	r3, [r7, #27]
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d94e      	bls.n	800848a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80083ec:	7efb      	ldrb	r3, [r7, #27]
 80083ee:	2b2f      	cmp	r3, #47	; 0x2f
 80083f0:	d006      	beq.n	8008400 <create_name+0x54>
 80083f2:	7efb      	ldrb	r3, [r7, #27]
 80083f4:	2b5c      	cmp	r3, #92	; 0x5c
 80083f6:	d110      	bne.n	800841a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80083f8:	e002      	b.n	8008400 <create_name+0x54>
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	3301      	adds	r3, #1
 80083fe:	61fb      	str	r3, [r7, #28]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	4413      	add	r3, r2
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	2b2f      	cmp	r3, #47	; 0x2f
 800840a:	d0f6      	beq.n	80083fa <create_name+0x4e>
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	4413      	add	r3, r2
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b5c      	cmp	r3, #92	; 0x5c
 8008416:	d0f0      	beq.n	80083fa <create_name+0x4e>
			break;
 8008418:	e038      	b.n	800848c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800841a:	7efb      	ldrb	r3, [r7, #27]
 800841c:	2b2e      	cmp	r3, #46	; 0x2e
 800841e:	d003      	beq.n	8008428 <create_name+0x7c>
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	429a      	cmp	r2, r3
 8008426:	d30c      	bcc.n	8008442 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2b0b      	cmp	r3, #11
 800842c:	d002      	beq.n	8008434 <create_name+0x88>
 800842e:	7efb      	ldrb	r3, [r7, #27]
 8008430:	2b2e      	cmp	r3, #46	; 0x2e
 8008432:	d001      	beq.n	8008438 <create_name+0x8c>
 8008434:	2306      	movs	r3, #6
 8008436:	e044      	b.n	80084c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008438:	2308      	movs	r3, #8
 800843a:	613b      	str	r3, [r7, #16]
 800843c:	230b      	movs	r3, #11
 800843e:	617b      	str	r3, [r7, #20]
			continue;
 8008440:	e022      	b.n	8008488 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008442:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008446:	2b00      	cmp	r3, #0
 8008448:	da04      	bge.n	8008454 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800844a:	7efb      	ldrb	r3, [r7, #27]
 800844c:	3b80      	subs	r3, #128	; 0x80
 800844e:	4a1f      	ldr	r2, [pc, #124]	; (80084cc <create_name+0x120>)
 8008450:	5cd3      	ldrb	r3, [r2, r3]
 8008452:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008454:	7efb      	ldrb	r3, [r7, #27]
 8008456:	4619      	mov	r1, r3
 8008458:	481d      	ldr	r0, [pc, #116]	; (80084d0 <create_name+0x124>)
 800845a:	f7ff f80e 	bl	800747a <chk_chr>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <create_name+0xbc>
 8008464:	2306      	movs	r3, #6
 8008466:	e02c      	b.n	80084c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008468:	7efb      	ldrb	r3, [r7, #27]
 800846a:	2b60      	cmp	r3, #96	; 0x60
 800846c:	d905      	bls.n	800847a <create_name+0xce>
 800846e:	7efb      	ldrb	r3, [r7, #27]
 8008470:	2b7a      	cmp	r3, #122	; 0x7a
 8008472:	d802      	bhi.n	800847a <create_name+0xce>
 8008474:	7efb      	ldrb	r3, [r7, #27]
 8008476:	3b20      	subs	r3, #32
 8008478:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	613a      	str	r2, [r7, #16]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	4413      	add	r3, r2
 8008484:	7efa      	ldrb	r2, [r7, #27]
 8008486:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008488:	e7a6      	b.n	80083d8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800848a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	441a      	add	r2, r3
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <create_name+0xf4>
 800849c:	2306      	movs	r3, #6
 800849e:	e010      	b.n	80084c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2be5      	cmp	r3, #229	; 0xe5
 80084a6:	d102      	bne.n	80084ae <create_name+0x102>
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2205      	movs	r2, #5
 80084ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80084ae:	7efb      	ldrb	r3, [r7, #27]
 80084b0:	2b20      	cmp	r3, #32
 80084b2:	d801      	bhi.n	80084b8 <create_name+0x10c>
 80084b4:	2204      	movs	r2, #4
 80084b6:	e000      	b.n	80084ba <create_name+0x10e>
 80084b8:	2200      	movs	r2, #0
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	330b      	adds	r3, #11
 80084be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80084c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3720      	adds	r7, #32
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	08015bac 	.word	0x08015bac
 80084d0:	0800c630 	.word	0x0800c630

080084d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80084e8:	e002      	b.n	80084f0 <follow_path+0x1c>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	3301      	adds	r3, #1
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2b2f      	cmp	r3, #47	; 0x2f
 80084f6:	d0f8      	beq.n	80084ea <follow_path+0x16>
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b5c      	cmp	r3, #92	; 0x5c
 80084fe:	d0f4      	beq.n	80084ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	2200      	movs	r2, #0
 8008504:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b1f      	cmp	r3, #31
 800850c:	d80a      	bhi.n	8008524 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2280      	movs	r2, #128	; 0x80
 8008512:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008516:	2100      	movs	r1, #0
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff fcf9 	bl	8007f10 <dir_sdi>
 800851e:	4603      	mov	r3, r0
 8008520:	75fb      	strb	r3, [r7, #23]
 8008522:	e043      	b.n	80085ac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008524:	463b      	mov	r3, r7
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff ff3f 	bl	80083ac <create_name>
 800852e:	4603      	mov	r3, r0
 8008530:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008532:	7dfb      	ldrb	r3, [r7, #23]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d134      	bne.n	80085a2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7ff feaf 	bl	800829c <dir_find>
 800853e:	4603      	mov	r3, r0
 8008540:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008548:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800854a:	7dfb      	ldrb	r3, [r7, #23]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008550:	7dfb      	ldrb	r3, [r7, #23]
 8008552:	2b04      	cmp	r3, #4
 8008554:	d127      	bne.n	80085a6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008556:	7afb      	ldrb	r3, [r7, #11]
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	2b00      	cmp	r3, #0
 800855e:	d122      	bne.n	80085a6 <follow_path+0xd2>
 8008560:	2305      	movs	r3, #5
 8008562:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008564:	e01f      	b.n	80085a6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008566:	7afb      	ldrb	r3, [r7, #11]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b00      	cmp	r3, #0
 800856e:	d11c      	bne.n	80085aa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	799b      	ldrb	r3, [r3, #6]
 8008574:	f003 0310 	and.w	r3, r3, #16
 8008578:	2b00      	cmp	r3, #0
 800857a:	d102      	bne.n	8008582 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800857c:	2305      	movs	r3, #5
 800857e:	75fb      	strb	r3, [r7, #23]
 8008580:	e014      	b.n	80085ac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008590:	4413      	add	r3, r2
 8008592:	4619      	mov	r1, r3
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f7ff fe42 	bl	800821e <ld_clust>
 800859a:	4602      	mov	r2, r0
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80085a0:	e7c0      	b.n	8008524 <follow_path+0x50>
			if (res != FR_OK) break;
 80085a2:	bf00      	nop
 80085a4:	e002      	b.n	80085ac <follow_path+0xd8>
				break;
 80085a6:	bf00      	nop
 80085a8:	e000      	b.n	80085ac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80085aa:	bf00      	nop
			}
		}
	}

	return res;
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b087      	sub	sp, #28
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80085be:	f04f 33ff 	mov.w	r3, #4294967295
 80085c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d031      	beq.n	8008630 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	e002      	b.n	80085da <get_ldnumber+0x24>
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	3301      	adds	r3, #1
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b20      	cmp	r3, #32
 80085e0:	d903      	bls.n	80085ea <get_ldnumber+0x34>
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b3a      	cmp	r3, #58	; 0x3a
 80085e8:	d1f4      	bne.n	80085d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b3a      	cmp	r3, #58	; 0x3a
 80085f0:	d11c      	bne.n	800862c <get_ldnumber+0x76>
			tp = *path;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	60fa      	str	r2, [r7, #12]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	3b30      	subs	r3, #48	; 0x30
 8008602:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b09      	cmp	r3, #9
 8008608:	d80e      	bhi.n	8008628 <get_ldnumber+0x72>
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	429a      	cmp	r2, r3
 8008610:	d10a      	bne.n	8008628 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d107      	bne.n	8008628 <get_ldnumber+0x72>
					vol = (int)i;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	3301      	adds	r3, #1
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	e002      	b.n	8008632 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800862c:	2300      	movs	r3, #0
 800862e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008630:	693b      	ldr	r3, [r7, #16]
}
 8008632:	4618      	mov	r0, r3
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
	...

08008640 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	70da      	strb	r2, [r3, #3]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f04f 32ff 	mov.w	r2, #4294967295
 8008656:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff f8d8 	bl	8007810 <move_window>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <check_fs+0x2a>
 8008666:	2304      	movs	r3, #4
 8008668:	e038      	b.n	80086dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3330      	adds	r3, #48	; 0x30
 800866e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe fe1c 	bl	80072b0 <ld_word>
 8008678:	4603      	mov	r3, r0
 800867a:	461a      	mov	r2, r3
 800867c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008680:	429a      	cmp	r2, r3
 8008682:	d001      	beq.n	8008688 <check_fs+0x48>
 8008684:	2303      	movs	r3, #3
 8008686:	e029      	b.n	80086dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800868e:	2be9      	cmp	r3, #233	; 0xe9
 8008690:	d009      	beq.n	80086a6 <check_fs+0x66>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008698:	2beb      	cmp	r3, #235	; 0xeb
 800869a:	d11e      	bne.n	80086da <check_fs+0x9a>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80086a2:	2b90      	cmp	r3, #144	; 0x90
 80086a4:	d119      	bne.n	80086da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	3330      	adds	r3, #48	; 0x30
 80086aa:	3336      	adds	r3, #54	; 0x36
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe fe17 	bl	80072e0 <ld_dword>
 80086b2:	4603      	mov	r3, r0
 80086b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086b8:	4a0a      	ldr	r2, [pc, #40]	; (80086e4 <check_fs+0xa4>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d101      	bne.n	80086c2 <check_fs+0x82>
 80086be:	2300      	movs	r3, #0
 80086c0:	e00c      	b.n	80086dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	3330      	adds	r3, #48	; 0x30
 80086c6:	3352      	adds	r3, #82	; 0x52
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fe fe09 	bl	80072e0 <ld_dword>
 80086ce:	4603      	mov	r3, r0
 80086d0:	4a05      	ldr	r2, [pc, #20]	; (80086e8 <check_fs+0xa8>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d101      	bne.n	80086da <check_fs+0x9a>
 80086d6:	2300      	movs	r3, #0
 80086d8:	e000      	b.n	80086dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80086da:	2302      	movs	r3, #2
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	00544146 	.word	0x00544146
 80086e8:	33544146 	.word	0x33544146

080086ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b096      	sub	sp, #88	; 0x58
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	4613      	mov	r3, r2
 80086f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7ff ff58 	bl	80085b6 <get_ldnumber>
 8008706:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870a:	2b00      	cmp	r3, #0
 800870c:	da01      	bge.n	8008712 <find_volume+0x26>
 800870e:	230b      	movs	r3, #11
 8008710:	e22e      	b.n	8008b70 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008712:	4aa8      	ldr	r2, [pc, #672]	; (80089b4 <find_volume+0x2c8>)
 8008714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800871a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800871c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871e:	2b00      	cmp	r3, #0
 8008720:	d101      	bne.n	8008726 <find_volume+0x3a>
 8008722:	230c      	movs	r3, #12
 8008724:	e224      	b.n	8008b70 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800872a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	f023 0301 	bic.w	r3, r3, #1
 8008732:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d01a      	beq.n	8008772 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	785b      	ldrb	r3, [r3, #1]
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe fd17 	bl	8007174 <disk_status>
 8008746:	4603      	mov	r3, r0
 8008748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800874c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10c      	bne.n	8008772 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d007      	beq.n	800876e <find_volume+0x82>
 800875e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008762:	f003 0304 	and.w	r3, r3, #4
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800876a:	230a      	movs	r3, #10
 800876c:	e200      	b.n	8008b70 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800876e:	2300      	movs	r3, #0
 8008770:	e1fe      	b.n	8008b70 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	2200      	movs	r2, #0
 8008776:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877a:	b2da      	uxtb	r2, r3
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	4618      	mov	r0, r3
 8008786:	f7fe fd0f 	bl	80071a8 <disk_initialize>
 800878a:	4603      	mov	r3, r0
 800878c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008790:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800879c:	2303      	movs	r3, #3
 800879e:	e1e7      	b.n	8008b70 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d007      	beq.n	80087b6 <find_volume+0xca>
 80087a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087aa:	f003 0304 	and.w	r3, r3, #4
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80087b2:	230a      	movs	r3, #10
 80087b4:	e1dc      	b.n	8008b70 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80087b6:	2300      	movs	r3, #0
 80087b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80087ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087be:	f7ff ff3f 	bl	8008640 <check_fs>
 80087c2:	4603      	mov	r3, r0
 80087c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80087c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d14b      	bne.n	8008868 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80087d0:	2300      	movs	r3, #0
 80087d2:	643b      	str	r3, [r7, #64]	; 0x40
 80087d4:	e01f      	b.n	8008816 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80087e4:	4413      	add	r3, r2
 80087e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	3304      	adds	r3, #4
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d006      	beq.n	8008800 <find_volume+0x114>
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	3308      	adds	r3, #8
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe fd72 	bl	80072e0 <ld_dword>
 80087fc:	4602      	mov	r2, r0
 80087fe:	e000      	b.n	8008802 <find_volume+0x116>
 8008800:	2200      	movs	r2, #0
 8008802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800880a:	440b      	add	r3, r1
 800880c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008812:	3301      	adds	r3, #1
 8008814:	643b      	str	r3, [r7, #64]	; 0x40
 8008816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008818:	2b03      	cmp	r3, #3
 800881a:	d9dc      	bls.n	80087d6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800881c:	2300      	movs	r3, #0
 800881e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008822:	2b00      	cmp	r3, #0
 8008824:	d002      	beq.n	800882c <find_volume+0x140>
 8008826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008828:	3b01      	subs	r3, #1
 800882a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800882c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008834:	4413      	add	r3, r2
 8008836:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800883a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800883c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800883e:	2b00      	cmp	r3, #0
 8008840:	d005      	beq.n	800884e <find_volume+0x162>
 8008842:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008844:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008846:	f7ff fefb 	bl	8008640 <check_fs>
 800884a:	4603      	mov	r3, r0
 800884c:	e000      	b.n	8008850 <find_volume+0x164>
 800884e:	2303      	movs	r3, #3
 8008850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008858:	2b01      	cmp	r3, #1
 800885a:	d905      	bls.n	8008868 <find_volume+0x17c>
 800885c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800885e:	3301      	adds	r3, #1
 8008860:	643b      	str	r3, [r7, #64]	; 0x40
 8008862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008864:	2b03      	cmp	r3, #3
 8008866:	d9e1      	bls.n	800882c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008868:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800886c:	2b04      	cmp	r3, #4
 800886e:	d101      	bne.n	8008874 <find_volume+0x188>
 8008870:	2301      	movs	r3, #1
 8008872:	e17d      	b.n	8008b70 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008878:	2b01      	cmp	r3, #1
 800887a:	d901      	bls.n	8008880 <find_volume+0x194>
 800887c:	230d      	movs	r3, #13
 800887e:	e177      	b.n	8008b70 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	3330      	adds	r3, #48	; 0x30
 8008884:	330b      	adds	r3, #11
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe fd12 	bl	80072b0 <ld_word>
 800888c:	4603      	mov	r3, r0
 800888e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008892:	d001      	beq.n	8008898 <find_volume+0x1ac>
 8008894:	230d      	movs	r3, #13
 8008896:	e16b      	b.n	8008b70 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	3330      	adds	r3, #48	; 0x30
 800889c:	3316      	adds	r3, #22
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe fd06 	bl	80072b0 <ld_word>
 80088a4:	4603      	mov	r3, r0
 80088a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80088a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d106      	bne.n	80088bc <find_volume+0x1d0>
 80088ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b0:	3330      	adds	r3, #48	; 0x30
 80088b2:	3324      	adds	r3, #36	; 0x24
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fd13 	bl	80072e0 <ld_dword>
 80088ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80088bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80088c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80088cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ce:	789b      	ldrb	r3, [r3, #2]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d005      	beq.n	80088e0 <find_volume+0x1f4>
 80088d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d6:	789b      	ldrb	r3, [r3, #2]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d001      	beq.n	80088e0 <find_volume+0x1f4>
 80088dc:	230d      	movs	r3, #13
 80088de:	e147      	b.n	8008b70 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80088e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e2:	789b      	ldrb	r3, [r3, #2]
 80088e4:	461a      	mov	r2, r3
 80088e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e8:	fb02 f303 	mul.w	r3, r2, r3
 80088ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	895b      	ldrh	r3, [r3, #10]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d008      	beq.n	8008914 <find_volume+0x228>
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	895b      	ldrh	r3, [r3, #10]
 8008906:	461a      	mov	r2, r3
 8008908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890a:	895b      	ldrh	r3, [r3, #10]
 800890c:	3b01      	subs	r3, #1
 800890e:	4013      	ands	r3, r2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <find_volume+0x22c>
 8008914:	230d      	movs	r3, #13
 8008916:	e12b      	b.n	8008b70 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891a:	3330      	adds	r3, #48	; 0x30
 800891c:	3311      	adds	r3, #17
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe fcc6 	bl	80072b0 <ld_word>
 8008924:	4603      	mov	r3, r0
 8008926:	461a      	mov	r2, r3
 8008928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	891b      	ldrh	r3, [r3, #8]
 8008930:	f003 030f 	and.w	r3, r3, #15
 8008934:	b29b      	uxth	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <find_volume+0x252>
 800893a:	230d      	movs	r3, #13
 800893c:	e118      	b.n	8008b70 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800893e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008940:	3330      	adds	r3, #48	; 0x30
 8008942:	3313      	adds	r3, #19
 8008944:	4618      	mov	r0, r3
 8008946:	f7fe fcb3 	bl	80072b0 <ld_word>
 800894a:	4603      	mov	r3, r0
 800894c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800894e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008950:	2b00      	cmp	r3, #0
 8008952:	d106      	bne.n	8008962 <find_volume+0x276>
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	3330      	adds	r3, #48	; 0x30
 8008958:	3320      	adds	r3, #32
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe fcc0 	bl	80072e0 <ld_dword>
 8008960:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008964:	3330      	adds	r3, #48	; 0x30
 8008966:	330e      	adds	r3, #14
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe fca1 	bl	80072b0 <ld_word>
 800896e:	4603      	mov	r3, r0
 8008970:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008972:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <find_volume+0x290>
 8008978:	230d      	movs	r3, #13
 800897a:	e0f9      	b.n	8008b70 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800897c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800897e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008980:	4413      	add	r3, r2
 8008982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008984:	8912      	ldrh	r2, [r2, #8]
 8008986:	0912      	lsrs	r2, r2, #4
 8008988:	b292      	uxth	r2, r2
 800898a:	4413      	add	r3, r2
 800898c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800898e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	429a      	cmp	r2, r3
 8008994:	d201      	bcs.n	800899a <find_volume+0x2ae>
 8008996:	230d      	movs	r3, #13
 8008998:	e0ea      	b.n	8008b70 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800899a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089a2:	8952      	ldrh	r2, [r2, #10]
 80089a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d103      	bne.n	80089b8 <find_volume+0x2cc>
 80089b0:	230d      	movs	r3, #13
 80089b2:	e0dd      	b.n	8008b70 <find_volume+0x484>
 80089b4:	2000a0d0 	.word	0x2000a0d0
		fmt = FS_FAT32;
 80089b8:	2303      	movs	r3, #3
 80089ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d802      	bhi.n	80089ce <find_volume+0x2e2>
 80089c8:	2302      	movs	r3, #2
 80089ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d802      	bhi.n	80089de <find_volume+0x2f2>
 80089d8:	2301      	movs	r3, #1
 80089da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	1c9a      	adds	r2, r3, #2
 80089e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089ea:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80089ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80089ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f0:	441a      	add	r2, r3
 80089f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80089f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	441a      	add	r2, r3
 80089fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008a00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d11e      	bne.n	8008a46 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	3330      	adds	r3, #48	; 0x30
 8008a0c:	332a      	adds	r3, #42	; 0x2a
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe fc4e 	bl	80072b0 <ld_word>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <find_volume+0x332>
 8008a1a:	230d      	movs	r3, #13
 8008a1c:	e0a8      	b.n	8008b70 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	891b      	ldrh	r3, [r3, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <find_volume+0x33e>
 8008a26:	230d      	movs	r3, #13
 8008a28:	e0a2      	b.n	8008b70 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	3330      	adds	r3, #48	; 0x30
 8008a2e:	332c      	adds	r3, #44	; 0x2c
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fc55 	bl	80072e0 <ld_dword>
 8008a36:	4602      	mov	r2, r0
 8008a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	647b      	str	r3, [r7, #68]	; 0x44
 8008a44:	e01f      	b.n	8008a86 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	891b      	ldrh	r3, [r3, #8]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <find_volume+0x366>
 8008a4e:	230d      	movs	r3, #13
 8008a50:	e08e      	b.n	8008b70 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	6a1a      	ldr	r2, [r3, #32]
 8008a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a58:	441a      	add	r2, r3
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008a5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d103      	bne.n	8008a6e <find_volume+0x382>
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	e00a      	b.n	8008a84 <find_volume+0x398>
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	695a      	ldr	r2, [r3, #20]
 8008a72:	4613      	mov	r3, r2
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	4413      	add	r3, r2
 8008a78:	085a      	lsrs	r2, r3, #1
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008a84:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	699a      	ldr	r2, [r3, #24]
 8008a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008a90:	0a5b      	lsrs	r3, r3, #9
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d201      	bcs.n	8008a9a <find_volume+0x3ae>
 8008a96:	230d      	movs	r3, #13
 8008a98:	e06a      	b.n	8008b70 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa0:	611a      	str	r2, [r3, #16]
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa4:	691a      	ldr	r2, [r3, #16]
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aac:	2280      	movs	r2, #128	; 0x80
 8008aae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d149      	bne.n	8008b4c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	3330      	adds	r3, #48	; 0x30
 8008abc:	3330      	adds	r3, #48	; 0x30
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fe fbf6 	bl	80072b0 <ld_word>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d140      	bne.n	8008b4c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008acc:	3301      	adds	r3, #1
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ad2:	f7fe fe9d 	bl	8007810 <move_window>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d137      	bne.n	8008b4c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ade:	2200      	movs	r2, #0
 8008ae0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae4:	3330      	adds	r3, #48	; 0x30
 8008ae6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fbe0 	bl	80072b0 <ld_word>
 8008af0:	4603      	mov	r3, r0
 8008af2:	461a      	mov	r2, r3
 8008af4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d127      	bne.n	8008b4c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	3330      	adds	r3, #48	; 0x30
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe fbed 	bl	80072e0 <ld_dword>
 8008b06:	4603      	mov	r3, r0
 8008b08:	4a1b      	ldr	r2, [pc, #108]	; (8008b78 <find_volume+0x48c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d11e      	bne.n	8008b4c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b10:	3330      	adds	r3, #48	; 0x30
 8008b12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fe fbe2 	bl	80072e0 <ld_dword>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	4a17      	ldr	r2, [pc, #92]	; (8008b7c <find_volume+0x490>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d113      	bne.n	8008b4c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	3330      	adds	r3, #48	; 0x30
 8008b28:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fe fbd7 	bl	80072e0 <ld_dword>
 8008b32:	4602      	mov	r2, r0
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	3330      	adds	r3, #48	; 0x30
 8008b3c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe fbcd 	bl	80072e0 <ld_dword>
 8008b46:	4602      	mov	r2, r0
 8008b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008b52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008b54:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <find_volume+0x494>)
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	4b08      	ldr	r3, [pc, #32]	; (8008b80 <find_volume+0x494>)
 8008b5e:	801a      	strh	r2, [r3, #0]
 8008b60:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <find_volume+0x494>)
 8008b62:	881a      	ldrh	r2, [r3, #0]
 8008b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b66:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008b68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b6a:	f7fe fde9 	bl	8007740 <clear_lock>
#endif
	return FR_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3758      	adds	r7, #88	; 0x58
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	41615252 	.word	0x41615252
 8008b7c:	61417272 	.word	0x61417272
 8008b80:	2000a0d4 	.word	0x2000a0d4

08008b84 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008b8e:	2309      	movs	r3, #9
 8008b90:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d01c      	beq.n	8008bd2 <validate+0x4e>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d018      	beq.n	8008bd2 <validate+0x4e>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d013      	beq.n	8008bd2 <validate+0x4e>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	889a      	ldrh	r2, [r3, #4]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	88db      	ldrh	r3, [r3, #6]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d10c      	bne.n	8008bd2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	785b      	ldrb	r3, [r3, #1]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fe fad8 	bl	8007174 <disk_status>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <validate+0x4e>
			res = FR_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d102      	bne.n	8008bde <validate+0x5a>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	e000      	b.n	8008be0 <validate+0x5c>
 8008bde:	2300      	movs	r3, #0
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	6013      	str	r3, [r2, #0]
	return res;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b088      	sub	sp, #32
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008c02:	f107 0310 	add.w	r3, r7, #16
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff fcd5 	bl	80085b6 <get_ldnumber>
 8008c0c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	da01      	bge.n	8008c18 <f_mount+0x28>
 8008c14:	230b      	movs	r3, #11
 8008c16:	e02b      	b.n	8008c70 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008c18:	4a17      	ldr	r2, [pc, #92]	; (8008c78 <f_mount+0x88>)
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c20:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008c28:	69b8      	ldr	r0, [r7, #24]
 8008c2a:	f7fe fd89 	bl	8007740 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	2200      	movs	r2, #0
 8008c32:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	490d      	ldr	r1, [pc, #52]	; (8008c78 <f_mount+0x88>)
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <f_mount+0x66>
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d001      	beq.n	8008c5a <f_mount+0x6a>
 8008c56:	2300      	movs	r3, #0
 8008c58:	e00a      	b.n	8008c70 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008c5a:	f107 010c 	add.w	r1, r7, #12
 8008c5e:	f107 0308 	add.w	r3, r7, #8
 8008c62:	2200      	movs	r2, #0
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fd41 	bl	80086ec <find_volume>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3720      	adds	r7, #32
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	2000a0d0 	.word	0x2000a0d0

08008c7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b098      	sub	sp, #96	; 0x60
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	4613      	mov	r3, r2
 8008c88:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <f_open+0x18>
 8008c90:	2309      	movs	r3, #9
 8008c92:	e1ad      	b.n	8008ff0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008c94:	79fb      	ldrb	r3, [r7, #7]
 8008c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c9a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008c9c:	79fa      	ldrb	r2, [r7, #7]
 8008c9e:	f107 0110 	add.w	r1, r7, #16
 8008ca2:	f107 0308 	add.w	r3, r7, #8
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff fd20 	bl	80086ec <find_volume>
 8008cac:	4603      	mov	r3, r0
 8008cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008cb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f040 8191 	bne.w	8008fde <f_open+0x362>
		dj.obj.fs = fs;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	f107 0314 	add.w	r3, r7, #20
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7ff fc03 	bl	80084d4 <follow_path>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008cd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d11a      	bne.n	8008d12 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008cdc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ce0:	b25b      	sxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	da03      	bge.n	8008cee <f_open+0x72>
				res = FR_INVALID_NAME;
 8008ce6:	2306      	movs	r3, #6
 8008ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008cec:	e011      	b.n	8008d12 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	f023 0301 	bic.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bf14      	ite	ne
 8008cf8:	2301      	movne	r3, #1
 8008cfa:	2300      	moveq	r3, #0
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	461a      	mov	r2, r3
 8008d00:	f107 0314 	add.w	r3, r7, #20
 8008d04:	4611      	mov	r1, r2
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fe fbd2 	bl	80074b0 <chk_lock>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	f003 031c 	and.w	r3, r3, #28
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d07f      	beq.n	8008e1c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d017      	beq.n	8008d54 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008d24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d10e      	bne.n	8008d4a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008d2c:	f7fe fc1c 	bl	8007568 <enq_lock>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d006      	beq.n	8008d44 <f_open+0xc8>
 8008d36:	f107 0314 	add.w	r3, r7, #20
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff fb03 	bl	8008346 <dir_register>
 8008d40:	4603      	mov	r3, r0
 8008d42:	e000      	b.n	8008d46 <f_open+0xca>
 8008d44:	2312      	movs	r3, #18
 8008d46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008d4a:	79fb      	ldrb	r3, [r7, #7]
 8008d4c:	f043 0308 	orr.w	r3, r3, #8
 8008d50:	71fb      	strb	r3, [r7, #7]
 8008d52:	e010      	b.n	8008d76 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008d54:	7ebb      	ldrb	r3, [r7, #26]
 8008d56:	f003 0311 	and.w	r3, r3, #17
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <f_open+0xea>
					res = FR_DENIED;
 8008d5e:	2307      	movs	r3, #7
 8008d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008d64:	e007      	b.n	8008d76 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008d66:	79fb      	ldrb	r3, [r7, #7]
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <f_open+0xfa>
 8008d70:	2308      	movs	r3, #8
 8008d72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008d76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d168      	bne.n	8008e50 <f_open+0x1d4>
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
 8008d80:	f003 0308 	and.w	r3, r3, #8
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d063      	beq.n	8008e50 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008d88:	f7fe f996 	bl	80070b8 <get_fattime>
 8008d8c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d90:	330e      	adds	r3, #14
 8008d92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fe fae1 	bl	800735c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9c:	3316      	adds	r3, #22
 8008d9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe fadb 	bl	800735c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da8:	330b      	adds	r3, #11
 8008daa:	2220      	movs	r2, #32
 8008dac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008db2:	4611      	mov	r1, r2
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff fa32 	bl	800821e <ld_clust>
 8008dba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff fa4a 	bl	800825c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dca:	331c      	adds	r3, #28
 8008dcc:	2100      	movs	r1, #0
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fac4 	bl	800735c <st_dword>
					fs->wflag = 1;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d037      	beq.n	8008e50 <f_open+0x1d4>
						dw = fs->winsect;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008de6:	f107 0314 	add.w	r3, r7, #20
 8008dea:	2200      	movs	r2, #0
 8008dec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fe ff5d 	bl	8007cae <remove_chain>
 8008df4:	4603      	mov	r3, r0
 8008df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008dfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d126      	bne.n	8008e50 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fd02 	bl	8007810 <move_window>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e16:	3a01      	subs	r2, #1
 8008e18:	60da      	str	r2, [r3, #12]
 8008e1a:	e019      	b.n	8008e50 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008e1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d115      	bne.n	8008e50 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008e24:	7ebb      	ldrb	r3, [r7, #26]
 8008e26:	f003 0310 	and.w	r3, r3, #16
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008e2e:	2304      	movs	r3, #4
 8008e30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008e34:	e00c      	b.n	8008e50 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d007      	beq.n	8008e50 <f_open+0x1d4>
 8008e40:	7ebb      	ldrb	r3, [r7, #26]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <f_open+0x1d4>
						res = FR_DENIED;
 8008e4a:	2307      	movs	r3, #7
 8008e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008e50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d128      	bne.n	8008eaa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008e58:	79fb      	ldrb	r3, [r7, #7]
 8008e5a:	f003 0308 	and.w	r3, r3, #8
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d003      	beq.n	8008e6a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	f023 0301 	bic.w	r3, r3, #1
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bf14      	ite	ne
 8008e82:	2301      	movne	r3, #1
 8008e84:	2300      	moveq	r3, #0
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	461a      	mov	r2, r3
 8008e8a:	f107 0314 	add.w	r3, r7, #20
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe fb8b 	bl	80075ac <inc_lock>
 8008e96:	4602      	mov	r2, r0
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d102      	bne.n	8008eaa <f_open+0x22e>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008eaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f040 8095 	bne.w	8008fde <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7ff f9af 	bl	800821e <ld_clust>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec8:	331c      	adds	r3, #28
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fa08 	bl	80072e0 <ld_dword>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	88da      	ldrh	r2, [r3, #6]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	79fa      	ldrb	r2, [r7, #7]
 8008eee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3330      	adds	r3, #48	; 0x30
 8008f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7fe fa72 	bl	80073f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	f003 0320 	and.w	r3, r3, #32
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d060      	beq.n	8008fde <f_open+0x362>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d05c      	beq.n	8008fde <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	895b      	ldrh	r3, [r3, #10]
 8008f30:	025b      	lsls	r3, r3, #9
 8008f32:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8008f40:	e016      	b.n	8008f70 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fd1d 	bl	8007986 <get_fat>
 8008f4c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d802      	bhi.n	8008f5a <f_open+0x2de>
 8008f54:	2302      	movs	r3, #2
 8008f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f60:	d102      	bne.n	8008f68 <f_open+0x2ec>
 8008f62:	2301      	movs	r3, #1
 8008f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8008f70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d103      	bne.n	8008f80 <f_open+0x304>
 8008f78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d8e0      	bhi.n	8008f42 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008f86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d127      	bne.n	8008fde <f_open+0x362>
 8008f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d022      	beq.n	8008fde <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fe fcd3 	bl	8007948 <clust2sect>
 8008fa2:	6478      	str	r0, [r7, #68]	; 0x44
 8008fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d103      	bne.n	8008fb2 <f_open+0x336>
						res = FR_INT_ERR;
 8008faa:	2302      	movs	r3, #2
 8008fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008fb0:	e015      	b.n	8008fde <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fb4:	0a5a      	lsrs	r2, r3, #9
 8008fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fb8:	441a      	add	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	7858      	ldrb	r0, [r3, #1]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a1a      	ldr	r2, [r3, #32]
 8008fcc:	2301      	movs	r3, #1
 8008fce:	f7fe f911 	bl	80071f4 <disk_read>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <f_open+0x362>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008fde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d002      	beq.n	8008fec <f_open+0x370>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008fec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3760      	adds	r7, #96	; 0x60
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08c      	sub	sp, #48	; 0x30
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2200      	movs	r2, #0
 800900e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f107 0210 	add.w	r2, r7, #16
 8009016:	4611      	mov	r1, r2
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff fdb3 	bl	8008b84 <validate>
 800901e:	4603      	mov	r3, r0
 8009020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009024:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009028:	2b00      	cmp	r3, #0
 800902a:	d107      	bne.n	800903c <f_write+0x44>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	7d5b      	ldrb	r3, [r3, #21]
 8009030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009034:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009038:	2b00      	cmp	r3, #0
 800903a:	d002      	beq.n	8009042 <f_write+0x4a>
 800903c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009040:	e14b      	b.n	80092da <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	7d1b      	ldrb	r3, [r3, #20]
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <f_write+0x5a>
 800904e:	2307      	movs	r3, #7
 8009050:	e143      	b.n	80092da <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	699a      	ldr	r2, [r3, #24]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	441a      	add	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	429a      	cmp	r2, r3
 8009060:	f080 812d 	bcs.w	80092be <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	43db      	mvns	r3, r3
 800906a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800906c:	e127      	b.n	80092be <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009076:	2b00      	cmp	r3, #0
 8009078:	f040 80e3 	bne.w	8009242 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	0a5b      	lsrs	r3, r3, #9
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	8952      	ldrh	r2, [r2, #10]
 8009086:	3a01      	subs	r2, #1
 8009088:	4013      	ands	r3, r2
 800908a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d143      	bne.n	800911a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10c      	bne.n	80090b4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d11a      	bne.n	80090dc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2100      	movs	r1, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe fe64 	bl	8007d78 <create_chain>
 80090b0:	62b8      	str	r0, [r7, #40]	; 0x28
 80090b2:	e013      	b.n	80090dc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d007      	beq.n	80090cc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	4619      	mov	r1, r3
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f7fe fef0 	bl	8007ea8 <clmt_clust>
 80090c8:	62b8      	str	r0, [r7, #40]	; 0x28
 80090ca:	e007      	b.n	80090dc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f7fe fe4f 	bl	8007d78 <create_chain>
 80090da:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 80f2 	beq.w	80092c8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80090e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d104      	bne.n	80090f4 <f_write+0xfc>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2202      	movs	r2, #2
 80090ee:	755a      	strb	r2, [r3, #21]
 80090f0:	2302      	movs	r3, #2
 80090f2:	e0f2      	b.n	80092da <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fa:	d104      	bne.n	8009106 <f_write+0x10e>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2201      	movs	r2, #1
 8009100:	755a      	strb	r2, [r3, #21]
 8009102:	2301      	movs	r3, #1
 8009104:	e0e9      	b.n	80092da <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800910a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d102      	bne.n	800911a <f_write+0x122>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009118:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	7d1b      	ldrb	r3, [r3, #20]
 800911e:	b25b      	sxtb	r3, r3
 8009120:	2b00      	cmp	r3, #0
 8009122:	da18      	bge.n	8009156 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	7858      	ldrb	r0, [r3, #1]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a1a      	ldr	r2, [r3, #32]
 8009132:	2301      	movs	r3, #1
 8009134:	f7fe f87e 	bl	8007234 <disk_write>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d004      	beq.n	8009148 <f_write+0x150>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2201      	movs	r2, #1
 8009142:	755a      	strb	r2, [r3, #21]
 8009144:	2301      	movs	r3, #1
 8009146:	e0c8      	b.n	80092da <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	7d1b      	ldrb	r3, [r3, #20]
 800914c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009150:	b2da      	uxtb	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	69db      	ldr	r3, [r3, #28]
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	f7fe fbf2 	bl	8007948 <clust2sect>
 8009164:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d104      	bne.n	8009176 <f_write+0x17e>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2202      	movs	r2, #2
 8009170:	755a      	strb	r2, [r3, #21]
 8009172:	2302      	movs	r3, #2
 8009174:	e0b1      	b.n	80092da <f_write+0x2e2>
			sect += csect;
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	4413      	add	r3, r2
 800917c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	0a5b      	lsrs	r3, r3, #9
 8009182:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d03c      	beq.n	8009204 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	4413      	add	r3, r2
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	8952      	ldrh	r2, [r2, #10]
 8009194:	4293      	cmp	r3, r2
 8009196:	d905      	bls.n	80091a4 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	895b      	ldrh	r3, [r3, #10]
 800919c:	461a      	mov	r2, r3
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	7858      	ldrb	r0, [r3, #1]
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	69f9      	ldr	r1, [r7, #28]
 80091ae:	f7fe f841 	bl	8007234 <disk_write>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d004      	beq.n	80091c2 <f_write+0x1ca>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2201      	movs	r2, #1
 80091bc:	755a      	strb	r2, [r3, #21]
 80091be:	2301      	movs	r3, #1
 80091c0:	e08b      	b.n	80092da <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6a1a      	ldr	r2, [r3, #32]
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	6a3a      	ldr	r2, [r7, #32]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d915      	bls.n	80091fc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a1a      	ldr	r2, [r3, #32]
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	025b      	lsls	r3, r3, #9
 80091e0:	69fa      	ldr	r2, [r7, #28]
 80091e2:	4413      	add	r3, r2
 80091e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091e8:	4619      	mov	r1, r3
 80091ea:	f7fe f8e3 	bl	80073b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	7d1b      	ldrb	r3, [r3, #20]
 80091f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	025b      	lsls	r3, r3, #9
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009202:	e03f      	b.n	8009284 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6a1b      	ldr	r3, [r3, #32]
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	429a      	cmp	r2, r3
 800920c:	d016      	beq.n	800923c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	699a      	ldr	r2, [r3, #24]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009216:	429a      	cmp	r2, r3
 8009218:	d210      	bcs.n	800923c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	7858      	ldrb	r0, [r3, #1]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009224:	2301      	movs	r3, #1
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	f7fd ffe4 	bl	80071f4 <disk_read>
 800922c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800922e:	2b00      	cmp	r3, #0
 8009230:	d004      	beq.n	800923c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	755a      	strb	r2, [r3, #21]
 8009238:	2301      	movs	r3, #1
 800923a:	e04e      	b.n	80092da <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800924a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	429a      	cmp	r2, r3
 8009256:	d901      	bls.n	800925c <f_write+0x264>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800926a:	4413      	add	r3, r2
 800926c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926e:	69f9      	ldr	r1, [r7, #28]
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe f89f 	bl	80073b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	7d1b      	ldrb	r3, [r3, #20]
 800927a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800927e:	b2da      	uxtb	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009284:	69fa      	ldr	r2, [r7, #28]
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	4413      	add	r3, r2
 800928a:	61fb      	str	r3, [r7, #28]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	699a      	ldr	r2, [r3, #24]
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	441a      	add	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	619a      	str	r2, [r3, #24]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	68da      	ldr	r2, [r3, #12]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	bf38      	it	cc
 80092a4:	461a      	movcc	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	60da      	str	r2, [r3, #12]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	441a      	add	r2, r3
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	1ad3      	subs	r3, r2, r3
 80092bc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f47f aed4 	bne.w	800906e <f_write+0x76>
 80092c6:	e000      	b.n	80092ca <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80092c8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	7d1b      	ldrb	r3, [r3, #20]
 80092ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3730      	adds	r7, #48	; 0x30
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b086      	sub	sp, #24
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f107 0208 	add.w	r2, r7, #8
 80092f0:	4611      	mov	r1, r2
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7ff fc46 	bl	8008b84 <validate>
 80092f8:	4603      	mov	r3, r0
 80092fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d168      	bne.n	80093d4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	7d1b      	ldrb	r3, [r3, #20]
 8009306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930a:	2b00      	cmp	r3, #0
 800930c:	d062      	beq.n	80093d4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7d1b      	ldrb	r3, [r3, #20]
 8009312:	b25b      	sxtb	r3, r3
 8009314:	2b00      	cmp	r3, #0
 8009316:	da15      	bge.n	8009344 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	7858      	ldrb	r0, [r3, #1]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1a      	ldr	r2, [r3, #32]
 8009326:	2301      	movs	r3, #1
 8009328:	f7fd ff84 	bl	8007234 <disk_write>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <f_sync+0x54>
 8009332:	2301      	movs	r3, #1
 8009334:	e04f      	b.n	80093d6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	7d1b      	ldrb	r3, [r3, #20]
 800933a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800933e:	b2da      	uxtb	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009344:	f7fd feb8 	bl	80070b8 <get_fattime>
 8009348:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	4619      	mov	r1, r3
 8009352:	4610      	mov	r0, r2
 8009354:	f7fe fa5c 	bl	8007810 <move_window>
 8009358:	4603      	mov	r3, r0
 800935a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800935c:	7dfb      	ldrb	r3, [r7, #23]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d138      	bne.n	80093d4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009366:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	330b      	adds	r3, #11
 800936c:	781a      	ldrb	r2, [r3, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	330b      	adds	r3, #11
 8009372:	f042 0220 	orr.w	r2, r2, #32
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	461a      	mov	r2, r3
 8009384:	68f9      	ldr	r1, [r7, #12]
 8009386:	f7fe ff69 	bl	800825c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f103 021c 	add.w	r2, r3, #28
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	4619      	mov	r1, r3
 8009396:	4610      	mov	r0, r2
 8009398:	f7fd ffe0 	bl	800735c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	3316      	adds	r3, #22
 80093a0:	6939      	ldr	r1, [r7, #16]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fd ffda 	bl	800735c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3312      	adds	r3, #18
 80093ac:	2100      	movs	r1, #0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fd ffb9 	bl	8007326 <st_word>
					fs->wflag = 1;
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	2201      	movs	r2, #1
 80093b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fe fa55 	bl	800786c <sync_fs>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7d1b      	ldrb	r3, [r3, #20]
 80093ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7ff ff7b 	bl	80092e2 <f_sync>
 80093ec:	4603      	mov	r3, r0
 80093ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d118      	bne.n	8009428 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f107 0208 	add.w	r2, r7, #8
 80093fc:	4611      	mov	r1, r2
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff fbc0 	bl	8008b84 <validate>
 8009404:	4603      	mov	r3, r0
 8009406:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009408:	7bfb      	ldrb	r3, [r7, #15]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10c      	bne.n	8009428 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	4618      	mov	r0, r3
 8009414:	f7fe f958 	bl	80076c8 <dec_lock>
 8009418:	4603      	mov	r3, r0
 800941a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d102      	bne.n	8009428 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009428:	7bfb      	ldrb	r3, [r7, #15]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b090      	sub	sp, #64	; 0x40
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f107 0208 	add.w	r2, r7, #8
 8009442:	4611      	mov	r1, r2
 8009444:	4618      	mov	r0, r3
 8009446:	f7ff fb9d 	bl	8008b84 <validate>
 800944a:	4603      	mov	r3, r0
 800944c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009450:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009454:	2b00      	cmp	r3, #0
 8009456:	d103      	bne.n	8009460 <f_lseek+0x2e>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	7d5b      	ldrb	r3, [r3, #21]
 800945c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009460:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <f_lseek+0x3c>
 8009468:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800946c:	e1e6      	b.n	800983c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 80d1 	beq.w	800961a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947e:	d15a      	bne.n	8009536 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009488:	1d1a      	adds	r2, r3, #4
 800948a:	627a      	str	r2, [r7, #36]	; 0x24
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	2302      	movs	r3, #2
 8009492:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	2b00      	cmp	r3, #0
 800949e:	d03a      	beq.n	8009516 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	613b      	str	r3, [r7, #16]
 80094a4:	2300      	movs	r3, #0
 80094a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094aa:	3302      	adds	r3, #2
 80094ac:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	60fb      	str	r3, [r7, #12]
 80094b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b4:	3301      	adds	r3, #1
 80094b6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe fa62 	bl	8007986 <get_fat>
 80094c2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80094c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d804      	bhi.n	80094d4 <f_lseek+0xa2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2202      	movs	r2, #2
 80094ce:	755a      	strb	r2, [r3, #21]
 80094d0:	2302      	movs	r3, #2
 80094d2:	e1b3      	b.n	800983c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094da:	d104      	bne.n	80094e6 <f_lseek+0xb4>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	755a      	strb	r2, [r3, #21]
 80094e2:	2301      	movs	r3, #1
 80094e4:	e1aa      	b.n	800983c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3301      	adds	r3, #1
 80094ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d0de      	beq.n	80094ae <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80094f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d809      	bhi.n	800950c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	1d1a      	adds	r2, r3, #4
 80094fc:	627a      	str	r2, [r7, #36]	; 0x24
 80094fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	1d1a      	adds	r2, r3, #4
 8009506:	627a      	str	r2, [r7, #36]	; 0x24
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009512:	429a      	cmp	r2, r3
 8009514:	d3c4      	bcc.n	80094a0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800951c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800951e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	429a      	cmp	r2, r3
 8009524:	d803      	bhi.n	800952e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	e184      	b.n	8009838 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800952e:	2311      	movs	r3, #17
 8009530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009534:	e180      	b.n	8009838 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	429a      	cmp	r2, r3
 800953e:	d902      	bls.n	8009546 <f_lseek+0x114>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	f000 8172 	beq.w	8009838 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	3b01      	subs	r3, #1
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7fe fca4 	bl	8007ea8 <clmt_clust>
 8009560:	4602      	mov	r2, r0
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	f7fe f9ea 	bl	8007948 <clust2sect>
 8009574:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d104      	bne.n	8009586 <f_lseek+0x154>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2202      	movs	r2, #2
 8009580:	755a      	strb	r2, [r3, #21]
 8009582:	2302      	movs	r3, #2
 8009584:	e15a      	b.n	800983c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	3b01      	subs	r3, #1
 800958a:	0a5b      	lsrs	r3, r3, #9
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	8952      	ldrh	r2, [r2, #10]
 8009590:	3a01      	subs	r2, #1
 8009592:	4013      	ands	r3, r2
 8009594:	69ba      	ldr	r2, [r7, #24]
 8009596:	4413      	add	r3, r2
 8009598:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 8148 	beq.w	8009838 <f_lseek+0x406>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	69ba      	ldr	r2, [r7, #24]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	f000 8142 	beq.w	8009838 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	7d1b      	ldrb	r3, [r3, #20]
 80095b8:	b25b      	sxtb	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	da18      	bge.n	80095f0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	7858      	ldrb	r0, [r3, #1]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a1a      	ldr	r2, [r3, #32]
 80095cc:	2301      	movs	r3, #1
 80095ce:	f7fd fe31 	bl	8007234 <disk_write>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d004      	beq.n	80095e2 <f_lseek+0x1b0>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	755a      	strb	r2, [r3, #21]
 80095de:	2301      	movs	r3, #1
 80095e0:	e12c      	b.n	800983c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	7d1b      	ldrb	r3, [r3, #20]
 80095e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	7858      	ldrb	r0, [r3, #1]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095fa:	2301      	movs	r3, #1
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	f7fd fdf9 	bl	80071f4 <disk_read>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d004      	beq.n	8009612 <f_lseek+0x1e0>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	755a      	strb	r2, [r3, #21]
 800960e:	2301      	movs	r3, #1
 8009610:	e114      	b.n	800983c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69ba      	ldr	r2, [r7, #24]
 8009616:	621a      	str	r2, [r3, #32]
 8009618:	e10e      	b.n	8009838 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	429a      	cmp	r2, r3
 8009622:	d908      	bls.n	8009636 <f_lseek+0x204>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	7d1b      	ldrb	r3, [r3, #20]
 8009628:	f003 0302 	and.w	r3, r3, #2
 800962c:	2b00      	cmp	r3, #0
 800962e:	d102      	bne.n	8009636 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	637b      	str	r3, [r7, #52]	; 0x34
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009644:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 80a7 	beq.w	800979c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	895b      	ldrh	r3, [r3, #10]
 8009652:	025b      	lsls	r3, r3, #9
 8009654:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d01b      	beq.n	8009694 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	1e5a      	subs	r2, r3, #1
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	fbb2 f2f3 	udiv	r2, r2, r3
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	1e59      	subs	r1, r3, #1
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009670:	429a      	cmp	r2, r3
 8009672:	d30f      	bcc.n	8009694 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	1e5a      	subs	r2, r3, #1
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	425b      	negs	r3, r3
 800967c:	401a      	ands	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	69db      	ldr	r3, [r3, #28]
 8009690:	63bb      	str	r3, [r7, #56]	; 0x38
 8009692:	e022      	b.n	80096da <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800969a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969c:	2b00      	cmp	r3, #0
 800969e:	d119      	bne.n	80096d4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2100      	movs	r1, #0
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fe fb67 	bl	8007d78 <create_chain>
 80096aa:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80096ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d104      	bne.n	80096bc <f_lseek+0x28a>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2202      	movs	r2, #2
 80096b6:	755a      	strb	r2, [r3, #21]
 80096b8:	2302      	movs	r3, #2
 80096ba:	e0bf      	b.n	800983c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80096bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c2:	d104      	bne.n	80096ce <f_lseek+0x29c>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	755a      	strb	r2, [r3, #21]
 80096ca:	2301      	movs	r3, #1
 80096cc:	e0b6      	b.n	800983c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096d2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096d8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80096da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d05d      	beq.n	800979c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80096e0:	e03a      	b.n	8009758 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80096e2:	683a      	ldr	r2, [r7, #0]
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	603b      	str	r3, [r7, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	699a      	ldr	r2, [r3, #24]
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	441a      	add	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	7d1b      	ldrb	r3, [r3, #20]
 80096fa:	f003 0302 	and.w	r3, r3, #2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00b      	beq.n	800971a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009706:	4618      	mov	r0, r3
 8009708:	f7fe fb36 	bl	8007d78 <create_chain>
 800970c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	2b00      	cmp	r3, #0
 8009712:	d108      	bne.n	8009726 <f_lseek+0x2f4>
							ofs = 0; break;
 8009714:	2300      	movs	r3, #0
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	e022      	b.n	8009760 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800971e:	4618      	mov	r0, r3
 8009720:	f7fe f931 	bl	8007986 <get_fat>
 8009724:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972c:	d104      	bne.n	8009738 <f_lseek+0x306>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	755a      	strb	r2, [r3, #21]
 8009734:	2301      	movs	r3, #1
 8009736:	e081      	b.n	800983c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973a:	2b01      	cmp	r3, #1
 800973c:	d904      	bls.n	8009748 <f_lseek+0x316>
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009744:	429a      	cmp	r2, r3
 8009746:	d304      	bcc.n	8009752 <f_lseek+0x320>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2202      	movs	r2, #2
 800974c:	755a      	strb	r2, [r3, #21]
 800974e:	2302      	movs	r3, #2
 8009750:	e074      	b.n	800983c <f_lseek+0x40a>
					fp->clust = clst;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009756:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	429a      	cmp	r2, r3
 800975e:	d8c0      	bhi.n	80096e2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	699a      	ldr	r2, [r3, #24]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	441a      	add	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009772:	2b00      	cmp	r3, #0
 8009774:	d012      	beq.n	800979c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe f8e4 	bl	8007948 <clust2sect>
 8009780:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009784:	2b00      	cmp	r3, #0
 8009786:	d104      	bne.n	8009792 <f_lseek+0x360>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	755a      	strb	r2, [r3, #21]
 800978e:	2302      	movs	r3, #2
 8009790:	e054      	b.n	800983c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	0a5b      	lsrs	r3, r3, #9
 8009796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009798:	4413      	add	r3, r2
 800979a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	699a      	ldr	r2, [r3, #24]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d90a      	bls.n	80097be <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	699a      	ldr	r2, [r3, #24]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	7d1b      	ldrb	r3, [r3, #20]
 80097b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d036      	beq.n	8009838 <f_lseek+0x406>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d031      	beq.n	8009838 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	7d1b      	ldrb	r3, [r3, #20]
 80097d8:	b25b      	sxtb	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	da18      	bge.n	8009810 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	7858      	ldrb	r0, [r3, #1]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a1a      	ldr	r2, [r3, #32]
 80097ec:	2301      	movs	r3, #1
 80097ee:	f7fd fd21 	bl	8007234 <disk_write>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d004      	beq.n	8009802 <f_lseek+0x3d0>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	755a      	strb	r2, [r3, #21]
 80097fe:	2301      	movs	r3, #1
 8009800:	e01c      	b.n	800983c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	7d1b      	ldrb	r3, [r3, #20]
 8009806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800980a:	b2da      	uxtb	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	7858      	ldrb	r0, [r3, #1]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800981a:	2301      	movs	r3, #1
 800981c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800981e:	f7fd fce9 	bl	80071f4 <disk_read>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <f_lseek+0x400>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	755a      	strb	r2, [r3, #21]
 800982e:	2301      	movs	r3, #1
 8009830:	e004      	b.n	800983c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009836:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009838:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800983c:	4618      	mov	r0, r3
 800983e:	3740      	adds	r7, #64	; 0x40
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b092      	sub	sp, #72	; 0x48
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009850:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009854:	f107 030c 	add.w	r3, r7, #12
 8009858:	2200      	movs	r2, #0
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe ff46 	bl	80086ec <find_volume>
 8009860:	4603      	mov	r3, r0
 8009862:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009866:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800986a:	2b00      	cmp	r3, #0
 800986c:	f040 8099 	bne.w	80099a2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009878:	691a      	ldr	r2, [r3, #16]
 800987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	3b02      	subs	r3, #2
 8009880:	429a      	cmp	r2, r3
 8009882:	d804      	bhi.n	800988e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009886:	691a      	ldr	r2, [r3, #16]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	e089      	b.n	80099a2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800988e:	2300      	movs	r3, #0
 8009890:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d128      	bne.n	80098ec <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800989a:	2302      	movs	r3, #2
 800989c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80098a2:	f107 0314 	add.w	r3, r7, #20
 80098a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fe f86c 	bl	8007986 <get_fat>
 80098ae:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80098b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b6:	d103      	bne.n	80098c0 <f_getfree+0x7c>
 80098b8:	2301      	movs	r3, #1
 80098ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80098be:	e063      	b.n	8009988 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80098c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d103      	bne.n	80098ce <f_getfree+0x8a>
 80098c6:	2302      	movs	r3, #2
 80098c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80098cc:	e05c      	b.n	8009988 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d102      	bne.n	80098da <f_getfree+0x96>
 80098d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098d6:	3301      	adds	r3, #1
 80098d8:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80098da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098dc:	3301      	adds	r3, #1
 80098de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	695b      	ldr	r3, [r3, #20]
 80098e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d3db      	bcc.n	80098a2 <f_getfree+0x5e>
 80098ea:	e04d      	b.n	8009988 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80098ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ee:	695b      	ldr	r3, [r3, #20]
 80098f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	637b      	str	r3, [r7, #52]	; 0x34
 80098fc:	2300      	movs	r3, #0
 80098fe:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009902:	2b00      	cmp	r3, #0
 8009904:	d113      	bne.n	800992e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	63ba      	str	r2, [r7, #56]	; 0x38
 800990e:	4619      	mov	r1, r3
 8009910:	f7fd ff7e 	bl	8007810 <move_window>
 8009914:	4603      	mov	r3, r0
 8009916:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800991a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800991e:	2b00      	cmp	r3, #0
 8009920:	d131      	bne.n	8009986 <f_getfree+0x142>
							p = fs->win;
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	3330      	adds	r3, #48	; 0x30
 8009926:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800992c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b02      	cmp	r3, #2
 8009934:	d10f      	bne.n	8009956 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009938:	f7fd fcba 	bl	80072b0 <ld_word>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <f_getfree+0x104>
 8009942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009944:	3301      	adds	r3, #1
 8009946:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994a:	3302      	adds	r3, #2
 800994c:	633b      	str	r3, [r7, #48]	; 0x30
 800994e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009950:	3b02      	subs	r3, #2
 8009952:	637b      	str	r3, [r7, #52]	; 0x34
 8009954:	e010      	b.n	8009978 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009958:	f7fd fcc2 	bl	80072e0 <ld_dword>
 800995c:	4603      	mov	r3, r0
 800995e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d102      	bne.n	800996c <f_getfree+0x128>
 8009966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009968:	3301      	adds	r3, #1
 800996a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800996c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996e:	3304      	adds	r3, #4
 8009970:	633b      	str	r3, [r7, #48]	; 0x30
 8009972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009974:	3b04      	subs	r3, #4
 8009976:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800997a:	3b01      	subs	r3, #1
 800997c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800997e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1bd      	bne.n	8009900 <f_getfree+0xbc>
 8009984:	e000      	b.n	8009988 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009986:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800998c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800998e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009990:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009992:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	791a      	ldrb	r2, [r3, #4]
 8009998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999a:	f042 0201 	orr.w	r2, r2, #1
 800999e:	b2d2      	uxtb	r2, r2
 80099a0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80099a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3748      	adds	r7, #72	; 0x48
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	460b      	mov	r3, r1
 80099b8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80099ba:	78fb      	ldrb	r3, [r7, #3]
 80099bc:	2b0a      	cmp	r3, #10
 80099be:	d103      	bne.n	80099c8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80099c0:	210d      	movs	r1, #13
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff fff3 	bl	80099ae <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	db25      	blt.n	8009a20 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	60fa      	str	r2, [r7, #12]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	4413      	add	r3, r2
 80099de:	78fa      	ldrb	r2, [r7, #3]
 80099e0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2b3c      	cmp	r3, #60	; 0x3c
 80099e6:	dd12      	ble.n	8009a0e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6818      	ldr	r0, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f103 010c 	add.w	r1, r3, #12
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	f107 0308 	add.w	r3, r7, #8
 80099f8:	f7ff fafe 	bl	8008ff8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d101      	bne.n	8009a08 <putc_bfd+0x5a>
 8009a04:	2300      	movs	r3, #0
 8009a06:	e001      	b.n	8009a0c <putc_bfd+0x5e>
 8009a08:	f04f 33ff 	mov.w	r3, #4294967295
 8009a0c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	609a      	str	r2, [r3, #8]
 8009a1e:	e000      	b.n	8009a22 <putc_bfd+0x74>
	if (i < 0) return;
 8009a20:	bf00      	nop
}
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	db16      	blt.n	8009a66 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6818      	ldr	r0, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f103 010c 	add.w	r1, r3, #12
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	461a      	mov	r2, r3
 8009a48:	f107 030c 	add.w	r3, r7, #12
 8009a4c:	f7ff fad4 	bl	8008ff8 <f_write>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d107      	bne.n	8009a66 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d102      	bne.n	8009a66 <putc_flush+0x3e>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	e001      	b.n	8009a6a <putc_flush+0x42>
	return EOF;
 8009a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b083      	sub	sp, #12
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	605a      	str	r2, [r3, #4]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	609a      	str	r2, [r3, #8]
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b096      	sub	sp, #88	; 0x58
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009aa6:	f107 030c 	add.w	r3, r7, #12
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7ff ffe0 	bl	8009a72 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009ab2:	e009      	b.n	8009ac8 <f_puts+0x2c>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	607a      	str	r2, [r7, #4]
 8009aba:	781a      	ldrb	r2, [r3, #0]
 8009abc:	f107 030c 	add.w	r3, r7, #12
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff ff73 	bl	80099ae <putc_bfd>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1f1      	bne.n	8009ab4 <f_puts+0x18>
	return putc_flush(&pb);
 8009ad0:	f107 030c 	add.w	r3, r7, #12
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7ff ffa7 	bl	8009a28 <putc_flush>
 8009ada:	4603      	mov	r3, r0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3758      	adds	r7, #88	; 0x58
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	4613      	mov	r3, r2
 8009af0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009af2:	2301      	movs	r3, #1
 8009af4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009afa:	4b1f      	ldr	r3, [pc, #124]	; (8009b78 <FATFS_LinkDriverEx+0x94>)
 8009afc:	7a5b      	ldrb	r3, [r3, #9]
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d131      	bne.n	8009b68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009b04:	4b1c      	ldr	r3, [pc, #112]	; (8009b78 <FATFS_LinkDriverEx+0x94>)
 8009b06:	7a5b      	ldrb	r3, [r3, #9]
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	4b1a      	ldr	r3, [pc, #104]	; (8009b78 <FATFS_LinkDriverEx+0x94>)
 8009b0e:	2100      	movs	r1, #0
 8009b10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009b12:	4b19      	ldr	r3, [pc, #100]	; (8009b78 <FATFS_LinkDriverEx+0x94>)
 8009b14:	7a5b      	ldrb	r3, [r3, #9]
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	4a17      	ldr	r2, [pc, #92]	; (8009b78 <FATFS_LinkDriverEx+0x94>)
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4413      	add	r3, r2
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009b22:	4b15      	ldr	r3, [pc, #84]	; (8009b78 <FATFS_LinkDriverEx+0x94>)
 8009b24:	7a5b      	ldrb	r3, [r3, #9]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	461a      	mov	r2, r3
 8009b2a:	4b13      	ldr	r3, [pc, #76]	; (8009b78 <FATFS_LinkDriverEx+0x94>)
 8009b2c:	4413      	add	r3, r2
 8009b2e:	79fa      	ldrb	r2, [r7, #7]
 8009b30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009b32:	4b11      	ldr	r3, [pc, #68]	; (8009b78 <FATFS_LinkDriverEx+0x94>)
 8009b34:	7a5b      	ldrb	r3, [r3, #9]
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	b2d1      	uxtb	r1, r2
 8009b3c:	4a0e      	ldr	r2, [pc, #56]	; (8009b78 <FATFS_LinkDriverEx+0x94>)
 8009b3e:	7251      	strb	r1, [r2, #9]
 8009b40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009b42:	7dbb      	ldrb	r3, [r7, #22]
 8009b44:	3330      	adds	r3, #48	; 0x30
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	223a      	movs	r2, #58	; 0x3a
 8009b52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	3302      	adds	r3, #2
 8009b58:	222f      	movs	r2, #47	; 0x2f
 8009b5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	3303      	adds	r3, #3
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	371c      	adds	r7, #28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	2000a0f8 	.word	0x2000a0f8

08009b7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b86:	2200      	movs	r2, #0
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff ffaa 	bl	8009ae4 <FATFS_LinkDriverEx>
 8009b90:	4603      	mov	r3, r0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	881a      	ldrh	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	799b      	ldrb	r3, [r3, #6]
 8009bac:	08db      	lsrs	r3, r3, #3
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	fb12 f303 	smulbb	r3, r2, r3
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	889b      	ldrh	r3, [r3, #4]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	885b      	ldrh	r3, [r3, #2]
 8009bc6:	fb03 f302 	mul.w	r3, r3, r2
 8009bca:	461a      	mov	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	683a      	ldr	r2, [r7, #0]
 8009bd4:	60da      	str	r2, [r3, #12]
}
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8009be2:	b490      	push	{r4, r7}
 8009be4:	b086      	sub	sp, #24
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	4604      	mov	r4, r0
 8009bea:	4608      	mov	r0, r1
 8009bec:	1d39      	adds	r1, r7, #4
 8009bee:	e881 000c 	stmia.w	r1, {r2, r3}
 8009bf2:	4623      	mov	r3, r4
 8009bf4:	81fb      	strh	r3, [r7, #14]
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8009bfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009c02:	88ba      	ldrh	r2, [r7, #4]
 8009c04:	4293      	cmp	r3, r2
 8009c06:	da04      	bge.n	8009c12 <code+0x30>
        code |= LEFT;
 8009c08:	2201      	movs	r2, #1
 8009c0a:	7dfb      	ldrb	r3, [r7, #23]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	75fb      	strb	r3, [r7, #23]
 8009c10:	e008      	b.n	8009c24 <code+0x42>
    } else if (x0 > window.x1) {
 8009c12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009c16:	893a      	ldrh	r2, [r7, #8]
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	dd03      	ble.n	8009c24 <code+0x42>
        code |= RIGHT;
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8009c24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009c28:	88fa      	ldrh	r2, [r7, #6]
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	da04      	bge.n	8009c38 <code+0x56>
        code |= BOTTOM;
 8009c2e:	2204      	movs	r2, #4
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	75fb      	strb	r3, [r7, #23]
 8009c36:	e008      	b.n	8009c4a <code+0x68>
    } else if (y0 > window.y1) {
 8009c38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009c3c:	897a      	ldrh	r2, [r7, #10]
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	dd03      	ble.n	8009c4a <code+0x68>
        code |= TOP;
 8009c42:	2208      	movs	r2, #8
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bc90      	pop	{r4, r7}
 8009c54:	4770      	bx	lr

08009c56 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b088      	sub	sp, #32
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	60f8      	str	r0, [r7, #12]
 8009c5e:	60b9      	str	r1, [r7, #8]
 8009c60:	607a      	str	r2, [r7, #4]
 8009c62:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f9b3 0000 	ldrsh.w	r0, [r3]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009c70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c74:	cb0c      	ldmia	r3, {r2, r3}
 8009c76:	f7ff ffb4 	bl	8009be2 <code>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f9b3 0000 	ldrsh.w	r0, [r3]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c8e:	cb0c      	ldmia	r3, {r2, r3}
 8009c90:	f7ff ffa7 	bl	8009be2 <code>
 8009c94:	4603      	mov	r3, r0
 8009c96:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8009c9c:	7ffa      	ldrb	r2, [r7, #31]
 8009c9e:	7fbb      	ldrb	r3, [r7, #30]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d102      	bne.n	8009cae <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	777b      	strb	r3, [r7, #29]
            break;
 8009cac:	e0e9      	b.n	8009e82 <clip_line+0x22c>
        } else if (code0 & code1) {
 8009cae:	7ffa      	ldrb	r2, [r7, #31]
 8009cb0:	7fbb      	ldrb	r3, [r7, #30]
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f040 80e2 	bne.w	8009e80 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8009cc4:	7ffb      	ldrb	r3, [r7, #31]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <clip_line+0x78>
 8009cca:	7ffb      	ldrb	r3, [r7, #31]
 8009ccc:	e000      	b.n	8009cd0 <clip_line+0x7a>
 8009cce:	7fbb      	ldrb	r3, [r7, #30]
 8009cd0:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8009cd2:	2208      	movs	r2, #8
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d024      	beq.n	8009d28 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cec:	4619      	mov	r1, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cf4:	1acb      	subs	r3, r1, r3
 8009cf6:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	68b9      	ldr	r1, [r7, #8]
 8009cfc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8009d00:	1a41      	subs	r1, r0, r1
 8009d02:	fb01 f103 	mul.w	r1, r1, r3
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d14:	1ac3      	subs	r3, r0, r3
 8009d16:	fb91 f3f3 	sdiv	r3, r1, r3
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	4413      	add	r3, r2
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8009d22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d24:	833b      	strh	r3, [r7, #24]
 8009d26:	e07f      	b.n	8009e28 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8009d28:	2204      	movs	r2, #4
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d024      	beq.n	8009d7e <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d42:	4619      	mov	r1, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d4a:	1acb      	subs	r3, r1, r3
 8009d4c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8009d4e:	4608      	mov	r0, r1
 8009d50:	68b9      	ldr	r1, [r7, #8]
 8009d52:	f9b1 1000 	ldrsh.w	r1, [r1]
 8009d56:	1a41      	subs	r1, r0, r1
 8009d58:	fb01 f103 	mul.w	r1, r1, r3
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d62:	4618      	mov	r0, r3
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d6a:	1ac3      	subs	r3, r0, r3
 8009d6c:	fb91 f3f3 	sdiv	r3, r1, r3
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	4413      	add	r3, r2
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8009d78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009d7a:	833b      	strh	r3, [r7, #24]
 8009d7c:	e054      	b.n	8009e28 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8009d7e:	2202      	movs	r2, #2
 8009d80:	7dfb      	ldrb	r3, [r7, #23]
 8009d82:	4013      	ands	r3, r2
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d024      	beq.n	8009dd4 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009da0:	1acb      	subs	r3, r1, r3
 8009da2:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8009da4:	4608      	mov	r0, r1
 8009da6:	68f9      	ldr	r1, [r7, #12]
 8009da8:	f9b1 1000 	ldrsh.w	r1, [r1]
 8009dac:	1a41      	subs	r1, r0, r1
 8009dae:	fb01 f103 	mul.w	r1, r1, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009db8:	4618      	mov	r0, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dc0:	1ac3      	subs	r3, r0, r3
 8009dc2:	fb91 f3f3 	sdiv	r3, r1, r3
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	4413      	add	r3, r2
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8009dce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009dd0:	837b      	strh	r3, [r7, #26]
 8009dd2:	e029      	b.n	8009e28 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	4013      	ands	r3, r2
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d023      	beq.n	8009e28 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dee:	4619      	mov	r1, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009df6:	1acb      	subs	r3, r1, r3
 8009df8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8009dfa:	4608      	mov	r0, r1
 8009dfc:	68f9      	ldr	r1, [r7, #12]
 8009dfe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8009e02:	1a41      	subs	r1, r0, r1
 8009e04:	fb01 f103 	mul.w	r1, r1, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e16:	1ac3      	subs	r3, r0, r3
 8009e18:	fb91 f3f3 	sdiv	r3, r1, r3
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	4413      	add	r3, r2
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8009e24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e26:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8009e28:	7dfa      	ldrb	r2, [r7, #23]
 8009e2a:	7ffb      	ldrb	r3, [r7, #31]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d113      	bne.n	8009e58 <clip_line+0x202>
                *x0 = x;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	8b7a      	ldrh	r2, [r7, #26]
 8009e34:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	8b3a      	ldrh	r2, [r7, #24]
 8009e3a:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009e48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e4c:	cb0c      	ldmia	r3, {r2, r3}
 8009e4e:	f7ff fec8 	bl	8009be2 <code>
 8009e52:	4603      	mov	r3, r0
 8009e54:	77fb      	strb	r3, [r7, #31]
 8009e56:	e721      	b.n	8009c9c <clip_line+0x46>
            } else {
                *x1 = x;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	8b7a      	ldrh	r2, [r7, #26]
 8009e5c:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	8b3a      	ldrh	r2, [r7, #24]
 8009e62:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f9b3 0000 	ldrsh.w	r0, [r3]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e74:	cb0c      	ldmia	r3, {r2, r3}
 8009e76:	f7ff feb4 	bl	8009be2 <code>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8009e7e:	e70d      	b.n	8009c9c <clip_line+0x46>
            break;
 8009e80:	bf00      	nop
            }
        }
    }

    return accept;
 8009e82:	7f7b      	ldrb	r3, [r7, #29]
 8009e84:	4618      	mov	r0, r3
 8009e86:	3720      	adds	r7, #32
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	3306      	adds	r3, #6
 8009e9c:	2208      	movs	r2, #8
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	f001 f934 	bl	800b10c <memcpy>
    meta->width = font[FONTX_WIDTH];
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	7b9a      	ldrb	r2, [r3, #14]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	7bda      	ldrb	r2, [r3, #15]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	7c1a      	ldrb	r2, [r3, #16]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	72da      	strb	r2, [r3, #11]

    return 0;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b08e      	sub	sp, #56	; 0x38
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8009ed2:	f107 0314 	add.w	r3, r7, #20
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7ff ffd7 	bl	8009e8c <fontx_meta>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8009ee4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <fontx_glyph+0x2c>
        return status;
 8009eec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ef0:	e077      	b.n	8009fe2 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8009ef2:	7f7a      	ldrb	r2, [r7, #29]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8009ef8:	7fba      	ldrb	r2, [r7, #30]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8009efe:	7f7b      	ldrb	r3, [r7, #29]
 8009f00:	3307      	adds	r3, #7
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	da00      	bge.n	8009f08 <fontx_glyph+0x42>
 8009f06:	3307      	adds	r3, #7
 8009f08:	10db      	asrs	r3, r3, #3
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	78da      	ldrb	r2, [r3, #3]
 8009f14:	7fbb      	ldrb	r3, [r7, #30]
 8009f16:	fb12 f303 	smulbb	r3, r2, r3
 8009f1a:	b2da      	uxtb	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8009f20:	7ffb      	ldrb	r3, [r7, #31]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10f      	bne.n	8009f46 <fontx_glyph+0x80>
        if (code < 0x100) {
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	2bff      	cmp	r3, #255	; 0xff
 8009f2a:	d859      	bhi.n	8009fe0 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	789b      	ldrb	r3, [r3, #2]
 8009f30:	461a      	mov	r2, r3
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	fb03 f302 	mul.w	r3, r3, r2
 8009f38:	3311      	adds	r3, #17
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	441a      	add	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	e04d      	b.n	8009fe2 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3312      	adds	r3, #18
 8009f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3311      	adds	r3, #17
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8009f58:	e03d      	b.n	8009fd6 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f62:	3301      	adds	r3, #1
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	021b      	lsls	r3, r3, #8
 8009f68:	4413      	add	r3, r2
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8009f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6e:	3302      	adds	r3, #2
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f76:	3303      	adds	r3, #3
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	021b      	lsls	r3, r3, #8
 8009f7c:	4413      	add	r3, r2
 8009f7e:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d31c      	bcc.n	8009fc2 <fontx_glyph+0xfc>
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d818      	bhi.n	8009fc2 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f98:	4413      	add	r3, r2
 8009f9a:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3311      	adds	r3, #17
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	461a      	mov	r2, r3
                    nc * glyph->size
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	789b      	ldrb	r3, [r3, #2]
 8009faa:	4619      	mov	r1, r3
 8009fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fae:	fb03 f301 	mul.w	r3, r3, r1
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8009fb2:	4413      	add	r3, r2
 8009fb4:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	441a      	add	r2, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e00f      	b.n	8009fe2 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8009fc2:	6a3a      	ldr	r2, [r7, #32]
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	1ad2      	subs	r2, r2, r3
 8009fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fca:	4413      	add	r3, r2
 8009fcc:	3301      	adds	r3, #1
 8009fce:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8009fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	1e5a      	subs	r2, r3, #1
 8009fda:	633a      	str	r2, [r7, #48]	; 0x30
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1bc      	bne.n	8009f5a <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3738      	adds	r7, #56	; 0x38
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	dd01      	ble.n	800a000 <min+0x16>
        return b;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	e000      	b.n	800a002 <min+0x18>
    };
    return a;
 800a000:	687b      	ldr	r3, [r7, #4]
}
 800a002:	4618      	mov	r0, r3
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <max>:

static inline int max(int a, int b) {
 800a00e:	b480      	push	{r7}
 800a010:	b083      	sub	sp, #12
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	dd01      	ble.n	800a024 <max+0x16>
        return a;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	e000      	b.n	800a026 <max+0x18>
    }
    return b;
 800a024:	683b      	ldr	r3, [r7, #0]
}
 800a026:	4618      	mov	r0, r3
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
	...

0800a034 <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800a034:	b490      	push	{r4, r7}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4604      	mov	r4, r0
 800a03c:	4608      	mov	r0, r1
 800a03e:	4611      	mov	r1, r2
 800a040:	461a      	mov	r2, r3
 800a042:	4623      	mov	r3, r4
 800a044:	80fb      	strh	r3, [r7, #6]
 800a046:	4603      	mov	r3, r0
 800a048:	80bb      	strh	r3, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	807b      	strh	r3, [r7, #2]
 800a04e:	4613      	mov	r3, r2
 800a050:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 800a052:	4a08      	ldr	r2, [pc, #32]	; (800a074 <hagl_set_clip_window+0x40>)
 800a054:	88fb      	ldrh	r3, [r7, #6]
 800a056:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 800a058:	4a06      	ldr	r2, [pc, #24]	; (800a074 <hagl_set_clip_window+0x40>)
 800a05a:	88bb      	ldrh	r3, [r7, #4]
 800a05c:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 800a05e:	4a05      	ldr	r2, [pc, #20]	; (800a074 <hagl_set_clip_window+0x40>)
 800a060:	887b      	ldrh	r3, [r7, #2]
 800a062:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 800a064:	4a03      	ldr	r2, [pc, #12]	; (800a074 <hagl_set_clip_window+0x40>)
 800a066:	883b      	ldrh	r3, [r7, #0]
 800a068:	80d3      	strh	r3, [r2, #6]
}
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bc90      	pop	{r4, r7}
 800a072:	4770      	bx	lr
 800a074:	20000028 	.word	0x20000028

0800a078 <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	80fb      	strh	r3, [r7, #6]
 800a082:	460b      	mov	r3, r1
 800a084:	80bb      	strh	r3, [r7, #4]
 800a086:	4613      	mov	r3, r2
 800a088:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800a08a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a08e:	4a12      	ldr	r2, [pc, #72]	; (800a0d8 <hagl_put_pixel+0x60>)
 800a090:	8812      	ldrh	r2, [r2, #0]
 800a092:	4293      	cmp	r3, r2
 800a094:	db1a      	blt.n	800a0cc <hagl_put_pixel+0x54>
 800a096:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a09a:	4a0f      	ldr	r2, [pc, #60]	; (800a0d8 <hagl_put_pixel+0x60>)
 800a09c:	8852      	ldrh	r2, [r2, #2]
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	db14      	blt.n	800a0cc <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a0a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0a6:	4a0c      	ldr	r2, [pc, #48]	; (800a0d8 <hagl_put_pixel+0x60>)
 800a0a8:	8892      	ldrh	r2, [r2, #4]
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	dc10      	bgt.n	800a0d0 <hagl_put_pixel+0x58>
 800a0ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a0b2:	4a09      	ldr	r2, [pc, #36]	; (800a0d8 <hagl_put_pixel+0x60>)
 800a0b4:	88d2      	ldrh	r2, [r2, #6]
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	dc0a      	bgt.n	800a0d0 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 800a0ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a0c2:	887a      	ldrh	r2, [r7, #2]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7f7 fe81 	bl	8001dcc <lcd_put_pixel>
 800a0ca:	e002      	b.n	800a0d2 <hagl_put_pixel+0x5a>
        return;
 800a0cc:	bf00      	nop
 800a0ce:	e000      	b.n	800a0d2 <hagl_put_pixel+0x5a>
        return;
 800a0d0:	bf00      	nop
}
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	20000028 	.word	0x20000028

0800a0dc <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 800a0dc:	b590      	push	{r4, r7, lr}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af02      	add	r7, sp, #8
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	4608      	mov	r0, r1
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	4623      	mov	r3, r4
 800a0ec:	80fb      	strh	r3, [r7, #6]
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	80bb      	strh	r3, [r7, #4]
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	807b      	strh	r3, [r7, #2]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800a0fa:	88fa      	ldrh	r2, [r7, #6]
 800a0fc:	887b      	ldrh	r3, [r7, #2]
 800a0fe:	4413      	add	r3, r2
 800a100:	b29b      	uxth	r3, r3
 800a102:	b21a      	sxth	r2, r3
 800a104:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800a108:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a10c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a110:	883b      	ldrh	r3, [r7, #0]
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	4623      	mov	r3, r4
 800a116:	f000 f827 	bl	800a168 <hagl_draw_line>
#endif
}
 800a11a:	bf00      	nop
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd90      	pop	{r4, r7, pc}

0800a122 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 800a122:	b590      	push	{r4, r7, lr}
 800a124:	b085      	sub	sp, #20
 800a126:	af02      	add	r7, sp, #8
 800a128:	4604      	mov	r4, r0
 800a12a:	4608      	mov	r0, r1
 800a12c:	4611      	mov	r1, r2
 800a12e:	461a      	mov	r2, r3
 800a130:	4623      	mov	r3, r4
 800a132:	80fb      	strh	r3, [r7, #6]
 800a134:	4603      	mov	r3, r0
 800a136:	80bb      	strh	r3, [r7, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	807b      	strh	r3, [r7, #2]
 800a13c:	4613      	mov	r3, r2
 800a13e:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 800a140:	88ba      	ldrh	r2, [r7, #4]
 800a142:	887b      	ldrh	r3, [r7, #2]
 800a144:	4413      	add	r3, r2
 800a146:	b29b      	uxth	r3, r3
 800a148:	b21c      	sxth	r4, r3
 800a14a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a14e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a152:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a156:	883b      	ldrh	r3, [r7, #0]
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	4623      	mov	r3, r4
 800a15c:	f000 f804 	bl	800a168 <hagl_draw_line>
#endif
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	bd90      	pop	{r4, r7, pc}

0800a168 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800a168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a16a:	b089      	sub	sp, #36	; 0x24
 800a16c:	af02      	add	r7, sp, #8
 800a16e:	4604      	mov	r4, r0
 800a170:	4608      	mov	r0, r1
 800a172:	4611      	mov	r1, r2
 800a174:	461a      	mov	r2, r3
 800a176:	4623      	mov	r3, r4
 800a178:	80fb      	strh	r3, [r7, #6]
 800a17a:	4603      	mov	r3, r0
 800a17c:	80bb      	strh	r3, [r7, #4]
 800a17e:	460b      	mov	r3, r1
 800a180:	807b      	strh	r3, [r7, #2]
 800a182:	4613      	mov	r3, r2
 800a184:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 800a186:	463b      	mov	r3, r7
 800a188:	1cba      	adds	r2, r7, #2
 800a18a:	1d3d      	adds	r5, r7, #4
 800a18c:	1dbc      	adds	r4, r7, #6
 800a18e:	494a      	ldr	r1, [pc, #296]	; (800a2b8 <hagl_draw_line+0x150>)
 800a190:	466e      	mov	r6, sp
 800a192:	c903      	ldmia	r1, {r0, r1}
 800a194:	e886 0003 	stmia.w	r6, {r0, r1}
 800a198:	4629      	mov	r1, r5
 800a19a:	4620      	mov	r0, r4
 800a19c:	f7ff fd5b 	bl	8009c56 <clip_line>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f083 0301 	eor.w	r3, r3, #1
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d17e      	bne.n	800a2aa <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 800a1ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	bfb8      	it	lt
 800a1bc:	425b      	neglt	r3, r3
 800a1be:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 800a1c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a1c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	da01      	bge.n	800a1d0 <hagl_draw_line+0x68>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e001      	b.n	800a1d4 <hagl_draw_line+0x6c>
 800a1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d4:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 800a1d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	bfb8      	it	lt
 800a1e6:	425b      	neglt	r3, r3
 800a1e8:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800a1ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a1ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	da01      	bge.n	800a1fa <hagl_draw_line+0x92>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e001      	b.n	800a1fe <hagl_draw_line+0x96>
 800a1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fe:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 800a200:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a204:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a208:	429a      	cmp	r2, r3
 800a20a:	dd06      	ble.n	800a21a <hagl_draw_line+0xb2>
 800a20c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a210:	0fda      	lsrs	r2, r3, #31
 800a212:	4413      	add	r3, r2
 800a214:	105b      	asrs	r3, r3, #1
 800a216:	b21b      	sxth	r3, r3
 800a218:	e006      	b.n	800a228 <hagl_draw_line+0xc0>
 800a21a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a21e:	0fda      	lsrs	r2, r3, #31
 800a220:	4413      	add	r3, r2
 800a222:	105b      	asrs	r3, r3, #1
 800a224:	425b      	negs	r3, r3
 800a226:	b21b      	sxth	r3, r3
 800a228:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 800a22a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a22e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a232:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff ff1f 	bl	800a078 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 800a23a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a23e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a242:	429a      	cmp	r2, r3
 800a244:	d105      	bne.n	800a252 <hagl_draw_line+0xea>
 800a246:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a24a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d02d      	beq.n	800a2ae <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 800a252:	8afb      	ldrh	r3, [r7, #22]
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	b29b      	uxth	r3, r3
 800a258:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 800a25a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a25e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a262:	425b      	negs	r3, r3
 800a264:	429a      	cmp	r2, r3
 800a266:	dd0c      	ble.n	800a282 <hagl_draw_line+0x11a>
            err -= dy;
 800a268:	8afa      	ldrh	r2, [r7, #22]
 800a26a:	8a3b      	ldrh	r3, [r7, #16]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	b29b      	uxth	r3, r3
 800a270:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 800a272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a276:	b29a      	uxth	r2, r3
 800a278:	8a7b      	ldrh	r3, [r7, #18]
 800a27a:	4413      	add	r3, r2
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	b21b      	sxth	r3, r3
 800a280:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 800a282:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a286:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	dacd      	bge.n	800a22a <hagl_draw_line+0xc2>
            err += dx;
 800a28e:	8afa      	ldrh	r2, [r7, #22]
 800a290:	8abb      	ldrh	r3, [r7, #20]
 800a292:	4413      	add	r3, r2
 800a294:	b29b      	uxth	r3, r3
 800a296:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 800a298:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	89fb      	ldrh	r3, [r7, #14]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	b21b      	sxth	r3, r3
 800a2a6:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 800a2a8:	e7bf      	b.n	800a22a <hagl_draw_line+0xc2>
        return;
 800a2aa:	bf00      	nop
 800a2ac:	e000      	b.n	800a2b0 <hagl_draw_line+0x148>
            break;
 800a2ae:	bf00      	nop
        }
    }
}
 800a2b0:	371c      	adds	r7, #28
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20000028 	.word	0x20000028

0800a2bc <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800a2bc:	b590      	push	{r4, r7, lr}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	4608      	mov	r0, r1
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	4623      	mov	r3, r4
 800a2cc:	80fb      	strh	r3, [r7, #6]
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	80bb      	strh	r3, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	807b      	strh	r3, [r7, #2]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800a2da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a2de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	dd0e      	ble.n	800a304 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 800a2e6:	88fa      	ldrh	r2, [r7, #6]
 800a2e8:	887b      	ldrh	r3, [r7, #2]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800a2f0:	88fa      	ldrh	r2, [r7, #6]
 800a2f2:	887b      	ldrh	r3, [r7, #2]
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800a2fa:	88fa      	ldrh	r2, [r7, #6]
 800a2fc:	887b      	ldrh	r3, [r7, #2]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	b29b      	uxth	r3, r3
 800a302:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800a304:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a308:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	dd0e      	ble.n	800a32e <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 800a310:	88ba      	ldrh	r2, [r7, #4]
 800a312:	883b      	ldrh	r3, [r7, #0]
 800a314:	4413      	add	r3, r2
 800a316:	b29b      	uxth	r3, r3
 800a318:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800a31a:	88ba      	ldrh	r2, [r7, #4]
 800a31c:	883b      	ldrh	r3, [r7, #0]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	b29b      	uxth	r3, r3
 800a322:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800a324:	88ba      	ldrh	r2, [r7, #4]
 800a326:	883b      	ldrh	r3, [r7, #0]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800a32e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a332:	4a24      	ldr	r2, [pc, #144]	; (800a3c4 <hagl_draw_rectangle+0x108>)
 800a334:	8812      	ldrh	r2, [r2, #0]
 800a336:	4293      	cmp	r3, r2
 800a338:	db3e      	blt.n	800a3b8 <hagl_draw_rectangle+0xfc>
 800a33a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a33e:	4a21      	ldr	r2, [pc, #132]	; (800a3c4 <hagl_draw_rectangle+0x108>)
 800a340:	8852      	ldrh	r2, [r2, #2]
 800a342:	4293      	cmp	r3, r2
 800a344:	db38      	blt.n	800a3b8 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a34a:	4a1e      	ldr	r2, [pc, #120]	; (800a3c4 <hagl_draw_rectangle+0x108>)
 800a34c:	8892      	ldrh	r2, [r2, #4]
 800a34e:	4293      	cmp	r3, r2
 800a350:	dc34      	bgt.n	800a3bc <hagl_draw_rectangle+0x100>
 800a352:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a356:	4a1b      	ldr	r2, [pc, #108]	; (800a3c4 <hagl_draw_rectangle+0x108>)
 800a358:	88d2      	ldrh	r2, [r2, #6]
 800a35a:	4293      	cmp	r3, r2
 800a35c:	dc2e      	bgt.n	800a3bc <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 800a35e:	887a      	ldrh	r2, [r7, #2]
 800a360:	88fb      	ldrh	r3, [r7, #6]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	b29b      	uxth	r3, r3
 800a366:	3301      	adds	r3, #1
 800a368:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 800a36a:	883a      	ldrh	r2, [r7, #0]
 800a36c:	88bb      	ldrh	r3, [r7, #4]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	b29b      	uxth	r3, r3
 800a372:	3301      	adds	r3, #1
 800a374:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 800a376:	8c3b      	ldrh	r3, [r7, #32]
 800a378:	89fa      	ldrh	r2, [r7, #14]
 800a37a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a37e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a382:	f7ff feab 	bl	800a0dc <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 800a386:	8c3b      	ldrh	r3, [r7, #32]
 800a388:	89fa      	ldrh	r2, [r7, #14]
 800a38a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800a38e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a392:	f7ff fea3 	bl	800a0dc <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 800a396:	8c3b      	ldrh	r3, [r7, #32]
 800a398:	89ba      	ldrh	r2, [r7, #12]
 800a39a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a39e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a3a2:	f7ff febe 	bl	800a122 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 800a3a6:	8c3b      	ldrh	r3, [r7, #32]
 800a3a8:	89ba      	ldrh	r2, [r7, #12]
 800a3aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a3ae:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800a3b2:	f7ff feb6 	bl	800a122 <hagl_draw_vline>
 800a3b6:	e002      	b.n	800a3be <hagl_draw_rectangle+0x102>
        return;
 800a3b8:	bf00      	nop
 800a3ba:	e000      	b.n	800a3be <hagl_draw_rectangle+0x102>
        return;
 800a3bc:	bf00      	nop
}
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd90      	pop	{r4, r7, pc}
 800a3c4:	20000028 	.word	0x20000028

0800a3c8 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800a3c8:	b590      	push	{r4, r7, lr}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	4608      	mov	r0, r1
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	4623      	mov	r3, r4
 800a3d8:	80fb      	strh	r3, [r7, #6]
 800a3da:	4603      	mov	r3, r0
 800a3dc:	80bb      	strh	r3, [r7, #4]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	807b      	strh	r3, [r7, #2]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800a3e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a3ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	dd0e      	ble.n	800a410 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 800a3f2:	88fa      	ldrh	r2, [r7, #6]
 800a3f4:	887b      	ldrh	r3, [r7, #2]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800a3fc:	88fa      	ldrh	r2, [r7, #6]
 800a3fe:	887b      	ldrh	r3, [r7, #2]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	b29b      	uxth	r3, r3
 800a404:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800a406:	88fa      	ldrh	r2, [r7, #6]
 800a408:	887b      	ldrh	r3, [r7, #2]
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800a410:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a414:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a418:	429a      	cmp	r2, r3
 800a41a:	dd0e      	ble.n	800a43a <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 800a41c:	88ba      	ldrh	r2, [r7, #4]
 800a41e:	883b      	ldrh	r3, [r7, #0]
 800a420:	4413      	add	r3, r2
 800a422:	b29b      	uxth	r3, r3
 800a424:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800a426:	88ba      	ldrh	r2, [r7, #4]
 800a428:	883b      	ldrh	r3, [r7, #0]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800a430:	88ba      	ldrh	r2, [r7, #4]
 800a432:	883b      	ldrh	r3, [r7, #0]
 800a434:	1ad3      	subs	r3, r2, r3
 800a436:	b29b      	uxth	r3, r3
 800a438:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800a43a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a43e:	4a33      	ldr	r2, [pc, #204]	; (800a50c <hagl_fill_rectangle+0x144>)
 800a440:	8812      	ldrh	r2, [r2, #0]
 800a442:	4293      	cmp	r3, r2
 800a444:	db5b      	blt.n	800a4fe <hagl_fill_rectangle+0x136>
 800a446:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a44a:	4a30      	ldr	r2, [pc, #192]	; (800a50c <hagl_fill_rectangle+0x144>)
 800a44c:	8852      	ldrh	r2, [r2, #2]
 800a44e:	4293      	cmp	r3, r2
 800a450:	db55      	blt.n	800a4fe <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a456:	4a2d      	ldr	r2, [pc, #180]	; (800a50c <hagl_fill_rectangle+0x144>)
 800a458:	8892      	ldrh	r2, [r2, #4]
 800a45a:	4293      	cmp	r3, r2
 800a45c:	dc51      	bgt.n	800a502 <hagl_fill_rectangle+0x13a>
 800a45e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a462:	4a2a      	ldr	r2, [pc, #168]	; (800a50c <hagl_fill_rectangle+0x144>)
 800a464:	88d2      	ldrh	r2, [r2, #6]
 800a466:	4293      	cmp	r3, r2
 800a468:	dc4b      	bgt.n	800a502 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 800a46a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a46e:	4a27      	ldr	r2, [pc, #156]	; (800a50c <hagl_fill_rectangle+0x144>)
 800a470:	8812      	ldrh	r2, [r2, #0]
 800a472:	4611      	mov	r1, r2
 800a474:	4618      	mov	r0, r3
 800a476:	f7ff fdca 	bl	800a00e <max>
 800a47a:	4603      	mov	r3, r0
 800a47c:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 800a47e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a482:	4a22      	ldr	r2, [pc, #136]	; (800a50c <hagl_fill_rectangle+0x144>)
 800a484:	8852      	ldrh	r2, [r2, #2]
 800a486:	4611      	mov	r1, r2
 800a488:	4618      	mov	r0, r3
 800a48a:	f7ff fdc0 	bl	800a00e <max>
 800a48e:	4603      	mov	r3, r0
 800a490:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800a492:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a496:	4a1d      	ldr	r2, [pc, #116]	; (800a50c <hagl_fill_rectangle+0x144>)
 800a498:	8892      	ldrh	r2, [r2, #4]
 800a49a:	4611      	mov	r1, r2
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7ff fda4 	bl	8009fea <min>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800a4a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a4aa:	4a18      	ldr	r2, [pc, #96]	; (800a50c <hagl_fill_rectangle+0x144>)
 800a4ac:	88d2      	ldrh	r2, [r2, #6]
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7ff fd9a 	bl	8009fea <min>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 800a4ba:	887a      	ldrh	r2, [r7, #2]
 800a4bc:	88fb      	ldrh	r3, [r7, #6]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800a4c6:	883a      	ldrh	r2, [r7, #0]
 800a4c8:	88bb      	ldrh	r3, [r7, #4]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	81fb      	strh	r3, [r7, #14]
 800a4d6:	e00d      	b.n	800a4f4 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 800a4d8:	88ba      	ldrh	r2, [r7, #4]
 800a4da:	89fb      	ldrh	r3, [r7, #14]
 800a4dc:	4413      	add	r3, r2
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	b219      	sxth	r1, r3
 800a4e2:	8c3b      	ldrh	r3, [r7, #32]
 800a4e4:	89ba      	ldrh	r2, [r7, #12]
 800a4e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a4ea:	f7ff fdf7 	bl	800a0dc <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800a4ee:	89fb      	ldrh	r3, [r7, #14]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	81fb      	strh	r3, [r7, #14]
 800a4f4:	89fa      	ldrh	r2, [r7, #14]
 800a4f6:	897b      	ldrh	r3, [r7, #10]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d3ed      	bcc.n	800a4d8 <hagl_fill_rectangle+0x110>
 800a4fc:	e002      	b.n	800a504 <hagl_fill_rectangle+0x13c>
        return;
 800a4fe:	bf00      	nop
 800a500:	e000      	b.n	800a504 <hagl_fill_rectangle+0x13c>
        return;
 800a502:	bf00      	nop
#endif
    }
}
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	bd90      	pop	{r4, r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20000028 	.word	0x20000028

0800a510 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 800a510:	b590      	push	{r4, r7, lr}
 800a512:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	f107 0410 	add.w	r4, r7, #16
 800a51e:	3c04      	subs	r4, #4
 800a520:	6020      	str	r0, [r4, #0]
 800a522:	460c      	mov	r4, r1
 800a524:	4610      	mov	r0, r2
 800a526:	4619      	mov	r1, r3
 800a528:	f107 0310 	add.w	r3, r7, #16
 800a52c:	3b06      	subs	r3, #6
 800a52e:	4622      	mov	r2, r4
 800a530:	801a      	strh	r2, [r3, #0]
 800a532:	f107 0310 	add.w	r3, r7, #16
 800a536:	3b08      	subs	r3, #8
 800a538:	4602      	mov	r2, r0
 800a53a:	801a      	strh	r2, [r3, #0]
 800a53c:	f107 0310 	add.w	r3, r7, #16
 800a540:	3b0a      	subs	r3, #10
 800a542:	460a      	mov	r2, r1
 800a544:	801a      	strh	r2, [r3, #0]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800a546:	f107 0310 	add.w	r3, r7, #16
 800a54a:	3b04      	subs	r3, #4
 800a54c:	f107 0010 	add.w	r0, r7, #16
 800a550:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a554:	6812      	ldr	r2, [r2, #0]
 800a556:	6819      	ldr	r1, [r3, #0]
 800a558:	f7ff fcb5 	bl	8009ec6 <fontx_glyph>
 800a55c:	4603      	mov	r3, r0
 800a55e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a562:	f102 0209 	add.w	r2, r2, #9
 800a566:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 800a568:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a56c:	f103 0309 	add.w	r3, r3, #9
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <hagl_put_char+0x6a>
        return 0;
 800a576:	2300      	movs	r3, #0
 800a578:	e0ba      	b.n	800a6f0 <hagl_put_char+0x1e0>
    }

    bitmap.width = glyph.width,
 800a57a:	f107 0310 	add.w	r3, r7, #16
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	b29a      	uxth	r2, r3
 800a582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a586:	3b18      	subs	r3, #24
 800a588:	801a      	strh	r2, [r3, #0]
    bitmap.height = glyph.height,
 800a58a:	f107 0310 	add.w	r3, r7, #16
 800a58e:	785b      	ldrb	r3, [r3, #1]
 800a590:	b29a      	uxth	r2, r3
 800a592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a596:	3b18      	subs	r3, #24
 800a598:	805a      	strh	r2, [r3, #2]
    bitmap.depth = DISPLAY_DEPTH,
 800a59a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a59e:	3b18      	subs	r3, #24
 800a5a0:	2210      	movs	r2, #16
 800a5a2:	719a      	strb	r2, [r3, #6]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 800a5a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a5a8:	3a08      	subs	r2, #8
 800a5aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5ae:	3b18      	subs	r3, #24
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff faf1 	bl	8009b9a <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 800a5b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5bc:	3b18      	subs	r3, #24
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a5c4:	f102 020c 	add.w	r2, r2, #12
 800a5c8:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a5d0:	f102 020b 	add.w	r2, r2, #11
 800a5d4:	7013      	strb	r3, [r2, #0]
 800a5d6:	e06c      	b.n	800a6b2 <hagl_put_char+0x1a2>
        for (uint8_t x = 0; x < glyph.width; x++) {
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a5de:	f102 020a 	add.w	r2, r2, #10
 800a5e2:	7013      	strb	r3, [r2, #0]
 800a5e4:	e046      	b.n	800a674 <hagl_put_char+0x164>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800a5e6:	f107 0310 	add.w	r3, r7, #16
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	b25a      	sxtb	r2, r3
 800a5f0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a5f4:	f103 030a 	add.w	r3, r3, #10
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	f003 0307 	and.w	r3, r3, #7
 800a5fe:	2180      	movs	r1, #128	; 0x80
 800a600:	fa41 f303 	asr.w	r3, r1, r3
 800a604:	b25b      	sxtb	r3, r3
 800a606:	4013      	ands	r3, r2
 800a608:	b25b      	sxtb	r3, r3
 800a60a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a60e:	f102 0208 	add.w	r2, r2, #8
 800a612:	7013      	strb	r3, [r2, #0]
            if (set) {
 800a614:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a618:	f103 0308 	add.w	r3, r3, #8
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d010      	beq.n	800a644 <hagl_put_char+0x134>
                *(ptr++) = color;
 800a622:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a626:	f103 030c 	add.w	r3, r3, #12
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	1c93      	adds	r3, r2, #2
 800a62e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800a632:	f101 010c 	add.w	r1, r1, #12
 800a636:	600b      	str	r3, [r1, #0]
 800a638:	f107 0310 	add.w	r3, r7, #16
 800a63c:	3b0a      	subs	r3, #10
 800a63e:	881b      	ldrh	r3, [r3, #0]
 800a640:	8013      	strh	r3, [r2, #0]
 800a642:	e00c      	b.n	800a65e <hagl_put_char+0x14e>
            } else {
                *(ptr++) = 0x0000;
 800a644:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a648:	f103 030c 	add.w	r3, r3, #12
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	1c9a      	adds	r2, r3, #2
 800a650:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800a654:	f101 010c 	add.w	r1, r1, #12
 800a658:	600a      	str	r2, [r1, #0]
 800a65a:	2200      	movs	r2, #0
 800a65c:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 800a65e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a662:	f103 030a 	add.w	r3, r3, #10
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	3301      	adds	r3, #1
 800a66a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a66e:	f102 020a 	add.w	r2, r2, #10
 800a672:	7013      	strb	r3, [r2, #0]
 800a674:	f107 0310 	add.w	r3, r7, #16
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a67e:	f102 020a 	add.w	r2, r2, #10
 800a682:	7812      	ldrb	r2, [r2, #0]
 800a684:	429a      	cmp	r2, r3
 800a686:	d3ae      	bcc.n	800a5e6 <hagl_put_char+0xd6>
            }
        }
        glyph.buffer += glyph.pitch;
 800a688:	f107 0310 	add.w	r3, r7, #16
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f107 0210 	add.w	r2, r7, #16
 800a692:	78d2      	ldrb	r2, [r2, #3]
 800a694:	441a      	add	r2, r3
 800a696:	f107 0310 	add.w	r3, r7, #16
 800a69a:	605a      	str	r2, [r3, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 800a69c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a6a0:	f103 030b 	add.w	r3, r3, #11
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a6ac:	f102 020b 	add.w	r2, r2, #11
 800a6b0:	7013      	strb	r3, [r2, #0]
 800a6b2:	f107 0310 	add.w	r3, r7, #16
 800a6b6:	785b      	ldrb	r3, [r3, #1]
 800a6b8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a6bc:	f102 020b 	add.w	r2, r2, #11
 800a6c0:	7812      	ldrb	r2, [r2, #0]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d388      	bcc.n	800a5d8 <hagl_put_char+0xc8>
    }

    hagl_blit(x0, y0, &bitmap);
 800a6c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a6ca:	3a18      	subs	r2, #24
 800a6cc:	f107 0310 	add.w	r3, r7, #16
 800a6d0:	3b08      	subs	r3, #8
 800a6d2:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a6d6:	f107 0310 	add.w	r3, r7, #16
 800a6da:	3b06      	subs	r3, #6
 800a6dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 f858 	bl	800a796 <hagl_blit>

    return bitmap.width;
 800a6e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a6ea:	3b18      	subs	r3, #24
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	b2db      	uxtb	r3, r3
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd90      	pop	{r4, r7, pc}

0800a6fc <hagl_put_text>:
 * continue from the next line.
 */

//uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
uint16_t hagl_put_text(const char *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800a6fc:	b590      	push	{r4, r7, lr}
 800a6fe:	b08b      	sub	sp, #44	; 0x2c
 800a700:	af02      	add	r7, sp, #8
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	4608      	mov	r0, r1
 800a706:	4611      	mov	r1, r2
 800a708:	461a      	mov	r2, r3
 800a70a:	4603      	mov	r3, r0
 800a70c:	817b      	strh	r3, [r7, #10]
 800a70e:	460b      	mov	r3, r1
 800a710:	813b      	strh	r3, [r7, #8]
 800a712:	4613      	mov	r3, r2
 800a714:	80fb      	strh	r3, [r7, #6]
    char temp;
    uint8_t status;
    uint16_t original = x0;
 800a716:	897b      	ldrh	r3, [r7, #10]
 800a718:	83fb      	strh	r3, [r7, #30]
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800a71a:	f107 0310 	add.w	r3, r7, #16
 800a71e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a720:	4618      	mov	r0, r3
 800a722:	f7ff fbb3 	bl	8009e8c <fontx_meta>
 800a726:	4603      	mov	r3, r0
 800a728:	777b      	strb	r3, [r7, #29]
    if (0 != status) {
 800a72a:	7f7b      	ldrb	r3, [r7, #29]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <hagl_put_text+0x38>
        return 0;
 800a730:	2300      	movs	r3, #0
 800a732:	e02c      	b.n	800a78e <hagl_put_text+0x92>
    }

    do {
        temp = *str++;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	60fa      	str	r2, [r7, #12]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	773b      	strb	r3, [r7, #28]
        if (13 == temp || 10 == temp) {
 800a73e:	7f3b      	ldrb	r3, [r7, #28]
 800a740:	2b0d      	cmp	r3, #13
 800a742:	d002      	beq.n	800a74a <hagl_put_text+0x4e>
 800a744:	7f3b      	ldrb	r3, [r7, #28]
 800a746:	2b0a      	cmp	r3, #10
 800a748:	d108      	bne.n	800a75c <hagl_put_text+0x60>
            x0 = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 800a74e:	7ebb      	ldrb	r3, [r7, #26]
 800a750:	b29a      	uxth	r2, r3
 800a752:	893b      	ldrh	r3, [r7, #8]
 800a754:	4413      	add	r3, r2
 800a756:	b29b      	uxth	r3, r3
 800a758:	813b      	strh	r3, [r7, #8]
 800a75a:	e010      	b.n	800a77e <hagl_put_text+0x82>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 800a75c:	7f38      	ldrb	r0, [r7, #28]
 800a75e:	88fc      	ldrh	r4, [r7, #6]
 800a760:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800a764:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800a768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	4623      	mov	r3, r4
 800a76e:	f7ff fecf 	bl	800a510 <hagl_put_char>
 800a772:	4603      	mov	r3, r0
 800a774:	b29a      	uxth	r2, r3
 800a776:	897b      	ldrh	r3, [r7, #10]
 800a778:	4413      	add	r3, r2
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1d6      	bne.n	800a734 <hagl_put_text+0x38>

    return x0 - original;
 800a786:	897a      	ldrh	r2, [r7, #10]
 800a788:	8bfb      	ldrh	r3, [r7, #30]
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	b29b      	uxth	r3, r3
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3724      	adds	r7, #36	; 0x24
 800a792:	46bd      	mov	sp, r7
 800a794:	bd90      	pop	{r4, r7, pc}

0800a796 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800a796:	b580      	push	{r7, lr}
 800a798:	b086      	sub	sp, #24
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	4603      	mov	r3, r0
 800a79e:	603a      	str	r2, [r7, #0]
 800a7a0:	80fb      	strh	r3, [r7, #6]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	827b      	strh	r3, [r7, #18]
 800a7b0:	e020      	b.n	800a7f4 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	823b      	strh	r3, [r7, #16]
 800a7b6:	e015      	b.n	800a7e4 <hagl_blit+0x4e>
            color = *(ptr++);
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	1c9a      	adds	r2, r3, #2
 800a7bc:	617a      	str	r2, [r7, #20]
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800a7c2:	88fa      	ldrh	r2, [r7, #6]
 800a7c4:	8a3b      	ldrh	r3, [r7, #16]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	b218      	sxth	r0, r3
 800a7cc:	88ba      	ldrh	r2, [r7, #4]
 800a7ce:	8a7b      	ldrh	r3, [r7, #18]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	b21b      	sxth	r3, r3
 800a7d6:	89fa      	ldrh	r2, [r7, #14]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	f7ff fc4d 	bl	800a078 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800a7de:	8a3b      	ldrh	r3, [r7, #16]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	823b      	strh	r3, [r7, #16]
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	881b      	ldrh	r3, [r3, #0]
 800a7e8:	8a3a      	ldrh	r2, [r7, #16]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d3e4      	bcc.n	800a7b8 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800a7ee:	8a7b      	ldrh	r3, [r7, #18]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	827b      	strh	r3, [r7, #18]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	885b      	ldrh	r3, [r3, #2]
 800a7f8:	8a7a      	ldrh	r2, [r7, #18]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d3d9      	bcc.n	800a7b2 <hagl_blit+0x1c>
        }
    }
#endif
};
 800a7fe:	bf00      	nop
 800a800:	bf00      	nop
 800a802:	3718      	adds	r7, #24
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 800a80e:	4b12      	ldr	r3, [pc, #72]	; (800a858 <hagl_clear_screen+0x50>)
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 800a814:	4b10      	ldr	r3, [pc, #64]	; (800a858 <hagl_clear_screen+0x50>)
 800a816:	885b      	ldrh	r3, [r3, #2]
 800a818:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 800a81a:	4b0f      	ldr	r3, [pc, #60]	; (800a858 <hagl_clear_screen+0x50>)
 800a81c:	889b      	ldrh	r3, [r3, #4]
 800a81e:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 800a820:	4b0d      	ldr	r3, [pc, #52]	; (800a858 <hagl_clear_screen+0x50>)
 800a822:	88db      	ldrh	r3, [r3, #6]
 800a824:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 800a826:	239f      	movs	r3, #159	; 0x9f
 800a828:	227f      	movs	r2, #127	; 0x7f
 800a82a:	2100      	movs	r1, #0
 800a82c:	2000      	movs	r0, #0
 800a82e:	f7ff fc01 	bl	800a034 <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 800a832:	2300      	movs	r3, #0
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	239f      	movs	r3, #159	; 0x9f
 800a838:	227f      	movs	r2, #127	; 0x7f
 800a83a:	2100      	movs	r1, #0
 800a83c:	2000      	movs	r0, #0
 800a83e:	f7ff fdc3 	bl	800a3c8 <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 800a842:	883b      	ldrh	r3, [r7, #0]
 800a844:	887a      	ldrh	r2, [r7, #2]
 800a846:	88b9      	ldrh	r1, [r7, #4]
 800a848:	88f8      	ldrh	r0, [r7, #6]
 800a84a:	f7ff fbf3 	bl	800a034 <hagl_set_clip_window>
#endif
}
 800a84e:	bf00      	nop
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	20000028 	.word	0x20000028

0800a85c <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 800a85c:	b590      	push	{r4, r7, lr}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	4604      	mov	r4, r0
 800a864:	4608      	mov	r0, r1
 800a866:	4611      	mov	r1, r2
 800a868:	461a      	mov	r2, r3
 800a86a:	4623      	mov	r3, r4
 800a86c:	80fb      	strh	r3, [r7, #6]
 800a86e:	4603      	mov	r3, r0
 800a870:	80bb      	strh	r3, [r7, #4]
 800a872:	460b      	mov	r3, r1
 800a874:	807b      	strh	r3, [r7, #2]
 800a876:	4613      	mov	r3, r2
 800a878:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800a87a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a87e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a882:	429a      	cmp	r2, r3
 800a884:	dd0e      	ble.n	800a8a4 <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 800a886:	88fa      	ldrh	r2, [r7, #6]
 800a888:	887b      	ldrh	r3, [r7, #2]
 800a88a:	4413      	add	r3, r2
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800a890:	88fa      	ldrh	r2, [r7, #6]
 800a892:	887b      	ldrh	r3, [r7, #2]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	b29b      	uxth	r3, r3
 800a898:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800a89a:	88fa      	ldrh	r2, [r7, #6]
 800a89c:	887b      	ldrh	r3, [r7, #2]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800a8a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a8a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	dd0e      	ble.n	800a8ce <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 800a8b0:	88ba      	ldrh	r2, [r7, #4]
 800a8b2:	883b      	ldrh	r3, [r7, #0]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800a8ba:	88ba      	ldrh	r2, [r7, #4]
 800a8bc:	883b      	ldrh	r3, [r7, #0]
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800a8c4:	88ba      	ldrh	r2, [r7, #4]
 800a8c6:	883b      	ldrh	r3, [r7, #0]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800a8ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8d2:	4a52      	ldr	r2, [pc, #328]	; (800aa1c <hagl_draw_rounded_rectangle+0x1c0>)
 800a8d4:	8812      	ldrh	r2, [r2, #0]
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	f2c0 8153 	blt.w	800ab82 <hagl_draw_rounded_rectangle+0x326>
 800a8dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a8e0:	4a4e      	ldr	r2, [pc, #312]	; (800aa1c <hagl_draw_rounded_rectangle+0x1c0>)
 800a8e2:	8852      	ldrh	r2, [r2, #2]
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	f2c0 814c 	blt.w	800ab82 <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a8ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8ee:	4a4b      	ldr	r2, [pc, #300]	; (800aa1c <hagl_draw_rounded_rectangle+0x1c0>)
 800a8f0:	8892      	ldrh	r2, [r2, #4]
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	f300 8147 	bgt.w	800ab86 <hagl_draw_rounded_rectangle+0x32a>
 800a8f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a8fc:	4a47      	ldr	r2, [pc, #284]	; (800aa1c <hagl_draw_rounded_rectangle+0x1c0>)
 800a8fe:	88d2      	ldrh	r2, [r2, #6]
 800a900:	4293      	cmp	r3, r2
 800a902:	f300 8140 	bgt.w	800ab86 <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 800a906:	887a      	ldrh	r2, [r7, #2]
 800a908:	88fb      	ldrh	r3, [r7, #6]
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	3301      	adds	r3, #1
 800a910:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 800a912:	883a      	ldrh	r2, [r7, #0]
 800a914:	88bb      	ldrh	r3, [r7, #4]
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	b29b      	uxth	r3, r3
 800a91a:	3301      	adds	r3, #1
 800a91c:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 800a91e:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800a922:	8a3b      	ldrh	r3, [r7, #16]
 800a924:	085b      	lsrs	r3, r3, #1
 800a926:	b29b      	uxth	r3, r3
 800a928:	461a      	mov	r2, r3
 800a92a:	89fb      	ldrh	r3, [r7, #14]
 800a92c:	085b      	lsrs	r3, r3, #1
 800a92e:	b29b      	uxth	r3, r3
 800a930:	4619      	mov	r1, r3
 800a932:	4610      	mov	r0, r2
 800a934:	f7ff fb59 	bl	8009fea <min>
 800a938:	4603      	mov	r3, r0
 800a93a:	4619      	mov	r1, r3
 800a93c:	4620      	mov	r0, r4
 800a93e:	f7ff fb54 	bl	8009fea <min>
 800a942:	4603      	mov	r3, r0
 800a944:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 800a946:	88fa      	ldrh	r2, [r7, #6]
 800a948:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a94a:	4413      	add	r3, r2
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	b218      	sxth	r0, r3
 800a950:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	b29b      	uxth	r3, r3
 800a956:	8a3a      	ldrh	r2, [r7, #16]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a95e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a962:	f7ff fbbb 	bl	800a0dc <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 800a966:	88fa      	ldrh	r2, [r7, #6]
 800a968:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a96a:	4413      	add	r3, r2
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	b218      	sxth	r0, r3
 800a970:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	b29b      	uxth	r3, r3
 800a976:	8a3a      	ldrh	r2, [r7, #16]
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a97e:	f9b7 1000 	ldrsh.w	r1, [r7]
 800a982:	f7ff fbab 	bl	800a0dc <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 800a986:	88ba      	ldrh	r2, [r7, #4]
 800a988:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a98a:	4413      	add	r3, r2
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	b219      	sxth	r1, r3
 800a990:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	b29b      	uxth	r3, r3
 800a996:	89fa      	ldrh	r2, [r7, #14]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a99e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a9a2:	f7ff fbbe 	bl	800a122 <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 800a9a6:	88ba      	ldrh	r2, [r7, #4]
 800a9a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9aa:	4413      	add	r3, r2
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	b219      	sxth	r1, r3
 800a9b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9b2:	005b      	lsls	r3, r3, #1
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	89fa      	ldrh	r2, [r7, #14]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a9be:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800a9c2:	f7ff fbae 	bl	800a122 <hagl_draw_vline>

    x = 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	82fb      	strh	r3, [r7, #22]
    y = r;
 800a9ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9cc:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 800a9ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9d0:	005b      	lsls	r3, r3, #1
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	f1c3 0303 	rsb	r3, r3, #3
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 800a9dc:	e0c9      	b.n	800ab72 <hagl_draw_rounded_rectangle+0x316>
        x++;
 800a9de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 800a9ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	dd16      	ble.n	800aa20 <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 800a9f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 800a9fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800aa02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	8a7b      	ldrh	r3, [r7, #18]
 800aa10:	4413      	add	r3, r2
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	330a      	adds	r3, #10
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	827b      	strh	r3, [r7, #18]
 800aa1a:	e00a      	b.n	800aa32 <hagl_draw_rounded_rectangle+0x1d6>
 800aa1c:	20000028 	.word	0x20000028
        } else {
            d = d + 4 * x + 6;
 800aa20:	8afb      	ldrh	r3, [r7, #22]
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	b29a      	uxth	r2, r3
 800aa26:	8a7b      	ldrh	r3, [r7, #18]
 800aa28:	4413      	add	r3, r2
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	3306      	adds	r3, #6
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 800aa32:	887a      	ldrh	r2, [r7, #2]
 800aa34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	8afb      	ldrh	r3, [r7, #22]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	b218      	sxth	r0, r3
 800aa42:	88ba      	ldrh	r2, [r7, #4]
 800aa44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa46:	4413      	add	r3, r2
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	8abb      	ldrh	r3, [r7, #20]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	b21b      	sxth	r3, r3
 800aa52:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aa54:	4619      	mov	r1, r3
 800aa56:	f7ff fb0f 	bl	800a078 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 800aa5a:	887a      	ldrh	r2, [r7, #2]
 800aa5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	8abb      	ldrh	r3, [r7, #20]
 800aa64:	4413      	add	r3, r2
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	b218      	sxth	r0, r3
 800aa6a:	88ba      	ldrh	r2, [r7, #4]
 800aa6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa6e:	4413      	add	r3, r2
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	8afb      	ldrh	r3, [r7, #22]
 800aa74:	1ad3      	subs	r3, r2, r3
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	b21b      	sxth	r3, r3
 800aa7a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	f7ff fafb 	bl	800a078 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 800aa82:	88fa      	ldrh	r2, [r7, #6]
 800aa84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa86:	4413      	add	r3, r2
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	8afb      	ldrh	r3, [r7, #22]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	b218      	sxth	r0, r3
 800aa92:	88ba      	ldrh	r2, [r7, #4]
 800aa94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa96:	4413      	add	r3, r2
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	8abb      	ldrh	r3, [r7, #20]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	b21b      	sxth	r3, r3
 800aaa2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	f7ff fae7 	bl	800a078 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 800aaaa:	88fa      	ldrh	r2, [r7, #6]
 800aaac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aaae:	4413      	add	r3, r2
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	8abb      	ldrh	r3, [r7, #20]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	b218      	sxth	r0, r3
 800aaba:	88ba      	ldrh	r2, [r7, #4]
 800aabc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aabe:	4413      	add	r3, r2
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	8afb      	ldrh	r3, [r7, #22]
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	b21b      	sxth	r3, r3
 800aaca:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aacc:	4619      	mov	r1, r3
 800aace:	f7ff fad3 	bl	800a078 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 800aad2:	887a      	ldrh	r2, [r7, #2]
 800aad4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	b29a      	uxth	r2, r3
 800aada:	8afb      	ldrh	r3, [r7, #22]
 800aadc:	4413      	add	r3, r2
 800aade:	b29b      	uxth	r3, r3
 800aae0:	b218      	sxth	r0, r3
 800aae2:	883a      	ldrh	r2, [r7, #0]
 800aae4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	8abb      	ldrh	r3, [r7, #20]
 800aaec:	4413      	add	r3, r2
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	b21b      	sxth	r3, r3
 800aaf2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	f7ff fabf 	bl	800a078 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 800aafa:	887a      	ldrh	r2, [r7, #2]
 800aafc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	8abb      	ldrh	r3, [r7, #20]
 800ab04:	4413      	add	r3, r2
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	b218      	sxth	r0, r3
 800ab0a:	883a      	ldrh	r2, [r7, #0]
 800ab0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	8afb      	ldrh	r3, [r7, #22]
 800ab14:	4413      	add	r3, r2
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	b21b      	sxth	r3, r3
 800ab1a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	f7ff faab 	bl	800a078 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 800ab22:	88fa      	ldrh	r2, [r7, #6]
 800ab24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab26:	4413      	add	r3, r2
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	8afb      	ldrh	r3, [r7, #22]
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	b218      	sxth	r0, r3
 800ab32:	883a      	ldrh	r2, [r7, #0]
 800ab34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	8abb      	ldrh	r3, [r7, #20]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	b21b      	sxth	r3, r3
 800ab42:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ab44:	4619      	mov	r1, r3
 800ab46:	f7ff fa97 	bl	800a078 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 800ab4a:	88fa      	ldrh	r2, [r7, #6]
 800ab4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab4e:	4413      	add	r3, r2
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	8abb      	ldrh	r3, [r7, #20]
 800ab54:	1ad3      	subs	r3, r2, r3
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	b218      	sxth	r0, r3
 800ab5a:	883a      	ldrh	r2, [r7, #0]
 800ab5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	8afb      	ldrh	r3, [r7, #22]
 800ab64:	4413      	add	r3, r2
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	b21b      	sxth	r3, r3
 800ab6a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	f7ff fa83 	bl	800a078 <hagl_put_pixel>
    while (y >= x) {
 800ab72:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800ab76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	f6bf af2f 	bge.w	800a9de <hagl_draw_rounded_rectangle+0x182>
 800ab80:	e002      	b.n	800ab88 <hagl_draw_rounded_rectangle+0x32c>
        return;
 800ab82:	bf00      	nop
 800ab84:	e000      	b.n	800ab88 <hagl_draw_rounded_rectangle+0x32c>
        return;
 800ab86:	bf00      	nop
    }
};
 800ab88:	371c      	adds	r7, #28
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd90      	pop	{r4, r7, pc}
 800ab8e:	bf00      	nop

0800ab90 <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	71fb      	strb	r3, [r7, #7]
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	71bb      	strb	r3, [r7, #6]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 800aba2:	79fb      	ldrb	r3, [r7, #7]
 800aba4:	021b      	lsls	r3, r3, #8
 800aba6:	b21b      	sxth	r3, r3
 800aba8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800abac:	f023 0307 	bic.w	r3, r3, #7
 800abb0:	b21a      	sxth	r2, r3
 800abb2:	79bb      	ldrb	r3, [r7, #6]
 800abb4:	00db      	lsls	r3, r3, #3
 800abb6:	b21b      	sxth	r3, r3
 800abb8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800abbc:	b21b      	sxth	r3, r3
 800abbe:	4313      	orrs	r3, r2
 800abc0:	b21a      	sxth	r2, r3
 800abc2:	797b      	ldrb	r3, [r7, #5]
 800abc4:	08db      	lsrs	r3, r3, #3
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	b21b      	sxth	r3, r3
 800abca:	4313      	orrs	r3, r2
 800abcc:	b21b      	sxth	r3, r3
 800abce:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 800abd0:	89fb      	ldrh	r3, [r7, #14]
 800abd2:	021b      	lsls	r3, r3, #8
 800abd4:	b21a      	sxth	r2, r3
 800abd6:	89fb      	ldrh	r3, [r7, #14]
 800abd8:	0a1b      	lsrs	r3, r3, #8
 800abda:	b29b      	uxth	r3, r3
 800abdc:	b21b      	sxth	r3, r3
 800abde:	4313      	orrs	r3, r2
 800abe0:	b21b      	sxth	r3, r3
 800abe2:	81fb      	strh	r3, [r7, #14]

    return rgb;
 800abe4:	89fb      	ldrh	r3, [r7, #14]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
	...

0800abf4 <__assert_func>:
 800abf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abf6:	4614      	mov	r4, r2
 800abf8:	461a      	mov	r2, r3
 800abfa:	4b09      	ldr	r3, [pc, #36]	; (800ac20 <__assert_func+0x2c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4605      	mov	r5, r0
 800ac00:	68d8      	ldr	r0, [r3, #12]
 800ac02:	b14c      	cbz	r4, 800ac18 <__assert_func+0x24>
 800ac04:	4b07      	ldr	r3, [pc, #28]	; (800ac24 <__assert_func+0x30>)
 800ac06:	9100      	str	r1, [sp, #0]
 800ac08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac0c:	4906      	ldr	r1, [pc, #24]	; (800ac28 <__assert_func+0x34>)
 800ac0e:	462b      	mov	r3, r5
 800ac10:	f000 f9be 	bl	800af90 <fiprintf>
 800ac14:	f001 f830 	bl	800bc78 <abort>
 800ac18:	4b04      	ldr	r3, [pc, #16]	; (800ac2c <__assert_func+0x38>)
 800ac1a:	461c      	mov	r4, r3
 800ac1c:	e7f3      	b.n	800ac06 <__assert_func+0x12>
 800ac1e:	bf00      	nop
 800ac20:	20000030 	.word	0x20000030
 800ac24:	08015c2c 	.word	0x08015c2c
 800ac28:	08015c39 	.word	0x08015c39
 800ac2c:	08015c67 	.word	0x08015c67

0800ac30 <__errno>:
 800ac30:	4b01      	ldr	r3, [pc, #4]	; (800ac38 <__errno+0x8>)
 800ac32:	6818      	ldr	r0, [r3, #0]
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	20000030 	.word	0x20000030

0800ac3c <__sflush_r>:
 800ac3c:	898a      	ldrh	r2, [r1, #12]
 800ac3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac42:	4605      	mov	r5, r0
 800ac44:	0710      	lsls	r0, r2, #28
 800ac46:	460c      	mov	r4, r1
 800ac48:	d458      	bmi.n	800acfc <__sflush_r+0xc0>
 800ac4a:	684b      	ldr	r3, [r1, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	dc05      	bgt.n	800ac5c <__sflush_r+0x20>
 800ac50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	dc02      	bgt.n	800ac5c <__sflush_r+0x20>
 800ac56:	2000      	movs	r0, #0
 800ac58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac5e:	2e00      	cmp	r6, #0
 800ac60:	d0f9      	beq.n	800ac56 <__sflush_r+0x1a>
 800ac62:	2300      	movs	r3, #0
 800ac64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac68:	682f      	ldr	r7, [r5, #0]
 800ac6a:	602b      	str	r3, [r5, #0]
 800ac6c:	d032      	beq.n	800acd4 <__sflush_r+0x98>
 800ac6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	075a      	lsls	r2, r3, #29
 800ac74:	d505      	bpl.n	800ac82 <__sflush_r+0x46>
 800ac76:	6863      	ldr	r3, [r4, #4]
 800ac78:	1ac0      	subs	r0, r0, r3
 800ac7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac7c:	b10b      	cbz	r3, 800ac82 <__sflush_r+0x46>
 800ac7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac80:	1ac0      	subs	r0, r0, r3
 800ac82:	2300      	movs	r3, #0
 800ac84:	4602      	mov	r2, r0
 800ac86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac88:	6a21      	ldr	r1, [r4, #32]
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	47b0      	blx	r6
 800ac8e:	1c43      	adds	r3, r0, #1
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	d106      	bne.n	800aca2 <__sflush_r+0x66>
 800ac94:	6829      	ldr	r1, [r5, #0]
 800ac96:	291d      	cmp	r1, #29
 800ac98:	d82c      	bhi.n	800acf4 <__sflush_r+0xb8>
 800ac9a:	4a2a      	ldr	r2, [pc, #168]	; (800ad44 <__sflush_r+0x108>)
 800ac9c:	40ca      	lsrs	r2, r1
 800ac9e:	07d6      	lsls	r6, r2, #31
 800aca0:	d528      	bpl.n	800acf4 <__sflush_r+0xb8>
 800aca2:	2200      	movs	r2, #0
 800aca4:	6062      	str	r2, [r4, #4]
 800aca6:	04d9      	lsls	r1, r3, #19
 800aca8:	6922      	ldr	r2, [r4, #16]
 800acaa:	6022      	str	r2, [r4, #0]
 800acac:	d504      	bpl.n	800acb8 <__sflush_r+0x7c>
 800acae:	1c42      	adds	r2, r0, #1
 800acb0:	d101      	bne.n	800acb6 <__sflush_r+0x7a>
 800acb2:	682b      	ldr	r3, [r5, #0]
 800acb4:	b903      	cbnz	r3, 800acb8 <__sflush_r+0x7c>
 800acb6:	6560      	str	r0, [r4, #84]	; 0x54
 800acb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acba:	602f      	str	r7, [r5, #0]
 800acbc:	2900      	cmp	r1, #0
 800acbe:	d0ca      	beq.n	800ac56 <__sflush_r+0x1a>
 800acc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acc4:	4299      	cmp	r1, r3
 800acc6:	d002      	beq.n	800acce <__sflush_r+0x92>
 800acc8:	4628      	mov	r0, r5
 800acca:	f000 fa35 	bl	800b138 <_free_r>
 800acce:	2000      	movs	r0, #0
 800acd0:	6360      	str	r0, [r4, #52]	; 0x34
 800acd2:	e7c1      	b.n	800ac58 <__sflush_r+0x1c>
 800acd4:	6a21      	ldr	r1, [r4, #32]
 800acd6:	2301      	movs	r3, #1
 800acd8:	4628      	mov	r0, r5
 800acda:	47b0      	blx	r6
 800acdc:	1c41      	adds	r1, r0, #1
 800acde:	d1c7      	bne.n	800ac70 <__sflush_r+0x34>
 800ace0:	682b      	ldr	r3, [r5, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d0c4      	beq.n	800ac70 <__sflush_r+0x34>
 800ace6:	2b1d      	cmp	r3, #29
 800ace8:	d001      	beq.n	800acee <__sflush_r+0xb2>
 800acea:	2b16      	cmp	r3, #22
 800acec:	d101      	bne.n	800acf2 <__sflush_r+0xb6>
 800acee:	602f      	str	r7, [r5, #0]
 800acf0:	e7b1      	b.n	800ac56 <__sflush_r+0x1a>
 800acf2:	89a3      	ldrh	r3, [r4, #12]
 800acf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acf8:	81a3      	strh	r3, [r4, #12]
 800acfa:	e7ad      	b.n	800ac58 <__sflush_r+0x1c>
 800acfc:	690f      	ldr	r7, [r1, #16]
 800acfe:	2f00      	cmp	r7, #0
 800ad00:	d0a9      	beq.n	800ac56 <__sflush_r+0x1a>
 800ad02:	0793      	lsls	r3, r2, #30
 800ad04:	680e      	ldr	r6, [r1, #0]
 800ad06:	bf08      	it	eq
 800ad08:	694b      	ldreq	r3, [r1, #20]
 800ad0a:	600f      	str	r7, [r1, #0]
 800ad0c:	bf18      	it	ne
 800ad0e:	2300      	movne	r3, #0
 800ad10:	eba6 0807 	sub.w	r8, r6, r7
 800ad14:	608b      	str	r3, [r1, #8]
 800ad16:	f1b8 0f00 	cmp.w	r8, #0
 800ad1a:	dd9c      	ble.n	800ac56 <__sflush_r+0x1a>
 800ad1c:	6a21      	ldr	r1, [r4, #32]
 800ad1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad20:	4643      	mov	r3, r8
 800ad22:	463a      	mov	r2, r7
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b0      	blx	r6
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	dc06      	bgt.n	800ad3a <__sflush_r+0xfe>
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad32:	81a3      	strh	r3, [r4, #12]
 800ad34:	f04f 30ff 	mov.w	r0, #4294967295
 800ad38:	e78e      	b.n	800ac58 <__sflush_r+0x1c>
 800ad3a:	4407      	add	r7, r0
 800ad3c:	eba8 0800 	sub.w	r8, r8, r0
 800ad40:	e7e9      	b.n	800ad16 <__sflush_r+0xda>
 800ad42:	bf00      	nop
 800ad44:	20400001 	.word	0x20400001

0800ad48 <_fflush_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	690b      	ldr	r3, [r1, #16]
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	460c      	mov	r4, r1
 800ad50:	b913      	cbnz	r3, 800ad58 <_fflush_r+0x10>
 800ad52:	2500      	movs	r5, #0
 800ad54:	4628      	mov	r0, r5
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	b118      	cbz	r0, 800ad62 <_fflush_r+0x1a>
 800ad5a:	6983      	ldr	r3, [r0, #24]
 800ad5c:	b90b      	cbnz	r3, 800ad62 <_fflush_r+0x1a>
 800ad5e:	f000 f899 	bl	800ae94 <__sinit>
 800ad62:	4b14      	ldr	r3, [pc, #80]	; (800adb4 <_fflush_r+0x6c>)
 800ad64:	429c      	cmp	r4, r3
 800ad66:	d11b      	bne.n	800ada0 <_fflush_r+0x58>
 800ad68:	686c      	ldr	r4, [r5, #4]
 800ad6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d0ef      	beq.n	800ad52 <_fflush_r+0xa>
 800ad72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad74:	07d0      	lsls	r0, r2, #31
 800ad76:	d404      	bmi.n	800ad82 <_fflush_r+0x3a>
 800ad78:	0599      	lsls	r1, r3, #22
 800ad7a:	d402      	bmi.n	800ad82 <_fflush_r+0x3a>
 800ad7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad7e:	f000 f95e 	bl	800b03e <__retarget_lock_acquire_recursive>
 800ad82:	4628      	mov	r0, r5
 800ad84:	4621      	mov	r1, r4
 800ad86:	f7ff ff59 	bl	800ac3c <__sflush_r>
 800ad8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad8c:	07da      	lsls	r2, r3, #31
 800ad8e:	4605      	mov	r5, r0
 800ad90:	d4e0      	bmi.n	800ad54 <_fflush_r+0xc>
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	059b      	lsls	r3, r3, #22
 800ad96:	d4dd      	bmi.n	800ad54 <_fflush_r+0xc>
 800ad98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad9a:	f000 f951 	bl	800b040 <__retarget_lock_release_recursive>
 800ad9e:	e7d9      	b.n	800ad54 <_fflush_r+0xc>
 800ada0:	4b05      	ldr	r3, [pc, #20]	; (800adb8 <_fflush_r+0x70>)
 800ada2:	429c      	cmp	r4, r3
 800ada4:	d101      	bne.n	800adaa <_fflush_r+0x62>
 800ada6:	68ac      	ldr	r4, [r5, #8]
 800ada8:	e7df      	b.n	800ad6a <_fflush_r+0x22>
 800adaa:	4b04      	ldr	r3, [pc, #16]	; (800adbc <_fflush_r+0x74>)
 800adac:	429c      	cmp	r4, r3
 800adae:	bf08      	it	eq
 800adb0:	68ec      	ldreq	r4, [r5, #12]
 800adb2:	e7da      	b.n	800ad6a <_fflush_r+0x22>
 800adb4:	08015c88 	.word	0x08015c88
 800adb8:	08015ca8 	.word	0x08015ca8
 800adbc:	08015c68 	.word	0x08015c68

0800adc0 <fflush>:
 800adc0:	4601      	mov	r1, r0
 800adc2:	b920      	cbnz	r0, 800adce <fflush+0xe>
 800adc4:	4b04      	ldr	r3, [pc, #16]	; (800add8 <fflush+0x18>)
 800adc6:	4905      	ldr	r1, [pc, #20]	; (800addc <fflush+0x1c>)
 800adc8:	6818      	ldr	r0, [r3, #0]
 800adca:	f000 b8f3 	b.w	800afb4 <_fwalk_reent>
 800adce:	4b04      	ldr	r3, [pc, #16]	; (800ade0 <fflush+0x20>)
 800add0:	6818      	ldr	r0, [r3, #0]
 800add2:	f7ff bfb9 	b.w	800ad48 <_fflush_r>
 800add6:	bf00      	nop
 800add8:	08015cc8 	.word	0x08015cc8
 800addc:	0800ad49 	.word	0x0800ad49
 800ade0:	20000030 	.word	0x20000030

0800ade4 <std>:
 800ade4:	2300      	movs	r3, #0
 800ade6:	b510      	push	{r4, lr}
 800ade8:	4604      	mov	r4, r0
 800adea:	e9c0 3300 	strd	r3, r3, [r0]
 800adee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adf2:	6083      	str	r3, [r0, #8]
 800adf4:	8181      	strh	r1, [r0, #12]
 800adf6:	6643      	str	r3, [r0, #100]	; 0x64
 800adf8:	81c2      	strh	r2, [r0, #14]
 800adfa:	6183      	str	r3, [r0, #24]
 800adfc:	4619      	mov	r1, r3
 800adfe:	2208      	movs	r2, #8
 800ae00:	305c      	adds	r0, #92	; 0x5c
 800ae02:	f000 f991 	bl	800b128 <memset>
 800ae06:	4b05      	ldr	r3, [pc, #20]	; (800ae1c <std+0x38>)
 800ae08:	6263      	str	r3, [r4, #36]	; 0x24
 800ae0a:	4b05      	ldr	r3, [pc, #20]	; (800ae20 <std+0x3c>)
 800ae0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae0e:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <std+0x40>)
 800ae10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae12:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <std+0x44>)
 800ae14:	6224      	str	r4, [r4, #32]
 800ae16:	6323      	str	r3, [r4, #48]	; 0x30
 800ae18:	bd10      	pop	{r4, pc}
 800ae1a:	bf00      	nop
 800ae1c:	0800ba4d 	.word	0x0800ba4d
 800ae20:	0800ba6f 	.word	0x0800ba6f
 800ae24:	0800baa7 	.word	0x0800baa7
 800ae28:	0800bacb 	.word	0x0800bacb

0800ae2c <_cleanup_r>:
 800ae2c:	4901      	ldr	r1, [pc, #4]	; (800ae34 <_cleanup_r+0x8>)
 800ae2e:	f000 b8c1 	b.w	800afb4 <_fwalk_reent>
 800ae32:	bf00      	nop
 800ae34:	0800ad49 	.word	0x0800ad49

0800ae38 <__sfmoreglue>:
 800ae38:	b570      	push	{r4, r5, r6, lr}
 800ae3a:	1e4a      	subs	r2, r1, #1
 800ae3c:	2568      	movs	r5, #104	; 0x68
 800ae3e:	4355      	muls	r5, r2
 800ae40:	460e      	mov	r6, r1
 800ae42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae46:	f000 f9c7 	bl	800b1d8 <_malloc_r>
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	b140      	cbz	r0, 800ae60 <__sfmoreglue+0x28>
 800ae4e:	2100      	movs	r1, #0
 800ae50:	e9c0 1600 	strd	r1, r6, [r0]
 800ae54:	300c      	adds	r0, #12
 800ae56:	60a0      	str	r0, [r4, #8]
 800ae58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae5c:	f000 f964 	bl	800b128 <memset>
 800ae60:	4620      	mov	r0, r4
 800ae62:	bd70      	pop	{r4, r5, r6, pc}

0800ae64 <__sfp_lock_acquire>:
 800ae64:	4801      	ldr	r0, [pc, #4]	; (800ae6c <__sfp_lock_acquire+0x8>)
 800ae66:	f000 b8ea 	b.w	800b03e <__retarget_lock_acquire_recursive>
 800ae6a:	bf00      	nop
 800ae6c:	2000adb4 	.word	0x2000adb4

0800ae70 <__sfp_lock_release>:
 800ae70:	4801      	ldr	r0, [pc, #4]	; (800ae78 <__sfp_lock_release+0x8>)
 800ae72:	f000 b8e5 	b.w	800b040 <__retarget_lock_release_recursive>
 800ae76:	bf00      	nop
 800ae78:	2000adb4 	.word	0x2000adb4

0800ae7c <__sinit_lock_acquire>:
 800ae7c:	4801      	ldr	r0, [pc, #4]	; (800ae84 <__sinit_lock_acquire+0x8>)
 800ae7e:	f000 b8de 	b.w	800b03e <__retarget_lock_acquire_recursive>
 800ae82:	bf00      	nop
 800ae84:	2000adaf 	.word	0x2000adaf

0800ae88 <__sinit_lock_release>:
 800ae88:	4801      	ldr	r0, [pc, #4]	; (800ae90 <__sinit_lock_release+0x8>)
 800ae8a:	f000 b8d9 	b.w	800b040 <__retarget_lock_release_recursive>
 800ae8e:	bf00      	nop
 800ae90:	2000adaf 	.word	0x2000adaf

0800ae94 <__sinit>:
 800ae94:	b510      	push	{r4, lr}
 800ae96:	4604      	mov	r4, r0
 800ae98:	f7ff fff0 	bl	800ae7c <__sinit_lock_acquire>
 800ae9c:	69a3      	ldr	r3, [r4, #24]
 800ae9e:	b11b      	cbz	r3, 800aea8 <__sinit+0x14>
 800aea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea4:	f7ff bff0 	b.w	800ae88 <__sinit_lock_release>
 800aea8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aeac:	6523      	str	r3, [r4, #80]	; 0x50
 800aeae:	4b13      	ldr	r3, [pc, #76]	; (800aefc <__sinit+0x68>)
 800aeb0:	4a13      	ldr	r2, [pc, #76]	; (800af00 <__sinit+0x6c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800aeb6:	42a3      	cmp	r3, r4
 800aeb8:	bf04      	itt	eq
 800aeba:	2301      	moveq	r3, #1
 800aebc:	61a3      	streq	r3, [r4, #24]
 800aebe:	4620      	mov	r0, r4
 800aec0:	f000 f820 	bl	800af04 <__sfp>
 800aec4:	6060      	str	r0, [r4, #4]
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 f81c 	bl	800af04 <__sfp>
 800aecc:	60a0      	str	r0, [r4, #8]
 800aece:	4620      	mov	r0, r4
 800aed0:	f000 f818 	bl	800af04 <__sfp>
 800aed4:	2200      	movs	r2, #0
 800aed6:	60e0      	str	r0, [r4, #12]
 800aed8:	2104      	movs	r1, #4
 800aeda:	6860      	ldr	r0, [r4, #4]
 800aedc:	f7ff ff82 	bl	800ade4 <std>
 800aee0:	68a0      	ldr	r0, [r4, #8]
 800aee2:	2201      	movs	r2, #1
 800aee4:	2109      	movs	r1, #9
 800aee6:	f7ff ff7d 	bl	800ade4 <std>
 800aeea:	68e0      	ldr	r0, [r4, #12]
 800aeec:	2202      	movs	r2, #2
 800aeee:	2112      	movs	r1, #18
 800aef0:	f7ff ff78 	bl	800ade4 <std>
 800aef4:	2301      	movs	r3, #1
 800aef6:	61a3      	str	r3, [r4, #24]
 800aef8:	e7d2      	b.n	800aea0 <__sinit+0xc>
 800aefa:	bf00      	nop
 800aefc:	08015cc8 	.word	0x08015cc8
 800af00:	0800ae2d 	.word	0x0800ae2d

0800af04 <__sfp>:
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	4607      	mov	r7, r0
 800af08:	f7ff ffac 	bl	800ae64 <__sfp_lock_acquire>
 800af0c:	4b1e      	ldr	r3, [pc, #120]	; (800af88 <__sfp+0x84>)
 800af0e:	681e      	ldr	r6, [r3, #0]
 800af10:	69b3      	ldr	r3, [r6, #24]
 800af12:	b913      	cbnz	r3, 800af1a <__sfp+0x16>
 800af14:	4630      	mov	r0, r6
 800af16:	f7ff ffbd 	bl	800ae94 <__sinit>
 800af1a:	3648      	adds	r6, #72	; 0x48
 800af1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af20:	3b01      	subs	r3, #1
 800af22:	d503      	bpl.n	800af2c <__sfp+0x28>
 800af24:	6833      	ldr	r3, [r6, #0]
 800af26:	b30b      	cbz	r3, 800af6c <__sfp+0x68>
 800af28:	6836      	ldr	r6, [r6, #0]
 800af2a:	e7f7      	b.n	800af1c <__sfp+0x18>
 800af2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af30:	b9d5      	cbnz	r5, 800af68 <__sfp+0x64>
 800af32:	4b16      	ldr	r3, [pc, #88]	; (800af8c <__sfp+0x88>)
 800af34:	60e3      	str	r3, [r4, #12]
 800af36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af3a:	6665      	str	r5, [r4, #100]	; 0x64
 800af3c:	f000 f87e 	bl	800b03c <__retarget_lock_init_recursive>
 800af40:	f7ff ff96 	bl	800ae70 <__sfp_lock_release>
 800af44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af4c:	6025      	str	r5, [r4, #0]
 800af4e:	61a5      	str	r5, [r4, #24]
 800af50:	2208      	movs	r2, #8
 800af52:	4629      	mov	r1, r5
 800af54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af58:	f000 f8e6 	bl	800b128 <memset>
 800af5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af64:	4620      	mov	r0, r4
 800af66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af68:	3468      	adds	r4, #104	; 0x68
 800af6a:	e7d9      	b.n	800af20 <__sfp+0x1c>
 800af6c:	2104      	movs	r1, #4
 800af6e:	4638      	mov	r0, r7
 800af70:	f7ff ff62 	bl	800ae38 <__sfmoreglue>
 800af74:	4604      	mov	r4, r0
 800af76:	6030      	str	r0, [r6, #0]
 800af78:	2800      	cmp	r0, #0
 800af7a:	d1d5      	bne.n	800af28 <__sfp+0x24>
 800af7c:	f7ff ff78 	bl	800ae70 <__sfp_lock_release>
 800af80:	230c      	movs	r3, #12
 800af82:	603b      	str	r3, [r7, #0]
 800af84:	e7ee      	b.n	800af64 <__sfp+0x60>
 800af86:	bf00      	nop
 800af88:	08015cc8 	.word	0x08015cc8
 800af8c:	ffff0001 	.word	0xffff0001

0800af90 <fiprintf>:
 800af90:	b40e      	push	{r1, r2, r3}
 800af92:	b503      	push	{r0, r1, lr}
 800af94:	4601      	mov	r1, r0
 800af96:	ab03      	add	r3, sp, #12
 800af98:	4805      	ldr	r0, [pc, #20]	; (800afb0 <fiprintf+0x20>)
 800af9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af9e:	6800      	ldr	r0, [r0, #0]
 800afa0:	9301      	str	r3, [sp, #4]
 800afa2:	f000 f99d 	bl	800b2e0 <_vfiprintf_r>
 800afa6:	b002      	add	sp, #8
 800afa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afac:	b003      	add	sp, #12
 800afae:	4770      	bx	lr
 800afb0:	20000030 	.word	0x20000030

0800afb4 <_fwalk_reent>:
 800afb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afb8:	4606      	mov	r6, r0
 800afba:	4688      	mov	r8, r1
 800afbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afc0:	2700      	movs	r7, #0
 800afc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afc6:	f1b9 0901 	subs.w	r9, r9, #1
 800afca:	d505      	bpl.n	800afd8 <_fwalk_reent+0x24>
 800afcc:	6824      	ldr	r4, [r4, #0]
 800afce:	2c00      	cmp	r4, #0
 800afd0:	d1f7      	bne.n	800afc2 <_fwalk_reent+0xe>
 800afd2:	4638      	mov	r0, r7
 800afd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd8:	89ab      	ldrh	r3, [r5, #12]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d907      	bls.n	800afee <_fwalk_reent+0x3a>
 800afde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afe2:	3301      	adds	r3, #1
 800afe4:	d003      	beq.n	800afee <_fwalk_reent+0x3a>
 800afe6:	4629      	mov	r1, r5
 800afe8:	4630      	mov	r0, r6
 800afea:	47c0      	blx	r8
 800afec:	4307      	orrs	r7, r0
 800afee:	3568      	adds	r5, #104	; 0x68
 800aff0:	e7e9      	b.n	800afc6 <_fwalk_reent+0x12>
	...

0800aff4 <__libc_init_array>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	4d0d      	ldr	r5, [pc, #52]	; (800b02c <__libc_init_array+0x38>)
 800aff8:	4c0d      	ldr	r4, [pc, #52]	; (800b030 <__libc_init_array+0x3c>)
 800affa:	1b64      	subs	r4, r4, r5
 800affc:	10a4      	asrs	r4, r4, #2
 800affe:	2600      	movs	r6, #0
 800b000:	42a6      	cmp	r6, r4
 800b002:	d109      	bne.n	800b018 <__libc_init_array+0x24>
 800b004:	4d0b      	ldr	r5, [pc, #44]	; (800b034 <__libc_init_array+0x40>)
 800b006:	4c0c      	ldr	r4, [pc, #48]	; (800b038 <__libc_init_array+0x44>)
 800b008:	f001 f888 	bl	800c11c <_init>
 800b00c:	1b64      	subs	r4, r4, r5
 800b00e:	10a4      	asrs	r4, r4, #2
 800b010:	2600      	movs	r6, #0
 800b012:	42a6      	cmp	r6, r4
 800b014:	d105      	bne.n	800b022 <__libc_init_array+0x2e>
 800b016:	bd70      	pop	{r4, r5, r6, pc}
 800b018:	f855 3b04 	ldr.w	r3, [r5], #4
 800b01c:	4798      	blx	r3
 800b01e:	3601      	adds	r6, #1
 800b020:	e7ee      	b.n	800b000 <__libc_init_array+0xc>
 800b022:	f855 3b04 	ldr.w	r3, [r5], #4
 800b026:	4798      	blx	r3
 800b028:	3601      	adds	r6, #1
 800b02a:	e7f2      	b.n	800b012 <__libc_init_array+0x1e>
 800b02c:	08015d08 	.word	0x08015d08
 800b030:	08015d08 	.word	0x08015d08
 800b034:	08015d08 	.word	0x08015d08
 800b038:	08015d0c 	.word	0x08015d0c

0800b03c <__retarget_lock_init_recursive>:
 800b03c:	4770      	bx	lr

0800b03e <__retarget_lock_acquire_recursive>:
 800b03e:	4770      	bx	lr

0800b040 <__retarget_lock_release_recursive>:
 800b040:	4770      	bx	lr

0800b042 <__swhatbuf_r>:
 800b042:	b570      	push	{r4, r5, r6, lr}
 800b044:	460e      	mov	r6, r1
 800b046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b04a:	2900      	cmp	r1, #0
 800b04c:	b096      	sub	sp, #88	; 0x58
 800b04e:	4614      	mov	r4, r2
 800b050:	461d      	mov	r5, r3
 800b052:	da07      	bge.n	800b064 <__swhatbuf_r+0x22>
 800b054:	2300      	movs	r3, #0
 800b056:	602b      	str	r3, [r5, #0]
 800b058:	89b3      	ldrh	r3, [r6, #12]
 800b05a:	061a      	lsls	r2, r3, #24
 800b05c:	d410      	bmi.n	800b080 <__swhatbuf_r+0x3e>
 800b05e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b062:	e00e      	b.n	800b082 <__swhatbuf_r+0x40>
 800b064:	466a      	mov	r2, sp
 800b066:	f000 fe1f 	bl	800bca8 <_fstat_r>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	dbf2      	blt.n	800b054 <__swhatbuf_r+0x12>
 800b06e:	9a01      	ldr	r2, [sp, #4]
 800b070:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b074:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b078:	425a      	negs	r2, r3
 800b07a:	415a      	adcs	r2, r3
 800b07c:	602a      	str	r2, [r5, #0]
 800b07e:	e7ee      	b.n	800b05e <__swhatbuf_r+0x1c>
 800b080:	2340      	movs	r3, #64	; 0x40
 800b082:	2000      	movs	r0, #0
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	b016      	add	sp, #88	; 0x58
 800b088:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b08c <__smakebuf_r>:
 800b08c:	898b      	ldrh	r3, [r1, #12]
 800b08e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b090:	079d      	lsls	r5, r3, #30
 800b092:	4606      	mov	r6, r0
 800b094:	460c      	mov	r4, r1
 800b096:	d507      	bpl.n	800b0a8 <__smakebuf_r+0x1c>
 800b098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b09c:	6023      	str	r3, [r4, #0]
 800b09e:	6123      	str	r3, [r4, #16]
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	6163      	str	r3, [r4, #20]
 800b0a4:	b002      	add	sp, #8
 800b0a6:	bd70      	pop	{r4, r5, r6, pc}
 800b0a8:	ab01      	add	r3, sp, #4
 800b0aa:	466a      	mov	r2, sp
 800b0ac:	f7ff ffc9 	bl	800b042 <__swhatbuf_r>
 800b0b0:	9900      	ldr	r1, [sp, #0]
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f000 f88f 	bl	800b1d8 <_malloc_r>
 800b0ba:	b948      	cbnz	r0, 800b0d0 <__smakebuf_r+0x44>
 800b0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0c0:	059a      	lsls	r2, r3, #22
 800b0c2:	d4ef      	bmi.n	800b0a4 <__smakebuf_r+0x18>
 800b0c4:	f023 0303 	bic.w	r3, r3, #3
 800b0c8:	f043 0302 	orr.w	r3, r3, #2
 800b0cc:	81a3      	strh	r3, [r4, #12]
 800b0ce:	e7e3      	b.n	800b098 <__smakebuf_r+0xc>
 800b0d0:	4b0d      	ldr	r3, [pc, #52]	; (800b108 <__smakebuf_r+0x7c>)
 800b0d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0d4:	89a3      	ldrh	r3, [r4, #12]
 800b0d6:	6020      	str	r0, [r4, #0]
 800b0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0dc:	81a3      	strh	r3, [r4, #12]
 800b0de:	9b00      	ldr	r3, [sp, #0]
 800b0e0:	6163      	str	r3, [r4, #20]
 800b0e2:	9b01      	ldr	r3, [sp, #4]
 800b0e4:	6120      	str	r0, [r4, #16]
 800b0e6:	b15b      	cbz	r3, 800b100 <__smakebuf_r+0x74>
 800b0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f000 fded 	bl	800bccc <_isatty_r>
 800b0f2:	b128      	cbz	r0, 800b100 <__smakebuf_r+0x74>
 800b0f4:	89a3      	ldrh	r3, [r4, #12]
 800b0f6:	f023 0303 	bic.w	r3, r3, #3
 800b0fa:	f043 0301 	orr.w	r3, r3, #1
 800b0fe:	81a3      	strh	r3, [r4, #12]
 800b100:	89a0      	ldrh	r0, [r4, #12]
 800b102:	4305      	orrs	r5, r0
 800b104:	81a5      	strh	r5, [r4, #12]
 800b106:	e7cd      	b.n	800b0a4 <__smakebuf_r+0x18>
 800b108:	0800ae2d 	.word	0x0800ae2d

0800b10c <memcpy>:
 800b10c:	440a      	add	r2, r1
 800b10e:	4291      	cmp	r1, r2
 800b110:	f100 33ff 	add.w	r3, r0, #4294967295
 800b114:	d100      	bne.n	800b118 <memcpy+0xc>
 800b116:	4770      	bx	lr
 800b118:	b510      	push	{r4, lr}
 800b11a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b11e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b122:	4291      	cmp	r1, r2
 800b124:	d1f9      	bne.n	800b11a <memcpy+0xe>
 800b126:	bd10      	pop	{r4, pc}

0800b128 <memset>:
 800b128:	4402      	add	r2, r0
 800b12a:	4603      	mov	r3, r0
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d100      	bne.n	800b132 <memset+0xa>
 800b130:	4770      	bx	lr
 800b132:	f803 1b01 	strb.w	r1, [r3], #1
 800b136:	e7f9      	b.n	800b12c <memset+0x4>

0800b138 <_free_r>:
 800b138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b13a:	2900      	cmp	r1, #0
 800b13c:	d048      	beq.n	800b1d0 <_free_r+0x98>
 800b13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b142:	9001      	str	r0, [sp, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	f1a1 0404 	sub.w	r4, r1, #4
 800b14a:	bfb8      	it	lt
 800b14c:	18e4      	addlt	r4, r4, r3
 800b14e:	f000 fdf9 	bl	800bd44 <__malloc_lock>
 800b152:	4a20      	ldr	r2, [pc, #128]	; (800b1d4 <_free_r+0x9c>)
 800b154:	9801      	ldr	r0, [sp, #4]
 800b156:	6813      	ldr	r3, [r2, #0]
 800b158:	4615      	mov	r5, r2
 800b15a:	b933      	cbnz	r3, 800b16a <_free_r+0x32>
 800b15c:	6063      	str	r3, [r4, #4]
 800b15e:	6014      	str	r4, [r2, #0]
 800b160:	b003      	add	sp, #12
 800b162:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b166:	f000 bdf3 	b.w	800bd50 <__malloc_unlock>
 800b16a:	42a3      	cmp	r3, r4
 800b16c:	d90b      	bls.n	800b186 <_free_r+0x4e>
 800b16e:	6821      	ldr	r1, [r4, #0]
 800b170:	1862      	adds	r2, r4, r1
 800b172:	4293      	cmp	r3, r2
 800b174:	bf04      	itt	eq
 800b176:	681a      	ldreq	r2, [r3, #0]
 800b178:	685b      	ldreq	r3, [r3, #4]
 800b17a:	6063      	str	r3, [r4, #4]
 800b17c:	bf04      	itt	eq
 800b17e:	1852      	addeq	r2, r2, r1
 800b180:	6022      	streq	r2, [r4, #0]
 800b182:	602c      	str	r4, [r5, #0]
 800b184:	e7ec      	b.n	800b160 <_free_r+0x28>
 800b186:	461a      	mov	r2, r3
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	b10b      	cbz	r3, 800b190 <_free_r+0x58>
 800b18c:	42a3      	cmp	r3, r4
 800b18e:	d9fa      	bls.n	800b186 <_free_r+0x4e>
 800b190:	6811      	ldr	r1, [r2, #0]
 800b192:	1855      	adds	r5, r2, r1
 800b194:	42a5      	cmp	r5, r4
 800b196:	d10b      	bne.n	800b1b0 <_free_r+0x78>
 800b198:	6824      	ldr	r4, [r4, #0]
 800b19a:	4421      	add	r1, r4
 800b19c:	1854      	adds	r4, r2, r1
 800b19e:	42a3      	cmp	r3, r4
 800b1a0:	6011      	str	r1, [r2, #0]
 800b1a2:	d1dd      	bne.n	800b160 <_free_r+0x28>
 800b1a4:	681c      	ldr	r4, [r3, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	6053      	str	r3, [r2, #4]
 800b1aa:	4421      	add	r1, r4
 800b1ac:	6011      	str	r1, [r2, #0]
 800b1ae:	e7d7      	b.n	800b160 <_free_r+0x28>
 800b1b0:	d902      	bls.n	800b1b8 <_free_r+0x80>
 800b1b2:	230c      	movs	r3, #12
 800b1b4:	6003      	str	r3, [r0, #0]
 800b1b6:	e7d3      	b.n	800b160 <_free_r+0x28>
 800b1b8:	6825      	ldr	r5, [r4, #0]
 800b1ba:	1961      	adds	r1, r4, r5
 800b1bc:	428b      	cmp	r3, r1
 800b1be:	bf04      	itt	eq
 800b1c0:	6819      	ldreq	r1, [r3, #0]
 800b1c2:	685b      	ldreq	r3, [r3, #4]
 800b1c4:	6063      	str	r3, [r4, #4]
 800b1c6:	bf04      	itt	eq
 800b1c8:	1949      	addeq	r1, r1, r5
 800b1ca:	6021      	streq	r1, [r4, #0]
 800b1cc:	6054      	str	r4, [r2, #4]
 800b1ce:	e7c7      	b.n	800b160 <_free_r+0x28>
 800b1d0:	b003      	add	sp, #12
 800b1d2:	bd30      	pop	{r4, r5, pc}
 800b1d4:	2000a104 	.word	0x2000a104

0800b1d8 <_malloc_r>:
 800b1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1da:	1ccd      	adds	r5, r1, #3
 800b1dc:	f025 0503 	bic.w	r5, r5, #3
 800b1e0:	3508      	adds	r5, #8
 800b1e2:	2d0c      	cmp	r5, #12
 800b1e4:	bf38      	it	cc
 800b1e6:	250c      	movcc	r5, #12
 800b1e8:	2d00      	cmp	r5, #0
 800b1ea:	4606      	mov	r6, r0
 800b1ec:	db01      	blt.n	800b1f2 <_malloc_r+0x1a>
 800b1ee:	42a9      	cmp	r1, r5
 800b1f0:	d903      	bls.n	800b1fa <_malloc_r+0x22>
 800b1f2:	230c      	movs	r3, #12
 800b1f4:	6033      	str	r3, [r6, #0]
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1fa:	f000 fda3 	bl	800bd44 <__malloc_lock>
 800b1fe:	4921      	ldr	r1, [pc, #132]	; (800b284 <_malloc_r+0xac>)
 800b200:	680a      	ldr	r2, [r1, #0]
 800b202:	4614      	mov	r4, r2
 800b204:	b99c      	cbnz	r4, 800b22e <_malloc_r+0x56>
 800b206:	4f20      	ldr	r7, [pc, #128]	; (800b288 <_malloc_r+0xb0>)
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	b923      	cbnz	r3, 800b216 <_malloc_r+0x3e>
 800b20c:	4621      	mov	r1, r4
 800b20e:	4630      	mov	r0, r6
 800b210:	f000 fbb8 	bl	800b984 <_sbrk_r>
 800b214:	6038      	str	r0, [r7, #0]
 800b216:	4629      	mov	r1, r5
 800b218:	4630      	mov	r0, r6
 800b21a:	f000 fbb3 	bl	800b984 <_sbrk_r>
 800b21e:	1c43      	adds	r3, r0, #1
 800b220:	d123      	bne.n	800b26a <_malloc_r+0x92>
 800b222:	230c      	movs	r3, #12
 800b224:	6033      	str	r3, [r6, #0]
 800b226:	4630      	mov	r0, r6
 800b228:	f000 fd92 	bl	800bd50 <__malloc_unlock>
 800b22c:	e7e3      	b.n	800b1f6 <_malloc_r+0x1e>
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	1b5b      	subs	r3, r3, r5
 800b232:	d417      	bmi.n	800b264 <_malloc_r+0x8c>
 800b234:	2b0b      	cmp	r3, #11
 800b236:	d903      	bls.n	800b240 <_malloc_r+0x68>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	441c      	add	r4, r3
 800b23c:	6025      	str	r5, [r4, #0]
 800b23e:	e004      	b.n	800b24a <_malloc_r+0x72>
 800b240:	6863      	ldr	r3, [r4, #4]
 800b242:	42a2      	cmp	r2, r4
 800b244:	bf0c      	ite	eq
 800b246:	600b      	streq	r3, [r1, #0]
 800b248:	6053      	strne	r3, [r2, #4]
 800b24a:	4630      	mov	r0, r6
 800b24c:	f000 fd80 	bl	800bd50 <__malloc_unlock>
 800b250:	f104 000b 	add.w	r0, r4, #11
 800b254:	1d23      	adds	r3, r4, #4
 800b256:	f020 0007 	bic.w	r0, r0, #7
 800b25a:	1ac2      	subs	r2, r0, r3
 800b25c:	d0cc      	beq.n	800b1f8 <_malloc_r+0x20>
 800b25e:	1a1b      	subs	r3, r3, r0
 800b260:	50a3      	str	r3, [r4, r2]
 800b262:	e7c9      	b.n	800b1f8 <_malloc_r+0x20>
 800b264:	4622      	mov	r2, r4
 800b266:	6864      	ldr	r4, [r4, #4]
 800b268:	e7cc      	b.n	800b204 <_malloc_r+0x2c>
 800b26a:	1cc4      	adds	r4, r0, #3
 800b26c:	f024 0403 	bic.w	r4, r4, #3
 800b270:	42a0      	cmp	r0, r4
 800b272:	d0e3      	beq.n	800b23c <_malloc_r+0x64>
 800b274:	1a21      	subs	r1, r4, r0
 800b276:	4630      	mov	r0, r6
 800b278:	f000 fb84 	bl	800b984 <_sbrk_r>
 800b27c:	3001      	adds	r0, #1
 800b27e:	d1dd      	bne.n	800b23c <_malloc_r+0x64>
 800b280:	e7cf      	b.n	800b222 <_malloc_r+0x4a>
 800b282:	bf00      	nop
 800b284:	2000a104 	.word	0x2000a104
 800b288:	2000a108 	.word	0x2000a108

0800b28c <__sfputc_r>:
 800b28c:	6893      	ldr	r3, [r2, #8]
 800b28e:	3b01      	subs	r3, #1
 800b290:	2b00      	cmp	r3, #0
 800b292:	b410      	push	{r4}
 800b294:	6093      	str	r3, [r2, #8]
 800b296:	da08      	bge.n	800b2aa <__sfputc_r+0x1e>
 800b298:	6994      	ldr	r4, [r2, #24]
 800b29a:	42a3      	cmp	r3, r4
 800b29c:	db01      	blt.n	800b2a2 <__sfputc_r+0x16>
 800b29e:	290a      	cmp	r1, #10
 800b2a0:	d103      	bne.n	800b2aa <__sfputc_r+0x1e>
 800b2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2a6:	f000 bc15 	b.w	800bad4 <__swbuf_r>
 800b2aa:	6813      	ldr	r3, [r2, #0]
 800b2ac:	1c58      	adds	r0, r3, #1
 800b2ae:	6010      	str	r0, [r2, #0]
 800b2b0:	7019      	strb	r1, [r3, #0]
 800b2b2:	4608      	mov	r0, r1
 800b2b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <__sfputs_r>:
 800b2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2bc:	4606      	mov	r6, r0
 800b2be:	460f      	mov	r7, r1
 800b2c0:	4614      	mov	r4, r2
 800b2c2:	18d5      	adds	r5, r2, r3
 800b2c4:	42ac      	cmp	r4, r5
 800b2c6:	d101      	bne.n	800b2cc <__sfputs_r+0x12>
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	e007      	b.n	800b2dc <__sfputs_r+0x22>
 800b2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d0:	463a      	mov	r2, r7
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f7ff ffda 	bl	800b28c <__sfputc_r>
 800b2d8:	1c43      	adds	r3, r0, #1
 800b2da:	d1f3      	bne.n	800b2c4 <__sfputs_r+0xa>
 800b2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b2e0 <_vfiprintf_r>:
 800b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	460d      	mov	r5, r1
 800b2e6:	b09d      	sub	sp, #116	; 0x74
 800b2e8:	4614      	mov	r4, r2
 800b2ea:	4698      	mov	r8, r3
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	b118      	cbz	r0, 800b2f8 <_vfiprintf_r+0x18>
 800b2f0:	6983      	ldr	r3, [r0, #24]
 800b2f2:	b90b      	cbnz	r3, 800b2f8 <_vfiprintf_r+0x18>
 800b2f4:	f7ff fdce 	bl	800ae94 <__sinit>
 800b2f8:	4b89      	ldr	r3, [pc, #548]	; (800b520 <_vfiprintf_r+0x240>)
 800b2fa:	429d      	cmp	r5, r3
 800b2fc:	d11b      	bne.n	800b336 <_vfiprintf_r+0x56>
 800b2fe:	6875      	ldr	r5, [r6, #4]
 800b300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b302:	07d9      	lsls	r1, r3, #31
 800b304:	d405      	bmi.n	800b312 <_vfiprintf_r+0x32>
 800b306:	89ab      	ldrh	r3, [r5, #12]
 800b308:	059a      	lsls	r2, r3, #22
 800b30a:	d402      	bmi.n	800b312 <_vfiprintf_r+0x32>
 800b30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b30e:	f7ff fe96 	bl	800b03e <__retarget_lock_acquire_recursive>
 800b312:	89ab      	ldrh	r3, [r5, #12]
 800b314:	071b      	lsls	r3, r3, #28
 800b316:	d501      	bpl.n	800b31c <_vfiprintf_r+0x3c>
 800b318:	692b      	ldr	r3, [r5, #16]
 800b31a:	b9eb      	cbnz	r3, 800b358 <_vfiprintf_r+0x78>
 800b31c:	4629      	mov	r1, r5
 800b31e:	4630      	mov	r0, r6
 800b320:	f000 fc3c 	bl	800bb9c <__swsetup_r>
 800b324:	b1c0      	cbz	r0, 800b358 <_vfiprintf_r+0x78>
 800b326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b328:	07dc      	lsls	r4, r3, #31
 800b32a:	d50e      	bpl.n	800b34a <_vfiprintf_r+0x6a>
 800b32c:	f04f 30ff 	mov.w	r0, #4294967295
 800b330:	b01d      	add	sp, #116	; 0x74
 800b332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b336:	4b7b      	ldr	r3, [pc, #492]	; (800b524 <_vfiprintf_r+0x244>)
 800b338:	429d      	cmp	r5, r3
 800b33a:	d101      	bne.n	800b340 <_vfiprintf_r+0x60>
 800b33c:	68b5      	ldr	r5, [r6, #8]
 800b33e:	e7df      	b.n	800b300 <_vfiprintf_r+0x20>
 800b340:	4b79      	ldr	r3, [pc, #484]	; (800b528 <_vfiprintf_r+0x248>)
 800b342:	429d      	cmp	r5, r3
 800b344:	bf08      	it	eq
 800b346:	68f5      	ldreq	r5, [r6, #12]
 800b348:	e7da      	b.n	800b300 <_vfiprintf_r+0x20>
 800b34a:	89ab      	ldrh	r3, [r5, #12]
 800b34c:	0598      	lsls	r0, r3, #22
 800b34e:	d4ed      	bmi.n	800b32c <_vfiprintf_r+0x4c>
 800b350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b352:	f7ff fe75 	bl	800b040 <__retarget_lock_release_recursive>
 800b356:	e7e9      	b.n	800b32c <_vfiprintf_r+0x4c>
 800b358:	2300      	movs	r3, #0
 800b35a:	9309      	str	r3, [sp, #36]	; 0x24
 800b35c:	2320      	movs	r3, #32
 800b35e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b362:	f8cd 800c 	str.w	r8, [sp, #12]
 800b366:	2330      	movs	r3, #48	; 0x30
 800b368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b52c <_vfiprintf_r+0x24c>
 800b36c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b370:	f04f 0901 	mov.w	r9, #1
 800b374:	4623      	mov	r3, r4
 800b376:	469a      	mov	sl, r3
 800b378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b37c:	b10a      	cbz	r2, 800b382 <_vfiprintf_r+0xa2>
 800b37e:	2a25      	cmp	r2, #37	; 0x25
 800b380:	d1f9      	bne.n	800b376 <_vfiprintf_r+0x96>
 800b382:	ebba 0b04 	subs.w	fp, sl, r4
 800b386:	d00b      	beq.n	800b3a0 <_vfiprintf_r+0xc0>
 800b388:	465b      	mov	r3, fp
 800b38a:	4622      	mov	r2, r4
 800b38c:	4629      	mov	r1, r5
 800b38e:	4630      	mov	r0, r6
 800b390:	f7ff ff93 	bl	800b2ba <__sfputs_r>
 800b394:	3001      	adds	r0, #1
 800b396:	f000 80aa 	beq.w	800b4ee <_vfiprintf_r+0x20e>
 800b39a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b39c:	445a      	add	r2, fp
 800b39e:	9209      	str	r2, [sp, #36]	; 0x24
 800b3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f000 80a2 	beq.w	800b4ee <_vfiprintf_r+0x20e>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3b4:	f10a 0a01 	add.w	sl, sl, #1
 800b3b8:	9304      	str	r3, [sp, #16]
 800b3ba:	9307      	str	r3, [sp, #28]
 800b3bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3c0:	931a      	str	r3, [sp, #104]	; 0x68
 800b3c2:	4654      	mov	r4, sl
 800b3c4:	2205      	movs	r2, #5
 800b3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ca:	4858      	ldr	r0, [pc, #352]	; (800b52c <_vfiprintf_r+0x24c>)
 800b3cc:	f7f4 ff08 	bl	80001e0 <memchr>
 800b3d0:	9a04      	ldr	r2, [sp, #16]
 800b3d2:	b9d8      	cbnz	r0, 800b40c <_vfiprintf_r+0x12c>
 800b3d4:	06d1      	lsls	r1, r2, #27
 800b3d6:	bf44      	itt	mi
 800b3d8:	2320      	movmi	r3, #32
 800b3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3de:	0713      	lsls	r3, r2, #28
 800b3e0:	bf44      	itt	mi
 800b3e2:	232b      	movmi	r3, #43	; 0x2b
 800b3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b3ee:	d015      	beq.n	800b41c <_vfiprintf_r+0x13c>
 800b3f0:	9a07      	ldr	r2, [sp, #28]
 800b3f2:	4654      	mov	r4, sl
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	f04f 0c0a 	mov.w	ip, #10
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b400:	3b30      	subs	r3, #48	; 0x30
 800b402:	2b09      	cmp	r3, #9
 800b404:	d94e      	bls.n	800b4a4 <_vfiprintf_r+0x1c4>
 800b406:	b1b0      	cbz	r0, 800b436 <_vfiprintf_r+0x156>
 800b408:	9207      	str	r2, [sp, #28]
 800b40a:	e014      	b.n	800b436 <_vfiprintf_r+0x156>
 800b40c:	eba0 0308 	sub.w	r3, r0, r8
 800b410:	fa09 f303 	lsl.w	r3, r9, r3
 800b414:	4313      	orrs	r3, r2
 800b416:	9304      	str	r3, [sp, #16]
 800b418:	46a2      	mov	sl, r4
 800b41a:	e7d2      	b.n	800b3c2 <_vfiprintf_r+0xe2>
 800b41c:	9b03      	ldr	r3, [sp, #12]
 800b41e:	1d19      	adds	r1, r3, #4
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	9103      	str	r1, [sp, #12]
 800b424:	2b00      	cmp	r3, #0
 800b426:	bfbb      	ittet	lt
 800b428:	425b      	neglt	r3, r3
 800b42a:	f042 0202 	orrlt.w	r2, r2, #2
 800b42e:	9307      	strge	r3, [sp, #28]
 800b430:	9307      	strlt	r3, [sp, #28]
 800b432:	bfb8      	it	lt
 800b434:	9204      	strlt	r2, [sp, #16]
 800b436:	7823      	ldrb	r3, [r4, #0]
 800b438:	2b2e      	cmp	r3, #46	; 0x2e
 800b43a:	d10c      	bne.n	800b456 <_vfiprintf_r+0x176>
 800b43c:	7863      	ldrb	r3, [r4, #1]
 800b43e:	2b2a      	cmp	r3, #42	; 0x2a
 800b440:	d135      	bne.n	800b4ae <_vfiprintf_r+0x1ce>
 800b442:	9b03      	ldr	r3, [sp, #12]
 800b444:	1d1a      	adds	r2, r3, #4
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	9203      	str	r2, [sp, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	bfb8      	it	lt
 800b44e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b452:	3402      	adds	r4, #2
 800b454:	9305      	str	r3, [sp, #20]
 800b456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b53c <_vfiprintf_r+0x25c>
 800b45a:	7821      	ldrb	r1, [r4, #0]
 800b45c:	2203      	movs	r2, #3
 800b45e:	4650      	mov	r0, sl
 800b460:	f7f4 febe 	bl	80001e0 <memchr>
 800b464:	b140      	cbz	r0, 800b478 <_vfiprintf_r+0x198>
 800b466:	2340      	movs	r3, #64	; 0x40
 800b468:	eba0 000a 	sub.w	r0, r0, sl
 800b46c:	fa03 f000 	lsl.w	r0, r3, r0
 800b470:	9b04      	ldr	r3, [sp, #16]
 800b472:	4303      	orrs	r3, r0
 800b474:	3401      	adds	r4, #1
 800b476:	9304      	str	r3, [sp, #16]
 800b478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b47c:	482c      	ldr	r0, [pc, #176]	; (800b530 <_vfiprintf_r+0x250>)
 800b47e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b482:	2206      	movs	r2, #6
 800b484:	f7f4 feac 	bl	80001e0 <memchr>
 800b488:	2800      	cmp	r0, #0
 800b48a:	d03f      	beq.n	800b50c <_vfiprintf_r+0x22c>
 800b48c:	4b29      	ldr	r3, [pc, #164]	; (800b534 <_vfiprintf_r+0x254>)
 800b48e:	bb1b      	cbnz	r3, 800b4d8 <_vfiprintf_r+0x1f8>
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	3307      	adds	r3, #7
 800b494:	f023 0307 	bic.w	r3, r3, #7
 800b498:	3308      	adds	r3, #8
 800b49a:	9303      	str	r3, [sp, #12]
 800b49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b49e:	443b      	add	r3, r7
 800b4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a2:	e767      	b.n	800b374 <_vfiprintf_r+0x94>
 800b4a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4a8:	460c      	mov	r4, r1
 800b4aa:	2001      	movs	r0, #1
 800b4ac:	e7a5      	b.n	800b3fa <_vfiprintf_r+0x11a>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	3401      	adds	r4, #1
 800b4b2:	9305      	str	r3, [sp, #20]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	f04f 0c0a 	mov.w	ip, #10
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4c0:	3a30      	subs	r2, #48	; 0x30
 800b4c2:	2a09      	cmp	r2, #9
 800b4c4:	d903      	bls.n	800b4ce <_vfiprintf_r+0x1ee>
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d0c5      	beq.n	800b456 <_vfiprintf_r+0x176>
 800b4ca:	9105      	str	r1, [sp, #20]
 800b4cc:	e7c3      	b.n	800b456 <_vfiprintf_r+0x176>
 800b4ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e7f0      	b.n	800b4ba <_vfiprintf_r+0x1da>
 800b4d8:	ab03      	add	r3, sp, #12
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	462a      	mov	r2, r5
 800b4de:	4b16      	ldr	r3, [pc, #88]	; (800b538 <_vfiprintf_r+0x258>)
 800b4e0:	a904      	add	r1, sp, #16
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f3af 8000 	nop.w
 800b4e8:	4607      	mov	r7, r0
 800b4ea:	1c78      	adds	r0, r7, #1
 800b4ec:	d1d6      	bne.n	800b49c <_vfiprintf_r+0x1bc>
 800b4ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4f0:	07d9      	lsls	r1, r3, #31
 800b4f2:	d405      	bmi.n	800b500 <_vfiprintf_r+0x220>
 800b4f4:	89ab      	ldrh	r3, [r5, #12]
 800b4f6:	059a      	lsls	r2, r3, #22
 800b4f8:	d402      	bmi.n	800b500 <_vfiprintf_r+0x220>
 800b4fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4fc:	f7ff fda0 	bl	800b040 <__retarget_lock_release_recursive>
 800b500:	89ab      	ldrh	r3, [r5, #12]
 800b502:	065b      	lsls	r3, r3, #25
 800b504:	f53f af12 	bmi.w	800b32c <_vfiprintf_r+0x4c>
 800b508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b50a:	e711      	b.n	800b330 <_vfiprintf_r+0x50>
 800b50c:	ab03      	add	r3, sp, #12
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	462a      	mov	r2, r5
 800b512:	4b09      	ldr	r3, [pc, #36]	; (800b538 <_vfiprintf_r+0x258>)
 800b514:	a904      	add	r1, sp, #16
 800b516:	4630      	mov	r0, r6
 800b518:	f000 f880 	bl	800b61c <_printf_i>
 800b51c:	e7e4      	b.n	800b4e8 <_vfiprintf_r+0x208>
 800b51e:	bf00      	nop
 800b520:	08015c88 	.word	0x08015c88
 800b524:	08015ca8 	.word	0x08015ca8
 800b528:	08015c68 	.word	0x08015c68
 800b52c:	08015ccc 	.word	0x08015ccc
 800b530:	08015cd6 	.word	0x08015cd6
 800b534:	00000000 	.word	0x00000000
 800b538:	0800b2bb 	.word	0x0800b2bb
 800b53c:	08015cd2 	.word	0x08015cd2

0800b540 <_printf_common>:
 800b540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b544:	4616      	mov	r6, r2
 800b546:	4699      	mov	r9, r3
 800b548:	688a      	ldr	r2, [r1, #8]
 800b54a:	690b      	ldr	r3, [r1, #16]
 800b54c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b550:	4293      	cmp	r3, r2
 800b552:	bfb8      	it	lt
 800b554:	4613      	movlt	r3, r2
 800b556:	6033      	str	r3, [r6, #0]
 800b558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b55c:	4607      	mov	r7, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	b10a      	cbz	r2, 800b566 <_printf_common+0x26>
 800b562:	3301      	adds	r3, #1
 800b564:	6033      	str	r3, [r6, #0]
 800b566:	6823      	ldr	r3, [r4, #0]
 800b568:	0699      	lsls	r1, r3, #26
 800b56a:	bf42      	ittt	mi
 800b56c:	6833      	ldrmi	r3, [r6, #0]
 800b56e:	3302      	addmi	r3, #2
 800b570:	6033      	strmi	r3, [r6, #0]
 800b572:	6825      	ldr	r5, [r4, #0]
 800b574:	f015 0506 	ands.w	r5, r5, #6
 800b578:	d106      	bne.n	800b588 <_printf_common+0x48>
 800b57a:	f104 0a19 	add.w	sl, r4, #25
 800b57e:	68e3      	ldr	r3, [r4, #12]
 800b580:	6832      	ldr	r2, [r6, #0]
 800b582:	1a9b      	subs	r3, r3, r2
 800b584:	42ab      	cmp	r3, r5
 800b586:	dc26      	bgt.n	800b5d6 <_printf_common+0x96>
 800b588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b58c:	1e13      	subs	r3, r2, #0
 800b58e:	6822      	ldr	r2, [r4, #0]
 800b590:	bf18      	it	ne
 800b592:	2301      	movne	r3, #1
 800b594:	0692      	lsls	r2, r2, #26
 800b596:	d42b      	bmi.n	800b5f0 <_printf_common+0xb0>
 800b598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b59c:	4649      	mov	r1, r9
 800b59e:	4638      	mov	r0, r7
 800b5a0:	47c0      	blx	r8
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	d01e      	beq.n	800b5e4 <_printf_common+0xa4>
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	68e5      	ldr	r5, [r4, #12]
 800b5aa:	6832      	ldr	r2, [r6, #0]
 800b5ac:	f003 0306 	and.w	r3, r3, #6
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	bf08      	it	eq
 800b5b4:	1aad      	subeq	r5, r5, r2
 800b5b6:	68a3      	ldr	r3, [r4, #8]
 800b5b8:	6922      	ldr	r2, [r4, #16]
 800b5ba:	bf0c      	ite	eq
 800b5bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5c0:	2500      	movne	r5, #0
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	bfc4      	itt	gt
 800b5c6:	1a9b      	subgt	r3, r3, r2
 800b5c8:	18ed      	addgt	r5, r5, r3
 800b5ca:	2600      	movs	r6, #0
 800b5cc:	341a      	adds	r4, #26
 800b5ce:	42b5      	cmp	r5, r6
 800b5d0:	d11a      	bne.n	800b608 <_printf_common+0xc8>
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	e008      	b.n	800b5e8 <_printf_common+0xa8>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4652      	mov	r2, sl
 800b5da:	4649      	mov	r1, r9
 800b5dc:	4638      	mov	r0, r7
 800b5de:	47c0      	blx	r8
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d103      	bne.n	800b5ec <_printf_common+0xac>
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ec:	3501      	adds	r5, #1
 800b5ee:	e7c6      	b.n	800b57e <_printf_common+0x3e>
 800b5f0:	18e1      	adds	r1, r4, r3
 800b5f2:	1c5a      	adds	r2, r3, #1
 800b5f4:	2030      	movs	r0, #48	; 0x30
 800b5f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5fa:	4422      	add	r2, r4
 800b5fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b604:	3302      	adds	r3, #2
 800b606:	e7c7      	b.n	800b598 <_printf_common+0x58>
 800b608:	2301      	movs	r3, #1
 800b60a:	4622      	mov	r2, r4
 800b60c:	4649      	mov	r1, r9
 800b60e:	4638      	mov	r0, r7
 800b610:	47c0      	blx	r8
 800b612:	3001      	adds	r0, #1
 800b614:	d0e6      	beq.n	800b5e4 <_printf_common+0xa4>
 800b616:	3601      	adds	r6, #1
 800b618:	e7d9      	b.n	800b5ce <_printf_common+0x8e>
	...

0800b61c <_printf_i>:
 800b61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b620:	460c      	mov	r4, r1
 800b622:	4691      	mov	r9, r2
 800b624:	7e27      	ldrb	r7, [r4, #24]
 800b626:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b628:	2f78      	cmp	r7, #120	; 0x78
 800b62a:	4680      	mov	r8, r0
 800b62c:	469a      	mov	sl, r3
 800b62e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b632:	d807      	bhi.n	800b644 <_printf_i+0x28>
 800b634:	2f62      	cmp	r7, #98	; 0x62
 800b636:	d80a      	bhi.n	800b64e <_printf_i+0x32>
 800b638:	2f00      	cmp	r7, #0
 800b63a:	f000 80d8 	beq.w	800b7ee <_printf_i+0x1d2>
 800b63e:	2f58      	cmp	r7, #88	; 0x58
 800b640:	f000 80a3 	beq.w	800b78a <_printf_i+0x16e>
 800b644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b64c:	e03a      	b.n	800b6c4 <_printf_i+0xa8>
 800b64e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b652:	2b15      	cmp	r3, #21
 800b654:	d8f6      	bhi.n	800b644 <_printf_i+0x28>
 800b656:	a001      	add	r0, pc, #4	; (adr r0, 800b65c <_printf_i+0x40>)
 800b658:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b65c:	0800b6b5 	.word	0x0800b6b5
 800b660:	0800b6c9 	.word	0x0800b6c9
 800b664:	0800b645 	.word	0x0800b645
 800b668:	0800b645 	.word	0x0800b645
 800b66c:	0800b645 	.word	0x0800b645
 800b670:	0800b645 	.word	0x0800b645
 800b674:	0800b6c9 	.word	0x0800b6c9
 800b678:	0800b645 	.word	0x0800b645
 800b67c:	0800b645 	.word	0x0800b645
 800b680:	0800b645 	.word	0x0800b645
 800b684:	0800b645 	.word	0x0800b645
 800b688:	0800b7d5 	.word	0x0800b7d5
 800b68c:	0800b6f9 	.word	0x0800b6f9
 800b690:	0800b7b7 	.word	0x0800b7b7
 800b694:	0800b645 	.word	0x0800b645
 800b698:	0800b645 	.word	0x0800b645
 800b69c:	0800b7f7 	.word	0x0800b7f7
 800b6a0:	0800b645 	.word	0x0800b645
 800b6a4:	0800b6f9 	.word	0x0800b6f9
 800b6a8:	0800b645 	.word	0x0800b645
 800b6ac:	0800b645 	.word	0x0800b645
 800b6b0:	0800b7bf 	.word	0x0800b7bf
 800b6b4:	680b      	ldr	r3, [r1, #0]
 800b6b6:	1d1a      	adds	r2, r3, #4
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	600a      	str	r2, [r1, #0]
 800b6bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b6c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e0a3      	b.n	800b810 <_printf_i+0x1f4>
 800b6c8:	6825      	ldr	r5, [r4, #0]
 800b6ca:	6808      	ldr	r0, [r1, #0]
 800b6cc:	062e      	lsls	r6, r5, #24
 800b6ce:	f100 0304 	add.w	r3, r0, #4
 800b6d2:	d50a      	bpl.n	800b6ea <_printf_i+0xce>
 800b6d4:	6805      	ldr	r5, [r0, #0]
 800b6d6:	600b      	str	r3, [r1, #0]
 800b6d8:	2d00      	cmp	r5, #0
 800b6da:	da03      	bge.n	800b6e4 <_printf_i+0xc8>
 800b6dc:	232d      	movs	r3, #45	; 0x2d
 800b6de:	426d      	negs	r5, r5
 800b6e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6e4:	485e      	ldr	r0, [pc, #376]	; (800b860 <_printf_i+0x244>)
 800b6e6:	230a      	movs	r3, #10
 800b6e8:	e019      	b.n	800b71e <_printf_i+0x102>
 800b6ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b6ee:	6805      	ldr	r5, [r0, #0]
 800b6f0:	600b      	str	r3, [r1, #0]
 800b6f2:	bf18      	it	ne
 800b6f4:	b22d      	sxthne	r5, r5
 800b6f6:	e7ef      	b.n	800b6d8 <_printf_i+0xbc>
 800b6f8:	680b      	ldr	r3, [r1, #0]
 800b6fa:	6825      	ldr	r5, [r4, #0]
 800b6fc:	1d18      	adds	r0, r3, #4
 800b6fe:	6008      	str	r0, [r1, #0]
 800b700:	0628      	lsls	r0, r5, #24
 800b702:	d501      	bpl.n	800b708 <_printf_i+0xec>
 800b704:	681d      	ldr	r5, [r3, #0]
 800b706:	e002      	b.n	800b70e <_printf_i+0xf2>
 800b708:	0669      	lsls	r1, r5, #25
 800b70a:	d5fb      	bpl.n	800b704 <_printf_i+0xe8>
 800b70c:	881d      	ldrh	r5, [r3, #0]
 800b70e:	4854      	ldr	r0, [pc, #336]	; (800b860 <_printf_i+0x244>)
 800b710:	2f6f      	cmp	r7, #111	; 0x6f
 800b712:	bf0c      	ite	eq
 800b714:	2308      	moveq	r3, #8
 800b716:	230a      	movne	r3, #10
 800b718:	2100      	movs	r1, #0
 800b71a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b71e:	6866      	ldr	r6, [r4, #4]
 800b720:	60a6      	str	r6, [r4, #8]
 800b722:	2e00      	cmp	r6, #0
 800b724:	bfa2      	ittt	ge
 800b726:	6821      	ldrge	r1, [r4, #0]
 800b728:	f021 0104 	bicge.w	r1, r1, #4
 800b72c:	6021      	strge	r1, [r4, #0]
 800b72e:	b90d      	cbnz	r5, 800b734 <_printf_i+0x118>
 800b730:	2e00      	cmp	r6, #0
 800b732:	d04d      	beq.n	800b7d0 <_printf_i+0x1b4>
 800b734:	4616      	mov	r6, r2
 800b736:	fbb5 f1f3 	udiv	r1, r5, r3
 800b73a:	fb03 5711 	mls	r7, r3, r1, r5
 800b73e:	5dc7      	ldrb	r7, [r0, r7]
 800b740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b744:	462f      	mov	r7, r5
 800b746:	42bb      	cmp	r3, r7
 800b748:	460d      	mov	r5, r1
 800b74a:	d9f4      	bls.n	800b736 <_printf_i+0x11a>
 800b74c:	2b08      	cmp	r3, #8
 800b74e:	d10b      	bne.n	800b768 <_printf_i+0x14c>
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	07df      	lsls	r7, r3, #31
 800b754:	d508      	bpl.n	800b768 <_printf_i+0x14c>
 800b756:	6923      	ldr	r3, [r4, #16]
 800b758:	6861      	ldr	r1, [r4, #4]
 800b75a:	4299      	cmp	r1, r3
 800b75c:	bfde      	ittt	le
 800b75e:	2330      	movle	r3, #48	; 0x30
 800b760:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b764:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b768:	1b92      	subs	r2, r2, r6
 800b76a:	6122      	str	r2, [r4, #16]
 800b76c:	f8cd a000 	str.w	sl, [sp]
 800b770:	464b      	mov	r3, r9
 800b772:	aa03      	add	r2, sp, #12
 800b774:	4621      	mov	r1, r4
 800b776:	4640      	mov	r0, r8
 800b778:	f7ff fee2 	bl	800b540 <_printf_common>
 800b77c:	3001      	adds	r0, #1
 800b77e:	d14c      	bne.n	800b81a <_printf_i+0x1fe>
 800b780:	f04f 30ff 	mov.w	r0, #4294967295
 800b784:	b004      	add	sp, #16
 800b786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b78a:	4835      	ldr	r0, [pc, #212]	; (800b860 <_printf_i+0x244>)
 800b78c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	680e      	ldr	r6, [r1, #0]
 800b794:	061f      	lsls	r7, r3, #24
 800b796:	f856 5b04 	ldr.w	r5, [r6], #4
 800b79a:	600e      	str	r6, [r1, #0]
 800b79c:	d514      	bpl.n	800b7c8 <_printf_i+0x1ac>
 800b79e:	07d9      	lsls	r1, r3, #31
 800b7a0:	bf44      	itt	mi
 800b7a2:	f043 0320 	orrmi.w	r3, r3, #32
 800b7a6:	6023      	strmi	r3, [r4, #0]
 800b7a8:	b91d      	cbnz	r5, 800b7b2 <_printf_i+0x196>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	f023 0320 	bic.w	r3, r3, #32
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	2310      	movs	r3, #16
 800b7b4:	e7b0      	b.n	800b718 <_printf_i+0xfc>
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	f043 0320 	orr.w	r3, r3, #32
 800b7bc:	6023      	str	r3, [r4, #0]
 800b7be:	2378      	movs	r3, #120	; 0x78
 800b7c0:	4828      	ldr	r0, [pc, #160]	; (800b864 <_printf_i+0x248>)
 800b7c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7c6:	e7e3      	b.n	800b790 <_printf_i+0x174>
 800b7c8:	065e      	lsls	r6, r3, #25
 800b7ca:	bf48      	it	mi
 800b7cc:	b2ad      	uxthmi	r5, r5
 800b7ce:	e7e6      	b.n	800b79e <_printf_i+0x182>
 800b7d0:	4616      	mov	r6, r2
 800b7d2:	e7bb      	b.n	800b74c <_printf_i+0x130>
 800b7d4:	680b      	ldr	r3, [r1, #0]
 800b7d6:	6826      	ldr	r6, [r4, #0]
 800b7d8:	6960      	ldr	r0, [r4, #20]
 800b7da:	1d1d      	adds	r5, r3, #4
 800b7dc:	600d      	str	r5, [r1, #0]
 800b7de:	0635      	lsls	r5, r6, #24
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	d501      	bpl.n	800b7e8 <_printf_i+0x1cc>
 800b7e4:	6018      	str	r0, [r3, #0]
 800b7e6:	e002      	b.n	800b7ee <_printf_i+0x1d2>
 800b7e8:	0671      	lsls	r1, r6, #25
 800b7ea:	d5fb      	bpl.n	800b7e4 <_printf_i+0x1c8>
 800b7ec:	8018      	strh	r0, [r3, #0]
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	6123      	str	r3, [r4, #16]
 800b7f2:	4616      	mov	r6, r2
 800b7f4:	e7ba      	b.n	800b76c <_printf_i+0x150>
 800b7f6:	680b      	ldr	r3, [r1, #0]
 800b7f8:	1d1a      	adds	r2, r3, #4
 800b7fa:	600a      	str	r2, [r1, #0]
 800b7fc:	681e      	ldr	r6, [r3, #0]
 800b7fe:	6862      	ldr	r2, [r4, #4]
 800b800:	2100      	movs	r1, #0
 800b802:	4630      	mov	r0, r6
 800b804:	f7f4 fcec 	bl	80001e0 <memchr>
 800b808:	b108      	cbz	r0, 800b80e <_printf_i+0x1f2>
 800b80a:	1b80      	subs	r0, r0, r6
 800b80c:	6060      	str	r0, [r4, #4]
 800b80e:	6863      	ldr	r3, [r4, #4]
 800b810:	6123      	str	r3, [r4, #16]
 800b812:	2300      	movs	r3, #0
 800b814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b818:	e7a8      	b.n	800b76c <_printf_i+0x150>
 800b81a:	6923      	ldr	r3, [r4, #16]
 800b81c:	4632      	mov	r2, r6
 800b81e:	4649      	mov	r1, r9
 800b820:	4640      	mov	r0, r8
 800b822:	47d0      	blx	sl
 800b824:	3001      	adds	r0, #1
 800b826:	d0ab      	beq.n	800b780 <_printf_i+0x164>
 800b828:	6823      	ldr	r3, [r4, #0]
 800b82a:	079b      	lsls	r3, r3, #30
 800b82c:	d413      	bmi.n	800b856 <_printf_i+0x23a>
 800b82e:	68e0      	ldr	r0, [r4, #12]
 800b830:	9b03      	ldr	r3, [sp, #12]
 800b832:	4298      	cmp	r0, r3
 800b834:	bfb8      	it	lt
 800b836:	4618      	movlt	r0, r3
 800b838:	e7a4      	b.n	800b784 <_printf_i+0x168>
 800b83a:	2301      	movs	r3, #1
 800b83c:	4632      	mov	r2, r6
 800b83e:	4649      	mov	r1, r9
 800b840:	4640      	mov	r0, r8
 800b842:	47d0      	blx	sl
 800b844:	3001      	adds	r0, #1
 800b846:	d09b      	beq.n	800b780 <_printf_i+0x164>
 800b848:	3501      	adds	r5, #1
 800b84a:	68e3      	ldr	r3, [r4, #12]
 800b84c:	9903      	ldr	r1, [sp, #12]
 800b84e:	1a5b      	subs	r3, r3, r1
 800b850:	42ab      	cmp	r3, r5
 800b852:	dcf2      	bgt.n	800b83a <_printf_i+0x21e>
 800b854:	e7eb      	b.n	800b82e <_printf_i+0x212>
 800b856:	2500      	movs	r5, #0
 800b858:	f104 0619 	add.w	r6, r4, #25
 800b85c:	e7f5      	b.n	800b84a <_printf_i+0x22e>
 800b85e:	bf00      	nop
 800b860:	08015cdd 	.word	0x08015cdd
 800b864:	08015cee 	.word	0x08015cee

0800b868 <iprintf>:
 800b868:	b40f      	push	{r0, r1, r2, r3}
 800b86a:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <iprintf+0x2c>)
 800b86c:	b513      	push	{r0, r1, r4, lr}
 800b86e:	681c      	ldr	r4, [r3, #0]
 800b870:	b124      	cbz	r4, 800b87c <iprintf+0x14>
 800b872:	69a3      	ldr	r3, [r4, #24]
 800b874:	b913      	cbnz	r3, 800b87c <iprintf+0x14>
 800b876:	4620      	mov	r0, r4
 800b878:	f7ff fb0c 	bl	800ae94 <__sinit>
 800b87c:	ab05      	add	r3, sp, #20
 800b87e:	9a04      	ldr	r2, [sp, #16]
 800b880:	68a1      	ldr	r1, [r4, #8]
 800b882:	9301      	str	r3, [sp, #4]
 800b884:	4620      	mov	r0, r4
 800b886:	f7ff fd2b 	bl	800b2e0 <_vfiprintf_r>
 800b88a:	b002      	add	sp, #8
 800b88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b890:	b004      	add	sp, #16
 800b892:	4770      	bx	lr
 800b894:	20000030 	.word	0x20000030

0800b898 <_puts_r>:
 800b898:	b570      	push	{r4, r5, r6, lr}
 800b89a:	460e      	mov	r6, r1
 800b89c:	4605      	mov	r5, r0
 800b89e:	b118      	cbz	r0, 800b8a8 <_puts_r+0x10>
 800b8a0:	6983      	ldr	r3, [r0, #24]
 800b8a2:	b90b      	cbnz	r3, 800b8a8 <_puts_r+0x10>
 800b8a4:	f7ff faf6 	bl	800ae94 <__sinit>
 800b8a8:	69ab      	ldr	r3, [r5, #24]
 800b8aa:	68ac      	ldr	r4, [r5, #8]
 800b8ac:	b913      	cbnz	r3, 800b8b4 <_puts_r+0x1c>
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f7ff faf0 	bl	800ae94 <__sinit>
 800b8b4:	4b2c      	ldr	r3, [pc, #176]	; (800b968 <_puts_r+0xd0>)
 800b8b6:	429c      	cmp	r4, r3
 800b8b8:	d120      	bne.n	800b8fc <_puts_r+0x64>
 800b8ba:	686c      	ldr	r4, [r5, #4]
 800b8bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8be:	07db      	lsls	r3, r3, #31
 800b8c0:	d405      	bmi.n	800b8ce <_puts_r+0x36>
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	0598      	lsls	r0, r3, #22
 800b8c6:	d402      	bmi.n	800b8ce <_puts_r+0x36>
 800b8c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8ca:	f7ff fbb8 	bl	800b03e <__retarget_lock_acquire_recursive>
 800b8ce:	89a3      	ldrh	r3, [r4, #12]
 800b8d0:	0719      	lsls	r1, r3, #28
 800b8d2:	d51d      	bpl.n	800b910 <_puts_r+0x78>
 800b8d4:	6923      	ldr	r3, [r4, #16]
 800b8d6:	b1db      	cbz	r3, 800b910 <_puts_r+0x78>
 800b8d8:	3e01      	subs	r6, #1
 800b8da:	68a3      	ldr	r3, [r4, #8]
 800b8dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	60a3      	str	r3, [r4, #8]
 800b8e4:	bb39      	cbnz	r1, 800b936 <_puts_r+0x9e>
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	da38      	bge.n	800b95c <_puts_r+0xc4>
 800b8ea:	4622      	mov	r2, r4
 800b8ec:	210a      	movs	r1, #10
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f000 f8f0 	bl	800bad4 <__swbuf_r>
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d011      	beq.n	800b91c <_puts_r+0x84>
 800b8f8:	250a      	movs	r5, #10
 800b8fa:	e011      	b.n	800b920 <_puts_r+0x88>
 800b8fc:	4b1b      	ldr	r3, [pc, #108]	; (800b96c <_puts_r+0xd4>)
 800b8fe:	429c      	cmp	r4, r3
 800b900:	d101      	bne.n	800b906 <_puts_r+0x6e>
 800b902:	68ac      	ldr	r4, [r5, #8]
 800b904:	e7da      	b.n	800b8bc <_puts_r+0x24>
 800b906:	4b1a      	ldr	r3, [pc, #104]	; (800b970 <_puts_r+0xd8>)
 800b908:	429c      	cmp	r4, r3
 800b90a:	bf08      	it	eq
 800b90c:	68ec      	ldreq	r4, [r5, #12]
 800b90e:	e7d5      	b.n	800b8bc <_puts_r+0x24>
 800b910:	4621      	mov	r1, r4
 800b912:	4628      	mov	r0, r5
 800b914:	f000 f942 	bl	800bb9c <__swsetup_r>
 800b918:	2800      	cmp	r0, #0
 800b91a:	d0dd      	beq.n	800b8d8 <_puts_r+0x40>
 800b91c:	f04f 35ff 	mov.w	r5, #4294967295
 800b920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b922:	07da      	lsls	r2, r3, #31
 800b924:	d405      	bmi.n	800b932 <_puts_r+0x9a>
 800b926:	89a3      	ldrh	r3, [r4, #12]
 800b928:	059b      	lsls	r3, r3, #22
 800b92a:	d402      	bmi.n	800b932 <_puts_r+0x9a>
 800b92c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b92e:	f7ff fb87 	bl	800b040 <__retarget_lock_release_recursive>
 800b932:	4628      	mov	r0, r5
 800b934:	bd70      	pop	{r4, r5, r6, pc}
 800b936:	2b00      	cmp	r3, #0
 800b938:	da04      	bge.n	800b944 <_puts_r+0xac>
 800b93a:	69a2      	ldr	r2, [r4, #24]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	dc06      	bgt.n	800b94e <_puts_r+0xb6>
 800b940:	290a      	cmp	r1, #10
 800b942:	d004      	beq.n	800b94e <_puts_r+0xb6>
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	6022      	str	r2, [r4, #0]
 800b94a:	7019      	strb	r1, [r3, #0]
 800b94c:	e7c5      	b.n	800b8da <_puts_r+0x42>
 800b94e:	4622      	mov	r2, r4
 800b950:	4628      	mov	r0, r5
 800b952:	f000 f8bf 	bl	800bad4 <__swbuf_r>
 800b956:	3001      	adds	r0, #1
 800b958:	d1bf      	bne.n	800b8da <_puts_r+0x42>
 800b95a:	e7df      	b.n	800b91c <_puts_r+0x84>
 800b95c:	6823      	ldr	r3, [r4, #0]
 800b95e:	250a      	movs	r5, #10
 800b960:	1c5a      	adds	r2, r3, #1
 800b962:	6022      	str	r2, [r4, #0]
 800b964:	701d      	strb	r5, [r3, #0]
 800b966:	e7db      	b.n	800b920 <_puts_r+0x88>
 800b968:	08015c88 	.word	0x08015c88
 800b96c:	08015ca8 	.word	0x08015ca8
 800b970:	08015c68 	.word	0x08015c68

0800b974 <puts>:
 800b974:	4b02      	ldr	r3, [pc, #8]	; (800b980 <puts+0xc>)
 800b976:	4601      	mov	r1, r0
 800b978:	6818      	ldr	r0, [r3, #0]
 800b97a:	f7ff bf8d 	b.w	800b898 <_puts_r>
 800b97e:	bf00      	nop
 800b980:	20000030 	.word	0x20000030

0800b984 <_sbrk_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	4d06      	ldr	r5, [pc, #24]	; (800b9a0 <_sbrk_r+0x1c>)
 800b988:	2300      	movs	r3, #0
 800b98a:	4604      	mov	r4, r0
 800b98c:	4608      	mov	r0, r1
 800b98e:	602b      	str	r3, [r5, #0]
 800b990:	f7f7 fcce 	bl	8003330 <_sbrk>
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d102      	bne.n	800b99e <_sbrk_r+0x1a>
 800b998:	682b      	ldr	r3, [r5, #0]
 800b99a:	b103      	cbz	r3, 800b99e <_sbrk_r+0x1a>
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	bd38      	pop	{r3, r4, r5, pc}
 800b9a0:	2000adb8 	.word	0x2000adb8

0800b9a4 <sniprintf>:
 800b9a4:	b40c      	push	{r2, r3}
 800b9a6:	b530      	push	{r4, r5, lr}
 800b9a8:	4b17      	ldr	r3, [pc, #92]	; (800ba08 <sniprintf+0x64>)
 800b9aa:	1e0c      	subs	r4, r1, #0
 800b9ac:	681d      	ldr	r5, [r3, #0]
 800b9ae:	b09d      	sub	sp, #116	; 0x74
 800b9b0:	da08      	bge.n	800b9c4 <sniprintf+0x20>
 800b9b2:	238b      	movs	r3, #139	; 0x8b
 800b9b4:	602b      	str	r3, [r5, #0]
 800b9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ba:	b01d      	add	sp, #116	; 0x74
 800b9bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9c0:	b002      	add	sp, #8
 800b9c2:	4770      	bx	lr
 800b9c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b9c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b9cc:	bf14      	ite	ne
 800b9ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b9d2:	4623      	moveq	r3, r4
 800b9d4:	9304      	str	r3, [sp, #16]
 800b9d6:	9307      	str	r3, [sp, #28]
 800b9d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9dc:	9002      	str	r0, [sp, #8]
 800b9de:	9006      	str	r0, [sp, #24]
 800b9e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b9e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b9e6:	ab21      	add	r3, sp, #132	; 0x84
 800b9e8:	a902      	add	r1, sp, #8
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	9301      	str	r3, [sp, #4]
 800b9ee:	f000 fa37 	bl	800be60 <_svfiprintf_r>
 800b9f2:	1c43      	adds	r3, r0, #1
 800b9f4:	bfbc      	itt	lt
 800b9f6:	238b      	movlt	r3, #139	; 0x8b
 800b9f8:	602b      	strlt	r3, [r5, #0]
 800b9fa:	2c00      	cmp	r4, #0
 800b9fc:	d0dd      	beq.n	800b9ba <sniprintf+0x16>
 800b9fe:	9b02      	ldr	r3, [sp, #8]
 800ba00:	2200      	movs	r2, #0
 800ba02:	701a      	strb	r2, [r3, #0]
 800ba04:	e7d9      	b.n	800b9ba <sniprintf+0x16>
 800ba06:	bf00      	nop
 800ba08:	20000030 	.word	0x20000030

0800ba0c <siprintf>:
 800ba0c:	b40e      	push	{r1, r2, r3}
 800ba0e:	b500      	push	{lr}
 800ba10:	b09c      	sub	sp, #112	; 0x70
 800ba12:	ab1d      	add	r3, sp, #116	; 0x74
 800ba14:	9002      	str	r0, [sp, #8]
 800ba16:	9006      	str	r0, [sp, #24]
 800ba18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba1c:	4809      	ldr	r0, [pc, #36]	; (800ba44 <siprintf+0x38>)
 800ba1e:	9107      	str	r1, [sp, #28]
 800ba20:	9104      	str	r1, [sp, #16]
 800ba22:	4909      	ldr	r1, [pc, #36]	; (800ba48 <siprintf+0x3c>)
 800ba24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba28:	9105      	str	r1, [sp, #20]
 800ba2a:	6800      	ldr	r0, [r0, #0]
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	a902      	add	r1, sp, #8
 800ba30:	f000 fa16 	bl	800be60 <_svfiprintf_r>
 800ba34:	9b02      	ldr	r3, [sp, #8]
 800ba36:	2200      	movs	r2, #0
 800ba38:	701a      	strb	r2, [r3, #0]
 800ba3a:	b01c      	add	sp, #112	; 0x70
 800ba3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba40:	b003      	add	sp, #12
 800ba42:	4770      	bx	lr
 800ba44:	20000030 	.word	0x20000030
 800ba48:	ffff0208 	.word	0xffff0208

0800ba4c <__sread>:
 800ba4c:	b510      	push	{r4, lr}
 800ba4e:	460c      	mov	r4, r1
 800ba50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba54:	f000 fb04 	bl	800c060 <_read_r>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	bfab      	itete	ge
 800ba5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ba60:	181b      	addge	r3, r3, r0
 800ba62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba66:	bfac      	ite	ge
 800ba68:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba6a:	81a3      	strhlt	r3, [r4, #12]
 800ba6c:	bd10      	pop	{r4, pc}

0800ba6e <__swrite>:
 800ba6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba72:	461f      	mov	r7, r3
 800ba74:	898b      	ldrh	r3, [r1, #12]
 800ba76:	05db      	lsls	r3, r3, #23
 800ba78:	4605      	mov	r5, r0
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	4616      	mov	r6, r2
 800ba7e:	d505      	bpl.n	800ba8c <__swrite+0x1e>
 800ba80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba84:	2302      	movs	r3, #2
 800ba86:	2200      	movs	r2, #0
 800ba88:	f000 f930 	bl	800bcec <_lseek_r>
 800ba8c:	89a3      	ldrh	r3, [r4, #12]
 800ba8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba96:	81a3      	strh	r3, [r4, #12]
 800ba98:	4632      	mov	r2, r6
 800ba9a:	463b      	mov	r3, r7
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baa2:	f000 b869 	b.w	800bb78 <_write_r>

0800baa6 <__sseek>:
 800baa6:	b510      	push	{r4, lr}
 800baa8:	460c      	mov	r4, r1
 800baaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baae:	f000 f91d 	bl	800bcec <_lseek_r>
 800bab2:	1c43      	adds	r3, r0, #1
 800bab4:	89a3      	ldrh	r3, [r4, #12]
 800bab6:	bf15      	itete	ne
 800bab8:	6560      	strne	r0, [r4, #84]	; 0x54
 800baba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800babe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bac2:	81a3      	strheq	r3, [r4, #12]
 800bac4:	bf18      	it	ne
 800bac6:	81a3      	strhne	r3, [r4, #12]
 800bac8:	bd10      	pop	{r4, pc}

0800baca <__sclose>:
 800baca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bace:	f000 b8db 	b.w	800bc88 <_close_r>
	...

0800bad4 <__swbuf_r>:
 800bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad6:	460e      	mov	r6, r1
 800bad8:	4614      	mov	r4, r2
 800bada:	4605      	mov	r5, r0
 800badc:	b118      	cbz	r0, 800bae6 <__swbuf_r+0x12>
 800bade:	6983      	ldr	r3, [r0, #24]
 800bae0:	b90b      	cbnz	r3, 800bae6 <__swbuf_r+0x12>
 800bae2:	f7ff f9d7 	bl	800ae94 <__sinit>
 800bae6:	4b21      	ldr	r3, [pc, #132]	; (800bb6c <__swbuf_r+0x98>)
 800bae8:	429c      	cmp	r4, r3
 800baea:	d12b      	bne.n	800bb44 <__swbuf_r+0x70>
 800baec:	686c      	ldr	r4, [r5, #4]
 800baee:	69a3      	ldr	r3, [r4, #24]
 800baf0:	60a3      	str	r3, [r4, #8]
 800baf2:	89a3      	ldrh	r3, [r4, #12]
 800baf4:	071a      	lsls	r2, r3, #28
 800baf6:	d52f      	bpl.n	800bb58 <__swbuf_r+0x84>
 800baf8:	6923      	ldr	r3, [r4, #16]
 800bafa:	b36b      	cbz	r3, 800bb58 <__swbuf_r+0x84>
 800bafc:	6923      	ldr	r3, [r4, #16]
 800bafe:	6820      	ldr	r0, [r4, #0]
 800bb00:	1ac0      	subs	r0, r0, r3
 800bb02:	6963      	ldr	r3, [r4, #20]
 800bb04:	b2f6      	uxtb	r6, r6
 800bb06:	4283      	cmp	r3, r0
 800bb08:	4637      	mov	r7, r6
 800bb0a:	dc04      	bgt.n	800bb16 <__swbuf_r+0x42>
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f7ff f91a 	bl	800ad48 <_fflush_r>
 800bb14:	bb30      	cbnz	r0, 800bb64 <__swbuf_r+0x90>
 800bb16:	68a3      	ldr	r3, [r4, #8]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	60a3      	str	r3, [r4, #8]
 800bb1c:	6823      	ldr	r3, [r4, #0]
 800bb1e:	1c5a      	adds	r2, r3, #1
 800bb20:	6022      	str	r2, [r4, #0]
 800bb22:	701e      	strb	r6, [r3, #0]
 800bb24:	6963      	ldr	r3, [r4, #20]
 800bb26:	3001      	adds	r0, #1
 800bb28:	4283      	cmp	r3, r0
 800bb2a:	d004      	beq.n	800bb36 <__swbuf_r+0x62>
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	07db      	lsls	r3, r3, #31
 800bb30:	d506      	bpl.n	800bb40 <__swbuf_r+0x6c>
 800bb32:	2e0a      	cmp	r6, #10
 800bb34:	d104      	bne.n	800bb40 <__swbuf_r+0x6c>
 800bb36:	4621      	mov	r1, r4
 800bb38:	4628      	mov	r0, r5
 800bb3a:	f7ff f905 	bl	800ad48 <_fflush_r>
 800bb3e:	b988      	cbnz	r0, 800bb64 <__swbuf_r+0x90>
 800bb40:	4638      	mov	r0, r7
 800bb42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb44:	4b0a      	ldr	r3, [pc, #40]	; (800bb70 <__swbuf_r+0x9c>)
 800bb46:	429c      	cmp	r4, r3
 800bb48:	d101      	bne.n	800bb4e <__swbuf_r+0x7a>
 800bb4a:	68ac      	ldr	r4, [r5, #8]
 800bb4c:	e7cf      	b.n	800baee <__swbuf_r+0x1a>
 800bb4e:	4b09      	ldr	r3, [pc, #36]	; (800bb74 <__swbuf_r+0xa0>)
 800bb50:	429c      	cmp	r4, r3
 800bb52:	bf08      	it	eq
 800bb54:	68ec      	ldreq	r4, [r5, #12]
 800bb56:	e7ca      	b.n	800baee <__swbuf_r+0x1a>
 800bb58:	4621      	mov	r1, r4
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	f000 f81e 	bl	800bb9c <__swsetup_r>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d0cb      	beq.n	800bafc <__swbuf_r+0x28>
 800bb64:	f04f 37ff 	mov.w	r7, #4294967295
 800bb68:	e7ea      	b.n	800bb40 <__swbuf_r+0x6c>
 800bb6a:	bf00      	nop
 800bb6c:	08015c88 	.word	0x08015c88
 800bb70:	08015ca8 	.word	0x08015ca8
 800bb74:	08015c68 	.word	0x08015c68

0800bb78 <_write_r>:
 800bb78:	b538      	push	{r3, r4, r5, lr}
 800bb7a:	4d07      	ldr	r5, [pc, #28]	; (800bb98 <_write_r+0x20>)
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	4608      	mov	r0, r1
 800bb80:	4611      	mov	r1, r2
 800bb82:	2200      	movs	r2, #0
 800bb84:	602a      	str	r2, [r5, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	f7f7 fb81 	bl	800328e <_write>
 800bb8c:	1c43      	adds	r3, r0, #1
 800bb8e:	d102      	bne.n	800bb96 <_write_r+0x1e>
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	b103      	cbz	r3, 800bb96 <_write_r+0x1e>
 800bb94:	6023      	str	r3, [r4, #0]
 800bb96:	bd38      	pop	{r3, r4, r5, pc}
 800bb98:	2000adb8 	.word	0x2000adb8

0800bb9c <__swsetup_r>:
 800bb9c:	4b32      	ldr	r3, [pc, #200]	; (800bc68 <__swsetup_r+0xcc>)
 800bb9e:	b570      	push	{r4, r5, r6, lr}
 800bba0:	681d      	ldr	r5, [r3, #0]
 800bba2:	4606      	mov	r6, r0
 800bba4:	460c      	mov	r4, r1
 800bba6:	b125      	cbz	r5, 800bbb2 <__swsetup_r+0x16>
 800bba8:	69ab      	ldr	r3, [r5, #24]
 800bbaa:	b913      	cbnz	r3, 800bbb2 <__swsetup_r+0x16>
 800bbac:	4628      	mov	r0, r5
 800bbae:	f7ff f971 	bl	800ae94 <__sinit>
 800bbb2:	4b2e      	ldr	r3, [pc, #184]	; (800bc6c <__swsetup_r+0xd0>)
 800bbb4:	429c      	cmp	r4, r3
 800bbb6:	d10f      	bne.n	800bbd8 <__swsetup_r+0x3c>
 800bbb8:	686c      	ldr	r4, [r5, #4]
 800bbba:	89a3      	ldrh	r3, [r4, #12]
 800bbbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbc0:	0719      	lsls	r1, r3, #28
 800bbc2:	d42c      	bmi.n	800bc1e <__swsetup_r+0x82>
 800bbc4:	06dd      	lsls	r5, r3, #27
 800bbc6:	d411      	bmi.n	800bbec <__swsetup_r+0x50>
 800bbc8:	2309      	movs	r3, #9
 800bbca:	6033      	str	r3, [r6, #0]
 800bbcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbd0:	81a3      	strh	r3, [r4, #12]
 800bbd2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd6:	e03e      	b.n	800bc56 <__swsetup_r+0xba>
 800bbd8:	4b25      	ldr	r3, [pc, #148]	; (800bc70 <__swsetup_r+0xd4>)
 800bbda:	429c      	cmp	r4, r3
 800bbdc:	d101      	bne.n	800bbe2 <__swsetup_r+0x46>
 800bbde:	68ac      	ldr	r4, [r5, #8]
 800bbe0:	e7eb      	b.n	800bbba <__swsetup_r+0x1e>
 800bbe2:	4b24      	ldr	r3, [pc, #144]	; (800bc74 <__swsetup_r+0xd8>)
 800bbe4:	429c      	cmp	r4, r3
 800bbe6:	bf08      	it	eq
 800bbe8:	68ec      	ldreq	r4, [r5, #12]
 800bbea:	e7e6      	b.n	800bbba <__swsetup_r+0x1e>
 800bbec:	0758      	lsls	r0, r3, #29
 800bbee:	d512      	bpl.n	800bc16 <__swsetup_r+0x7a>
 800bbf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbf2:	b141      	cbz	r1, 800bc06 <__swsetup_r+0x6a>
 800bbf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbf8:	4299      	cmp	r1, r3
 800bbfa:	d002      	beq.n	800bc02 <__swsetup_r+0x66>
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f7ff fa9b 	bl	800b138 <_free_r>
 800bc02:	2300      	movs	r3, #0
 800bc04:	6363      	str	r3, [r4, #52]	; 0x34
 800bc06:	89a3      	ldrh	r3, [r4, #12]
 800bc08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc0c:	81a3      	strh	r3, [r4, #12]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	6063      	str	r3, [r4, #4]
 800bc12:	6923      	ldr	r3, [r4, #16]
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	f043 0308 	orr.w	r3, r3, #8
 800bc1c:	81a3      	strh	r3, [r4, #12]
 800bc1e:	6923      	ldr	r3, [r4, #16]
 800bc20:	b94b      	cbnz	r3, 800bc36 <__swsetup_r+0x9a>
 800bc22:	89a3      	ldrh	r3, [r4, #12]
 800bc24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc2c:	d003      	beq.n	800bc36 <__swsetup_r+0x9a>
 800bc2e:	4621      	mov	r1, r4
 800bc30:	4630      	mov	r0, r6
 800bc32:	f7ff fa2b 	bl	800b08c <__smakebuf_r>
 800bc36:	89a0      	ldrh	r0, [r4, #12]
 800bc38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc3c:	f010 0301 	ands.w	r3, r0, #1
 800bc40:	d00a      	beq.n	800bc58 <__swsetup_r+0xbc>
 800bc42:	2300      	movs	r3, #0
 800bc44:	60a3      	str	r3, [r4, #8]
 800bc46:	6963      	ldr	r3, [r4, #20]
 800bc48:	425b      	negs	r3, r3
 800bc4a:	61a3      	str	r3, [r4, #24]
 800bc4c:	6923      	ldr	r3, [r4, #16]
 800bc4e:	b943      	cbnz	r3, 800bc62 <__swsetup_r+0xc6>
 800bc50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc54:	d1ba      	bne.n	800bbcc <__swsetup_r+0x30>
 800bc56:	bd70      	pop	{r4, r5, r6, pc}
 800bc58:	0781      	lsls	r1, r0, #30
 800bc5a:	bf58      	it	pl
 800bc5c:	6963      	ldrpl	r3, [r4, #20]
 800bc5e:	60a3      	str	r3, [r4, #8]
 800bc60:	e7f4      	b.n	800bc4c <__swsetup_r+0xb0>
 800bc62:	2000      	movs	r0, #0
 800bc64:	e7f7      	b.n	800bc56 <__swsetup_r+0xba>
 800bc66:	bf00      	nop
 800bc68:	20000030 	.word	0x20000030
 800bc6c:	08015c88 	.word	0x08015c88
 800bc70:	08015ca8 	.word	0x08015ca8
 800bc74:	08015c68 	.word	0x08015c68

0800bc78 <abort>:
 800bc78:	b508      	push	{r3, lr}
 800bc7a:	2006      	movs	r0, #6
 800bc7c:	f000 fa2a 	bl	800c0d4 <raise>
 800bc80:	2001      	movs	r0, #1
 800bc82:	f7f7 fadd 	bl	8003240 <_exit>
	...

0800bc88 <_close_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d06      	ldr	r5, [pc, #24]	; (800bca4 <_close_r+0x1c>)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4604      	mov	r4, r0
 800bc90:	4608      	mov	r0, r1
 800bc92:	602b      	str	r3, [r5, #0]
 800bc94:	f7f7 fb17 	bl	80032c6 <_close>
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	d102      	bne.n	800bca2 <_close_r+0x1a>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	b103      	cbz	r3, 800bca2 <_close_r+0x1a>
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
 800bca4:	2000adb8 	.word	0x2000adb8

0800bca8 <_fstat_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d07      	ldr	r5, [pc, #28]	; (800bcc8 <_fstat_r+0x20>)
 800bcac:	2300      	movs	r3, #0
 800bcae:	4604      	mov	r4, r0
 800bcb0:	4608      	mov	r0, r1
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	602b      	str	r3, [r5, #0]
 800bcb6:	f7f7 fb12 	bl	80032de <_fstat>
 800bcba:	1c43      	adds	r3, r0, #1
 800bcbc:	d102      	bne.n	800bcc4 <_fstat_r+0x1c>
 800bcbe:	682b      	ldr	r3, [r5, #0]
 800bcc0:	b103      	cbz	r3, 800bcc4 <_fstat_r+0x1c>
 800bcc2:	6023      	str	r3, [r4, #0]
 800bcc4:	bd38      	pop	{r3, r4, r5, pc}
 800bcc6:	bf00      	nop
 800bcc8:	2000adb8 	.word	0x2000adb8

0800bccc <_isatty_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d06      	ldr	r5, [pc, #24]	; (800bce8 <_isatty_r+0x1c>)
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	4608      	mov	r0, r1
 800bcd6:	602b      	str	r3, [r5, #0]
 800bcd8:	f7f7 fb11 	bl	80032fe <_isatty>
 800bcdc:	1c43      	adds	r3, r0, #1
 800bcde:	d102      	bne.n	800bce6 <_isatty_r+0x1a>
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	b103      	cbz	r3, 800bce6 <_isatty_r+0x1a>
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	bd38      	pop	{r3, r4, r5, pc}
 800bce8:	2000adb8 	.word	0x2000adb8

0800bcec <_lseek_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	4d07      	ldr	r5, [pc, #28]	; (800bd0c <_lseek_r+0x20>)
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	4608      	mov	r0, r1
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	602a      	str	r2, [r5, #0]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	f7f7 fb0a 	bl	8003314 <_lseek>
 800bd00:	1c43      	adds	r3, r0, #1
 800bd02:	d102      	bne.n	800bd0a <_lseek_r+0x1e>
 800bd04:	682b      	ldr	r3, [r5, #0]
 800bd06:	b103      	cbz	r3, 800bd0a <_lseek_r+0x1e>
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	bd38      	pop	{r3, r4, r5, pc}
 800bd0c:	2000adb8 	.word	0x2000adb8

0800bd10 <memmove>:
 800bd10:	4288      	cmp	r0, r1
 800bd12:	b510      	push	{r4, lr}
 800bd14:	eb01 0402 	add.w	r4, r1, r2
 800bd18:	d902      	bls.n	800bd20 <memmove+0x10>
 800bd1a:	4284      	cmp	r4, r0
 800bd1c:	4623      	mov	r3, r4
 800bd1e:	d807      	bhi.n	800bd30 <memmove+0x20>
 800bd20:	1e43      	subs	r3, r0, #1
 800bd22:	42a1      	cmp	r1, r4
 800bd24:	d008      	beq.n	800bd38 <memmove+0x28>
 800bd26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd2e:	e7f8      	b.n	800bd22 <memmove+0x12>
 800bd30:	4402      	add	r2, r0
 800bd32:	4601      	mov	r1, r0
 800bd34:	428a      	cmp	r2, r1
 800bd36:	d100      	bne.n	800bd3a <memmove+0x2a>
 800bd38:	bd10      	pop	{r4, pc}
 800bd3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd42:	e7f7      	b.n	800bd34 <memmove+0x24>

0800bd44 <__malloc_lock>:
 800bd44:	4801      	ldr	r0, [pc, #4]	; (800bd4c <__malloc_lock+0x8>)
 800bd46:	f7ff b97a 	b.w	800b03e <__retarget_lock_acquire_recursive>
 800bd4a:	bf00      	nop
 800bd4c:	2000adb0 	.word	0x2000adb0

0800bd50 <__malloc_unlock>:
 800bd50:	4801      	ldr	r0, [pc, #4]	; (800bd58 <__malloc_unlock+0x8>)
 800bd52:	f7ff b975 	b.w	800b040 <__retarget_lock_release_recursive>
 800bd56:	bf00      	nop
 800bd58:	2000adb0 	.word	0x2000adb0

0800bd5c <_realloc_r>:
 800bd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5e:	4607      	mov	r7, r0
 800bd60:	4614      	mov	r4, r2
 800bd62:	460e      	mov	r6, r1
 800bd64:	b921      	cbnz	r1, 800bd70 <_realloc_r+0x14>
 800bd66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	f7ff ba34 	b.w	800b1d8 <_malloc_r>
 800bd70:	b922      	cbnz	r2, 800bd7c <_realloc_r+0x20>
 800bd72:	f7ff f9e1 	bl	800b138 <_free_r>
 800bd76:	4625      	mov	r5, r4
 800bd78:	4628      	mov	r0, r5
 800bd7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd7c:	f000 f9c6 	bl	800c10c <_malloc_usable_size_r>
 800bd80:	42a0      	cmp	r0, r4
 800bd82:	d20f      	bcs.n	800bda4 <_realloc_r+0x48>
 800bd84:	4621      	mov	r1, r4
 800bd86:	4638      	mov	r0, r7
 800bd88:	f7ff fa26 	bl	800b1d8 <_malloc_r>
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d0f2      	beq.n	800bd78 <_realloc_r+0x1c>
 800bd92:	4631      	mov	r1, r6
 800bd94:	4622      	mov	r2, r4
 800bd96:	f7ff f9b9 	bl	800b10c <memcpy>
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	4638      	mov	r0, r7
 800bd9e:	f7ff f9cb 	bl	800b138 <_free_r>
 800bda2:	e7e9      	b.n	800bd78 <_realloc_r+0x1c>
 800bda4:	4635      	mov	r5, r6
 800bda6:	e7e7      	b.n	800bd78 <_realloc_r+0x1c>

0800bda8 <__ssputs_r>:
 800bda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdac:	688e      	ldr	r6, [r1, #8]
 800bdae:	429e      	cmp	r6, r3
 800bdb0:	4682      	mov	sl, r0
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	4690      	mov	r8, r2
 800bdb6:	461f      	mov	r7, r3
 800bdb8:	d838      	bhi.n	800be2c <__ssputs_r+0x84>
 800bdba:	898a      	ldrh	r2, [r1, #12]
 800bdbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdc0:	d032      	beq.n	800be28 <__ssputs_r+0x80>
 800bdc2:	6825      	ldr	r5, [r4, #0]
 800bdc4:	6909      	ldr	r1, [r1, #16]
 800bdc6:	eba5 0901 	sub.w	r9, r5, r1
 800bdca:	6965      	ldr	r5, [r4, #20]
 800bdcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	444b      	add	r3, r9
 800bdd8:	106d      	asrs	r5, r5, #1
 800bdda:	429d      	cmp	r5, r3
 800bddc:	bf38      	it	cc
 800bdde:	461d      	movcc	r5, r3
 800bde0:	0553      	lsls	r3, r2, #21
 800bde2:	d531      	bpl.n	800be48 <__ssputs_r+0xa0>
 800bde4:	4629      	mov	r1, r5
 800bde6:	f7ff f9f7 	bl	800b1d8 <_malloc_r>
 800bdea:	4606      	mov	r6, r0
 800bdec:	b950      	cbnz	r0, 800be04 <__ssputs_r+0x5c>
 800bdee:	230c      	movs	r3, #12
 800bdf0:	f8ca 3000 	str.w	r3, [sl]
 800bdf4:	89a3      	ldrh	r3, [r4, #12]
 800bdf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdfa:	81a3      	strh	r3, [r4, #12]
 800bdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800be00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be04:	6921      	ldr	r1, [r4, #16]
 800be06:	464a      	mov	r2, r9
 800be08:	f7ff f980 	bl	800b10c <memcpy>
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be16:	81a3      	strh	r3, [r4, #12]
 800be18:	6126      	str	r6, [r4, #16]
 800be1a:	6165      	str	r5, [r4, #20]
 800be1c:	444e      	add	r6, r9
 800be1e:	eba5 0509 	sub.w	r5, r5, r9
 800be22:	6026      	str	r6, [r4, #0]
 800be24:	60a5      	str	r5, [r4, #8]
 800be26:	463e      	mov	r6, r7
 800be28:	42be      	cmp	r6, r7
 800be2a:	d900      	bls.n	800be2e <__ssputs_r+0x86>
 800be2c:	463e      	mov	r6, r7
 800be2e:	4632      	mov	r2, r6
 800be30:	6820      	ldr	r0, [r4, #0]
 800be32:	4641      	mov	r1, r8
 800be34:	f7ff ff6c 	bl	800bd10 <memmove>
 800be38:	68a3      	ldr	r3, [r4, #8]
 800be3a:	6822      	ldr	r2, [r4, #0]
 800be3c:	1b9b      	subs	r3, r3, r6
 800be3e:	4432      	add	r2, r6
 800be40:	60a3      	str	r3, [r4, #8]
 800be42:	6022      	str	r2, [r4, #0]
 800be44:	2000      	movs	r0, #0
 800be46:	e7db      	b.n	800be00 <__ssputs_r+0x58>
 800be48:	462a      	mov	r2, r5
 800be4a:	f7ff ff87 	bl	800bd5c <_realloc_r>
 800be4e:	4606      	mov	r6, r0
 800be50:	2800      	cmp	r0, #0
 800be52:	d1e1      	bne.n	800be18 <__ssputs_r+0x70>
 800be54:	6921      	ldr	r1, [r4, #16]
 800be56:	4650      	mov	r0, sl
 800be58:	f7ff f96e 	bl	800b138 <_free_r>
 800be5c:	e7c7      	b.n	800bdee <__ssputs_r+0x46>
	...

0800be60 <_svfiprintf_r>:
 800be60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be64:	4698      	mov	r8, r3
 800be66:	898b      	ldrh	r3, [r1, #12]
 800be68:	061b      	lsls	r3, r3, #24
 800be6a:	b09d      	sub	sp, #116	; 0x74
 800be6c:	4607      	mov	r7, r0
 800be6e:	460d      	mov	r5, r1
 800be70:	4614      	mov	r4, r2
 800be72:	d50e      	bpl.n	800be92 <_svfiprintf_r+0x32>
 800be74:	690b      	ldr	r3, [r1, #16]
 800be76:	b963      	cbnz	r3, 800be92 <_svfiprintf_r+0x32>
 800be78:	2140      	movs	r1, #64	; 0x40
 800be7a:	f7ff f9ad 	bl	800b1d8 <_malloc_r>
 800be7e:	6028      	str	r0, [r5, #0]
 800be80:	6128      	str	r0, [r5, #16]
 800be82:	b920      	cbnz	r0, 800be8e <_svfiprintf_r+0x2e>
 800be84:	230c      	movs	r3, #12
 800be86:	603b      	str	r3, [r7, #0]
 800be88:	f04f 30ff 	mov.w	r0, #4294967295
 800be8c:	e0d1      	b.n	800c032 <_svfiprintf_r+0x1d2>
 800be8e:	2340      	movs	r3, #64	; 0x40
 800be90:	616b      	str	r3, [r5, #20]
 800be92:	2300      	movs	r3, #0
 800be94:	9309      	str	r3, [sp, #36]	; 0x24
 800be96:	2320      	movs	r3, #32
 800be98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bea0:	2330      	movs	r3, #48	; 0x30
 800bea2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c04c <_svfiprintf_r+0x1ec>
 800bea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800beaa:	f04f 0901 	mov.w	r9, #1
 800beae:	4623      	mov	r3, r4
 800beb0:	469a      	mov	sl, r3
 800beb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beb6:	b10a      	cbz	r2, 800bebc <_svfiprintf_r+0x5c>
 800beb8:	2a25      	cmp	r2, #37	; 0x25
 800beba:	d1f9      	bne.n	800beb0 <_svfiprintf_r+0x50>
 800bebc:	ebba 0b04 	subs.w	fp, sl, r4
 800bec0:	d00b      	beq.n	800beda <_svfiprintf_r+0x7a>
 800bec2:	465b      	mov	r3, fp
 800bec4:	4622      	mov	r2, r4
 800bec6:	4629      	mov	r1, r5
 800bec8:	4638      	mov	r0, r7
 800beca:	f7ff ff6d 	bl	800bda8 <__ssputs_r>
 800bece:	3001      	adds	r0, #1
 800bed0:	f000 80aa 	beq.w	800c028 <_svfiprintf_r+0x1c8>
 800bed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bed6:	445a      	add	r2, fp
 800bed8:	9209      	str	r2, [sp, #36]	; 0x24
 800beda:	f89a 3000 	ldrb.w	r3, [sl]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f000 80a2 	beq.w	800c028 <_svfiprintf_r+0x1c8>
 800bee4:	2300      	movs	r3, #0
 800bee6:	f04f 32ff 	mov.w	r2, #4294967295
 800beea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beee:	f10a 0a01 	add.w	sl, sl, #1
 800bef2:	9304      	str	r3, [sp, #16]
 800bef4:	9307      	str	r3, [sp, #28]
 800bef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800befa:	931a      	str	r3, [sp, #104]	; 0x68
 800befc:	4654      	mov	r4, sl
 800befe:	2205      	movs	r2, #5
 800bf00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf04:	4851      	ldr	r0, [pc, #324]	; (800c04c <_svfiprintf_r+0x1ec>)
 800bf06:	f7f4 f96b 	bl	80001e0 <memchr>
 800bf0a:	9a04      	ldr	r2, [sp, #16]
 800bf0c:	b9d8      	cbnz	r0, 800bf46 <_svfiprintf_r+0xe6>
 800bf0e:	06d0      	lsls	r0, r2, #27
 800bf10:	bf44      	itt	mi
 800bf12:	2320      	movmi	r3, #32
 800bf14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf18:	0711      	lsls	r1, r2, #28
 800bf1a:	bf44      	itt	mi
 800bf1c:	232b      	movmi	r3, #43	; 0x2b
 800bf1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf22:	f89a 3000 	ldrb.w	r3, [sl]
 800bf26:	2b2a      	cmp	r3, #42	; 0x2a
 800bf28:	d015      	beq.n	800bf56 <_svfiprintf_r+0xf6>
 800bf2a:	9a07      	ldr	r2, [sp, #28]
 800bf2c:	4654      	mov	r4, sl
 800bf2e:	2000      	movs	r0, #0
 800bf30:	f04f 0c0a 	mov.w	ip, #10
 800bf34:	4621      	mov	r1, r4
 800bf36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf3a:	3b30      	subs	r3, #48	; 0x30
 800bf3c:	2b09      	cmp	r3, #9
 800bf3e:	d94e      	bls.n	800bfde <_svfiprintf_r+0x17e>
 800bf40:	b1b0      	cbz	r0, 800bf70 <_svfiprintf_r+0x110>
 800bf42:	9207      	str	r2, [sp, #28]
 800bf44:	e014      	b.n	800bf70 <_svfiprintf_r+0x110>
 800bf46:	eba0 0308 	sub.w	r3, r0, r8
 800bf4a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	9304      	str	r3, [sp, #16]
 800bf52:	46a2      	mov	sl, r4
 800bf54:	e7d2      	b.n	800befc <_svfiprintf_r+0x9c>
 800bf56:	9b03      	ldr	r3, [sp, #12]
 800bf58:	1d19      	adds	r1, r3, #4
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	9103      	str	r1, [sp, #12]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	bfbb      	ittet	lt
 800bf62:	425b      	neglt	r3, r3
 800bf64:	f042 0202 	orrlt.w	r2, r2, #2
 800bf68:	9307      	strge	r3, [sp, #28]
 800bf6a:	9307      	strlt	r3, [sp, #28]
 800bf6c:	bfb8      	it	lt
 800bf6e:	9204      	strlt	r2, [sp, #16]
 800bf70:	7823      	ldrb	r3, [r4, #0]
 800bf72:	2b2e      	cmp	r3, #46	; 0x2e
 800bf74:	d10c      	bne.n	800bf90 <_svfiprintf_r+0x130>
 800bf76:	7863      	ldrb	r3, [r4, #1]
 800bf78:	2b2a      	cmp	r3, #42	; 0x2a
 800bf7a:	d135      	bne.n	800bfe8 <_svfiprintf_r+0x188>
 800bf7c:	9b03      	ldr	r3, [sp, #12]
 800bf7e:	1d1a      	adds	r2, r3, #4
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	9203      	str	r2, [sp, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	bfb8      	it	lt
 800bf88:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf8c:	3402      	adds	r4, #2
 800bf8e:	9305      	str	r3, [sp, #20]
 800bf90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c05c <_svfiprintf_r+0x1fc>
 800bf94:	7821      	ldrb	r1, [r4, #0]
 800bf96:	2203      	movs	r2, #3
 800bf98:	4650      	mov	r0, sl
 800bf9a:	f7f4 f921 	bl	80001e0 <memchr>
 800bf9e:	b140      	cbz	r0, 800bfb2 <_svfiprintf_r+0x152>
 800bfa0:	2340      	movs	r3, #64	; 0x40
 800bfa2:	eba0 000a 	sub.w	r0, r0, sl
 800bfa6:	fa03 f000 	lsl.w	r0, r3, r0
 800bfaa:	9b04      	ldr	r3, [sp, #16]
 800bfac:	4303      	orrs	r3, r0
 800bfae:	3401      	adds	r4, #1
 800bfb0:	9304      	str	r3, [sp, #16]
 800bfb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb6:	4826      	ldr	r0, [pc, #152]	; (800c050 <_svfiprintf_r+0x1f0>)
 800bfb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfbc:	2206      	movs	r2, #6
 800bfbe:	f7f4 f90f 	bl	80001e0 <memchr>
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	d038      	beq.n	800c038 <_svfiprintf_r+0x1d8>
 800bfc6:	4b23      	ldr	r3, [pc, #140]	; (800c054 <_svfiprintf_r+0x1f4>)
 800bfc8:	bb1b      	cbnz	r3, 800c012 <_svfiprintf_r+0x1b2>
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	3307      	adds	r3, #7
 800bfce:	f023 0307 	bic.w	r3, r3, #7
 800bfd2:	3308      	adds	r3, #8
 800bfd4:	9303      	str	r3, [sp, #12]
 800bfd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd8:	4433      	add	r3, r6
 800bfda:	9309      	str	r3, [sp, #36]	; 0x24
 800bfdc:	e767      	b.n	800beae <_svfiprintf_r+0x4e>
 800bfde:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	2001      	movs	r0, #1
 800bfe6:	e7a5      	b.n	800bf34 <_svfiprintf_r+0xd4>
 800bfe8:	2300      	movs	r3, #0
 800bfea:	3401      	adds	r4, #1
 800bfec:	9305      	str	r3, [sp, #20]
 800bfee:	4619      	mov	r1, r3
 800bff0:	f04f 0c0a 	mov.w	ip, #10
 800bff4:	4620      	mov	r0, r4
 800bff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bffa:	3a30      	subs	r2, #48	; 0x30
 800bffc:	2a09      	cmp	r2, #9
 800bffe:	d903      	bls.n	800c008 <_svfiprintf_r+0x1a8>
 800c000:	2b00      	cmp	r3, #0
 800c002:	d0c5      	beq.n	800bf90 <_svfiprintf_r+0x130>
 800c004:	9105      	str	r1, [sp, #20]
 800c006:	e7c3      	b.n	800bf90 <_svfiprintf_r+0x130>
 800c008:	fb0c 2101 	mla	r1, ip, r1, r2
 800c00c:	4604      	mov	r4, r0
 800c00e:	2301      	movs	r3, #1
 800c010:	e7f0      	b.n	800bff4 <_svfiprintf_r+0x194>
 800c012:	ab03      	add	r3, sp, #12
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	462a      	mov	r2, r5
 800c018:	4b0f      	ldr	r3, [pc, #60]	; (800c058 <_svfiprintf_r+0x1f8>)
 800c01a:	a904      	add	r1, sp, #16
 800c01c:	4638      	mov	r0, r7
 800c01e:	f3af 8000 	nop.w
 800c022:	1c42      	adds	r2, r0, #1
 800c024:	4606      	mov	r6, r0
 800c026:	d1d6      	bne.n	800bfd6 <_svfiprintf_r+0x176>
 800c028:	89ab      	ldrh	r3, [r5, #12]
 800c02a:	065b      	lsls	r3, r3, #25
 800c02c:	f53f af2c 	bmi.w	800be88 <_svfiprintf_r+0x28>
 800c030:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c032:	b01d      	add	sp, #116	; 0x74
 800c034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c038:	ab03      	add	r3, sp, #12
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	462a      	mov	r2, r5
 800c03e:	4b06      	ldr	r3, [pc, #24]	; (800c058 <_svfiprintf_r+0x1f8>)
 800c040:	a904      	add	r1, sp, #16
 800c042:	4638      	mov	r0, r7
 800c044:	f7ff faea 	bl	800b61c <_printf_i>
 800c048:	e7eb      	b.n	800c022 <_svfiprintf_r+0x1c2>
 800c04a:	bf00      	nop
 800c04c:	08015ccc 	.word	0x08015ccc
 800c050:	08015cd6 	.word	0x08015cd6
 800c054:	00000000 	.word	0x00000000
 800c058:	0800bda9 	.word	0x0800bda9
 800c05c:	08015cd2 	.word	0x08015cd2

0800c060 <_read_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4d07      	ldr	r5, [pc, #28]	; (800c080 <_read_r+0x20>)
 800c064:	4604      	mov	r4, r0
 800c066:	4608      	mov	r0, r1
 800c068:	4611      	mov	r1, r2
 800c06a:	2200      	movs	r2, #0
 800c06c:	602a      	str	r2, [r5, #0]
 800c06e:	461a      	mov	r2, r3
 800c070:	f7f7 f8f0 	bl	8003254 <_read>
 800c074:	1c43      	adds	r3, r0, #1
 800c076:	d102      	bne.n	800c07e <_read_r+0x1e>
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	b103      	cbz	r3, 800c07e <_read_r+0x1e>
 800c07c:	6023      	str	r3, [r4, #0]
 800c07e:	bd38      	pop	{r3, r4, r5, pc}
 800c080:	2000adb8 	.word	0x2000adb8

0800c084 <_raise_r>:
 800c084:	291f      	cmp	r1, #31
 800c086:	b538      	push	{r3, r4, r5, lr}
 800c088:	4604      	mov	r4, r0
 800c08a:	460d      	mov	r5, r1
 800c08c:	d904      	bls.n	800c098 <_raise_r+0x14>
 800c08e:	2316      	movs	r3, #22
 800c090:	6003      	str	r3, [r0, #0]
 800c092:	f04f 30ff 	mov.w	r0, #4294967295
 800c096:	bd38      	pop	{r3, r4, r5, pc}
 800c098:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c09a:	b112      	cbz	r2, 800c0a2 <_raise_r+0x1e>
 800c09c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0a0:	b94b      	cbnz	r3, 800c0b6 <_raise_r+0x32>
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f000 f830 	bl	800c108 <_getpid_r>
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	4601      	mov	r1, r0
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0b2:	f000 b817 	b.w	800c0e4 <_kill_r>
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d00a      	beq.n	800c0d0 <_raise_r+0x4c>
 800c0ba:	1c59      	adds	r1, r3, #1
 800c0bc:	d103      	bne.n	800c0c6 <_raise_r+0x42>
 800c0be:	2316      	movs	r3, #22
 800c0c0:	6003      	str	r3, [r0, #0]
 800c0c2:	2001      	movs	r0, #1
 800c0c4:	e7e7      	b.n	800c096 <_raise_r+0x12>
 800c0c6:	2400      	movs	r4, #0
 800c0c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	4798      	blx	r3
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	e7e0      	b.n	800c096 <_raise_r+0x12>

0800c0d4 <raise>:
 800c0d4:	4b02      	ldr	r3, [pc, #8]	; (800c0e0 <raise+0xc>)
 800c0d6:	4601      	mov	r1, r0
 800c0d8:	6818      	ldr	r0, [r3, #0]
 800c0da:	f7ff bfd3 	b.w	800c084 <_raise_r>
 800c0de:	bf00      	nop
 800c0e0:	20000030 	.word	0x20000030

0800c0e4 <_kill_r>:
 800c0e4:	b538      	push	{r3, r4, r5, lr}
 800c0e6:	4d07      	ldr	r5, [pc, #28]	; (800c104 <_kill_r+0x20>)
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	4608      	mov	r0, r1
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	602b      	str	r3, [r5, #0]
 800c0f2:	f7f7 f895 	bl	8003220 <_kill>
 800c0f6:	1c43      	adds	r3, r0, #1
 800c0f8:	d102      	bne.n	800c100 <_kill_r+0x1c>
 800c0fa:	682b      	ldr	r3, [r5, #0]
 800c0fc:	b103      	cbz	r3, 800c100 <_kill_r+0x1c>
 800c0fe:	6023      	str	r3, [r4, #0]
 800c100:	bd38      	pop	{r3, r4, r5, pc}
 800c102:	bf00      	nop
 800c104:	2000adb8 	.word	0x2000adb8

0800c108 <_getpid_r>:
 800c108:	f7f7 b882 	b.w	8003210 <_getpid>

0800c10c <_malloc_usable_size_r>:
 800c10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c110:	1f18      	subs	r0, r3, #4
 800c112:	2b00      	cmp	r3, #0
 800c114:	bfbc      	itt	lt
 800c116:	580b      	ldrlt	r3, [r1, r0]
 800c118:	18c0      	addlt	r0, r0, r3
 800c11a:	4770      	bx	lr

0800c11c <_init>:
 800c11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11e:	bf00      	nop
 800c120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c122:	bc08      	pop	{r3}
 800c124:	469e      	mov	lr, r3
 800c126:	4770      	bx	lr

0800c128 <_fini>:
 800c128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12a:	bf00      	nop
 800c12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c12e:	bc08      	pop	{r3}
 800c130:	469e      	mov	lr, r3
 800c132:	4770      	bx	lr

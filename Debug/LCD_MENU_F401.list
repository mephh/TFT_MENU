
LCD_MENU_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009bbc  0800c58c  0800c58c  0001c58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016148  08016148  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08016148  08016148  00026148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016150  08016150  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016150  08016150  00026150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016154  08016154  00026154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08016158  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad24  20000094  080161ec  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  2000adb8  080161ec  0003adb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025c33  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051fd  00000000  00000000  00055cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae8  00000000  00000000  0005aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b8  00000000  00000000  0005c9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0d8  00000000  00000000  0005e298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026133  00000000  00000000  0007c370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a82ee  00000000  00000000  000a24a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b28  00000000  00000000  0014a7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c574 	.word	0x0800c574

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	0800c574 	.word	0x0800c574

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96e 	b.w	8000d60 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468c      	mov	ip, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 8083 	bne.w	8000bb2 <__udivmoddi4+0x116>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d947      	bls.n	8000b42 <__udivmoddi4+0xa6>
 8000ab2:	fab2 f282 	clz	r2, r2
 8000ab6:	b142      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	f1c2 0020 	rsb	r0, r2, #32
 8000abc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	4097      	lsls	r7, r2
 8000ac4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ad4:	fa1f fe87 	uxth.w	lr, r7
 8000ad8:	fb08 c116 	mls	r1, r8, r6, ip
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aee:	f080 8119 	bcs.w	8000d24 <__udivmoddi4+0x288>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8116 	bls.w	8000d24 <__udivmoddi4+0x288>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	443b      	add	r3, r7
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3310 	mls	r3, r8, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	193c      	adds	r4, r7, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8105 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	f240 8102 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000b24:	3802      	subs	r0, #2
 8000b26:	443c      	add	r4, r7
 8000b28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b2c:	eba4 040e 	sub.w	r4, r4, lr
 8000b30:	2600      	movs	r6, #0
 8000b32:	b11d      	cbz	r5, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c5 4300 	strd	r4, r3, [r5]
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	b902      	cbnz	r2, 8000b46 <__udivmoddi4+0xaa>
 8000b44:	deff      	udf	#255	; 0xff
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d150      	bne.n	8000bf0 <__udivmoddi4+0x154>
 8000b4e:	1bcb      	subs	r3, r1, r7
 8000b50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	2601      	movs	r6, #1
 8000b5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b5e:	0c21      	lsrs	r1, r4, #16
 8000b60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b68:	fb08 f30c 	mul.w	r3, r8, ip
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000b70:	1879      	adds	r1, r7, r1
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0xe2>
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	f200 80e9 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1ac9      	subs	r1, r1, r3
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x10c>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x10a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80d9 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e7bf      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0x12e>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	f000 80b1 	beq.w	8000d1e <__udivmoddi4+0x282>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f683 	clz	r6, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d14a      	bne.n	8000c68 <__udivmoddi4+0x1cc>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0x140>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80b8 	bhi.w	8000d4c <__udivmoddi4+0x2b0>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0103 	sbc.w	r1, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	468c      	mov	ip, r1
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0a8      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000bea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bee:	e7a5      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bf8:	4097      	lsls	r7, r2
 8000bfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000bfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c02:	40d9      	lsrs	r1, r3
 8000c04:	4330      	orrs	r0, r6
 8000c06:	0c03      	lsrs	r3, r0, #16
 8000c08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c0c:	fa1f f887 	uxth.w	r8, r7
 8000c10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb06 f108 	mul.w	r1, r6, r8
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x19c>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c2a:	f080 808d 	bcs.w	8000d48 <__udivmoddi4+0x2ac>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 808a 	bls.w	8000d48 <__udivmoddi4+0x2ac>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b281      	uxth	r1, r0
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c48:	fb00 f308 	mul.w	r3, r0, r8
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x1c4>
 8000c50:	1879      	adds	r1, r7, r1
 8000c52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c56:	d273      	bcs.n	8000d40 <__udivmoddi4+0x2a4>
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d971      	bls.n	8000d40 <__udivmoddi4+0x2a4>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4439      	add	r1, r7
 8000c60:	1acb      	subs	r3, r1, r3
 8000c62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c66:	e778      	b.n	8000b5a <__udivmoddi4+0xbe>
 8000c68:	f1c6 0c20 	rsb	ip, r6, #32
 8000c6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c74:	431c      	orrs	r4, r3
 8000c76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c86:	431f      	orrs	r7, r3
 8000c88:	0c3b      	lsrs	r3, r7, #16
 8000c8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8e:	fa1f f884 	uxth.w	r8, r4
 8000c92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c9e:	458a      	cmp	sl, r1
 8000ca0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ca4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x220>
 8000caa:	1861      	adds	r1, r4, r1
 8000cac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cb0:	d248      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb2:	458a      	cmp	sl, r1
 8000cb4:	d946      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4421      	add	r1, r4
 8000cbc:	eba1 010a 	sub.w	r1, r1, sl
 8000cc0:	b2bf      	uxth	r7, r7
 8000cc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cce:	fb00 f808 	mul.w	r8, r0, r8
 8000cd2:	45b8      	cmp	r8, r7
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x24a>
 8000cd6:	19e7      	adds	r7, r4, r7
 8000cd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cdc:	d22e      	bcs.n	8000d3c <__udivmoddi4+0x2a0>
 8000cde:	45b8      	cmp	r8, r7
 8000ce0:	d92c      	bls.n	8000d3c <__udivmoddi4+0x2a0>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4427      	add	r7, r4
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	eba7 0708 	sub.w	r7, r7, r8
 8000cee:	fba0 8902 	umull	r8, r9, r0, r2
 8000cf2:	454f      	cmp	r7, r9
 8000cf4:	46c6      	mov	lr, r8
 8000cf6:	4649      	mov	r1, r9
 8000cf8:	d31a      	bcc.n	8000d30 <__udivmoddi4+0x294>
 8000cfa:	d017      	beq.n	8000d2c <__udivmoddi4+0x290>
 8000cfc:	b15d      	cbz	r5, 8000d16 <__udivmoddi4+0x27a>
 8000cfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000d02:	eb67 0701 	sbc.w	r7, r7, r1
 8000d06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d0a:	40f2      	lsrs	r2, r6
 8000d0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d10:	40f7      	lsrs	r7, r6
 8000d12:	e9c5 2700 	strd	r2, r7, [r5]
 8000d16:	2600      	movs	r6, #0
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e70b      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0x60>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6fd      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d2c:	4543      	cmp	r3, r8
 8000d2e:	d2e5      	bcs.n	8000cfc <__udivmoddi4+0x260>
 8000d30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d34:	eb69 0104 	sbc.w	r1, r9, r4
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7df      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e7d2      	b.n	8000ce6 <__udivmoddi4+0x24a>
 8000d40:	4660      	mov	r0, ip
 8000d42:	e78d      	b.n	8000c60 <__udivmoddi4+0x1c4>
 8000d44:	4681      	mov	r9, r0
 8000d46:	e7b9      	b.n	8000cbc <__udivmoddi4+0x220>
 8000d48:	4666      	mov	r6, ip
 8000d4a:	e775      	b.n	8000c38 <__udivmoddi4+0x19c>
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e74a      	b.n	8000be6 <__udivmoddi4+0x14a>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	4439      	add	r1, r7
 8000d56:	e713      	b.n	8000b80 <__udivmoddi4+0xe4>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	e724      	b.n	8000ba8 <__udivmoddi4+0x10c>
 8000d5e:	bf00      	nop

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d76:	4b52      	ldr	r3, [pc, #328]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000d78:	4a52      	ldr	r2, [pc, #328]	; (8000ec4 <MX_ADC1_Init+0x160>)
 8000d7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000d7c:	4b50      	ldr	r3, [pc, #320]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000d7e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d84:	4b4e      	ldr	r3, [pc, #312]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d8a:	4b4d      	ldr	r3, [pc, #308]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d90:	4b4b      	ldr	r3, [pc, #300]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d96:	4b4a      	ldr	r3, [pc, #296]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d9e:	4b48      	ldr	r3, [pc, #288]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da4:	4b46      	ldr	r3, [pc, #280]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000da6:	4a48      	ldr	r2, [pc, #288]	; (8000ec8 <MX_ADC1_Init+0x164>)
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000daa:	4b45      	ldr	r3, [pc, #276]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000db0:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000db2:	2208      	movs	r2, #8
 8000db4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000db6:	4b42      	ldr	r3, [pc, #264]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dbe:	4b40      	ldr	r3, [pc, #256]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc4:	483e      	ldr	r0, [pc, #248]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000dc6:	f002 fc8b 	bl	80036e0 <HAL_ADC_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dd0:	f001 fd0e 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	4836      	ldr	r0, [pc, #216]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000de6:	f002 fdcd 	bl	8003984 <HAL_ADC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000df0:	f001 fcfe 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	482f      	ldr	r0, [pc, #188]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000e02:	f002 fdbf 	bl	8003984 <HAL_ADC_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e0c:	f001 fcf0 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e10:	2303      	movs	r3, #3
 8000e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e14:	2303      	movs	r3, #3
 8000e16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4828      	ldr	r0, [pc, #160]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000e1e:	f002 fdb1 	bl	8003984 <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000e28:	f001 fce2 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e30:	2304      	movs	r3, #4
 8000e32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	4619      	mov	r1, r3
 8000e38:	4821      	ldr	r0, [pc, #132]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000e3a:	f002 fda3 	bl	8003984 <HAL_ADC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e44:	f001 fcd4 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e48:	2306      	movs	r3, #6
 8000e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e4c:	2305      	movs	r3, #5
 8000e4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	481a      	ldr	r0, [pc, #104]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000e56:	f002 fd95 	bl	8003984 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e60:	f001 fcc6 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e64:	2307      	movs	r3, #7
 8000e66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000e68:	2306      	movs	r3, #6
 8000e6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000e72:	f002 fd87 	bl	8003984 <HAL_ADC_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e7c:	f001 fcb8 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e80:	2308      	movs	r3, #8
 8000e82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000e84:	2307      	movs	r3, #7
 8000e86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000e8e:	f002 fd79 	bl	8003984 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000e98:	f001 fcaa 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e9c:	2309      	movs	r3, #9
 8000e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_ADC1_Init+0x15c>)
 8000eaa:	f002 fd6b 	bl	8003984 <HAL_ADC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000eb4:	f001 fc9c 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000a10c 	.word	0x2000a10c
 8000ec4:	40012000 	.word	0x40012000
 8000ec8:	0f000001 	.word	0x0f000001

08000ecc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a3c      	ldr	r2, [pc, #240]	; (8000fdc <HAL_ADC_MspInit+0x110>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d171      	bne.n	8000fd2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	; (8000fe0 <HAL_ADC_MspInit+0x114>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a3a      	ldr	r2, [pc, #232]	; (8000fe0 <HAL_ADC_MspInit+0x114>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b38      	ldr	r3, [pc, #224]	; (8000fe0 <HAL_ADC_MspInit+0x114>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <HAL_ADC_MspInit+0x114>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a33      	ldr	r2, [pc, #204]	; (8000fe0 <HAL_ADC_MspInit+0x114>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b31      	ldr	r3, [pc, #196]	; (8000fe0 <HAL_ADC_MspInit+0x114>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <HAL_ADC_MspInit+0x114>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a2c      	ldr	r2, [pc, #176]	; (8000fe0 <HAL_ADC_MspInit+0x114>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <HAL_ADC_MspInit+0x114>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f42:	23de      	movs	r3, #222	; 0xde
 8000f44:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f46:	2303      	movs	r3, #3
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4823      	ldr	r0, [pc, #140]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000f56:	f003 fc37 	bl	80047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481e      	ldr	r0, [pc, #120]	; (8000fe8 <HAL_ADC_MspInit+0x11c>)
 8000f6e:	f003 fc2b 	bl	80047c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000f74:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <HAL_ADC_MspInit+0x124>)
 8000f76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000f9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000fb8:	f003 f896 	bl	80040e8 <HAL_DMA_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fc2:	f001 fc15 	bl	80027f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000fca:	639a      	str	r2, [r3, #56]	; 0x38
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40012000 	.word	0x40012000
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	2000a154 	.word	0x2000a154
 8000ff0:	40026410 	.word	0x40026410

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_DMA_Init+0x3c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <MX_DMA_Init+0x3c>)
 8001004:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_DMA_Init+0x3c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	203b      	movs	r0, #59	; 0x3b
 800101c:	f003 f82d 	bl	800407a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001020:	203b      	movs	r0, #59	; 0x3b
 8001022:	f003 f846 	bl	80040b2 <HAL_NVIC_EnableIRQ>

}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <SELECT+0x1c>)
 8001040:	f003 fd5e 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f002 fb27 	bl	8003698 <HAL_Delay>
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40020400 	.word	0x40020400

08001054 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	4804      	ldr	r0, [pc, #16]	; (8001070 <DESELECT+0x1c>)
 8001060:	f003 fd4e 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f002 fb17 	bl	8003698 <HAL_Delay>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020400 	.word	0x40020400

08001074 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800107e:	bf00      	nop
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <SPI_TxByte+0x30>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b02      	cmp	r3, #2
 800108c:	d1f8      	bne.n	8001080 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800108e:	1df9      	adds	r1, r7, #7
 8001090:	2364      	movs	r3, #100	; 0x64
 8001092:	2201      	movs	r2, #1
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <SPI_TxByte+0x30>)
 8001096:	f004 fd4d 	bl	8005b34 <HAL_SPI_Transmit>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000a79c 	.word	0x2000a79c

080010a8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010b4:	bf00      	nop
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <SPI_TxBuffer+0x30>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d1f8      	bne.n	80010b6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80010c4:	887a      	ldrh	r2, [r7, #2]
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <SPI_TxBuffer+0x30>)
 80010cc:	f004 fd32 	bl	8005b34 <HAL_SPI_Transmit>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000a79c 	.word	0x2000a79c

080010dc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80010e2:	23ff      	movs	r3, #255	; 0xff
 80010e4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010e6:	bf00      	nop
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <SPI_RxByte+0x34>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d1f8      	bne.n	80010e8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010f6:	1dba      	adds	r2, r7, #6
 80010f8:	1df9      	adds	r1, r7, #7
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <SPI_RxByte+0x34>)
 8001102:	f004 fe53 	bl	8005dac <HAL_SPI_TransmitReceive>

	return data;
 8001106:	79bb      	ldrb	r3, [r7, #6]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000a79c 	.word	0x2000a79c

08001114 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800111c:	f7ff ffde 	bl	80010dc <SPI_RxByte>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	701a      	strb	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <SD_ReadyWait+0x30>)
 8001138:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800113c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800113e:	f7ff ffcd 	bl	80010dc <SPI_RxByte>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2bff      	cmp	r3, #255	; 0xff
 800114a:	d004      	beq.n	8001156 <SD_ReadyWait+0x26>
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SD_ReadyWait+0x30>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	b29b      	uxth	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f3      	bne.n	800113e <SD_ReadyWait+0xe>

	return res;
 8001156:	79fb      	ldrb	r3, [r7, #7]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000a8ac 	.word	0x2000a8ac

08001164 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800116a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800116e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001170:	f7ff ff70 	bl	8001054 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	e005      	b.n	8001186 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800117a:	20ff      	movs	r0, #255	; 0xff
 800117c:	f7ff ff7a 	bl	8001074 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	3301      	adds	r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b09      	cmp	r3, #9
 800118a:	ddf6      	ble.n	800117a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800118c:	f7ff ff52 	bl	8001034 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001190:	2340      	movs	r3, #64	; 0x40
 8001192:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80011a4:	2395      	movs	r3, #149	; 0x95
 80011a6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80011a8:	463b      	mov	r3, r7
 80011aa:	2106      	movs	r1, #6
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff7b 	bl	80010a8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80011b2:	e002      	b.n	80011ba <SD_PowerOn+0x56>
	{
		cnt--;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80011ba:	f7ff ff8f 	bl	80010dc <SPI_RxByte>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d002      	beq.n	80011ca <SD_PowerOn+0x66>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f4      	bne.n	80011b4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80011ca:	f7ff ff43 	bl	8001054 <DESELECT>
	SPI_TxByte(0XFF);
 80011ce:	20ff      	movs	r0, #255	; 0xff
 80011d0:	f7ff ff50 	bl	8001074 <SPI_TxByte>

	PowerFlag = 1;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <SD_PowerOn+0x80>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000b1 	.word	0x200000b1

080011e8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <SD_PowerOff+0x14>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200000b1 	.word	0x200000b1

08001200 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <SD_CheckPower+0x14>)
 8001206:	781b      	ldrb	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	200000b1 	.word	0x200000b1

08001218 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <SD_RxDataBlock+0x5c>)
 8001224:	22c8      	movs	r2, #200	; 0xc8
 8001226:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001228:	f7ff ff58 	bl	80010dc <SPI_RxByte>
 800122c:	4603      	mov	r3, r0
 800122e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2bff      	cmp	r3, #255	; 0xff
 8001234:	d104      	bne.n	8001240 <SD_RxDataBlock+0x28>
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <SD_RxDataBlock+0x5c>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f3      	bne.n	8001228 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2bfe      	cmp	r3, #254	; 0xfe
 8001244:	d001      	beq.n	800124a <SD_RxDataBlock+0x32>
 8001246:	2300      	movs	r3, #0
 8001248:	e00f      	b.n	800126a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5f 	bl	8001114 <SPI_RxBytePtr>
	} while(len--);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	603a      	str	r2, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f4      	bne.n	800124a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001260:	f7ff ff3c 	bl	80010dc <SPI_RxByte>
	SPI_RxByte();
 8001264:	f7ff ff3a 	bl	80010dc <SPI_RxByte>

	return TRUE;
 8001268:	2301      	movs	r3, #1
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000a8ad 	.word	0x2000a8ad

08001278 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001288:	f7ff ff52 	bl	8001130 <SD_ReadyWait>
 800128c:	4603      	mov	r3, r0
 800128e:	2bff      	cmp	r3, #255	; 0xff
 8001290:	d001      	beq.n	8001296 <SD_TxDataBlock+0x1e>
 8001292:	2300      	movs	r3, #0
 8001294:	e02f      	b.n	80012f6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff feeb 	bl	8001074 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	2bfd      	cmp	r3, #253	; 0xfd
 80012a2:	d020      	beq.n	80012e6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80012a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fefd 	bl	80010a8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80012ae:	f7ff ff15 	bl	80010dc <SPI_RxByte>
		SPI_RxByte();
 80012b2:	f7ff ff13 	bl	80010dc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80012b6:	e00b      	b.n	80012d0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80012b8:	f7ff ff10 	bl	80010dc <SPI_RxByte>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	f003 031f 	and.w	r3, r3, #31
 80012c6:	2b05      	cmp	r3, #5
 80012c8:	d006      	beq.n	80012d8 <SD_TxDataBlock+0x60>
			i++;
 80012ca:	7bbb      	ldrb	r3, [r7, #14]
 80012cc:	3301      	adds	r3, #1
 80012ce:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80012d0:	7bbb      	ldrb	r3, [r7, #14]
 80012d2:	2b40      	cmp	r3, #64	; 0x40
 80012d4:	d9f0      	bls.n	80012b8 <SD_TxDataBlock+0x40>
 80012d6:	e000      	b.n	80012da <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80012d8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80012da:	bf00      	nop
 80012dc:	f7ff fefe 	bl	80010dc <SPI_RxByte>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0fa      	beq.n	80012dc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d101      	bne.n	80012f4 <SD_TxDataBlock+0x7c>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	6039      	str	r1, [r7, #0]
 8001308:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800130a:	f7ff ff11 	bl	8001130 <SD_ReadyWait>
 800130e:	4603      	mov	r3, r0
 8001310:	2bff      	cmp	r3, #255	; 0xff
 8001312:	d001      	beq.n	8001318 <SD_SendCmd+0x1a>
 8001314:	23ff      	movs	r3, #255	; 0xff
 8001316:	e042      	b.n	800139e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff feaa 	bl	8001074 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	0e1b      	lsrs	r3, r3, #24
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fea4 	bl	8001074 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	b2db      	uxtb	r3, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fe9e 	bl	8001074 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fe98 	bl	8001074 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fe93 	bl	8001074 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b40      	cmp	r3, #64	; 0x40
 8001352:	d102      	bne.n	800135a <SD_SendCmd+0x5c>
 8001354:	2395      	movs	r3, #149	; 0x95
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e007      	b.n	800136a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b48      	cmp	r3, #72	; 0x48
 800135e:	d102      	bne.n	8001366 <SD_SendCmd+0x68>
 8001360:	2387      	movs	r3, #135	; 0x87
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e001      	b.n	800136a <SD_SendCmd+0x6c>
	else crc = 1;
 8001366:	2301      	movs	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe81 	bl	8001074 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b4c      	cmp	r3, #76	; 0x4c
 8001376:	d101      	bne.n	800137c <SD_SendCmd+0x7e>
 8001378:	f7ff feb0 	bl	80010dc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800137c:	230a      	movs	r3, #10
 800137e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001380:	f7ff feac 	bl	80010dc <SPI_RxByte>
 8001384:	4603      	mov	r3, r0
 8001386:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001388:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800138c:	2b00      	cmp	r3, #0
 800138e:	da05      	bge.n	800139c <SD_SendCmd+0x9e>
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	3b01      	subs	r3, #1
 8001394:	73bb      	strb	r3, [r7, #14]
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f1      	bne.n	8001380 <SD_SendCmd+0x82>

	return res;
 800139c:	7b7b      	ldrb	r3, [r7, #13]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SD_disk_initialize+0x14>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0d6      	b.n	800156a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80013bc:	4b6d      	ldr	r3, [pc, #436]	; (8001574 <SD_disk_initialize+0x1cc>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <SD_disk_initialize+0x2a>
 80013ca:	4b6a      	ldr	r3, [pc, #424]	; (8001574 <SD_disk_initialize+0x1cc>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	e0cb      	b.n	800156a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80013d2:	f7ff fec7 	bl	8001164 <SD_PowerOn>

	/* slave select */
	SELECT();
 80013d6:	f7ff fe2d 	bl	8001034 <SELECT>

	/* check disk type */
	type = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80013de:	2100      	movs	r1, #0
 80013e0:	2040      	movs	r0, #64	; 0x40
 80013e2:	f7ff ff8c 	bl	80012fe <SD_SendCmd>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	f040 80a6 	bne.w	800153a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80013ee:	4b62      	ldr	r3, [pc, #392]	; (8001578 <SD_disk_initialize+0x1d0>)
 80013f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013fa:	2048      	movs	r0, #72	; 0x48
 80013fc:	f7ff ff7f 	bl	80012fe <SD_SendCmd>
 8001400:	4603      	mov	r3, r0
 8001402:	2b01      	cmp	r3, #1
 8001404:	d158      	bne.n	80014b8 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001406:	2300      	movs	r3, #0
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e00c      	b.n	8001426 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800140c:	7bfc      	ldrb	r4, [r7, #15]
 800140e:	f7ff fe65 	bl	80010dc <SPI_RxByte>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4423      	add	r3, r4
 800141c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	3301      	adds	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b03      	cmp	r3, #3
 800142a:	d9ef      	bls.n	800140c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800142c:	7abb      	ldrb	r3, [r7, #10]
 800142e:	2b01      	cmp	r3, #1
 8001430:	f040 8083 	bne.w	800153a <SD_disk_initialize+0x192>
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	2baa      	cmp	r3, #170	; 0xaa
 8001438:	d17f      	bne.n	800153a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800143a:	2100      	movs	r1, #0
 800143c:	2077      	movs	r0, #119	; 0x77
 800143e:	f7ff ff5e 	bl	80012fe <SD_SendCmd>
 8001442:	4603      	mov	r3, r0
 8001444:	2b01      	cmp	r3, #1
 8001446:	d807      	bhi.n	8001458 <SD_disk_initialize+0xb0>
 8001448:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800144c:	2069      	movs	r0, #105	; 0x69
 800144e:	f7ff ff56 	bl	80012fe <SD_SendCmd>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001458:	4b47      	ldr	r3, [pc, #284]	; (8001578 <SD_disk_initialize+0x1d0>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1eb      	bne.n	800143a <SD_disk_initialize+0x92>
 8001462:	e000      	b.n	8001466 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001464:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001466:	4b44      	ldr	r3, [pc, #272]	; (8001578 <SD_disk_initialize+0x1d0>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d064      	beq.n	800153a <SD_disk_initialize+0x192>
 8001470:	2100      	movs	r1, #0
 8001472:	207a      	movs	r0, #122	; 0x7a
 8001474:	f7ff ff43 	bl	80012fe <SD_SendCmd>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d15d      	bne.n	800153a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	e00c      	b.n	800149e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001484:	7bfc      	ldrb	r4, [r7, #15]
 8001486:	f7ff fe29 	bl	80010dc <SPI_RxByte>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4423      	add	r3, r4
 8001494:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	3301      	adds	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d9ef      	bls.n	8001484 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80014a4:	7a3b      	ldrb	r3, [r7, #8]
 80014a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SD_disk_initialize+0x10a>
 80014ae:	230c      	movs	r3, #12
 80014b0:	e000      	b.n	80014b4 <SD_disk_initialize+0x10c>
 80014b2:	2304      	movs	r3, #4
 80014b4:	73bb      	strb	r3, [r7, #14]
 80014b6:	e040      	b.n	800153a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80014b8:	2100      	movs	r1, #0
 80014ba:	2077      	movs	r0, #119	; 0x77
 80014bc:	f7ff ff1f 	bl	80012fe <SD_SendCmd>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d808      	bhi.n	80014d8 <SD_disk_initialize+0x130>
 80014c6:	2100      	movs	r1, #0
 80014c8:	2069      	movs	r0, #105	; 0x69
 80014ca:	f7ff ff18 	bl	80012fe <SD_SendCmd>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d801      	bhi.n	80014d8 <SD_disk_initialize+0x130>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e000      	b.n	80014da <SD_disk_initialize+0x132>
 80014d8:	2301      	movs	r3, #1
 80014da:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80014dc:	7bbb      	ldrb	r3, [r7, #14]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d10e      	bne.n	8001500 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80014e2:	2100      	movs	r1, #0
 80014e4:	2077      	movs	r0, #119	; 0x77
 80014e6:	f7ff ff0a 	bl	80012fe <SD_SendCmd>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d80e      	bhi.n	800150e <SD_disk_initialize+0x166>
 80014f0:	2100      	movs	r1, #0
 80014f2:	2069      	movs	r0, #105	; 0x69
 80014f4:	f7ff ff03 	bl	80012fe <SD_SendCmd>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d107      	bne.n	800150e <SD_disk_initialize+0x166>
 80014fe:	e00d      	b.n	800151c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001500:	2100      	movs	r1, #0
 8001502:	2041      	movs	r0, #65	; 0x41
 8001504:	f7ff fefb 	bl	80012fe <SD_SendCmd>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <SD_disk_initialize+0x1d0>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1e1      	bne.n	80014dc <SD_disk_initialize+0x134>
 8001518:	e000      	b.n	800151c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800151a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <SD_disk_initialize+0x1d0>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <SD_disk_initialize+0x18e>
 8001526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152a:	2050      	movs	r0, #80	; 0x50
 800152c:	f7ff fee7 	bl	80012fe <SD_SendCmd>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SD_disk_initialize+0x192>
 8001536:	2300      	movs	r3, #0
 8001538:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <SD_disk_initialize+0x1d4>)
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001540:	f7ff fd88 	bl	8001054 <DESELECT>
	SPI_RxByte();
 8001544:	f7ff fdca 	bl	80010dc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <SD_disk_initialize+0x1cc>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <SD_disk_initialize+0x1cc>)
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	e001      	b.n	8001564 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001560:	f7ff fe42 	bl	80011e8 <SD_PowerOff>
	}

	return Stat;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <SD_disk_initialize+0x1cc>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	20000000 	.word	0x20000000
 8001578:	2000a8ad 	.word	0x2000a8ad
 800157c:	200000b0 	.word	0x200000b0

08001580 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SD_disk_status+0x14>
 8001590:	2301      	movs	r3, #1
 8001592:	e002      	b.n	800159a <SD_disk_status+0x1a>
	return Stat;
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SD_disk_status+0x28>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000000 	.word	0x20000000

080015ac <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	4603      	mov	r3, r0
 80015ba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <SD_disk_read+0x1c>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <SD_disk_read+0x20>
 80015c8:	2304      	movs	r3, #4
 80015ca:	e051      	b.n	8001670 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015cc:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <SD_disk_read+0xcc>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SD_disk_read+0x32>
 80015da:	2303      	movs	r3, #3
 80015dc:	e048      	b.n	8001670 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <SD_disk_read+0xd0>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <SD_disk_read+0x44>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	025b      	lsls	r3, r3, #9
 80015ee:	607b      	str	r3, [r7, #4]

	SELECT();
 80015f0:	f7ff fd20 	bl	8001034 <SELECT>

	if (count == 1)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d111      	bne.n	800161e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	2051      	movs	r0, #81	; 0x51
 80015fe:	f7ff fe7e 	bl	80012fe <SD_SendCmd>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d129      	bne.n	800165c <SD_disk_read+0xb0>
 8001608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f7ff fe03 	bl	8001218 <SD_RxDataBlock>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d021      	beq.n	800165c <SD_disk_read+0xb0>
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	e01e      	b.n	800165c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	2052      	movs	r0, #82	; 0x52
 8001622:	f7ff fe6c 	bl	80012fe <SD_SendCmd>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d117      	bne.n	800165c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800162c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001630:	68b8      	ldr	r0, [r7, #8]
 8001632:	f7ff fdf1 	bl	8001218 <SD_RxDataBlock>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00a      	beq.n	8001652 <SD_disk_read+0xa6>
				buff += 512;
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001642:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3b01      	subs	r3, #1
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ed      	bne.n	800162c <SD_disk_read+0x80>
 8001650:	e000      	b.n	8001654 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001652:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001654:	2100      	movs	r1, #0
 8001656:	204c      	movs	r0, #76	; 0x4c
 8001658:	f7ff fe51 	bl	80012fe <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800165c:	f7ff fcfa 	bl	8001054 <DESELECT>
	SPI_RxByte();
 8001660:	f7ff fd3c 	bl	80010dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	200000b0 	.word	0x200000b0

08001680 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <SD_disk_write+0x1c>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <SD_disk_write+0x20>
 800169c:	2304      	movs	r3, #4
 800169e:	e06b      	b.n	8001778 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <SD_disk_write+0x100>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SD_disk_write+0x32>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e062      	b.n	8001778 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80016b2:	4b33      	ldr	r3, [pc, #204]	; (8001780 <SD_disk_write+0x100>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SD_disk_write+0x44>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e059      	b.n	8001778 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <SD_disk_write+0x104>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <SD_disk_write+0x56>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	025b      	lsls	r3, r3, #9
 80016d4:	607b      	str	r3, [r7, #4]

	SELECT();
 80016d6:	f7ff fcad 	bl	8001034 <SELECT>

	if (count == 1)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d110      	bne.n	8001702 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	2058      	movs	r0, #88	; 0x58
 80016e4:	f7ff fe0b 	bl	80012fe <SD_SendCmd>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d13a      	bne.n	8001764 <SD_disk_write+0xe4>
 80016ee:	21fe      	movs	r1, #254	; 0xfe
 80016f0:	68b8      	ldr	r0, [r7, #8]
 80016f2:	f7ff fdc1 	bl	8001278 <SD_TxDataBlock>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d033      	beq.n	8001764 <SD_disk_write+0xe4>
			count = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	e030      	b.n	8001764 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <SD_disk_write+0x104>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800170e:	2100      	movs	r1, #0
 8001710:	2077      	movs	r0, #119	; 0x77
 8001712:	f7ff fdf4 	bl	80012fe <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001716:	6839      	ldr	r1, [r7, #0]
 8001718:	2057      	movs	r0, #87	; 0x57
 800171a:	f7ff fdf0 	bl	80012fe <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	2059      	movs	r0, #89	; 0x59
 8001722:	f7ff fdec 	bl	80012fe <SD_SendCmd>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d11b      	bne.n	8001764 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800172c:	21fc      	movs	r1, #252	; 0xfc
 800172e:	68b8      	ldr	r0, [r7, #8]
 8001730:	f7ff fda2 	bl	8001278 <SD_TxDataBlock>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00a      	beq.n	8001750 <SD_disk_write+0xd0>
				buff += 512;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001740:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3b01      	subs	r3, #1
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ee      	bne.n	800172c <SD_disk_write+0xac>
 800174e:	e000      	b.n	8001752 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001750:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001752:	21fd      	movs	r1, #253	; 0xfd
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff fd8f 	bl	8001278 <SD_TxDataBlock>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <SD_disk_write+0xe4>
			{
				count = 1;
 8001760:	2301      	movs	r3, #1
 8001762:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001764:	f7ff fc76 	bl	8001054 <DESELECT>
	SPI_RxByte();
 8001768:	f7ff fcb8 	bl	80010dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf14      	ite	ne
 8001772:	2301      	movne	r3, #1
 8001774:	2300      	moveq	r3, #0
 8001776:	b2db      	uxtb	r3, r3
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000000 	.word	0x20000000
 8001784:	200000b0 	.word	0x200000b0

08001788 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b08b      	sub	sp, #44	; 0x2c
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	603a      	str	r2, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
 8001794:	460b      	mov	r3, r1
 8001796:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SD_disk_ioctl+0x1e>
 80017a2:	2304      	movs	r3, #4
 80017a4:	e115      	b.n	80019d2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d124      	bne.n	80017fc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d012      	beq.n	80017e0 <SD_disk_ioctl+0x58>
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	dc1a      	bgt.n	80017f4 <SD_disk_ioctl+0x6c>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <SD_disk_ioctl+0x40>
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d006      	beq.n	80017d4 <SD_disk_ioctl+0x4c>
 80017c6:	e015      	b.n	80017f4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80017c8:	f7ff fd0e 	bl	80011e8 <SD_PowerOff>
			res = RES_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017d2:	e0fc      	b.n	80019ce <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80017d4:	f7ff fcc6 	bl	8001164 <SD_PowerOn>
			res = RES_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017de:	e0f6      	b.n	80019ce <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	1c5c      	adds	r4, r3, #1
 80017e4:	f7ff fd0c 	bl	8001200 <SD_CheckPower>
 80017e8:	4603      	mov	r3, r0
 80017ea:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017f2:	e0ec      	b.n	80019ce <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80017f4:	2304      	movs	r3, #4
 80017f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017fa:	e0e8      	b.n	80019ce <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017fc:	4b77      	ldr	r3, [pc, #476]	; (80019dc <SD_disk_ioctl+0x254>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SD_disk_ioctl+0x86>
 800180a:	2303      	movs	r3, #3
 800180c:	e0e1      	b.n	80019d2 <SD_disk_ioctl+0x24a>

		SELECT();
 800180e:	f7ff fc11 	bl	8001034 <SELECT>

		switch (ctrl)
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	2b0d      	cmp	r3, #13
 8001816:	f200 80cb 	bhi.w	80019b0 <SD_disk_ioctl+0x228>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <SD_disk_ioctl+0x98>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	0800191b 	.word	0x0800191b
 8001824:	08001859 	.word	0x08001859
 8001828:	0800190b 	.word	0x0800190b
 800182c:	080019b1 	.word	0x080019b1
 8001830:	080019b1 	.word	0x080019b1
 8001834:	080019b1 	.word	0x080019b1
 8001838:	080019b1 	.word	0x080019b1
 800183c:	080019b1 	.word	0x080019b1
 8001840:	080019b1 	.word	0x080019b1
 8001844:	080019b1 	.word	0x080019b1
 8001848:	080019b1 	.word	0x080019b1
 800184c:	0800192d 	.word	0x0800192d
 8001850:	08001951 	.word	0x08001951
 8001854:	08001975 	.word	0x08001975
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001858:	2100      	movs	r1, #0
 800185a:	2049      	movs	r0, #73	; 0x49
 800185c:	f7ff fd4f 	bl	80012fe <SD_SendCmd>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 80a8 	bne.w	80019b8 <SD_disk_ioctl+0x230>
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2110      	movs	r1, #16
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fcd2 	bl	8001218 <SD_RxDataBlock>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 809e 	beq.w	80019b8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800187c:	7b3b      	ldrb	r3, [r7, #12]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d10e      	bne.n	80018a4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001886:	7d7b      	ldrb	r3, [r7, #21]
 8001888:	b29a      	uxth	r2, r3
 800188a:	7d3b      	ldrb	r3, [r7, #20]
 800188c:	b29b      	uxth	r3, r3
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b29b      	uxth	r3, r3
 8001892:	4413      	add	r3, r2
 8001894:	b29b      	uxth	r3, r3
 8001896:	3301      	adds	r3, #1
 8001898:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800189a:	8bfb      	ldrh	r3, [r7, #30]
 800189c:	029a      	lsls	r2, r3, #10
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	e02e      	b.n	8001902 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80018a4:	7c7b      	ldrb	r3, [r7, #17]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	7dbb      	ldrb	r3, [r7, #22]
 80018ae:	09db      	lsrs	r3, r3, #7
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	7d7b      	ldrb	r3, [r7, #21]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f003 0306 	and.w	r3, r3, #6
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3302      	adds	r3, #2
 80018c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80018cc:	7d3b      	ldrb	r3, [r7, #20]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	7cfb      	ldrb	r3, [r7, #19]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4413      	add	r3, r2
 80018de:	b29a      	uxth	r2, r3
 80018e0:	7cbb      	ldrb	r3, [r7, #18]
 80018e2:	029b      	lsls	r3, r3, #10
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3301      	adds	r3, #1
 80018f2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80018f4:	8bfa      	ldrh	r2, [r7, #30]
 80018f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018fa:	3b09      	subs	r3, #9
 80018fc:	409a      	lsls	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001908:	e056      	b.n	80019b8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001910:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001918:	e055      	b.n	80019c6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800191a:	f7ff fc09 	bl	8001130 <SD_ReadyWait>
 800191e:	4603      	mov	r3, r0
 8001920:	2bff      	cmp	r3, #255	; 0xff
 8001922:	d14b      	bne.n	80019bc <SD_disk_ioctl+0x234>
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800192a:	e047      	b.n	80019bc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800192c:	2100      	movs	r1, #0
 800192e:	2049      	movs	r0, #73	; 0x49
 8001930:	f7ff fce5 	bl	80012fe <SD_SendCmd>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d142      	bne.n	80019c0 <SD_disk_ioctl+0x238>
 800193a:	2110      	movs	r1, #16
 800193c:	6a38      	ldr	r0, [r7, #32]
 800193e:	f7ff fc6b 	bl	8001218 <SD_RxDataBlock>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d03b      	beq.n	80019c0 <SD_disk_ioctl+0x238>
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800194e:	e037      	b.n	80019c0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001950:	2100      	movs	r1, #0
 8001952:	204a      	movs	r0, #74	; 0x4a
 8001954:	f7ff fcd3 	bl	80012fe <SD_SendCmd>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d132      	bne.n	80019c4 <SD_disk_ioctl+0x23c>
 800195e:	2110      	movs	r1, #16
 8001960:	6a38      	ldr	r0, [r7, #32]
 8001962:	f7ff fc59 	bl	8001218 <SD_RxDataBlock>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d02b      	beq.n	80019c4 <SD_disk_ioctl+0x23c>
 800196c:	2300      	movs	r3, #0
 800196e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001972:	e027      	b.n	80019c4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001974:	2100      	movs	r1, #0
 8001976:	207a      	movs	r0, #122	; 0x7a
 8001978:	f7ff fcc1 	bl	80012fe <SD_SendCmd>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d116      	bne.n	80019b0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001982:	2300      	movs	r3, #0
 8001984:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001988:	e00b      	b.n	80019a2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800198a:	6a3c      	ldr	r4, [r7, #32]
 800198c:	1c63      	adds	r3, r4, #1
 800198e:	623b      	str	r3, [r7, #32]
 8001990:	f7ff fba4 	bl	80010dc <SPI_RxByte>
 8001994:	4603      	mov	r3, r0
 8001996:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001998:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800199c:	3301      	adds	r3, #1
 800199e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d9ef      	bls.n	800198a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80019b0:	2304      	movs	r3, #4
 80019b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019b6:	e006      	b.n	80019c6 <SD_disk_ioctl+0x23e>
			break;
 80019b8:	bf00      	nop
 80019ba:	e004      	b.n	80019c6 <SD_disk_ioctl+0x23e>
			break;
 80019bc:	bf00      	nop
 80019be:	e002      	b.n	80019c6 <SD_disk_ioctl+0x23e>
			break;
 80019c0:	bf00      	nop
 80019c2:	e000      	b.n	80019c6 <SD_disk_ioctl+0x23e>
			break;
 80019c4:	bf00      	nop
		}

		DESELECT();
 80019c6:	f7ff fb45 	bl	8001054 <DESELECT>
		SPI_RxByte();
 80019ca:	f7ff fb87 	bl	80010dc <SPI_RxByte>
	}

	return res;
 80019ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	372c      	adds	r7, #44	; 0x2c
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd90      	pop	{r4, r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000000 	.word	0x20000000

080019e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <MX_GPIO_Init+0x138>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a46      	ldr	r2, [pc, #280]	; (8001b18 <MX_GPIO_Init+0x138>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b44      	ldr	r3, [pc, #272]	; (8001b18 <MX_GPIO_Init+0x138>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <MX_GPIO_Init+0x138>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a3f      	ldr	r2, [pc, #252]	; (8001b18 <MX_GPIO_Init+0x138>)
 8001a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b3d      	ldr	r3, [pc, #244]	; (8001b18 <MX_GPIO_Init+0x138>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <MX_GPIO_Init+0x138>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a38      	ldr	r2, [pc, #224]	; (8001b18 <MX_GPIO_Init+0x138>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <MX_GPIO_Init+0x138>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <MX_GPIO_Init+0x138>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a31      	ldr	r2, [pc, #196]	; (8001b18 <MX_GPIO_Init+0x138>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <MX_GPIO_Init+0x138>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8001a6c:	482b      	ldr	r0, [pc, #172]	; (8001b1c <MX_GPIO_Init+0x13c>)
 8001a6e:	f003 f847 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a78:	4829      	ldr	r0, [pc, #164]	; (8001b20 <MX_GPIO_Init+0x140>)
 8001a7a:	f003 f841 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WKUP_Pin;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4823      	ldr	r0, [pc, #140]	; (8001b20 <MX_GPIO_Init+0x140>)
 8001a94:	f002 fe98 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	481b      	ldr	r0, [pc, #108]	; (8001b1c <MX_GPIO_Init+0x13c>)
 8001ab0:	f002 fe8a 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin;
 8001ab4:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4813      	ldr	r0, [pc, #76]	; (8001b1c <MX_GPIO_Init+0x13c>)
 8001ace:	f002 fe7b 	bl	80047c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 8001ad2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	480d      	ldr	r0, [pc, #52]	; (8001b20 <MX_GPIO_Init+0x140>)
 8001aec:	f002 fe6c 	bl	80047c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2102      	movs	r1, #2
 8001af4:	2006      	movs	r0, #6
 8001af6:	f002 fac0 	bl	800407a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001afa:	2006      	movs	r0, #6
 8001afc:	f002 fad9 	bl	80040b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2108      	movs	r1, #8
 8001b04:	2028      	movs	r0, #40	; 0x28
 8001b06:	f002 fab8 	bl	800407a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b0a:	2028      	movs	r0, #40	; 0x28
 8001b0c:	f002 fad1 	bl	80040b2 <HAL_NVIC_EnableIRQ>

}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	40020000 	.word	0x40020000

08001b24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <MX_I2C1_Init+0x50>)
 8001b2a:	4a13      	ldr	r2, [pc, #76]	; (8001b78 <MX_I2C1_Init+0x54>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_I2C1_Init+0x50>)
 8001b30:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <MX_I2C1_Init+0x58>)
 8001b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <MX_I2C1_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_I2C1_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_I2C1_Init+0x50>)
 8001b42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <MX_I2C1_Init+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_I2C1_Init+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <MX_I2C1_Init+0x50>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_I2C1_Init+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <MX_I2C1_Init+0x50>)
 8001b62:	f002 ffff 	bl	8004b64 <HAL_I2C_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b6c:	f000 fe40 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	2000a1b4 	.word	0x2000a1b4
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	000186a0 	.word	0x000186a0

08001b80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <HAL_I2C_MspInit+0x84>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d12c      	bne.n	8001bfc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_I2C_MspInit+0x88>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <HAL_I2C_MspInit+0x88>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_I2C_MspInit+0x88>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001bbe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc4:	2312      	movs	r3, #18
 8001bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480c      	ldr	r0, [pc, #48]	; (8001c0c <HAL_I2C_MspInit+0x8c>)
 8001bdc:	f002 fdf4 	bl	80047c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_I2C_MspInit+0x88>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_I2C_MspInit+0x88>)
 8001bea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_I2C_MspInit+0x88>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40005400 	.word	0x40005400
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020400 	.word	0x40020400

08001c10 <lcd_cmd>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


static void lcd_cmd(uint8_t cmd) //send any command to st7735
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c20:	480b      	ldr	r0, [pc, #44]	; (8001c50 <lcd_cmd+0x40>)
 8001c22:	f002 ff6d 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2140      	movs	r1, #64	; 0x40
 8001c2a:	480a      	ldr	r0, [pc, #40]	; (8001c54 <lcd_cmd+0x44>)
 8001c2c:	f002 ff68 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8001c30:	1df9      	adds	r1, r7, #7
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	2201      	movs	r2, #1
 8001c38:	4807      	ldr	r0, [pc, #28]	; (8001c58 <lcd_cmd+0x48>)
 8001c3a:	f003 ff7b 	bl	8005b34 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2140      	movs	r1, #64	; 0x40
 8001c42:	4804      	ldr	r0, [pc, #16]	; (8001c54 <lcd_cmd+0x44>)
 8001c44:	f002 ff5c 	bl	8004b00 <HAL_GPIO_WritePin>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40020400 	.word	0x40020400
 8001c58:	2000a7f4 	.word	0x2000a7f4

08001c5c <lcd_data>:

static void lcd_data(uint8_t data)//send data(value for command) to st7735, spi always uses 8bit data
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001c66:	2201      	movs	r2, #1
 8001c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <lcd_data+0x40>)
 8001c6e:	f002 ff47 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2140      	movs	r1, #64	; 0x40
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <lcd_data+0x44>)
 8001c78:	f002 ff42 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001c7c:	1df9      	adds	r1, r7, #7
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	2201      	movs	r2, #1
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <lcd_data+0x48>)
 8001c86:	f003 ff55 	bl	8005b34 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2140      	movs	r1, #64	; 0x40
 8001c8e:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <lcd_data+0x44>)
 8001c90:	f002 ff36 	bl	8004b00 <HAL_GPIO_WritePin>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	2000a7f4 	.word	0x2000a7f4

08001ca8 <lcd_data16>:

static void lcd_data16(uint16_t value)//function that allows to send 16bit data as 2x 8bit
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ffce 	bl	8001c5c <lcd_data>
	lcd_data(value);
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ffc9 	bl	8001c5c <lcd_data>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height) {
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);	//command to set window columns
 8001ce0:	202a      	movs	r0, #42	; 0x2a
 8001ce2:	f7ff ff95 	bl	8001c10 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);	//start col
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ffdc 	bl	8001ca8 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);	//end col
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ffd1 	bl	8001ca8 <lcd_data16>

	lcd_cmd(ST7735S_RASET);	//command to set window rows
 8001d06:	202b      	movs	r0, #43	; 0x2b
 8001d08:	f7ff ff82 	bl	8001c10 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);	//start row
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ffc9 	bl	8001ca8 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height - 1);	//end row
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ffbe 	bl	8001ca8 <lcd_data16>
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <lcd_send>:

static void lcd_send(uint16_t value) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) { //checks if value is a command (9th bit is 1) or data (9th bit is 0)
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <lcd_send+0x20>
		lcd_cmd(value);
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5f 	bl	8001c10 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8001d52:	e004      	b.n	8001d5e <lcd_send+0x2a>
		lcd_data(value);
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff7f 	bl	8001c5c <lcd_data>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <lcd_init>:
		0x22, 0x1f, 0x1b, 0x23, 0x37, 0x00, 0x07, 0x02, 0x10, CMD(
				ST7735S_GAMCTRN1), 0x0f, 0x1b, 0x0f, 0x17, 0x33, 0x2c, 0x29,
		0x2e, 0x30, 0x30, 0x39, 0x3f, 0x00, 0x07, 0x03, 0x10, CMD(0xf0), 0x01,
		CMD(0xf6), 0x00, CMD(ST7735S_COLMOD), 0x05, CMD(ST7735S_MADCTL), 0x00, };

void lcd_init(void) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
	int i;

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d74:	4817      	ldr	r0, [pc, #92]	; (8001dd4 <lcd_init+0x6c>)
 8001d76:	f002 fec3 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001d7a:	2064      	movs	r0, #100	; 0x64
 8001d7c:	f001 fc8c 	bl	8003698 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d86:	4813      	ldr	r0, [pc, #76]	; (8001dd4 <lcd_init+0x6c>)
 8001d88:	f002 feba 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001d8c:	2064      	movs	r0, #100	; 0x64
 8001d8e:	f001 fc83 	bl	8003698 <HAL_Delay>

	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	e009      	b.n	8001dac <lcd_init+0x44>
		lcd_send(init_table[i]);
 8001d98:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <lcd_init+0x70>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ffc7 	bl	8001d34 <lcd_send>
	for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3301      	adds	r3, #1
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b4b      	cmp	r3, #75	; 0x4b
 8001db0:	d9f2      	bls.n	8001d98 <lcd_init+0x30>
	}

	HAL_Delay(200);
 8001db2:	20c8      	movs	r0, #200	; 0xc8
 8001db4:	f001 fc70 	bl	8003698 <HAL_Delay>

	lcd_cmd(ST7735S_SLPOUT);
 8001db8:	2011      	movs	r0, #17
 8001dba:	f7ff ff29 	bl	8001c10 <lcd_cmd>
	HAL_Delay(120);
 8001dbe:	2078      	movs	r0, #120	; 0x78
 8001dc0:	f001 fc6a 	bl	8003698 <HAL_Delay>

	lcd_cmd(ST7735S_DISPON);
 8001dc4:	2029      	movs	r0, #41	; 0x29
 8001dc6:	f7ff ff23 	bl	8001c10 <lcd_cmd>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	0800cabc 	.word	0x0800cabc

08001ddc <lcd_put_pixel>:


void lcd_put_pixel(int x, int y, uint16_t color) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	01da      	lsls	r2, r3, #7
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	4905      	ldr	r1, [pc, #20]	; (8001e08 <lcd_put_pixel+0x2c>)
 8001df4:	88fa      	ldrh	r2, [r7, #6]
 8001df6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	200000b4 	.word	0x200000b4

08001e0c <lcd_copy>:


void lcd_copy(void) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001e10:	23a0      	movs	r3, #160	; 0xa0
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	2100      	movs	r1, #0
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7ff ff5b 	bl	8001cd2 <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 8001e1c:	202c      	movs	r0, #44	; 0x2c
 8001e1e:	f7ff fef7 	bl	8001c10 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001e22:	2201      	movs	r2, #1
 8001e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e28:	4807      	ldr	r0, [pc, #28]	; (8001e48 <lcd_copy+0x3c>)
 8001e2a:	f002 fe69 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2140      	movs	r1, #64	; 0x40
 8001e32:	4806      	ldr	r0, [pc, #24]	; (8001e4c <lcd_copy+0x40>)
 8001e34:	f002 fe64 	bl	8004b00 <HAL_GPIO_WritePin>
//	HAL_SPI_Transmit(&hspi2, (uint8_t *)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)frame_buffer, sizeof(frame_buffer));
 8001e38:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001e3c:	4904      	ldr	r1, [pc, #16]	; (8001e50 <lcd_copy+0x44>)
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <lcd_copy+0x48>)
 8001e40:	f004 f956 	bl	80060f0 <HAL_SPI_Transmit_DMA>
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	200000b4 	.word	0x200000b4
 8001e54:	2000a7f4 	.word	0x2000a7f4

08001e58 <lcd_transfer_done>:


void lcd_transfer_done(void){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2140      	movs	r1, #64	; 0x40
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <lcd_transfer_done+0x14>)
 8001e62:	f002 fe4d 	bl	8004b00 <HAL_GPIO_WritePin>
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40020400 	.word	0x40020400

08001e70 <__io_putchar>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int __io_putchar(int ch)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b0a      	cmp	r3, #10
 8001e7c:	d102      	bne.n	8001e84 <__io_putchar+0x14>
    __io_putchar('\r');
 8001e7e:	200d      	movs	r0, #13
 8001e80:	f7ff fff6 	bl	8001e70 <__io_putchar>
  }

  HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001e84:	1d39      	adds	r1, r7, #4
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4803      	ldr	r0, [pc, #12]	; (8001e9c <__io_putchar+0x2c>)
 8001e8e:	f004 fdda 	bl	8006a46 <HAL_UART_Transmit>

  return 1;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	2000a8f8 	.word	0x2000a8f8

08001ea0 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	int i=0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001eac:	e002      	b.n	8001eb4 <bufsize+0x14>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f6      	bne.n	8001eae <bufsize+0xe>
	return i;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <clear_buffer>:

void clear_buffer (void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	e007      	b.n	8001eec <clear_buffer+0x1c>
 8001edc:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <clear_buffer+0x30>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b7f      	cmp	r3, #127	; 0x7f
 8001ef0:	ddf4      	ble.n	8001edc <clear_buffer+0xc>
}
 8001ef2:	bf00      	nop
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	2000a490 	.word	0x2000a490

08001f04 <send_uart>:

void send_uart (char *string)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7fe f967 	bl	80001e0 <strlen>
 8001f12:	4603      	mov	r3, r0
 8001f14:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart6, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <send_uart+0x2c>)
 8001f22:	f004 fd90 	bl	8006a46 <HAL_UART_Transmit>
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000a8f8 	.word	0x2000a8f8

08001f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3a:	f001 fb3b 	bl	80035b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f3e:	f000 fbbb 	bl	80026b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f42:	f7ff fd4d 	bl	80019e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f46:	f7ff f855 	bl	8000ff4 <MX_DMA_Init>
  MX_SPI1_Init();
 8001f4a:	f000 ff25 	bl	8002d98 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001f4e:	f7fe ff09 	bl	8000d64 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001f52:	f7ff fde7 	bl	8001b24 <MX_I2C1_Init>
  MX_RTC_Init();
 8001f56:	f000 fecd 	bl	8002cf4 <MX_RTC_Init>
  MX_SPI2_Init();
 8001f5a:	f000 ff53 	bl	8002e04 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001f5e:	f001 f9d5 	bl	800330c <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8001f62:	f001 fa8b 	bl	800347c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001f66:	f005 f837 	bl	8006fd8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
//*******************************************************SD_CARD FUNCTIONS**************************************
  HAL_Delay (500);
 8001f6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f6e:	f001 fb93 	bl	8003698 <HAL_Delay>

  fresult = f_mount(&fs, "/", 1);
 8001f72:	2201      	movs	r2, #1
 8001f74:	4907      	ldr	r1, [pc, #28]	; (8001f94 <main+0x60>)
 8001f76:	4808      	ldr	r0, [pc, #32]	; (8001f98 <main+0x64>)
 8001f78:	f006 fe56 	bl	8008c28 <f_mount>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <main+0x68>)
 8001f82:	701a      	strb	r2, [r3, #0]
  	if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <main+0x68>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00b      	beq.n	8001fa4 <main+0x70>
 8001f8c:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <main+0x6c>)
 8001f8e:	f7ff ffb9 	bl	8001f04 <send_uart>
 8001f92:	e00a      	b.n	8001faa <main+0x76>
 8001f94:	0800c58c 	.word	0x0800c58c
 8001f98:	2000a238 	.word	0x2000a238
 8001f9c:	2000a518 	.word	0x2000a518
 8001fa0:	0800c590 	.word	0x0800c590
  	else send_uart("SD CARD mounted successfully...\n\n");
 8001fa4:	48b2      	ldr	r0, [pc, #712]	; (8002270 <main+0x33c>)
 8001fa6:	f7ff ffad 	bl	8001f04 <send_uart>


  	/*************** Card capacity details ********************/

  	/* Check free space */
  	f_getfree("", &fre_clust, &pfs);
 8001faa:	4ab2      	ldr	r2, [pc, #712]	; (8002274 <main+0x340>)
 8001fac:	49b2      	ldr	r1, [pc, #712]	; (8002278 <main+0x344>)
 8001fae:	48b3      	ldr	r0, [pc, #716]	; (800227c <main+0x348>)
 8001fb0:	f007 fda3 	bl	8009afa <f_getfree>

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001fb4:	4baf      	ldr	r3, [pc, #700]	; (8002274 <main+0x340>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	3b02      	subs	r3, #2
 8001fbc:	4aad      	ldr	r2, [pc, #692]	; (8002274 <main+0x340>)
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	8952      	ldrh	r2, [r2, #10]
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe faa4 	bl	8000514 <__aeabi_ui2d>
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	4bab      	ldr	r3, [pc, #684]	; (8002280 <main+0x34c>)
 8001fd2:	f7fe fb19 	bl	8000608 <__aeabi_dmul>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f7fe fd25 	bl	8000a2c <__aeabi_d2uiz>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4aa7      	ldr	r2, [pc, #668]	; (8002284 <main+0x350>)
 8001fe6:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8001fe8:	4ba6      	ldr	r3, [pc, #664]	; (8002284 <main+0x350>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	49a6      	ldr	r1, [pc, #664]	; (8002288 <main+0x354>)
 8001ff0:	48a6      	ldr	r0, [pc, #664]	; (800228c <main+0x358>)
 8001ff2:	f009 ff37 	bl	800be64 <siprintf>
  	send_uart(buffer);
 8001ff6:	48a5      	ldr	r0, [pc, #660]	; (800228c <main+0x358>)
 8001ff8:	f7ff ff84 	bl	8001f04 <send_uart>
  	clear_buffer();
 8001ffc:	f7ff ff68 	bl	8001ed0 <clear_buffer>
  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002000:	4b9c      	ldr	r3, [pc, #624]	; (8002274 <main+0x340>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	895b      	ldrh	r3, [r3, #10]
 8002006:	461a      	mov	r2, r3
 8002008:	4b9b      	ldr	r3, [pc, #620]	; (8002278 <main+0x344>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	fb03 f302 	mul.w	r3, r3, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa7f 	bl	8000514 <__aeabi_ui2d>
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	4b99      	ldr	r3, [pc, #612]	; (8002280 <main+0x34c>)
 800201c:	f7fe faf4 	bl	8000608 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fd00 	bl	8000a2c <__aeabi_d2uiz>
 800202c:	4603      	mov	r3, r0
 800202e:	4a98      	ldr	r2, [pc, #608]	; (8002290 <main+0x35c>)
 8002030:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8002032:	4b97      	ldr	r3, [pc, #604]	; (8002290 <main+0x35c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	4996      	ldr	r1, [pc, #600]	; (8002294 <main+0x360>)
 800203a:	4894      	ldr	r0, [pc, #592]	; (800228c <main+0x358>)
 800203c:	f009 ff12 	bl	800be64 <siprintf>
  	send_uart(buffer);
 8002040:	4892      	ldr	r0, [pc, #584]	; (800228c <main+0x358>)
 8002042:	f7ff ff5f 	bl	8001f04 <send_uart>
  	clear_buffer();
 8002046:	f7ff ff43 	bl	8001ed0 <clear_buffer>


  	/************* The following operation is using PUTS and GETS *********************/

  	/* Open file to write/ create a file if it doesn't exist */
      fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800204a:	2213      	movs	r2, #19
 800204c:	4992      	ldr	r1, [pc, #584]	; (8002298 <main+0x364>)
 800204e:	4893      	ldr	r0, [pc, #588]	; (800229c <main+0x368>)
 8002050:	f006 fe30 	bl	8008cb4 <f_open>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	4b91      	ldr	r3, [pc, #580]	; (80022a0 <main+0x36c>)
 800205a:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 800205c:	498f      	ldr	r1, [pc, #572]	; (800229c <main+0x368>)
 800205e:	4891      	ldr	r0, [pc, #580]	; (80022a4 <main+0x370>)
 8002060:	f007 ff5f 	bl	8009f22 <f_puts>

  	/* Close file */
  	fresult = f_close(&fil);
 8002064:	488d      	ldr	r0, [pc, #564]	; (800229c <main+0x368>)
 8002066:	f007 fb15 	bl	8009694 <f_close>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	4b8c      	ldr	r3, [pc, #560]	; (80022a0 <main+0x36c>)
 8002070:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)send_uart ("File1.txt created and the data is written \n");
 8002072:	4b8b      	ldr	r3, [pc, #556]	; (80022a0 <main+0x36c>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <main+0x14c>
 800207a:	488b      	ldr	r0, [pc, #556]	; (80022a8 <main+0x374>)
 800207c:	f7ff ff42 	bl	8001f04 <send_uart>

  	/* Open file to read */
  	fresult = f_open(&fil, "file1.txt", FA_READ);
 8002080:	2201      	movs	r2, #1
 8002082:	4985      	ldr	r1, [pc, #532]	; (8002298 <main+0x364>)
 8002084:	4885      	ldr	r0, [pc, #532]	; (800229c <main+0x368>)
 8002086:	f006 fe15 	bl	8008cb4 <f_open>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	4b84      	ldr	r3, [pc, #528]	; (80022a0 <main+0x36c>)
 8002090:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	f_gets(buffer, f_size(&fil), &fil);
 8002092:	4b82      	ldr	r3, [pc, #520]	; (800229c <main+0x368>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4a81      	ldr	r2, [pc, #516]	; (800229c <main+0x368>)
 8002098:	4619      	mov	r1, r3
 800209a:	487c      	ldr	r0, [pc, #496]	; (800228c <main+0x358>)
 800209c:	f007 fe8d 	bl	8009dba <f_gets>

  	send_uart("File1.txt is opened and it contains the data as shown below\n");
 80020a0:	4882      	ldr	r0, [pc, #520]	; (80022ac <main+0x378>)
 80020a2:	f7ff ff2f 	bl	8001f04 <send_uart>
  	send_uart(buffer);
 80020a6:	4879      	ldr	r0, [pc, #484]	; (800228c <main+0x358>)
 80020a8:	f7ff ff2c 	bl	8001f04 <send_uart>
  	send_uart("\n\n");
 80020ac:	4880      	ldr	r0, [pc, #512]	; (80022b0 <main+0x37c>)
 80020ae:	f7ff ff29 	bl	8001f04 <send_uart>

  	/* Close file */
  	f_close(&fil);
 80020b2:	487a      	ldr	r0, [pc, #488]	; (800229c <main+0x368>)
 80020b4:	f007 faee 	bl	8009694 <f_close>

  	clear_buffer();
 80020b8:	f7ff ff0a 	bl	8001ed0 <clear_buffer>


  	/**************** The following operation is using f_write and f_read **************************/

  	/* Create second file with read write access and open it */
  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80020bc:	220a      	movs	r2, #10
 80020be:	497d      	ldr	r1, [pc, #500]	; (80022b4 <main+0x380>)
 80020c0:	4876      	ldr	r0, [pc, #472]	; (800229c <main+0x368>)
 80020c2:	f006 fdf7 	bl	8008cb4 <f_open>
 80020c6:	4603      	mov	r3, r0
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b75      	ldr	r3, [pc, #468]	; (80022a0 <main+0x36c>)
 80020cc:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");
 80020ce:	4a6f      	ldr	r2, [pc, #444]	; (800228c <main+0x358>)
 80020d0:	4b79      	ldr	r3, [pc, #484]	; (80022b8 <main+0x384>)
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	2357      	movs	r3, #87	; 0x57
 80020d8:	461a      	mov	r2, r3
 80020da:	f009 fa5b 	bl	800b594 <memcpy>

  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80020de:	486b      	ldr	r0, [pc, #428]	; (800228c <main+0x358>)
 80020e0:	f7ff fede 	bl	8001ea0 <bufsize>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b74      	ldr	r3, [pc, #464]	; (80022bc <main+0x388>)
 80020ea:	4968      	ldr	r1, [pc, #416]	; (800228c <main+0x358>)
 80020ec:	486b      	ldr	r0, [pc, #428]	; (800229c <main+0x368>)
 80020ee:	f007 f8de 	bl	80092ae <f_write>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <main+0x36c>)
 80020f8:	701a      	strb	r2, [r3, #0]

  	send_uart ("File2.txt created and data is written\n");
 80020fa:	4871      	ldr	r0, [pc, #452]	; (80022c0 <main+0x38c>)
 80020fc:	f7ff ff02 	bl	8001f04 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8002100:	4866      	ldr	r0, [pc, #408]	; (800229c <main+0x368>)
 8002102:	f007 fac7 	bl	8009694 <f_close>



  	// clearing buffer to show that result obtained is from the file
  	clear_buffer();
 8002106:	f7ff fee3 	bl	8001ed0 <clear_buffer>

  	/* Open second file to read */
  	fresult = f_open(&fil, "file2.txt", FA_READ);
 800210a:	2201      	movs	r2, #1
 800210c:	4969      	ldr	r1, [pc, #420]	; (80022b4 <main+0x380>)
 800210e:	4863      	ldr	r0, [pc, #396]	; (800229c <main+0x368>)
 8002110:	f006 fdd0 	bl	8008cb4 <f_open>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <main+0x36c>)
 800211a:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)send_uart ("file2.txt is open and the data is shown below\n");
 800211c:	4b60      	ldr	r3, [pc, #384]	; (80022a0 <main+0x36c>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <main+0x1f6>
 8002124:	4867      	ldr	r0, [pc, #412]	; (80022c4 <main+0x390>)
 8002126:	f7ff feed 	bl	8001f04 <send_uart>

  	/* Read data from the file
  	 * Please see the function details for the arguments */
  	f_read (&fil, buffer, f_size(&fil), &br);
 800212a:	4b5c      	ldr	r3, [pc, #368]	; (800229c <main+0x368>)
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <main+0x394>)
 8002130:	4956      	ldr	r1, [pc, #344]	; (800228c <main+0x358>)
 8002132:	485a      	ldr	r0, [pc, #360]	; (800229c <main+0x368>)
 8002134:	f006 ff7c 	bl	8009030 <f_read>
  	send_uart(buffer);
 8002138:	4854      	ldr	r0, [pc, #336]	; (800228c <main+0x358>)
 800213a:	f7ff fee3 	bl	8001f04 <send_uart>
  	send_uart("\n\n");
 800213e:	485c      	ldr	r0, [pc, #368]	; (80022b0 <main+0x37c>)
 8002140:	f7ff fee0 	bl	8001f04 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8002144:	4855      	ldr	r0, [pc, #340]	; (800229c <main+0x368>)
 8002146:	f007 faa5 	bl	8009694 <f_close>

  	clear_buffer();
 800214a:	f7ff fec1 	bl	8001ed0 <clear_buffer>


  	/*********************UPDATING an existing file ***************************/

  	/* Open the file with write access */
  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800214e:	2203      	movs	r2, #3
 8002150:	4958      	ldr	r1, [pc, #352]	; (80022b4 <main+0x380>)
 8002152:	4852      	ldr	r0, [pc, #328]	; (800229c <main+0x368>)
 8002154:	f006 fdae 	bl	8008cb4 <f_open>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <main+0x36c>)
 800215e:	701a      	strb	r2, [r3, #0]

  	/* Move to offset to the end of the file */
  	fresult = f_lseek(&fil, f_size(&fil));
 8002160:	4b4e      	ldr	r3, [pc, #312]	; (800229c <main+0x368>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4619      	mov	r1, r3
 8002166:	484d      	ldr	r0, [pc, #308]	; (800229c <main+0x368>)
 8002168:	f007 fabe 	bl	80096e8 <f_lseek>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	4b4b      	ldr	r3, [pc, #300]	; (80022a0 <main+0x36c>)
 8002172:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)send_uart ("About to update the file2.txt\n");
 8002174:	4b4a      	ldr	r3, [pc, #296]	; (80022a0 <main+0x36c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <main+0x24e>
 800217c:	4853      	ldr	r0, [pc, #332]	; (80022cc <main+0x398>)
 800217e:	f7ff fec1 	bl	8001f04 <send_uart>

  	/* write the string to the file */
  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 8002182:	4946      	ldr	r1, [pc, #280]	; (800229c <main+0x368>)
 8002184:	4852      	ldr	r0, [pc, #328]	; (80022d0 <main+0x39c>)
 8002186:	f007 fecc 	bl	8009f22 <f_puts>
 800218a:	4603      	mov	r3, r0
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b44      	ldr	r3, [pc, #272]	; (80022a0 <main+0x36c>)
 8002190:	701a      	strb	r2, [r3, #0]

  	f_close (&fil);
 8002192:	4842      	ldr	r0, [pc, #264]	; (800229c <main+0x368>)
 8002194:	f007 fa7e 	bl	8009694 <f_close>

  	clear_buffer();
 8002198:	f7ff fe9a 	bl	8001ed0 <clear_buffer>

  	/* Open to read the file */
  	fresult = f_open (&fil, "file2.txt", FA_READ);
 800219c:	2201      	movs	r2, #1
 800219e:	4945      	ldr	r1, [pc, #276]	; (80022b4 <main+0x380>)
 80021a0:	483e      	ldr	r0, [pc, #248]	; (800229c <main+0x368>)
 80021a2:	f006 fd87 	bl	8008cb4 <f_open>
 80021a6:	4603      	mov	r3, r0
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <main+0x36c>)
 80021ac:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80021ae:	4b3b      	ldr	r3, [pc, #236]	; (800229c <main+0x368>)
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <main+0x394>)
 80021b4:	4935      	ldr	r1, [pc, #212]	; (800228c <main+0x358>)
 80021b6:	4839      	ldr	r0, [pc, #228]	; (800229c <main+0x368>)
 80021b8:	f006 ff3a 	bl	8009030 <f_read>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <main+0x36c>)
 80021c2:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <main+0x36c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <main+0x29e>
 80021cc:	4841      	ldr	r0, [pc, #260]	; (80022d4 <main+0x3a0>)
 80021ce:	f7ff fe99 	bl	8001f04 <send_uart>
  	send_uart(buffer);
 80021d2:	482e      	ldr	r0, [pc, #184]	; (800228c <main+0x358>)
 80021d4:	f7ff fe96 	bl	8001f04 <send_uart>
  	send_uart("\n\n");
 80021d8:	4835      	ldr	r0, [pc, #212]	; (80022b0 <main+0x37c>)
 80021da:	f7ff fe93 	bl	8001f04 <send_uart>

  	/* Close file */
  	f_close(&fil);
 80021de:	482f      	ldr	r0, [pc, #188]	; (800229c <main+0x368>)
 80021e0:	f007 fa58 	bl	8009694 <f_close>

  	clear_buffer();
 80021e4:	f7ff fe74 	bl	8001ed0 <clear_buffer>


  	/*************************REMOVING FILES FROM THE DIRECTORY ****************************/

  	fresult = f_unlink("/file1.txt");
 80021e8:	483b      	ldr	r0, [pc, #236]	; (80022d8 <main+0x3a4>)
 80021ea:	f007 fd3b 	bl	8009c64 <f_unlink>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <main+0x36c>)
 80021f4:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart("file1.txt removed successfully...\n");
 80021f6:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <main+0x36c>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <main+0x2d0>
 80021fe:	4837      	ldr	r0, [pc, #220]	; (80022dc <main+0x3a8>)
 8002200:	f7ff fe80 	bl	8001f04 <send_uart>

  	fresult = f_unlink("/file2.txt");
 8002204:	4836      	ldr	r0, [pc, #216]	; (80022e0 <main+0x3ac>)
 8002206:	f007 fd2d 	bl	8009c64 <f_unlink>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <main+0x36c>)
 8002210:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart("file2.txt removed successfully...\n");
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <main+0x36c>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <main+0x2ec>
 800221a:	4832      	ldr	r0, [pc, #200]	; (80022e4 <main+0x3b0>)
 800221c:	f7ff fe72 	bl	8001f04 <send_uart>

  	/* Unmount SDCARD */
  	fresult = f_mount(NULL, "/", 1);
 8002220:	2201      	movs	r2, #1
 8002222:	4931      	ldr	r1, [pc, #196]	; (80022e8 <main+0x3b4>)
 8002224:	2000      	movs	r0, #0
 8002226:	f006 fcff 	bl	8008c28 <f_mount>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <main+0x36c>)
 8002230:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 8002232:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <main+0x36c>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <main+0x30c>
 800223a:	482c      	ldr	r0, [pc, #176]	; (80022ec <main+0x3b8>)
 800223c:	f7ff fe62 	bl	8001f04 <send_uart>


//*******************************************************SD_CARD FUNCTIONS**************************************
  	printf("Starting..\n");
 8002240:	482b      	ldr	r0, [pc, #172]	; (80022f0 <main+0x3bc>)
 8002242:	f009 fdc3 	bl	800bdcc <puts>
  	fflush(stdout);
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <main+0x3c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4618      	mov	r0, r3
 800224e:	f008 fffb 	bl	800b248 <fflush>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensor_data,
 8002252:	2208      	movs	r2, #8
 8002254:	4928      	ldr	r1, [pc, #160]	; (80022f8 <main+0x3c4>)
 8002256:	4829      	ldr	r0, [pc, #164]	; (80022fc <main+0x3c8>)
 8002258:	f001 fa86 	bl	8003768 <HAL_ADC_Start_DMA>
			sizeof(sensor_data) / sizeof(int16_t));
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800225c:	213c      	movs	r1, #60	; 0x3c
 800225e:	4828      	ldr	r0, [pc, #160]	; (8002300 <main+0x3cc>)
 8002260:	f004 fa02 	bl	8006668 <HAL_TIM_Encoder_Start>
	//start LCD
	lcd_init();
 8002264:	f7ff fd80 	bl	8001d68 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (activeScreen) {
 8002268:	4b26      	ldr	r3, [pc, #152]	; (8002304 <main+0x3d0>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	e04b      	b.n	8002308 <main+0x3d4>
 8002270:	0800c5b4 	.word	0x0800c5b4
 8002274:	2000a514 	.word	0x2000a514
 8002278:	2000a208 	.word	0x2000a208
 800227c:	0800c5d8 	.word	0x0800c5d8
 8002280:	3fe00000 	.word	0x3fe00000
 8002284:	2000a51c 	.word	0x2000a51c
 8002288:	0800c5dc 	.word	0x0800c5dc
 800228c:	2000a490 	.word	0x2000a490
 8002290:	2000a48c 	.word	0x2000a48c
 8002294:	0800c5f8 	.word	0x0800c5f8
 8002298:	0800c614 	.word	0x0800c614
 800229c:	2000a520 	.word	0x2000a520
 80022a0:	2000a518 	.word	0x2000a518
 80022a4:	0800c620 	.word	0x0800c620
 80022a8:	0800c668 	.word	0x0800c668
 80022ac:	0800c694 	.word	0x0800c694
 80022b0:	0800c6d4 	.word	0x0800c6d4
 80022b4:	0800c6d8 	.word	0x0800c6d8
 80022b8:	0800c6e4 	.word	0x0800c6e4
 80022bc:	2000a510 	.word	0x2000a510
 80022c0:	0800c73c 	.word	0x0800c73c
 80022c4:	0800c764 	.word	0x0800c764
 80022c8:	2000a488 	.word	0x2000a488
 80022cc:	0800c794 	.word	0x0800c794
 80022d0:	0800c7b4 	.word	0x0800c7b4
 80022d4:	0800c7e8 	.word	0x0800c7e8
 80022d8:	0800c814 	.word	0x0800c814
 80022dc:	0800c820 	.word	0x0800c820
 80022e0:	0800c844 	.word	0x0800c844
 80022e4:	0800c850 	.word	0x0800c850
 80022e8:	0800c58c 	.word	0x0800c58c
 80022ec:	0800c874 	.word	0x0800c874
 80022f0:	0800c898 	.word	0x0800c898
 80022f4:	20000030 	.word	0x20000030
 80022f8:	2000a20c 	.word	0x2000a20c
 80022fc:	2000a10c 	.word	0x2000a10c
 8002300:	2000a8b0 	.word	0x2000a8b0
 8002304:	2000a0b4 	.word	0x2000a0b4
 8002308:	2b03      	cmp	r3, #3
 800230a:	f200 810b 	bhi.w	8002524 <main+0x5f0>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <main+0x3e0>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002325 	.word	0x08002325
 8002318:	080023dd 	.word	0x080023dd
 800231c:	08002459 	.word	0x08002459
 8002320:	080024bf 	.word	0x080024bf
		case 0:
			for (int currentIter = 0; currentIter < oversamplingPrescaler; ++currentIter) {
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e01f      	b.n	800236a <main+0x436>
				for (int currentChan = 0; currentChan < activeChannels; ++currentChan) {
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	e010      	b.n	8002352 <main+0x41e>
					temp_data[currentChan] += sensor_data[currentChan];
 8002330:	4aa6      	ldr	r2, [pc, #664]	; (80025cc <main+0x698>)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002338:	49a5      	ldr	r1, [pc, #660]	; (80025d0 <main+0x69c>)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002340:	4413      	add	r3, r2
 8002342:	b299      	uxth	r1, r3
 8002344:	4aa1      	ldr	r2, [pc, #644]	; (80025cc <main+0x698>)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (int currentChan = 0; currentChan < activeChannels; ++currentChan) {
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	3301      	adds	r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	4ba0      	ldr	r3, [pc, #640]	; (80025d4 <main+0x6a0>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4293      	cmp	r3, r2
 800235c:	dbe8      	blt.n	8002330 <main+0x3fc>
					assert_param(temp_data[currentChan] <= UINT16_MAX);
				}
				HAL_Delay(50);
 800235e:	2032      	movs	r0, #50	; 0x32
 8002360:	f001 f99a 	bl	8003698 <HAL_Delay>
			for (int currentIter = 0; currentIter < oversamplingPrescaler; ++currentIter) {
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3301      	adds	r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b9b      	ldr	r3, [pc, #620]	; (80025d8 <main+0x6a4>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4293      	cmp	r3, r2
 8002374:	dbd9      	blt.n	800232a <main+0x3f6>
			}
			for (int var = 0; var < activeChannels; ++var) {
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	e015      	b.n	80023a8 <main+0x474>
				prepared_data[var] = temp_data[var] / oversamplingPrescaler;
 800237c:	4a93      	ldr	r2, [pc, #588]	; (80025cc <main+0x698>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002384:	461a      	mov	r2, r3
 8002386:	4b94      	ldr	r3, [pc, #592]	; (80025d8 <main+0x6a4>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	fb92 f3f3 	sdiv	r3, r2, r3
 800238e:	b299      	uxth	r1, r3
 8002390:	4a92      	ldr	r2, [pc, #584]	; (80025dc <main+0x6a8>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				temp_data[var] = 0;
 8002398:	4a8c      	ldr	r2, [pc, #560]	; (80025cc <main+0x698>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2100      	movs	r1, #0
 800239e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int var = 0; var < activeChannels; ++var) {
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3301      	adds	r3, #1
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	4b8a      	ldr	r3, [pc, #552]	; (80025d4 <main+0x6a0>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4293      	cmp	r3, r2
 80023b2:	dbe3      	blt.n	800237c <main+0x448>
			}
			show_sensor_data(prepared_data, activeChannels);
 80023b4:	4b87      	ldr	r3, [pc, #540]	; (80025d4 <main+0x6a0>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	4888      	ldr	r0, [pc, #544]	; (80025dc <main+0x6a8>)
 80023bc:	f000 fbb4 	bl	8002b28 <show_sensor_data>
			HAL_Delay(1000);
 80023c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023c4:	f001 f968 	bl	8003698 <HAL_Delay>
			printf("Sensor data case executed.\n");
 80023c8:	4885      	ldr	r0, [pc, #532]	; (80025e0 <main+0x6ac>)
 80023ca:	f009 fcff 	bl	800bdcc <puts>
			fflush(stdout);
 80023ce:	4b85      	ldr	r3, [pc, #532]	; (80025e4 <main+0x6b0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f008 ff37 	bl	800b248 <fflush>
			break;
 80023da:	e0a3      	b.n	8002524 <main+0x5f0>
		case 1:
			currentItem = (__HAL_TIM_GET_COUNTER(&htim2)>>1) % menuMaxIndex;
 80023dc:	4b82      	ldr	r3, [pc, #520]	; (80025e8 <main+0x6b4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	4a81      	ldr	r2, [pc, #516]	; (80025ec <main+0x6b8>)
 80023e6:	8812      	ldrh	r2, [r2, #0]
 80023e8:	b212      	sxth	r2, r2
 80023ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80023ee:	fb02 f201 	mul.w	r2, r2, r1
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b7e      	ldr	r3, [pc, #504]	; (80025f0 <main+0x6bc>)
 80023f8:	701a      	strb	r2, [r3, #0]
			assert(currentItem <= menuMaxIndex-1);
 80023fa:	4b7c      	ldr	r3, [pc, #496]	; (80025ec <main+0x6b8>)
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	b21b      	sxth	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	4b7b      	ldr	r3, [pc, #492]	; (80025f0 <main+0x6bc>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	dc06      	bgt.n	8002418 <main+0x4e4>
 800240a:	4b7a      	ldr	r3, [pc, #488]	; (80025f4 <main+0x6c0>)
 800240c:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <main+0x6c4>)
 800240e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8002412:	487a      	ldr	r0, [pc, #488]	; (80025fc <main+0x6c8>)
 8002414:	f008 fe32 	bl	800b07c <__assert_func>
			show_menu_window();
 8002418:	f000 f9f0 	bl	80027fc <show_menu_window>
			deselect_item(previousItem);
 800241c:	4b78      	ldr	r3, [pc, #480]	; (8002600 <main+0x6cc>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f000 fc3e 	bl	8002ca2 <deselect_item>
			select_item(currentItem);
 8002426:	4b72      	ldr	r3, [pc, #456]	; (80025f0 <main+0x6bc>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fc10 	bl	8002c50 <select_item>
			if (previousItem != currentItem) {
 8002430:	4b73      	ldr	r3, [pc, #460]	; (8002600 <main+0x6cc>)
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	4b6e      	ldr	r3, [pc, #440]	; (80025f0 <main+0x6bc>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d003      	beq.n	8002444 <main+0x510>
				previousItem = currentItem;
 800243c:	4b6c      	ldr	r3, [pc, #432]	; (80025f0 <main+0x6bc>)
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	4b6f      	ldr	r3, [pc, #444]	; (8002600 <main+0x6cc>)
 8002442:	701a      	strb	r2, [r3, #0]
			}
			printf("Main menu case executed..\n");
 8002444:	486f      	ldr	r0, [pc, #444]	; (8002604 <main+0x6d0>)
 8002446:	f009 fcc1 	bl	800bdcc <puts>
			fflush(stdout);
 800244a:	4b66      	ldr	r3, [pc, #408]	; (80025e4 <main+0x6b0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4618      	mov	r0, r3
 8002452:	f008 fef9 	bl	800b248 <fflush>
			break;
 8002456:	e065      	b.n	8002524 <main+0x5f0>
		case 2:
			activeChannels = __HAL_TIM_GET_COUNTER(&htim2)>>1;
 8002458:	4b63      	ldr	r3, [pc, #396]	; (80025e8 <main+0x6b4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b5c      	ldr	r3, [pc, #368]	; (80025d4 <main+0x6a0>)
 8002464:	701a      	strb	r2, [r3, #0]
			if (activeChannels < 1){
 8002466:	4b5b      	ldr	r3, [pc, #364]	; (80025d4 <main+0x6a0>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <main+0x548>
				activeChannels = 1;
 800246e:	4b59      	ldr	r3, [pc, #356]	; (80025d4 <main+0x6a0>)
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 2);
 8002474:	4b5c      	ldr	r3, [pc, #368]	; (80025e8 <main+0x6b4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2202      	movs	r2, #2
 800247a:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (activeChannels > 8) {
 800247c:	4b55      	ldr	r3, [pc, #340]	; (80025d4 <main+0x6a0>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b08      	cmp	r3, #8
 8002482:	d906      	bls.n	8002492 <main+0x55e>
				activeChannels = 8;
 8002484:	4b53      	ldr	r3, [pc, #332]	; (80025d4 <main+0x6a0>)
 8002486:	2208      	movs	r2, #8
 8002488:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 16);
 800248a:	4b57      	ldr	r3, [pc, #348]	; (80025e8 <main+0x6b4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2210      	movs	r2, #16
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
			}
			update_channels_value(activeChannels, rgb565(200, 200, 200));
 8002492:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <main+0x6a0>)
 8002494:	781c      	ldrb	r4, [r3, #0]
 8002496:	22c8      	movs	r2, #200	; 0xc8
 8002498:	21c8      	movs	r1, #200	; 0xc8
 800249a:	20c8      	movs	r0, #200	; 0xc8
 800249c:	f008 fdbc 	bl	800b018 <rgb565>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4619      	mov	r1, r3
 80024a4:	4620      	mov	r0, r4
 80024a6:	f000 fa4f 	bl	8002948 <update_channels_value>
			printf("Active channels case executed..\n");
 80024aa:	4857      	ldr	r0, [pc, #348]	; (8002608 <main+0x6d4>)
 80024ac:	f009 fc8e 	bl	800bdcc <puts>
			fflush(stdout);
 80024b0:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <main+0x6b0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f008 fec6 	bl	800b248 <fflush>
			break;
 80024bc:	e032      	b.n	8002524 <main+0x5f0>
		case 3:
			oversamplingPrescaler = __HAL_TIM_GET_COUNTER(&htim2)>>1;
 80024be:	4b4a      	ldr	r3, [pc, #296]	; (80025e8 <main+0x6b4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <main+0x6a4>)
 80024ca:	701a      	strb	r2, [r3, #0]
			if (oversamplingPrescaler < 1) {
 80024cc:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <main+0x6a4>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d106      	bne.n	80024e2 <main+0x5ae>
				oversamplingPrescaler = 1;
 80024d4:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <main+0x6a4>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 2);
 80024da:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <main+0x6b4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2202      	movs	r2, #2
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (oversamplingPrescaler > 15) {
 80024e2:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <main+0x6a4>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	d906      	bls.n	80024f8 <main+0x5c4>
				oversamplingPrescaler = 15;
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <main+0x6a4>)
 80024ec:	220f      	movs	r2, #15
 80024ee:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 30); //encoder counts up to 19 so 19*2 is max available value rn
 80024f0:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <main+0x6b4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	221e      	movs	r2, #30
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24
			}
			update_oversampling_prescaler(oversamplingPrescaler, rgb565(220, 220, 220));
 80024f8:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <main+0x6a4>)
 80024fa:	781c      	ldrb	r4, [r3, #0]
 80024fc:	22dc      	movs	r2, #220	; 0xdc
 80024fe:	21dc      	movs	r1, #220	; 0xdc
 8002500:	20dc      	movs	r0, #220	; 0xdc
 8002502:	f008 fd89 	bl	800b018 <rgb565>
 8002506:	4603      	mov	r3, r0
 8002508:	4619      	mov	r1, r3
 800250a:	4620      	mov	r0, r4
 800250c:	f000 fa82 	bl	8002a14 <update_oversampling_prescaler>
			printf("Oversampling case executed...\n");
 8002510:	483e      	ldr	r0, [pc, #248]	; (800260c <main+0x6d8>)
 8002512:	f009 fc5b 	bl	800bdcc <puts>
			fflush(stdout);
 8002516:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <main+0x6b0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4618      	mov	r0, r3
 800251e:	f008 fe93 	bl	800b248 <fflush>
			break;
 8002522:	bf00      	nop
		}
		if (encoderBtnFlag) {
 8002524:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <main+0x6dc>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8086 	beq.w	800263c <main+0x708>
			encoderBtnFlag = 0;
 8002530:	4b37      	ldr	r3, [pc, #220]	; (8002610 <main+0x6dc>)
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
			switch (activeScreen) {
 8002536:	4b37      	ldr	r3, [pc, #220]	; (8002614 <main+0x6e0>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b03      	cmp	r3, #3
 800253e:	d873      	bhi.n	8002628 <main+0x6f4>
 8002540:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <main+0x614>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	08002559 	.word	0x08002559
 800254c:	08002569 	.word	0x08002569
 8002550:	080025bb 	.word	0x080025bb
 8002554:	08002619 	.word	0x08002619
			case 0: //sensor to menu
				__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <main+0x6b4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 8002560:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <main+0x6e0>)
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
				break;
 8002566:	e060      	b.n	800262a <main+0x6f6>
			case 1:	//menu to ...
				//menu to sensor
				if (currentItem == (menuMaxIndex - 1)) {
 8002568:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <main+0x6bc>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <main+0x6b8>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b21b      	sxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	429a      	cmp	r2, r3
 8002578:	d103      	bne.n	8002582 <main+0x64e>
					activeScreen = 0;
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <main+0x6e0>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
					break;
 8002580:	e053      	b.n	800262a <main+0x6f6>
				}
				//menu to activechannels
				else if (currentItem == 0) {
 8002582:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <main+0x6bc>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <main+0x66a>
					__HAL_TIM_GET_COUNTER(&htim2) = activeChannels*2; //you can't assign value to shifted value, hence no >> is used, silly me tried..
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <main+0x6a0>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	005a      	lsls	r2, r3, #1
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <main+0x6b4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 2;
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <main+0x6e0>)
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]
					break;
 800259c:	e045      	b.n	800262a <main+0x6f6>
				}
				else if (currentItem == 1) {
 800259e:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <main+0x6bc>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d109      	bne.n	80025ba <main+0x686>
					__HAL_TIM_GET_COUNTER(&htim2) = oversamplingPrescaler*2; //you can't assign value to shifted value, hence no >> is used, silly me tried..
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <main+0x6a4>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	005a      	lsls	r2, r3, #1
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <main+0x6b4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24
					activeScreen = 3;
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <main+0x6e0>)
 80025b4:	2203      	movs	r2, #3
 80025b6:	701a      	strb	r2, [r3, #0]
					break;
 80025b8:	e037      	b.n	800262a <main+0x6f6>
				}
			case 2:
				__HAL_TIM_GET_COUNTER(&htim2) = 0;
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <main+0x6b4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2200      	movs	r2, #0
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <main+0x6e0>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
				break;
 80025c8:	e02f      	b.n	800262a <main+0x6f6>
 80025ca:	bf00      	nop
 80025cc:	2000a468 	.word	0x2000a468
 80025d0:	2000a20c 	.word	0x2000a20c
 80025d4:	20000004 	.word	0x20000004
 80025d8:	20000005 	.word	0x20000005
 80025dc:	2000a478 	.word	0x2000a478
 80025e0:	0800c8a4 	.word	0x0800c8a4
 80025e4:	20000030 	.word	0x20000030
 80025e8:	2000a8b0 	.word	0x2000a8b0
 80025ec:	20000002 	.word	0x20000002
 80025f0:	2000a519 	.word	0x2000a519
 80025f4:	0800c8c0 	.word	0x0800c8c0
 80025f8:	0800fb0c 	.word	0x0800fb0c
 80025fc:	0800c8e0 	.word	0x0800c8e0
 8002600:	2000a21c 	.word	0x2000a21c
 8002604:	0800c8f4 	.word	0x0800c8f4
 8002608:	0800c910 	.word	0x0800c910
 800260c:	0800c930 	.word	0x0800c930
 8002610:	2000a21d 	.word	0x2000a21d
 8002614:	2000a0b4 	.word	0x2000a0b4
			case 3:
				__HAL_TIM_GET_COUNTER(&htim2) = 0;
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <main+0x760>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2200      	movs	r2, #0
 800261e:	625a      	str	r2, [r3, #36]	; 0x24
				activeScreen = 1;
 8002620:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <main+0x764>)
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
				break;
 8002626:	e000      	b.n	800262a <main+0x6f6>
			default:
				break;
 8002628:	bf00      	nop
			}
			printf("Button interrupt executed....\n");
 800262a:	481c      	ldr	r0, [pc, #112]	; (800269c <main+0x768>)
 800262c:	f009 fbce 	bl	800bdcc <puts>
			fflush(stdout);
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <main+0x76c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	4618      	mov	r0, r3
 8002638:	f008 fe06 	bl	800b248 <fflush>
		}

		snprintf(debug_text, 25, "MENU:%u | active:%d", currentItem,
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <main+0x770>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <main+0x764>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	4613      	mov	r3, r2
 800264c:	4a16      	ldr	r2, [pc, #88]	; (80026a8 <main+0x774>)
 800264e:	2119      	movs	r1, #25
 8002650:	4816      	ldr	r0, [pc, #88]	; (80026ac <main+0x778>)
 8002652:	f009 fbd3 	bl	800bdfc <sniprintf>
				activeScreen);
		hagl_put_text(debug_text, 10, 145, rgb565(245, 245, 255), font6x9);
 8002656:	22ff      	movs	r2, #255	; 0xff
 8002658:	21f5      	movs	r1, #245	; 0xf5
 800265a:	20f5      	movs	r0, #245	; 0xf5
 800265c:	f008 fcdc 	bl	800b018 <rgb565>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <main+0x77c>)
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	2291      	movs	r2, #145	; 0x91
 800266c:	210a      	movs	r1, #10
 800266e:	480f      	ldr	r0, [pc, #60]	; (80026ac <main+0x778>)
 8002670:	f008 fa88 	bl	800ab84 <hagl_put_text>
		lcd_copy();
 8002674:	f7ff fbca 	bl	8001e0c <lcd_copy>
		printf("Main while loop executed.............................\n");
 8002678:	480e      	ldr	r0, [pc, #56]	; (80026b4 <main+0x780>)
 800267a:	f009 fba7 	bl	800bdcc <puts>
		fflush(stdout);
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <main+0x76c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4618      	mov	r0, r3
 8002686:	f008 fddf 	bl	800b248 <fflush>
		HAL_Delay(100);
 800268a:	2064      	movs	r0, #100	; 0x64
 800268c:	f001 f804 	bl	8003698 <HAL_Delay>
		switch (activeScreen) {
 8002690:	e5ea      	b.n	8002268 <main+0x334>
 8002692:	bf00      	nop
 8002694:	2000a8b0 	.word	0x2000a8b0
 8002698:	2000a0b4 	.word	0x2000a0b4
 800269c:	0800c950 	.word	0x0800c950
 80026a0:	20000030 	.word	0x20000030
 80026a4:	2000a519 	.word	0x2000a519
 80026a8:	0800c970 	.word	0x0800c970
 80026ac:	2000a750 	.word	0x2000a750
 80026b0:	0800cb54 	.word	0x0800cb54
 80026b4:	0800c984 	.word	0x0800c984

080026b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b094      	sub	sp, #80	; 0x50
 80026bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026be:	f107 0320 	add.w	r3, r7, #32
 80026c2:	2230      	movs	r2, #48	; 0x30
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f008 ff72 	bl	800b5b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026cc:	f107 030c 	add.w	r3, r7, #12
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <SystemClock_Config+0xd0>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	4a28      	ldr	r2, [pc, #160]	; (8002788 <SystemClock_Config+0xd0>)
 80026e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ea:	6413      	str	r3, [r2, #64]	; 0x40
 80026ec:	4b26      	ldr	r3, [pc, #152]	; (8002788 <SystemClock_Config+0xd0>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80026f8:	2300      	movs	r3, #0
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	4b23      	ldr	r3, [pc, #140]	; (800278c <SystemClock_Config+0xd4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002704:	4a21      	ldr	r2, [pc, #132]	; (800278c <SystemClock_Config+0xd4>)
 8002706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b1f      	ldr	r3, [pc, #124]	; (800278c <SystemClock_Config+0xd4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002718:	230a      	movs	r3, #10
 800271a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800271c:	2301      	movs	r3, #1
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002720:	2310      	movs	r3, #16
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002724:	2301      	movs	r3, #1
 8002726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002728:	2302      	movs	r3, #2
 800272a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800272c:	2300      	movs	r3, #0
 800272e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002730:	2308      	movs	r3, #8
 8002732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002734:	2354      	movs	r3, #84	; 0x54
 8002736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002738:	2302      	movs	r3, #2
 800273a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800273c:	2304      	movs	r3, #4
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002740:	f107 0320 	add.w	r3, r7, #32
 8002744:	4618      	mov	r0, r3
 8002746:	f002 fb51 	bl	8004dec <HAL_RCC_OscConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002750:	f000 f84e 	bl	80027f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002754:	230f      	movs	r3, #15
 8002756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002758:	2302      	movs	r3, #2
 800275a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	2102      	movs	r1, #2
 8002770:	4618      	mov	r0, r3
 8002772:	f002 fdb3 	bl	80052dc <HAL_RCC_ClockConfig>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800277c:	f000 f838 	bl	80027f0 <Error_Handler>
  }
}
 8002780:	bf00      	nop
 8002782:	3750      	adds	r7, #80	; 0x50
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	40007000 	.word	0x40007000

08002790 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
if (hspi == &hspi1) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a04      	ldr	r2, [pc, #16]	; (80027ac <HAL_SPI_TxCpltCallback+0x1c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_SPI_TxCpltCallback+0x14>
	lcd_transfer_done();
 80027a0:	f7ff fb5a 	bl	8001e58 <lcd_transfer_done>
}
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	2000a7f4 	.word	0x2000a7f4

080027b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
if (GPIO_Pin == ENC_BTN_Pin) {
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c0:	d10e      	bne.n	80027e0 <HAL_GPIO_EXTI_Callback+0x30>
	while (HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_RESET) {
 80027c2:	bf00      	nop
 80027c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027c8:	4807      	ldr	r0, [pc, #28]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80027ca:	f002 f981 	bl	8004ad0 <HAL_GPIO_ReadPin>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f7      	beq.n	80027c4 <HAL_GPIO_EXTI_Callback+0x14>

	}
	HAL_Delay(50); //basic debounce
 80027d4:	2032      	movs	r0, #50	; 0x32
 80027d6:	f000 ff5f 	bl	8003698 <HAL_Delay>
	encoderBtnFlag = 1;
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <HAL_GPIO_EXTI_Callback+0x3c>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
}
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40020400 	.word	0x40020400
 80027ec:	2000a21d 	.word	0x2000a21d

080027f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f4:	b672      	cpsid	i
}
 80027f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 80027f8:	e7fe      	b.n	80027f8 <Error_Handler+0x8>
	...

080027fc <show_menu_window>:

char text_to_parse[16];
static uint16_t ch_buffer[4];
static uint16_t os_buffer[4];

void show_menu_window() {
 80027fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002800:	b085      	sub	sp, #20
 8002802:	af02      	add	r7, sp, #8
	hagl_clear_screen();
 8002804:	f008 fa44 	bl	800ac90 <hagl_clear_screen>

	for (int i = 0; i < 5; ++i) {
 8002808:	2300      	movs	r3, #0
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	e028      	b.n	8002860 <show_menu_window+0x64>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	b21d      	sxth	r5, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	b21e      	sxth	r6, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	b29b      	uxth	r3, r3
 800281a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800281e:	b29b      	uxth	r3, r3
 8002820:	fa0f f883 	sxth.w	r8, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800282c:	b29b      	uxth	r3, r3
 800282e:	fa0f f983 	sxth.w	r9, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	b29b      	uxth	r3, r3
 8002836:	f1c3 0305 	rsb	r3, r3, #5
 800283a:	b29b      	uxth	r3, r3
 800283c:	b21c      	sxth	r4, r3
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	20ff      	movs	r0, #255	; 0xff
 8002844:	f008 fbe8 	bl	800b018 <rgb565>
 8002848:	4603      	mov	r3, r0
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	9400      	str	r4, [sp, #0]
 800284e:	464b      	mov	r3, r9
 8002850:	4642      	mov	r2, r8
 8002852:	4631      	mov	r1, r6
 8002854:	4628      	mov	r0, r5
 8002856:	f008 fa45 	bl	800ace4 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3301      	adds	r3, #1
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b04      	cmp	r3, #4
 8002864:	ddd3      	ble.n	800280e <show_menu_window+0x12>
				rgb565(255, 0, 0));
	}
	hagl_put_text("USTAWIENIA", 10, 10, rgb565(255, 0, 0), font6x9);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	20ff      	movs	r0, #255	; 0xff
 800286c:	f008 fbd4 	bl	800b018 <rgb565>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <show_menu_window+0x12c>)
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	220a      	movs	r2, #10
 800287c:	210a      	movs	r1, #10
 800287e:	482b      	ldr	r0, [pc, #172]	; (800292c <show_menu_window+0x130>)
 8002880:	f008 f980 	bl	800ab84 <hagl_put_text>
	hagl_put_text("Ilosc kanalow:", 10, 30, rgb565(0, 102, 204), font5x7);
 8002884:	22cc      	movs	r2, #204	; 0xcc
 8002886:	2166      	movs	r1, #102	; 0x66
 8002888:	2000      	movs	r0, #0
 800288a:	f008 fbc5 	bl	800b018 <rgb565>
 800288e:	4603      	mov	r3, r0
 8002890:	461a      	mov	r2, r3
 8002892:	4b27      	ldr	r3, [pc, #156]	; (8002930 <show_menu_window+0x134>)
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	221e      	movs	r2, #30
 800289a:	210a      	movs	r1, #10
 800289c:	4825      	ldr	r0, [pc, #148]	; (8002934 <show_menu_window+0x138>)
 800289e:	f008 f971 	bl	800ab84 <hagl_put_text>
	hagl_put_text("Oversampling:", 10, 50, rgb565(0, 102, 204), font5x7);
 80028a2:	22cc      	movs	r2, #204	; 0xcc
 80028a4:	2166      	movs	r1, #102	; 0x66
 80028a6:	2000      	movs	r0, #0
 80028a8:	f008 fbb6 	bl	800b018 <rgb565>
 80028ac:	4603      	mov	r3, r0
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <show_menu_window+0x134>)
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	2232      	movs	r2, #50	; 0x32
 80028b8:	210a      	movs	r1, #10
 80028ba:	481f      	ldr	r0, [pc, #124]	; (8002938 <show_menu_window+0x13c>)
 80028bc:	f008 f962 	bl	800ab84 <hagl_put_text>
	hagl_put_text("Kalibracja", 10, 70, rgb565(0, 102, 204), font5x7);
 80028c0:	22cc      	movs	r2, #204	; 0xcc
 80028c2:	2166      	movs	r1, #102	; 0x66
 80028c4:	2000      	movs	r0, #0
 80028c6:	f008 fba7 	bl	800b018 <rgb565>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <show_menu_window+0x134>)
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	4613      	mov	r3, r2
 80028d4:	2246      	movs	r2, #70	; 0x46
 80028d6:	210a      	movs	r1, #10
 80028d8:	4818      	ldr	r0, [pc, #96]	; (800293c <show_menu_window+0x140>)
 80028da:	f008 f953 	bl	800ab84 <hagl_put_text>
	hagl_put_text("Inne", 10, 90, rgb565(0, 102, 204), font5x7);
 80028de:	22cc      	movs	r2, #204	; 0xcc
 80028e0:	2166      	movs	r1, #102	; 0x66
 80028e2:	2000      	movs	r0, #0
 80028e4:	f008 fb98 	bl	800b018 <rgb565>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <show_menu_window+0x134>)
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	225a      	movs	r2, #90	; 0x5a
 80028f4:	210a      	movs	r1, #10
 80028f6:	4812      	ldr	r0, [pc, #72]	; (8002940 <show_menu_window+0x144>)
 80028f8:	f008 f944 	bl	800ab84 <hagl_put_text>
	hagl_put_text("Powrot", 10, 110, rgb565(102, 255, 102), font5x7);
 80028fc:	2266      	movs	r2, #102	; 0x66
 80028fe:	21ff      	movs	r1, #255	; 0xff
 8002900:	2066      	movs	r0, #102	; 0x66
 8002902:	f008 fb89 	bl	800b018 <rgb565>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <show_menu_window+0x134>)
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	226e      	movs	r2, #110	; 0x6e
 8002912:	210a      	movs	r1, #10
 8002914:	480b      	ldr	r0, [pc, #44]	; (8002944 <show_menu_window+0x148>)
 8002916:	f008 f935 	bl	800ab84 <hagl_put_text>
	lcd_copy();
 800291a:	f7ff fa77 	bl	8001e0c <lcd_copy>
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002928:	0800fb14 	.word	0x0800fb14
 800292c:	0800c9bc 	.word	0x0800c9bc
 8002930:	08012acc 	.word	0x08012acc
 8002934:	0800c9c8 	.word	0x0800c9c8
 8002938:	0800c9d8 	.word	0x0800c9d8
 800293c:	0800c9e8 	.word	0x0800c9e8
 8002940:	0800c9f4 	.word	0x0800c9f4
 8002944:	0800c9fc 	.word	0x0800c9fc

08002948 <update_channels_value>:

void update_channels_value(uint8_t activeChannels, uint16_t color) {
 8002948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800294c:	b087      	sub	sp, #28
 800294e:	af02      	add	r7, sp, #8
 8002950:	4603      	mov	r3, r0
 8002952:	460a      	mov	r2, r1
 8002954:	71fb      	strb	r3, [r7, #7]
 8002956:	4613      	mov	r3, r2
 8002958:	80bb      	strh	r3, [r7, #4]
	hagl_clear_screen();
 800295a:	f008 f999 	bl	800ac90 <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	e028      	b.n	80029b6 <update_channels_value+0x6e>
			hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	b21d      	sxth	r5, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	b21e      	sxth	r6, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	b29b      	uxth	r3, r3
 8002970:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002974:	b29b      	uxth	r3, r3
 8002976:	fa0f f883 	sxth.w	r8, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	b29b      	uxth	r3, r3
 800297e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002982:	b29b      	uxth	r3, r3
 8002984:	fa0f f983 	sxth.w	r9, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	b29b      	uxth	r3, r3
 800298c:	f1c3 0305 	rsb	r3, r3, #5
 8002990:	b29b      	uxth	r3, r3
 8002992:	b21c      	sxth	r4, r3
 8002994:	2200      	movs	r2, #0
 8002996:	2100      	movs	r1, #0
 8002998:	20ff      	movs	r0, #255	; 0xff
 800299a:	f008 fb3d 	bl	800b018 <rgb565>
 800299e:	4603      	mov	r3, r0
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	9400      	str	r4, [sp, #0]
 80029a4:	464b      	mov	r3, r9
 80029a6:	4642      	mov	r2, r8
 80029a8:	4631      	mov	r1, r6
 80029aa:	4628      	mov	r0, r5
 80029ac:	f008 f99a 	bl	800ace4 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3301      	adds	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	ddd3      	ble.n	8002964 <update_channels_value+0x1c>
					rgb565(255, 0, 0));
		}
	hagl_put_text("AKTYWNE KANALY", 20, 10, rgb565(255, 0, 0), font6x9);
 80029bc:	2200      	movs	r2, #0
 80029be:	2100      	movs	r1, #0
 80029c0:	20ff      	movs	r0, #255	; 0xff
 80029c2:	f008 fb29 	bl	800b018 <rgb565>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <update_channels_value+0xbc>)
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	4613      	mov	r3, r2
 80029d0:	220a      	movs	r2, #10
 80029d2:	2114      	movs	r1, #20
 80029d4:	480c      	ldr	r0, [pc, #48]	; (8002a08 <update_channels_value+0xc0>)
 80029d6:	f008 f8d5 	bl	800ab84 <hagl_put_text>
	snprintf(ch_buffer, 4, "%u", activeChannels);
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <update_channels_value+0xc4>)
 80029de:	2104      	movs	r1, #4
 80029e0:	480b      	ldr	r0, [pc, #44]	; (8002a10 <update_channels_value+0xc8>)
 80029e2:	f009 fa0b 	bl	800bdfc <sniprintf>
	hagl_put_text((char *)ch_buffer, 60, 50, color, font6x9);
 80029e6:	88bb      	ldrh	r3, [r7, #4]
 80029e8:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <update_channels_value+0xbc>)
 80029ea:	9200      	str	r2, [sp, #0]
 80029ec:	2232      	movs	r2, #50	; 0x32
 80029ee:	213c      	movs	r1, #60	; 0x3c
 80029f0:	4807      	ldr	r0, [pc, #28]	; (8002a10 <update_channels_value+0xc8>)
 80029f2:	f008 f8c7 	bl	800ab84 <hagl_put_text>
	lcd_copy();
 80029f6:	f7ff fa09 	bl	8001e0c <lcd_copy>
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a04:	0800fb14 	.word	0x0800fb14
 8002a08:	0800ca04 	.word	0x0800ca04
 8002a0c:	0800ca14 	.word	0x0800ca14
 8002a10:	2000a0b8 	.word	0x2000a0b8

08002a14 <update_oversampling_prescaler>:

void update_oversampling_prescaler(uint8_t oversamplingPrescaler, uint16_t color) {
 8002a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a18:	b087      	sub	sp, #28
 8002a1a:	af02      	add	r7, sp, #8
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	460a      	mov	r2, r1
 8002a20:	71fb      	strb	r3, [r7, #7]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80bb      	strh	r3, [r7, #4]
	hagl_clear_screen();
 8002a26:	f008 f933 	bl	800ac90 <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e028      	b.n	8002a82 <update_oversampling_prescaler+0x6e>
			hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	b21d      	sxth	r5, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	b21e      	sxth	r6, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	fa0f f883 	sxth.w	r8, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	fa0f f983 	sxth.w	r9, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f1c3 0305 	rsb	r3, r3, #5
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b21c      	sxth	r4, r3
 8002a60:	2200      	movs	r2, #0
 8002a62:	2100      	movs	r1, #0
 8002a64:	20ff      	movs	r0, #255	; 0xff
 8002a66:	f008 fad7 	bl	800b018 <rgb565>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	9400      	str	r4, [sp, #0]
 8002a70:	464b      	mov	r3, r9
 8002a72:	4642      	mov	r2, r8
 8002a74:	4631      	mov	r1, r6
 8002a76:	4628      	mov	r0, r5
 8002a78:	f008 f934 	bl	800ace4 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	ddd3      	ble.n	8002a30 <update_oversampling_prescaler+0x1c>
					rgb565(255, 0, 0));
		}
	hagl_put_text("OVERSAMPLING", 30, 10, rgb565(255, 0, 0), font6x9);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	20ff      	movs	r0, #255	; 0xff
 8002a8e:	f008 fac3 	bl	800b018 <rgb565>
 8002a92:	4603      	mov	r3, r0
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <update_oversampling_prescaler+0xf8>)
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	220a      	movs	r2, #10
 8002a9e:	211e      	movs	r1, #30
 8002aa0:	481b      	ldr	r0, [pc, #108]	; (8002b10 <update_oversampling_prescaler+0xfc>)
 8002aa2:	f008 f86f 	bl	800ab84 <hagl_put_text>
	hagl_put_text("Wybierz z ilu probek ", 15, 30, rgb565(0, 102, 204), font5x7);
 8002aa6:	22cc      	movs	r2, #204	; 0xcc
 8002aa8:	2166      	movs	r1, #102	; 0x66
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f008 fab4 	bl	800b018 <rgb565>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <update_oversampling_prescaler+0x100>)
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	221e      	movs	r2, #30
 8002abc:	210f      	movs	r1, #15
 8002abe:	4816      	ldr	r0, [pc, #88]	; (8002b18 <update_oversampling_prescaler+0x104>)
 8002ac0:	f008 f860 	bl	800ab84 <hagl_put_text>
	hagl_put_text("  usredniac pomiar", 15, 40, rgb565(0, 102, 204), font5x7);
 8002ac4:	22cc      	movs	r2, #204	; 0xcc
 8002ac6:	2166      	movs	r1, #102	; 0x66
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f008 faa5 	bl	800b018 <rgb565>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <update_oversampling_prescaler+0x100>)
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	2228      	movs	r2, #40	; 0x28
 8002ada:	210f      	movs	r1, #15
 8002adc:	480f      	ldr	r0, [pc, #60]	; (8002b1c <update_oversampling_prescaler+0x108>)
 8002ade:	f008 f851 	bl	800ab84 <hagl_put_text>
	snprintf(os_buffer, 4, "%u", oversamplingPrescaler);
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <update_oversampling_prescaler+0x10c>)
 8002ae6:	2104      	movs	r1, #4
 8002ae8:	480e      	ldr	r0, [pc, #56]	; (8002b24 <update_oversampling_prescaler+0x110>)
 8002aea:	f009 f987 	bl	800bdfc <sniprintf>
	hagl_put_text((char *)os_buffer, 60, 70, color, font6x9);
 8002aee:	88bb      	ldrh	r3, [r7, #4]
 8002af0:	4a06      	ldr	r2, [pc, #24]	; (8002b0c <update_oversampling_prescaler+0xf8>)
 8002af2:	9200      	str	r2, [sp, #0]
 8002af4:	2246      	movs	r2, #70	; 0x46
 8002af6:	213c      	movs	r1, #60	; 0x3c
 8002af8:	480a      	ldr	r0, [pc, #40]	; (8002b24 <update_oversampling_prescaler+0x110>)
 8002afa:	f008 f843 	bl	800ab84 <hagl_put_text>
	lcd_copy();
 8002afe:	f7ff f985 	bl	8001e0c <lcd_copy>
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b0c:	0800fb14 	.word	0x0800fb14
 8002b10:	0800ca18 	.word	0x0800ca18
 8002b14:	08012acc 	.word	0x08012acc
 8002b18:	0800ca28 	.word	0x0800ca28
 8002b1c:	0800ca40 	.word	0x0800ca40
 8002b20:	0800ca14 	.word	0x0800ca14
 8002b24:	2000a0c0 	.word	0x2000a0c0

08002b28 <show_sensor_data>:


void show_sensor_data(uint16_t sensor_data[], uint8_t activeChannels) {
 8002b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	af02      	add	r7, sp, #8
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	70fb      	strb	r3, [r7, #3]
	hagl_clear_screen();
 8002b36:	f008 f8ab 	bl	800ac90 <hagl_clear_screen>
	for (int i = 0; i < 5; ++i) {
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e028      	b.n	8002b92 <show_sensor_data+0x6a>
		hagl_draw_rounded_rectangle(i, i, LCD_WIDTH - i, LCD_HEIGHT - i, 5 - i,
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	b21d      	sxth	r5, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	b21e      	sxth	r6, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	fa0f f883 	sxth.w	r8, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	fa0f f983 	sxth.w	r9, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f1c3 0305 	rsb	r3, r3, #5
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b21c      	sxth	r4, r3
 8002b70:	2266      	movs	r2, #102	; 0x66
 8002b72:	2133      	movs	r1, #51	; 0x33
 8002b74:	2000      	movs	r0, #0
 8002b76:	f008 fa4f 	bl	800b018 <rgb565>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	9400      	str	r4, [sp, #0]
 8002b80:	464b      	mov	r3, r9
 8002b82:	4642      	mov	r2, r8
 8002b84:	4631      	mov	r1, r6
 8002b86:	4628      	mov	r0, r5
 8002b88:	f008 f8ac 	bl	800ace4 <hagl_draw_rounded_rectangle>
	for (int i = 0; i < 5; ++i) {
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	ddd3      	ble.n	8002b40 <show_sensor_data+0x18>
				rgb565(0, 51, 102));
	}
	hagl_put_text("DANE Z CZUJNIKOW", 10, 10, rgb565(15, 127, 225), font6x9);
 8002b98:	22e1      	movs	r2, #225	; 0xe1
 8002b9a:	217f      	movs	r1, #127	; 0x7f
 8002b9c:	200f      	movs	r0, #15
 8002b9e:	f008 fa3b 	bl	800b018 <rgb565>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <show_sensor_data+0x114>)
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4613      	mov	r3, r2
 8002bac:	220a      	movs	r2, #10
 8002bae:	210a      	movs	r1, #10
 8002bb0:	4823      	ldr	r0, [pc, #140]	; (8002c40 <show_sensor_data+0x118>)
 8002bb2:	f007 ffe7 	bl	800ab84 <hagl_put_text>
	hagl_fill_rectangle(7, 27, LCD_WIDTH - 7, LCD_HEIGHT - 7, rgb565(0, 0, 0));
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f008 fa2c 	bl	800b018 <rgb565>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2399      	movs	r3, #153	; 0x99
 8002bc6:	2279      	movs	r2, #121	; 0x79
 8002bc8:	211b      	movs	r1, #27
 8002bca:	2007      	movs	r0, #7
 8002bcc:	f007 fe40 	bl	800a850 <hagl_fill_rectangle>
	for (int var = 0; var < activeChannels; ++var) {
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	e026      	b.n	8002c24 <show_sensor_data+0xfc>
		snprintf(text_to_parse, 16, "Kanal %u: \t\t%u", var, sensor_data[var]);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <show_sensor_data+0x11c>)
 8002be6:	2110      	movs	r1, #16
 8002be8:	4817      	ldr	r0, [pc, #92]	; (8002c48 <show_sensor_data+0x120>)
 8002bea:	f009 f907 	bl	800bdfc <sniprintf>
		hagl_put_text(text_to_parse, 10, 30 + var * 15, rgb565(15, 127, 225),
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	331e      	adds	r3, #30
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	b21c      	sxth	r4, r3
 8002c00:	22e1      	movs	r2, #225	; 0xe1
 8002c02:	217f      	movs	r1, #127	; 0x7f
 8002c04:	200f      	movs	r0, #15
 8002c06:	f008 fa07 	bl	800b018 <rgb565>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <show_sensor_data+0x124>)
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	4622      	mov	r2, r4
 8002c16:	210a      	movs	r1, #10
 8002c18:	480b      	ldr	r0, [pc, #44]	; (8002c48 <show_sensor_data+0x120>)
 8002c1a:	f007 ffb3 	bl	800ab84 <hagl_put_text>
	for (int var = 0; var < activeChannels; ++var) {
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	3301      	adds	r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	dbd4      	blt.n	8002bd6 <show_sensor_data+0xae>
				font5x7);
	}
	lcd_copy();
 8002c2c:	f7ff f8ee 	bl	8001e0c <lcd_copy>
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c3a:	bf00      	nop
 8002c3c:	0800fb14 	.word	0x0800fb14
 8002c40:	0800ca54 	.word	0x0800ca54
 8002c44:	0800ca68 	.word	0x0800ca68
 8002c48:	2000a76c 	.word	0x2000a76c
 8002c4c:	08012acc 	.word	0x08012acc

08002c50 <select_item>:

void select_item(int index) {
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3328      	adds	r3, #40	; 0x28
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	b21c      	sxth	r4, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	0092      	lsls	r2, r2, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3319      	adds	r3, #25
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	b21d      	sxth	r5, r3
 8002c80:	2200      	movs	r2, #0
 8002c82:	21ff      	movs	r1, #255	; 0xff
 8002c84:	20ff      	movs	r0, #255	; 0xff
 8002c86:	f008 f9c7 	bl	800b018 <rgb565>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	462b      	mov	r3, r5
 8002c90:	2278      	movs	r2, #120	; 0x78
 8002c92:	4621      	mov	r1, r4
 8002c94:	2008      	movs	r0, #8
 8002c96:	f007 fd55 	bl	800a744 <hagl_draw_rectangle>
			rgb565(255, 255, 0));
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bdb0      	pop	{r4, r5, r7, pc}

08002ca2 <deselect_item>:

void deselect_item(int index) {
 8002ca2:	b5b0      	push	{r4, r5, r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af02      	add	r7, sp, #8
 8002ca8:	6078      	str	r0, [r7, #4]
	hagl_draw_rectangle(8, 40 + 20 * index, 120, 25 + 20 * index,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	0092      	lsls	r2, r2, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3328      	adds	r3, #40	; 0x28
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	b21c      	sxth	r4, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	0092      	lsls	r2, r2, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3319      	adds	r3, #25
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	b21d      	sxth	r5, r3
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f008 f99e 	bl	800b018 <rgb565>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	462b      	mov	r3, r5
 8002ce2:	2278      	movs	r2, #120	; 0x78
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	2008      	movs	r0, #8
 8002ce8:	f007 fd2c 	bl	800a744 <hagl_draw_rectangle>
			rgb565(0, 0, 0));
}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bdb0      	pop	{r4, r5, r7, pc}

08002cf4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <MX_RTC_Init+0x44>)
 8002cfa:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <MX_RTC_Init+0x48>)
 8002cfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <MX_RTC_Init+0x44>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <MX_RTC_Init+0x44>)
 8002d06:	227f      	movs	r2, #127	; 0x7f
 8002d08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <MX_RTC_Init+0x44>)
 8002d0c:	22ff      	movs	r2, #255	; 0xff
 8002d0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <MX_RTC_Init+0x44>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <MX_RTC_Init+0x44>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <MX_RTC_Init+0x44>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d22:	4805      	ldr	r0, [pc, #20]	; (8002d38 <MX_RTC_Init+0x44>)
 8002d24:	f002 fd98 	bl	8005858 <HAL_RTC_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002d2e:	f7ff fd5f 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000a77c 	.word	0x2000a77c
 8002d3c:	40002800 	.word	0x40002800

08002d40 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <HAL_RTC_MspInit+0x50>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d111      	bne.n	8002d86 <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d62:	2302      	movs	r3, #2
 8002d64:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002d66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d6a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d6c:	f107 030c 	add.w	r3, r7, #12
 8002d70:	4618      	mov	r0, r3
 8002d72:	f002 fc83 	bl	800567c <HAL_RCCEx_PeriphCLKConfig>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002d7c:	f7ff fd38 	bl	80027f0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_RTC_MspInit+0x54>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002d86:	bf00      	nop
 8002d88:	3720      	adds	r7, #32
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40002800 	.word	0x40002800
 8002d94:	42470e3c 	.word	0x42470e3c

08002d98 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d9c:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <MX_SPI1_Init+0x68>)
 8002da0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002da2:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002da4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002da8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dcc:	2218      	movs	r2, #24
 8002dce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002de4:	220a      	movs	r2, #10
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <MX_SPI1_Init+0x64>)
 8002dea:	f002 fe1a 	bl	8005a22 <HAL_SPI_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002df4:	f7ff fcfc 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	2000a7f4 	.word	0x2000a7f4
 8002e00:	40013000 	.word	0x40013000

08002e04 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e0a:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <MX_SPI2_Init+0x68>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e38:	2218      	movs	r2, #24
 8002e3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e50:	220a      	movs	r2, #10
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e54:	4804      	ldr	r0, [pc, #16]	; (8002e68 <MX_SPI2_Init+0x64>)
 8002e56:	f002 fde4 	bl	8005a22 <HAL_SPI_Init>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002e60:	f7ff fcc6 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	2000a79c 	.word	0x2000a79c
 8002e6c:	40003800 	.word	0x40003800

08002e70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	; 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a58      	ldr	r2, [pc, #352]	; (8002ff0 <HAL_SPI_MspInit+0x180>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d178      	bne.n	8002f84 <HAL_SPI_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	4b57      	ldr	r3, [pc, #348]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	4a56      	ldr	r2, [pc, #344]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002e9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea2:	4b54      	ldr	r3, [pc, #336]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4a4f      	ldr	r2, [pc, #316]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b4d      	ldr	r3, [pc, #308]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a48      	ldr	r2, [pc, #288]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b46      	ldr	r3, [pc, #280]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eea:	2302      	movs	r3, #2
 8002eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ef6:	2305      	movs	r3, #5
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efa:	f107 031c 	add.w	r3, r7, #28
 8002efe:	4619      	mov	r1, r3
 8002f00:	483d      	ldr	r0, [pc, #244]	; (8002ff8 <HAL_SPI_MspInit+0x188>)
 8002f02:	f001 fc61 	bl	80047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f06:	2320      	movs	r3, #32
 8002f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f12:	2303      	movs	r3, #3
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f16:	2305      	movs	r3, #5
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1a:	f107 031c 	add.w	r3, r7, #28
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4836      	ldr	r0, [pc, #216]	; (8002ffc <HAL_SPI_MspInit+0x18c>)
 8002f22:	f001 fc51 	bl	80047c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002f26:	4b36      	ldr	r3, [pc, #216]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f28:	4a36      	ldr	r2, [pc, #216]	; (8003004 <HAL_SPI_MspInit+0x194>)
 8002f2a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002f2c:	4b34      	ldr	r3, [pc, #208]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f2e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002f32:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f34:	4b32      	ldr	r3, [pc, #200]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f36:	2240      	movs	r2, #64	; 0x40
 8002f38:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f3a:	4b31      	ldr	r3, [pc, #196]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f40:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f46:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f48:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002f54:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002f66:	4826      	ldr	r0, [pc, #152]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f68:	f001 f8be 	bl	80040e8 <HAL_DMA_Init>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8002f72:	f7ff fc3d 	bl	80027f0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a21      	ldr	r2, [pc, #132]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f7a:	649a      	str	r2, [r3, #72]	; 0x48
 8002f7c:	4a20      	ldr	r2, [pc, #128]	; (8003000 <HAL_SPI_MspInit+0x190>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002f82:	e031      	b.n	8002fe8 <HAL_SPI_MspInit+0x178>
  else if(spiHandle->Instance==SPI2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1f      	ldr	r2, [pc, #124]	; (8003008 <HAL_SPI_MspInit+0x198>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d12c      	bne.n	8002fe8 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a10      	ldr	r2, [pc, #64]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_SPI_MspInit+0x184>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002fc6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fd8:	2305      	movs	r3, #5
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fdc:	f107 031c 	add.w	r3, r7, #28
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4806      	ldr	r0, [pc, #24]	; (8002ffc <HAL_SPI_MspInit+0x18c>)
 8002fe4:	f001 fbf0 	bl	80047c8 <HAL_GPIO_Init>
}
 8002fe8:	bf00      	nop
 8002fea:	3730      	adds	r7, #48	; 0x30
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40013000 	.word	0x40013000
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40020000 	.word	0x40020000
 8002ffc:	40020400 	.word	0x40020400
 8003000:	2000a84c 	.word	0x2000a84c
 8003004:	40026458 	.word	0x40026458
 8003008:	40003800 	.word	0x40003800

0800300c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_MspInit+0x4c>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	4a0f      	ldr	r2, [pc, #60]	; (8003058 <HAL_MspInit+0x4c>)
 800301c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003020:	6453      	str	r3, [r2, #68]	; 0x44
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_MspInit+0x4c>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302a:	607b      	str	r3, [r7, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_MspInit+0x4c>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a08      	ldr	r2, [pc, #32]	; (8003058 <HAL_MspInit+0x4c>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_MspInit+0x4c>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800

0800305c <SDTimer_Handler>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void SDTimer_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003060:	4b0e      	ldr	r3, [pc, #56]	; (800309c <SDTimer_Handler+0x40>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d006      	beq.n	8003078 <SDTimer_Handler+0x1c>
    Timer1--;
 800306a:	4b0c      	ldr	r3, [pc, #48]	; (800309c <SDTimer_Handler+0x40>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <SDTimer_Handler+0x40>)
 8003076:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <SDTimer_Handler+0x44>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d006      	beq.n	8003090 <SDTimer_Handler+0x34>
    Timer2--;
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <SDTimer_Handler+0x44>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b2da      	uxtb	r2, r3
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <SDTimer_Handler+0x44>)
 800308e:	701a      	strb	r2, [r3, #0]
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	2000a8ad 	.word	0x2000a8ad
 80030a0:	2000a8ac 	.word	0x2000a8ac

080030a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030a8:	e7fe      	b.n	80030a8 <NMI_Handler+0x4>

080030aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ae:	e7fe      	b.n	80030ae <HardFault_Handler+0x4>

080030b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b4:	e7fe      	b.n	80030b4 <MemManage_Handler+0x4>

080030b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ba:	e7fe      	b.n	80030ba <BusFault_Handler+0x4>

080030bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c0:	e7fe      	b.n	80030c0 <UsageFault_Handler+0x4>

080030c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <SysTick_Handler+0x30>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <SysTick_Handler+0x30>)
 80030fc:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <SysTick_Handler+0x30>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b09      	cmp	r3, #9
 8003106:	d904      	bls.n	8003112 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <SysTick_Handler+0x30>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800310e:	f7ff ffa5 	bl	800305c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003112:	f000 faa1 	bl	8003658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000a0c8 	.word	0x2000a0c8

08003120 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003124:	2001      	movs	r0, #1
 8003126:	f001 fd05 	bl	8004b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}

0800312e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003132:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003136:	f001 fcfd 	bl	8004b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <DMA2_Stream3_IRQHandler+0x10>)
 8003146:	f001 f8d5 	bl	80042f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	2000a84c 	.word	0x2000a84c

08003154 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
	return 1;
 8003158:	2301      	movs	r3, #1
}
 800315a:	4618      	mov	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <_kill>:

int _kill(int pid, int sig)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800316e:	f007 ffa3 	bl	800b0b8 <__errno>
 8003172:	4603      	mov	r3, r0
 8003174:	2216      	movs	r2, #22
 8003176:	601a      	str	r2, [r3, #0]
	return -1;
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <_exit>:

void _exit (int status)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800318c:	f04f 31ff 	mov.w	r1, #4294967295
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ffe7 	bl	8003164 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003196:	e7fe      	b.n	8003196 <_exit+0x12>

08003198 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e00a      	b.n	80031c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031aa:	f3af 8000 	nop.w
 80031ae:	4601      	mov	r1, r0
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	60ba      	str	r2, [r7, #8]
 80031b6:	b2ca      	uxtb	r2, r1
 80031b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3301      	adds	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	dbf0      	blt.n	80031aa <_read+0x12>
	}

return len;
 80031c8:	687b      	ldr	r3, [r7, #4]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	e009      	b.n	80031f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	60ba      	str	r2, [r7, #8]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe fe3f 	bl	8001e70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	3301      	adds	r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	dbf1      	blt.n	80031e4 <_write+0x12>
	}
	return len;
 8003200:	687b      	ldr	r3, [r7, #4]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <_close>:

int _close(int file)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
	return -1;
 8003212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003232:	605a      	str	r2, [r3, #4]
	return 0;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <_isatty>:

int _isatty(int file)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
	return 1;
 800324a:	2301      	movs	r3, #1
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
	return 0;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <_sbrk+0x5c>)
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <_sbrk+0x60>)
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003288:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <_sbrk+0x64>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <_sbrk+0x64>)
 8003292:	4a12      	ldr	r2, [pc, #72]	; (80032dc <_sbrk+0x68>)
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <_sbrk+0x64>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d207      	bcs.n	80032b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032a4:	f007 ff08 	bl	800b0b8 <__errno>
 80032a8:	4603      	mov	r3, r0
 80032aa:	220c      	movs	r2, #12
 80032ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	e009      	b.n	80032c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032b4:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <_sbrk+0x64>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ba:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <_sbrk+0x64>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <_sbrk+0x64>)
 80032c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032c6:	68fb      	ldr	r3, [r7, #12]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20010000 	.word	0x20010000
 80032d4:	00002000 	.word	0x00002000
 80032d8:	2000a0cc 	.word	0x2000a0cc
 80032dc:	2000adb8 	.word	0x2000adb8

080032e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <SystemInit+0x28>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	4a07      	ldr	r2, [pc, #28]	; (8003308 <SystemInit+0x28>)
 80032ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <SystemInit+0x28>)
 80032f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032fa:	609a      	str	r2, [r3, #8]
#endif
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08c      	sub	sp, #48	; 0x30
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003312:	f107 030c 	add.w	r3, r7, #12
 8003316:	2224      	movs	r2, #36	; 0x24
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f008 f948 	bl	800b5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003320:	1d3b      	adds	r3, r7, #4
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <MX_TIM2_Init+0xa0>)
 800332a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800332e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003330:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <MX_TIM2_Init+0xa0>)
 8003332:	2200      	movs	r2, #0
 8003334:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003336:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <MX_TIM2_Init+0xa0>)
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <MX_TIM2_Init+0xa0>)
 800333e:	2227      	movs	r2, #39	; 0x27
 8003340:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <MX_TIM2_Init+0xa0>)
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003348:	4b18      	ldr	r3, [pc, #96]	; (80033ac <MX_TIM2_Init+0xa0>)
 800334a:	2200      	movs	r2, #0
 800334c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800334e:	2301      	movs	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003356:	2301      	movs	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003362:	2300      	movs	r3, #0
 8003364:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003366:	2301      	movs	r3, #1
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800336a:	2300      	movs	r3, #0
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003372:	f107 030c 	add.w	r3, r7, #12
 8003376:	4619      	mov	r1, r3
 8003378:	480c      	ldr	r0, [pc, #48]	; (80033ac <MX_TIM2_Init+0xa0>)
 800337a:	f003 f8cf 	bl	800651c <HAL_TIM_Encoder_Init>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003384:	f7ff fa34 	bl	80027f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003388:	2300      	movs	r3, #0
 800338a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338c:	2300      	movs	r3, #0
 800338e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	4619      	mov	r1, r3
 8003394:	4805      	ldr	r0, [pc, #20]	; (80033ac <MX_TIM2_Init+0xa0>)
 8003396:	f003 fa9b 	bl	80068d0 <HAL_TIMEx_MasterConfigSynchronization>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80033a0:	f7ff fa26 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033a4:	bf00      	nop
 80033a6:	3730      	adds	r7, #48	; 0x30
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	2000a8b0 	.word	0x2000a8b0

080033b0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b8:	f107 0314 	add.w	r3, r7, #20
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d14a      	bne.n	8003468 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	4b26      	ldr	r3, [pc, #152]	; (8003470 <HAL_TIM_Encoder_MspInit+0xc0>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a25      	ldr	r2, [pc, #148]	; (8003470 <HAL_TIM_Encoder_MspInit+0xc0>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <HAL_TIM_Encoder_MspInit+0xc0>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_TIM_Encoder_MspInit+0xc0>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <HAL_TIM_Encoder_MspInit+0xc0>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	6313      	str	r3, [r2, #48]	; 0x30
 80033fe:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <HAL_TIM_Encoder_MspInit+0xc0>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	4b18      	ldr	r3, [pc, #96]	; (8003470 <HAL_TIM_Encoder_MspInit+0xc0>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a17      	ldr	r2, [pc, #92]	; (8003470 <HAL_TIM_Encoder_MspInit+0xc0>)
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <HAL_TIM_Encoder_MspInit+0xc0>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003434:	2300      	movs	r3, #0
 8003436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003438:	2301      	movs	r3, #1
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	4619      	mov	r1, r3
 8003442:	480c      	ldr	r0, [pc, #48]	; (8003474 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003444:	f001 f9c0 	bl	80047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003448:	2308      	movs	r3, #8
 800344a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	2300      	movs	r3, #0
 8003456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003458:	2301      	movs	r3, #1
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	f107 0314 	add.w	r3, r7, #20
 8003460:	4619      	mov	r1, r3
 8003462:	4805      	ldr	r0, [pc, #20]	; (8003478 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003464:	f001 f9b0 	bl	80047c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003468:	bf00      	nop
 800346a:	3728      	adds	r7, #40	; 0x28
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40023800 	.word	0x40023800
 8003474:	40020000 	.word	0x40020000
 8003478:	40020400 	.word	0x40020400

0800347c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 8003482:	4a12      	ldr	r2, [pc, #72]	; (80034cc <MX_USART6_UART_Init+0x50>)
 8003484:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 8003488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800348c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 8003496:	2200      	movs	r2, #0
 8003498:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 80034a2:	220c      	movs	r2, #12
 80034a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034a6:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80034b2:	4805      	ldr	r0, [pc, #20]	; (80034c8 <MX_USART6_UART_Init+0x4c>)
 80034b4:	f003 fa7a 	bl	80069ac <HAL_UART_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80034be:	f7ff f997 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	2000a8f8 	.word	0x2000a8f8
 80034cc:	40011400 	.word	0x40011400

080034d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <HAL_UART_MspInit+0x84>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d12c      	bne.n	800354c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	4b18      	ldr	r3, [pc, #96]	; (8003558 <HAL_UART_MspInit+0x88>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	4a17      	ldr	r2, [pc, #92]	; (8003558 <HAL_UART_MspInit+0x88>)
 80034fc:	f043 0320 	orr.w	r3, r3, #32
 8003500:	6453      	str	r3, [r2, #68]	; 0x44
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_UART_MspInit+0x88>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_UART_MspInit+0x88>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a10      	ldr	r2, [pc, #64]	; (8003558 <HAL_UART_MspInit+0x88>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <HAL_UART_MspInit+0x88>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800352a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800352e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003538:	2303      	movs	r3, #3
 800353a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800353c:	2308      	movs	r3, #8
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	4619      	mov	r1, r3
 8003546:	4805      	ldr	r0, [pc, #20]	; (800355c <HAL_UART_MspInit+0x8c>)
 8003548:	f001 f93e 	bl	80047c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800354c:	bf00      	nop
 800354e:	3728      	adds	r7, #40	; 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40011400 	.word	0x40011400
 8003558:	40023800 	.word	0x40023800
 800355c:	40020000 	.word	0x40020000

08003560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003598 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003564:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003566:	e003      	b.n	8003570 <LoopCopyDataInit>

08003568 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800356a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800356c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800356e:	3104      	adds	r1, #4

08003570 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003570:	480b      	ldr	r0, [pc, #44]	; (80035a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003572:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003574:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003576:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003578:	d3f6      	bcc.n	8003568 <CopyDataInit>
  ldr  r2, =_sbss
 800357a:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800357c:	e002      	b.n	8003584 <LoopFillZerobss>

0800357e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800357e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003580:	f842 3b04 	str.w	r3, [r2], #4

08003584 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003586:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003588:	d3f9      	bcc.n	800357e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800358a:	f7ff fea9 	bl	80032e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800358e:	f007 ff75 	bl	800b47c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003592:	f7fe fccf 	bl	8001f34 <main>
  bx  lr    
 8003596:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003598:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800359c:	08016158 	.word	0x08016158
  ldr  r0, =_sdata
 80035a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035a4:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80035a8:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 80035ac:	2000adb8 	.word	0x2000adb8

080035b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035b0:	e7fe      	b.n	80035b0 <ADC_IRQHandler>
	...

080035b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <HAL_Init+0x40>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0d      	ldr	r2, [pc, #52]	; (80035f4 <HAL_Init+0x40>)
 80035be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_Init+0x40>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <HAL_Init+0x40>)
 80035ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <HAL_Init+0x40>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <HAL_Init+0x40>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035dc:	2003      	movs	r0, #3
 80035de:	f000 fd41 	bl	8004064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f000 f808 	bl	80035f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035e8:	f7ff fd10 	bl	800300c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023c00 	.word	0x40023c00

080035f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003600:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_InitTick+0x54>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b12      	ldr	r3, [pc, #72]	; (8003650 <HAL_InitTick+0x58>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800360e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fd59 	bl	80040ce <HAL_SYSTICK_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e00e      	b.n	8003644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b0f      	cmp	r3, #15
 800362a:	d80a      	bhi.n	8003642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800362c:	2200      	movs	r2, #0
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	f000 fd21 	bl	800407a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003638:	4a06      	ldr	r2, [pc, #24]	; (8003654 <HAL_InitTick+0x5c>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000008 	.word	0x20000008
 8003650:	20000010 	.word	0x20000010
 8003654:	2000000c 	.word	0x2000000c

08003658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_IncTick+0x20>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_IncTick+0x24>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4413      	add	r3, r2
 8003668:	4a04      	ldr	r2, [pc, #16]	; (800367c <HAL_IncTick+0x24>)
 800366a:	6013      	str	r3, [r2, #0]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000010 	.word	0x20000010
 800367c:	2000a93c 	.word	0x2000a93c

08003680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return uwTick;
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_GetTick+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	2000a93c 	.word	0x2000a93c

08003698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036a0:	f7ff ffee 	bl	8003680 <HAL_GetTick>
 80036a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d005      	beq.n	80036be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_Delay+0x44>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036be:	bf00      	nop
 80036c0:	f7ff ffde 	bl	8003680 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d8f7      	bhi.n	80036c0 <HAL_Delay+0x28>
  {
  }
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000010 	.word	0x20000010

080036e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e033      	b.n	800375e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fd fbe4 	bl	8000ecc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	d118      	bne.n	8003750 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003726:	f023 0302 	bic.w	r3, r3, #2
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fa48 	bl	8003bc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	f043 0201 	orr.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
 800374e:	e001      	b.n	8003754 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800375c:	7bfb      	ldrb	r3, [r7, #15]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_ADC_Start_DMA+0x1e>
 8003782:	2302      	movs	r3, #2
 8003784:	e0ce      	b.n	8003924 <HAL_ADC_Start_DMA+0x1bc>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b01      	cmp	r3, #1
 800379a:	d018      	beq.n	80037ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037ac:	4b5f      	ldr	r3, [pc, #380]	; (800392c <HAL_ADC_Start_DMA+0x1c4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a5f      	ldr	r2, [pc, #380]	; (8003930 <HAL_ADC_Start_DMA+0x1c8>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	0c9a      	lsrs	r2, r3, #18
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80037c0:	e002      	b.n	80037c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f9      	bne.n	80037c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037dc:	d107      	bne.n	80037ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	f040 8086 	bne.w	800390a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381c:	2b00      	cmp	r3, #0
 800381e:	d007      	beq.n	8003830 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003828:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383c:	d106      	bne.n	800384c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f023 0206 	bic.w	r2, r3, #6
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
 800384a:	e002      	b.n	8003852 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800385a:	4b36      	ldr	r3, [pc, #216]	; (8003934 <HAL_ADC_Start_DMA+0x1cc>)
 800385c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	4a35      	ldr	r2, [pc, #212]	; (8003938 <HAL_ADC_Start_DMA+0x1d0>)
 8003864:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	4a34      	ldr	r2, [pc, #208]	; (800393c <HAL_ADC_Start_DMA+0x1d4>)
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	4a33      	ldr	r2, [pc, #204]	; (8003940 <HAL_ADC_Start_DMA+0x1d8>)
 8003874:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800387e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800388e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800389e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	334c      	adds	r3, #76	; 0x4c
 80038aa:	4619      	mov	r1, r3
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f000 fcc8 	bl	8004244 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10f      	bne.n	80038e0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d129      	bne.n	8003922 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038dc:	609a      	str	r2, [r3, #8]
 80038de:	e020      	b.n	8003922 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a17      	ldr	r2, [pc, #92]	; (8003944 <HAL_ADC_Start_DMA+0x1dc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d11b      	bne.n	8003922 <HAL_ADC_Start_DMA+0x1ba>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d114      	bne.n	8003922 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	e00b      	b.n	8003922 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f043 0210 	orr.w	r2, r3, #16
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20000008 	.word	0x20000008
 8003930:	431bde83 	.word	0x431bde83
 8003934:	40012300 	.word	0x40012300
 8003938:	08003dc1 	.word	0x08003dc1
 800393c:	08003e7b 	.word	0x08003e7b
 8003940:	08003e97 	.word	0x08003e97
 8003944:	40012000 	.word	0x40012000

08003948 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x1c>
 800399c:	2302      	movs	r3, #2
 800399e:	e105      	b.n	8003bac <HAL_ADC_ConfigChannel+0x228>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b09      	cmp	r3, #9
 80039ae:	d925      	bls.n	80039fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68d9      	ldr	r1, [r3, #12]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	3b1e      	subs	r3, #30
 80039c6:	2207      	movs	r2, #7
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43da      	mvns	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	400a      	ands	r2, r1
 80039d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68d9      	ldr	r1, [r3, #12]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	4618      	mov	r0, r3
 80039e8:	4603      	mov	r3, r0
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4403      	add	r3, r0
 80039ee:	3b1e      	subs	r3, #30
 80039f0:	409a      	lsls	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	e022      	b.n	8003a42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6919      	ldr	r1, [r3, #16]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4413      	add	r3, r2
 8003a10:	2207      	movs	r2, #7
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43da      	mvns	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6919      	ldr	r1, [r3, #16]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4618      	mov	r0, r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4403      	add	r3, r0
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b06      	cmp	r3, #6
 8003a48:	d824      	bhi.n	8003a94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	3b05      	subs	r3, #5
 8003a5c:	221f      	movs	r2, #31
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43da      	mvns	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	400a      	ands	r2, r1
 8003a6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	4618      	mov	r0, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	3b05      	subs	r3, #5
 8003a86:	fa00 f203 	lsl.w	r2, r0, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	635a      	str	r2, [r3, #52]	; 0x34
 8003a92:	e04c      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b0c      	cmp	r3, #12
 8003a9a:	d824      	bhi.n	8003ae6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	3b23      	subs	r3, #35	; 0x23
 8003aae:	221f      	movs	r2, #31
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	400a      	ands	r2, r1
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	4618      	mov	r0, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3b23      	subs	r3, #35	; 0x23
 8003ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ae4:	e023      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	3b41      	subs	r3, #65	; 0x41
 8003af8:	221f      	movs	r2, #31
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	400a      	ands	r2, r1
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4618      	mov	r0, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	3b41      	subs	r3, #65	; 0x41
 8003b22:	fa00 f203 	lsl.w	r2, r0, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <HAL_ADC_ConfigChannel+0x234>)
 8003b30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a21      	ldr	r2, [pc, #132]	; (8003bbc <HAL_ADC_ConfigChannel+0x238>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d109      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x1cc>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b12      	cmp	r3, #18
 8003b42:	d105      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a19      	ldr	r2, [pc, #100]	; (8003bbc <HAL_ADC_ConfigChannel+0x238>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d123      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x21e>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b10      	cmp	r3, #16
 8003b60:	d003      	beq.n	8003b6a <HAL_ADC_ConfigChannel+0x1e6>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b11      	cmp	r3, #17
 8003b68:	d11b      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d111      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <HAL_ADC_ConfigChannel+0x23c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a10      	ldr	r2, [pc, #64]	; (8003bc4 <HAL_ADC_ConfigChannel+0x240>)
 8003b84:	fba2 2303 	umull	r2, r3, r2, r3
 8003b88:	0c9a      	lsrs	r2, r3, #18
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b94:	e002      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f9      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	40012300 	.word	0x40012300
 8003bbc:	40012000 	.word	0x40012000
 8003bc0:	20000008 	.word	0x20000008
 8003bc4:	431bde83 	.word	0x431bde83

08003bc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bd0:	4b79      	ldr	r3, [pc, #484]	; (8003db8 <ADC_Init+0x1f0>)
 8003bd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	021a      	lsls	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6899      	ldr	r1, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	4a58      	ldr	r2, [pc, #352]	; (8003dbc <ADC_Init+0x1f4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d022      	beq.n	8003ca6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6899      	ldr	r1, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	e00f      	b.n	8003cc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0202 	bic.w	r2, r2, #2
 8003cd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6899      	ldr	r1, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7e1b      	ldrb	r3, [r3, #24]
 8003ce0:	005a      	lsls	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01b      	beq.n	8003d2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6859      	ldr	r1, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	035a      	lsls	r2, r3, #13
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	e007      	b.n	8003d3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	051a      	lsls	r2, r3, #20
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6899      	ldr	r1, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d7e:	025a      	lsls	r2, r3, #9
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6899      	ldr	r1, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	029a      	lsls	r2, r3, #10
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	40012300 	.word	0x40012300
 8003dbc:	0f000001 	.word	0x0f000001

08003dc0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d13c      	bne.n	8003e54 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d12b      	bne.n	8003e4c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d127      	bne.n	8003e4c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d006      	beq.n	8003e18 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d119      	bne.n	8003e4c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0220 	bic.w	r2, r2, #32
 8003e26:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d105      	bne.n	8003e4c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f043 0201 	orr.w	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7ff fd7b 	bl	8003948 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e52:	e00e      	b.n	8003e72 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f7ff fd85 	bl	8003970 <HAL_ADC_ErrorCallback>
}
 8003e66:	e004      	b.n	8003e72 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff fd67 	bl	800395c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2240      	movs	r2, #64	; 0x40
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	f043 0204 	orr.w	r2, r3, #4
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff fd5a 	bl	8003970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ef6:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	60d3      	str	r3, [r2, #12]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <__NVIC_GetPriorityGrouping+0x18>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	0a1b      	lsrs	r3, r3, #8
 8003f16:	f003 0307 	and.w	r3, r3, #7
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	db0b      	blt.n	8003f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	f003 021f 	and.w	r2, r3, #31
 8003f40:	4907      	ldr	r1, [pc, #28]	; (8003f60 <__NVIC_EnableIRQ+0x38>)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2001      	movs	r0, #1
 8003f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	e000e100 	.word	0xe000e100

08003f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	6039      	str	r1, [r7, #0]
 8003f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	db0a      	blt.n	8003f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	490c      	ldr	r1, [pc, #48]	; (8003fb0 <__NVIC_SetPriority+0x4c>)
 8003f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f82:	0112      	lsls	r2, r2, #4
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	440b      	add	r3, r1
 8003f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f8c:	e00a      	b.n	8003fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4908      	ldr	r1, [pc, #32]	; (8003fb4 <__NVIC_SetPriority+0x50>)
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	3b04      	subs	r3, #4
 8003f9c:	0112      	lsls	r2, r2, #4
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	761a      	strb	r2, [r3, #24]
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	e000e100 	.word	0xe000e100
 8003fb4:	e000ed00 	.word	0xe000ed00

08003fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	; 0x24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f1c3 0307 	rsb	r3, r3, #7
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	bf28      	it	cs
 8003fd6:	2304      	movcs	r3, #4
 8003fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d902      	bls.n	8003fe8 <NVIC_EncodePriority+0x30>
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3b03      	subs	r3, #3
 8003fe6:	e000      	b.n	8003fea <NVIC_EncodePriority+0x32>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004000:	f04f 31ff 	mov.w	r1, #4294967295
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	43d9      	mvns	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004010:	4313      	orrs	r3, r2
         );
}
 8004012:	4618      	mov	r0, r3
 8004014:	3724      	adds	r7, #36	; 0x24
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3b01      	subs	r3, #1
 800402c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004030:	d301      	bcc.n	8004036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004032:	2301      	movs	r3, #1
 8004034:	e00f      	b.n	8004056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004036:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <SysTick_Config+0x40>)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3b01      	subs	r3, #1
 800403c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800403e:	210f      	movs	r1, #15
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	f7ff ff8e 	bl	8003f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <SysTick_Config+0x40>)
 800404a:	2200      	movs	r2, #0
 800404c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800404e:	4b04      	ldr	r3, [pc, #16]	; (8004060 <SysTick_Config+0x40>)
 8004050:	2207      	movs	r2, #7
 8004052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	e000e010 	.word	0xe000e010

08004064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff ff29 	bl	8003ec4 <__NVIC_SetPriorityGrouping>
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800407a:	b580      	push	{r7, lr}
 800407c:	b086      	sub	sp, #24
 800407e:	af00      	add	r7, sp, #0
 8004080:	4603      	mov	r3, r0
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800408c:	f7ff ff3e 	bl	8003f0c <__NVIC_GetPriorityGrouping>
 8004090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	6978      	ldr	r0, [r7, #20]
 8004098:	f7ff ff8e 	bl	8003fb8 <NVIC_EncodePriority>
 800409c:	4602      	mov	r2, r0
 800409e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff5d 	bl	8003f64 <__NVIC_SetPriority>
}
 80040aa:	bf00      	nop
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	4603      	mov	r3, r0
 80040ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff ff31 	bl	8003f28 <__NVIC_EnableIRQ>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff ffa2 	bl	8004020 <SysTick_Config>
 80040dc:	4603      	mov	r3, r0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040f4:	f7ff fac4 	bl	8003680 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e099      	b.n	8004238 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004124:	e00f      	b.n	8004146 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004126:	f7ff faab 	bl	8003680 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b05      	cmp	r3, #5
 8004132:	d908      	bls.n	8004146 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2203      	movs	r2, #3
 800413e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e078      	b.n	8004238 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e8      	bne.n	8004126 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4b38      	ldr	r3, [pc, #224]	; (8004240 <HAL_DMA_Init+0x158>)
 8004160:	4013      	ands	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004172:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800418a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	2b04      	cmp	r3, #4
 800419e:	d107      	bne.n	80041b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	4313      	orrs	r3, r2
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f023 0307 	bic.w	r3, r3, #7
 80041c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d117      	bne.n	800420a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00e      	beq.n	800420a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fa6f 	bl	80046d0 <DMA_CheckFifoParam>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2240      	movs	r2, #64	; 0x40
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004206:	2301      	movs	r3, #1
 8004208:	e016      	b.n	8004238 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa26 	bl	8004664 <DMA_CalcBaseAndBitshift>
 8004218:	4603      	mov	r3, r0
 800421a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	223f      	movs	r2, #63	; 0x3f
 8004222:	409a      	lsls	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	f010803f 	.word	0xf010803f

08004244 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_DMA_Start_IT+0x26>
 8004266:	2302      	movs	r3, #2
 8004268:	e040      	b.n	80042ec <HAL_DMA_Start_IT+0xa8>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b01      	cmp	r3, #1
 800427c:	d12f      	bne.n	80042de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2202      	movs	r2, #2
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f9b8 	bl	8004608 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429c:	223f      	movs	r2, #63	; 0x3f
 800429e:	409a      	lsls	r2, r3
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0216 	orr.w	r2, r2, #22
 80042b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0208 	orr.w	r2, r2, #8
 80042ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	e005      	b.n	80042ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
 80042e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004300:	4b92      	ldr	r3, [pc, #584]	; (800454c <HAL_DMA_IRQHandler+0x258>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a92      	ldr	r2, [pc, #584]	; (8004550 <HAL_DMA_IRQHandler+0x25c>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	0a9b      	lsrs	r3, r3, #10
 800430c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431e:	2208      	movs	r2, #8
 8004320:	409a      	lsls	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01a      	beq.n	8004360 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0204 	bic.w	r2, r2, #4
 8004346:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	2208      	movs	r2, #8
 800434e:	409a      	lsls	r2, r3
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f043 0201 	orr.w	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004364:	2201      	movs	r2, #1
 8004366:	409a      	lsls	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d012      	beq.n	8004396 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004382:	2201      	movs	r2, #1
 8004384:	409a      	lsls	r2, r3
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	f043 0202 	orr.w	r2, r3, #2
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439a:	2204      	movs	r2, #4
 800439c:	409a      	lsls	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d012      	beq.n	80043cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b8:	2204      	movs	r2, #4
 80043ba:	409a      	lsls	r2, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	f043 0204 	orr.w	r2, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d0:	2210      	movs	r2, #16
 80043d2:	409a      	lsls	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d043      	beq.n	8004464 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d03c      	beq.n	8004464 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ee:	2210      	movs	r2, #16
 80043f0:	409a      	lsls	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d018      	beq.n	8004436 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d108      	bne.n	8004424 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d024      	beq.n	8004464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
 8004422:	e01f      	b.n	8004464 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01b      	beq.n	8004464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
 8004434:	e016      	b.n	8004464 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d107      	bne.n	8004454 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0208 	bic.w	r2, r2, #8
 8004452:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004468:	2220      	movs	r2, #32
 800446a:	409a      	lsls	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 808e 	beq.w	8004592 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8086 	beq.w	8004592 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448a:	2220      	movs	r2, #32
 800448c:	409a      	lsls	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b05      	cmp	r3, #5
 800449c:	d136      	bne.n	800450c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0216 	bic.w	r2, r2, #22
 80044ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <HAL_DMA_IRQHandler+0x1da>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d007      	beq.n	80044de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0208 	bic.w	r2, r2, #8
 80044dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e2:	223f      	movs	r2, #63	; 0x3f
 80044e4:	409a      	lsls	r2, r3
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d07d      	beq.n	80045fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4798      	blx	r3
        }
        return;
 800450a:	e078      	b.n	80045fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01c      	beq.n	8004554 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d108      	bne.n	800453a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452c:	2b00      	cmp	r3, #0
 800452e:	d030      	beq.n	8004592 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
 8004538:	e02b      	b.n	8004592 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d027      	beq.n	8004592 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	4798      	blx	r3
 800454a:	e022      	b.n	8004592 <HAL_DMA_IRQHandler+0x29e>
 800454c:	20000008 	.word	0x20000008
 8004550:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0210 	bic.w	r2, r2, #16
 8004570:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	2b00      	cmp	r3, #0
 8004598:	d032      	beq.n	8004600 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d022      	beq.n	80045ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2205      	movs	r2, #5
 80045aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	3301      	adds	r3, #1
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d307      	bcc.n	80045da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1f2      	bne.n	80045be <HAL_DMA_IRQHandler+0x2ca>
 80045d8:	e000      	b.n	80045dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80045da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
 80045fc:	e000      	b.n	8004600 <HAL_DMA_IRQHandler+0x30c>
        return;
 80045fe:	bf00      	nop
    }
  }
}
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop

08004608 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004624:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b40      	cmp	r3, #64	; 0x40
 8004634:	d108      	bne.n	8004648 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004646:	e007      	b.n	8004658 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	3b10      	subs	r3, #16
 8004674:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800467e:	4a13      	ldr	r2, [pc, #76]	; (80046cc <DMA_CalcBaseAndBitshift+0x68>)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b03      	cmp	r3, #3
 8004690:	d909      	bls.n	80046a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800469a:	f023 0303 	bic.w	r3, r3, #3
 800469e:	1d1a      	adds	r2, r3, #4
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	659a      	str	r2, [r3, #88]	; 0x58
 80046a4:	e007      	b.n	80046b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	aaaaaaab 	.word	0xaaaaaaab
 80046cc:	08015fec 	.word	0x08015fec

080046d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d11f      	bne.n	800472a <DMA_CheckFifoParam+0x5a>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d856      	bhi.n	800479e <DMA_CheckFifoParam+0xce>
 80046f0:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <DMA_CheckFifoParam+0x28>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	08004709 	.word	0x08004709
 80046fc:	0800471b 	.word	0x0800471b
 8004700:	08004709 	.word	0x08004709
 8004704:	0800479f 	.word	0x0800479f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d046      	beq.n	80047a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004718:	e043      	b.n	80047a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004722:	d140      	bne.n	80047a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004728:	e03d      	b.n	80047a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004732:	d121      	bne.n	8004778 <DMA_CheckFifoParam+0xa8>
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b03      	cmp	r3, #3
 8004738:	d837      	bhi.n	80047aa <DMA_CheckFifoParam+0xda>
 800473a:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <DMA_CheckFifoParam+0x70>)
 800473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004740:	08004751 	.word	0x08004751
 8004744:	08004757 	.word	0x08004757
 8004748:	08004751 	.word	0x08004751
 800474c:	08004769 	.word	0x08004769
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      break;
 8004754:	e030      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d025      	beq.n	80047ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004766:	e022      	b.n	80047ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004770:	d11f      	bne.n	80047b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004776:	e01c      	b.n	80047b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d903      	bls.n	8004786 <DMA_CheckFifoParam+0xb6>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d003      	beq.n	800478c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004784:	e018      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
      break;
 800478a:	e015      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00e      	beq.n	80047b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e00b      	b.n	80047b6 <DMA_CheckFifoParam+0xe6>
      break;
 800479e:	bf00      	nop
 80047a0:	e00a      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      break;
 80047a2:	bf00      	nop
 80047a4:	e008      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      break;
 80047a6:	bf00      	nop
 80047a8:	e006      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      break;
 80047aa:	bf00      	nop
 80047ac:	e004      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <DMA_CheckFifoParam+0xe8>
      break;
 80047b6:	bf00      	nop
    }
  } 
  
  return status; 
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop

080047c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	; 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	e159      	b.n	8004a98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047e4:	2201      	movs	r2, #1
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4013      	ands	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	f040 8148 	bne.w	8004a92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b01      	cmp	r3, #1
 800480c:	d005      	beq.n	800481a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004816:	2b02      	cmp	r3, #2
 8004818:	d130      	bne.n	800487c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	2203      	movs	r2, #3
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004850:	2201      	movs	r2, #1
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 0201 	and.w	r2, r3, #1
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	2b03      	cmp	r3, #3
 8004886:	d017      	beq.n	80048b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	2203      	movs	r2, #3
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d123      	bne.n	800490c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	08da      	lsrs	r2, r3, #3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3208      	adds	r2, #8
 80048cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	220f      	movs	r2, #15
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	08da      	lsrs	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3208      	adds	r2, #8
 8004906:	69b9      	ldr	r1, [r7, #24]
 8004908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	2203      	movs	r2, #3
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	43db      	mvns	r3, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0203 	and.w	r2, r3, #3
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80a2 	beq.w	8004a92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	4b57      	ldr	r3, [pc, #348]	; (8004ab0 <HAL_GPIO_Init+0x2e8>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	4a56      	ldr	r2, [pc, #344]	; (8004ab0 <HAL_GPIO_Init+0x2e8>)
 8004958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800495c:	6453      	str	r3, [r2, #68]	; 0x44
 800495e:	4b54      	ldr	r3, [pc, #336]	; (8004ab0 <HAL_GPIO_Init+0x2e8>)
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800496a:	4a52      	ldr	r2, [pc, #328]	; (8004ab4 <HAL_GPIO_Init+0x2ec>)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	089b      	lsrs	r3, r3, #2
 8004970:	3302      	adds	r3, #2
 8004972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	220f      	movs	r2, #15
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	43db      	mvns	r3, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4013      	ands	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a49      	ldr	r2, [pc, #292]	; (8004ab8 <HAL_GPIO_Init+0x2f0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d019      	beq.n	80049ca <HAL_GPIO_Init+0x202>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a48      	ldr	r2, [pc, #288]	; (8004abc <HAL_GPIO_Init+0x2f4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <HAL_GPIO_Init+0x1fe>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a47      	ldr	r2, [pc, #284]	; (8004ac0 <HAL_GPIO_Init+0x2f8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00d      	beq.n	80049c2 <HAL_GPIO_Init+0x1fa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a46      	ldr	r2, [pc, #280]	; (8004ac4 <HAL_GPIO_Init+0x2fc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <HAL_GPIO_Init+0x1f6>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a45      	ldr	r2, [pc, #276]	; (8004ac8 <HAL_GPIO_Init+0x300>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d101      	bne.n	80049ba <HAL_GPIO_Init+0x1f2>
 80049b6:	2304      	movs	r3, #4
 80049b8:	e008      	b.n	80049cc <HAL_GPIO_Init+0x204>
 80049ba:	2307      	movs	r3, #7
 80049bc:	e006      	b.n	80049cc <HAL_GPIO_Init+0x204>
 80049be:	2303      	movs	r3, #3
 80049c0:	e004      	b.n	80049cc <HAL_GPIO_Init+0x204>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e002      	b.n	80049cc <HAL_GPIO_Init+0x204>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <HAL_GPIO_Init+0x204>
 80049ca:	2300      	movs	r3, #0
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	f002 0203 	and.w	r2, r2, #3
 80049d2:	0092      	lsls	r2, r2, #2
 80049d4:	4093      	lsls	r3, r2
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049dc:	4935      	ldr	r1, [pc, #212]	; (8004ab4 <HAL_GPIO_Init+0x2ec>)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	089b      	lsrs	r3, r3, #2
 80049e2:	3302      	adds	r3, #2
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049ea:	4b38      	ldr	r3, [pc, #224]	; (8004acc <HAL_GPIO_Init+0x304>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a0e:	4a2f      	ldr	r2, [pc, #188]	; (8004acc <HAL_GPIO_Init+0x304>)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a14:	4b2d      	ldr	r3, [pc, #180]	; (8004acc <HAL_GPIO_Init+0x304>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4013      	ands	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a38:	4a24      	ldr	r2, [pc, #144]	; (8004acc <HAL_GPIO_Init+0x304>)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a3e:	4b23      	ldr	r3, [pc, #140]	; (8004acc <HAL_GPIO_Init+0x304>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a62:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <HAL_GPIO_Init+0x304>)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a68:	4b18      	ldr	r3, [pc, #96]	; (8004acc <HAL_GPIO_Init+0x304>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4013      	ands	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a8c:	4a0f      	ldr	r2, [pc, #60]	; (8004acc <HAL_GPIO_Init+0x304>)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3301      	adds	r3, #1
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	2b0f      	cmp	r3, #15
 8004a9c:	f67f aea2 	bls.w	80047e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	3724      	adds	r7, #36	; 0x24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40013800 	.word	0x40013800
 8004ab8:	40020000 	.word	0x40020000
 8004abc:	40020400 	.word	0x40020400
 8004ac0:	40020800 	.word	0x40020800
 8004ac4:	40020c00 	.word	0x40020c00
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	40013c00 	.word	0x40013c00

08004ad0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	887b      	ldrh	r3, [r7, #2]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
 8004aec:	e001      	b.n	8004af2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	807b      	strh	r3, [r7, #2]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b10:	787b      	ldrb	r3, [r7, #1]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b16:	887a      	ldrh	r2, [r7, #2]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b1c:	e003      	b.n	8004b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	041a      	lsls	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	619a      	str	r2, [r3, #24]
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b3e:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d006      	beq.n	8004b58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b4a:	4a05      	ldr	r2, [pc, #20]	; (8004b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fe2c 	bl	80027b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40013c00 	.word	0x40013c00

08004b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e12b      	b.n	8004dce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fc fff8 	bl	8001b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2224      	movs	r2, #36	; 0x24
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bc8:	f000 fd30 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 8004bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4a81      	ldr	r2, [pc, #516]	; (8004dd8 <HAL_I2C_Init+0x274>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d807      	bhi.n	8004be8 <HAL_I2C_Init+0x84>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a80      	ldr	r2, [pc, #512]	; (8004ddc <HAL_I2C_Init+0x278>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	bf94      	ite	ls
 8004be0:	2301      	movls	r3, #1
 8004be2:	2300      	movhi	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	e006      	b.n	8004bf6 <HAL_I2C_Init+0x92>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a7d      	ldr	r2, [pc, #500]	; (8004de0 <HAL_I2C_Init+0x27c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	bf94      	ite	ls
 8004bf0:	2301      	movls	r3, #1
 8004bf2:	2300      	movhi	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0e7      	b.n	8004dce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a78      	ldr	r2, [pc, #480]	; (8004de4 <HAL_I2C_Init+0x280>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	0c9b      	lsrs	r3, r3, #18
 8004c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a6a      	ldr	r2, [pc, #424]	; (8004dd8 <HAL_I2C_Init+0x274>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d802      	bhi.n	8004c38 <HAL_I2C_Init+0xd4>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	3301      	adds	r3, #1
 8004c36:	e009      	b.n	8004c4c <HAL_I2C_Init+0xe8>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	4a69      	ldr	r2, [pc, #420]	; (8004de8 <HAL_I2C_Init+0x284>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	099b      	lsrs	r3, r3, #6
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	495c      	ldr	r1, [pc, #368]	; (8004dd8 <HAL_I2C_Init+0x274>)
 8004c68:	428b      	cmp	r3, r1
 8004c6a:	d819      	bhi.n	8004ca0 <HAL_I2C_Init+0x13c>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1e59      	subs	r1, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c80:	400b      	ands	r3, r1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_I2C_Init+0x138>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1e59      	subs	r1, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c94:	3301      	adds	r3, #1
 8004c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9a:	e051      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	e04f      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d111      	bne.n	8004ccc <HAL_I2C_Init+0x168>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1e58      	subs	r0, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	440b      	add	r3, r1
 8004cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e012      	b.n	8004cf2 <HAL_I2C_Init+0x18e>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1e58      	subs	r0, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	0099      	lsls	r1, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_I2C_Init+0x196>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e022      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10e      	bne.n	8004d20 <HAL_I2C_Init+0x1bc>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1e58      	subs	r0, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	440b      	add	r3, r1
 8004d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d14:	3301      	adds	r3, #1
 8004d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1e:	e00f      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1e58      	subs	r0, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	0099      	lsls	r1, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d36:	3301      	adds	r3, #1
 8004d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	6809      	ldr	r1, [r1, #0]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6911      	ldr	r1, [r2, #16]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68d2      	ldr	r2, [r2, #12]
 8004d7a:	4311      	orrs	r1, r2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695a      	ldr	r2, [r3, #20]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	000186a0 	.word	0x000186a0
 8004ddc:	001e847f 	.word	0x001e847f
 8004de0:	003d08ff 	.word	0x003d08ff
 8004de4:	431bde83 	.word	0x431bde83
 8004de8:	10624dd3 	.word	0x10624dd3

08004dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e264      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d075      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e0a:	4ba3      	ldr	r3, [pc, #652]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d00c      	beq.n	8004e30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e16:	4ba0      	ldr	r3, [pc, #640]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d112      	bne.n	8004e48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e22:	4b9d      	ldr	r3, [pc, #628]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e2e:	d10b      	bne.n	8004e48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e30:	4b99      	ldr	r3, [pc, #612]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d05b      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x108>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d157      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e23f      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d106      	bne.n	8004e60 <HAL_RCC_OscConfig+0x74>
 8004e52:	4b91      	ldr	r3, [pc, #580]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a90      	ldr	r2, [pc, #576]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e01d      	b.n	8004e9c <HAL_RCC_OscConfig+0xb0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e68:	d10c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x98>
 8004e6a:	4b8b      	ldr	r3, [pc, #556]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a8a      	ldr	r2, [pc, #552]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	4b88      	ldr	r3, [pc, #544]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a87      	ldr	r2, [pc, #540]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e00b      	b.n	8004e9c <HAL_RCC_OscConfig+0xb0>
 8004e84:	4b84      	ldr	r3, [pc, #528]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a83      	ldr	r2, [pc, #524]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	4b81      	ldr	r3, [pc, #516]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a80      	ldr	r2, [pc, #512]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d013      	beq.n	8004ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fe fbec 	bl	8003680 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eac:	f7fe fbe8 	bl	8003680 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	; 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e204      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ebe:	4b76      	ldr	r3, [pc, #472]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0xc0>
 8004eca:	e014      	b.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fe fbd8 	bl	8003680 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed4:	f7fe fbd4 	bl	8003680 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	; 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e1f0      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee6:	4b6c      	ldr	r3, [pc, #432]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0xe8>
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d063      	beq.n	8004fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f02:	4b65      	ldr	r3, [pc, #404]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f0e:	4b62      	ldr	r3, [pc, #392]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d11c      	bne.n	8004f54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1a:	4b5f      	ldr	r3, [pc, #380]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d116      	bne.n	8004f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f26:	4b5c      	ldr	r3, [pc, #368]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_RCC_OscConfig+0x152>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d001      	beq.n	8004f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e1c4      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3e:	4b56      	ldr	r3, [pc, #344]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4952      	ldr	r1, [pc, #328]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f52:	e03a      	b.n	8004fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d020      	beq.n	8004f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f5c:	4b4f      	ldr	r3, [pc, #316]	; (800509c <HAL_RCC_OscConfig+0x2b0>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f62:	f7fe fb8d 	bl	8003680 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f6a:	f7fe fb89 	bl	8003680 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e1a5      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7c:	4b46      	ldr	r3, [pc, #280]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f0      	beq.n	8004f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f88:	4b43      	ldr	r3, [pc, #268]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	4940      	ldr	r1, [pc, #256]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	600b      	str	r3, [r1, #0]
 8004f9c:	e015      	b.n	8004fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f9e:	4b3f      	ldr	r3, [pc, #252]	; (800509c <HAL_RCC_OscConfig+0x2b0>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7fe fb6c 	bl	8003680 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fac:	f7fe fb68 	bl	8003680 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e184      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fbe:	4b36      	ldr	r3, [pc, #216]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d030      	beq.n	8005038 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d016      	beq.n	800500c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fde:	4b30      	ldr	r3, [pc, #192]	; (80050a0 <HAL_RCC_OscConfig+0x2b4>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe4:	f7fe fb4c 	bl	8003680 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fec:	f7fe fb48 	bl	8003680 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e164      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffe:	4b26      	ldr	r3, [pc, #152]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8005000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0x200>
 800500a:	e015      	b.n	8005038 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800500c:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <HAL_RCC_OscConfig+0x2b4>)
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005012:	f7fe fb35 	bl	8003680 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800501a:	f7fe fb31 	bl	8003680 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e14d      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800502c:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 800502e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f0      	bne.n	800501a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80a0 	beq.w	8005186 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005046:	2300      	movs	r3, #0
 8005048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800504a:	4b13      	ldr	r3, [pc, #76]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10f      	bne.n	8005076 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	4a0e      	ldr	r2, [pc, #56]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005064:	6413      	str	r3, [r2, #64]	; 0x40
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506e:	60bb      	str	r3, [r7, #8]
 8005070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005072:	2301      	movs	r3, #1
 8005074:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_RCC_OscConfig+0x2b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d121      	bne.n	80050c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005082:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <HAL_RCC_OscConfig+0x2b8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a07      	ldr	r2, [pc, #28]	; (80050a4 <HAL_RCC_OscConfig+0x2b8>)
 8005088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800508e:	f7fe faf7 	bl	8003680 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005094:	e011      	b.n	80050ba <HAL_RCC_OscConfig+0x2ce>
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800
 800509c:	42470000 	.word	0x42470000
 80050a0:	42470e80 	.word	0x42470e80
 80050a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a8:	f7fe faea 	bl	8003680 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e106      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ba:	4b85      	ldr	r3, [pc, #532]	; (80052d0 <HAL_RCC_OscConfig+0x4e4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d106      	bne.n	80050dc <HAL_RCC_OscConfig+0x2f0>
 80050ce:	4b81      	ldr	r3, [pc, #516]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	4a80      	ldr	r2, [pc, #512]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	6713      	str	r3, [r2, #112]	; 0x70
 80050da:	e01c      	b.n	8005116 <HAL_RCC_OscConfig+0x32a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b05      	cmp	r3, #5
 80050e2:	d10c      	bne.n	80050fe <HAL_RCC_OscConfig+0x312>
 80050e4:	4b7b      	ldr	r3, [pc, #492]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	4a7a      	ldr	r2, [pc, #488]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80050ea:	f043 0304 	orr.w	r3, r3, #4
 80050ee:	6713      	str	r3, [r2, #112]	; 0x70
 80050f0:	4b78      	ldr	r3, [pc, #480]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	4a77      	ldr	r2, [pc, #476]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	6713      	str	r3, [r2, #112]	; 0x70
 80050fc:	e00b      	b.n	8005116 <HAL_RCC_OscConfig+0x32a>
 80050fe:	4b75      	ldr	r3, [pc, #468]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	4a74      	ldr	r2, [pc, #464]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	6713      	str	r3, [r2, #112]	; 0x70
 800510a:	4b72      	ldr	r3, [pc, #456]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	4a71      	ldr	r2, [pc, #452]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d015      	beq.n	800514a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511e:	f7fe faaf 	bl	8003680 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005124:	e00a      	b.n	800513c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005126:	f7fe faab 	bl	8003680 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	f241 3288 	movw	r2, #5000	; 0x1388
 8005134:	4293      	cmp	r3, r2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e0c5      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513c:	4b65      	ldr	r3, [pc, #404]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0ee      	beq.n	8005126 <HAL_RCC_OscConfig+0x33a>
 8005148:	e014      	b.n	8005174 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800514a:	f7fe fa99 	bl	8003680 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005150:	e00a      	b.n	8005168 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005152:	f7fe fa95 	bl	8003680 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	4293      	cmp	r3, r2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e0af      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005168:	4b5a      	ldr	r3, [pc, #360]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1ee      	bne.n	8005152 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d105      	bne.n	8005186 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800517a:	4b56      	ldr	r3, [pc, #344]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	4a55      	ldr	r2, [pc, #340]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 8005180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005184:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 809b 	beq.w	80052c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005190:	4b50      	ldr	r3, [pc, #320]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 030c 	and.w	r3, r3, #12
 8005198:	2b08      	cmp	r3, #8
 800519a:	d05c      	beq.n	8005256 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d141      	bne.n	8005228 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a4:	4b4c      	ldr	r3, [pc, #304]	; (80052d8 <HAL_RCC_OscConfig+0x4ec>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051aa:	f7fe fa69 	bl	8003680 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b2:	f7fe fa65 	bl	8003680 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e081      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1f0      	bne.n	80051b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	019b      	lsls	r3, r3, #6
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	3b01      	subs	r3, #1
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	061b      	lsls	r3, r3, #24
 80051f4:	4937      	ldr	r1, [pc, #220]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051fa:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <HAL_RCC_OscConfig+0x4ec>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005200:	f7fe fa3e 	bl	8003680 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005208:	f7fe fa3a 	bl	8003680 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e056      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521a:	4b2e      	ldr	r3, [pc, #184]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0x41c>
 8005226:	e04e      	b.n	80052c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005228:	4b2b      	ldr	r3, [pc, #172]	; (80052d8 <HAL_RCC_OscConfig+0x4ec>)
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522e:	f7fe fa27 	bl	8003680 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005236:	f7fe fa23 	bl	8003680 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e03f      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005248:	4b22      	ldr	r3, [pc, #136]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f0      	bne.n	8005236 <HAL_RCC_OscConfig+0x44a>
 8005254:	e037      	b.n	80052c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e032      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005262:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d028      	beq.n	80052c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d121      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005288:	429a      	cmp	r2, r3
 800528a:	d11a      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005292:	4013      	ands	r3, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005298:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800529a:	4293      	cmp	r3, r2
 800529c:	d111      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	085b      	lsrs	r3, r3, #1
 80052aa:	3b01      	subs	r3, #1
 80052ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d107      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d001      	beq.n	80052c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40007000 	.word	0x40007000
 80052d4:	40023800 	.word	0x40023800
 80052d8:	42470060 	.word	0x42470060

080052dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0cc      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052f0:	4b68      	ldr	r3, [pc, #416]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d90c      	bls.n	8005318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fe:	4b65      	ldr	r3, [pc, #404]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b63      	ldr	r3, [pc, #396]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0b8      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d020      	beq.n	8005366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005330:	4b59      	ldr	r3, [pc, #356]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4a58      	ldr	r2, [pc, #352]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800533a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005348:	4b53      	ldr	r3, [pc, #332]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	4a52      	ldr	r2, [pc, #328]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b50      	ldr	r3, [pc, #320]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	494d      	ldr	r1, [pc, #308]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d044      	beq.n	80053fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537a:	4b47      	ldr	r3, [pc, #284]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d119      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e07f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d003      	beq.n	800539a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005396:	2b03      	cmp	r3, #3
 8005398:	d107      	bne.n	80053aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539a:	4b3f      	ldr	r3, [pc, #252]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e06f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053aa:	4b3b      	ldr	r3, [pc, #236]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e067      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ba:	4b37      	ldr	r3, [pc, #220]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f023 0203 	bic.w	r2, r3, #3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4934      	ldr	r1, [pc, #208]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053cc:	f7fe f958 	bl	8003680 <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	e00a      	b.n	80053ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d4:	f7fe f954 	bl	8003680 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e04f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ea:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 020c 	and.w	r2, r3, #12
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d1eb      	bne.n	80053d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053fc:	4b25      	ldr	r3, [pc, #148]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d20c      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540a:	4b22      	ldr	r3, [pc, #136]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005412:	4b20      	ldr	r3, [pc, #128]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e032      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005430:	4b19      	ldr	r3, [pc, #100]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4916      	ldr	r1, [pc, #88]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	4313      	orrs	r3, r2
 8005440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	490e      	ldr	r1, [pc, #56]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005462:	f000 f821 	bl	80054a8 <HAL_RCC_GetSysClockFreq>
 8005466:	4602      	mov	r2, r0
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	490a      	ldr	r1, [pc, #40]	; (800549c <HAL_RCC_ClockConfig+0x1c0>)
 8005474:	5ccb      	ldrb	r3, [r1, r3]
 8005476:	fa22 f303 	lsr.w	r3, r2, r3
 800547a:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <HAL_RCC_ClockConfig+0x1c4>)
 800547c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800547e:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe f8b8 	bl	80035f8 <HAL_InitTick>

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40023c00 	.word	0x40023c00
 8005498:	40023800 	.word	0x40023800
 800549c:	08015fd4 	.word	0x08015fd4
 80054a0:	20000008 	.word	0x20000008
 80054a4:	2000000c 	.word	0x2000000c

080054a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a8:	b5b0      	push	{r4, r5, r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054ae:	2100      	movs	r1, #0
 80054b0:	6079      	str	r1, [r7, #4]
 80054b2:	2100      	movs	r1, #0
 80054b4:	60f9      	str	r1, [r7, #12]
 80054b6:	2100      	movs	r1, #0
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054ba:	2100      	movs	r1, #0
 80054bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054be:	4952      	ldr	r1, [pc, #328]	; (8005608 <HAL_RCC_GetSysClockFreq+0x160>)
 80054c0:	6889      	ldr	r1, [r1, #8]
 80054c2:	f001 010c 	and.w	r1, r1, #12
 80054c6:	2908      	cmp	r1, #8
 80054c8:	d00d      	beq.n	80054e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80054ca:	2908      	cmp	r1, #8
 80054cc:	f200 8094 	bhi.w	80055f8 <HAL_RCC_GetSysClockFreq+0x150>
 80054d0:	2900      	cmp	r1, #0
 80054d2:	d002      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x32>
 80054d4:	2904      	cmp	r1, #4
 80054d6:	d003      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0x38>
 80054d8:	e08e      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054da:	4b4c      	ldr	r3, [pc, #304]	; (800560c <HAL_RCC_GetSysClockFreq+0x164>)
 80054dc:	60bb      	str	r3, [r7, #8]
       break;
 80054de:	e08e      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054e0:	4b4b      	ldr	r3, [pc, #300]	; (8005610 <HAL_RCC_GetSysClockFreq+0x168>)
 80054e2:	60bb      	str	r3, [r7, #8]
      break;
 80054e4:	e08b      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e6:	4948      	ldr	r1, [pc, #288]	; (8005608 <HAL_RCC_GetSysClockFreq+0x160>)
 80054e8:	6849      	ldr	r1, [r1, #4]
 80054ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80054ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054f0:	4945      	ldr	r1, [pc, #276]	; (8005608 <HAL_RCC_GetSysClockFreq+0x160>)
 80054f2:	6849      	ldr	r1, [r1, #4]
 80054f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d024      	beq.n	8005546 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fc:	4942      	ldr	r1, [pc, #264]	; (8005608 <HAL_RCC_GetSysClockFreq+0x160>)
 80054fe:	6849      	ldr	r1, [r1, #4]
 8005500:	0989      	lsrs	r1, r1, #6
 8005502:	4608      	mov	r0, r1
 8005504:	f04f 0100 	mov.w	r1, #0
 8005508:	f240 14ff 	movw	r4, #511	; 0x1ff
 800550c:	f04f 0500 	mov.w	r5, #0
 8005510:	ea00 0204 	and.w	r2, r0, r4
 8005514:	ea01 0305 	and.w	r3, r1, r5
 8005518:	493d      	ldr	r1, [pc, #244]	; (8005610 <HAL_RCC_GetSysClockFreq+0x168>)
 800551a:	fb01 f003 	mul.w	r0, r1, r3
 800551e:	2100      	movs	r1, #0
 8005520:	fb01 f102 	mul.w	r1, r1, r2
 8005524:	1844      	adds	r4, r0, r1
 8005526:	493a      	ldr	r1, [pc, #232]	; (8005610 <HAL_RCC_GetSysClockFreq+0x168>)
 8005528:	fba2 0101 	umull	r0, r1, r2, r1
 800552c:	1863      	adds	r3, r4, r1
 800552e:	4619      	mov	r1, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	461a      	mov	r2, r3
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	f7fb fa98 	bl	8000a6c <__aeabi_uldivmod>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4613      	mov	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e04a      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005546:	4b30      	ldr	r3, [pc, #192]	; (8005608 <HAL_RCC_GetSysClockFreq+0x160>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	099b      	lsrs	r3, r3, #6
 800554c:	461a      	mov	r2, r3
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005556:	f04f 0100 	mov.w	r1, #0
 800555a:	ea02 0400 	and.w	r4, r2, r0
 800555e:	ea03 0501 	and.w	r5, r3, r1
 8005562:	4620      	mov	r0, r4
 8005564:	4629      	mov	r1, r5
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	014b      	lsls	r3, r1, #5
 8005570:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005574:	0142      	lsls	r2, r0, #5
 8005576:	4610      	mov	r0, r2
 8005578:	4619      	mov	r1, r3
 800557a:	1b00      	subs	r0, r0, r4
 800557c:	eb61 0105 	sbc.w	r1, r1, r5
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	018b      	lsls	r3, r1, #6
 800558a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800558e:	0182      	lsls	r2, r0, #6
 8005590:	1a12      	subs	r2, r2, r0
 8005592:	eb63 0301 	sbc.w	r3, r3, r1
 8005596:	f04f 0000 	mov.w	r0, #0
 800559a:	f04f 0100 	mov.w	r1, #0
 800559e:	00d9      	lsls	r1, r3, #3
 80055a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055a4:	00d0      	lsls	r0, r2, #3
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	1912      	adds	r2, r2, r4
 80055ac:	eb45 0303 	adc.w	r3, r5, r3
 80055b0:	f04f 0000 	mov.w	r0, #0
 80055b4:	f04f 0100 	mov.w	r1, #0
 80055b8:	0299      	lsls	r1, r3, #10
 80055ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055be:	0290      	lsls	r0, r2, #10
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4610      	mov	r0, r2
 80055c6:	4619      	mov	r1, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	f7fb fa4c 	bl	8000a6c <__aeabi_uldivmod>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4613      	mov	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <HAL_RCC_GetSysClockFreq+0x160>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	0c1b      	lsrs	r3, r3, #16
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	3301      	adds	r3, #1
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	60bb      	str	r3, [r7, #8]
      break;
 80055f6:	e002      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <HAL_RCC_GetSysClockFreq+0x164>)
 80055fa:	60bb      	str	r3, [r7, #8]
      break;
 80055fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055fe:	68bb      	ldr	r3, [r7, #8]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bdb0      	pop	{r4, r5, r7, pc}
 8005608:	40023800 	.word	0x40023800
 800560c:	00f42400 	.word	0x00f42400
 8005610:	017d7840 	.word	0x017d7840

08005614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005618:	4b03      	ldr	r3, [pc, #12]	; (8005628 <HAL_RCC_GetHCLKFreq+0x14>)
 800561a:	681b      	ldr	r3, [r3, #0]
}
 800561c:	4618      	mov	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000008 	.word	0x20000008

0800562c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005630:	f7ff fff0 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	0a9b      	lsrs	r3, r3, #10
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	4903      	ldr	r1, [pc, #12]	; (8005650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40023800 	.word	0x40023800
 8005650:	08015fe4 	.word	0x08015fe4

08005654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005658:	f7ff ffdc 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0b5b      	lsrs	r3, r3, #13
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4903      	ldr	r1, [pc, #12]	; (8005678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40023800 	.word	0x40023800
 8005678:	08015fe4 	.word	0x08015fe4

0800567c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d105      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d035      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056a4:	4b67      	ldr	r3, [pc, #412]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056aa:	f7fd ffe9 	bl	8003680 <HAL_GetTick>
 80056ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056b0:	e008      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056b2:	f7fd ffe5 	bl	8003680 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e0ba      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056c4:	4b60      	ldr	r3, [pc, #384]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f0      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	019a      	lsls	r2, r3, #6
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	071b      	lsls	r3, r3, #28
 80056dc:	495a      	ldr	r1, [pc, #360]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056e4:	4b57      	ldr	r3, [pc, #348]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ea:	f7fd ffc9 	bl	8003680 <HAL_GetTick>
 80056ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056f0:	e008      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056f2:	f7fd ffc5 	bl	8003680 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e09a      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005704:	4b50      	ldr	r3, [pc, #320]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8083 	beq.w	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	4b49      	ldr	r3, [pc, #292]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	4a48      	ldr	r2, [pc, #288]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572c:	6413      	str	r3, [r2, #64]	; 0x40
 800572e:	4b46      	ldr	r3, [pc, #280]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800573a:	4b44      	ldr	r3, [pc, #272]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a43      	ldr	r2, [pc, #268]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005744:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005746:	f7fd ff9b 	bl	8003680 <HAL_GetTick>
 800574a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800574c:	e008      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800574e:	f7fd ff97 	bl	8003680 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e06c      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005760:	4b3a      	ldr	r3, [pc, #232]	; (800584c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0f0      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800576c:	4b36      	ldr	r3, [pc, #216]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005774:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d02f      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	429a      	cmp	r2, r3
 8005788:	d028      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800578a:	4b2f      	ldr	r3, [pc, #188]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005792:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005794:	4b2e      	ldr	r3, [pc, #184]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005796:	2201      	movs	r2, #1
 8005798:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800579a:	4b2d      	ldr	r3, [pc, #180]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057a0:	4a29      	ldr	r2, [pc, #164]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057a6:	4b28      	ldr	r3, [pc, #160]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d114      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057b2:	f7fd ff65 	bl	8003680 <HAL_GetTick>
 80057b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b8:	e00a      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ba:	f7fd ff61 	bl	8003680 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e034      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d0:	4b1d      	ldr	r3, [pc, #116]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0ee      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057e8:	d10d      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80057ea:	4b17      	ldr	r3, [pc, #92]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fe:	4912      	ldr	r1, [pc, #72]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005800:	4313      	orrs	r3, r2
 8005802:	608b      	str	r3, [r1, #8]
 8005804:	e005      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	4a0f      	ldr	r2, [pc, #60]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800580c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005810:	6093      	str	r3, [r2, #8]
 8005812:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005814:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800581e:	490a      	ldr	r1, [pc, #40]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005820:	4313      	orrs	r3, r2
 8005822:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	7c1a      	ldrb	r2, [r3, #16]
 8005834:	4b07      	ldr	r3, [pc, #28]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005836:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	42470068 	.word	0x42470068
 8005848:	40023800 	.word	0x40023800
 800584c:	40007000 	.word	0x40007000
 8005850:	42470e40 	.word	0x42470e40
 8005854:	424711e0 	.word	0x424711e0

08005858 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e083      	b.n	8005972 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	7f5b      	ldrb	r3, [r3, #29]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d105      	bne.n	8005880 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fd fa60 	bl	8002d40 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	22ca      	movs	r2, #202	; 0xca
 800588c:	625a      	str	r2, [r3, #36]	; 0x24
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2253      	movs	r2, #83	; 0x53
 8005894:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f897 	bl	80059ca <RTC_EnterInitMode>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	22ff      	movs	r2, #255	; 0xff
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2204      	movs	r2, #4
 80058ae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e05e      	b.n	8005972 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6899      	ldr	r1, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	68d2      	ldr	r2, [r2, #12]
 80058ee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6919      	ldr	r1, [r3, #16]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	041a      	lsls	r2, r3, #16
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005912:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10e      	bne.n	8005940 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f829 	bl	800597a <HAL_RTC_WaitForSynchro>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	22ff      	movs	r2, #255	; 0xff
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2204      	movs	r2, #4
 800593a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e018      	b.n	8005972 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	22ff      	movs	r2, #255	; 0xff
 8005968:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005970:	2300      	movs	r3, #0
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005994:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005996:	f7fd fe73 	bl	8003680 <HAL_GetTick>
 800599a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800599c:	e009      	b.n	80059b2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800599e:	f7fd fe6f 	bl	8003680 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ac:	d901      	bls.n	80059b2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e007      	b.n	80059c2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0ee      	beq.n	800599e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d119      	bne.n	8005a18 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059ee:	f7fd fe47 	bl	8003680 <HAL_GetTick>
 80059f2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80059f4:	e009      	b.n	8005a0a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80059f6:	f7fd fe43 	bl	8003680 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a04:	d901      	bls.n	8005a0a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e007      	b.n	8005a1a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0ee      	beq.n	80059f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e07b      	b.n	8005b2c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d108      	bne.n	8005a4e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a44:	d009      	beq.n	8005a5a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	61da      	str	r2, [r3, #28]
 8005a4c:	e005      	b.n	8005a5a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fd f9fb 	bl	8002e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a90:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	ea42 0103 	orr.w	r1, r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	0c1b      	lsrs	r3, r3, #16
 8005af8:	f003 0104 	and.w	r1, r3, #4
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	f003 0210 	and.w	r2, r3, #16
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69da      	ldr	r2, [r3, #28]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	603b      	str	r3, [r7, #0]
 8005b40:	4613      	mov	r3, r2
 8005b42:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_SPI_Transmit+0x22>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e126      	b.n	8005da4 <HAL_SPI_Transmit+0x270>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b5e:	f7fd fd8f 	bl	8003680 <HAL_GetTick>
 8005b62:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d002      	beq.n	8005b7a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b74:	2302      	movs	r3, #2
 8005b76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b78:	e10b      	b.n	8005d92 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <HAL_SPI_Transmit+0x52>
 8005b80:	88fb      	ldrh	r3, [r7, #6]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d102      	bne.n	8005b8c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b8a:	e102      	b.n	8005d92 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2203      	movs	r2, #3
 8005b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	88fa      	ldrh	r2, [r7, #6]
 8005ba4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd2:	d10f      	bne.n	8005bf4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bf2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfe:	2b40      	cmp	r3, #64	; 0x40
 8005c00:	d007      	beq.n	8005c12 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1a:	d14b      	bne.n	8005cb4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_SPI_Transmit+0xf6>
 8005c24:	8afb      	ldrh	r3, [r7, #22]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d13e      	bne.n	8005ca8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	881a      	ldrh	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3a:	1c9a      	adds	r2, r3, #2
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c4e:	e02b      	b.n	8005ca8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d112      	bne.n	8005c84 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	881a      	ldrh	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	1c9a      	adds	r2, r3, #2
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c82:	e011      	b.n	8005ca8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c84:	f7fd fcfc 	bl	8003680 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d803      	bhi.n	8005c9c <HAL_SPI_Transmit+0x168>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d102      	bne.n	8005ca2 <HAL_SPI_Transmit+0x16e>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d102      	bne.n	8005ca8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ca6:	e074      	b.n	8005d92 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1ce      	bne.n	8005c50 <HAL_SPI_Transmit+0x11c>
 8005cb2:	e04c      	b.n	8005d4e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <HAL_SPI_Transmit+0x18e>
 8005cbc:	8afb      	ldrh	r3, [r7, #22]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d140      	bne.n	8005d44 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	7812      	ldrb	r2, [r2, #0]
 8005cce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ce8:	e02c      	b.n	8005d44 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d113      	bne.n	8005d20 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	7812      	ldrb	r2, [r2, #0]
 8005d04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d1e:	e011      	b.n	8005d44 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d20:	f7fd fcae 	bl	8003680 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d803      	bhi.n	8005d38 <HAL_SPI_Transmit+0x204>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d36:	d102      	bne.n	8005d3e <HAL_SPI_Transmit+0x20a>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d102      	bne.n	8005d44 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d42:	e026      	b.n	8005d92 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1cd      	bne.n	8005cea <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fba0 	bl	8006498 <SPI_EndRxTxTransaction>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	613b      	str	r3, [r7, #16]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	77fb      	strb	r3, [r7, #31]
 8005d8e:	e000      	b.n	8005d92 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005d90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005da2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	; 0x30
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_SPI_TransmitReceive+0x26>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e18a      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x33c>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dda:	f7fd fc51 	bl	8003680 <HAL_GetTick>
 8005dde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005df0:	887b      	ldrh	r3, [r7, #2]
 8005df2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005df4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d00f      	beq.n	8005e1c <HAL_SPI_TransmitReceive+0x70>
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e02:	d107      	bne.n	8005e14 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d103      	bne.n	8005e14 <HAL_SPI_TransmitReceive+0x68>
 8005e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d003      	beq.n	8005e1c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e14:	2302      	movs	r3, #2
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e1a:	e15b      	b.n	80060d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <HAL_SPI_TransmitReceive+0x82>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <HAL_SPI_TransmitReceive+0x82>
 8005e28:	887b      	ldrh	r3, [r7, #2]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e34:	e14e      	b.n	80060d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d003      	beq.n	8005e4a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2205      	movs	r2, #5
 8005e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	887a      	ldrh	r2, [r7, #2]
 8005e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	887a      	ldrh	r2, [r7, #2]
 8005e60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	887a      	ldrh	r2, [r7, #2]
 8005e6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	887a      	ldrh	r2, [r7, #2]
 8005e72:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8a:	2b40      	cmp	r3, #64	; 0x40
 8005e8c:	d007      	beq.n	8005e9e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea6:	d178      	bne.n	8005f9a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <HAL_SPI_TransmitReceive+0x10a>
 8005eb0:	8b7b      	ldrh	r3, [r7, #26]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d166      	bne.n	8005f84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	881a      	ldrh	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	1c9a      	adds	r2, r3, #2
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eda:	e053      	b.n	8005f84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d11b      	bne.n	8005f22 <HAL_SPI_TransmitReceive+0x176>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d016      	beq.n	8005f22 <HAL_SPI_TransmitReceive+0x176>
 8005ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d113      	bne.n	8005f22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	881a      	ldrh	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0a:	1c9a      	adds	r2, r3, #2
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d119      	bne.n	8005f64 <HAL_SPI_TransmitReceive+0x1b8>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d014      	beq.n	8005f64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	b292      	uxth	r2, r2
 8005f46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	1c9a      	adds	r2, r3, #2
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f60:	2301      	movs	r3, #1
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f64:	f7fd fb8c 	bl	8003680 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d807      	bhi.n	8005f84 <HAL_SPI_TransmitReceive+0x1d8>
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d003      	beq.n	8005f84 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005f82:	e0a7      	b.n	80060d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1a6      	bne.n	8005edc <HAL_SPI_TransmitReceive+0x130>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1a1      	bne.n	8005edc <HAL_SPI_TransmitReceive+0x130>
 8005f98:	e07c      	b.n	8006094 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x1fc>
 8005fa2:	8b7b      	ldrh	r3, [r7, #26]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d16b      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	7812      	ldrb	r2, [r2, #0]
 8005fb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fce:	e057      	b.n	8006080 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d11c      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x26c>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d017      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x26c>
 8005fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d114      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	7812      	ldrb	r2, [r2, #0]
 8005ffa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b01      	cmp	r3, #1
 8006024:	d119      	bne.n	800605a <HAL_SPI_TransmitReceive+0x2ae>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d014      	beq.n	800605a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006056:	2301      	movs	r3, #1
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800605a:	f7fd fb11 	bl	8003680 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006066:	429a      	cmp	r2, r3
 8006068:	d803      	bhi.n	8006072 <HAL_SPI_TransmitReceive+0x2c6>
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d102      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x2cc>
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	2b00      	cmp	r3, #0
 8006076:	d103      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800607e:	e029      	b.n	80060d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1a2      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x224>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d19d      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 f9fd 	bl	8006498 <SPI_EndRxTxTransaction>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d006      	beq.n	80060b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80060b0:	e010      	b.n	80060d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10b      	bne.n	80060d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	e000      	b.n	80060d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80060d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3730      	adds	r7, #48	; 0x30
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_SPI_Transmit_DMA+0x20>
 800610c:	2302      	movs	r3, #2
 800610e:	e09b      	b.n	8006248 <HAL_SPI_Transmit_DMA+0x158>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b01      	cmp	r3, #1
 8006122:	d002      	beq.n	800612a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006124:	2302      	movs	r3, #2
 8006126:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006128:	e089      	b.n	800623e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_SPI_Transmit_DMA+0x46>
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d102      	bne.n	800613c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	75fb      	strb	r3, [r7, #23]
    goto error;
 800613a:	e080      	b.n	800623e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2203      	movs	r2, #3
 8006140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006182:	d10f      	bne.n	80061a4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006192:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a8:	4a29      	ldr	r2, [pc, #164]	; (8006250 <HAL_SPI_Transmit_DMA+0x160>)
 80061aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b0:	4a28      	ldr	r2, [pc, #160]	; (8006254 <HAL_SPI_Transmit_DMA+0x164>)
 80061b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b8:	4a27      	ldr	r2, [pc, #156]	; (8006258 <HAL_SPI_Transmit_DMA+0x168>)
 80061ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c0:	2200      	movs	r2, #0
 80061c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	4619      	mov	r1, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061dc:	f7fe f832 	bl	8004244 <HAL_DMA_Start_IT>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00c      	beq.n	8006200 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ea:	f043 0210 	orr.w	r2, r3, #16
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80061fe:	e01e      	b.n	800623e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620a:	2b40      	cmp	r3, #64	; 0x40
 800620c:	d007      	beq.n	800621e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800621c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0220 	orr.w	r2, r2, #32
 800622c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0202 	orr.w	r2, r2, #2
 800623c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	0800632d 	.word	0x0800632d
 8006254:	08006285 	.word	0x08006285
 8006258:	08006349 	.word	0x08006349

0800625c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006292:	f7fd f9f5 	bl	8003680 <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a6:	d03b      	beq.n	8006320 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0220 	bic.w	r2, r2, #32
 80062b6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0202 	bic.w	r2, r2, #2
 80062c6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	2164      	movs	r1, #100	; 0x64
 80062cc:	6978      	ldr	r0, [r7, #20]
 80062ce:	f000 f8e3 	bl	8006498 <SPI_EndRxTxTransaction>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062dc:	f043 0220 	orr.w	r2, r3, #32
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2200      	movs	r2, #0
 8006306:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006318:	6978      	ldr	r0, [r7, #20]
 800631a:	f7ff ffa9 	bl	8006270 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800631e:	e002      	b.n	8006326 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006320:	6978      	ldr	r0, [r7, #20]
 8006322:	f7fc fa35 	bl	8002790 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff ff8e 	bl	800625c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0203 	bic.w	r2, r2, #3
 8006364:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636a:	f043 0210 	orr.w	r2, r3, #16
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f7ff ff78 	bl	8006270 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	603b      	str	r3, [r7, #0]
 8006394:	4613      	mov	r3, r2
 8006396:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006398:	f7fd f972 	bl	8003680 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	1a9b      	subs	r3, r3, r2
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	4413      	add	r3, r2
 80063a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063a8:	f7fd f96a 	bl	8003680 <HAL_GetTick>
 80063ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063ae:	4b39      	ldr	r3, [pc, #228]	; (8006494 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	015b      	lsls	r3, r3, #5
 80063b4:	0d1b      	lsrs	r3, r3, #20
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	fb02 f303 	mul.w	r3, r2, r3
 80063bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063be:	e054      	b.n	800646a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c6:	d050      	beq.n	800646a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063c8:	f7fd f95a 	bl	8003680 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d902      	bls.n	80063de <SPI_WaitFlagStateUntilTimeout+0x56>
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d13d      	bne.n	800645a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063f6:	d111      	bne.n	800641c <SPI_WaitFlagStateUntilTimeout+0x94>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006400:	d004      	beq.n	800640c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640a:	d107      	bne.n	800641c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800641a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006424:	d10f      	bne.n	8006446 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006444:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e017      	b.n	800648a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	3b01      	subs	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4013      	ands	r3, r2
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	429a      	cmp	r2, r3
 8006478:	bf0c      	ite	eq
 800647a:	2301      	moveq	r3, #1
 800647c:	2300      	movne	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	429a      	cmp	r2, r3
 8006486:	d19b      	bne.n	80063c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000008 	.word	0x20000008

08006498 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064a4:	4b1b      	ldr	r3, [pc, #108]	; (8006514 <SPI_EndRxTxTransaction+0x7c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1b      	ldr	r2, [pc, #108]	; (8006518 <SPI_EndRxTxTransaction+0x80>)
 80064aa:	fba2 2303 	umull	r2, r3, r2, r3
 80064ae:	0d5b      	lsrs	r3, r3, #21
 80064b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064b4:	fb02 f303 	mul.w	r3, r2, r3
 80064b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064c2:	d112      	bne.n	80064ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2200      	movs	r2, #0
 80064cc:	2180      	movs	r1, #128	; 0x80
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff ff5a 	bl	8006388 <SPI_WaitFlagStateUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d016      	beq.n	8006508 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064de:	f043 0220 	orr.w	r2, r3, #32
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e00f      	b.n	800650a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d0f2      	beq.n	80064ea <SPI_EndRxTxTransaction+0x52>
 8006504:	e000      	b.n	8006508 <SPI_EndRxTxTransaction+0x70>
        break;
 8006506:	bf00      	nop
  }

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000008 	.word	0x20000008
 8006518:	165e9f81 	.word	0x165e9f81

0800651c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e097      	b.n	8006660 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d106      	bne.n	800654a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7fc ff33 	bl	80033b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2202      	movs	r2, #2
 800654e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006560:	f023 0307 	bic.w	r3, r3, #7
 8006564:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3304      	adds	r3, #4
 800656e:	4619      	mov	r1, r3
 8006570:	4610      	mov	r0, r2
 8006572:	f000 f907 	bl	8006784 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	4313      	orrs	r3, r2
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80065bc:	f023 030c 	bic.w	r3, r3, #12
 80065c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	4313      	orrs	r3, r2
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	011a      	lsls	r2, r3, #4
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	031b      	lsls	r3, r3, #12
 80065ec:	4313      	orrs	r3, r2
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	4313      	orrs	r3, r2
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006678:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006680:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006688:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006690:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d110      	bne.n	80066ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d102      	bne.n	80066a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800669e:	7b7b      	ldrb	r3, [r7, #13]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d001      	beq.n	80066a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e069      	b.n	800677c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066b8:	e031      	b.n	800671e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d110      	bne.n	80066e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d102      	bne.n	80066cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066c6:	7b3b      	ldrb	r3, [r7, #12]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d001      	beq.n	80066d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e055      	b.n	800677c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066e0:	e01d      	b.n	800671e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d108      	bne.n	80066fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066e8:	7bbb      	ldrb	r3, [r7, #14]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d105      	bne.n	80066fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066ee:	7b7b      	ldrb	r3, [r7, #13]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d102      	bne.n	80066fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066f4:	7b3b      	ldrb	r3, [r7, #12]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d001      	beq.n	80066fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e03e      	b.n	800677c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2202      	movs	r2, #2
 8006702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2202      	movs	r2, #2
 800670a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <HAL_TIM_Encoder_Start+0xc4>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b04      	cmp	r3, #4
 8006728:	d008      	beq.n	800673c <HAL_TIM_Encoder_Start+0xd4>
 800672a:	e00f      	b.n	800674c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2201      	movs	r2, #1
 8006732:	2100      	movs	r1, #0
 8006734:	4618      	mov	r0, r3
 8006736:	f000 f8a5 	bl	8006884 <TIM_CCxChannelCmd>
      break;
 800673a:	e016      	b.n	800676a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2201      	movs	r2, #1
 8006742:	2104      	movs	r1, #4
 8006744:	4618      	mov	r0, r3
 8006746:	f000 f89d 	bl	8006884 <TIM_CCxChannelCmd>
      break;
 800674a:	e00e      	b.n	800676a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2201      	movs	r2, #1
 8006752:	2100      	movs	r1, #0
 8006754:	4618      	mov	r0, r3
 8006756:	f000 f895 	bl	8006884 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2201      	movs	r2, #1
 8006760:	2104      	movs	r1, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f000 f88e 	bl	8006884 <TIM_CCxChannelCmd>
      break;
 8006768:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0201 	orr.w	r2, r2, #1
 8006778:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a34      	ldr	r2, [pc, #208]	; (8006868 <TIM_Base_SetConfig+0xe4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00f      	beq.n	80067bc <TIM_Base_SetConfig+0x38>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a2:	d00b      	beq.n	80067bc <TIM_Base_SetConfig+0x38>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a31      	ldr	r2, [pc, #196]	; (800686c <TIM_Base_SetConfig+0xe8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d007      	beq.n	80067bc <TIM_Base_SetConfig+0x38>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a30      	ldr	r2, [pc, #192]	; (8006870 <TIM_Base_SetConfig+0xec>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d003      	beq.n	80067bc <TIM_Base_SetConfig+0x38>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a2f      	ldr	r2, [pc, #188]	; (8006874 <TIM_Base_SetConfig+0xf0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d108      	bne.n	80067ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a25      	ldr	r2, [pc, #148]	; (8006868 <TIM_Base_SetConfig+0xe4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d01b      	beq.n	800680e <TIM_Base_SetConfig+0x8a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067dc:	d017      	beq.n	800680e <TIM_Base_SetConfig+0x8a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a22      	ldr	r2, [pc, #136]	; (800686c <TIM_Base_SetConfig+0xe8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d013      	beq.n	800680e <TIM_Base_SetConfig+0x8a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a21      	ldr	r2, [pc, #132]	; (8006870 <TIM_Base_SetConfig+0xec>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00f      	beq.n	800680e <TIM_Base_SetConfig+0x8a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a20      	ldr	r2, [pc, #128]	; (8006874 <TIM_Base_SetConfig+0xf0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00b      	beq.n	800680e <TIM_Base_SetConfig+0x8a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a1f      	ldr	r2, [pc, #124]	; (8006878 <TIM_Base_SetConfig+0xf4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d007      	beq.n	800680e <TIM_Base_SetConfig+0x8a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1e      	ldr	r2, [pc, #120]	; (800687c <TIM_Base_SetConfig+0xf8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d003      	beq.n	800680e <TIM_Base_SetConfig+0x8a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <TIM_Base_SetConfig+0xfc>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d108      	bne.n	8006820 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4313      	orrs	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a08      	ldr	r2, [pc, #32]	; (8006868 <TIM_Base_SetConfig+0xe4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d103      	bne.n	8006854 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	615a      	str	r2, [r3, #20]
}
 800685a:	bf00      	nop
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40010000 	.word	0x40010000
 800686c:	40000400 	.word	0x40000400
 8006870:	40000800 	.word	0x40000800
 8006874:	40000c00 	.word	0x40000c00
 8006878:	40014000 	.word	0x40014000
 800687c:	40014400 	.word	0x40014400
 8006880:	40014800 	.word	0x40014800

08006884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	2201      	movs	r2, #1
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1a      	ldr	r2, [r3, #32]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	43db      	mvns	r3, r3
 80068a6:	401a      	ands	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a1a      	ldr	r2, [r3, #32]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f003 031f 	and.w	r3, r3, #31
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	fa01 f303 	lsl.w	r3, r1, r3
 80068bc:	431a      	orrs	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
	...

080068d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e050      	b.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1c      	ldr	r2, [pc, #112]	; (8006998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d018      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006934:	d013      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a18      	ldr	r2, [pc, #96]	; (800699c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00e      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a16      	ldr	r2, [pc, #88]	; (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d009      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a15      	ldr	r2, [pc, #84]	; (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a13      	ldr	r2, [pc, #76]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d10c      	bne.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4313      	orrs	r3, r2
 800696e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40010000 	.word	0x40010000
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	40014000 	.word	0x40014000

080069ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e03f      	b.n	8006a3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fc fd7c 	bl	80034d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2224      	movs	r2, #36	; 0x24
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f929 	bl	8006c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691a      	ldr	r2, [r3, #16]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695a      	ldr	r2, [r3, #20]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68da      	ldr	r2, [r3, #12]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b08a      	sub	sp, #40	; 0x28
 8006a4a:	af02      	add	r7, sp, #8
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	4613      	mov	r3, r2
 8006a54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b20      	cmp	r3, #32
 8006a64:	d17c      	bne.n	8006b60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_UART_Transmit+0x2c>
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e075      	b.n	8006b62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_UART_Transmit+0x3e>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e06e      	b.n	8006b62 <HAL_UART_Transmit+0x11c>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2221      	movs	r2, #33	; 0x21
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a9a:	f7fc fdf1 	bl	8003680 <HAL_GetTick>
 8006a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	88fa      	ldrh	r2, [r7, #6]
 8006aa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	88fa      	ldrh	r2, [r7, #6]
 8006aaa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab4:	d108      	bne.n	8006ac8 <HAL_UART_Transmit+0x82>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d104      	bne.n	8006ac8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	61bb      	str	r3, [r7, #24]
 8006ac6:	e003      	b.n	8006ad0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006ad8:	e02a      	b.n	8006b30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2180      	movs	r1, #128	; 0x80
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f840 	bl	8006b6a <UART_WaitOnFlagUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e036      	b.n	8006b62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10b      	bne.n	8006b12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	e007      	b.n	8006b22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	781a      	ldrb	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1cf      	bne.n	8006ada <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2200      	movs	r2, #0
 8006b42:	2140      	movs	r1, #64	; 0x40
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f810 	bl	8006b6a <UART_WaitOnFlagUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e006      	b.n	8006b62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e000      	b.n	8006b62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b60:	2302      	movs	r3, #2
  }
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3720      	adds	r7, #32
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b090      	sub	sp, #64	; 0x40
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	603b      	str	r3, [r7, #0]
 8006b76:	4613      	mov	r3, r2
 8006b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7a:	e050      	b.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d04c      	beq.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d007      	beq.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b8a:	f7fc fd79 	bl	8003680 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d241      	bcs.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	330c      	adds	r3, #12
 8006bb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bba:	637a      	str	r2, [r7, #52]	; 0x34
 8006bbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e5      	bne.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3314      	adds	r3, #20
 8006bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3314      	adds	r3, #20
 8006bec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bee:	623a      	str	r2, [r7, #32]
 8006bf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	69f9      	ldr	r1, [r7, #28]
 8006bf4:	6a3a      	ldr	r2, [r7, #32]
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e5      	bne.n	8006bce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e00f      	b.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4013      	ands	r3, r2
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	bf0c      	ite	eq
 8006c2e:	2301      	moveq	r3, #1
 8006c30:	2300      	movne	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d09f      	beq.n	8006b7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3740      	adds	r7, #64	; 0x40
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	b09f      	sub	sp, #124	; 0x7c
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5e:	68d9      	ldr	r1, [r3, #12]
 8006c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	ea40 0301 	orr.w	r3, r0, r1
 8006c68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c8c:	f021 010c 	bic.w	r1, r1, #12
 8006c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c96:	430b      	orrs	r3, r1
 8006c98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca6:	6999      	ldr	r1, [r3, #24]
 8006ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	ea40 0301 	orr.w	r3, r0, r1
 8006cb0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	4bc5      	ldr	r3, [pc, #788]	; (8006fcc <UART_SetConfig+0x384>)
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d004      	beq.n	8006cc6 <UART_SetConfig+0x7e>
 8006cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	4bc3      	ldr	r3, [pc, #780]	; (8006fd0 <UART_SetConfig+0x388>)
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d103      	bne.n	8006cce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cc6:	f7fe fcc5 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 8006cca:	6778      	str	r0, [r7, #116]	; 0x74
 8006ccc:	e002      	b.n	8006cd4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cce:	f7fe fcad 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 8006cd2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cdc:	f040 80b6 	bne.w	8006e4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ce2:	461c      	mov	r4, r3
 8006ce4:	f04f 0500 	mov.w	r5, #0
 8006ce8:	4622      	mov	r2, r4
 8006cea:	462b      	mov	r3, r5
 8006cec:	1891      	adds	r1, r2, r2
 8006cee:	6439      	str	r1, [r7, #64]	; 0x40
 8006cf0:	415b      	adcs	r3, r3
 8006cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cf8:	1912      	adds	r2, r2, r4
 8006cfa:	eb45 0303 	adc.w	r3, r5, r3
 8006cfe:	f04f 0000 	mov.w	r0, #0
 8006d02:	f04f 0100 	mov.w	r1, #0
 8006d06:	00d9      	lsls	r1, r3, #3
 8006d08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d0c:	00d0      	lsls	r0, r2, #3
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	1911      	adds	r1, r2, r4
 8006d14:	6639      	str	r1, [r7, #96]	; 0x60
 8006d16:	416b      	adcs	r3, r5
 8006d18:	667b      	str	r3, [r7, #100]	; 0x64
 8006d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	1891      	adds	r1, r2, r2
 8006d26:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d28:	415b      	adcs	r3, r3
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d34:	f7f9 fe9a 	bl	8000a6c <__aeabi_uldivmod>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4ba5      	ldr	r3, [pc, #660]	; (8006fd4 <UART_SetConfig+0x38c>)
 8006d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	011e      	lsls	r6, r3, #4
 8006d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d48:	461c      	mov	r4, r3
 8006d4a:	f04f 0500 	mov.w	r5, #0
 8006d4e:	4622      	mov	r2, r4
 8006d50:	462b      	mov	r3, r5
 8006d52:	1891      	adds	r1, r2, r2
 8006d54:	6339      	str	r1, [r7, #48]	; 0x30
 8006d56:	415b      	adcs	r3, r3
 8006d58:	637b      	str	r3, [r7, #52]	; 0x34
 8006d5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d5e:	1912      	adds	r2, r2, r4
 8006d60:	eb45 0303 	adc.w	r3, r5, r3
 8006d64:	f04f 0000 	mov.w	r0, #0
 8006d68:	f04f 0100 	mov.w	r1, #0
 8006d6c:	00d9      	lsls	r1, r3, #3
 8006d6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d72:	00d0      	lsls	r0, r2, #3
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	1911      	adds	r1, r2, r4
 8006d7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d7c:	416b      	adcs	r3, r5
 8006d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	461a      	mov	r2, r3
 8006d86:	f04f 0300 	mov.w	r3, #0
 8006d8a:	1891      	adds	r1, r2, r2
 8006d8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d8e:	415b      	adcs	r3, r3
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d9a:	f7f9 fe67 	bl	8000a6c <__aeabi_uldivmod>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4b8c      	ldr	r3, [pc, #560]	; (8006fd4 <UART_SetConfig+0x38c>)
 8006da4:	fba3 1302 	umull	r1, r3, r3, r2
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	2164      	movs	r1, #100	; 0x64
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	3332      	adds	r3, #50	; 0x32
 8006db6:	4a87      	ldr	r2, [pc, #540]	; (8006fd4 <UART_SetConfig+0x38c>)
 8006db8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dc4:	441e      	add	r6, r3
 8006dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f04f 0100 	mov.w	r1, #0
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	1894      	adds	r4, r2, r2
 8006dd4:	623c      	str	r4, [r7, #32]
 8006dd6:	415b      	adcs	r3, r3
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dde:	1812      	adds	r2, r2, r0
 8006de0:	eb41 0303 	adc.w	r3, r1, r3
 8006de4:	f04f 0400 	mov.w	r4, #0
 8006de8:	f04f 0500 	mov.w	r5, #0
 8006dec:	00dd      	lsls	r5, r3, #3
 8006dee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006df2:	00d4      	lsls	r4, r2, #3
 8006df4:	4622      	mov	r2, r4
 8006df6:	462b      	mov	r3, r5
 8006df8:	1814      	adds	r4, r2, r0
 8006dfa:	653c      	str	r4, [r7, #80]	; 0x50
 8006dfc:	414b      	adcs	r3, r1
 8006dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8006e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	461a      	mov	r2, r3
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	1891      	adds	r1, r2, r2
 8006e0c:	61b9      	str	r1, [r7, #24]
 8006e0e:	415b      	adcs	r3, r3
 8006e10:	61fb      	str	r3, [r7, #28]
 8006e12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e1a:	f7f9 fe27 	bl	8000a6c <__aeabi_uldivmod>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4b6c      	ldr	r3, [pc, #432]	; (8006fd4 <UART_SetConfig+0x38c>)
 8006e24:	fba3 1302 	umull	r1, r3, r3, r2
 8006e28:	095b      	lsrs	r3, r3, #5
 8006e2a:	2164      	movs	r1, #100	; 0x64
 8006e2c:	fb01 f303 	mul.w	r3, r1, r3
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	3332      	adds	r3, #50	; 0x32
 8006e36:	4a67      	ldr	r2, [pc, #412]	; (8006fd4 <UART_SetConfig+0x38c>)
 8006e38:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3c:	095b      	lsrs	r3, r3, #5
 8006e3e:	f003 0207 	and.w	r2, r3, #7
 8006e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4432      	add	r2, r6
 8006e48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e4a:	e0b9      	b.n	8006fc0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e4e:	461c      	mov	r4, r3
 8006e50:	f04f 0500 	mov.w	r5, #0
 8006e54:	4622      	mov	r2, r4
 8006e56:	462b      	mov	r3, r5
 8006e58:	1891      	adds	r1, r2, r2
 8006e5a:	6139      	str	r1, [r7, #16]
 8006e5c:	415b      	adcs	r3, r3
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e64:	1912      	adds	r2, r2, r4
 8006e66:	eb45 0303 	adc.w	r3, r5, r3
 8006e6a:	f04f 0000 	mov.w	r0, #0
 8006e6e:	f04f 0100 	mov.w	r1, #0
 8006e72:	00d9      	lsls	r1, r3, #3
 8006e74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e78:	00d0      	lsls	r0, r2, #3
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	eb12 0804 	adds.w	r8, r2, r4
 8006e82:	eb43 0905 	adc.w	r9, r3, r5
 8006e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f04f 0100 	mov.w	r1, #0
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	008b      	lsls	r3, r1, #2
 8006e9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e9e:	0082      	lsls	r2, r0, #2
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	f7f9 fde2 	bl	8000a6c <__aeabi_uldivmod>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4b49      	ldr	r3, [pc, #292]	; (8006fd4 <UART_SetConfig+0x38c>)
 8006eae:	fba3 2302 	umull	r2, r3, r3, r2
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	011e      	lsls	r6, r3, #4
 8006eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f04f 0100 	mov.w	r1, #0
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	1894      	adds	r4, r2, r2
 8006ec4:	60bc      	str	r4, [r7, #8]
 8006ec6:	415b      	adcs	r3, r3
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ece:	1812      	adds	r2, r2, r0
 8006ed0:	eb41 0303 	adc.w	r3, r1, r3
 8006ed4:	f04f 0400 	mov.w	r4, #0
 8006ed8:	f04f 0500 	mov.w	r5, #0
 8006edc:	00dd      	lsls	r5, r3, #3
 8006ede:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ee2:	00d4      	lsls	r4, r2, #3
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	1814      	adds	r4, r2, r0
 8006eea:	64bc      	str	r4, [r7, #72]	; 0x48
 8006eec:	414b      	adcs	r3, r1
 8006eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f04f 0100 	mov.w	r1, #0
 8006efa:	f04f 0200 	mov.w	r2, #0
 8006efe:	f04f 0300 	mov.w	r3, #0
 8006f02:	008b      	lsls	r3, r1, #2
 8006f04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f08:	0082      	lsls	r2, r0, #2
 8006f0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f0e:	f7f9 fdad 	bl	8000a6c <__aeabi_uldivmod>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4b2f      	ldr	r3, [pc, #188]	; (8006fd4 <UART_SetConfig+0x38c>)
 8006f18:	fba3 1302 	umull	r1, r3, r3, r2
 8006f1c:	095b      	lsrs	r3, r3, #5
 8006f1e:	2164      	movs	r1, #100	; 0x64
 8006f20:	fb01 f303 	mul.w	r3, r1, r3
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	3332      	adds	r3, #50	; 0x32
 8006f2a:	4a2a      	ldr	r2, [pc, #168]	; (8006fd4 <UART_SetConfig+0x38c>)
 8006f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f30:	095b      	lsrs	r3, r3, #5
 8006f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f36:	441e      	add	r6, r3
 8006f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f04f 0100 	mov.w	r1, #0
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	1894      	adds	r4, r2, r2
 8006f46:	603c      	str	r4, [r7, #0]
 8006f48:	415b      	adcs	r3, r3
 8006f4a:	607b      	str	r3, [r7, #4]
 8006f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f50:	1812      	adds	r2, r2, r0
 8006f52:	eb41 0303 	adc.w	r3, r1, r3
 8006f56:	f04f 0400 	mov.w	r4, #0
 8006f5a:	f04f 0500 	mov.w	r5, #0
 8006f5e:	00dd      	lsls	r5, r3, #3
 8006f60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f64:	00d4      	lsls	r4, r2, #3
 8006f66:	4622      	mov	r2, r4
 8006f68:	462b      	mov	r3, r5
 8006f6a:	eb12 0a00 	adds.w	sl, r2, r0
 8006f6e:	eb43 0b01 	adc.w	fp, r3, r1
 8006f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f04f 0100 	mov.w	r1, #0
 8006f7c:	f04f 0200 	mov.w	r2, #0
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	008b      	lsls	r3, r1, #2
 8006f86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f8a:	0082      	lsls	r2, r0, #2
 8006f8c:	4650      	mov	r0, sl
 8006f8e:	4659      	mov	r1, fp
 8006f90:	f7f9 fd6c 	bl	8000a6c <__aeabi_uldivmod>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4b0e      	ldr	r3, [pc, #56]	; (8006fd4 <UART_SetConfig+0x38c>)
 8006f9a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	2164      	movs	r1, #100	; 0x64
 8006fa2:	fb01 f303 	mul.w	r3, r1, r3
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	3332      	adds	r3, #50	; 0x32
 8006fac:	4a09      	ldr	r2, [pc, #36]	; (8006fd4 <UART_SetConfig+0x38c>)
 8006fae:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	f003 020f 	and.w	r2, r3, #15
 8006fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4432      	add	r2, r6
 8006fbe:	609a      	str	r2, [r3, #8]
}
 8006fc0:	bf00      	nop
 8006fc2:	377c      	adds	r7, #124	; 0x7c
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fca:	bf00      	nop
 8006fcc:	40011000 	.word	0x40011000
 8006fd0:	40011400 	.word	0x40011400
 8006fd4:	51eb851f 	.word	0x51eb851f

08006fd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006fdc:	4904      	ldr	r1, [pc, #16]	; (8006ff0 <MX_FATFS_Init+0x18>)
 8006fde:	4805      	ldr	r0, [pc, #20]	; (8006ff4 <MX_FATFS_Init+0x1c>)
 8006fe0:	f003 f810 	bl	800a004 <FATFS_LinkDriver>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	4b03      	ldr	r3, [pc, #12]	; (8006ff8 <MX_FATFS_Init+0x20>)
 8006fea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006fec:	bf00      	nop
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	2000a940 	.word	0x2000a940
 8006ff4:	20000014 	.word	0x20000014
 8006ff8:	2000a944 	.word	0x2000a944

08006ffc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007000:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007002:	4618      	mov	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	4618      	mov	r0, r3
 800701a:	f7fa f9c5 	bl	80013a8 <SD_disk_initialize>
 800701e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	4618      	mov	r0, r3
 8007036:	f7fa faa3 	bl	8001580 <SD_disk_status>
 800703a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8007054:	7bf8      	ldrb	r0, [r7, #15]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	68b9      	ldr	r1, [r7, #8]
 800705c:	f7fa faa6 	bl	80015ac <SD_disk_read>
 8007060:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800707a:	7bf8      	ldrb	r0, [r7, #15]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	f7fa fafd 	bl	8001680 <SD_disk_write>
 8007086:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	603a      	str	r2, [r7, #0]
 800709a:	71fb      	strb	r3, [r7, #7]
 800709c:	460b      	mov	r3, r1
 800709e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80070a0:	79b9      	ldrb	r1, [r7, #6]
 80070a2:	79fb      	ldrb	r3, [r7, #7]
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fa fb6e 	bl	8001788 <SD_disk_ioctl>
 80070ac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80070c2:	79fb      	ldrb	r3, [r7, #7]
 80070c4:	4a08      	ldr	r2, [pc, #32]	; (80070e8 <disk_status+0x30>)
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	79fa      	ldrb	r2, [r7, #7]
 80070d0:	4905      	ldr	r1, [pc, #20]	; (80070e8 <disk_status+0x30>)
 80070d2:	440a      	add	r2, r1
 80070d4:	7a12      	ldrb	r2, [r2, #8]
 80070d6:	4610      	mov	r0, r2
 80070d8:	4798      	blx	r3
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	2000a0f8 	.word	0x2000a0f8

080070ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	4a0d      	ldr	r2, [pc, #52]	; (8007134 <disk_initialize+0x48>)
 80070fe:	5cd3      	ldrb	r3, [r2, r3]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d111      	bne.n	8007128 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	4a0b      	ldr	r2, [pc, #44]	; (8007134 <disk_initialize+0x48>)
 8007108:	2101      	movs	r1, #1
 800710a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	4a09      	ldr	r2, [pc, #36]	; (8007134 <disk_initialize+0x48>)
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	79fa      	ldrb	r2, [r7, #7]
 800711a:	4906      	ldr	r1, [pc, #24]	; (8007134 <disk_initialize+0x48>)
 800711c:	440a      	add	r2, r1
 800711e:	7a12      	ldrb	r2, [r2, #8]
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
 8007124:	4603      	mov	r3, r0
 8007126:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	2000a0f8 	.word	0x2000a0f8

08007138 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007138:	b590      	push	{r4, r7, lr}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	4603      	mov	r3, r0
 8007146:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	4a0a      	ldr	r2, [pc, #40]	; (8007174 <disk_read+0x3c>)
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	689c      	ldr	r4, [r3, #8]
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	4a07      	ldr	r2, [pc, #28]	; (8007174 <disk_read+0x3c>)
 8007158:	4413      	add	r3, r2
 800715a:	7a18      	ldrb	r0, [r3, #8]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	47a0      	blx	r4
 8007164:	4603      	mov	r3, r0
 8007166:	75fb      	strb	r3, [r7, #23]
  return res;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
}
 800716a:	4618      	mov	r0, r3
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	bd90      	pop	{r4, r7, pc}
 8007172:	bf00      	nop
 8007174:	2000a0f8 	.word	0x2000a0f8

08007178 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007178:	b590      	push	{r4, r7, lr}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	4a0a      	ldr	r2, [pc, #40]	; (80071b4 <disk_write+0x3c>)
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	68dc      	ldr	r4, [r3, #12]
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	4a07      	ldr	r2, [pc, #28]	; (80071b4 <disk_write+0x3c>)
 8007198:	4413      	add	r3, r2
 800719a:	7a18      	ldrb	r0, [r3, #8]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	68b9      	ldr	r1, [r7, #8]
 80071a2:	47a0      	blx	r4
 80071a4:	4603      	mov	r3, r0
 80071a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	371c      	adds	r7, #28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd90      	pop	{r4, r7, pc}
 80071b2:	bf00      	nop
 80071b4:	2000a0f8 	.word	0x2000a0f8

080071b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	603a      	str	r2, [r7, #0]
 80071c2:	71fb      	strb	r3, [r7, #7]
 80071c4:	460b      	mov	r3, r1
 80071c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	4a09      	ldr	r2, [pc, #36]	; (80071f0 <disk_ioctl+0x38>)
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	79fa      	ldrb	r2, [r7, #7]
 80071d6:	4906      	ldr	r1, [pc, #24]	; (80071f0 <disk_ioctl+0x38>)
 80071d8:	440a      	add	r2, r1
 80071da:	7a10      	ldrb	r0, [r2, #8]
 80071dc:	79b9      	ldrb	r1, [r7, #6]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	4798      	blx	r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	2000a0f8 	.word	0x2000a0f8

080071f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3301      	adds	r3, #1
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007204:	89fb      	ldrh	r3, [r7, #14]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	b21a      	sxth	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b21b      	sxth	r3, r3
 8007210:	4313      	orrs	r3, r2
 8007212:	b21b      	sxth	r3, r3
 8007214:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007216:	89fb      	ldrh	r3, [r7, #14]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3303      	adds	r3, #3
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	3202      	adds	r2, #2
 800723c:	7812      	ldrb	r2, [r2, #0]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	3201      	adds	r2, #1
 800724a:	7812      	ldrb	r2, [r2, #0]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	7812      	ldrb	r2, [r2, #0]
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
	return rv;
 800725c:	68fb      	ldr	r3, [r7, #12]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	887a      	ldrh	r2, [r7, #2]
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	701a      	strb	r2, [r3, #0]
 8007282:	887b      	ldrh	r3, [r7, #2]
 8007284:	0a1b      	lsrs	r3, r3, #8
 8007286:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	607a      	str	r2, [r7, #4]
 800728e:	887a      	ldrh	r2, [r7, #2]
 8007290:	b2d2      	uxtb	r2, r2
 8007292:	701a      	strb	r2, [r3, #0]
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	0a1b      	lsrs	r3, r3, #8
 80072ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	607a      	str	r2, [r7, #4]
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	0a1b      	lsrs	r3, r3, #8
 80072de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	607a      	str	r2, [r7, #4]
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	701a      	strb	r2, [r3, #0]
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00d      	beq.n	800732e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	1c53      	adds	r3, r2, #1
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	1c59      	adds	r1, r3, #1
 800731c:	6179      	str	r1, [r7, #20]
 800731e:	7812      	ldrb	r2, [r2, #0]
 8007320:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3b01      	subs	r3, #1
 8007326:	607b      	str	r3, [r7, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f1      	bne.n	8007312 <mem_cpy+0x1a>
	}
}
 800732e:	bf00      	nop
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800733a:	b480      	push	{r7}
 800733c:	b087      	sub	sp, #28
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	617a      	str	r2, [r7, #20]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3b01      	subs	r3, #1
 800735a:	607b      	str	r3, [r7, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1f3      	bne.n	800734a <mem_set+0x10>
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007370:	b480      	push	{r7}
 8007372:	b089      	sub	sp, #36	; 0x24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	61fb      	str	r3, [r7, #28]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	61fa      	str	r2, [r7, #28]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	4619      	mov	r1, r3
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	61ba      	str	r2, [r7, #24]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	1acb      	subs	r3, r1, r3
 800739c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	607b      	str	r3, [r7, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <mem_cmp+0x40>
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0eb      	beq.n	8007388 <mem_cmp+0x18>

	return r;
 80073b0:	697b      	ldr	r3, [r7, #20]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3724      	adds	r7, #36	; 0x24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80073c8:	e002      	b.n	80073d0 <chk_chr+0x12>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3301      	adds	r3, #1
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <chk_chr+0x26>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d1f2      	bne.n	80073ca <chk_chr+0xc>
	return *str;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	781b      	ldrb	r3, [r3, #0]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80073fe:	2300      	movs	r3, #0
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	e029      	b.n	800745c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007408:	4a27      	ldr	r2, [pc, #156]	; (80074a8 <chk_lock+0xb4>)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	4413      	add	r3, r2
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d01d      	beq.n	8007452 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007416:	4a24      	ldr	r2, [pc, #144]	; (80074a8 <chk_lock+0xb4>)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	4413      	add	r3, r2
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d116      	bne.n	8007456 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007428:	4a1f      	ldr	r2, [pc, #124]	; (80074a8 <chk_lock+0xb4>)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	011b      	lsls	r3, r3, #4
 800742e:	4413      	add	r3, r2
 8007430:	3304      	adds	r3, #4
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007438:	429a      	cmp	r2, r3
 800743a:	d10c      	bne.n	8007456 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800743c:	4a1a      	ldr	r2, [pc, #104]	; (80074a8 <chk_lock+0xb4>)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	4413      	add	r3, r2
 8007444:	3308      	adds	r3, #8
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800744c:	429a      	cmp	r2, r3
 800744e:	d102      	bne.n	8007456 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007450:	e007      	b.n	8007462 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007452:	2301      	movs	r3, #1
 8007454:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d9d2      	bls.n	8007408 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d109      	bne.n	800747c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <chk_lock+0x80>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d101      	bne.n	8007478 <chk_lock+0x84>
 8007474:	2300      	movs	r3, #0
 8007476:	e010      	b.n	800749a <chk_lock+0xa6>
 8007478:	2312      	movs	r3, #18
 800747a:	e00e      	b.n	800749a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d108      	bne.n	8007494 <chk_lock+0xa0>
 8007482:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <chk_lock+0xb4>)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	4413      	add	r3, r2
 800748a:	330c      	adds	r3, #12
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007492:	d101      	bne.n	8007498 <chk_lock+0xa4>
 8007494:	2310      	movs	r3, #16
 8007496:	e000      	b.n	800749a <chk_lock+0xa6>
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	2000a0d8 	.word	0x2000a0d8

080074ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80074b2:	2300      	movs	r3, #0
 80074b4:	607b      	str	r3, [r7, #4]
 80074b6:	e002      	b.n	80074be <enq_lock+0x12>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3301      	adds	r3, #1
 80074bc:	607b      	str	r3, [r7, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d806      	bhi.n	80074d2 <enq_lock+0x26>
 80074c4:	4a09      	ldr	r2, [pc, #36]	; (80074ec <enq_lock+0x40>)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	4413      	add	r3, r2
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f2      	bne.n	80074b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	bf14      	ite	ne
 80074d8:	2301      	movne	r3, #1
 80074da:	2300      	moveq	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	2000a0d8 	.word	0x2000a0d8

080074f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	e01f      	b.n	8007540 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007500:	4a41      	ldr	r2, [pc, #260]	; (8007608 <inc_lock+0x118>)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	4413      	add	r3, r2
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d113      	bne.n	800753a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007512:	4a3d      	ldr	r2, [pc, #244]	; (8007608 <inc_lock+0x118>)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	4413      	add	r3, r2
 800751a:	3304      	adds	r3, #4
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007522:	429a      	cmp	r2, r3
 8007524:	d109      	bne.n	800753a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007526:	4a38      	ldr	r2, [pc, #224]	; (8007608 <inc_lock+0x118>)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	4413      	add	r3, r2
 800752e:	3308      	adds	r3, #8
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007536:	429a      	cmp	r2, r3
 8007538:	d006      	beq.n	8007548 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3301      	adds	r3, #1
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d9dc      	bls.n	8007500 <inc_lock+0x10>
 8007546:	e000      	b.n	800754a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007548:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d132      	bne.n	80075b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	e002      	b.n	800755c <inc_lock+0x6c>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3301      	adds	r3, #1
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d806      	bhi.n	8007570 <inc_lock+0x80>
 8007562:	4a29      	ldr	r2, [pc, #164]	; (8007608 <inc_lock+0x118>)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	4413      	add	r3, r2
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f2      	bne.n	8007556 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d101      	bne.n	800757a <inc_lock+0x8a>
 8007576:	2300      	movs	r3, #0
 8007578:	e040      	b.n	80075fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	4922      	ldr	r1, [pc, #136]	; (8007608 <inc_lock+0x118>)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	440b      	add	r3, r1
 8007586:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	491e      	ldr	r1, [pc, #120]	; (8007608 <inc_lock+0x118>)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	440b      	add	r3, r1
 8007594:	3304      	adds	r3, #4
 8007596:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	695a      	ldr	r2, [r3, #20]
 800759c:	491a      	ldr	r1, [pc, #104]	; (8007608 <inc_lock+0x118>)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	440b      	add	r3, r1
 80075a4:	3308      	adds	r3, #8
 80075a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80075a8:	4a17      	ldr	r2, [pc, #92]	; (8007608 <inc_lock+0x118>)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	4413      	add	r3, r2
 80075b0:	330c      	adds	r3, #12
 80075b2:	2200      	movs	r2, #0
 80075b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d009      	beq.n	80075d0 <inc_lock+0xe0>
 80075bc:	4a12      	ldr	r2, [pc, #72]	; (8007608 <inc_lock+0x118>)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	4413      	add	r3, r2
 80075c4:	330c      	adds	r3, #12
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <inc_lock+0xe0>
 80075cc:	2300      	movs	r3, #0
 80075ce:	e015      	b.n	80075fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d108      	bne.n	80075e8 <inc_lock+0xf8>
 80075d6:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <inc_lock+0x118>)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	4413      	add	r3, r2
 80075de:	330c      	adds	r3, #12
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	e001      	b.n	80075ec <inc_lock+0xfc>
 80075e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ec:	4906      	ldr	r1, [pc, #24]	; (8007608 <inc_lock+0x118>)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	440b      	add	r3, r1
 80075f4:	330c      	adds	r3, #12
 80075f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	2000a0d8 	.word	0x2000a0d8

0800760c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3b01      	subs	r3, #1
 8007618:	607b      	str	r3, [r7, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d825      	bhi.n	800766c <dec_lock+0x60>
		n = Files[i].ctr;
 8007620:	4a17      	ldr	r2, [pc, #92]	; (8007680 <dec_lock+0x74>)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4413      	add	r3, r2
 8007628:	330c      	adds	r3, #12
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800762e:	89fb      	ldrh	r3, [r7, #14]
 8007630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007634:	d101      	bne.n	800763a <dec_lock+0x2e>
 8007636:	2300      	movs	r3, #0
 8007638:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800763a:	89fb      	ldrh	r3, [r7, #14]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <dec_lock+0x3a>
 8007640:	89fb      	ldrh	r3, [r7, #14]
 8007642:	3b01      	subs	r3, #1
 8007644:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007646:	4a0e      	ldr	r2, [pc, #56]	; (8007680 <dec_lock+0x74>)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	4413      	add	r3, r2
 800764e:	330c      	adds	r3, #12
 8007650:	89fa      	ldrh	r2, [r7, #14]
 8007652:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007654:	89fb      	ldrh	r3, [r7, #14]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <dec_lock+0x5a>
 800765a:	4a09      	ldr	r2, [pc, #36]	; (8007680 <dec_lock+0x74>)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	011b      	lsls	r3, r3, #4
 8007660:	4413      	add	r3, r2
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	737b      	strb	r3, [r7, #13]
 800766a:	e001      	b.n	8007670 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800766c:	2302      	movs	r3, #2
 800766e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007670:	7b7b      	ldrb	r3, [r7, #13]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	2000a0d8 	.word	0x2000a0d8

08007684 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e010      	b.n	80076b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007692:	4a0d      	ldr	r2, [pc, #52]	; (80076c8 <clear_lock+0x44>)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	4413      	add	r3, r2
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d105      	bne.n	80076ae <clear_lock+0x2a>
 80076a2:	4a09      	ldr	r2, [pc, #36]	; (80076c8 <clear_lock+0x44>)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	4413      	add	r3, r2
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3301      	adds	r3, #1
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d9eb      	bls.n	8007692 <clear_lock+0xe>
	}
}
 80076ba:	bf00      	nop
 80076bc:	bf00      	nop
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	2000a0d8 	.word	0x2000a0d8

080076cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	78db      	ldrb	r3, [r3, #3]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d034      	beq.n	800774a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7858      	ldrb	r0, [r3, #1]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076f0:	2301      	movs	r3, #1
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	f7ff fd40 	bl	8007178 <disk_write>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <sync_window+0x38>
			res = FR_DISK_ERR;
 80076fe:	2301      	movs	r3, #1
 8007700:	73fb      	strb	r3, [r7, #15]
 8007702:	e022      	b.n	800774a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	1ad2      	subs	r2, r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	429a      	cmp	r2, r3
 8007718:	d217      	bcs.n	800774a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	789b      	ldrb	r3, [r3, #2]
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	e010      	b.n	8007744 <sync_window+0x78>
					wsect += fs->fsize;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	4413      	add	r3, r2
 800772a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	7858      	ldrb	r0, [r3, #1]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007736:	2301      	movs	r3, #1
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	f7ff fd1d 	bl	8007178 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	3b01      	subs	r3, #1
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d8eb      	bhi.n	8007722 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800774a:	7bfb      	ldrb	r3, [r7, #15]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d01b      	beq.n	80077a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff ffad 	bl	80076cc <sync_window>
 8007772:	4603      	mov	r3, r0
 8007774:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d113      	bne.n	80077a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	7858      	ldrb	r0, [r3, #1]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007786:	2301      	movs	r3, #1
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	f7ff fcd5 	bl	8007138 <disk_read>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007794:	f04f 33ff 	mov.w	r3, #4294967295
 8007798:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800779a:	2301      	movs	r3, #1
 800779c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff ff87 	bl	80076cc <sync_window>
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d158      	bne.n	800787a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d148      	bne.n	8007862 <sync_fs+0xb2>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	791b      	ldrb	r3, [r3, #4]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d144      	bne.n	8007862 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3330      	adds	r3, #48	; 0x30
 80077dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff fda9 	bl	800733a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3330      	adds	r3, #48	; 0x30
 80077ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077f0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff fd38 	bl	800726a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3330      	adds	r3, #48	; 0x30
 80077fe:	4921      	ldr	r1, [pc, #132]	; (8007884 <sync_fs+0xd4>)
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff fd4d 	bl	80072a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3330      	adds	r3, #48	; 0x30
 800780a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800780e:	491e      	ldr	r1, [pc, #120]	; (8007888 <sync_fs+0xd8>)
 8007810:	4618      	mov	r0, r3
 8007812:	f7ff fd45 	bl	80072a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3330      	adds	r3, #48	; 0x30
 800781a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	4619      	mov	r1, r3
 8007824:	4610      	mov	r0, r2
 8007826:	f7ff fd3b 	bl	80072a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3330      	adds	r3, #48	; 0x30
 800782e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	4619      	mov	r1, r3
 8007838:	4610      	mov	r0, r2
 800783a:	f7ff fd31 	bl	80072a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	7858      	ldrb	r0, [r3, #1]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007856:	2301      	movs	r3, #1
 8007858:	f7ff fc8e 	bl	8007178 <disk_write>
			fs->fsi_flag = 0;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	2200      	movs	r2, #0
 8007868:	2100      	movs	r1, #0
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff fca4 	bl	80071b8 <disk_ioctl>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <sync_fs+0xca>
 8007876:	2301      	movs	r3, #1
 8007878:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	41615252 	.word	0x41615252
 8007888:	61417272 	.word	0x61417272

0800788c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	3b02      	subs	r3, #2
 800789a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	3b02      	subs	r3, #2
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d301      	bcc.n	80078ac <clust2sect+0x20>
 80078a8:	2300      	movs	r3, #0
 80078aa:	e008      	b.n	80078be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	895b      	ldrh	r3, [r3, #10]
 80078b0:	461a      	mov	r2, r3
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	fb03 f202 	mul.w	r2, r3, r2
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	4413      	add	r3, r2
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b086      	sub	sp, #24
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d904      	bls.n	80078ea <get_fat+0x20>
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d302      	bcc.n	80078f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80078ea:	2301      	movs	r3, #1
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	e08f      	b.n	8007a10 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80078f0:	f04f 33ff 	mov.w	r3, #4294967295
 80078f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d062      	beq.n	80079c4 <get_fat+0xfa>
 80078fe:	2b03      	cmp	r3, #3
 8007900:	dc7c      	bgt.n	80079fc <get_fat+0x132>
 8007902:	2b01      	cmp	r3, #1
 8007904:	d002      	beq.n	800790c <get_fat+0x42>
 8007906:	2b02      	cmp	r3, #2
 8007908:	d042      	beq.n	8007990 <get_fat+0xc6>
 800790a:	e077      	b.n	80079fc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	085b      	lsrs	r3, r3, #1
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	6a1a      	ldr	r2, [r3, #32]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	0a5b      	lsrs	r3, r3, #9
 8007922:	4413      	add	r3, r2
 8007924:	4619      	mov	r1, r3
 8007926:	6938      	ldr	r0, [r7, #16]
 8007928:	f7ff ff14 	bl	8007754 <move_window>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d167      	bne.n	8007a02 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	60fa      	str	r2, [r7, #12]
 8007938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4413      	add	r3, r2
 8007940:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007944:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	6a1a      	ldr	r2, [r3, #32]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	0a5b      	lsrs	r3, r3, #9
 800794e:	4413      	add	r3, r2
 8007950:	4619      	mov	r1, r3
 8007952:	6938      	ldr	r0, [r7, #16]
 8007954:	f7ff fefe 	bl	8007754 <move_window>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d153      	bne.n	8007a06 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4413      	add	r3, r2
 8007968:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	461a      	mov	r2, r3
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4313      	orrs	r3, r2
 8007974:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <get_fat+0xbc>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	091b      	lsrs	r3, r3, #4
 8007984:	e002      	b.n	800798c <get_fat+0xc2>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800798c:	617b      	str	r3, [r7, #20]
			break;
 800798e:	e03f      	b.n	8007a10 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	6a1a      	ldr	r2, [r3, #32]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	0a1b      	lsrs	r3, r3, #8
 8007998:	4413      	add	r3, r2
 800799a:	4619      	mov	r1, r3
 800799c:	6938      	ldr	r0, [r7, #16]
 800799e:	f7ff fed9 	bl	8007754 <move_window>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d130      	bne.n	8007a0a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80079b6:	4413      	add	r3, r2
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff fc1b 	bl	80071f4 <ld_word>
 80079be:	4603      	mov	r3, r0
 80079c0:	617b      	str	r3, [r7, #20]
			break;
 80079c2:	e025      	b.n	8007a10 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	6a1a      	ldr	r2, [r3, #32]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	09db      	lsrs	r3, r3, #7
 80079cc:	4413      	add	r3, r2
 80079ce:	4619      	mov	r1, r3
 80079d0:	6938      	ldr	r0, [r7, #16]
 80079d2:	f7ff febf 	bl	8007754 <move_window>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d118      	bne.n	8007a0e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80079ea:	4413      	add	r3, r2
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff fc19 	bl	8007224 <ld_dword>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80079f8:	617b      	str	r3, [r7, #20]
			break;
 80079fa:	e009      	b.n	8007a10 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80079fc:	2301      	movs	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	e006      	b.n	8007a10 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a02:	bf00      	nop
 8007a04:	e004      	b.n	8007a10 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a06:	bf00      	nop
 8007a08:	e002      	b.n	8007a10 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a0a:	bf00      	nop
 8007a0c:	e000      	b.n	8007a10 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a0e:	bf00      	nop
		}
	}

	return val;
 8007a10:	697b      	ldr	r3, [r7, #20]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007a1a:	b590      	push	{r4, r7, lr}
 8007a1c:	b089      	sub	sp, #36	; 0x24
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	60f8      	str	r0, [r7, #12]
 8007a22:	60b9      	str	r1, [r7, #8]
 8007a24:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007a26:	2302      	movs	r3, #2
 8007a28:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	f240 80d2 	bls.w	8007bd6 <put_fat+0x1bc>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	f080 80cc 	bcs.w	8007bd6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	f000 8096 	beq.w	8007b74 <put_fat+0x15a>
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	f300 80cd 	bgt.w	8007be8 <put_fat+0x1ce>
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d002      	beq.n	8007a58 <put_fat+0x3e>
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d06e      	beq.n	8007b34 <put_fat+0x11a>
 8007a56:	e0c7      	b.n	8007be8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	4413      	add	r3, r2
 8007a64:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6a1a      	ldr	r2, [r3, #32]
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	0a5b      	lsrs	r3, r3, #9
 8007a6e:	4413      	add	r3, r2
 8007a70:	4619      	mov	r1, r3
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7ff fe6e 	bl	8007754 <move_window>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a7c:	7ffb      	ldrb	r3, [r7, #31]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f040 80ab 	bne.w	8007bda <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	1c59      	adds	r1, r3, #1
 8007a8e:	61b9      	str	r1, [r7, #24]
 8007a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a94:	4413      	add	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00d      	beq.n	8007abe <put_fat+0xa4>
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	b25b      	sxtb	r3, r3
 8007aa8:	f003 030f 	and.w	r3, r3, #15
 8007aac:	b25a      	sxtb	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	b25b      	sxtb	r3, r3
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	b25b      	sxtb	r3, r3
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	e001      	b.n	8007ac2 <put_fat+0xa8>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a1a      	ldr	r2, [r3, #32]
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	0a5b      	lsrs	r3, r3, #9
 8007ad4:	4413      	add	r3, r2
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f7ff fe3b 	bl	8007754 <move_window>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ae2:	7ffb      	ldrb	r3, [r7, #31]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d17a      	bne.n	8007bde <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af4:	4413      	add	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <put_fat+0xf0>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	091b      	lsrs	r3, r3, #4
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	e00e      	b.n	8007b28 <put_fat+0x10e>
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	b25b      	sxtb	r3, r3
 8007b10:	f023 030f 	bic.w	r3, r3, #15
 8007b14:	b25a      	sxtb	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	0a1b      	lsrs	r3, r3, #8
 8007b1a:	b25b      	sxtb	r3, r3
 8007b1c:	f003 030f 	and.w	r3, r3, #15
 8007b20:	b25b      	sxtb	r3, r3
 8007b22:	4313      	orrs	r3, r2
 8007b24:	b25b      	sxtb	r3, r3
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	70da      	strb	r2, [r3, #3]
			break;
 8007b32:	e059      	b.n	8007be8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a1a      	ldr	r2, [r3, #32]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	0a1b      	lsrs	r3, r3, #8
 8007b3c:	4413      	add	r3, r2
 8007b3e:	4619      	mov	r1, r3
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff fe07 	bl	8007754 <move_window>
 8007b46:	4603      	mov	r3, r0
 8007b48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b4a:	7ffb      	ldrb	r3, [r7, #31]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d148      	bne.n	8007be2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007b5e:	4413      	add	r3, r2
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	b292      	uxth	r2, r2
 8007b64:	4611      	mov	r1, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7ff fb7f 	bl	800726a <st_word>
			fs->wflag = 1;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	70da      	strb	r2, [r3, #3]
			break;
 8007b72:	e039      	b.n	8007be8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6a1a      	ldr	r2, [r3, #32]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	09db      	lsrs	r3, r3, #7
 8007b7c:	4413      	add	r3, r2
 8007b7e:	4619      	mov	r1, r3
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7ff fde7 	bl	8007754 <move_window>
 8007b86:	4603      	mov	r3, r0
 8007b88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b8a:	7ffb      	ldrb	r3, [r7, #31]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d12a      	bne.n	8007be6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007ba4:	4413      	add	r3, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff fb3c 	bl	8007224 <ld_dword>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007bb2:	4323      	orrs	r3, r4
 8007bb4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007bc4:	4413      	add	r3, r2
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff fb69 	bl	80072a0 <st_dword>
			fs->wflag = 1;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	70da      	strb	r2, [r3, #3]
			break;
 8007bd4:	e008      	b.n	8007be8 <put_fat+0x1ce>
		}
	}
 8007bd6:	bf00      	nop
 8007bd8:	e006      	b.n	8007be8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007bda:	bf00      	nop
 8007bdc:	e004      	b.n	8007be8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007bde:	bf00      	nop
 8007be0:	e002      	b.n	8007be8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007be2:	bf00      	nop
 8007be4:	e000      	b.n	8007be8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007be6:	bf00      	nop
	return res;
 8007be8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3724      	adds	r7, #36	; 0x24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd90      	pop	{r4, r7, pc}

08007bf2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b088      	sub	sp, #32
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d904      	bls.n	8007c18 <remove_chain+0x26>
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d301      	bcc.n	8007c1c <remove_chain+0x2a>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e04b      	b.n	8007cb4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00c      	beq.n	8007c3c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007c22:	f04f 32ff 	mov.w	r2, #4294967295
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	69b8      	ldr	r0, [r7, #24]
 8007c2a:	f7ff fef6 	bl	8007a1a <put_fat>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007c32:	7ffb      	ldrb	r3, [r7, #31]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <remove_chain+0x4a>
 8007c38:	7ffb      	ldrb	r3, [r7, #31]
 8007c3a:	e03b      	b.n	8007cb4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7ff fe43 	bl	80078ca <get_fat>
 8007c44:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d031      	beq.n	8007cb0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d101      	bne.n	8007c56 <remove_chain+0x64>
 8007c52:	2302      	movs	r3, #2
 8007c54:	e02e      	b.n	8007cb4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5c:	d101      	bne.n	8007c62 <remove_chain+0x70>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e028      	b.n	8007cb4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007c62:	2200      	movs	r2, #0
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	69b8      	ldr	r0, [r7, #24]
 8007c68:	f7ff fed7 	bl	8007a1a <put_fat>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007c70:	7ffb      	ldrb	r3, [r7, #31]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <remove_chain+0x88>
 8007c76:	7ffb      	ldrb	r3, [r7, #31]
 8007c78:	e01c      	b.n	8007cb4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	3b02      	subs	r3, #2
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d20b      	bcs.n	8007ca0 <remove_chain+0xae>
			fs->free_clst++;
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	791b      	ldrb	r3, [r3, #4]
 8007c96:	f043 0301 	orr.w	r3, r3, #1
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d3c6      	bcc.n	8007c3c <remove_chain+0x4a>
 8007cae:	e000      	b.n	8007cb2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007cb0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3720      	adds	r7, #32
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10d      	bne.n	8007cee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d004      	beq.n	8007ce8 <create_chain+0x2c>
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d31b      	bcc.n	8007d20 <create_chain+0x64>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	61bb      	str	r3, [r7, #24]
 8007cec:	e018      	b.n	8007d20 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff fdea 	bl	80078ca <get_fat>
 8007cf6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d801      	bhi.n	8007d02 <create_chain+0x46>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e070      	b.n	8007de4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d08:	d101      	bne.n	8007d0e <create_chain+0x52>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	e06a      	b.n	8007de4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d201      	bcs.n	8007d1c <create_chain+0x60>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	e063      	b.n	8007de4 <create_chain+0x128>
		scl = clst;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	3301      	adds	r3, #1
 8007d28:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d307      	bcc.n	8007d44 <create_chain+0x88>
				ncl = 2;
 8007d34:	2302      	movs	r3, #2
 8007d36:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007d38:	69fa      	ldr	r2, [r7, #28]
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d901      	bls.n	8007d44 <create_chain+0x88>
 8007d40:	2300      	movs	r3, #0
 8007d42:	e04f      	b.n	8007de4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007d44:	69f9      	ldr	r1, [r7, #28]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff fdbf 	bl	80078ca <get_fat>
 8007d4c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00e      	beq.n	8007d72 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d003      	beq.n	8007d62 <create_chain+0xa6>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d60:	d101      	bne.n	8007d66 <create_chain+0xaa>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	e03e      	b.n	8007de4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d1da      	bne.n	8007d24 <create_chain+0x68>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e038      	b.n	8007de4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007d72:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007d74:	f04f 32ff 	mov.w	r2, #4294967295
 8007d78:	69f9      	ldr	r1, [r7, #28]
 8007d7a:	6938      	ldr	r0, [r7, #16]
 8007d7c:	f7ff fe4d 	bl	8007a1a <put_fat>
 8007d80:	4603      	mov	r3, r0
 8007d82:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <create_chain+0xe2>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d006      	beq.n	8007d9e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007d90:	69fa      	ldr	r2, [r7, #28]
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6938      	ldr	r0, [r7, #16]
 8007d96:	f7ff fe40 	bl	8007a1a <put_fat>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d116      	bne.n	8007dd2 <create_chain+0x116>
		fs->last_clst = ncl;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	69fa      	ldr	r2, [r7, #28]
 8007da8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	3b02      	subs	r3, #2
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d804      	bhi.n	8007dc2 <create_chain+0x106>
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	1e5a      	subs	r2, r3, #1
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	791b      	ldrb	r3, [r3, #4]
 8007dc6:	f043 0301 	orr.w	r3, r3, #1
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	711a      	strb	r2, [r3, #4]
 8007dd0:	e007      	b.n	8007de2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d102      	bne.n	8007dde <create_chain+0x122>
 8007dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ddc:	e000      	b.n	8007de0 <create_chain+0x124>
 8007dde:	2301      	movs	r3, #1
 8007de0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007de2:	69fb      	ldr	r3, [r7, #28]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3720      	adds	r7, #32
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	3304      	adds	r3, #4
 8007e02:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	0a5b      	lsrs	r3, r3, #9
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	8952      	ldrh	r2, [r2, #10]
 8007e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e10:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1d1a      	adds	r2, r3, #4
 8007e16:	613a      	str	r2, [r7, #16]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <clmt_clust+0x3a>
 8007e22:	2300      	movs	r3, #0
 8007e24:	e010      	b.n	8007e48 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d307      	bcc.n	8007e3e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007e3c:	e7e9      	b.n	8007e12 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007e3e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	4413      	add	r3, r2
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	371c      	adds	r7, #28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e6a:	d204      	bcs.n	8007e76 <dir_sdi+0x22>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	f003 031f 	and.w	r3, r3, #31
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007e76:	2302      	movs	r3, #2
 8007e78:	e063      	b.n	8007f42 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <dir_sdi+0x46>
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d902      	bls.n	8007e9a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10c      	bne.n	8007eba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	8912      	ldrh	r2, [r2, #8]
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d301      	bcc.n	8007eb0 <dir_sdi+0x5c>
 8007eac:	2302      	movs	r3, #2
 8007eae:	e048      	b.n	8007f42 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	61da      	str	r2, [r3, #28]
 8007eb8:	e029      	b.n	8007f0e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	895b      	ldrh	r3, [r3, #10]
 8007ebe:	025b      	lsls	r3, r3, #9
 8007ec0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ec2:	e019      	b.n	8007ef8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6979      	ldr	r1, [r7, #20]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7ff fcfe 	bl	80078ca <get_fat>
 8007ece:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d101      	bne.n	8007edc <dir_sdi+0x88>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e032      	b.n	8007f42 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d904      	bls.n	8007eec <dir_sdi+0x98>
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d301      	bcc.n	8007ef0 <dir_sdi+0x9c>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e028      	b.n	8007f42 <dir_sdi+0xee>
			ofs -= csz;
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d2e1      	bcs.n	8007ec4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007f00:	6979      	ldr	r1, [r7, #20]
 8007f02:	6938      	ldr	r0, [r7, #16]
 8007f04:	f7ff fcc2 	bl	800788c <clust2sect>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <dir_sdi+0xcc>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e010      	b.n	8007f42 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	69da      	ldr	r2, [r3, #28]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	0a5b      	lsrs	r3, r3, #9
 8007f28:	441a      	add	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3a:	441a      	add	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b086      	sub	sp, #24
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	3320      	adds	r3, #32
 8007f60:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <dir_next+0x28>
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f70:	d301      	bcc.n	8007f76 <dir_next+0x2c>
 8007f72:	2304      	movs	r3, #4
 8007f74:	e0aa      	b.n	80080cc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f040 8098 	bne.w	80080b2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10b      	bne.n	8007fac <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	095b      	lsrs	r3, r3, #5
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	8912      	ldrh	r2, [r2, #8]
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	f0c0 8088 	bcc.w	80080b2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	61da      	str	r2, [r3, #28]
 8007fa8:	2304      	movs	r3, #4
 8007faa:	e08f      	b.n	80080cc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	0a5b      	lsrs	r3, r3, #9
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	8952      	ldrh	r2, [r2, #10]
 8007fb4:	3a01      	subs	r2, #1
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d17a      	bne.n	80080b2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	f7ff fc80 	bl	80078ca <get_fat>
 8007fca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d801      	bhi.n	8007fd6 <dir_next+0x8c>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e07a      	b.n	80080cc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fdc:	d101      	bne.n	8007fe2 <dir_next+0x98>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e074      	b.n	80080cc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d358      	bcc.n	800809e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d104      	bne.n	8007ffc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	61da      	str	r2, [r3, #28]
 8007ff8:	2304      	movs	r3, #4
 8007ffa:	e067      	b.n	80080cc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	4619      	mov	r1, r3
 8008004:	4610      	mov	r0, r2
 8008006:	f7ff fe59 	bl	8007cbc <create_chain>
 800800a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <dir_next+0xcc>
 8008012:	2307      	movs	r3, #7
 8008014:	e05a      	b.n	80080cc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <dir_next+0xd6>
 800801c:	2302      	movs	r3, #2
 800801e:	e055      	b.n	80080cc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008026:	d101      	bne.n	800802c <dir_next+0xe2>
 8008028:	2301      	movs	r3, #1
 800802a:	e04f      	b.n	80080cc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7ff fb4d 	bl	80076cc <sync_window>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <dir_next+0xf2>
 8008038:	2301      	movs	r3, #1
 800803a:	e047      	b.n	80080cc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3330      	adds	r3, #48	; 0x30
 8008040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff f977 	bl	800733a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800804c:	2300      	movs	r3, #0
 800804e:	613b      	str	r3, [r7, #16]
 8008050:	6979      	ldr	r1, [r7, #20]
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f7ff fc1a 	bl	800788c <clust2sect>
 8008058:	4602      	mov	r2, r0
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	62da      	str	r2, [r3, #44]	; 0x2c
 800805e:	e012      	b.n	8008086 <dir_next+0x13c>
						fs->wflag = 1;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2201      	movs	r2, #1
 8008064:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7ff fb30 	bl	80076cc <sync_window>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <dir_next+0x12c>
 8008072:	2301      	movs	r3, #1
 8008074:	e02a      	b.n	80080cc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	3301      	adds	r3, #1
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	62da      	str	r2, [r3, #44]	; 0x2c
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	895b      	ldrh	r3, [r3, #10]
 800808a:	461a      	mov	r2, r3
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	4293      	cmp	r3, r2
 8008090:	d3e6      	bcc.n	8008060 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	1ad2      	subs	r2, r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80080a4:	6979      	ldr	r1, [r7, #20]
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7ff fbf0 	bl	800788c <clust2sect>
 80080ac:	4602      	mov	r2, r0
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c4:	441a      	add	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80080e4:	2100      	movs	r1, #0
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7ff feb4 	bl	8007e54 <dir_sdi>
 80080ec:	4603      	mov	r3, r0
 80080ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d12b      	bne.n	800814e <dir_alloc+0x7a>
		n = 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	4619      	mov	r1, r3
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7ff fb27 	bl	8007754 <move_window>
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d11d      	bne.n	800814c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2be5      	cmp	r3, #229	; 0xe5
 8008118:	d004      	beq.n	8008124 <dir_alloc+0x50>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d107      	bne.n	8008134 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	3301      	adds	r3, #1
 8008128:	613b      	str	r3, [r7, #16]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	429a      	cmp	r2, r3
 8008130:	d102      	bne.n	8008138 <dir_alloc+0x64>
 8008132:	e00c      	b.n	800814e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008134:	2300      	movs	r3, #0
 8008136:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008138:	2101      	movs	r1, #1
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff ff05 	bl	8007f4a <dir_next>
 8008140:	4603      	mov	r3, r0
 8008142:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008144:	7dfb      	ldrb	r3, [r7, #23]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0d7      	beq.n	80080fa <dir_alloc+0x26>
 800814a:	e000      	b.n	800814e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800814c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800814e:	7dfb      	ldrb	r3, [r7, #23]
 8008150:	2b04      	cmp	r3, #4
 8008152:	d101      	bne.n	8008158 <dir_alloc+0x84>
 8008154:	2307      	movs	r3, #7
 8008156:	75fb      	strb	r3, [r7, #23]
	return res;
 8008158:	7dfb      	ldrb	r3, [r7, #23]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	331a      	adds	r3, #26
 8008170:	4618      	mov	r0, r3
 8008172:	f7ff f83f 	bl	80071f4 <ld_word>
 8008176:	4603      	mov	r3, r0
 8008178:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	2b03      	cmp	r3, #3
 8008180:	d109      	bne.n	8008196 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	3314      	adds	r3, #20
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff f834 	bl	80071f4 <ld_word>
 800818c:	4603      	mov	r3, r0
 800818e:	041b      	lsls	r3, r3, #16
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008196:	68fb      	ldr	r3, [r7, #12]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	331a      	adds	r3, #26
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	b292      	uxth	r2, r2
 80081b4:	4611      	mov	r1, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff f857 	bl	800726a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d109      	bne.n	80081d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f103 0214 	add.w	r2, r3, #20
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	0c1b      	lsrs	r3, r3, #16
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4619      	mov	r1, r3
 80081d2:	4610      	mov	r0, r2
 80081d4:	f7ff f849 	bl	800726a <st_word>
	}
}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80081ea:	2304      	movs	r3, #4
 80081ec:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80081f4:	e03c      	b.n	8008270 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6938      	ldr	r0, [r7, #16]
 80081fe:	f7ff faa9 	bl	8007754 <move_window>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d136      	bne.n	800827a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a1b      	ldr	r3, [r3, #32]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800821a:	2304      	movs	r3, #4
 800821c:	75fb      	strb	r3, [r7, #23]
 800821e:	e031      	b.n	8008284 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a1b      	ldr	r3, [r3, #32]
 8008224:	330b      	adds	r3, #11
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800822c:	73bb      	strb	r3, [r7, #14]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	7bba      	ldrb	r2, [r7, #14]
 8008232:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	2be5      	cmp	r3, #229	; 0xe5
 8008238:	d011      	beq.n	800825e <dir_read+0x7e>
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	2b2e      	cmp	r3, #46	; 0x2e
 800823e:	d00e      	beq.n	800825e <dir_read+0x7e>
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	2b0f      	cmp	r3, #15
 8008244:	d00b      	beq.n	800825e <dir_read+0x7e>
 8008246:	7bbb      	ldrb	r3, [r7, #14]
 8008248:	f023 0320 	bic.w	r3, r3, #32
 800824c:	2b08      	cmp	r3, #8
 800824e:	bf0c      	ite	eq
 8008250:	2301      	moveq	r3, #1
 8008252:	2300      	movne	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	461a      	mov	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	4293      	cmp	r3, r2
 800825c:	d00f      	beq.n	800827e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800825e:	2100      	movs	r1, #0
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff fe72 	bl	8007f4a <dir_next>
 8008266:	4603      	mov	r3, r0
 8008268:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d108      	bne.n	8008282 <dir_read+0xa2>
	while (dp->sect) {
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1be      	bne.n	80081f6 <dir_read+0x16>
 8008278:	e004      	b.n	8008284 <dir_read+0xa4>
		if (res != FR_OK) break;
 800827a:	bf00      	nop
 800827c:	e002      	b.n	8008284 <dir_read+0xa4>
				break;
 800827e:	bf00      	nop
 8008280:	e000      	b.n	8008284 <dir_read+0xa4>
		if (res != FR_OK) break;
 8008282:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <dir_read+0xb0>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	61da      	str	r2, [r3, #28]
	return res;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b086      	sub	sp, #24
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80082a8:	2100      	movs	r1, #0
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff fdd2 	bl	8007e54 <dir_sdi>
 80082b0:	4603      	mov	r3, r0
 80082b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <dir_find+0x24>
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	e03e      	b.n	800833c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	4619      	mov	r1, r3
 80082c4:	6938      	ldr	r0, [r7, #16]
 80082c6:	f7ff fa45 	bl	8007754 <move_window>
 80082ca:	4603      	mov	r3, r0
 80082cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d12f      	bne.n	8008334 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d102      	bne.n	80082e8 <dir_find+0x4e>
 80082e2:	2304      	movs	r3, #4
 80082e4:	75fb      	strb	r3, [r7, #23]
 80082e6:	e028      	b.n	800833a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	330b      	adds	r3, #11
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	330b      	adds	r3, #11
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10a      	bne.n	8008320 <dir_find+0x86>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a18      	ldr	r0, [r3, #32]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3324      	adds	r3, #36	; 0x24
 8008312:	220b      	movs	r2, #11
 8008314:	4619      	mov	r1, r3
 8008316:	f7ff f82b 	bl	8007370 <mem_cmp>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008320:	2100      	movs	r1, #0
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff fe11 	bl	8007f4a <dir_next>
 8008328:	4603      	mov	r3, r0
 800832a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800832c:	7dfb      	ldrb	r3, [r7, #23]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d0c5      	beq.n	80082be <dir_find+0x24>
 8008332:	e002      	b.n	800833a <dir_find+0xa0>
		if (res != FR_OK) break;
 8008334:	bf00      	nop
 8008336:	e000      	b.n	800833a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008338:	bf00      	nop

	return res;
 800833a:	7dfb      	ldrb	r3, [r7, #23]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008352:	2101      	movs	r1, #1
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff febd 	bl	80080d4 <dir_alloc>
 800835a:	4603      	mov	r3, r0
 800835c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d11c      	bne.n	800839e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	4619      	mov	r1, r3
 800836a:	68b8      	ldr	r0, [r7, #8]
 800836c:	f7ff f9f2 	bl	8007754 <move_window>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d111      	bne.n	800839e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	2220      	movs	r2, #32
 8008380:	2100      	movs	r1, #0
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe ffd9 	bl	800733a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a18      	ldr	r0, [r3, #32]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3324      	adds	r3, #36	; 0x24
 8008390:	220b      	movs	r2, #11
 8008392:	4619      	mov	r1, r3
 8008394:	f7fe ffb0 	bl	80072f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2201      	movs	r2, #1
 800839c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	4619      	mov	r1, r3
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f7ff f9c9 	bl	8007754 <move_window>
 80083c2:	4603      	mov	r3, r0
 80083c4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80083c6:	7afb      	ldrb	r3, [r7, #11]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d106      	bne.n	80083da <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	22e5      	movs	r2, #229	; 0xe5
 80083d2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2201      	movs	r2, #1
 80083d8:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80083da:	7afb      	ldrb	r3, [r7, #11]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3324      	adds	r3, #36	; 0x24
 80083f8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80083fa:	220b      	movs	r2, #11
 80083fc:	2120      	movs	r1, #32
 80083fe:	68b8      	ldr	r0, [r7, #8]
 8008400:	f7fe ff9b 	bl	800733a <mem_set>
	si = i = 0; ni = 8;
 8008404:	2300      	movs	r3, #0
 8008406:	613b      	str	r3, [r7, #16]
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	61fb      	str	r3, [r7, #28]
 800840c:	2308      	movs	r3, #8
 800840e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	61fa      	str	r2, [r7, #28]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4413      	add	r3, r2
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800841e:	7efb      	ldrb	r3, [r7, #27]
 8008420:	2b20      	cmp	r3, #32
 8008422:	d94e      	bls.n	80084c2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008424:	7efb      	ldrb	r3, [r7, #27]
 8008426:	2b2f      	cmp	r3, #47	; 0x2f
 8008428:	d006      	beq.n	8008438 <create_name+0x54>
 800842a:	7efb      	ldrb	r3, [r7, #27]
 800842c:	2b5c      	cmp	r3, #92	; 0x5c
 800842e:	d110      	bne.n	8008452 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008430:	e002      	b.n	8008438 <create_name+0x54>
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	3301      	adds	r3, #1
 8008436:	61fb      	str	r3, [r7, #28]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	4413      	add	r3, r2
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b2f      	cmp	r3, #47	; 0x2f
 8008442:	d0f6      	beq.n	8008432 <create_name+0x4e>
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b5c      	cmp	r3, #92	; 0x5c
 800844e:	d0f0      	beq.n	8008432 <create_name+0x4e>
			break;
 8008450:	e038      	b.n	80084c4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008452:	7efb      	ldrb	r3, [r7, #27]
 8008454:	2b2e      	cmp	r3, #46	; 0x2e
 8008456:	d003      	beq.n	8008460 <create_name+0x7c>
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	429a      	cmp	r2, r3
 800845e:	d30c      	bcc.n	800847a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2b0b      	cmp	r3, #11
 8008464:	d002      	beq.n	800846c <create_name+0x88>
 8008466:	7efb      	ldrb	r3, [r7, #27]
 8008468:	2b2e      	cmp	r3, #46	; 0x2e
 800846a:	d001      	beq.n	8008470 <create_name+0x8c>
 800846c:	2306      	movs	r3, #6
 800846e:	e044      	b.n	80084fa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008470:	2308      	movs	r3, #8
 8008472:	613b      	str	r3, [r7, #16]
 8008474:	230b      	movs	r3, #11
 8008476:	617b      	str	r3, [r7, #20]
			continue;
 8008478:	e022      	b.n	80084c0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800847a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800847e:	2b00      	cmp	r3, #0
 8008480:	da04      	bge.n	800848c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008482:	7efb      	ldrb	r3, [r7, #27]
 8008484:	3b80      	subs	r3, #128	; 0x80
 8008486:	4a1f      	ldr	r2, [pc, #124]	; (8008504 <create_name+0x120>)
 8008488:	5cd3      	ldrb	r3, [r2, r3]
 800848a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800848c:	7efb      	ldrb	r3, [r7, #27]
 800848e:	4619      	mov	r1, r3
 8008490:	481d      	ldr	r0, [pc, #116]	; (8008508 <create_name+0x124>)
 8008492:	f7fe ff94 	bl	80073be <chk_chr>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <create_name+0xbc>
 800849c:	2306      	movs	r3, #6
 800849e:	e02c      	b.n	80084fa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80084a0:	7efb      	ldrb	r3, [r7, #27]
 80084a2:	2b60      	cmp	r3, #96	; 0x60
 80084a4:	d905      	bls.n	80084b2 <create_name+0xce>
 80084a6:	7efb      	ldrb	r3, [r7, #27]
 80084a8:	2b7a      	cmp	r3, #122	; 0x7a
 80084aa:	d802      	bhi.n	80084b2 <create_name+0xce>
 80084ac:	7efb      	ldrb	r3, [r7, #27]
 80084ae:	3b20      	subs	r3, #32
 80084b0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	613a      	str	r2, [r7, #16]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	4413      	add	r3, r2
 80084bc:	7efa      	ldrb	r2, [r7, #27]
 80084be:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80084c0:	e7a6      	b.n	8008410 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80084c2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	441a      	add	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <create_name+0xf4>
 80084d4:	2306      	movs	r3, #6
 80084d6:	e010      	b.n	80084fa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2be5      	cmp	r3, #229	; 0xe5
 80084de:	d102      	bne.n	80084e6 <create_name+0x102>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2205      	movs	r2, #5
 80084e4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80084e6:	7efb      	ldrb	r3, [r7, #27]
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d801      	bhi.n	80084f0 <create_name+0x10c>
 80084ec:	2204      	movs	r2, #4
 80084ee:	e000      	b.n	80084f2 <create_name+0x10e>
 80084f0:	2200      	movs	r2, #0
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	330b      	adds	r3, #11
 80084f6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80084f8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3720      	adds	r7, #32
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	08015ff4 	.word	0x08015ff4
 8008508:	0800ca78 	.word	0x0800ca78

0800850c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008520:	e002      	b.n	8008528 <follow_path+0x1c>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	3301      	adds	r3, #1
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b2f      	cmp	r3, #47	; 0x2f
 800852e:	d0f8      	beq.n	8008522 <follow_path+0x16>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b5c      	cmp	r3, #92	; 0x5c
 8008536:	d0f4      	beq.n	8008522 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	2200      	movs	r2, #0
 800853c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b1f      	cmp	r3, #31
 8008544:	d80a      	bhi.n	800855c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2280      	movs	r2, #128	; 0x80
 800854a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800854e:	2100      	movs	r1, #0
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff fc7f 	bl	8007e54 <dir_sdi>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]
 800855a:	e043      	b.n	80085e4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800855c:	463b      	mov	r3, r7
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff ff3f 	bl	80083e4 <create_name>
 8008566:	4603      	mov	r3, r0
 8008568:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800856a:	7dfb      	ldrb	r3, [r7, #23]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d134      	bne.n	80085da <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff fe92 	bl	800829a <dir_find>
 8008576:	4603      	mov	r3, r0
 8008578:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008580:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008582:	7dfb      	ldrb	r3, [r7, #23]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00a      	beq.n	800859e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	2b04      	cmp	r3, #4
 800858c:	d127      	bne.n	80085de <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d122      	bne.n	80085de <follow_path+0xd2>
 8008598:	2305      	movs	r3, #5
 800859a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800859c:	e01f      	b.n	80085de <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800859e:	7afb      	ldrb	r3, [r7, #11]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d11c      	bne.n	80085e2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	799b      	ldrb	r3, [r3, #6]
 80085ac:	f003 0310 	and.w	r3, r3, #16
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d102      	bne.n	80085ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 80085b4:	2305      	movs	r3, #5
 80085b6:	75fb      	strb	r3, [r7, #23]
 80085b8:	e014      	b.n	80085e4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c8:	4413      	add	r3, r2
 80085ca:	4619      	mov	r1, r3
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f7ff fdc8 	bl	8008162 <ld_clust>
 80085d2:	4602      	mov	r2, r0
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80085d8:	e7c0      	b.n	800855c <follow_path+0x50>
			if (res != FR_OK) break;
 80085da:	bf00      	nop
 80085dc:	e002      	b.n	80085e4 <follow_path+0xd8>
				break;
 80085de:	bf00      	nop
 80085e0:	e000      	b.n	80085e4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80085e2:	bf00      	nop
			}
		}
	}

	return res;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b087      	sub	sp, #28
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80085f6:	f04f 33ff 	mov.w	r3, #4294967295
 80085fa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d031      	beq.n	8008668 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	617b      	str	r3, [r7, #20]
 800860a:	e002      	b.n	8008612 <get_ldnumber+0x24>
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	3301      	adds	r3, #1
 8008610:	617b      	str	r3, [r7, #20]
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b20      	cmp	r3, #32
 8008618:	d903      	bls.n	8008622 <get_ldnumber+0x34>
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b3a      	cmp	r3, #58	; 0x3a
 8008620:	d1f4      	bne.n	800860c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	2b3a      	cmp	r3, #58	; 0x3a
 8008628:	d11c      	bne.n	8008664 <get_ldnumber+0x76>
			tp = *path;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	60fa      	str	r2, [r7, #12]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	3b30      	subs	r3, #48	; 0x30
 800863a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b09      	cmp	r3, #9
 8008640:	d80e      	bhi.n	8008660 <get_ldnumber+0x72>
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	429a      	cmp	r2, r3
 8008648:	d10a      	bne.n	8008660 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d107      	bne.n	8008660 <get_ldnumber+0x72>
					vol = (int)i;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	3301      	adds	r3, #1
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	e002      	b.n	800866a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008664:	2300      	movs	r3, #0
 8008666:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008668:	693b      	ldr	r3, [r7, #16]
}
 800866a:	4618      	mov	r0, r3
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
	...

08008678 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	70da      	strb	r2, [r3, #3]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f04f 32ff 	mov.w	r2, #4294967295
 800868e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7ff f85e 	bl	8007754 <move_window>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <check_fs+0x2a>
 800869e:	2304      	movs	r3, #4
 80086a0:	e038      	b.n	8008714 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3330      	adds	r3, #48	; 0x30
 80086a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fe fda2 	bl	80071f4 <ld_word>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d001      	beq.n	80086c0 <check_fs+0x48>
 80086bc:	2303      	movs	r3, #3
 80086be:	e029      	b.n	8008714 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086c6:	2be9      	cmp	r3, #233	; 0xe9
 80086c8:	d009      	beq.n	80086de <check_fs+0x66>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086d0:	2beb      	cmp	r3, #235	; 0xeb
 80086d2:	d11e      	bne.n	8008712 <check_fs+0x9a>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80086da:	2b90      	cmp	r3, #144	; 0x90
 80086dc:	d119      	bne.n	8008712 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3330      	adds	r3, #48	; 0x30
 80086e2:	3336      	adds	r3, #54	; 0x36
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe fd9d 	bl	8007224 <ld_dword>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086f0:	4a0a      	ldr	r2, [pc, #40]	; (800871c <check_fs+0xa4>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d101      	bne.n	80086fa <check_fs+0x82>
 80086f6:	2300      	movs	r3, #0
 80086f8:	e00c      	b.n	8008714 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3330      	adds	r3, #48	; 0x30
 80086fe:	3352      	adds	r3, #82	; 0x52
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe fd8f 	bl	8007224 <ld_dword>
 8008706:	4603      	mov	r3, r0
 8008708:	4a05      	ldr	r2, [pc, #20]	; (8008720 <check_fs+0xa8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d101      	bne.n	8008712 <check_fs+0x9a>
 800870e:	2300      	movs	r3, #0
 8008710:	e000      	b.n	8008714 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008712:	2302      	movs	r3, #2
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	00544146 	.word	0x00544146
 8008720:	33544146 	.word	0x33544146

08008724 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b096      	sub	sp, #88	; 0x58
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2200      	movs	r2, #0
 8008736:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff ff58 	bl	80085ee <get_ldnumber>
 800873e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008742:	2b00      	cmp	r3, #0
 8008744:	da01      	bge.n	800874a <find_volume+0x26>
 8008746:	230b      	movs	r3, #11
 8008748:	e22e      	b.n	8008ba8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800874a:	4aa8      	ldr	r2, [pc, #672]	; (80089ec <find_volume+0x2c8>)
 800874c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008752:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <find_volume+0x3a>
 800875a:	230c      	movs	r3, #12
 800875c:	e224      	b.n	8008ba8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008762:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	f023 0301 	bic.w	r3, r3, #1
 800876a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01a      	beq.n	80087aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	4618      	mov	r0, r3
 800877a:	f7fe fc9d 	bl	80070b8 <disk_status>
 800877e:	4603      	mov	r3, r0
 8008780:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008784:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10c      	bne.n	80087aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008790:	79fb      	ldrb	r3, [r7, #7]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d007      	beq.n	80087a6 <find_volume+0x82>
 8008796:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800879a:	f003 0304 	and.w	r3, r3, #4
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80087a2:	230a      	movs	r3, #10
 80087a4:	e200      	b.n	8008ba8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80087a6:	2300      	movs	r3, #0
 80087a8:	e1fe      	b.n	8008ba8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80087aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ac:	2200      	movs	r2, #0
 80087ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80087b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	785b      	ldrb	r3, [r3, #1]
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fe fc95 	bl	80070ec <disk_initialize>
 80087c2:	4603      	mov	r3, r0
 80087c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80087c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80087d4:	2303      	movs	r3, #3
 80087d6:	e1e7      	b.n	8008ba8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d007      	beq.n	80087ee <find_volume+0xca>
 80087de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087e2:	f003 0304 	and.w	r3, r3, #4
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80087ea:	230a      	movs	r3, #10
 80087ec:	e1dc      	b.n	8008ba8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80087f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087f6:	f7ff ff3f 	bl	8008678 <check_fs>
 80087fa:	4603      	mov	r3, r0
 80087fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008804:	2b02      	cmp	r3, #2
 8008806:	d14b      	bne.n	80088a0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008808:	2300      	movs	r3, #0
 800880a:	643b      	str	r3, [r7, #64]	; 0x40
 800880c:	e01f      	b.n	800884e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800881c:	4413      	add	r3, r2
 800881e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	3304      	adds	r3, #4
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d006      	beq.n	8008838 <find_volume+0x114>
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	3308      	adds	r3, #8
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fcf8 	bl	8007224 <ld_dword>
 8008834:	4602      	mov	r2, r0
 8008836:	e000      	b.n	800883a <find_volume+0x116>
 8008838:	2200      	movs	r2, #0
 800883a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008842:	440b      	add	r3, r1
 8008844:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800884a:	3301      	adds	r3, #1
 800884c:	643b      	str	r3, [r7, #64]	; 0x40
 800884e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008850:	2b03      	cmp	r3, #3
 8008852:	d9dc      	bls.n	800880e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008854:	2300      	movs	r3, #0
 8008856:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <find_volume+0x140>
 800885e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008860:	3b01      	subs	r3, #1
 8008862:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800886c:	4413      	add	r3, r2
 800886e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008872:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008876:	2b00      	cmp	r3, #0
 8008878:	d005      	beq.n	8008886 <find_volume+0x162>
 800887a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800887c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800887e:	f7ff fefb 	bl	8008678 <check_fs>
 8008882:	4603      	mov	r3, r0
 8008884:	e000      	b.n	8008888 <find_volume+0x164>
 8008886:	2303      	movs	r3, #3
 8008888:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800888c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008890:	2b01      	cmp	r3, #1
 8008892:	d905      	bls.n	80088a0 <find_volume+0x17c>
 8008894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008896:	3301      	adds	r3, #1
 8008898:	643b      	str	r3, [r7, #64]	; 0x40
 800889a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889c:	2b03      	cmp	r3, #3
 800889e:	d9e1      	bls.n	8008864 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80088a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	d101      	bne.n	80088ac <find_volume+0x188>
 80088a8:	2301      	movs	r3, #1
 80088aa:	e17d      	b.n	8008ba8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80088ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d901      	bls.n	80088b8 <find_volume+0x194>
 80088b4:	230d      	movs	r3, #13
 80088b6:	e177      	b.n	8008ba8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	3330      	adds	r3, #48	; 0x30
 80088bc:	330b      	adds	r3, #11
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fc98 	bl	80071f4 <ld_word>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088ca:	d001      	beq.n	80088d0 <find_volume+0x1ac>
 80088cc:	230d      	movs	r3, #13
 80088ce:	e16b      	b.n	8008ba8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80088d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d2:	3330      	adds	r3, #48	; 0x30
 80088d4:	3316      	adds	r3, #22
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe fc8c 	bl	80071f4 <ld_word>
 80088dc:	4603      	mov	r3, r0
 80088de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80088e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <find_volume+0x1d0>
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	3330      	adds	r3, #48	; 0x30
 80088ea:	3324      	adds	r3, #36	; 0x24
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fe fc99 	bl	8007224 <ld_dword>
 80088f2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088f8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	789b      	ldrb	r3, [r3, #2]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d005      	beq.n	8008918 <find_volume+0x1f4>
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	789b      	ldrb	r3, [r3, #2]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d001      	beq.n	8008918 <find_volume+0x1f4>
 8008914:	230d      	movs	r3, #13
 8008916:	e147      	b.n	8008ba8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891a:	789b      	ldrb	r3, [r3, #2]
 800891c:	461a      	mov	r2, r3
 800891e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008920:	fb02 f303 	mul.w	r3, r2, r3
 8008924:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800892c:	b29a      	uxth	r2, r3
 800892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008930:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008934:	895b      	ldrh	r3, [r3, #10]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d008      	beq.n	800894c <find_volume+0x228>
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	895b      	ldrh	r3, [r3, #10]
 800893e:	461a      	mov	r2, r3
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	895b      	ldrh	r3, [r3, #10]
 8008944:	3b01      	subs	r3, #1
 8008946:	4013      	ands	r3, r2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <find_volume+0x22c>
 800894c:	230d      	movs	r3, #13
 800894e:	e12b      	b.n	8008ba8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008952:	3330      	adds	r3, #48	; 0x30
 8008954:	3311      	adds	r3, #17
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe fc4c 	bl	80071f4 <ld_word>
 800895c:	4603      	mov	r3, r0
 800895e:	461a      	mov	r2, r3
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	891b      	ldrh	r3, [r3, #8]
 8008968:	f003 030f 	and.w	r3, r3, #15
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <find_volume+0x252>
 8008972:	230d      	movs	r3, #13
 8008974:	e118      	b.n	8008ba8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	3330      	adds	r3, #48	; 0x30
 800897a:	3313      	adds	r3, #19
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fc39 	bl	80071f4 <ld_word>
 8008982:	4603      	mov	r3, r0
 8008984:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008988:	2b00      	cmp	r3, #0
 800898a:	d106      	bne.n	800899a <find_volume+0x276>
 800898c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898e:	3330      	adds	r3, #48	; 0x30
 8008990:	3320      	adds	r3, #32
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fc46 	bl	8007224 <ld_dword>
 8008998:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	3330      	adds	r3, #48	; 0x30
 800899e:	330e      	adds	r3, #14
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fe fc27 	bl	80071f4 <ld_word>
 80089a6:	4603      	mov	r3, r0
 80089a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80089aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <find_volume+0x290>
 80089b0:	230d      	movs	r3, #13
 80089b2:	e0f9      	b.n	8008ba8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80089b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80089b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b8:	4413      	add	r3, r2
 80089ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089bc:	8912      	ldrh	r2, [r2, #8]
 80089be:	0912      	lsrs	r2, r2, #4
 80089c0:	b292      	uxth	r2, r2
 80089c2:	4413      	add	r3, r2
 80089c4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80089c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d201      	bcs.n	80089d2 <find_volume+0x2ae>
 80089ce:	230d      	movs	r3, #13
 80089d0:	e0ea      	b.n	8008ba8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80089d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089da:	8952      	ldrh	r2, [r2, #10]
 80089dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d103      	bne.n	80089f0 <find_volume+0x2cc>
 80089e8:	230d      	movs	r3, #13
 80089ea:	e0dd      	b.n	8008ba8 <find_volume+0x484>
 80089ec:	2000a0d0 	.word	0x2000a0d0
		fmt = FS_FAT32;
 80089f0:	2303      	movs	r3, #3
 80089f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d802      	bhi.n	8008a06 <find_volume+0x2e2>
 8008a00:	2302      	movs	r3, #2
 8008a02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d802      	bhi.n	8008a16 <find_volume+0x2f2>
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	1c9a      	adds	r2, r3, #2
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a22:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008a24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a28:	441a      	add	r2, r3
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008a2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a32:	441a      	add	r2, r3
 8008a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a36:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008a38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	d11e      	bne.n	8008a7e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	3330      	adds	r3, #48	; 0x30
 8008a44:	332a      	adds	r3, #42	; 0x2a
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fbd4 	bl	80071f4 <ld_word>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <find_volume+0x332>
 8008a52:	230d      	movs	r3, #13
 8008a54:	e0a8      	b.n	8008ba8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	891b      	ldrh	r3, [r3, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <find_volume+0x33e>
 8008a5e:	230d      	movs	r3, #13
 8008a60:	e0a2      	b.n	8008ba8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a64:	3330      	adds	r3, #48	; 0x30
 8008a66:	332c      	adds	r3, #44	; 0x2c
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe fbdb 	bl	8007224 <ld_dword>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a72:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a76:	695b      	ldr	r3, [r3, #20]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a7c:	e01f      	b.n	8008abe <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	891b      	ldrh	r3, [r3, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <find_volume+0x366>
 8008a86:	230d      	movs	r3, #13
 8008a88:	e08e      	b.n	8008ba8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	6a1a      	ldr	r2, [r3, #32]
 8008a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a90:	441a      	add	r2, r3
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008a96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d103      	bne.n	8008aa6 <find_volume+0x382>
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	e00a      	b.n	8008abc <find_volume+0x398>
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa8:	695a      	ldr	r2, [r3, #20]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	005b      	lsls	r3, r3, #1
 8008aae:	4413      	add	r3, r2
 8008ab0:	085a      	lsrs	r2, r3, #1
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008abc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac0:	699a      	ldr	r2, [r3, #24]
 8008ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ac4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008ac8:	0a5b      	lsrs	r3, r3, #9
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d201      	bcs.n	8008ad2 <find_volume+0x3ae>
 8008ace:	230d      	movs	r3, #13
 8008ad0:	e06a      	b.n	8008ba8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad8:	611a      	str	r2, [r3, #16]
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae4:	2280      	movs	r2, #128	; 0x80
 8008ae6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008ae8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d149      	bne.n	8008b84 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	3330      	adds	r3, #48	; 0x30
 8008af4:	3330      	adds	r3, #48	; 0x30
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe fb7c 	bl	80071f4 <ld_word>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d140      	bne.n	8008b84 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b04:	3301      	adds	r3, #1
 8008b06:	4619      	mov	r1, r3
 8008b08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b0a:	f7fe fe23 	bl	8007754 <move_window>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d137      	bne.n	8008b84 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b16:	2200      	movs	r2, #0
 8008b18:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1c:	3330      	adds	r3, #48	; 0x30
 8008b1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe fb66 	bl	80071f4 <ld_word>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d127      	bne.n	8008b84 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	3330      	adds	r3, #48	; 0x30
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe fb73 	bl	8007224 <ld_dword>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	4a1b      	ldr	r2, [pc, #108]	; (8008bb0 <find_volume+0x48c>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d11e      	bne.n	8008b84 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	3330      	adds	r3, #48	; 0x30
 8008b4a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe fb68 	bl	8007224 <ld_dword>
 8008b54:	4603      	mov	r3, r0
 8008b56:	4a17      	ldr	r2, [pc, #92]	; (8008bb4 <find_volume+0x490>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d113      	bne.n	8008b84 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	3330      	adds	r3, #48	; 0x30
 8008b60:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fe fb5d 	bl	8007224 <ld_dword>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b72:	3330      	adds	r3, #48	; 0x30
 8008b74:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe fb53 	bl	8007224 <ld_dword>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008b8a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008b8c:	4b0a      	ldr	r3, [pc, #40]	; (8008bb8 <find_volume+0x494>)
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	3301      	adds	r3, #1
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <find_volume+0x494>)
 8008b96:	801a      	strh	r2, [r3, #0]
 8008b98:	4b07      	ldr	r3, [pc, #28]	; (8008bb8 <find_volume+0x494>)
 8008b9a:	881a      	ldrh	r2, [r3, #0]
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008ba0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ba2:	f7fe fd6f 	bl	8007684 <clear_lock>
#endif
	return FR_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3758      	adds	r7, #88	; 0x58
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	41615252 	.word	0x41615252
 8008bb4:	61417272 	.word	0x61417272
 8008bb8:	2000a0d4 	.word	0x2000a0d4

08008bbc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008bc6:	2309      	movs	r3, #9
 8008bc8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01c      	beq.n	8008c0a <validate+0x4e>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d018      	beq.n	8008c0a <validate+0x4e>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d013      	beq.n	8008c0a <validate+0x4e>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	889a      	ldrh	r2, [r3, #4]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	88db      	ldrh	r3, [r3, #6]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d10c      	bne.n	8008c0a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fe fa5e 	bl	80070b8 <disk_status>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <validate+0x4e>
			res = FR_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d102      	bne.n	8008c16 <validate+0x5a>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	e000      	b.n	8008c18 <validate+0x5c>
 8008c16:	2300      	movs	r3, #0
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	6013      	str	r3, [r2, #0]
	return res;
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b088      	sub	sp, #32
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4613      	mov	r3, r2
 8008c34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008c3a:	f107 0310 	add.w	r3, r7, #16
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff fcd5 	bl	80085ee <get_ldnumber>
 8008c44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	da01      	bge.n	8008c50 <f_mount+0x28>
 8008c4c:	230b      	movs	r3, #11
 8008c4e:	e02b      	b.n	8008ca8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008c50:	4a17      	ldr	r2, [pc, #92]	; (8008cb0 <f_mount+0x88>)
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008c60:	69b8      	ldr	r0, [r7, #24]
 8008c62:	f7fe fd0f 	bl	8007684 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	490d      	ldr	r1, [pc, #52]	; (8008cb0 <f_mount+0x88>)
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <f_mount+0x66>
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d001      	beq.n	8008c92 <f_mount+0x6a>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e00a      	b.n	8008ca8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008c92:	f107 010c 	add.w	r1, r7, #12
 8008c96:	f107 0308 	add.w	r3, r7, #8
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7ff fd41 	bl	8008724 <find_volume>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3720      	adds	r7, #32
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	2000a0d0 	.word	0x2000a0d0

08008cb4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b098      	sub	sp, #96	; 0x60
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d101      	bne.n	8008ccc <f_open+0x18>
 8008cc8:	2309      	movs	r3, #9
 8008cca:	e1ad      	b.n	8009028 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cd2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008cd4:	79fa      	ldrb	r2, [r7, #7]
 8008cd6:	f107 0110 	add.w	r1, r7, #16
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7ff fd20 	bl	8008724 <find_volume>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008cea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f040 8191 	bne.w	8009016 <f_open+0x362>
		dj.obj.fs = fs;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	f107 0314 	add.w	r3, r7, #20
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7ff fc03 	bl	800850c <follow_path>
 8008d06:	4603      	mov	r3, r0
 8008d08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008d0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d11a      	bne.n	8008d4a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008d14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d18:	b25b      	sxtb	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	da03      	bge.n	8008d26 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008d1e:	2306      	movs	r3, #6
 8008d20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008d24:	e011      	b.n	8008d4a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d26:	79fb      	ldrb	r3, [r7, #7]
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	bf14      	ite	ne
 8008d30:	2301      	movne	r3, #1
 8008d32:	2300      	moveq	r3, #0
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	461a      	mov	r2, r3
 8008d38:	f107 0314 	add.w	r3, r7, #20
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe fb58 	bl	80073f4 <chk_lock>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008d4a:	79fb      	ldrb	r3, [r7, #7]
 8008d4c:	f003 031c 	and.w	r3, r3, #28
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d07f      	beq.n	8008e54 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008d54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d017      	beq.n	8008d8c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008d5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d10e      	bne.n	8008d82 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008d64:	f7fe fba2 	bl	80074ac <enq_lock>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d006      	beq.n	8008d7c <f_open+0xc8>
 8008d6e:	f107 0314 	add.w	r3, r7, #20
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7ff fae6 	bl	8008344 <dir_register>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	e000      	b.n	8008d7e <f_open+0xca>
 8008d7c:	2312      	movs	r3, #18
 8008d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008d82:	79fb      	ldrb	r3, [r7, #7]
 8008d84:	f043 0308 	orr.w	r3, r3, #8
 8008d88:	71fb      	strb	r3, [r7, #7]
 8008d8a:	e010      	b.n	8008dae <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008d8c:	7ebb      	ldrb	r3, [r7, #26]
 8008d8e:	f003 0311 	and.w	r3, r3, #17
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <f_open+0xea>
					res = FR_DENIED;
 8008d96:	2307      	movs	r3, #7
 8008d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008d9c:	e007      	b.n	8008dae <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <f_open+0xfa>
 8008da8:	2308      	movs	r3, #8
 8008daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d168      	bne.n	8008e88 <f_open+0x1d4>
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	f003 0308 	and.w	r3, r3, #8
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d063      	beq.n	8008e88 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008dc0:	f7fe f91c 	bl	8006ffc <get_fattime>
 8008dc4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc8:	330e      	adds	r3, #14
 8008dca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fe fa67 	bl	80072a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd4:	3316      	adds	r3, #22
 8008dd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe fa61 	bl	80072a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de0:	330b      	adds	r3, #11
 8008de2:	2220      	movs	r2, #32
 8008de4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dea:	4611      	mov	r1, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7ff f9b8 	bl	8008162 <ld_clust>
 8008df2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008df8:	2200      	movs	r2, #0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff f9d0 	bl	80081a0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e02:	331c      	adds	r3, #28
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fa4a 	bl	80072a0 <st_dword>
					fs->wflag = 1;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d037      	beq.n	8008e88 <f_open+0x1d4>
						dw = fs->winsect;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008e1e:	f107 0314 	add.w	r3, r7, #20
 8008e22:	2200      	movs	r2, #0
 8008e24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fee3 	bl	8007bf2 <remove_chain>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008e32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d126      	bne.n	8008e88 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fe fc88 	bl	8007754 <move_window>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e4e:	3a01      	subs	r2, #1
 8008e50:	60da      	str	r2, [r3, #12]
 8008e52:	e019      	b.n	8008e88 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008e54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d115      	bne.n	8008e88 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008e5c:	7ebb      	ldrb	r3, [r7, #26]
 8008e5e:	f003 0310 	and.w	r3, r3, #16
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008e66:	2304      	movs	r3, #4
 8008e68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008e6c:	e00c      	b.n	8008e88 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d007      	beq.n	8008e88 <f_open+0x1d4>
 8008e78:	7ebb      	ldrb	r3, [r7, #26]
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d002      	beq.n	8008e88 <f_open+0x1d4>
						res = FR_DENIED;
 8008e82:	2307      	movs	r3, #7
 8008e84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d128      	bne.n	8008ee2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008e90:	79fb      	ldrb	r3, [r7, #7]
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ea0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	f023 0301 	bic.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	bf14      	ite	ne
 8008eba:	2301      	movne	r3, #1
 8008ebc:	2300      	moveq	r3, #0
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	f107 0314 	add.w	r3, r7, #20
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fe fb11 	bl	80074f0 <inc_lock>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d102      	bne.n	8008ee2 <f_open+0x22e>
 8008edc:	2302      	movs	r3, #2
 8008ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f040 8095 	bne.w	8009016 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7ff f935 	bl	8008162 <ld_clust>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f00:	331c      	adds	r3, #28
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fe f98e 	bl	8007224 <ld_dword>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	88da      	ldrh	r2, [r3, #6]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	79fa      	ldrb	r2, [r7, #7]
 8008f26:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3330      	adds	r3, #48	; 0x30
 8008f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f42:	2100      	movs	r1, #0
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fe f9f8 	bl	800733a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	f003 0320 	and.w	r3, r3, #32
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d060      	beq.n	8009016 <f_open+0x362>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d05c      	beq.n	8009016 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	895b      	ldrh	r3, [r3, #10]
 8008f68:	025b      	lsls	r3, r3, #9
 8008f6a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	657b      	str	r3, [r7, #84]	; 0x54
 8008f78:	e016      	b.n	8008fa8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe fca3 	bl	80078ca <get_fat>
 8008f84:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d802      	bhi.n	8008f92 <f_open+0x2de>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f98:	d102      	bne.n	8008fa0 <f_open+0x2ec>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008fa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8008fa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d103      	bne.n	8008fb8 <f_open+0x304>
 8008fb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d8e0      	bhi.n	8008f7a <f_open+0x2c6>
				}
				fp->clust = clst;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fbc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d127      	bne.n	8009016 <f_open+0x362>
 8008fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d022      	beq.n	8009016 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fe fc59 	bl	800788c <clust2sect>
 8008fda:	6478      	str	r0, [r7, #68]	; 0x44
 8008fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d103      	bne.n	8008fea <f_open+0x336>
						res = FR_INT_ERR;
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008fe8:	e015      	b.n	8009016 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fec:	0a5a      	lsrs	r2, r3, #9
 8008fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ff0:	441a      	add	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	7858      	ldrb	r0, [r3, #1]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a1a      	ldr	r2, [r3, #32]
 8009004:	2301      	movs	r3, #1
 8009006:	f7fe f897 	bl	8007138 <disk_read>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <f_open+0x362>
 8009010:	2301      	movs	r3, #1
 8009012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <f_open+0x370>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009028:	4618      	mov	r0, r3
 800902a:	3760      	adds	r7, #96	; 0x60
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08e      	sub	sp, #56	; 0x38
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
 800903c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2200      	movs	r2, #0
 8009046:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f107 0214 	add.w	r2, r7, #20
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff fdb3 	bl	8008bbc <validate>
 8009056:	4603      	mov	r3, r0
 8009058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800905c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009060:	2b00      	cmp	r3, #0
 8009062:	d107      	bne.n	8009074 <f_read+0x44>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	7d5b      	ldrb	r3, [r3, #21]
 8009068:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800906c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <f_read+0x4a>
 8009074:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009078:	e115      	b.n	80092a6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	7d1b      	ldrb	r3, [r3, #20]
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <f_read+0x5a>
 8009086:	2307      	movs	r3, #7
 8009088:	e10d      	b.n	80092a6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	429a      	cmp	r2, r3
 800909c:	f240 80fe 	bls.w	800929c <f_read+0x26c>
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80090a4:	e0fa      	b.n	800929c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f040 80c6 	bne.w	8009240 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	0a5b      	lsrs	r3, r3, #9
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	8952      	ldrh	r2, [r2, #10]
 80090be:	3a01      	subs	r2, #1
 80090c0:	4013      	ands	r3, r2
 80090c2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d12f      	bne.n	800912a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d103      	bne.n	80090da <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	633b      	str	r3, [r7, #48]	; 0x30
 80090d8:	e013      	b.n	8009102 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d007      	beq.n	80090f2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	4619      	mov	r1, r3
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f7fe fe7f 	bl	8007dec <clmt_clust>
 80090ee:	6338      	str	r0, [r7, #48]	; 0x30
 80090f0:	e007      	b.n	8009102 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	4619      	mov	r1, r3
 80090fa:	4610      	mov	r0, r2
 80090fc:	f7fe fbe5 	bl	80078ca <get_fat>
 8009100:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	2b01      	cmp	r3, #1
 8009106:	d804      	bhi.n	8009112 <f_read+0xe2>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2202      	movs	r2, #2
 800910c:	755a      	strb	r2, [r3, #21]
 800910e:	2302      	movs	r3, #2
 8009110:	e0c9      	b.n	80092a6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009118:	d104      	bne.n	8009124 <f_read+0xf4>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2201      	movs	r2, #1
 800911e:	755a      	strb	r2, [r3, #21]
 8009120:	2301      	movs	r3, #1
 8009122:	e0c0      	b.n	80092a6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009128:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800912a:	697a      	ldr	r2, [r7, #20]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	4619      	mov	r1, r3
 8009132:	4610      	mov	r0, r2
 8009134:	f7fe fbaa 	bl	800788c <clust2sect>
 8009138:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d104      	bne.n	800914a <f_read+0x11a>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2202      	movs	r2, #2
 8009144:	755a      	strb	r2, [r3, #21]
 8009146:	2302      	movs	r3, #2
 8009148:	e0ad      	b.n	80092a6 <f_read+0x276>
			sect += csect;
 800914a:	69ba      	ldr	r2, [r7, #24]
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	4413      	add	r3, r2
 8009150:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	0a5b      	lsrs	r3, r3, #9
 8009156:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915a:	2b00      	cmp	r3, #0
 800915c:	d039      	beq.n	80091d2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	4413      	add	r3, r2
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	8952      	ldrh	r2, [r2, #10]
 8009168:	4293      	cmp	r3, r2
 800916a:	d905      	bls.n	8009178 <f_read+0x148>
					cc = fs->csize - csect;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	895b      	ldrh	r3, [r3, #10]
 8009170:	461a      	mov	r2, r3
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	7858      	ldrb	r0, [r3, #1]
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009182:	f7fd ffd9 	bl	8007138 <disk_read>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <f_read+0x166>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	755a      	strb	r2, [r3, #21]
 8009192:	2301      	movs	r3, #1
 8009194:	e087      	b.n	80092a6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	7d1b      	ldrb	r3, [r3, #20]
 800919a:	b25b      	sxtb	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	da14      	bge.n	80091ca <f_read+0x19a>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6a1a      	ldr	r2, [r3, #32]
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d90d      	bls.n	80091ca <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6a1a      	ldr	r2, [r3, #32]
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	025b      	lsls	r3, r3, #9
 80091b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ba:	18d0      	adds	r0, r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	3330      	adds	r3, #48	; 0x30
 80091c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091c4:	4619      	mov	r1, r3
 80091c6:	f7fe f897 	bl	80072f8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	025b      	lsls	r3, r3, #9
 80091ce:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80091d0:	e050      	b.n	8009274 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d02e      	beq.n	800923a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	7d1b      	ldrb	r3, [r3, #20]
 80091e0:	b25b      	sxtb	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	da18      	bge.n	8009218 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	7858      	ldrb	r0, [r3, #1]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6a1a      	ldr	r2, [r3, #32]
 80091f4:	2301      	movs	r3, #1
 80091f6:	f7fd ffbf 	bl	8007178 <disk_write>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d004      	beq.n	800920a <f_read+0x1da>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2201      	movs	r2, #1
 8009204:	755a      	strb	r2, [r3, #21]
 8009206:	2301      	movs	r3, #1
 8009208:	e04d      	b.n	80092a6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	7d1b      	ldrb	r3, [r3, #20]
 800920e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009212:	b2da      	uxtb	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	7858      	ldrb	r0, [r3, #1]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009222:	2301      	movs	r3, #1
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	f7fd ff87 	bl	8007138 <disk_read>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <f_read+0x20a>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2201      	movs	r2, #1
 8009234:	755a      	strb	r2, [r3, #21]
 8009236:	2301      	movs	r3, #1
 8009238:	e035      	b.n	80092a6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009248:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800924c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800924e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	429a      	cmp	r2, r3
 8009254:	d901      	bls.n	800925a <f_read+0x22a>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009268:	4413      	add	r3, r2
 800926a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800926c:	4619      	mov	r1, r3
 800926e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009270:	f7fe f842 	bl	80072f8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	4413      	add	r3, r2
 800927a:	627b      	str	r3, [r7, #36]	; 0x24
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	699a      	ldr	r2, [r3, #24]
 8009280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009282:	441a      	add	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	619a      	str	r2, [r3, #24]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	441a      	add	r2, r3
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f47f af01 	bne.w	80090a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3738      	adds	r7, #56	; 0x38
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b08c      	sub	sp, #48	; 0x30
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	60f8      	str	r0, [r7, #12]
 80092b6:	60b9      	str	r1, [r7, #8]
 80092b8:	607a      	str	r2, [r7, #4]
 80092ba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f107 0210 	add.w	r2, r7, #16
 80092cc:	4611      	mov	r1, r2
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7ff fc74 	bl	8008bbc <validate>
 80092d4:	4603      	mov	r3, r0
 80092d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80092da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d107      	bne.n	80092f2 <f_write+0x44>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	7d5b      	ldrb	r3, [r3, #21]
 80092e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80092ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <f_write+0x4a>
 80092f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092f6:	e14b      	b.n	8009590 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	7d1b      	ldrb	r3, [r3, #20]
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <f_write+0x5a>
 8009304:	2307      	movs	r3, #7
 8009306:	e143      	b.n	8009590 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	699a      	ldr	r2, [r3, #24]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	441a      	add	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	429a      	cmp	r2, r3
 8009316:	f080 812d 	bcs.w	8009574 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	43db      	mvns	r3, r3
 8009320:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009322:	e127      	b.n	8009574 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800932c:	2b00      	cmp	r3, #0
 800932e:	f040 80e3 	bne.w	80094f8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	0a5b      	lsrs	r3, r3, #9
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	8952      	ldrh	r2, [r2, #10]
 800933c:	3a01      	subs	r2, #1
 800933e:	4013      	ands	r3, r2
 8009340:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d143      	bne.n	80093d0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10c      	bne.n	800936a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	2b00      	cmp	r3, #0
 800935a:	d11a      	bne.n	8009392 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2100      	movs	r1, #0
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe fcab 	bl	8007cbc <create_chain>
 8009366:	62b8      	str	r0, [r7, #40]	; 0x28
 8009368:	e013      	b.n	8009392 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d007      	beq.n	8009382 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	4619      	mov	r1, r3
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f7fe fd37 	bl	8007dec <clmt_clust>
 800937e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009380:	e007      	b.n	8009392 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	4619      	mov	r1, r3
 800938a:	4610      	mov	r0, r2
 800938c:	f7fe fc96 	bl	8007cbc <create_chain>
 8009390:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 80f2 	beq.w	800957e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	2b01      	cmp	r3, #1
 800939e:	d104      	bne.n	80093aa <f_write+0xfc>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2202      	movs	r2, #2
 80093a4:	755a      	strb	r2, [r3, #21]
 80093a6:	2302      	movs	r3, #2
 80093a8:	e0f2      	b.n	8009590 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b0:	d104      	bne.n	80093bc <f_write+0x10e>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2201      	movs	r2, #1
 80093b6:	755a      	strb	r2, [r3, #21]
 80093b8:	2301      	movs	r3, #1
 80093ba:	e0e9      	b.n	8009590 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093c0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d102      	bne.n	80093d0 <f_write+0x122>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	7d1b      	ldrb	r3, [r3, #20]
 80093d4:	b25b      	sxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	da18      	bge.n	800940c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	7858      	ldrb	r0, [r3, #1]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6a1a      	ldr	r2, [r3, #32]
 80093e8:	2301      	movs	r3, #1
 80093ea:	f7fd fec5 	bl	8007178 <disk_write>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d004      	beq.n	80093fe <f_write+0x150>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2201      	movs	r2, #1
 80093f8:	755a      	strb	r2, [r3, #21]
 80093fa:	2301      	movs	r3, #1
 80093fc:	e0c8      	b.n	8009590 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	7d1b      	ldrb	r3, [r3, #20]
 8009402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009406:	b2da      	uxtb	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	69db      	ldr	r3, [r3, #28]
 8009412:	4619      	mov	r1, r3
 8009414:	4610      	mov	r0, r2
 8009416:	f7fe fa39 	bl	800788c <clust2sect>
 800941a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d104      	bne.n	800942c <f_write+0x17e>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2202      	movs	r2, #2
 8009426:	755a      	strb	r2, [r3, #21]
 8009428:	2302      	movs	r3, #2
 800942a:	e0b1      	b.n	8009590 <f_write+0x2e2>
			sect += csect;
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	4413      	add	r3, r2
 8009432:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	0a5b      	lsrs	r3, r3, #9
 8009438:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d03c      	beq.n	80094ba <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	4413      	add	r3, r2
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	8952      	ldrh	r2, [r2, #10]
 800944a:	4293      	cmp	r3, r2
 800944c:	d905      	bls.n	800945a <f_write+0x1ac>
					cc = fs->csize - csect;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	895b      	ldrh	r3, [r3, #10]
 8009452:	461a      	mov	r2, r3
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	7858      	ldrb	r0, [r3, #1]
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	69f9      	ldr	r1, [r7, #28]
 8009464:	f7fd fe88 	bl	8007178 <disk_write>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d004      	beq.n	8009478 <f_write+0x1ca>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2201      	movs	r2, #1
 8009472:	755a      	strb	r2, [r3, #21]
 8009474:	2301      	movs	r3, #1
 8009476:	e08b      	b.n	8009590 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6a1a      	ldr	r2, [r3, #32]
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	6a3a      	ldr	r2, [r7, #32]
 8009482:	429a      	cmp	r2, r3
 8009484:	d915      	bls.n	80094b2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6a1a      	ldr	r2, [r3, #32]
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	025b      	lsls	r3, r3, #9
 8009496:	69fa      	ldr	r2, [r7, #28]
 8009498:	4413      	add	r3, r2
 800949a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800949e:	4619      	mov	r1, r3
 80094a0:	f7fd ff2a 	bl	80072f8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	7d1b      	ldrb	r3, [r3, #20]
 80094a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	025b      	lsls	r3, r3, #9
 80094b6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80094b8:	e03f      	b.n	800953a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d016      	beq.n	80094f2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	699a      	ldr	r2, [r3, #24]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d210      	bcs.n	80094f2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	7858      	ldrb	r0, [r3, #1]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80094da:	2301      	movs	r3, #1
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	f7fd fe2b 	bl	8007138 <disk_read>
 80094e2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d004      	beq.n	80094f2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2201      	movs	r2, #1
 80094ec:	755a      	strb	r2, [r3, #21]
 80094ee:	2301      	movs	r3, #1
 80094f0:	e04e      	b.n	8009590 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009500:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	429a      	cmp	r2, r3
 800950c:	d901      	bls.n	8009512 <f_write+0x264>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009520:	4413      	add	r3, r2
 8009522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009524:	69f9      	ldr	r1, [r7, #28]
 8009526:	4618      	mov	r0, r3
 8009528:	f7fd fee6 	bl	80072f8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	7d1b      	ldrb	r3, [r3, #20]
 8009530:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009534:	b2da      	uxtb	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	4413      	add	r3, r2
 8009540:	61fb      	str	r3, [r7, #28]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	699a      	ldr	r2, [r3, #24]
 8009546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009548:	441a      	add	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	619a      	str	r2, [r3, #24]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	68da      	ldr	r2, [r3, #12]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	429a      	cmp	r2, r3
 8009558:	bf38      	it	cc
 800955a:	461a      	movcc	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	60da      	str	r2, [r3, #12]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	441a      	add	r2, r3
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	f47f aed4 	bne.w	8009324 <f_write+0x76>
 800957c:	e000      	b.n	8009580 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800957e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	7d1b      	ldrb	r3, [r3, #20]
 8009584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009588:	b2da      	uxtb	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3730      	adds	r7, #48	; 0x30
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f107 0208 	add.w	r2, r7, #8
 80095a6:	4611      	mov	r1, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff fb07 	bl	8008bbc <validate>
 80095ae:	4603      	mov	r3, r0
 80095b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d168      	bne.n	800968a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7d1b      	ldrb	r3, [r3, #20]
 80095bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d062      	beq.n	800968a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	7d1b      	ldrb	r3, [r3, #20]
 80095c8:	b25b      	sxtb	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	da15      	bge.n	80095fa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	7858      	ldrb	r0, [r3, #1]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a1a      	ldr	r2, [r3, #32]
 80095dc:	2301      	movs	r3, #1
 80095de:	f7fd fdcb 	bl	8007178 <disk_write>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <f_sync+0x54>
 80095e8:	2301      	movs	r3, #1
 80095ea:	e04f      	b.n	800968c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	7d1b      	ldrb	r3, [r3, #20]
 80095f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80095fa:	f7fd fcff 	bl	8006ffc <get_fattime>
 80095fe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009606:	4619      	mov	r1, r3
 8009608:	4610      	mov	r0, r2
 800960a:	f7fe f8a3 	bl	8007754 <move_window>
 800960e:	4603      	mov	r3, r0
 8009610:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009612:	7dfb      	ldrb	r3, [r7, #23]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d138      	bne.n	800968a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	330b      	adds	r3, #11
 8009622:	781a      	ldrb	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	330b      	adds	r3, #11
 8009628:	f042 0220 	orr.w	r2, r2, #32
 800962c:	b2d2      	uxtb	r2, r2
 800962e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6818      	ldr	r0, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	461a      	mov	r2, r3
 800963a:	68f9      	ldr	r1, [r7, #12]
 800963c:	f7fe fdb0 	bl	80081a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f103 021c 	add.w	r2, r3, #28
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	4619      	mov	r1, r3
 800964c:	4610      	mov	r0, r2
 800964e:	f7fd fe27 	bl	80072a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3316      	adds	r3, #22
 8009656:	6939      	ldr	r1, [r7, #16]
 8009658:	4618      	mov	r0, r3
 800965a:	f7fd fe21 	bl	80072a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3312      	adds	r3, #18
 8009662:	2100      	movs	r1, #0
 8009664:	4618      	mov	r0, r3
 8009666:	f7fd fe00 	bl	800726a <st_word>
					fs->wflag = 1;
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2201      	movs	r2, #1
 800966e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe f89c 	bl	80077b0 <sync_fs>
 8009678:	4603      	mov	r3, r0
 800967a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	7d1b      	ldrb	r3, [r3, #20]
 8009680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009684:	b2da      	uxtb	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800968a:	7dfb      	ldrb	r3, [r7, #23]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3718      	adds	r7, #24
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7ff ff7b 	bl	8009598 <f_sync>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d118      	bne.n	80096de <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f107 0208 	add.w	r2, r7, #8
 80096b2:	4611      	mov	r1, r2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff fa81 	bl	8008bbc <validate>
 80096ba:	4603      	mov	r3, r0
 80096bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10c      	bne.n	80096de <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fd ff9f 	bl	800760c <dec_lock>
 80096ce:	4603      	mov	r3, r0
 80096d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d102      	bne.n	80096de <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80096de:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b090      	sub	sp, #64	; 0x40
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f107 0208 	add.w	r2, r7, #8
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7ff fa5e 	bl	8008bbc <validate>
 8009700:	4603      	mov	r3, r0
 8009702:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009706:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800970a:	2b00      	cmp	r3, #0
 800970c:	d103      	bne.n	8009716 <f_lseek+0x2e>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	7d5b      	ldrb	r3, [r3, #21]
 8009712:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009716:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800971a:	2b00      	cmp	r3, #0
 800971c:	d002      	beq.n	8009724 <f_lseek+0x3c>
 800971e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009722:	e1e6      	b.n	8009af2 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 80d1 	beq.w	80098d0 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009734:	d15a      	bne.n	80097ec <f_lseek+0x104>
			tbl = fp->cltbl;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	1d1a      	adds	r2, r3, #4
 8009740:	627a      	str	r2, [r7, #36]	; 0x24
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	617b      	str	r3, [r7, #20]
 8009746:	2302      	movs	r3, #2
 8009748:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009752:	2b00      	cmp	r3, #0
 8009754:	d03a      	beq.n	80097cc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009758:	613b      	str	r3, [r7, #16]
 800975a:	2300      	movs	r3, #0
 800975c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009760:	3302      	adds	r3, #2
 8009762:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976a:	3301      	adds	r3, #1
 800976c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009772:	4618      	mov	r0, r3
 8009774:	f7fe f8a9 	bl	80078ca <get_fat>
 8009778:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	2b01      	cmp	r3, #1
 800977e:	d804      	bhi.n	800978a <f_lseek+0xa2>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2202      	movs	r2, #2
 8009784:	755a      	strb	r2, [r3, #21]
 8009786:	2302      	movs	r3, #2
 8009788:	e1b3      	b.n	8009af2 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009790:	d104      	bne.n	800979c <f_lseek+0xb4>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	755a      	strb	r2, [r3, #21]
 8009798:	2301      	movs	r3, #1
 800979a:	e1aa      	b.n	8009af2 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	3301      	adds	r3, #1
 80097a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d0de      	beq.n	8009764 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80097a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d809      	bhi.n	80097c2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80097ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b0:	1d1a      	adds	r2, r3, #4
 80097b2:	627a      	str	r2, [r7, #36]	; 0x24
 80097b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097b6:	601a      	str	r2, [r3, #0]
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	1d1a      	adds	r2, r3, #4
 80097bc:	627a      	str	r2, [r7, #36]	; 0x24
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d3c4      	bcc.n	8009756 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097d2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80097d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d803      	bhi.n	80097e4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80097dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097de:	2200      	movs	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	e184      	b.n	8009aee <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80097e4:	2311      	movs	r3, #17
 80097e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80097ea:	e180      	b.n	8009aee <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d902      	bls.n	80097fc <f_lseek+0x114>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 8172 	beq.w	8009aee <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	3b01      	subs	r3, #1
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7fe faeb 	bl	8007dec <clmt_clust>
 8009816:	4602      	mov	r2, r0
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	4619      	mov	r1, r3
 8009824:	4610      	mov	r0, r2
 8009826:	f7fe f831 	bl	800788c <clust2sect>
 800982a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d104      	bne.n	800983c <f_lseek+0x154>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2202      	movs	r2, #2
 8009836:	755a      	strb	r2, [r3, #21]
 8009838:	2302      	movs	r3, #2
 800983a:	e15a      	b.n	8009af2 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	3b01      	subs	r3, #1
 8009840:	0a5b      	lsrs	r3, r3, #9
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	8952      	ldrh	r2, [r2, #10]
 8009846:	3a01      	subs	r2, #1
 8009848:	4013      	ands	r3, r2
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	4413      	add	r3, r2
 800984e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 8148 	beq.w	8009aee <f_lseek+0x406>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	69ba      	ldr	r2, [r7, #24]
 8009864:	429a      	cmp	r2, r3
 8009866:	f000 8142 	beq.w	8009aee <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	7d1b      	ldrb	r3, [r3, #20]
 800986e:	b25b      	sxtb	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	da18      	bge.n	80098a6 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	7858      	ldrb	r0, [r3, #1]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a1a      	ldr	r2, [r3, #32]
 8009882:	2301      	movs	r3, #1
 8009884:	f7fd fc78 	bl	8007178 <disk_write>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d004      	beq.n	8009898 <f_lseek+0x1b0>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	755a      	strb	r2, [r3, #21]
 8009894:	2301      	movs	r3, #1
 8009896:	e12c      	b.n	8009af2 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	7d1b      	ldrb	r3, [r3, #20]
 800989c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	7858      	ldrb	r0, [r3, #1]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098b0:	2301      	movs	r3, #1
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	f7fd fc40 	bl	8007138 <disk_read>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <f_lseek+0x1e0>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	755a      	strb	r2, [r3, #21]
 80098c4:	2301      	movs	r3, #1
 80098c6:	e114      	b.n	8009af2 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	621a      	str	r2, [r3, #32]
 80098ce:	e10e      	b.n	8009aee <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d908      	bls.n	80098ec <f_lseek+0x204>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	7d1b      	ldrb	r3, [r3, #20]
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d102      	bne.n	80098ec <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	637b      	str	r3, [r7, #52]	; 0x34
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098fa:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 80a7 	beq.w	8009a52 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	895b      	ldrh	r3, [r3, #10]
 8009908:	025b      	lsls	r3, r3, #9
 800990a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d01b      	beq.n	800994a <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	1e5a      	subs	r2, r3, #1
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	fbb2 f2f3 	udiv	r2, r2, r3
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	1e59      	subs	r1, r3, #1
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009926:	429a      	cmp	r2, r3
 8009928:	d30f      	bcc.n	800994a <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	1e5a      	subs	r2, r3, #1
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	425b      	negs	r3, r3
 8009932:	401a      	ands	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	683a      	ldr	r2, [r7, #0]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	63bb      	str	r3, [r7, #56]	; 0x38
 8009948:	e022      	b.n	8009990 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009952:	2b00      	cmp	r3, #0
 8009954:	d119      	bne.n	800998a <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2100      	movs	r1, #0
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe f9ae 	bl	8007cbc <create_chain>
 8009960:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009964:	2b01      	cmp	r3, #1
 8009966:	d104      	bne.n	8009972 <f_lseek+0x28a>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	755a      	strb	r2, [r3, #21]
 800996e:	2302      	movs	r3, #2
 8009970:	e0bf      	b.n	8009af2 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009978:	d104      	bne.n	8009984 <f_lseek+0x29c>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	755a      	strb	r2, [r3, #21]
 8009980:	2301      	movs	r3, #1
 8009982:	e0b6      	b.n	8009af2 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009988:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800998e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009992:	2b00      	cmp	r3, #0
 8009994:	d05d      	beq.n	8009a52 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009996:	e03a      	b.n	8009a0e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	603b      	str	r3, [r7, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	699a      	ldr	r2, [r3, #24]
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	441a      	add	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	7d1b      	ldrb	r3, [r3, #20]
 80099b0:	f003 0302 	and.w	r3, r3, #2
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00b      	beq.n	80099d0 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fe f97d 	bl	8007cbc <create_chain>
 80099c2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80099c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d108      	bne.n	80099dc <f_lseek+0x2f4>
							ofs = 0; break;
 80099ca:	2300      	movs	r3, #0
 80099cc:	603b      	str	r3, [r7, #0]
 80099ce:	e022      	b.n	8009a16 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fd ff78 	bl	80078ca <get_fat>
 80099da:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80099dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e2:	d104      	bne.n	80099ee <f_lseek+0x306>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	755a      	strb	r2, [r3, #21]
 80099ea:	2301      	movs	r3, #1
 80099ec:	e081      	b.n	8009af2 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d904      	bls.n	80099fe <f_lseek+0x316>
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d304      	bcc.n	8009a08 <f_lseek+0x320>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2202      	movs	r2, #2
 8009a02:	755a      	strb	r2, [r3, #21]
 8009a04:	2302      	movs	r3, #2
 8009a06:	e074      	b.n	8009af2 <f_lseek+0x40a>
					fp->clust = clst;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a0c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d8c0      	bhi.n	8009998 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	699a      	ldr	r2, [r3, #24]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	441a      	add	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d012      	beq.n	8009a52 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fd ff2b 	bl	800788c <clust2sect>
 8009a36:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d104      	bne.n	8009a48 <f_lseek+0x360>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2202      	movs	r2, #2
 8009a42:	755a      	strb	r2, [r3, #21]
 8009a44:	2302      	movs	r3, #2
 8009a46:	e054      	b.n	8009af2 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	0a5b      	lsrs	r3, r3, #9
 8009a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a4e:	4413      	add	r3, r2
 8009a50:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	699a      	ldr	r2, [r3, #24]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d90a      	bls.n	8009a74 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	699a      	ldr	r2, [r3, #24]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	7d1b      	ldrb	r3, [r3, #20]
 8009a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d036      	beq.n	8009aee <f_lseek+0x406>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d031      	beq.n	8009aee <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	7d1b      	ldrb	r3, [r3, #20]
 8009a8e:	b25b      	sxtb	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da18      	bge.n	8009ac6 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	7858      	ldrb	r0, [r3, #1]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1a      	ldr	r2, [r3, #32]
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f7fd fb68 	bl	8007178 <disk_write>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d004      	beq.n	8009ab8 <f_lseek+0x3d0>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	755a      	strb	r2, [r3, #21]
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e01c      	b.n	8009af2 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	7d1b      	ldrb	r3, [r3, #20]
 8009abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	7858      	ldrb	r0, [r3, #1]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ad4:	f7fd fb30 	bl	8007138 <disk_read>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d004      	beq.n	8009ae8 <f_lseek+0x400>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	755a      	strb	r2, [r3, #21]
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e004      	b.n	8009af2 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aec:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009aee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3740      	adds	r7, #64	; 0x40
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b092      	sub	sp, #72	; 0x48
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	60f8      	str	r0, [r7, #12]
 8009b02:	60b9      	str	r1, [r7, #8]
 8009b04:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009b06:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009b0a:	f107 030c 	add.w	r3, r7, #12
 8009b0e:	2200      	movs	r2, #0
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fe fe07 	bl	8008724 <find_volume>
 8009b16:	4603      	mov	r3, r0
 8009b18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009b1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f040 8099 	bne.w	8009c58 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	691a      	ldr	r2, [r3, #16]
 8009b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	3b02      	subs	r3, #2
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d804      	bhi.n	8009b44 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3c:	691a      	ldr	r2, [r3, #16]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	e089      	b.n	8009c58 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009b44:	2300      	movs	r3, #0
 8009b46:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d128      	bne.n	8009ba2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009b50:	2302      	movs	r3, #2
 8009b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b56:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009b58:	f107 0314 	add.w	r3, r7, #20
 8009b5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fd feb3 	bl	80078ca <get_fat>
 8009b64:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6c:	d103      	bne.n	8009b76 <f_getfree+0x7c>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009b74:	e063      	b.n	8009c3e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d103      	bne.n	8009b84 <f_getfree+0x8a>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009b82:	e05c      	b.n	8009c3e <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d102      	bne.n	8009b90 <f_getfree+0x96>
 8009b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b92:	3301      	adds	r3, #1
 8009b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b98:	695b      	ldr	r3, [r3, #20]
 8009b9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d3db      	bcc.n	8009b58 <f_getfree+0x5e>
 8009ba0:	e04d      	b.n	8009c3e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d113      	bne.n	8009be4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc0:	1c5a      	adds	r2, r3, #1
 8009bc2:	63ba      	str	r2, [r7, #56]	; 0x38
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	f7fd fdc5 	bl	8007754 <move_window>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009bd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d131      	bne.n	8009c3c <f_getfree+0x142>
							p = fs->win;
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	3330      	adds	r3, #48	; 0x30
 8009bdc:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009be2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d10f      	bne.n	8009c0c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bee:	f7fd fb01 	bl	80071f4 <ld_word>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d102      	bne.n	8009bfe <f_getfree+0x104>
 8009bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	3302      	adds	r3, #2
 8009c02:	633b      	str	r3, [r7, #48]	; 0x30
 8009c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c06:	3b02      	subs	r3, #2
 8009c08:	637b      	str	r3, [r7, #52]	; 0x34
 8009c0a:	e010      	b.n	8009c2e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c0e:	f7fd fb09 	bl	8007224 <ld_dword>
 8009c12:	4603      	mov	r3, r0
 8009c14:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <f_getfree+0x128>
 8009c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c1e:	3301      	adds	r3, #1
 8009c20:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c24:	3304      	adds	r3, #4
 8009c26:	633b      	str	r3, [r7, #48]	; 0x30
 8009c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2a:	3b04      	subs	r3, #4
 8009c2c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c30:	3b01      	subs	r3, #1
 8009c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1bd      	bne.n	8009bb6 <f_getfree+0xbc>
 8009c3a:	e000      	b.n	8009c3e <f_getfree+0x144>
							if (res != FR_OK) break;
 8009c3c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c42:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c48:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4c:	791a      	ldrb	r2, [r3, #4]
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	f042 0201 	orr.w	r2, r2, #1
 8009c54:	b2d2      	uxtb	r2, r2
 8009c56:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009c58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3748      	adds	r7, #72	; 0x48
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b09e      	sub	sp, #120	; 0x78
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009c70:	f107 010c 	add.w	r1, r7, #12
 8009c74:	1d3b      	adds	r3, r7, #4
 8009c76:	2202      	movs	r2, #2
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fe fd53 	bl	8008724 <find_volume>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8009c88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f040 808e 	bne.w	8009dae <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c98:	4611      	mov	r1, r2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fc36 	bl	800850c <follow_path>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8009ca6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d108      	bne.n	8009cc0 <f_unlink+0x5c>
 8009cae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009cb2:	2102      	movs	r1, #2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fd fb9d 	bl	80073f4 <chk_lock>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009cc0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d172      	bne.n	8009dae <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009cc8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009ccc:	b25b      	sxtb	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	da03      	bge.n	8009cda <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009cd2:	2306      	movs	r3, #6
 8009cd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009cd8:	e008      	b.n	8009cec <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8009cda:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009ce6:	2307      	movs	r3, #7
 8009ce8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8009cec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d134      	bne.n	8009d5e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe fa31 	bl	8008162 <ld_clust>
 8009d00:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009d02:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009d06:	f003 0310 	and.w	r3, r3, #16
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d027      	beq.n	8009d5e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8009d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d14:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009d16:	f107 0310 	add.w	r3, r7, #16
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe f899 	bl	8007e54 <dir_sdi>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8009d28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d116      	bne.n	8009d5e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009d30:	f107 0310 	add.w	r3, r7, #16
 8009d34:	2100      	movs	r1, #0
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fa52 	bl	80081e0 <dir_read>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8009d42:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d102      	bne.n	8009d50 <f_unlink+0xec>
 8009d4a:	2307      	movs	r3, #7
 8009d4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009d50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009d54:	2b04      	cmp	r3, #4
 8009d56:	d102      	bne.n	8009d5e <f_unlink+0xfa>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8009d5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d123      	bne.n	8009dae <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8009d66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fe fb1c 	bl	80083a8 <dir_remove>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8009d76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10c      	bne.n	8009d98 <f_unlink+0x134>
 8009d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d009      	beq.n	8009d98 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8009d84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d88:	2200      	movs	r2, #0
 8009d8a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fd ff30 	bl	8007bf2 <remove_chain>
 8009d92:	4603      	mov	r3, r0
 8009d94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8009d98:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d106      	bne.n	8009dae <f_unlink+0x14a>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fd fd04 	bl	80077b0 <sync_fs>
 8009da8:	4603      	mov	r3, r0
 8009daa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009dae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3778      	adds	r7, #120	; 0x78
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b088      	sub	sp, #32
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	60f8      	str	r0, [r7, #12]
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009dce:	e01b      	b.n	8009e08 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009dd0:	f107 0310 	add.w	r3, r7, #16
 8009dd4:	f107 0114 	add.w	r1, r7, #20
 8009dd8:	2201      	movs	r2, #1
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7ff f928 	bl	8009030 <f_read>
		if (rc != 1) break;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d116      	bne.n	8009e14 <f_gets+0x5a>
		c = s[0];
 8009de6:	7d3b      	ldrb	r3, [r7, #20]
 8009de8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	2b0d      	cmp	r3, #13
 8009dee:	d100      	bne.n	8009df2 <f_gets+0x38>
 8009df0:	e00a      	b.n	8009e08 <f_gets+0x4e>
		*p++ = c;
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	1c5a      	adds	r2, r3, #1
 8009df6:	61ba      	str	r2, [r7, #24]
 8009df8:	7dfa      	ldrb	r2, [r7, #23]
 8009dfa:	701a      	strb	r2, [r3, #0]
		n++;
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
 8009e04:	2b0a      	cmp	r3, #10
 8009e06:	d007      	beq.n	8009e18 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	69fa      	ldr	r2, [r7, #28]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	dbde      	blt.n	8009dd0 <f_gets+0x16>
 8009e12:	e002      	b.n	8009e1a <f_gets+0x60>
		if (rc != 1) break;
 8009e14:	bf00      	nop
 8009e16:	e000      	b.n	8009e1a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8009e18:	bf00      	nop
	}
	*p = 0;
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d001      	beq.n	8009e2a <f_gets+0x70>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	e000      	b.n	8009e2c <f_gets+0x72>
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3720      	adds	r7, #32
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	2b0a      	cmp	r3, #10
 8009e44:	d103      	bne.n	8009e4e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009e46:	210d      	movs	r1, #13
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7ff fff3 	bl	8009e34 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	db25      	blt.n	8009ea6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	60fa      	str	r2, [r7, #12]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	4413      	add	r3, r2
 8009e64:	78fa      	ldrb	r2, [r7, #3]
 8009e66:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b3c      	cmp	r3, #60	; 0x3c
 8009e6c:	dd12      	ble.n	8009e94 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6818      	ldr	r0, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f103 010c 	add.w	r1, r3, #12
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	f107 0308 	add.w	r3, r7, #8
 8009e7e:	f7ff fa16 	bl	80092ae <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d101      	bne.n	8009e8e <putc_bfd+0x5a>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e001      	b.n	8009e92 <putc_bfd+0x5e>
 8009e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e92:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	609a      	str	r2, [r3, #8]
 8009ea4:	e000      	b.n	8009ea8 <putc_bfd+0x74>
	if (i < 0) return;
 8009ea6:	bf00      	nop
}
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	db16      	blt.n	8009eec <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6818      	ldr	r0, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f103 010c 	add.w	r1, r3, #12
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	f107 030c 	add.w	r3, r7, #12
 8009ed2:	f7ff f9ec 	bl	80092ae <f_write>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d107      	bne.n	8009eec <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d102      	bne.n	8009eec <putc_flush+0x3e>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	e001      	b.n	8009ef0 <putc_flush+0x42>
	return EOF;
 8009eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	605a      	str	r2, [r3, #4]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	609a      	str	r2, [r3, #8]
}
 8009f16:	bf00      	nop
 8009f18:	370c      	adds	r7, #12
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b096      	sub	sp, #88	; 0x58
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009f2c:	f107 030c 	add.w	r3, r7, #12
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7ff ffe0 	bl	8009ef8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009f38:	e009      	b.n	8009f4e <f_puts+0x2c>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	1c5a      	adds	r2, r3, #1
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	781a      	ldrb	r2, [r3, #0]
 8009f42:	f107 030c 	add.w	r3, r7, #12
 8009f46:	4611      	mov	r1, r2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7ff ff73 	bl	8009e34 <putc_bfd>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1f1      	bne.n	8009f3a <f_puts+0x18>
	return putc_flush(&pb);
 8009f56:	f107 030c 	add.w	r3, r7, #12
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff ffa7 	bl	8009eae <putc_flush>
 8009f60:	4603      	mov	r3, r0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3758      	adds	r7, #88	; 0x58
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
	...

08009f6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	4613      	mov	r3, r2
 8009f78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009f82:	4b1f      	ldr	r3, [pc, #124]	; (800a000 <FATFS_LinkDriverEx+0x94>)
 8009f84:	7a5b      	ldrb	r3, [r3, #9]
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d131      	bne.n	8009ff0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f8c:	4b1c      	ldr	r3, [pc, #112]	; (800a000 <FATFS_LinkDriverEx+0x94>)
 8009f8e:	7a5b      	ldrb	r3, [r3, #9]
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	461a      	mov	r2, r3
 8009f94:	4b1a      	ldr	r3, [pc, #104]	; (800a000 <FATFS_LinkDriverEx+0x94>)
 8009f96:	2100      	movs	r1, #0
 8009f98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009f9a:	4b19      	ldr	r3, [pc, #100]	; (800a000 <FATFS_LinkDriverEx+0x94>)
 8009f9c:	7a5b      	ldrb	r3, [r3, #9]
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	4a17      	ldr	r2, [pc, #92]	; (800a000 <FATFS_LinkDriverEx+0x94>)
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009faa:	4b15      	ldr	r3, [pc, #84]	; (800a000 <FATFS_LinkDriverEx+0x94>)
 8009fac:	7a5b      	ldrb	r3, [r3, #9]
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	4b13      	ldr	r3, [pc, #76]	; (800a000 <FATFS_LinkDriverEx+0x94>)
 8009fb4:	4413      	add	r3, r2
 8009fb6:	79fa      	ldrb	r2, [r7, #7]
 8009fb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009fba:	4b11      	ldr	r3, [pc, #68]	; (800a000 <FATFS_LinkDriverEx+0x94>)
 8009fbc:	7a5b      	ldrb	r3, [r3, #9]
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	1c5a      	adds	r2, r3, #1
 8009fc2:	b2d1      	uxtb	r1, r2
 8009fc4:	4a0e      	ldr	r2, [pc, #56]	; (800a000 <FATFS_LinkDriverEx+0x94>)
 8009fc6:	7251      	strb	r1, [r2, #9]
 8009fc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009fca:	7dbb      	ldrb	r3, [r7, #22]
 8009fcc:	3330      	adds	r3, #48	; 0x30
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	223a      	movs	r2, #58	; 0x3a
 8009fda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	3302      	adds	r3, #2
 8009fe0:	222f      	movs	r2, #47	; 0x2f
 8009fe2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	3303      	adds	r3, #3
 8009fe8:	2200      	movs	r2, #0
 8009fea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	371c      	adds	r7, #28
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	2000a0f8 	.word	0x2000a0f8

0800a004 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a00e:	2200      	movs	r2, #0
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff ffaa 	bl	8009f6c <FATFS_LinkDriverEx>
 800a018:	4603      	mov	r3, r0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 800a022:	b480      	push	{r7}
 800a024:	b083      	sub	sp, #12
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	881a      	ldrh	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	799b      	ldrb	r3, [r3, #6]
 800a034:	08db      	lsrs	r3, r3, #3
 800a036:	b2db      	uxtb	r3, r3
 800a038:	b29b      	uxth	r3, r3
 800a03a:	fb12 f303 	smulbb	r3, r2, r3
 800a03e:	b29a      	uxth	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	889b      	ldrh	r3, [r3, #4]
 800a048:	461a      	mov	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	885b      	ldrh	r3, [r3, #2]
 800a04e:	fb03 f302 	mul.w	r3, r3, r2
 800a052:	461a      	mov	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	60da      	str	r2, [r3, #12]
}
 800a05e:	bf00      	nop
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 800a06a:	b490      	push	{r4, r7}
 800a06c:	b086      	sub	sp, #24
 800a06e:	af00      	add	r7, sp, #0
 800a070:	4604      	mov	r4, r0
 800a072:	4608      	mov	r0, r1
 800a074:	1d39      	adds	r1, r7, #4
 800a076:	e881 000c 	stmia.w	r1, {r2, r3}
 800a07a:	4623      	mov	r3, r4
 800a07c:	81fb      	strh	r3, [r7, #14]
 800a07e:	4603      	mov	r3, r0
 800a080:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 800a082:	2300      	movs	r3, #0
 800a084:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 800a086:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a08a:	88ba      	ldrh	r2, [r7, #4]
 800a08c:	4293      	cmp	r3, r2
 800a08e:	da04      	bge.n	800a09a <code+0x30>
        code |= LEFT;
 800a090:	2201      	movs	r2, #1
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	4313      	orrs	r3, r2
 800a096:	75fb      	strb	r3, [r7, #23]
 800a098:	e008      	b.n	800a0ac <code+0x42>
    } else if (x0 > window.x1) {
 800a09a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a09e:	893a      	ldrh	r2, [r7, #8]
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	dd03      	ble.n	800a0ac <code+0x42>
        code |= RIGHT;
 800a0a4:	2202      	movs	r2, #2
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 800a0ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a0b0:	88fa      	ldrh	r2, [r7, #6]
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	da04      	bge.n	800a0c0 <code+0x56>
        code |= BOTTOM;
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	75fb      	strb	r3, [r7, #23]
 800a0be:	e008      	b.n	800a0d2 <code+0x68>
    } else if (y0 > window.y1) {
 800a0c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a0c4:	897a      	ldrh	r2, [r7, #10]
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	dd03      	ble.n	800a0d2 <code+0x68>
        code |= TOP;
 800a0ca:	2208      	movs	r2, #8
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bc90      	pop	{r4, r7}
 800a0dc:	4770      	bx	lr

0800a0de <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b088      	sub	sp, #32
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	60f8      	str	r0, [r7, #12]
 800a0e6:	60b9      	str	r1, [r7, #8]
 800a0e8:	607a      	str	r2, [r7, #4]
 800a0ea:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f9b3 0000 	ldrsh.w	r0, [r3]
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a0f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0fc:	cb0c      	ldmia	r3, {r2, r3}
 800a0fe:	f7ff ffb4 	bl	800a06a <code>
 800a102:	4603      	mov	r3, r0
 800a104:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f9b3 0000 	ldrsh.w	r0, [r3]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a116:	cb0c      	ldmia	r3, {r2, r3}
 800a118:	f7ff ffa7 	bl	800a06a <code>
 800a11c:	4603      	mov	r3, r0
 800a11e:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 800a120:	2300      	movs	r3, #0
 800a122:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 800a124:	7ffa      	ldrb	r2, [r7, #31]
 800a126:	7fbb      	ldrb	r3, [r7, #30]
 800a128:	4313      	orrs	r3, r2
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d102      	bne.n	800a136 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 800a130:	2301      	movs	r3, #1
 800a132:	777b      	strb	r3, [r7, #29]
            break;
 800a134:	e0e9      	b.n	800a30a <clip_line+0x22c>
        } else if (code0 & code1) {
 800a136:	7ffa      	ldrb	r2, [r7, #31]
 800a138:	7fbb      	ldrb	r3, [r7, #30]
 800a13a:	4013      	ands	r3, r2
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f040 80e2 	bne.w	800a308 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 800a14c:	7ffb      	ldrb	r3, [r7, #31]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <clip_line+0x78>
 800a152:	7ffb      	ldrb	r3, [r7, #31]
 800a154:	e000      	b.n	800a158 <clip_line+0x7a>
 800a156:	7fbb      	ldrb	r3, [r7, #30]
 800a158:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 800a15a:	2208      	movs	r2, #8
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	4013      	ands	r3, r2
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d024      	beq.n	800a1b0 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a174:	4619      	mov	r1, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a17c:	1acb      	subs	r3, r1, r3
 800a17e:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800a180:	4608      	mov	r0, r1
 800a182:	68b9      	ldr	r1, [r7, #8]
 800a184:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a188:	1a41      	subs	r1, r0, r1
 800a18a:	fb01 f103 	mul.w	r1, r1, r3
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a194:	4618      	mov	r0, r3
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a19c:	1ac3      	subs	r3, r0, r3
 800a19e:	fb91 f3f3 	sdiv	r3, r1, r3
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 800a1aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a1ac:	833b      	strh	r3, [r7, #24]
 800a1ae:	e07f      	b.n	800a2b0 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 800a1b0:	2204      	movs	r2, #4
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d024      	beq.n	800a206 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1d2:	1acb      	subs	r3, r1, r3
 800a1d4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800a1d6:	4608      	mov	r0, r1
 800a1d8:	68b9      	ldr	r1, [r7, #8]
 800a1da:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a1de:	1a41      	subs	r1, r0, r1
 800a1e0:	fb01 f103 	mul.w	r1, r1, r3
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1f2:	1ac3      	subs	r3, r0, r3
 800a1f4:	fb91 f3f3 	sdiv	r3, r1, r3
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	4413      	add	r3, r2
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 800a200:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a202:	833b      	strh	r3, [r7, #24]
 800a204:	e054      	b.n	800a2b0 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 800a206:	2202      	movs	r2, #2
 800a208:	7dfb      	ldrb	r3, [r7, #23]
 800a20a:	4013      	ands	r3, r2
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d024      	beq.n	800a25c <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a218:	b29a      	uxth	r2, r3
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a220:	4619      	mov	r1, r3
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a228:	1acb      	subs	r3, r1, r3
 800a22a:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800a22c:	4608      	mov	r0, r1
 800a22e:	68f9      	ldr	r1, [r7, #12]
 800a230:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a234:	1a41      	subs	r1, r0, r1
 800a236:	fb01 f103 	mul.w	r1, r1, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a240:	4618      	mov	r0, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a248:	1ac3      	subs	r3, r0, r3
 800a24a:	fb91 f3f3 	sdiv	r3, r1, r3
 800a24e:	b29b      	uxth	r3, r3
 800a250:	4413      	add	r3, r2
 800a252:	b29b      	uxth	r3, r3
 800a254:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 800a256:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a258:	837b      	strh	r3, [r7, #26]
 800a25a:	e029      	b.n	800a2b0 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 800a25c:	2201      	movs	r2, #1
 800a25e:	7dfb      	ldrb	r3, [r7, #23]
 800a260:	4013      	ands	r3, r2
 800a262:	b2db      	uxtb	r3, r3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d023      	beq.n	800a2b0 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a26e:	b29a      	uxth	r2, r3
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a276:	4619      	mov	r1, r3
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a27e:	1acb      	subs	r3, r1, r3
 800a280:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800a282:	4608      	mov	r0, r1
 800a284:	68f9      	ldr	r1, [r7, #12]
 800a286:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a28a:	1a41      	subs	r1, r0, r1
 800a28c:	fb01 f103 	mul.w	r1, r1, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a296:	4618      	mov	r0, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a29e:	1ac3      	subs	r3, r0, r3
 800a2a0:	fb91 f3f3 	sdiv	r3, r1, r3
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	4413      	add	r3, r2
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 800a2ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a2ae:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 800a2b0:	7dfa      	ldrb	r2, [r7, #23]
 800a2b2:	7ffb      	ldrb	r3, [r7, #31]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d113      	bne.n	800a2e0 <clip_line+0x202>
                *x0 = x;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8b7a      	ldrh	r2, [r7, #26]
 800a2bc:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	8b3a      	ldrh	r2, [r7, #24]
 800a2c2:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f9b3 0000 	ldrsh.w	r0, [r3]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a2d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2d4:	cb0c      	ldmia	r3, {r2, r3}
 800a2d6:	f7ff fec8 	bl	800a06a <code>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	77fb      	strb	r3, [r7, #31]
 800a2de:	e721      	b.n	800a124 <clip_line+0x46>
            } else {
                *x1 = x;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	8b7a      	ldrh	r2, [r7, #26]
 800a2e4:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	8b3a      	ldrh	r2, [r7, #24]
 800a2ea:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f9b3 0000 	ldrsh.w	r0, [r3]
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a2f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2fc:	cb0c      	ldmia	r3, {r2, r3}
 800a2fe:	f7ff feb4 	bl	800a06a <code>
 800a302:	4603      	mov	r3, r0
 800a304:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 800a306:	e70d      	b.n	800a124 <clip_line+0x46>
            break;
 800a308:	bf00      	nop
            }
        }
    }

    return accept;
 800a30a:	7f7b      	ldrb	r3, [r7, #29]
 800a30c:	4618      	mov	r0, r3
 800a30e:	3720      	adds	r7, #32
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	3306      	adds	r3, #6
 800a324:	2208      	movs	r2, #8
 800a326:	4619      	mov	r1, r3
 800a328:	f001 f934 	bl	800b594 <memcpy>
    meta->width = font[FONTX_WIDTH];
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	7b9a      	ldrb	r2, [r3, #14]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	7bda      	ldrb	r2, [r3, #15]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	7c1a      	ldrb	r2, [r3, #16]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	72da      	strb	r2, [r3, #11]

    return 0;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800a34e:	b580      	push	{r7, lr}
 800a350:	b08e      	sub	sp, #56	; 0x38
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800a35a:	f107 0314 	add.w	r3, r7, #20
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	4618      	mov	r0, r3
 800a362:	f7ff ffd7 	bl	800a314 <fontx_meta>
 800a366:	4603      	mov	r3, r0
 800a368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 800a36c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <fontx_glyph+0x2c>
        return status;
 800a374:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a378:	e077      	b.n	800a46a <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 800a37a:	7f7a      	ldrb	r2, [r7, #29]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 800a380:	7fba      	ldrb	r2, [r7, #30]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 800a386:	7f7b      	ldrb	r3, [r7, #29]
 800a388:	3307      	adds	r3, #7
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	da00      	bge.n	800a390 <fontx_glyph+0x42>
 800a38e:	3307      	adds	r3, #7
 800a390:	10db      	asrs	r3, r3, #3
 800a392:	b2da      	uxtb	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	78da      	ldrb	r2, [r3, #3]
 800a39c:	7fbb      	ldrb	r3, [r7, #30]
 800a39e:	fb12 f303 	smulbb	r3, r2, r3
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 800a3a8:	7ffb      	ldrb	r3, [r7, #31]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10f      	bne.n	800a3ce <fontx_glyph+0x80>
        if (code < 0x100) {
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2bff      	cmp	r3, #255	; 0xff
 800a3b2:	d859      	bhi.n	800a468 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	789b      	ldrb	r3, [r3, #2]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	fb03 f302 	mul.w	r3, r3, r2
 800a3c0:	3311      	adds	r3, #17
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	441a      	add	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	e04d      	b.n	800a46a <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3312      	adds	r3, #18
 800a3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3311      	adds	r3, #17
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 800a3e0:	e03d      	b.n	800a45e <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 800a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	021b      	lsls	r3, r3, #8
 800a3f0:	4413      	add	r3, r2
 800a3f2:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 800a3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f6:	3302      	adds	r3, #2
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fe:	3303      	adds	r3, #3
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	4413      	add	r3, r2
 800a406:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d31c      	bcc.n	800a44a <fontx_glyph+0xfc>
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	429a      	cmp	r2, r3
 800a416:	d818      	bhi.n	800a44a <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a420:	4413      	add	r3, r2
 800a422:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	3311      	adds	r3, #17
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	461a      	mov	r2, r3
                    nc * glyph->size
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	789b      	ldrb	r3, [r3, #2]
 800a432:	4619      	mov	r1, r3
 800a434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a436:	fb03 f301 	mul.w	r3, r3, r1
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800a43a:	4413      	add	r3, r2
 800a43c:	3312      	adds	r3, #18
                glyph->buffer = &font[
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	441a      	add	r2, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 800a446:	2300      	movs	r3, #0
 800a448:	e00f      	b.n	800a46a <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 800a44a:	6a3a      	ldr	r2, [r7, #32]
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	1ad2      	subs	r2, r2, r3
 800a450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a452:	4413      	add	r3, r2
 800a454:	3301      	adds	r3, #1
 800a456:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 800a458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45a:	3304      	adds	r3, #4
 800a45c:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	1e5a      	subs	r2, r3, #1
 800a462:	633a      	str	r2, [r7, #48]	; 0x30
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1bc      	bne.n	800a3e2 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 800a468:	2301      	movs	r3, #1
 800a46a:	4618      	mov	r0, r3
 800a46c:	3738      	adds	r7, #56	; 0x38
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 800a472:	b480      	push	{r7}
 800a474:	b083      	sub	sp, #12
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	429a      	cmp	r2, r3
 800a482:	dd01      	ble.n	800a488 <min+0x16>
        return b;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	e000      	b.n	800a48a <min+0x18>
    };
    return a;
 800a488:	687b      	ldr	r3, [r7, #4]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <max>:

static inline int max(int a, int b) {
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	dd01      	ble.n	800a4ac <max+0x16>
        return a;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	e000      	b.n	800a4ae <max+0x18>
    }
    return b;
 800a4ac:	683b      	ldr	r3, [r7, #0]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
	...

0800a4bc <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800a4bc:	b490      	push	{r4, r7}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	4608      	mov	r0, r1
 800a4c6:	4611      	mov	r1, r2
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	4623      	mov	r3, r4
 800a4cc:	80fb      	strh	r3, [r7, #6]
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	80bb      	strh	r3, [r7, #4]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	807b      	strh	r3, [r7, #2]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 800a4da:	4a08      	ldr	r2, [pc, #32]	; (800a4fc <hagl_set_clip_window+0x40>)
 800a4dc:	88fb      	ldrh	r3, [r7, #6]
 800a4de:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 800a4e0:	4a06      	ldr	r2, [pc, #24]	; (800a4fc <hagl_set_clip_window+0x40>)
 800a4e2:	88bb      	ldrh	r3, [r7, #4]
 800a4e4:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 800a4e6:	4a05      	ldr	r2, [pc, #20]	; (800a4fc <hagl_set_clip_window+0x40>)
 800a4e8:	887b      	ldrh	r3, [r7, #2]
 800a4ea:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 800a4ec:	4a03      	ldr	r2, [pc, #12]	; (800a4fc <hagl_set_clip_window+0x40>)
 800a4ee:	883b      	ldrh	r3, [r7, #0]
 800a4f0:	80d3      	strh	r3, [r2, #6]
}
 800a4f2:	bf00      	nop
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bc90      	pop	{r4, r7}
 800a4fa:	4770      	bx	lr
 800a4fc:	20000028 	.word	0x20000028

0800a500 <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	4603      	mov	r3, r0
 800a508:	80fb      	strh	r3, [r7, #6]
 800a50a:	460b      	mov	r3, r1
 800a50c:	80bb      	strh	r3, [r7, #4]
 800a50e:	4613      	mov	r3, r2
 800a510:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800a512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a516:	4a12      	ldr	r2, [pc, #72]	; (800a560 <hagl_put_pixel+0x60>)
 800a518:	8812      	ldrh	r2, [r2, #0]
 800a51a:	4293      	cmp	r3, r2
 800a51c:	db1a      	blt.n	800a554 <hagl_put_pixel+0x54>
 800a51e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a522:	4a0f      	ldr	r2, [pc, #60]	; (800a560 <hagl_put_pixel+0x60>)
 800a524:	8852      	ldrh	r2, [r2, #2]
 800a526:	4293      	cmp	r3, r2
 800a528:	db14      	blt.n	800a554 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a52a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a52e:	4a0c      	ldr	r2, [pc, #48]	; (800a560 <hagl_put_pixel+0x60>)
 800a530:	8892      	ldrh	r2, [r2, #4]
 800a532:	4293      	cmp	r3, r2
 800a534:	dc10      	bgt.n	800a558 <hagl_put_pixel+0x58>
 800a536:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a53a:	4a09      	ldr	r2, [pc, #36]	; (800a560 <hagl_put_pixel+0x60>)
 800a53c:	88d2      	ldrh	r2, [r2, #6]
 800a53e:	4293      	cmp	r3, r2
 800a540:	dc0a      	bgt.n	800a558 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 800a542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a546:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a54a:	887a      	ldrh	r2, [r7, #2]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7f7 fc45 	bl	8001ddc <lcd_put_pixel>
 800a552:	e002      	b.n	800a55a <hagl_put_pixel+0x5a>
        return;
 800a554:	bf00      	nop
 800a556:	e000      	b.n	800a55a <hagl_put_pixel+0x5a>
        return;
 800a558:	bf00      	nop
}
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20000028 	.word	0x20000028

0800a564 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 800a564:	b590      	push	{r4, r7, lr}
 800a566:	b085      	sub	sp, #20
 800a568:	af02      	add	r7, sp, #8
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	4611      	mov	r1, r2
 800a570:	461a      	mov	r2, r3
 800a572:	4623      	mov	r3, r4
 800a574:	80fb      	strh	r3, [r7, #6]
 800a576:	4603      	mov	r3, r0
 800a578:	80bb      	strh	r3, [r7, #4]
 800a57a:	460b      	mov	r3, r1
 800a57c:	807b      	strh	r3, [r7, #2]
 800a57e:	4613      	mov	r3, r2
 800a580:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800a582:	88fa      	ldrh	r2, [r7, #6]
 800a584:	887b      	ldrh	r3, [r7, #2]
 800a586:	4413      	add	r3, r2
 800a588:	b29b      	uxth	r3, r3
 800a58a:	b21a      	sxth	r2, r3
 800a58c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800a590:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a594:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a598:	883b      	ldrh	r3, [r7, #0]
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	4623      	mov	r3, r4
 800a59e:	f000 f827 	bl	800a5f0 <hagl_draw_line>
#endif
}
 800a5a2:	bf00      	nop
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd90      	pop	{r4, r7, pc}

0800a5aa <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 800a5aa:	b590      	push	{r4, r7, lr}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af02      	add	r7, sp, #8
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	4608      	mov	r0, r1
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	4623      	mov	r3, r4
 800a5ba:	80fb      	strh	r3, [r7, #6]
 800a5bc:	4603      	mov	r3, r0
 800a5be:	80bb      	strh	r3, [r7, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	807b      	strh	r3, [r7, #2]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 800a5c8:	88ba      	ldrh	r2, [r7, #4]
 800a5ca:	887b      	ldrh	r3, [r7, #2]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	b21c      	sxth	r4, r3
 800a5d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a5d6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a5da:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a5de:	883b      	ldrh	r3, [r7, #0]
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	4623      	mov	r3, r4
 800a5e4:	f000 f804 	bl	800a5f0 <hagl_draw_line>
#endif
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd90      	pop	{r4, r7, pc}

0800a5f0 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800a5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5f2:	b089      	sub	sp, #36	; 0x24
 800a5f4:	af02      	add	r7, sp, #8
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	4623      	mov	r3, r4
 800a600:	80fb      	strh	r3, [r7, #6]
 800a602:	4603      	mov	r3, r0
 800a604:	80bb      	strh	r3, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	807b      	strh	r3, [r7, #2]
 800a60a:	4613      	mov	r3, r2
 800a60c:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 800a60e:	463b      	mov	r3, r7
 800a610:	1cba      	adds	r2, r7, #2
 800a612:	1d3d      	adds	r5, r7, #4
 800a614:	1dbc      	adds	r4, r7, #6
 800a616:	494a      	ldr	r1, [pc, #296]	; (800a740 <hagl_draw_line+0x150>)
 800a618:	466e      	mov	r6, sp
 800a61a:	c903      	ldmia	r1, {r0, r1}
 800a61c:	e886 0003 	stmia.w	r6, {r0, r1}
 800a620:	4629      	mov	r1, r5
 800a622:	4620      	mov	r0, r4
 800a624:	f7ff fd5b 	bl	800a0de <clip_line>
 800a628:	4603      	mov	r3, r0
 800a62a:	f083 0301 	eor.w	r3, r3, #1
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	d17e      	bne.n	800a732 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 800a634:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a638:	461a      	mov	r2, r3
 800a63a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	bfb8      	it	lt
 800a644:	425b      	neglt	r3, r3
 800a646:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 800a648:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a64c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a650:	429a      	cmp	r2, r3
 800a652:	da01      	bge.n	800a658 <hagl_draw_line+0x68>
 800a654:	2301      	movs	r3, #1
 800a656:	e001      	b.n	800a65c <hagl_draw_line+0x6c>
 800a658:	f04f 33ff 	mov.w	r3, #4294967295
 800a65c:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 800a65e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a662:	461a      	mov	r2, r3
 800a664:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	bfb8      	it	lt
 800a66e:	425b      	neglt	r3, r3
 800a670:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800a672:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a676:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	da01      	bge.n	800a682 <hagl_draw_line+0x92>
 800a67e:	2301      	movs	r3, #1
 800a680:	e001      	b.n	800a686 <hagl_draw_line+0x96>
 800a682:	f04f 33ff 	mov.w	r3, #4294967295
 800a686:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 800a688:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a68c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a690:	429a      	cmp	r2, r3
 800a692:	dd06      	ble.n	800a6a2 <hagl_draw_line+0xb2>
 800a694:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a698:	0fda      	lsrs	r2, r3, #31
 800a69a:	4413      	add	r3, r2
 800a69c:	105b      	asrs	r3, r3, #1
 800a69e:	b21b      	sxth	r3, r3
 800a6a0:	e006      	b.n	800a6b0 <hagl_draw_line+0xc0>
 800a6a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a6a6:	0fda      	lsrs	r2, r3, #31
 800a6a8:	4413      	add	r3, r2
 800a6aa:	105b      	asrs	r3, r3, #1
 800a6ac:	425b      	negs	r3, r3
 800a6ae:	b21b      	sxth	r3, r3
 800a6b0:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 800a6b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a6ba:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff ff1f 	bl	800a500 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 800a6c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a6c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d105      	bne.n	800a6da <hagl_draw_line+0xea>
 800a6ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a6d2:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d02d      	beq.n	800a736 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 800a6da:	8afb      	ldrh	r3, [r7, #22]
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 800a6e2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a6e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a6ea:	425b      	negs	r3, r3
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	dd0c      	ble.n	800a70a <hagl_draw_line+0x11a>
            err -= dy;
 800a6f0:	8afa      	ldrh	r2, [r7, #22]
 800a6f2:	8a3b      	ldrh	r3, [r7, #16]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 800a6fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	8a7b      	ldrh	r3, [r7, #18]
 800a702:	4413      	add	r3, r2
 800a704:	b29b      	uxth	r3, r3
 800a706:	b21b      	sxth	r3, r3
 800a708:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 800a70a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a70e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a712:	429a      	cmp	r2, r3
 800a714:	dacd      	bge.n	800a6b2 <hagl_draw_line+0xc2>
            err += dx;
 800a716:	8afa      	ldrh	r2, [r7, #22]
 800a718:	8abb      	ldrh	r3, [r7, #20]
 800a71a:	4413      	add	r3, r2
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 800a720:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a724:	b29a      	uxth	r2, r3
 800a726:	89fb      	ldrh	r3, [r7, #14]
 800a728:	4413      	add	r3, r2
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	b21b      	sxth	r3, r3
 800a72e:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 800a730:	e7bf      	b.n	800a6b2 <hagl_draw_line+0xc2>
        return;
 800a732:	bf00      	nop
 800a734:	e000      	b.n	800a738 <hagl_draw_line+0x148>
            break;
 800a736:	bf00      	nop
        }
    }
}
 800a738:	371c      	adds	r7, #28
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a73e:	bf00      	nop
 800a740:	20000028 	.word	0x20000028

0800a744 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800a744:	b590      	push	{r4, r7, lr}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4604      	mov	r4, r0
 800a74c:	4608      	mov	r0, r1
 800a74e:	4611      	mov	r1, r2
 800a750:	461a      	mov	r2, r3
 800a752:	4623      	mov	r3, r4
 800a754:	80fb      	strh	r3, [r7, #6]
 800a756:	4603      	mov	r3, r0
 800a758:	80bb      	strh	r3, [r7, #4]
 800a75a:	460b      	mov	r3, r1
 800a75c:	807b      	strh	r3, [r7, #2]
 800a75e:	4613      	mov	r3, r2
 800a760:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800a762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a766:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	dd0e      	ble.n	800a78c <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 800a76e:	88fa      	ldrh	r2, [r7, #6]
 800a770:	887b      	ldrh	r3, [r7, #2]
 800a772:	4413      	add	r3, r2
 800a774:	b29b      	uxth	r3, r3
 800a776:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800a778:	88fa      	ldrh	r2, [r7, #6]
 800a77a:	887b      	ldrh	r3, [r7, #2]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	b29b      	uxth	r3, r3
 800a780:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800a782:	88fa      	ldrh	r2, [r7, #6]
 800a784:	887b      	ldrh	r3, [r7, #2]
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	b29b      	uxth	r3, r3
 800a78a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800a78c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a790:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a794:	429a      	cmp	r2, r3
 800a796:	dd0e      	ble.n	800a7b6 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 800a798:	88ba      	ldrh	r2, [r7, #4]
 800a79a:	883b      	ldrh	r3, [r7, #0]
 800a79c:	4413      	add	r3, r2
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800a7a2:	88ba      	ldrh	r2, [r7, #4]
 800a7a4:	883b      	ldrh	r3, [r7, #0]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800a7ac:	88ba      	ldrh	r2, [r7, #4]
 800a7ae:	883b      	ldrh	r3, [r7, #0]
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800a7b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a7ba:	4a24      	ldr	r2, [pc, #144]	; (800a84c <hagl_draw_rectangle+0x108>)
 800a7bc:	8812      	ldrh	r2, [r2, #0]
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	db3e      	blt.n	800a840 <hagl_draw_rectangle+0xfc>
 800a7c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a7c6:	4a21      	ldr	r2, [pc, #132]	; (800a84c <hagl_draw_rectangle+0x108>)
 800a7c8:	8852      	ldrh	r2, [r2, #2]
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	db38      	blt.n	800a840 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a7ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7d2:	4a1e      	ldr	r2, [pc, #120]	; (800a84c <hagl_draw_rectangle+0x108>)
 800a7d4:	8892      	ldrh	r2, [r2, #4]
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	dc34      	bgt.n	800a844 <hagl_draw_rectangle+0x100>
 800a7da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a7de:	4a1b      	ldr	r2, [pc, #108]	; (800a84c <hagl_draw_rectangle+0x108>)
 800a7e0:	88d2      	ldrh	r2, [r2, #6]
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	dc2e      	bgt.n	800a844 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 800a7e6:	887a      	ldrh	r2, [r7, #2]
 800a7e8:	88fb      	ldrh	r3, [r7, #6]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 800a7f2:	883a      	ldrh	r2, [r7, #0]
 800a7f4:	88bb      	ldrh	r3, [r7, #4]
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 800a7fe:	8c3b      	ldrh	r3, [r7, #32]
 800a800:	89fa      	ldrh	r2, [r7, #14]
 800a802:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a806:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a80a:	f7ff feab 	bl	800a564 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 800a80e:	8c3b      	ldrh	r3, [r7, #32]
 800a810:	89fa      	ldrh	r2, [r7, #14]
 800a812:	f9b7 1000 	ldrsh.w	r1, [r7]
 800a816:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a81a:	f7ff fea3 	bl	800a564 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 800a81e:	8c3b      	ldrh	r3, [r7, #32]
 800a820:	89ba      	ldrh	r2, [r7, #12]
 800a822:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a826:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a82a:	f7ff febe 	bl	800a5aa <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 800a82e:	8c3b      	ldrh	r3, [r7, #32]
 800a830:	89ba      	ldrh	r2, [r7, #12]
 800a832:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a836:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800a83a:	f7ff feb6 	bl	800a5aa <hagl_draw_vline>
 800a83e:	e002      	b.n	800a846 <hagl_draw_rectangle+0x102>
        return;
 800a840:	bf00      	nop
 800a842:	e000      	b.n	800a846 <hagl_draw_rectangle+0x102>
        return;
 800a844:	bf00      	nop
}
 800a846:	3714      	adds	r7, #20
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd90      	pop	{r4, r7, pc}
 800a84c:	20000028 	.word	0x20000028

0800a850 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800a850:	b590      	push	{r4, r7, lr}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	4611      	mov	r1, r2
 800a85c:	461a      	mov	r2, r3
 800a85e:	4623      	mov	r3, r4
 800a860:	80fb      	strh	r3, [r7, #6]
 800a862:	4603      	mov	r3, r0
 800a864:	80bb      	strh	r3, [r7, #4]
 800a866:	460b      	mov	r3, r1
 800a868:	807b      	strh	r3, [r7, #2]
 800a86a:	4613      	mov	r3, r2
 800a86c:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800a86e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a872:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a876:	429a      	cmp	r2, r3
 800a878:	dd0e      	ble.n	800a898 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 800a87a:	88fa      	ldrh	r2, [r7, #6]
 800a87c:	887b      	ldrh	r3, [r7, #2]
 800a87e:	4413      	add	r3, r2
 800a880:	b29b      	uxth	r3, r3
 800a882:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800a884:	88fa      	ldrh	r2, [r7, #6]
 800a886:	887b      	ldrh	r3, [r7, #2]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800a88e:	88fa      	ldrh	r2, [r7, #6]
 800a890:	887b      	ldrh	r3, [r7, #2]
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	b29b      	uxth	r3, r3
 800a896:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800a898:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a89c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	dd0e      	ble.n	800a8c2 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 800a8a4:	88ba      	ldrh	r2, [r7, #4]
 800a8a6:	883b      	ldrh	r3, [r7, #0]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800a8ae:	88ba      	ldrh	r2, [r7, #4]
 800a8b0:	883b      	ldrh	r3, [r7, #0]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800a8b8:	88ba      	ldrh	r2, [r7, #4]
 800a8ba:	883b      	ldrh	r3, [r7, #0]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800a8c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8c6:	4a33      	ldr	r2, [pc, #204]	; (800a994 <hagl_fill_rectangle+0x144>)
 800a8c8:	8812      	ldrh	r2, [r2, #0]
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	db5b      	blt.n	800a986 <hagl_fill_rectangle+0x136>
 800a8ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a8d2:	4a30      	ldr	r2, [pc, #192]	; (800a994 <hagl_fill_rectangle+0x144>)
 800a8d4:	8852      	ldrh	r2, [r2, #2]
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	db55      	blt.n	800a986 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800a8da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8de:	4a2d      	ldr	r2, [pc, #180]	; (800a994 <hagl_fill_rectangle+0x144>)
 800a8e0:	8892      	ldrh	r2, [r2, #4]
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	dc51      	bgt.n	800a98a <hagl_fill_rectangle+0x13a>
 800a8e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a8ea:	4a2a      	ldr	r2, [pc, #168]	; (800a994 <hagl_fill_rectangle+0x144>)
 800a8ec:	88d2      	ldrh	r2, [r2, #6]
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	dc4b      	bgt.n	800a98a <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 800a8f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8f6:	4a27      	ldr	r2, [pc, #156]	; (800a994 <hagl_fill_rectangle+0x144>)
 800a8f8:	8812      	ldrh	r2, [r2, #0]
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7ff fdca 	bl	800a496 <max>
 800a902:	4603      	mov	r3, r0
 800a904:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 800a906:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a90a:	4a22      	ldr	r2, [pc, #136]	; (800a994 <hagl_fill_rectangle+0x144>)
 800a90c:	8852      	ldrh	r2, [r2, #2]
 800a90e:	4611      	mov	r1, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff fdc0 	bl	800a496 <max>
 800a916:	4603      	mov	r3, r0
 800a918:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800a91a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a91e:	4a1d      	ldr	r2, [pc, #116]	; (800a994 <hagl_fill_rectangle+0x144>)
 800a920:	8892      	ldrh	r2, [r2, #4]
 800a922:	4611      	mov	r1, r2
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff fda4 	bl	800a472 <min>
 800a92a:	4603      	mov	r3, r0
 800a92c:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800a92e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a932:	4a18      	ldr	r2, [pc, #96]	; (800a994 <hagl_fill_rectangle+0x144>)
 800a934:	88d2      	ldrh	r2, [r2, #6]
 800a936:	4611      	mov	r1, r2
 800a938:	4618      	mov	r0, r3
 800a93a:	f7ff fd9a 	bl	800a472 <min>
 800a93e:	4603      	mov	r3, r0
 800a940:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 800a942:	887a      	ldrh	r2, [r7, #2]
 800a944:	88fb      	ldrh	r3, [r7, #6]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	b29b      	uxth	r3, r3
 800a94a:	3301      	adds	r3, #1
 800a94c:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800a94e:	883a      	ldrh	r2, [r7, #0]
 800a950:	88bb      	ldrh	r3, [r7, #4]
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	b29b      	uxth	r3, r3
 800a956:	3301      	adds	r3, #1
 800a958:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 800a95a:	2300      	movs	r3, #0
 800a95c:	81fb      	strh	r3, [r7, #14]
 800a95e:	e00d      	b.n	800a97c <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 800a960:	88ba      	ldrh	r2, [r7, #4]
 800a962:	89fb      	ldrh	r3, [r7, #14]
 800a964:	4413      	add	r3, r2
 800a966:	b29b      	uxth	r3, r3
 800a968:	b219      	sxth	r1, r3
 800a96a:	8c3b      	ldrh	r3, [r7, #32]
 800a96c:	89ba      	ldrh	r2, [r7, #12]
 800a96e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a972:	f7ff fdf7 	bl	800a564 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800a976:	89fb      	ldrh	r3, [r7, #14]
 800a978:	3301      	adds	r3, #1
 800a97a:	81fb      	strh	r3, [r7, #14]
 800a97c:	89fa      	ldrh	r2, [r7, #14]
 800a97e:	897b      	ldrh	r3, [r7, #10]
 800a980:	429a      	cmp	r2, r3
 800a982:	d3ed      	bcc.n	800a960 <hagl_fill_rectangle+0x110>
 800a984:	e002      	b.n	800a98c <hagl_fill_rectangle+0x13c>
        return;
 800a986:	bf00      	nop
 800a988:	e000      	b.n	800a98c <hagl_fill_rectangle+0x13c>
        return;
 800a98a:	bf00      	nop
#endif
    }
}
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd90      	pop	{r4, r7, pc}
 800a992:	bf00      	nop
 800a994:	20000028 	.word	0x20000028

0800a998 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 800a998:	b590      	push	{r4, r7, lr}
 800a99a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	f107 0410 	add.w	r4, r7, #16
 800a9a6:	3c04      	subs	r4, #4
 800a9a8:	6020      	str	r0, [r4, #0]
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	f107 0310 	add.w	r3, r7, #16
 800a9b4:	3b06      	subs	r3, #6
 800a9b6:	4622      	mov	r2, r4
 800a9b8:	801a      	strh	r2, [r3, #0]
 800a9ba:	f107 0310 	add.w	r3, r7, #16
 800a9be:	3b08      	subs	r3, #8
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	801a      	strh	r2, [r3, #0]
 800a9c4:	f107 0310 	add.w	r3, r7, #16
 800a9c8:	3b0a      	subs	r3, #10
 800a9ca:	460a      	mov	r2, r1
 800a9cc:	801a      	strh	r2, [r3, #0]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800a9ce:	f107 0310 	add.w	r3, r7, #16
 800a9d2:	3b04      	subs	r3, #4
 800a9d4:	f107 0010 	add.w	r0, r7, #16
 800a9d8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800a9dc:	6812      	ldr	r2, [r2, #0]
 800a9de:	6819      	ldr	r1, [r3, #0]
 800a9e0:	f7ff fcb5 	bl	800a34e <fontx_glyph>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a9ea:	f102 0209 	add.w	r2, r2, #9
 800a9ee:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 800a9f0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a9f4:	f103 0309 	add.w	r3, r3, #9
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <hagl_put_char+0x6a>
        return 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	e0ba      	b.n	800ab78 <hagl_put_char+0x1e0>
    }

    bitmap.width = glyph.width,
 800aa02:	f107 0310 	add.w	r3, r7, #16
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa0e:	3b18      	subs	r3, #24
 800aa10:	801a      	strh	r2, [r3, #0]
    bitmap.height = glyph.height,
 800aa12:	f107 0310 	add.w	r3, r7, #16
 800aa16:	785b      	ldrb	r3, [r3, #1]
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa1e:	3b18      	subs	r3, #24
 800aa20:	805a      	strh	r2, [r3, #2]
    bitmap.depth = DISPLAY_DEPTH,
 800aa22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa26:	3b18      	subs	r3, #24
 800aa28:	2210      	movs	r2, #16
 800aa2a:	719a      	strb	r2, [r3, #6]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 800aa2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aa30:	3a08      	subs	r2, #8
 800aa32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa36:	3b18      	subs	r3, #24
 800aa38:	4611      	mov	r1, r2
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7ff faf1 	bl	800a022 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 800aa40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa44:	3b18      	subs	r3, #24
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800aa4c:	f102 020c 	add.w	r2, r2, #12
 800aa50:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800aa52:	2300      	movs	r3, #0
 800aa54:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800aa58:	f102 020b 	add.w	r2, r2, #11
 800aa5c:	7013      	strb	r3, [r2, #0]
 800aa5e:	e06c      	b.n	800ab3a <hagl_put_char+0x1a2>
        for (uint8_t x = 0; x < glyph.width; x++) {
 800aa60:	2300      	movs	r3, #0
 800aa62:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800aa66:	f102 020a 	add.w	r2, r2, #10
 800aa6a:	7013      	strb	r3, [r2, #0]
 800aa6c:	e046      	b.n	800aafc <hagl_put_char+0x164>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800aa6e:	f107 0310 	add.w	r3, r7, #16
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	b25a      	sxtb	r2, r3
 800aa78:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800aa7c:	f103 030a 	add.w	r3, r3, #10
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	f003 0307 	and.w	r3, r3, #7
 800aa86:	2180      	movs	r1, #128	; 0x80
 800aa88:	fa41 f303 	asr.w	r3, r1, r3
 800aa8c:	b25b      	sxtb	r3, r3
 800aa8e:	4013      	ands	r3, r2
 800aa90:	b25b      	sxtb	r3, r3
 800aa92:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800aa96:	f102 0208 	add.w	r2, r2, #8
 800aa9a:	7013      	strb	r3, [r2, #0]
            if (set) {
 800aa9c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800aaa0:	f103 0308 	add.w	r3, r3, #8
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d010      	beq.n	800aacc <hagl_put_char+0x134>
                *(ptr++) = color;
 800aaaa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800aaae:	f103 030c 	add.w	r3, r3, #12
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	1c93      	adds	r3, r2, #2
 800aab6:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800aaba:	f101 010c 	add.w	r1, r1, #12
 800aabe:	600b      	str	r3, [r1, #0]
 800aac0:	f107 0310 	add.w	r3, r7, #16
 800aac4:	3b0a      	subs	r3, #10
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	8013      	strh	r3, [r2, #0]
 800aaca:	e00c      	b.n	800aae6 <hagl_put_char+0x14e>
            } else {
                *(ptr++) = 0x0000;
 800aacc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800aad0:	f103 030c 	add.w	r3, r3, #12
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	1c9a      	adds	r2, r3, #2
 800aad8:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800aadc:	f101 010c 	add.w	r1, r1, #12
 800aae0:	600a      	str	r2, [r1, #0]
 800aae2:	2200      	movs	r2, #0
 800aae4:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 800aae6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800aaea:	f103 030a 	add.w	r3, r3, #10
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800aaf6:	f102 020a 	add.w	r2, r2, #10
 800aafa:	7013      	strb	r3, [r2, #0]
 800aafc:	f107 0310 	add.w	r3, r7, #16
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800ab06:	f102 020a 	add.w	r2, r2, #10
 800ab0a:	7812      	ldrb	r2, [r2, #0]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d3ae      	bcc.n	800aa6e <hagl_put_char+0xd6>
            }
        }
        glyph.buffer += glyph.pitch;
 800ab10:	f107 0310 	add.w	r3, r7, #16
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	f107 0210 	add.w	r2, r7, #16
 800ab1a:	78d2      	ldrb	r2, [r2, #3]
 800ab1c:	441a      	add	r2, r3
 800ab1e:	f107 0310 	add.w	r3, r7, #16
 800ab22:	605a      	str	r2, [r3, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 800ab24:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800ab28:	f103 030b 	add.w	r3, r3, #11
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800ab34:	f102 020b 	add.w	r2, r2, #11
 800ab38:	7013      	strb	r3, [r2, #0]
 800ab3a:	f107 0310 	add.w	r3, r7, #16
 800ab3e:	785b      	ldrb	r3, [r3, #1]
 800ab40:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800ab44:	f102 020b 	add.w	r2, r2, #11
 800ab48:	7812      	ldrb	r2, [r2, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d388      	bcc.n	800aa60 <hagl_put_char+0xc8>
    }

    hagl_blit(x0, y0, &bitmap);
 800ab4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ab52:	3a18      	subs	r2, #24
 800ab54:	f107 0310 	add.w	r3, r7, #16
 800ab58:	3b08      	subs	r3, #8
 800ab5a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ab5e:	f107 0310 	add.w	r3, r7, #16
 800ab62:	3b06      	subs	r3, #6
 800ab64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f000 f858 	bl	800ac1e <hagl_blit>

    return bitmap.width;
 800ab6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab72:	3b18      	subs	r3, #24
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	b2db      	uxtb	r3, r3
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd90      	pop	{r4, r7, pc}

0800ab84 <hagl_put_text>:
 * continue from the next line.
 */

//uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
uint16_t hagl_put_text(const char *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800ab84:	b590      	push	{r4, r7, lr}
 800ab86:	b08b      	sub	sp, #44	; 0x2c
 800ab88:	af02      	add	r7, sp, #8
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	4611      	mov	r1, r2
 800ab90:	461a      	mov	r2, r3
 800ab92:	4603      	mov	r3, r0
 800ab94:	817b      	strh	r3, [r7, #10]
 800ab96:	460b      	mov	r3, r1
 800ab98:	813b      	strh	r3, [r7, #8]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	80fb      	strh	r3, [r7, #6]
    char temp;
    uint8_t status;
    uint16_t original = x0;
 800ab9e:	897b      	ldrh	r3, [r7, #10]
 800aba0:	83fb      	strh	r3, [r7, #30]
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800aba2:	f107 0310 	add.w	r3, r7, #16
 800aba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7ff fbb3 	bl	800a314 <fontx_meta>
 800abae:	4603      	mov	r3, r0
 800abb0:	777b      	strb	r3, [r7, #29]
    if (0 != status) {
 800abb2:	7f7b      	ldrb	r3, [r7, #29]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <hagl_put_text+0x38>
        return 0;
 800abb8:	2300      	movs	r3, #0
 800abba:	e02c      	b.n	800ac16 <hagl_put_text+0x92>
    }

    do {
        temp = *str++;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	60fa      	str	r2, [r7, #12]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	773b      	strb	r3, [r7, #28]
        if (13 == temp || 10 == temp) {
 800abc6:	7f3b      	ldrb	r3, [r7, #28]
 800abc8:	2b0d      	cmp	r3, #13
 800abca:	d002      	beq.n	800abd2 <hagl_put_text+0x4e>
 800abcc:	7f3b      	ldrb	r3, [r7, #28]
 800abce:	2b0a      	cmp	r3, #10
 800abd0:	d108      	bne.n	800abe4 <hagl_put_text+0x60>
            x0 = 0;
 800abd2:	2300      	movs	r3, #0
 800abd4:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 800abd6:	7ebb      	ldrb	r3, [r7, #26]
 800abd8:	b29a      	uxth	r2, r3
 800abda:	893b      	ldrh	r3, [r7, #8]
 800abdc:	4413      	add	r3, r2
 800abde:	b29b      	uxth	r3, r3
 800abe0:	813b      	strh	r3, [r7, #8]
 800abe2:	e010      	b.n	800ac06 <hagl_put_text+0x82>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 800abe4:	7f38      	ldrb	r0, [r7, #28]
 800abe6:	88fc      	ldrh	r4, [r7, #6]
 800abe8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800abec:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800abf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	4623      	mov	r3, r4
 800abf6:	f7ff fecf 	bl	800a998 <hagl_put_char>
 800abfa:	4603      	mov	r3, r0
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	897b      	ldrh	r3, [r7, #10]
 800ac00:	4413      	add	r3, r2
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1d6      	bne.n	800abbc <hagl_put_text+0x38>

    return x0 - original;
 800ac0e:	897a      	ldrh	r2, [r7, #10]
 800ac10:	8bfb      	ldrh	r3, [r7, #30]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	b29b      	uxth	r3, r3
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3724      	adds	r7, #36	; 0x24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd90      	pop	{r4, r7, pc}

0800ac1e <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b086      	sub	sp, #24
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	4603      	mov	r3, r0
 800ac26:	603a      	str	r2, [r7, #0]
 800ac28:	80fb      	strh	r3, [r7, #6]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 800ac34:	2300      	movs	r3, #0
 800ac36:	827b      	strh	r3, [r7, #18]
 800ac38:	e020      	b.n	800ac7c <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	823b      	strh	r3, [r7, #16]
 800ac3e:	e015      	b.n	800ac6c <hagl_blit+0x4e>
            color = *(ptr++);
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	1c9a      	adds	r2, r3, #2
 800ac44:	617a      	str	r2, [r7, #20]
 800ac46:	881b      	ldrh	r3, [r3, #0]
 800ac48:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800ac4a:	88fa      	ldrh	r2, [r7, #6]
 800ac4c:	8a3b      	ldrh	r3, [r7, #16]
 800ac4e:	4413      	add	r3, r2
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	b218      	sxth	r0, r3
 800ac54:	88ba      	ldrh	r2, [r7, #4]
 800ac56:	8a7b      	ldrh	r3, [r7, #18]
 800ac58:	4413      	add	r3, r2
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	b21b      	sxth	r3, r3
 800ac5e:	89fa      	ldrh	r2, [r7, #14]
 800ac60:	4619      	mov	r1, r3
 800ac62:	f7ff fc4d 	bl	800a500 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800ac66:	8a3b      	ldrh	r3, [r7, #16]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	823b      	strh	r3, [r7, #16]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	8a3a      	ldrh	r2, [r7, #16]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d3e4      	bcc.n	800ac40 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800ac76:	8a7b      	ldrh	r3, [r7, #18]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	827b      	strh	r3, [r7, #18]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	885b      	ldrh	r3, [r3, #2]
 800ac80:	8a7a      	ldrh	r2, [r7, #18]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d3d9      	bcc.n	800ac3a <hagl_blit+0x1c>
        }
    }
#endif
};
 800ac86:	bf00      	nop
 800ac88:	bf00      	nop
 800ac8a:	3718      	adds	r7, #24
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 800ac96:	4b12      	ldr	r3, [pc, #72]	; (800ace0 <hagl_clear_screen+0x50>)
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 800ac9c:	4b10      	ldr	r3, [pc, #64]	; (800ace0 <hagl_clear_screen+0x50>)
 800ac9e:	885b      	ldrh	r3, [r3, #2]
 800aca0:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 800aca2:	4b0f      	ldr	r3, [pc, #60]	; (800ace0 <hagl_clear_screen+0x50>)
 800aca4:	889b      	ldrh	r3, [r3, #4]
 800aca6:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 800aca8:	4b0d      	ldr	r3, [pc, #52]	; (800ace0 <hagl_clear_screen+0x50>)
 800acaa:	88db      	ldrh	r3, [r3, #6]
 800acac:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 800acae:	239f      	movs	r3, #159	; 0x9f
 800acb0:	227f      	movs	r2, #127	; 0x7f
 800acb2:	2100      	movs	r1, #0
 800acb4:	2000      	movs	r0, #0
 800acb6:	f7ff fc01 	bl	800a4bc <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 800acba:	2300      	movs	r3, #0
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	239f      	movs	r3, #159	; 0x9f
 800acc0:	227f      	movs	r2, #127	; 0x7f
 800acc2:	2100      	movs	r1, #0
 800acc4:	2000      	movs	r0, #0
 800acc6:	f7ff fdc3 	bl	800a850 <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 800acca:	883b      	ldrh	r3, [r7, #0]
 800accc:	887a      	ldrh	r2, [r7, #2]
 800acce:	88b9      	ldrh	r1, [r7, #4]
 800acd0:	88f8      	ldrh	r0, [r7, #6]
 800acd2:	f7ff fbf3 	bl	800a4bc <hagl_set_clip_window>
#endif
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	20000028 	.word	0x20000028

0800ace4 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 800ace4:	b590      	push	{r4, r7, lr}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	4604      	mov	r4, r0
 800acec:	4608      	mov	r0, r1
 800acee:	4611      	mov	r1, r2
 800acf0:	461a      	mov	r2, r3
 800acf2:	4623      	mov	r3, r4
 800acf4:	80fb      	strh	r3, [r7, #6]
 800acf6:	4603      	mov	r3, r0
 800acf8:	80bb      	strh	r3, [r7, #4]
 800acfa:	460b      	mov	r3, r1
 800acfc:	807b      	strh	r3, [r7, #2]
 800acfe:	4613      	mov	r3, r2
 800ad00:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800ad02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ad06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	dd0e      	ble.n	800ad2c <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 800ad0e:	88fa      	ldrh	r2, [r7, #6]
 800ad10:	887b      	ldrh	r3, [r7, #2]
 800ad12:	4413      	add	r3, r2
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800ad18:	88fa      	ldrh	r2, [r7, #6]
 800ad1a:	887b      	ldrh	r3, [r7, #2]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800ad22:	88fa      	ldrh	r2, [r7, #6]
 800ad24:	887b      	ldrh	r3, [r7, #2]
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800ad2c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800ad30:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	dd0e      	ble.n	800ad56 <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 800ad38:	88ba      	ldrh	r2, [r7, #4]
 800ad3a:	883b      	ldrh	r3, [r7, #0]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800ad42:	88ba      	ldrh	r2, [r7, #4]
 800ad44:	883b      	ldrh	r3, [r7, #0]
 800ad46:	1ad3      	subs	r3, r2, r3
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800ad4c:	88ba      	ldrh	r2, [r7, #4]
 800ad4e:	883b      	ldrh	r3, [r7, #0]
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800ad56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ad5a:	4a52      	ldr	r2, [pc, #328]	; (800aea4 <hagl_draw_rounded_rectangle+0x1c0>)
 800ad5c:	8812      	ldrh	r2, [r2, #0]
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	f2c0 8153 	blt.w	800b00a <hagl_draw_rounded_rectangle+0x326>
 800ad64:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ad68:	4a4e      	ldr	r2, [pc, #312]	; (800aea4 <hagl_draw_rounded_rectangle+0x1c0>)
 800ad6a:	8852      	ldrh	r2, [r2, #2]
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	f2c0 814c 	blt.w	800b00a <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800ad72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad76:	4a4b      	ldr	r2, [pc, #300]	; (800aea4 <hagl_draw_rounded_rectangle+0x1c0>)
 800ad78:	8892      	ldrh	r2, [r2, #4]
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	f300 8147 	bgt.w	800b00e <hagl_draw_rounded_rectangle+0x32a>
 800ad80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ad84:	4a47      	ldr	r2, [pc, #284]	; (800aea4 <hagl_draw_rounded_rectangle+0x1c0>)
 800ad86:	88d2      	ldrh	r2, [r2, #6]
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	f300 8140 	bgt.w	800b00e <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 800ad8e:	887a      	ldrh	r2, [r7, #2]
 800ad90:	88fb      	ldrh	r3, [r7, #6]
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	3301      	adds	r3, #1
 800ad98:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 800ad9a:	883a      	ldrh	r2, [r7, #0]
 800ad9c:	88bb      	ldrh	r3, [r7, #4]
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	3301      	adds	r3, #1
 800ada4:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 800ada6:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 800adaa:	8a3b      	ldrh	r3, [r7, #16]
 800adac:	085b      	lsrs	r3, r3, #1
 800adae:	b29b      	uxth	r3, r3
 800adb0:	461a      	mov	r2, r3
 800adb2:	89fb      	ldrh	r3, [r7, #14]
 800adb4:	085b      	lsrs	r3, r3, #1
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	4619      	mov	r1, r3
 800adba:	4610      	mov	r0, r2
 800adbc:	f7ff fb59 	bl	800a472 <min>
 800adc0:	4603      	mov	r3, r0
 800adc2:	4619      	mov	r1, r3
 800adc4:	4620      	mov	r0, r4
 800adc6:	f7ff fb54 	bl	800a472 <min>
 800adca:	4603      	mov	r3, r0
 800adcc:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 800adce:	88fa      	ldrh	r2, [r7, #6]
 800add0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800add2:	4413      	add	r3, r2
 800add4:	b29b      	uxth	r3, r3
 800add6:	b218      	sxth	r0, r3
 800add8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adda:	005b      	lsls	r3, r3, #1
 800addc:	b29b      	uxth	r3, r3
 800adde:	8a3a      	ldrh	r2, [r7, #16]
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ade6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800adea:	f7ff fbbb 	bl	800a564 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 800adee:	88fa      	ldrh	r2, [r7, #6]
 800adf0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adf2:	4413      	add	r3, r2
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	b218      	sxth	r0, r3
 800adf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	8a3a      	ldrh	r2, [r7, #16]
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae06:	f9b7 1000 	ldrsh.w	r1, [r7]
 800ae0a:	f7ff fbab 	bl	800a564 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 800ae0e:	88ba      	ldrh	r2, [r7, #4]
 800ae10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae12:	4413      	add	r3, r2
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	b219      	sxth	r1, r3
 800ae18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	89fa      	ldrh	r2, [r7, #14]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae26:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800ae2a:	f7ff fbbe 	bl	800a5aa <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 800ae2e:	88ba      	ldrh	r2, [r7, #4]
 800ae30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae32:	4413      	add	r3, r2
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	b219      	sxth	r1, r3
 800ae38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae3a:	005b      	lsls	r3, r3, #1
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	89fa      	ldrh	r2, [r7, #14]
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae46:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800ae4a:	f7ff fbae 	bl	800a5aa <hagl_draw_vline>

    x = 0;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	82fb      	strh	r3, [r7, #22]
    y = r;
 800ae52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae54:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 800ae56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae58:	005b      	lsls	r3, r3, #1
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	f1c3 0303 	rsb	r3, r3, #3
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 800ae64:	e0c9      	b.n	800affa <hagl_draw_rounded_rectangle+0x316>
        x++;
 800ae66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 800ae72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	dd16      	ble.n	800aea8 <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 800ae7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	3b01      	subs	r3, #1
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 800ae86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ae8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ae8e:	1ad3      	subs	r3, r2, r3
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	8a7b      	ldrh	r3, [r7, #18]
 800ae98:	4413      	add	r3, r2
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	330a      	adds	r3, #10
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	827b      	strh	r3, [r7, #18]
 800aea2:	e00a      	b.n	800aeba <hagl_draw_rounded_rectangle+0x1d6>
 800aea4:	20000028 	.word	0x20000028
        } else {
            d = d + 4 * x + 6;
 800aea8:	8afb      	ldrh	r3, [r7, #22]
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	8a7b      	ldrh	r3, [r7, #18]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	3306      	adds	r3, #6
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 800aeba:	887a      	ldrh	r2, [r7, #2]
 800aebc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	8afb      	ldrh	r3, [r7, #22]
 800aec4:	4413      	add	r3, r2
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	b218      	sxth	r0, r3
 800aeca:	88ba      	ldrh	r2, [r7, #4]
 800aecc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aece:	4413      	add	r3, r2
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	8abb      	ldrh	r3, [r7, #20]
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	b21b      	sxth	r3, r3
 800aeda:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aedc:	4619      	mov	r1, r3
 800aede:	f7ff fb0f 	bl	800a500 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 800aee2:	887a      	ldrh	r2, [r7, #2]
 800aee4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	8abb      	ldrh	r3, [r7, #20]
 800aeec:	4413      	add	r3, r2
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	b218      	sxth	r0, r3
 800aef2:	88ba      	ldrh	r2, [r7, #4]
 800aef4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aef6:	4413      	add	r3, r2
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	8afb      	ldrh	r3, [r7, #22]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	b29b      	uxth	r3, r3
 800af00:	b21b      	sxth	r3, r3
 800af02:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800af04:	4619      	mov	r1, r3
 800af06:	f7ff fafb 	bl	800a500 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 800af0a:	88fa      	ldrh	r2, [r7, #6]
 800af0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af0e:	4413      	add	r3, r2
 800af10:	b29a      	uxth	r2, r3
 800af12:	8afb      	ldrh	r3, [r7, #22]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	b29b      	uxth	r3, r3
 800af18:	b218      	sxth	r0, r3
 800af1a:	88ba      	ldrh	r2, [r7, #4]
 800af1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af1e:	4413      	add	r3, r2
 800af20:	b29a      	uxth	r2, r3
 800af22:	8abb      	ldrh	r3, [r7, #20]
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	b29b      	uxth	r3, r3
 800af28:	b21b      	sxth	r3, r3
 800af2a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800af2c:	4619      	mov	r1, r3
 800af2e:	f7ff fae7 	bl	800a500 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 800af32:	88fa      	ldrh	r2, [r7, #6]
 800af34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af36:	4413      	add	r3, r2
 800af38:	b29a      	uxth	r2, r3
 800af3a:	8abb      	ldrh	r3, [r7, #20]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	b29b      	uxth	r3, r3
 800af40:	b218      	sxth	r0, r3
 800af42:	88ba      	ldrh	r2, [r7, #4]
 800af44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af46:	4413      	add	r3, r2
 800af48:	b29a      	uxth	r2, r3
 800af4a:	8afb      	ldrh	r3, [r7, #22]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	b29b      	uxth	r3, r3
 800af50:	b21b      	sxth	r3, r3
 800af52:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800af54:	4619      	mov	r1, r3
 800af56:	f7ff fad3 	bl	800a500 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 800af5a:	887a      	ldrh	r2, [r7, #2]
 800af5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	b29a      	uxth	r2, r3
 800af62:	8afb      	ldrh	r3, [r7, #22]
 800af64:	4413      	add	r3, r2
 800af66:	b29b      	uxth	r3, r3
 800af68:	b218      	sxth	r0, r3
 800af6a:	883a      	ldrh	r2, [r7, #0]
 800af6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	b29a      	uxth	r2, r3
 800af72:	8abb      	ldrh	r3, [r7, #20]
 800af74:	4413      	add	r3, r2
 800af76:	b29b      	uxth	r3, r3
 800af78:	b21b      	sxth	r3, r3
 800af7a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800af7c:	4619      	mov	r1, r3
 800af7e:	f7ff fabf 	bl	800a500 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 800af82:	887a      	ldrh	r2, [r7, #2]
 800af84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	b29a      	uxth	r2, r3
 800af8a:	8abb      	ldrh	r3, [r7, #20]
 800af8c:	4413      	add	r3, r2
 800af8e:	b29b      	uxth	r3, r3
 800af90:	b218      	sxth	r0, r3
 800af92:	883a      	ldrh	r2, [r7, #0]
 800af94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af96:	1ad3      	subs	r3, r2, r3
 800af98:	b29a      	uxth	r2, r3
 800af9a:	8afb      	ldrh	r3, [r7, #22]
 800af9c:	4413      	add	r3, r2
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	b21b      	sxth	r3, r3
 800afa2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800afa4:	4619      	mov	r1, r3
 800afa6:	f7ff faab 	bl	800a500 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 800afaa:	88fa      	ldrh	r2, [r7, #6]
 800afac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afae:	4413      	add	r3, r2
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	8afb      	ldrh	r3, [r7, #22]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	b218      	sxth	r0, r3
 800afba:	883a      	ldrh	r2, [r7, #0]
 800afbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	8abb      	ldrh	r3, [r7, #20]
 800afc4:	4413      	add	r3, r2
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	b21b      	sxth	r3, r3
 800afca:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800afcc:	4619      	mov	r1, r3
 800afce:	f7ff fa97 	bl	800a500 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 800afd2:	88fa      	ldrh	r2, [r7, #6]
 800afd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afd6:	4413      	add	r3, r2
 800afd8:	b29a      	uxth	r2, r3
 800afda:	8abb      	ldrh	r3, [r7, #20]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	b29b      	uxth	r3, r3
 800afe0:	b218      	sxth	r0, r3
 800afe2:	883a      	ldrh	r2, [r7, #0]
 800afe4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	b29a      	uxth	r2, r3
 800afea:	8afb      	ldrh	r3, [r7, #22]
 800afec:	4413      	add	r3, r2
 800afee:	b29b      	uxth	r3, r3
 800aff0:	b21b      	sxth	r3, r3
 800aff2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aff4:	4619      	mov	r1, r3
 800aff6:	f7ff fa83 	bl	800a500 <hagl_put_pixel>
    while (y >= x) {
 800affa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800affe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b002:	429a      	cmp	r2, r3
 800b004:	f6bf af2f 	bge.w	800ae66 <hagl_draw_rounded_rectangle+0x182>
 800b008:	e002      	b.n	800b010 <hagl_draw_rounded_rectangle+0x32c>
        return;
 800b00a:	bf00      	nop
 800b00c:	e000      	b.n	800b010 <hagl_draw_rounded_rectangle+0x32c>
        return;
 800b00e:	bf00      	nop
    }
};
 800b010:	371c      	adds	r7, #28
 800b012:	46bd      	mov	sp, r7
 800b014:	bd90      	pop	{r4, r7, pc}
 800b016:	bf00      	nop

0800b018 <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	4603      	mov	r3, r0
 800b020:	71fb      	strb	r3, [r7, #7]
 800b022:	460b      	mov	r3, r1
 800b024:	71bb      	strb	r3, [r7, #6]
 800b026:	4613      	mov	r3, r2
 800b028:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 800b02a:	79fb      	ldrb	r3, [r7, #7]
 800b02c:	021b      	lsls	r3, r3, #8
 800b02e:	b21b      	sxth	r3, r3
 800b030:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b034:	f023 0307 	bic.w	r3, r3, #7
 800b038:	b21a      	sxth	r2, r3
 800b03a:	79bb      	ldrb	r3, [r7, #6]
 800b03c:	00db      	lsls	r3, r3, #3
 800b03e:	b21b      	sxth	r3, r3
 800b040:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800b044:	b21b      	sxth	r3, r3
 800b046:	4313      	orrs	r3, r2
 800b048:	b21a      	sxth	r2, r3
 800b04a:	797b      	ldrb	r3, [r7, #5]
 800b04c:	08db      	lsrs	r3, r3, #3
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	b21b      	sxth	r3, r3
 800b052:	4313      	orrs	r3, r2
 800b054:	b21b      	sxth	r3, r3
 800b056:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 800b058:	89fb      	ldrh	r3, [r7, #14]
 800b05a:	021b      	lsls	r3, r3, #8
 800b05c:	b21a      	sxth	r2, r3
 800b05e:	89fb      	ldrh	r3, [r7, #14]
 800b060:	0a1b      	lsrs	r3, r3, #8
 800b062:	b29b      	uxth	r3, r3
 800b064:	b21b      	sxth	r3, r3
 800b066:	4313      	orrs	r3, r2
 800b068:	b21b      	sxth	r3, r3
 800b06a:	81fb      	strh	r3, [r7, #14]

    return rgb;
 800b06c:	89fb      	ldrh	r3, [r7, #14]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
	...

0800b07c <__assert_func>:
 800b07c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b07e:	4614      	mov	r4, r2
 800b080:	461a      	mov	r2, r3
 800b082:	4b09      	ldr	r3, [pc, #36]	; (800b0a8 <__assert_func+0x2c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4605      	mov	r5, r0
 800b088:	68d8      	ldr	r0, [r3, #12]
 800b08a:	b14c      	cbz	r4, 800b0a0 <__assert_func+0x24>
 800b08c:	4b07      	ldr	r3, [pc, #28]	; (800b0ac <__assert_func+0x30>)
 800b08e:	9100      	str	r1, [sp, #0]
 800b090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b094:	4906      	ldr	r1, [pc, #24]	; (800b0b0 <__assert_func+0x34>)
 800b096:	462b      	mov	r3, r5
 800b098:	f000 f9be 	bl	800b418 <fiprintf>
 800b09c:	f001 f818 	bl	800c0d0 <abort>
 800b0a0:	4b04      	ldr	r3, [pc, #16]	; (800b0b4 <__assert_func+0x38>)
 800b0a2:	461c      	mov	r4, r3
 800b0a4:	e7f3      	b.n	800b08e <__assert_func+0x12>
 800b0a6:	bf00      	nop
 800b0a8:	20000030 	.word	0x20000030
 800b0ac:	08016074 	.word	0x08016074
 800b0b0:	08016081 	.word	0x08016081
 800b0b4:	080160af 	.word	0x080160af

0800b0b8 <__errno>:
 800b0b8:	4b01      	ldr	r3, [pc, #4]	; (800b0c0 <__errno+0x8>)
 800b0ba:	6818      	ldr	r0, [r3, #0]
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	20000030 	.word	0x20000030

0800b0c4 <__sflush_r>:
 800b0c4:	898a      	ldrh	r2, [r1, #12]
 800b0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	0710      	lsls	r0, r2, #28
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	d458      	bmi.n	800b184 <__sflush_r+0xc0>
 800b0d2:	684b      	ldr	r3, [r1, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	dc05      	bgt.n	800b0e4 <__sflush_r+0x20>
 800b0d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	dc02      	bgt.n	800b0e4 <__sflush_r+0x20>
 800b0de:	2000      	movs	r0, #0
 800b0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0e6:	2e00      	cmp	r6, #0
 800b0e8:	d0f9      	beq.n	800b0de <__sflush_r+0x1a>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0f0:	682f      	ldr	r7, [r5, #0]
 800b0f2:	602b      	str	r3, [r5, #0]
 800b0f4:	d032      	beq.n	800b15c <__sflush_r+0x98>
 800b0f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	075a      	lsls	r2, r3, #29
 800b0fc:	d505      	bpl.n	800b10a <__sflush_r+0x46>
 800b0fe:	6863      	ldr	r3, [r4, #4]
 800b100:	1ac0      	subs	r0, r0, r3
 800b102:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b104:	b10b      	cbz	r3, 800b10a <__sflush_r+0x46>
 800b106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b108:	1ac0      	subs	r0, r0, r3
 800b10a:	2300      	movs	r3, #0
 800b10c:	4602      	mov	r2, r0
 800b10e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b110:	6a21      	ldr	r1, [r4, #32]
 800b112:	4628      	mov	r0, r5
 800b114:	47b0      	blx	r6
 800b116:	1c43      	adds	r3, r0, #1
 800b118:	89a3      	ldrh	r3, [r4, #12]
 800b11a:	d106      	bne.n	800b12a <__sflush_r+0x66>
 800b11c:	6829      	ldr	r1, [r5, #0]
 800b11e:	291d      	cmp	r1, #29
 800b120:	d82c      	bhi.n	800b17c <__sflush_r+0xb8>
 800b122:	4a2a      	ldr	r2, [pc, #168]	; (800b1cc <__sflush_r+0x108>)
 800b124:	40ca      	lsrs	r2, r1
 800b126:	07d6      	lsls	r6, r2, #31
 800b128:	d528      	bpl.n	800b17c <__sflush_r+0xb8>
 800b12a:	2200      	movs	r2, #0
 800b12c:	6062      	str	r2, [r4, #4]
 800b12e:	04d9      	lsls	r1, r3, #19
 800b130:	6922      	ldr	r2, [r4, #16]
 800b132:	6022      	str	r2, [r4, #0]
 800b134:	d504      	bpl.n	800b140 <__sflush_r+0x7c>
 800b136:	1c42      	adds	r2, r0, #1
 800b138:	d101      	bne.n	800b13e <__sflush_r+0x7a>
 800b13a:	682b      	ldr	r3, [r5, #0]
 800b13c:	b903      	cbnz	r3, 800b140 <__sflush_r+0x7c>
 800b13e:	6560      	str	r0, [r4, #84]	; 0x54
 800b140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b142:	602f      	str	r7, [r5, #0]
 800b144:	2900      	cmp	r1, #0
 800b146:	d0ca      	beq.n	800b0de <__sflush_r+0x1a>
 800b148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b14c:	4299      	cmp	r1, r3
 800b14e:	d002      	beq.n	800b156 <__sflush_r+0x92>
 800b150:	4628      	mov	r0, r5
 800b152:	f000 fa35 	bl	800b5c0 <_free_r>
 800b156:	2000      	movs	r0, #0
 800b158:	6360      	str	r0, [r4, #52]	; 0x34
 800b15a:	e7c1      	b.n	800b0e0 <__sflush_r+0x1c>
 800b15c:	6a21      	ldr	r1, [r4, #32]
 800b15e:	2301      	movs	r3, #1
 800b160:	4628      	mov	r0, r5
 800b162:	47b0      	blx	r6
 800b164:	1c41      	adds	r1, r0, #1
 800b166:	d1c7      	bne.n	800b0f8 <__sflush_r+0x34>
 800b168:	682b      	ldr	r3, [r5, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d0c4      	beq.n	800b0f8 <__sflush_r+0x34>
 800b16e:	2b1d      	cmp	r3, #29
 800b170:	d001      	beq.n	800b176 <__sflush_r+0xb2>
 800b172:	2b16      	cmp	r3, #22
 800b174:	d101      	bne.n	800b17a <__sflush_r+0xb6>
 800b176:	602f      	str	r7, [r5, #0]
 800b178:	e7b1      	b.n	800b0de <__sflush_r+0x1a>
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b180:	81a3      	strh	r3, [r4, #12]
 800b182:	e7ad      	b.n	800b0e0 <__sflush_r+0x1c>
 800b184:	690f      	ldr	r7, [r1, #16]
 800b186:	2f00      	cmp	r7, #0
 800b188:	d0a9      	beq.n	800b0de <__sflush_r+0x1a>
 800b18a:	0793      	lsls	r3, r2, #30
 800b18c:	680e      	ldr	r6, [r1, #0]
 800b18e:	bf08      	it	eq
 800b190:	694b      	ldreq	r3, [r1, #20]
 800b192:	600f      	str	r7, [r1, #0]
 800b194:	bf18      	it	ne
 800b196:	2300      	movne	r3, #0
 800b198:	eba6 0807 	sub.w	r8, r6, r7
 800b19c:	608b      	str	r3, [r1, #8]
 800b19e:	f1b8 0f00 	cmp.w	r8, #0
 800b1a2:	dd9c      	ble.n	800b0de <__sflush_r+0x1a>
 800b1a4:	6a21      	ldr	r1, [r4, #32]
 800b1a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1a8:	4643      	mov	r3, r8
 800b1aa:	463a      	mov	r2, r7
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	47b0      	blx	r6
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	dc06      	bgt.n	800b1c2 <__sflush_r+0xfe>
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ba:	81a3      	strh	r3, [r4, #12]
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c0:	e78e      	b.n	800b0e0 <__sflush_r+0x1c>
 800b1c2:	4407      	add	r7, r0
 800b1c4:	eba8 0800 	sub.w	r8, r8, r0
 800b1c8:	e7e9      	b.n	800b19e <__sflush_r+0xda>
 800b1ca:	bf00      	nop
 800b1cc:	20400001 	.word	0x20400001

0800b1d0 <_fflush_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	690b      	ldr	r3, [r1, #16]
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	b913      	cbnz	r3, 800b1e0 <_fflush_r+0x10>
 800b1da:	2500      	movs	r5, #0
 800b1dc:	4628      	mov	r0, r5
 800b1de:	bd38      	pop	{r3, r4, r5, pc}
 800b1e0:	b118      	cbz	r0, 800b1ea <_fflush_r+0x1a>
 800b1e2:	6983      	ldr	r3, [r0, #24]
 800b1e4:	b90b      	cbnz	r3, 800b1ea <_fflush_r+0x1a>
 800b1e6:	f000 f899 	bl	800b31c <__sinit>
 800b1ea:	4b14      	ldr	r3, [pc, #80]	; (800b23c <_fflush_r+0x6c>)
 800b1ec:	429c      	cmp	r4, r3
 800b1ee:	d11b      	bne.n	800b228 <_fflush_r+0x58>
 800b1f0:	686c      	ldr	r4, [r5, #4]
 800b1f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d0ef      	beq.n	800b1da <_fflush_r+0xa>
 800b1fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1fc:	07d0      	lsls	r0, r2, #31
 800b1fe:	d404      	bmi.n	800b20a <_fflush_r+0x3a>
 800b200:	0599      	lsls	r1, r3, #22
 800b202:	d402      	bmi.n	800b20a <_fflush_r+0x3a>
 800b204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b206:	f000 f95e 	bl	800b4c6 <__retarget_lock_acquire_recursive>
 800b20a:	4628      	mov	r0, r5
 800b20c:	4621      	mov	r1, r4
 800b20e:	f7ff ff59 	bl	800b0c4 <__sflush_r>
 800b212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b214:	07da      	lsls	r2, r3, #31
 800b216:	4605      	mov	r5, r0
 800b218:	d4e0      	bmi.n	800b1dc <_fflush_r+0xc>
 800b21a:	89a3      	ldrh	r3, [r4, #12]
 800b21c:	059b      	lsls	r3, r3, #22
 800b21e:	d4dd      	bmi.n	800b1dc <_fflush_r+0xc>
 800b220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b222:	f000 f951 	bl	800b4c8 <__retarget_lock_release_recursive>
 800b226:	e7d9      	b.n	800b1dc <_fflush_r+0xc>
 800b228:	4b05      	ldr	r3, [pc, #20]	; (800b240 <_fflush_r+0x70>)
 800b22a:	429c      	cmp	r4, r3
 800b22c:	d101      	bne.n	800b232 <_fflush_r+0x62>
 800b22e:	68ac      	ldr	r4, [r5, #8]
 800b230:	e7df      	b.n	800b1f2 <_fflush_r+0x22>
 800b232:	4b04      	ldr	r3, [pc, #16]	; (800b244 <_fflush_r+0x74>)
 800b234:	429c      	cmp	r4, r3
 800b236:	bf08      	it	eq
 800b238:	68ec      	ldreq	r4, [r5, #12]
 800b23a:	e7da      	b.n	800b1f2 <_fflush_r+0x22>
 800b23c:	080160d0 	.word	0x080160d0
 800b240:	080160f0 	.word	0x080160f0
 800b244:	080160b0 	.word	0x080160b0

0800b248 <fflush>:
 800b248:	4601      	mov	r1, r0
 800b24a:	b920      	cbnz	r0, 800b256 <fflush+0xe>
 800b24c:	4b04      	ldr	r3, [pc, #16]	; (800b260 <fflush+0x18>)
 800b24e:	4905      	ldr	r1, [pc, #20]	; (800b264 <fflush+0x1c>)
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	f000 b8f3 	b.w	800b43c <_fwalk_reent>
 800b256:	4b04      	ldr	r3, [pc, #16]	; (800b268 <fflush+0x20>)
 800b258:	6818      	ldr	r0, [r3, #0]
 800b25a:	f7ff bfb9 	b.w	800b1d0 <_fflush_r>
 800b25e:	bf00      	nop
 800b260:	08016110 	.word	0x08016110
 800b264:	0800b1d1 	.word	0x0800b1d1
 800b268:	20000030 	.word	0x20000030

0800b26c <std>:
 800b26c:	2300      	movs	r3, #0
 800b26e:	b510      	push	{r4, lr}
 800b270:	4604      	mov	r4, r0
 800b272:	e9c0 3300 	strd	r3, r3, [r0]
 800b276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b27a:	6083      	str	r3, [r0, #8]
 800b27c:	8181      	strh	r1, [r0, #12]
 800b27e:	6643      	str	r3, [r0, #100]	; 0x64
 800b280:	81c2      	strh	r2, [r0, #14]
 800b282:	6183      	str	r3, [r0, #24]
 800b284:	4619      	mov	r1, r3
 800b286:	2208      	movs	r2, #8
 800b288:	305c      	adds	r0, #92	; 0x5c
 800b28a:	f000 f991 	bl	800b5b0 <memset>
 800b28e:	4b05      	ldr	r3, [pc, #20]	; (800b2a4 <std+0x38>)
 800b290:	6263      	str	r3, [r4, #36]	; 0x24
 800b292:	4b05      	ldr	r3, [pc, #20]	; (800b2a8 <std+0x3c>)
 800b294:	62a3      	str	r3, [r4, #40]	; 0x28
 800b296:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <std+0x40>)
 800b298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b29a:	4b05      	ldr	r3, [pc, #20]	; (800b2b0 <std+0x44>)
 800b29c:	6224      	str	r4, [r4, #32]
 800b29e:	6323      	str	r3, [r4, #48]	; 0x30
 800b2a0:	bd10      	pop	{r4, pc}
 800b2a2:	bf00      	nop
 800b2a4:	0800bea5 	.word	0x0800bea5
 800b2a8:	0800bec7 	.word	0x0800bec7
 800b2ac:	0800beff 	.word	0x0800beff
 800b2b0:	0800bf23 	.word	0x0800bf23

0800b2b4 <_cleanup_r>:
 800b2b4:	4901      	ldr	r1, [pc, #4]	; (800b2bc <_cleanup_r+0x8>)
 800b2b6:	f000 b8c1 	b.w	800b43c <_fwalk_reent>
 800b2ba:	bf00      	nop
 800b2bc:	0800b1d1 	.word	0x0800b1d1

0800b2c0 <__sfmoreglue>:
 800b2c0:	b570      	push	{r4, r5, r6, lr}
 800b2c2:	1e4a      	subs	r2, r1, #1
 800b2c4:	2568      	movs	r5, #104	; 0x68
 800b2c6:	4355      	muls	r5, r2
 800b2c8:	460e      	mov	r6, r1
 800b2ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2ce:	f000 f9c7 	bl	800b660 <_malloc_r>
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	b140      	cbz	r0, 800b2e8 <__sfmoreglue+0x28>
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	e9c0 1600 	strd	r1, r6, [r0]
 800b2dc:	300c      	adds	r0, #12
 800b2de:	60a0      	str	r0, [r4, #8]
 800b2e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2e4:	f000 f964 	bl	800b5b0 <memset>
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	bd70      	pop	{r4, r5, r6, pc}

0800b2ec <__sfp_lock_acquire>:
 800b2ec:	4801      	ldr	r0, [pc, #4]	; (800b2f4 <__sfp_lock_acquire+0x8>)
 800b2ee:	f000 b8ea 	b.w	800b4c6 <__retarget_lock_acquire_recursive>
 800b2f2:	bf00      	nop
 800b2f4:	2000adb0 	.word	0x2000adb0

0800b2f8 <__sfp_lock_release>:
 800b2f8:	4801      	ldr	r0, [pc, #4]	; (800b300 <__sfp_lock_release+0x8>)
 800b2fa:	f000 b8e5 	b.w	800b4c8 <__retarget_lock_release_recursive>
 800b2fe:	bf00      	nop
 800b300:	2000adb0 	.word	0x2000adb0

0800b304 <__sinit_lock_acquire>:
 800b304:	4801      	ldr	r0, [pc, #4]	; (800b30c <__sinit_lock_acquire+0x8>)
 800b306:	f000 b8de 	b.w	800b4c6 <__retarget_lock_acquire_recursive>
 800b30a:	bf00      	nop
 800b30c:	2000adab 	.word	0x2000adab

0800b310 <__sinit_lock_release>:
 800b310:	4801      	ldr	r0, [pc, #4]	; (800b318 <__sinit_lock_release+0x8>)
 800b312:	f000 b8d9 	b.w	800b4c8 <__retarget_lock_release_recursive>
 800b316:	bf00      	nop
 800b318:	2000adab 	.word	0x2000adab

0800b31c <__sinit>:
 800b31c:	b510      	push	{r4, lr}
 800b31e:	4604      	mov	r4, r0
 800b320:	f7ff fff0 	bl	800b304 <__sinit_lock_acquire>
 800b324:	69a3      	ldr	r3, [r4, #24]
 800b326:	b11b      	cbz	r3, 800b330 <__sinit+0x14>
 800b328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b32c:	f7ff bff0 	b.w	800b310 <__sinit_lock_release>
 800b330:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b334:	6523      	str	r3, [r4, #80]	; 0x50
 800b336:	4b13      	ldr	r3, [pc, #76]	; (800b384 <__sinit+0x68>)
 800b338:	4a13      	ldr	r2, [pc, #76]	; (800b388 <__sinit+0x6c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b33e:	42a3      	cmp	r3, r4
 800b340:	bf04      	itt	eq
 800b342:	2301      	moveq	r3, #1
 800b344:	61a3      	streq	r3, [r4, #24]
 800b346:	4620      	mov	r0, r4
 800b348:	f000 f820 	bl	800b38c <__sfp>
 800b34c:	6060      	str	r0, [r4, #4]
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 f81c 	bl	800b38c <__sfp>
 800b354:	60a0      	str	r0, [r4, #8]
 800b356:	4620      	mov	r0, r4
 800b358:	f000 f818 	bl	800b38c <__sfp>
 800b35c:	2200      	movs	r2, #0
 800b35e:	60e0      	str	r0, [r4, #12]
 800b360:	2104      	movs	r1, #4
 800b362:	6860      	ldr	r0, [r4, #4]
 800b364:	f7ff ff82 	bl	800b26c <std>
 800b368:	68a0      	ldr	r0, [r4, #8]
 800b36a:	2201      	movs	r2, #1
 800b36c:	2109      	movs	r1, #9
 800b36e:	f7ff ff7d 	bl	800b26c <std>
 800b372:	68e0      	ldr	r0, [r4, #12]
 800b374:	2202      	movs	r2, #2
 800b376:	2112      	movs	r1, #18
 800b378:	f7ff ff78 	bl	800b26c <std>
 800b37c:	2301      	movs	r3, #1
 800b37e:	61a3      	str	r3, [r4, #24]
 800b380:	e7d2      	b.n	800b328 <__sinit+0xc>
 800b382:	bf00      	nop
 800b384:	08016110 	.word	0x08016110
 800b388:	0800b2b5 	.word	0x0800b2b5

0800b38c <__sfp>:
 800b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38e:	4607      	mov	r7, r0
 800b390:	f7ff ffac 	bl	800b2ec <__sfp_lock_acquire>
 800b394:	4b1e      	ldr	r3, [pc, #120]	; (800b410 <__sfp+0x84>)
 800b396:	681e      	ldr	r6, [r3, #0]
 800b398:	69b3      	ldr	r3, [r6, #24]
 800b39a:	b913      	cbnz	r3, 800b3a2 <__sfp+0x16>
 800b39c:	4630      	mov	r0, r6
 800b39e:	f7ff ffbd 	bl	800b31c <__sinit>
 800b3a2:	3648      	adds	r6, #72	; 0x48
 800b3a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	d503      	bpl.n	800b3b4 <__sfp+0x28>
 800b3ac:	6833      	ldr	r3, [r6, #0]
 800b3ae:	b30b      	cbz	r3, 800b3f4 <__sfp+0x68>
 800b3b0:	6836      	ldr	r6, [r6, #0]
 800b3b2:	e7f7      	b.n	800b3a4 <__sfp+0x18>
 800b3b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3b8:	b9d5      	cbnz	r5, 800b3f0 <__sfp+0x64>
 800b3ba:	4b16      	ldr	r3, [pc, #88]	; (800b414 <__sfp+0x88>)
 800b3bc:	60e3      	str	r3, [r4, #12]
 800b3be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3c2:	6665      	str	r5, [r4, #100]	; 0x64
 800b3c4:	f000 f87e 	bl	800b4c4 <__retarget_lock_init_recursive>
 800b3c8:	f7ff ff96 	bl	800b2f8 <__sfp_lock_release>
 800b3cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3d4:	6025      	str	r5, [r4, #0]
 800b3d6:	61a5      	str	r5, [r4, #24]
 800b3d8:	2208      	movs	r2, #8
 800b3da:	4629      	mov	r1, r5
 800b3dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3e0:	f000 f8e6 	bl	800b5b0 <memset>
 800b3e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3f0:	3468      	adds	r4, #104	; 0x68
 800b3f2:	e7d9      	b.n	800b3a8 <__sfp+0x1c>
 800b3f4:	2104      	movs	r1, #4
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	f7ff ff62 	bl	800b2c0 <__sfmoreglue>
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	6030      	str	r0, [r6, #0]
 800b400:	2800      	cmp	r0, #0
 800b402:	d1d5      	bne.n	800b3b0 <__sfp+0x24>
 800b404:	f7ff ff78 	bl	800b2f8 <__sfp_lock_release>
 800b408:	230c      	movs	r3, #12
 800b40a:	603b      	str	r3, [r7, #0]
 800b40c:	e7ee      	b.n	800b3ec <__sfp+0x60>
 800b40e:	bf00      	nop
 800b410:	08016110 	.word	0x08016110
 800b414:	ffff0001 	.word	0xffff0001

0800b418 <fiprintf>:
 800b418:	b40e      	push	{r1, r2, r3}
 800b41a:	b503      	push	{r0, r1, lr}
 800b41c:	4601      	mov	r1, r0
 800b41e:	ab03      	add	r3, sp, #12
 800b420:	4805      	ldr	r0, [pc, #20]	; (800b438 <fiprintf+0x20>)
 800b422:	f853 2b04 	ldr.w	r2, [r3], #4
 800b426:	6800      	ldr	r0, [r0, #0]
 800b428:	9301      	str	r3, [sp, #4]
 800b42a:	f000 f99d 	bl	800b768 <_vfiprintf_r>
 800b42e:	b002      	add	sp, #8
 800b430:	f85d eb04 	ldr.w	lr, [sp], #4
 800b434:	b003      	add	sp, #12
 800b436:	4770      	bx	lr
 800b438:	20000030 	.word	0x20000030

0800b43c <_fwalk_reent>:
 800b43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b440:	4606      	mov	r6, r0
 800b442:	4688      	mov	r8, r1
 800b444:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b448:	2700      	movs	r7, #0
 800b44a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b44e:	f1b9 0901 	subs.w	r9, r9, #1
 800b452:	d505      	bpl.n	800b460 <_fwalk_reent+0x24>
 800b454:	6824      	ldr	r4, [r4, #0]
 800b456:	2c00      	cmp	r4, #0
 800b458:	d1f7      	bne.n	800b44a <_fwalk_reent+0xe>
 800b45a:	4638      	mov	r0, r7
 800b45c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b460:	89ab      	ldrh	r3, [r5, #12]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d907      	bls.n	800b476 <_fwalk_reent+0x3a>
 800b466:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b46a:	3301      	adds	r3, #1
 800b46c:	d003      	beq.n	800b476 <_fwalk_reent+0x3a>
 800b46e:	4629      	mov	r1, r5
 800b470:	4630      	mov	r0, r6
 800b472:	47c0      	blx	r8
 800b474:	4307      	orrs	r7, r0
 800b476:	3568      	adds	r5, #104	; 0x68
 800b478:	e7e9      	b.n	800b44e <_fwalk_reent+0x12>
	...

0800b47c <__libc_init_array>:
 800b47c:	b570      	push	{r4, r5, r6, lr}
 800b47e:	4d0d      	ldr	r5, [pc, #52]	; (800b4b4 <__libc_init_array+0x38>)
 800b480:	4c0d      	ldr	r4, [pc, #52]	; (800b4b8 <__libc_init_array+0x3c>)
 800b482:	1b64      	subs	r4, r4, r5
 800b484:	10a4      	asrs	r4, r4, #2
 800b486:	2600      	movs	r6, #0
 800b488:	42a6      	cmp	r6, r4
 800b48a:	d109      	bne.n	800b4a0 <__libc_init_array+0x24>
 800b48c:	4d0b      	ldr	r5, [pc, #44]	; (800b4bc <__libc_init_array+0x40>)
 800b48e:	4c0c      	ldr	r4, [pc, #48]	; (800b4c0 <__libc_init_array+0x44>)
 800b490:	f001 f870 	bl	800c574 <_init>
 800b494:	1b64      	subs	r4, r4, r5
 800b496:	10a4      	asrs	r4, r4, #2
 800b498:	2600      	movs	r6, #0
 800b49a:	42a6      	cmp	r6, r4
 800b49c:	d105      	bne.n	800b4aa <__libc_init_array+0x2e>
 800b49e:	bd70      	pop	{r4, r5, r6, pc}
 800b4a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4a4:	4798      	blx	r3
 800b4a6:	3601      	adds	r6, #1
 800b4a8:	e7ee      	b.n	800b488 <__libc_init_array+0xc>
 800b4aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4ae:	4798      	blx	r3
 800b4b0:	3601      	adds	r6, #1
 800b4b2:	e7f2      	b.n	800b49a <__libc_init_array+0x1e>
 800b4b4:	08016150 	.word	0x08016150
 800b4b8:	08016150 	.word	0x08016150
 800b4bc:	08016150 	.word	0x08016150
 800b4c0:	08016154 	.word	0x08016154

0800b4c4 <__retarget_lock_init_recursive>:
 800b4c4:	4770      	bx	lr

0800b4c6 <__retarget_lock_acquire_recursive>:
 800b4c6:	4770      	bx	lr

0800b4c8 <__retarget_lock_release_recursive>:
 800b4c8:	4770      	bx	lr

0800b4ca <__swhatbuf_r>:
 800b4ca:	b570      	push	{r4, r5, r6, lr}
 800b4cc:	460e      	mov	r6, r1
 800b4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d2:	2900      	cmp	r1, #0
 800b4d4:	b096      	sub	sp, #88	; 0x58
 800b4d6:	4614      	mov	r4, r2
 800b4d8:	461d      	mov	r5, r3
 800b4da:	da07      	bge.n	800b4ec <__swhatbuf_r+0x22>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	602b      	str	r3, [r5, #0]
 800b4e0:	89b3      	ldrh	r3, [r6, #12]
 800b4e2:	061a      	lsls	r2, r3, #24
 800b4e4:	d410      	bmi.n	800b508 <__swhatbuf_r+0x3e>
 800b4e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4ea:	e00e      	b.n	800b50a <__swhatbuf_r+0x40>
 800b4ec:	466a      	mov	r2, sp
 800b4ee:	f000 fe07 	bl	800c100 <_fstat_r>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	dbf2      	blt.n	800b4dc <__swhatbuf_r+0x12>
 800b4f6:	9a01      	ldr	r2, [sp, #4]
 800b4f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b500:	425a      	negs	r2, r3
 800b502:	415a      	adcs	r2, r3
 800b504:	602a      	str	r2, [r5, #0]
 800b506:	e7ee      	b.n	800b4e6 <__swhatbuf_r+0x1c>
 800b508:	2340      	movs	r3, #64	; 0x40
 800b50a:	2000      	movs	r0, #0
 800b50c:	6023      	str	r3, [r4, #0]
 800b50e:	b016      	add	sp, #88	; 0x58
 800b510:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b514 <__smakebuf_r>:
 800b514:	898b      	ldrh	r3, [r1, #12]
 800b516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b518:	079d      	lsls	r5, r3, #30
 800b51a:	4606      	mov	r6, r0
 800b51c:	460c      	mov	r4, r1
 800b51e:	d507      	bpl.n	800b530 <__smakebuf_r+0x1c>
 800b520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b524:	6023      	str	r3, [r4, #0]
 800b526:	6123      	str	r3, [r4, #16]
 800b528:	2301      	movs	r3, #1
 800b52a:	6163      	str	r3, [r4, #20]
 800b52c:	b002      	add	sp, #8
 800b52e:	bd70      	pop	{r4, r5, r6, pc}
 800b530:	ab01      	add	r3, sp, #4
 800b532:	466a      	mov	r2, sp
 800b534:	f7ff ffc9 	bl	800b4ca <__swhatbuf_r>
 800b538:	9900      	ldr	r1, [sp, #0]
 800b53a:	4605      	mov	r5, r0
 800b53c:	4630      	mov	r0, r6
 800b53e:	f000 f88f 	bl	800b660 <_malloc_r>
 800b542:	b948      	cbnz	r0, 800b558 <__smakebuf_r+0x44>
 800b544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b548:	059a      	lsls	r2, r3, #22
 800b54a:	d4ef      	bmi.n	800b52c <__smakebuf_r+0x18>
 800b54c:	f023 0303 	bic.w	r3, r3, #3
 800b550:	f043 0302 	orr.w	r3, r3, #2
 800b554:	81a3      	strh	r3, [r4, #12]
 800b556:	e7e3      	b.n	800b520 <__smakebuf_r+0xc>
 800b558:	4b0d      	ldr	r3, [pc, #52]	; (800b590 <__smakebuf_r+0x7c>)
 800b55a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b55c:	89a3      	ldrh	r3, [r4, #12]
 800b55e:	6020      	str	r0, [r4, #0]
 800b560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b564:	81a3      	strh	r3, [r4, #12]
 800b566:	9b00      	ldr	r3, [sp, #0]
 800b568:	6163      	str	r3, [r4, #20]
 800b56a:	9b01      	ldr	r3, [sp, #4]
 800b56c:	6120      	str	r0, [r4, #16]
 800b56e:	b15b      	cbz	r3, 800b588 <__smakebuf_r+0x74>
 800b570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b574:	4630      	mov	r0, r6
 800b576:	f000 fdd5 	bl	800c124 <_isatty_r>
 800b57a:	b128      	cbz	r0, 800b588 <__smakebuf_r+0x74>
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	f023 0303 	bic.w	r3, r3, #3
 800b582:	f043 0301 	orr.w	r3, r3, #1
 800b586:	81a3      	strh	r3, [r4, #12]
 800b588:	89a0      	ldrh	r0, [r4, #12]
 800b58a:	4305      	orrs	r5, r0
 800b58c:	81a5      	strh	r5, [r4, #12]
 800b58e:	e7cd      	b.n	800b52c <__smakebuf_r+0x18>
 800b590:	0800b2b5 	.word	0x0800b2b5

0800b594 <memcpy>:
 800b594:	440a      	add	r2, r1
 800b596:	4291      	cmp	r1, r2
 800b598:	f100 33ff 	add.w	r3, r0, #4294967295
 800b59c:	d100      	bne.n	800b5a0 <memcpy+0xc>
 800b59e:	4770      	bx	lr
 800b5a0:	b510      	push	{r4, lr}
 800b5a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5aa:	4291      	cmp	r1, r2
 800b5ac:	d1f9      	bne.n	800b5a2 <memcpy+0xe>
 800b5ae:	bd10      	pop	{r4, pc}

0800b5b0 <memset>:
 800b5b0:	4402      	add	r2, r0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d100      	bne.n	800b5ba <memset+0xa>
 800b5b8:	4770      	bx	lr
 800b5ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b5be:	e7f9      	b.n	800b5b4 <memset+0x4>

0800b5c0 <_free_r>:
 800b5c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5c2:	2900      	cmp	r1, #0
 800b5c4:	d048      	beq.n	800b658 <_free_r+0x98>
 800b5c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ca:	9001      	str	r0, [sp, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f1a1 0404 	sub.w	r4, r1, #4
 800b5d2:	bfb8      	it	lt
 800b5d4:	18e4      	addlt	r4, r4, r3
 800b5d6:	f000 fde1 	bl	800c19c <__malloc_lock>
 800b5da:	4a20      	ldr	r2, [pc, #128]	; (800b65c <_free_r+0x9c>)
 800b5dc:	9801      	ldr	r0, [sp, #4]
 800b5de:	6813      	ldr	r3, [r2, #0]
 800b5e0:	4615      	mov	r5, r2
 800b5e2:	b933      	cbnz	r3, 800b5f2 <_free_r+0x32>
 800b5e4:	6063      	str	r3, [r4, #4]
 800b5e6:	6014      	str	r4, [r2, #0]
 800b5e8:	b003      	add	sp, #12
 800b5ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5ee:	f000 bddb 	b.w	800c1a8 <__malloc_unlock>
 800b5f2:	42a3      	cmp	r3, r4
 800b5f4:	d90b      	bls.n	800b60e <_free_r+0x4e>
 800b5f6:	6821      	ldr	r1, [r4, #0]
 800b5f8:	1862      	adds	r2, r4, r1
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	bf04      	itt	eq
 800b5fe:	681a      	ldreq	r2, [r3, #0]
 800b600:	685b      	ldreq	r3, [r3, #4]
 800b602:	6063      	str	r3, [r4, #4]
 800b604:	bf04      	itt	eq
 800b606:	1852      	addeq	r2, r2, r1
 800b608:	6022      	streq	r2, [r4, #0]
 800b60a:	602c      	str	r4, [r5, #0]
 800b60c:	e7ec      	b.n	800b5e8 <_free_r+0x28>
 800b60e:	461a      	mov	r2, r3
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	b10b      	cbz	r3, 800b618 <_free_r+0x58>
 800b614:	42a3      	cmp	r3, r4
 800b616:	d9fa      	bls.n	800b60e <_free_r+0x4e>
 800b618:	6811      	ldr	r1, [r2, #0]
 800b61a:	1855      	adds	r5, r2, r1
 800b61c:	42a5      	cmp	r5, r4
 800b61e:	d10b      	bne.n	800b638 <_free_r+0x78>
 800b620:	6824      	ldr	r4, [r4, #0]
 800b622:	4421      	add	r1, r4
 800b624:	1854      	adds	r4, r2, r1
 800b626:	42a3      	cmp	r3, r4
 800b628:	6011      	str	r1, [r2, #0]
 800b62a:	d1dd      	bne.n	800b5e8 <_free_r+0x28>
 800b62c:	681c      	ldr	r4, [r3, #0]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	6053      	str	r3, [r2, #4]
 800b632:	4421      	add	r1, r4
 800b634:	6011      	str	r1, [r2, #0]
 800b636:	e7d7      	b.n	800b5e8 <_free_r+0x28>
 800b638:	d902      	bls.n	800b640 <_free_r+0x80>
 800b63a:	230c      	movs	r3, #12
 800b63c:	6003      	str	r3, [r0, #0]
 800b63e:	e7d3      	b.n	800b5e8 <_free_r+0x28>
 800b640:	6825      	ldr	r5, [r4, #0]
 800b642:	1961      	adds	r1, r4, r5
 800b644:	428b      	cmp	r3, r1
 800b646:	bf04      	itt	eq
 800b648:	6819      	ldreq	r1, [r3, #0]
 800b64a:	685b      	ldreq	r3, [r3, #4]
 800b64c:	6063      	str	r3, [r4, #4]
 800b64e:	bf04      	itt	eq
 800b650:	1949      	addeq	r1, r1, r5
 800b652:	6021      	streq	r1, [r4, #0]
 800b654:	6054      	str	r4, [r2, #4]
 800b656:	e7c7      	b.n	800b5e8 <_free_r+0x28>
 800b658:	b003      	add	sp, #12
 800b65a:	bd30      	pop	{r4, r5, pc}
 800b65c:	2000a104 	.word	0x2000a104

0800b660 <_malloc_r>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	1ccd      	adds	r5, r1, #3
 800b664:	f025 0503 	bic.w	r5, r5, #3
 800b668:	3508      	adds	r5, #8
 800b66a:	2d0c      	cmp	r5, #12
 800b66c:	bf38      	it	cc
 800b66e:	250c      	movcc	r5, #12
 800b670:	2d00      	cmp	r5, #0
 800b672:	4606      	mov	r6, r0
 800b674:	db01      	blt.n	800b67a <_malloc_r+0x1a>
 800b676:	42a9      	cmp	r1, r5
 800b678:	d903      	bls.n	800b682 <_malloc_r+0x22>
 800b67a:	230c      	movs	r3, #12
 800b67c:	6033      	str	r3, [r6, #0]
 800b67e:	2000      	movs	r0, #0
 800b680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b682:	f000 fd8b 	bl	800c19c <__malloc_lock>
 800b686:	4921      	ldr	r1, [pc, #132]	; (800b70c <_malloc_r+0xac>)
 800b688:	680a      	ldr	r2, [r1, #0]
 800b68a:	4614      	mov	r4, r2
 800b68c:	b99c      	cbnz	r4, 800b6b6 <_malloc_r+0x56>
 800b68e:	4f20      	ldr	r7, [pc, #128]	; (800b710 <_malloc_r+0xb0>)
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	b923      	cbnz	r3, 800b69e <_malloc_r+0x3e>
 800b694:	4621      	mov	r1, r4
 800b696:	4630      	mov	r0, r6
 800b698:	f000 fba0 	bl	800bddc <_sbrk_r>
 800b69c:	6038      	str	r0, [r7, #0]
 800b69e:	4629      	mov	r1, r5
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	f000 fb9b 	bl	800bddc <_sbrk_r>
 800b6a6:	1c43      	adds	r3, r0, #1
 800b6a8:	d123      	bne.n	800b6f2 <_malloc_r+0x92>
 800b6aa:	230c      	movs	r3, #12
 800b6ac:	6033      	str	r3, [r6, #0]
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	f000 fd7a 	bl	800c1a8 <__malloc_unlock>
 800b6b4:	e7e3      	b.n	800b67e <_malloc_r+0x1e>
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	1b5b      	subs	r3, r3, r5
 800b6ba:	d417      	bmi.n	800b6ec <_malloc_r+0x8c>
 800b6bc:	2b0b      	cmp	r3, #11
 800b6be:	d903      	bls.n	800b6c8 <_malloc_r+0x68>
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	441c      	add	r4, r3
 800b6c4:	6025      	str	r5, [r4, #0]
 800b6c6:	e004      	b.n	800b6d2 <_malloc_r+0x72>
 800b6c8:	6863      	ldr	r3, [r4, #4]
 800b6ca:	42a2      	cmp	r2, r4
 800b6cc:	bf0c      	ite	eq
 800b6ce:	600b      	streq	r3, [r1, #0]
 800b6d0:	6053      	strne	r3, [r2, #4]
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f000 fd68 	bl	800c1a8 <__malloc_unlock>
 800b6d8:	f104 000b 	add.w	r0, r4, #11
 800b6dc:	1d23      	adds	r3, r4, #4
 800b6de:	f020 0007 	bic.w	r0, r0, #7
 800b6e2:	1ac2      	subs	r2, r0, r3
 800b6e4:	d0cc      	beq.n	800b680 <_malloc_r+0x20>
 800b6e6:	1a1b      	subs	r3, r3, r0
 800b6e8:	50a3      	str	r3, [r4, r2]
 800b6ea:	e7c9      	b.n	800b680 <_malloc_r+0x20>
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	6864      	ldr	r4, [r4, #4]
 800b6f0:	e7cc      	b.n	800b68c <_malloc_r+0x2c>
 800b6f2:	1cc4      	adds	r4, r0, #3
 800b6f4:	f024 0403 	bic.w	r4, r4, #3
 800b6f8:	42a0      	cmp	r0, r4
 800b6fa:	d0e3      	beq.n	800b6c4 <_malloc_r+0x64>
 800b6fc:	1a21      	subs	r1, r4, r0
 800b6fe:	4630      	mov	r0, r6
 800b700:	f000 fb6c 	bl	800bddc <_sbrk_r>
 800b704:	3001      	adds	r0, #1
 800b706:	d1dd      	bne.n	800b6c4 <_malloc_r+0x64>
 800b708:	e7cf      	b.n	800b6aa <_malloc_r+0x4a>
 800b70a:	bf00      	nop
 800b70c:	2000a104 	.word	0x2000a104
 800b710:	2000a108 	.word	0x2000a108

0800b714 <__sfputc_r>:
 800b714:	6893      	ldr	r3, [r2, #8]
 800b716:	3b01      	subs	r3, #1
 800b718:	2b00      	cmp	r3, #0
 800b71a:	b410      	push	{r4}
 800b71c:	6093      	str	r3, [r2, #8]
 800b71e:	da08      	bge.n	800b732 <__sfputc_r+0x1e>
 800b720:	6994      	ldr	r4, [r2, #24]
 800b722:	42a3      	cmp	r3, r4
 800b724:	db01      	blt.n	800b72a <__sfputc_r+0x16>
 800b726:	290a      	cmp	r1, #10
 800b728:	d103      	bne.n	800b732 <__sfputc_r+0x1e>
 800b72a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b72e:	f000 bbfd 	b.w	800bf2c <__swbuf_r>
 800b732:	6813      	ldr	r3, [r2, #0]
 800b734:	1c58      	adds	r0, r3, #1
 800b736:	6010      	str	r0, [r2, #0]
 800b738:	7019      	strb	r1, [r3, #0]
 800b73a:	4608      	mov	r0, r1
 800b73c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <__sfputs_r>:
 800b742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b744:	4606      	mov	r6, r0
 800b746:	460f      	mov	r7, r1
 800b748:	4614      	mov	r4, r2
 800b74a:	18d5      	adds	r5, r2, r3
 800b74c:	42ac      	cmp	r4, r5
 800b74e:	d101      	bne.n	800b754 <__sfputs_r+0x12>
 800b750:	2000      	movs	r0, #0
 800b752:	e007      	b.n	800b764 <__sfputs_r+0x22>
 800b754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b758:	463a      	mov	r2, r7
 800b75a:	4630      	mov	r0, r6
 800b75c:	f7ff ffda 	bl	800b714 <__sfputc_r>
 800b760:	1c43      	adds	r3, r0, #1
 800b762:	d1f3      	bne.n	800b74c <__sfputs_r+0xa>
 800b764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b768 <_vfiprintf_r>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	460d      	mov	r5, r1
 800b76e:	b09d      	sub	sp, #116	; 0x74
 800b770:	4614      	mov	r4, r2
 800b772:	4698      	mov	r8, r3
 800b774:	4606      	mov	r6, r0
 800b776:	b118      	cbz	r0, 800b780 <_vfiprintf_r+0x18>
 800b778:	6983      	ldr	r3, [r0, #24]
 800b77a:	b90b      	cbnz	r3, 800b780 <_vfiprintf_r+0x18>
 800b77c:	f7ff fdce 	bl	800b31c <__sinit>
 800b780:	4b89      	ldr	r3, [pc, #548]	; (800b9a8 <_vfiprintf_r+0x240>)
 800b782:	429d      	cmp	r5, r3
 800b784:	d11b      	bne.n	800b7be <_vfiprintf_r+0x56>
 800b786:	6875      	ldr	r5, [r6, #4]
 800b788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b78a:	07d9      	lsls	r1, r3, #31
 800b78c:	d405      	bmi.n	800b79a <_vfiprintf_r+0x32>
 800b78e:	89ab      	ldrh	r3, [r5, #12]
 800b790:	059a      	lsls	r2, r3, #22
 800b792:	d402      	bmi.n	800b79a <_vfiprintf_r+0x32>
 800b794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b796:	f7ff fe96 	bl	800b4c6 <__retarget_lock_acquire_recursive>
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	071b      	lsls	r3, r3, #28
 800b79e:	d501      	bpl.n	800b7a4 <_vfiprintf_r+0x3c>
 800b7a0:	692b      	ldr	r3, [r5, #16]
 800b7a2:	b9eb      	cbnz	r3, 800b7e0 <_vfiprintf_r+0x78>
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f000 fc24 	bl	800bff4 <__swsetup_r>
 800b7ac:	b1c0      	cbz	r0, 800b7e0 <_vfiprintf_r+0x78>
 800b7ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7b0:	07dc      	lsls	r4, r3, #31
 800b7b2:	d50e      	bpl.n	800b7d2 <_vfiprintf_r+0x6a>
 800b7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b8:	b01d      	add	sp, #116	; 0x74
 800b7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7be:	4b7b      	ldr	r3, [pc, #492]	; (800b9ac <_vfiprintf_r+0x244>)
 800b7c0:	429d      	cmp	r5, r3
 800b7c2:	d101      	bne.n	800b7c8 <_vfiprintf_r+0x60>
 800b7c4:	68b5      	ldr	r5, [r6, #8]
 800b7c6:	e7df      	b.n	800b788 <_vfiprintf_r+0x20>
 800b7c8:	4b79      	ldr	r3, [pc, #484]	; (800b9b0 <_vfiprintf_r+0x248>)
 800b7ca:	429d      	cmp	r5, r3
 800b7cc:	bf08      	it	eq
 800b7ce:	68f5      	ldreq	r5, [r6, #12]
 800b7d0:	e7da      	b.n	800b788 <_vfiprintf_r+0x20>
 800b7d2:	89ab      	ldrh	r3, [r5, #12]
 800b7d4:	0598      	lsls	r0, r3, #22
 800b7d6:	d4ed      	bmi.n	800b7b4 <_vfiprintf_r+0x4c>
 800b7d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7da:	f7ff fe75 	bl	800b4c8 <__retarget_lock_release_recursive>
 800b7de:	e7e9      	b.n	800b7b4 <_vfiprintf_r+0x4c>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e4:	2320      	movs	r3, #32
 800b7e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ee:	2330      	movs	r3, #48	; 0x30
 800b7f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9b4 <_vfiprintf_r+0x24c>
 800b7f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7f8:	f04f 0901 	mov.w	r9, #1
 800b7fc:	4623      	mov	r3, r4
 800b7fe:	469a      	mov	sl, r3
 800b800:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b804:	b10a      	cbz	r2, 800b80a <_vfiprintf_r+0xa2>
 800b806:	2a25      	cmp	r2, #37	; 0x25
 800b808:	d1f9      	bne.n	800b7fe <_vfiprintf_r+0x96>
 800b80a:	ebba 0b04 	subs.w	fp, sl, r4
 800b80e:	d00b      	beq.n	800b828 <_vfiprintf_r+0xc0>
 800b810:	465b      	mov	r3, fp
 800b812:	4622      	mov	r2, r4
 800b814:	4629      	mov	r1, r5
 800b816:	4630      	mov	r0, r6
 800b818:	f7ff ff93 	bl	800b742 <__sfputs_r>
 800b81c:	3001      	adds	r0, #1
 800b81e:	f000 80aa 	beq.w	800b976 <_vfiprintf_r+0x20e>
 800b822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b824:	445a      	add	r2, fp
 800b826:	9209      	str	r2, [sp, #36]	; 0x24
 800b828:	f89a 3000 	ldrb.w	r3, [sl]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f000 80a2 	beq.w	800b976 <_vfiprintf_r+0x20e>
 800b832:	2300      	movs	r3, #0
 800b834:	f04f 32ff 	mov.w	r2, #4294967295
 800b838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b83c:	f10a 0a01 	add.w	sl, sl, #1
 800b840:	9304      	str	r3, [sp, #16]
 800b842:	9307      	str	r3, [sp, #28]
 800b844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b848:	931a      	str	r3, [sp, #104]	; 0x68
 800b84a:	4654      	mov	r4, sl
 800b84c:	2205      	movs	r2, #5
 800b84e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b852:	4858      	ldr	r0, [pc, #352]	; (800b9b4 <_vfiprintf_r+0x24c>)
 800b854:	f7f4 fccc 	bl	80001f0 <memchr>
 800b858:	9a04      	ldr	r2, [sp, #16]
 800b85a:	b9d8      	cbnz	r0, 800b894 <_vfiprintf_r+0x12c>
 800b85c:	06d1      	lsls	r1, r2, #27
 800b85e:	bf44      	itt	mi
 800b860:	2320      	movmi	r3, #32
 800b862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b866:	0713      	lsls	r3, r2, #28
 800b868:	bf44      	itt	mi
 800b86a:	232b      	movmi	r3, #43	; 0x2b
 800b86c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b870:	f89a 3000 	ldrb.w	r3, [sl]
 800b874:	2b2a      	cmp	r3, #42	; 0x2a
 800b876:	d015      	beq.n	800b8a4 <_vfiprintf_r+0x13c>
 800b878:	9a07      	ldr	r2, [sp, #28]
 800b87a:	4654      	mov	r4, sl
 800b87c:	2000      	movs	r0, #0
 800b87e:	f04f 0c0a 	mov.w	ip, #10
 800b882:	4621      	mov	r1, r4
 800b884:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b888:	3b30      	subs	r3, #48	; 0x30
 800b88a:	2b09      	cmp	r3, #9
 800b88c:	d94e      	bls.n	800b92c <_vfiprintf_r+0x1c4>
 800b88e:	b1b0      	cbz	r0, 800b8be <_vfiprintf_r+0x156>
 800b890:	9207      	str	r2, [sp, #28]
 800b892:	e014      	b.n	800b8be <_vfiprintf_r+0x156>
 800b894:	eba0 0308 	sub.w	r3, r0, r8
 800b898:	fa09 f303 	lsl.w	r3, r9, r3
 800b89c:	4313      	orrs	r3, r2
 800b89e:	9304      	str	r3, [sp, #16]
 800b8a0:	46a2      	mov	sl, r4
 800b8a2:	e7d2      	b.n	800b84a <_vfiprintf_r+0xe2>
 800b8a4:	9b03      	ldr	r3, [sp, #12]
 800b8a6:	1d19      	adds	r1, r3, #4
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	9103      	str	r1, [sp, #12]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	bfbb      	ittet	lt
 800b8b0:	425b      	neglt	r3, r3
 800b8b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b8b6:	9307      	strge	r3, [sp, #28]
 800b8b8:	9307      	strlt	r3, [sp, #28]
 800b8ba:	bfb8      	it	lt
 800b8bc:	9204      	strlt	r2, [sp, #16]
 800b8be:	7823      	ldrb	r3, [r4, #0]
 800b8c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b8c2:	d10c      	bne.n	800b8de <_vfiprintf_r+0x176>
 800b8c4:	7863      	ldrb	r3, [r4, #1]
 800b8c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c8:	d135      	bne.n	800b936 <_vfiprintf_r+0x1ce>
 800b8ca:	9b03      	ldr	r3, [sp, #12]
 800b8cc:	1d1a      	adds	r2, r3, #4
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	9203      	str	r2, [sp, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	bfb8      	it	lt
 800b8d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8da:	3402      	adds	r4, #2
 800b8dc:	9305      	str	r3, [sp, #20]
 800b8de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b9c4 <_vfiprintf_r+0x25c>
 800b8e2:	7821      	ldrb	r1, [r4, #0]
 800b8e4:	2203      	movs	r2, #3
 800b8e6:	4650      	mov	r0, sl
 800b8e8:	f7f4 fc82 	bl	80001f0 <memchr>
 800b8ec:	b140      	cbz	r0, 800b900 <_vfiprintf_r+0x198>
 800b8ee:	2340      	movs	r3, #64	; 0x40
 800b8f0:	eba0 000a 	sub.w	r0, r0, sl
 800b8f4:	fa03 f000 	lsl.w	r0, r3, r0
 800b8f8:	9b04      	ldr	r3, [sp, #16]
 800b8fa:	4303      	orrs	r3, r0
 800b8fc:	3401      	adds	r4, #1
 800b8fe:	9304      	str	r3, [sp, #16]
 800b900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b904:	482c      	ldr	r0, [pc, #176]	; (800b9b8 <_vfiprintf_r+0x250>)
 800b906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b90a:	2206      	movs	r2, #6
 800b90c:	f7f4 fc70 	bl	80001f0 <memchr>
 800b910:	2800      	cmp	r0, #0
 800b912:	d03f      	beq.n	800b994 <_vfiprintf_r+0x22c>
 800b914:	4b29      	ldr	r3, [pc, #164]	; (800b9bc <_vfiprintf_r+0x254>)
 800b916:	bb1b      	cbnz	r3, 800b960 <_vfiprintf_r+0x1f8>
 800b918:	9b03      	ldr	r3, [sp, #12]
 800b91a:	3307      	adds	r3, #7
 800b91c:	f023 0307 	bic.w	r3, r3, #7
 800b920:	3308      	adds	r3, #8
 800b922:	9303      	str	r3, [sp, #12]
 800b924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b926:	443b      	add	r3, r7
 800b928:	9309      	str	r3, [sp, #36]	; 0x24
 800b92a:	e767      	b.n	800b7fc <_vfiprintf_r+0x94>
 800b92c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b930:	460c      	mov	r4, r1
 800b932:	2001      	movs	r0, #1
 800b934:	e7a5      	b.n	800b882 <_vfiprintf_r+0x11a>
 800b936:	2300      	movs	r3, #0
 800b938:	3401      	adds	r4, #1
 800b93a:	9305      	str	r3, [sp, #20]
 800b93c:	4619      	mov	r1, r3
 800b93e:	f04f 0c0a 	mov.w	ip, #10
 800b942:	4620      	mov	r0, r4
 800b944:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b948:	3a30      	subs	r2, #48	; 0x30
 800b94a:	2a09      	cmp	r2, #9
 800b94c:	d903      	bls.n	800b956 <_vfiprintf_r+0x1ee>
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d0c5      	beq.n	800b8de <_vfiprintf_r+0x176>
 800b952:	9105      	str	r1, [sp, #20]
 800b954:	e7c3      	b.n	800b8de <_vfiprintf_r+0x176>
 800b956:	fb0c 2101 	mla	r1, ip, r1, r2
 800b95a:	4604      	mov	r4, r0
 800b95c:	2301      	movs	r3, #1
 800b95e:	e7f0      	b.n	800b942 <_vfiprintf_r+0x1da>
 800b960:	ab03      	add	r3, sp, #12
 800b962:	9300      	str	r3, [sp, #0]
 800b964:	462a      	mov	r2, r5
 800b966:	4b16      	ldr	r3, [pc, #88]	; (800b9c0 <_vfiprintf_r+0x258>)
 800b968:	a904      	add	r1, sp, #16
 800b96a:	4630      	mov	r0, r6
 800b96c:	f3af 8000 	nop.w
 800b970:	4607      	mov	r7, r0
 800b972:	1c78      	adds	r0, r7, #1
 800b974:	d1d6      	bne.n	800b924 <_vfiprintf_r+0x1bc>
 800b976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b978:	07d9      	lsls	r1, r3, #31
 800b97a:	d405      	bmi.n	800b988 <_vfiprintf_r+0x220>
 800b97c:	89ab      	ldrh	r3, [r5, #12]
 800b97e:	059a      	lsls	r2, r3, #22
 800b980:	d402      	bmi.n	800b988 <_vfiprintf_r+0x220>
 800b982:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b984:	f7ff fda0 	bl	800b4c8 <__retarget_lock_release_recursive>
 800b988:	89ab      	ldrh	r3, [r5, #12]
 800b98a:	065b      	lsls	r3, r3, #25
 800b98c:	f53f af12 	bmi.w	800b7b4 <_vfiprintf_r+0x4c>
 800b990:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b992:	e711      	b.n	800b7b8 <_vfiprintf_r+0x50>
 800b994:	ab03      	add	r3, sp, #12
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	462a      	mov	r2, r5
 800b99a:	4b09      	ldr	r3, [pc, #36]	; (800b9c0 <_vfiprintf_r+0x258>)
 800b99c:	a904      	add	r1, sp, #16
 800b99e:	4630      	mov	r0, r6
 800b9a0:	f000 f880 	bl	800baa4 <_printf_i>
 800b9a4:	e7e4      	b.n	800b970 <_vfiprintf_r+0x208>
 800b9a6:	bf00      	nop
 800b9a8:	080160d0 	.word	0x080160d0
 800b9ac:	080160f0 	.word	0x080160f0
 800b9b0:	080160b0 	.word	0x080160b0
 800b9b4:	08016114 	.word	0x08016114
 800b9b8:	0801611e 	.word	0x0801611e
 800b9bc:	00000000 	.word	0x00000000
 800b9c0:	0800b743 	.word	0x0800b743
 800b9c4:	0801611a 	.word	0x0801611a

0800b9c8 <_printf_common>:
 800b9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9cc:	4616      	mov	r6, r2
 800b9ce:	4699      	mov	r9, r3
 800b9d0:	688a      	ldr	r2, [r1, #8]
 800b9d2:	690b      	ldr	r3, [r1, #16]
 800b9d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	bfb8      	it	lt
 800b9dc:	4613      	movlt	r3, r2
 800b9de:	6033      	str	r3, [r6, #0]
 800b9e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9e4:	4607      	mov	r7, r0
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	b10a      	cbz	r2, 800b9ee <_printf_common+0x26>
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	6033      	str	r3, [r6, #0]
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	0699      	lsls	r1, r3, #26
 800b9f2:	bf42      	ittt	mi
 800b9f4:	6833      	ldrmi	r3, [r6, #0]
 800b9f6:	3302      	addmi	r3, #2
 800b9f8:	6033      	strmi	r3, [r6, #0]
 800b9fa:	6825      	ldr	r5, [r4, #0]
 800b9fc:	f015 0506 	ands.w	r5, r5, #6
 800ba00:	d106      	bne.n	800ba10 <_printf_common+0x48>
 800ba02:	f104 0a19 	add.w	sl, r4, #25
 800ba06:	68e3      	ldr	r3, [r4, #12]
 800ba08:	6832      	ldr	r2, [r6, #0]
 800ba0a:	1a9b      	subs	r3, r3, r2
 800ba0c:	42ab      	cmp	r3, r5
 800ba0e:	dc26      	bgt.n	800ba5e <_printf_common+0x96>
 800ba10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba14:	1e13      	subs	r3, r2, #0
 800ba16:	6822      	ldr	r2, [r4, #0]
 800ba18:	bf18      	it	ne
 800ba1a:	2301      	movne	r3, #1
 800ba1c:	0692      	lsls	r2, r2, #26
 800ba1e:	d42b      	bmi.n	800ba78 <_printf_common+0xb0>
 800ba20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba24:	4649      	mov	r1, r9
 800ba26:	4638      	mov	r0, r7
 800ba28:	47c0      	blx	r8
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	d01e      	beq.n	800ba6c <_printf_common+0xa4>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	68e5      	ldr	r5, [r4, #12]
 800ba32:	6832      	ldr	r2, [r6, #0]
 800ba34:	f003 0306 	and.w	r3, r3, #6
 800ba38:	2b04      	cmp	r3, #4
 800ba3a:	bf08      	it	eq
 800ba3c:	1aad      	subeq	r5, r5, r2
 800ba3e:	68a3      	ldr	r3, [r4, #8]
 800ba40:	6922      	ldr	r2, [r4, #16]
 800ba42:	bf0c      	ite	eq
 800ba44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba48:	2500      	movne	r5, #0
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	bfc4      	itt	gt
 800ba4e:	1a9b      	subgt	r3, r3, r2
 800ba50:	18ed      	addgt	r5, r5, r3
 800ba52:	2600      	movs	r6, #0
 800ba54:	341a      	adds	r4, #26
 800ba56:	42b5      	cmp	r5, r6
 800ba58:	d11a      	bne.n	800ba90 <_printf_common+0xc8>
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	e008      	b.n	800ba70 <_printf_common+0xa8>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	4652      	mov	r2, sl
 800ba62:	4649      	mov	r1, r9
 800ba64:	4638      	mov	r0, r7
 800ba66:	47c0      	blx	r8
 800ba68:	3001      	adds	r0, #1
 800ba6a:	d103      	bne.n	800ba74 <_printf_common+0xac>
 800ba6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba74:	3501      	adds	r5, #1
 800ba76:	e7c6      	b.n	800ba06 <_printf_common+0x3e>
 800ba78:	18e1      	adds	r1, r4, r3
 800ba7a:	1c5a      	adds	r2, r3, #1
 800ba7c:	2030      	movs	r0, #48	; 0x30
 800ba7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba82:	4422      	add	r2, r4
 800ba84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba8c:	3302      	adds	r3, #2
 800ba8e:	e7c7      	b.n	800ba20 <_printf_common+0x58>
 800ba90:	2301      	movs	r3, #1
 800ba92:	4622      	mov	r2, r4
 800ba94:	4649      	mov	r1, r9
 800ba96:	4638      	mov	r0, r7
 800ba98:	47c0      	blx	r8
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	d0e6      	beq.n	800ba6c <_printf_common+0xa4>
 800ba9e:	3601      	adds	r6, #1
 800baa0:	e7d9      	b.n	800ba56 <_printf_common+0x8e>
	...

0800baa4 <_printf_i>:
 800baa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baa8:	460c      	mov	r4, r1
 800baaa:	4691      	mov	r9, r2
 800baac:	7e27      	ldrb	r7, [r4, #24]
 800baae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bab0:	2f78      	cmp	r7, #120	; 0x78
 800bab2:	4680      	mov	r8, r0
 800bab4:	469a      	mov	sl, r3
 800bab6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800baba:	d807      	bhi.n	800bacc <_printf_i+0x28>
 800babc:	2f62      	cmp	r7, #98	; 0x62
 800babe:	d80a      	bhi.n	800bad6 <_printf_i+0x32>
 800bac0:	2f00      	cmp	r7, #0
 800bac2:	f000 80d8 	beq.w	800bc76 <_printf_i+0x1d2>
 800bac6:	2f58      	cmp	r7, #88	; 0x58
 800bac8:	f000 80a3 	beq.w	800bc12 <_printf_i+0x16e>
 800bacc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bad4:	e03a      	b.n	800bb4c <_printf_i+0xa8>
 800bad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bada:	2b15      	cmp	r3, #21
 800badc:	d8f6      	bhi.n	800bacc <_printf_i+0x28>
 800bade:	a001      	add	r0, pc, #4	; (adr r0, 800bae4 <_printf_i+0x40>)
 800bae0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bae4:	0800bb3d 	.word	0x0800bb3d
 800bae8:	0800bb51 	.word	0x0800bb51
 800baec:	0800bacd 	.word	0x0800bacd
 800baf0:	0800bacd 	.word	0x0800bacd
 800baf4:	0800bacd 	.word	0x0800bacd
 800baf8:	0800bacd 	.word	0x0800bacd
 800bafc:	0800bb51 	.word	0x0800bb51
 800bb00:	0800bacd 	.word	0x0800bacd
 800bb04:	0800bacd 	.word	0x0800bacd
 800bb08:	0800bacd 	.word	0x0800bacd
 800bb0c:	0800bacd 	.word	0x0800bacd
 800bb10:	0800bc5d 	.word	0x0800bc5d
 800bb14:	0800bb81 	.word	0x0800bb81
 800bb18:	0800bc3f 	.word	0x0800bc3f
 800bb1c:	0800bacd 	.word	0x0800bacd
 800bb20:	0800bacd 	.word	0x0800bacd
 800bb24:	0800bc7f 	.word	0x0800bc7f
 800bb28:	0800bacd 	.word	0x0800bacd
 800bb2c:	0800bb81 	.word	0x0800bb81
 800bb30:	0800bacd 	.word	0x0800bacd
 800bb34:	0800bacd 	.word	0x0800bacd
 800bb38:	0800bc47 	.word	0x0800bc47
 800bb3c:	680b      	ldr	r3, [r1, #0]
 800bb3e:	1d1a      	adds	r2, r3, #4
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	600a      	str	r2, [r1, #0]
 800bb44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e0a3      	b.n	800bc98 <_printf_i+0x1f4>
 800bb50:	6825      	ldr	r5, [r4, #0]
 800bb52:	6808      	ldr	r0, [r1, #0]
 800bb54:	062e      	lsls	r6, r5, #24
 800bb56:	f100 0304 	add.w	r3, r0, #4
 800bb5a:	d50a      	bpl.n	800bb72 <_printf_i+0xce>
 800bb5c:	6805      	ldr	r5, [r0, #0]
 800bb5e:	600b      	str	r3, [r1, #0]
 800bb60:	2d00      	cmp	r5, #0
 800bb62:	da03      	bge.n	800bb6c <_printf_i+0xc8>
 800bb64:	232d      	movs	r3, #45	; 0x2d
 800bb66:	426d      	negs	r5, r5
 800bb68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb6c:	485e      	ldr	r0, [pc, #376]	; (800bce8 <_printf_i+0x244>)
 800bb6e:	230a      	movs	r3, #10
 800bb70:	e019      	b.n	800bba6 <_printf_i+0x102>
 800bb72:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bb76:	6805      	ldr	r5, [r0, #0]
 800bb78:	600b      	str	r3, [r1, #0]
 800bb7a:	bf18      	it	ne
 800bb7c:	b22d      	sxthne	r5, r5
 800bb7e:	e7ef      	b.n	800bb60 <_printf_i+0xbc>
 800bb80:	680b      	ldr	r3, [r1, #0]
 800bb82:	6825      	ldr	r5, [r4, #0]
 800bb84:	1d18      	adds	r0, r3, #4
 800bb86:	6008      	str	r0, [r1, #0]
 800bb88:	0628      	lsls	r0, r5, #24
 800bb8a:	d501      	bpl.n	800bb90 <_printf_i+0xec>
 800bb8c:	681d      	ldr	r5, [r3, #0]
 800bb8e:	e002      	b.n	800bb96 <_printf_i+0xf2>
 800bb90:	0669      	lsls	r1, r5, #25
 800bb92:	d5fb      	bpl.n	800bb8c <_printf_i+0xe8>
 800bb94:	881d      	ldrh	r5, [r3, #0]
 800bb96:	4854      	ldr	r0, [pc, #336]	; (800bce8 <_printf_i+0x244>)
 800bb98:	2f6f      	cmp	r7, #111	; 0x6f
 800bb9a:	bf0c      	ite	eq
 800bb9c:	2308      	moveq	r3, #8
 800bb9e:	230a      	movne	r3, #10
 800bba0:	2100      	movs	r1, #0
 800bba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bba6:	6866      	ldr	r6, [r4, #4]
 800bba8:	60a6      	str	r6, [r4, #8]
 800bbaa:	2e00      	cmp	r6, #0
 800bbac:	bfa2      	ittt	ge
 800bbae:	6821      	ldrge	r1, [r4, #0]
 800bbb0:	f021 0104 	bicge.w	r1, r1, #4
 800bbb4:	6021      	strge	r1, [r4, #0]
 800bbb6:	b90d      	cbnz	r5, 800bbbc <_printf_i+0x118>
 800bbb8:	2e00      	cmp	r6, #0
 800bbba:	d04d      	beq.n	800bc58 <_printf_i+0x1b4>
 800bbbc:	4616      	mov	r6, r2
 800bbbe:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbc2:	fb03 5711 	mls	r7, r3, r1, r5
 800bbc6:	5dc7      	ldrb	r7, [r0, r7]
 800bbc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbcc:	462f      	mov	r7, r5
 800bbce:	42bb      	cmp	r3, r7
 800bbd0:	460d      	mov	r5, r1
 800bbd2:	d9f4      	bls.n	800bbbe <_printf_i+0x11a>
 800bbd4:	2b08      	cmp	r3, #8
 800bbd6:	d10b      	bne.n	800bbf0 <_printf_i+0x14c>
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	07df      	lsls	r7, r3, #31
 800bbdc:	d508      	bpl.n	800bbf0 <_printf_i+0x14c>
 800bbde:	6923      	ldr	r3, [r4, #16]
 800bbe0:	6861      	ldr	r1, [r4, #4]
 800bbe2:	4299      	cmp	r1, r3
 800bbe4:	bfde      	ittt	le
 800bbe6:	2330      	movle	r3, #48	; 0x30
 800bbe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbf0:	1b92      	subs	r2, r2, r6
 800bbf2:	6122      	str	r2, [r4, #16]
 800bbf4:	f8cd a000 	str.w	sl, [sp]
 800bbf8:	464b      	mov	r3, r9
 800bbfa:	aa03      	add	r2, sp, #12
 800bbfc:	4621      	mov	r1, r4
 800bbfe:	4640      	mov	r0, r8
 800bc00:	f7ff fee2 	bl	800b9c8 <_printf_common>
 800bc04:	3001      	adds	r0, #1
 800bc06:	d14c      	bne.n	800bca2 <_printf_i+0x1fe>
 800bc08:	f04f 30ff 	mov.w	r0, #4294967295
 800bc0c:	b004      	add	sp, #16
 800bc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc12:	4835      	ldr	r0, [pc, #212]	; (800bce8 <_printf_i+0x244>)
 800bc14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	680e      	ldr	r6, [r1, #0]
 800bc1c:	061f      	lsls	r7, r3, #24
 800bc1e:	f856 5b04 	ldr.w	r5, [r6], #4
 800bc22:	600e      	str	r6, [r1, #0]
 800bc24:	d514      	bpl.n	800bc50 <_printf_i+0x1ac>
 800bc26:	07d9      	lsls	r1, r3, #31
 800bc28:	bf44      	itt	mi
 800bc2a:	f043 0320 	orrmi.w	r3, r3, #32
 800bc2e:	6023      	strmi	r3, [r4, #0]
 800bc30:	b91d      	cbnz	r5, 800bc3a <_printf_i+0x196>
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	f023 0320 	bic.w	r3, r3, #32
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	2310      	movs	r3, #16
 800bc3c:	e7b0      	b.n	800bba0 <_printf_i+0xfc>
 800bc3e:	6823      	ldr	r3, [r4, #0]
 800bc40:	f043 0320 	orr.w	r3, r3, #32
 800bc44:	6023      	str	r3, [r4, #0]
 800bc46:	2378      	movs	r3, #120	; 0x78
 800bc48:	4828      	ldr	r0, [pc, #160]	; (800bcec <_printf_i+0x248>)
 800bc4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc4e:	e7e3      	b.n	800bc18 <_printf_i+0x174>
 800bc50:	065e      	lsls	r6, r3, #25
 800bc52:	bf48      	it	mi
 800bc54:	b2ad      	uxthmi	r5, r5
 800bc56:	e7e6      	b.n	800bc26 <_printf_i+0x182>
 800bc58:	4616      	mov	r6, r2
 800bc5a:	e7bb      	b.n	800bbd4 <_printf_i+0x130>
 800bc5c:	680b      	ldr	r3, [r1, #0]
 800bc5e:	6826      	ldr	r6, [r4, #0]
 800bc60:	6960      	ldr	r0, [r4, #20]
 800bc62:	1d1d      	adds	r5, r3, #4
 800bc64:	600d      	str	r5, [r1, #0]
 800bc66:	0635      	lsls	r5, r6, #24
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	d501      	bpl.n	800bc70 <_printf_i+0x1cc>
 800bc6c:	6018      	str	r0, [r3, #0]
 800bc6e:	e002      	b.n	800bc76 <_printf_i+0x1d2>
 800bc70:	0671      	lsls	r1, r6, #25
 800bc72:	d5fb      	bpl.n	800bc6c <_printf_i+0x1c8>
 800bc74:	8018      	strh	r0, [r3, #0]
 800bc76:	2300      	movs	r3, #0
 800bc78:	6123      	str	r3, [r4, #16]
 800bc7a:	4616      	mov	r6, r2
 800bc7c:	e7ba      	b.n	800bbf4 <_printf_i+0x150>
 800bc7e:	680b      	ldr	r3, [r1, #0]
 800bc80:	1d1a      	adds	r2, r3, #4
 800bc82:	600a      	str	r2, [r1, #0]
 800bc84:	681e      	ldr	r6, [r3, #0]
 800bc86:	6862      	ldr	r2, [r4, #4]
 800bc88:	2100      	movs	r1, #0
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	f7f4 fab0 	bl	80001f0 <memchr>
 800bc90:	b108      	cbz	r0, 800bc96 <_printf_i+0x1f2>
 800bc92:	1b80      	subs	r0, r0, r6
 800bc94:	6060      	str	r0, [r4, #4]
 800bc96:	6863      	ldr	r3, [r4, #4]
 800bc98:	6123      	str	r3, [r4, #16]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bca0:	e7a8      	b.n	800bbf4 <_printf_i+0x150>
 800bca2:	6923      	ldr	r3, [r4, #16]
 800bca4:	4632      	mov	r2, r6
 800bca6:	4649      	mov	r1, r9
 800bca8:	4640      	mov	r0, r8
 800bcaa:	47d0      	blx	sl
 800bcac:	3001      	adds	r0, #1
 800bcae:	d0ab      	beq.n	800bc08 <_printf_i+0x164>
 800bcb0:	6823      	ldr	r3, [r4, #0]
 800bcb2:	079b      	lsls	r3, r3, #30
 800bcb4:	d413      	bmi.n	800bcde <_printf_i+0x23a>
 800bcb6:	68e0      	ldr	r0, [r4, #12]
 800bcb8:	9b03      	ldr	r3, [sp, #12]
 800bcba:	4298      	cmp	r0, r3
 800bcbc:	bfb8      	it	lt
 800bcbe:	4618      	movlt	r0, r3
 800bcc0:	e7a4      	b.n	800bc0c <_printf_i+0x168>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4632      	mov	r2, r6
 800bcc6:	4649      	mov	r1, r9
 800bcc8:	4640      	mov	r0, r8
 800bcca:	47d0      	blx	sl
 800bccc:	3001      	adds	r0, #1
 800bcce:	d09b      	beq.n	800bc08 <_printf_i+0x164>
 800bcd0:	3501      	adds	r5, #1
 800bcd2:	68e3      	ldr	r3, [r4, #12]
 800bcd4:	9903      	ldr	r1, [sp, #12]
 800bcd6:	1a5b      	subs	r3, r3, r1
 800bcd8:	42ab      	cmp	r3, r5
 800bcda:	dcf2      	bgt.n	800bcc2 <_printf_i+0x21e>
 800bcdc:	e7eb      	b.n	800bcb6 <_printf_i+0x212>
 800bcde:	2500      	movs	r5, #0
 800bce0:	f104 0619 	add.w	r6, r4, #25
 800bce4:	e7f5      	b.n	800bcd2 <_printf_i+0x22e>
 800bce6:	bf00      	nop
 800bce8:	08016125 	.word	0x08016125
 800bcec:	08016136 	.word	0x08016136

0800bcf0 <_puts_r>:
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	460e      	mov	r6, r1
 800bcf4:	4605      	mov	r5, r0
 800bcf6:	b118      	cbz	r0, 800bd00 <_puts_r+0x10>
 800bcf8:	6983      	ldr	r3, [r0, #24]
 800bcfa:	b90b      	cbnz	r3, 800bd00 <_puts_r+0x10>
 800bcfc:	f7ff fb0e 	bl	800b31c <__sinit>
 800bd00:	69ab      	ldr	r3, [r5, #24]
 800bd02:	68ac      	ldr	r4, [r5, #8]
 800bd04:	b913      	cbnz	r3, 800bd0c <_puts_r+0x1c>
 800bd06:	4628      	mov	r0, r5
 800bd08:	f7ff fb08 	bl	800b31c <__sinit>
 800bd0c:	4b2c      	ldr	r3, [pc, #176]	; (800bdc0 <_puts_r+0xd0>)
 800bd0e:	429c      	cmp	r4, r3
 800bd10:	d120      	bne.n	800bd54 <_puts_r+0x64>
 800bd12:	686c      	ldr	r4, [r5, #4]
 800bd14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd16:	07db      	lsls	r3, r3, #31
 800bd18:	d405      	bmi.n	800bd26 <_puts_r+0x36>
 800bd1a:	89a3      	ldrh	r3, [r4, #12]
 800bd1c:	0598      	lsls	r0, r3, #22
 800bd1e:	d402      	bmi.n	800bd26 <_puts_r+0x36>
 800bd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd22:	f7ff fbd0 	bl	800b4c6 <__retarget_lock_acquire_recursive>
 800bd26:	89a3      	ldrh	r3, [r4, #12]
 800bd28:	0719      	lsls	r1, r3, #28
 800bd2a:	d51d      	bpl.n	800bd68 <_puts_r+0x78>
 800bd2c:	6923      	ldr	r3, [r4, #16]
 800bd2e:	b1db      	cbz	r3, 800bd68 <_puts_r+0x78>
 800bd30:	3e01      	subs	r6, #1
 800bd32:	68a3      	ldr	r3, [r4, #8]
 800bd34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	60a3      	str	r3, [r4, #8]
 800bd3c:	bb39      	cbnz	r1, 800bd8e <_puts_r+0x9e>
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	da38      	bge.n	800bdb4 <_puts_r+0xc4>
 800bd42:	4622      	mov	r2, r4
 800bd44:	210a      	movs	r1, #10
 800bd46:	4628      	mov	r0, r5
 800bd48:	f000 f8f0 	bl	800bf2c <__swbuf_r>
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	d011      	beq.n	800bd74 <_puts_r+0x84>
 800bd50:	250a      	movs	r5, #10
 800bd52:	e011      	b.n	800bd78 <_puts_r+0x88>
 800bd54:	4b1b      	ldr	r3, [pc, #108]	; (800bdc4 <_puts_r+0xd4>)
 800bd56:	429c      	cmp	r4, r3
 800bd58:	d101      	bne.n	800bd5e <_puts_r+0x6e>
 800bd5a:	68ac      	ldr	r4, [r5, #8]
 800bd5c:	e7da      	b.n	800bd14 <_puts_r+0x24>
 800bd5e:	4b1a      	ldr	r3, [pc, #104]	; (800bdc8 <_puts_r+0xd8>)
 800bd60:	429c      	cmp	r4, r3
 800bd62:	bf08      	it	eq
 800bd64:	68ec      	ldreq	r4, [r5, #12]
 800bd66:	e7d5      	b.n	800bd14 <_puts_r+0x24>
 800bd68:	4621      	mov	r1, r4
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	f000 f942 	bl	800bff4 <__swsetup_r>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d0dd      	beq.n	800bd30 <_puts_r+0x40>
 800bd74:	f04f 35ff 	mov.w	r5, #4294967295
 800bd78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd7a:	07da      	lsls	r2, r3, #31
 800bd7c:	d405      	bmi.n	800bd8a <_puts_r+0x9a>
 800bd7e:	89a3      	ldrh	r3, [r4, #12]
 800bd80:	059b      	lsls	r3, r3, #22
 800bd82:	d402      	bmi.n	800bd8a <_puts_r+0x9a>
 800bd84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd86:	f7ff fb9f 	bl	800b4c8 <__retarget_lock_release_recursive>
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	bd70      	pop	{r4, r5, r6, pc}
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	da04      	bge.n	800bd9c <_puts_r+0xac>
 800bd92:	69a2      	ldr	r2, [r4, #24]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	dc06      	bgt.n	800bda6 <_puts_r+0xb6>
 800bd98:	290a      	cmp	r1, #10
 800bd9a:	d004      	beq.n	800bda6 <_puts_r+0xb6>
 800bd9c:	6823      	ldr	r3, [r4, #0]
 800bd9e:	1c5a      	adds	r2, r3, #1
 800bda0:	6022      	str	r2, [r4, #0]
 800bda2:	7019      	strb	r1, [r3, #0]
 800bda4:	e7c5      	b.n	800bd32 <_puts_r+0x42>
 800bda6:	4622      	mov	r2, r4
 800bda8:	4628      	mov	r0, r5
 800bdaa:	f000 f8bf 	bl	800bf2c <__swbuf_r>
 800bdae:	3001      	adds	r0, #1
 800bdb0:	d1bf      	bne.n	800bd32 <_puts_r+0x42>
 800bdb2:	e7df      	b.n	800bd74 <_puts_r+0x84>
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	250a      	movs	r5, #10
 800bdb8:	1c5a      	adds	r2, r3, #1
 800bdba:	6022      	str	r2, [r4, #0]
 800bdbc:	701d      	strb	r5, [r3, #0]
 800bdbe:	e7db      	b.n	800bd78 <_puts_r+0x88>
 800bdc0:	080160d0 	.word	0x080160d0
 800bdc4:	080160f0 	.word	0x080160f0
 800bdc8:	080160b0 	.word	0x080160b0

0800bdcc <puts>:
 800bdcc:	4b02      	ldr	r3, [pc, #8]	; (800bdd8 <puts+0xc>)
 800bdce:	4601      	mov	r1, r0
 800bdd0:	6818      	ldr	r0, [r3, #0]
 800bdd2:	f7ff bf8d 	b.w	800bcf0 <_puts_r>
 800bdd6:	bf00      	nop
 800bdd8:	20000030 	.word	0x20000030

0800bddc <_sbrk_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	4d06      	ldr	r5, [pc, #24]	; (800bdf8 <_sbrk_r+0x1c>)
 800bde0:	2300      	movs	r3, #0
 800bde2:	4604      	mov	r4, r0
 800bde4:	4608      	mov	r0, r1
 800bde6:	602b      	str	r3, [r5, #0]
 800bde8:	f7f7 fa44 	bl	8003274 <_sbrk>
 800bdec:	1c43      	adds	r3, r0, #1
 800bdee:	d102      	bne.n	800bdf6 <_sbrk_r+0x1a>
 800bdf0:	682b      	ldr	r3, [r5, #0]
 800bdf2:	b103      	cbz	r3, 800bdf6 <_sbrk_r+0x1a>
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	bd38      	pop	{r3, r4, r5, pc}
 800bdf8:	2000adb4 	.word	0x2000adb4

0800bdfc <sniprintf>:
 800bdfc:	b40c      	push	{r2, r3}
 800bdfe:	b530      	push	{r4, r5, lr}
 800be00:	4b17      	ldr	r3, [pc, #92]	; (800be60 <sniprintf+0x64>)
 800be02:	1e0c      	subs	r4, r1, #0
 800be04:	681d      	ldr	r5, [r3, #0]
 800be06:	b09d      	sub	sp, #116	; 0x74
 800be08:	da08      	bge.n	800be1c <sniprintf+0x20>
 800be0a:	238b      	movs	r3, #139	; 0x8b
 800be0c:	602b      	str	r3, [r5, #0]
 800be0e:	f04f 30ff 	mov.w	r0, #4294967295
 800be12:	b01d      	add	sp, #116	; 0x74
 800be14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be18:	b002      	add	sp, #8
 800be1a:	4770      	bx	lr
 800be1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800be20:	f8ad 3014 	strh.w	r3, [sp, #20]
 800be24:	bf14      	ite	ne
 800be26:	f104 33ff 	addne.w	r3, r4, #4294967295
 800be2a:	4623      	moveq	r3, r4
 800be2c:	9304      	str	r3, [sp, #16]
 800be2e:	9307      	str	r3, [sp, #28]
 800be30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be34:	9002      	str	r0, [sp, #8]
 800be36:	9006      	str	r0, [sp, #24]
 800be38:	f8ad 3016 	strh.w	r3, [sp, #22]
 800be3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800be3e:	ab21      	add	r3, sp, #132	; 0x84
 800be40:	a902      	add	r1, sp, #8
 800be42:	4628      	mov	r0, r5
 800be44:	9301      	str	r3, [sp, #4]
 800be46:	f000 fa37 	bl	800c2b8 <_svfiprintf_r>
 800be4a:	1c43      	adds	r3, r0, #1
 800be4c:	bfbc      	itt	lt
 800be4e:	238b      	movlt	r3, #139	; 0x8b
 800be50:	602b      	strlt	r3, [r5, #0]
 800be52:	2c00      	cmp	r4, #0
 800be54:	d0dd      	beq.n	800be12 <sniprintf+0x16>
 800be56:	9b02      	ldr	r3, [sp, #8]
 800be58:	2200      	movs	r2, #0
 800be5a:	701a      	strb	r2, [r3, #0]
 800be5c:	e7d9      	b.n	800be12 <sniprintf+0x16>
 800be5e:	bf00      	nop
 800be60:	20000030 	.word	0x20000030

0800be64 <siprintf>:
 800be64:	b40e      	push	{r1, r2, r3}
 800be66:	b500      	push	{lr}
 800be68:	b09c      	sub	sp, #112	; 0x70
 800be6a:	ab1d      	add	r3, sp, #116	; 0x74
 800be6c:	9002      	str	r0, [sp, #8]
 800be6e:	9006      	str	r0, [sp, #24]
 800be70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be74:	4809      	ldr	r0, [pc, #36]	; (800be9c <siprintf+0x38>)
 800be76:	9107      	str	r1, [sp, #28]
 800be78:	9104      	str	r1, [sp, #16]
 800be7a:	4909      	ldr	r1, [pc, #36]	; (800bea0 <siprintf+0x3c>)
 800be7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be80:	9105      	str	r1, [sp, #20]
 800be82:	6800      	ldr	r0, [r0, #0]
 800be84:	9301      	str	r3, [sp, #4]
 800be86:	a902      	add	r1, sp, #8
 800be88:	f000 fa16 	bl	800c2b8 <_svfiprintf_r>
 800be8c:	9b02      	ldr	r3, [sp, #8]
 800be8e:	2200      	movs	r2, #0
 800be90:	701a      	strb	r2, [r3, #0]
 800be92:	b01c      	add	sp, #112	; 0x70
 800be94:	f85d eb04 	ldr.w	lr, [sp], #4
 800be98:	b003      	add	sp, #12
 800be9a:	4770      	bx	lr
 800be9c:	20000030 	.word	0x20000030
 800bea0:	ffff0208 	.word	0xffff0208

0800bea4 <__sread>:
 800bea4:	b510      	push	{r4, lr}
 800bea6:	460c      	mov	r4, r1
 800bea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beac:	f000 fb04 	bl	800c4b8 <_read_r>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	bfab      	itete	ge
 800beb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800beb6:	89a3      	ldrhlt	r3, [r4, #12]
 800beb8:	181b      	addge	r3, r3, r0
 800beba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bebe:	bfac      	ite	ge
 800bec0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bec2:	81a3      	strhlt	r3, [r4, #12]
 800bec4:	bd10      	pop	{r4, pc}

0800bec6 <__swrite>:
 800bec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beca:	461f      	mov	r7, r3
 800becc:	898b      	ldrh	r3, [r1, #12]
 800bece:	05db      	lsls	r3, r3, #23
 800bed0:	4605      	mov	r5, r0
 800bed2:	460c      	mov	r4, r1
 800bed4:	4616      	mov	r6, r2
 800bed6:	d505      	bpl.n	800bee4 <__swrite+0x1e>
 800bed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bedc:	2302      	movs	r3, #2
 800bede:	2200      	movs	r2, #0
 800bee0:	f000 f930 	bl	800c144 <_lseek_r>
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800beee:	81a3      	strh	r3, [r4, #12]
 800bef0:	4632      	mov	r2, r6
 800bef2:	463b      	mov	r3, r7
 800bef4:	4628      	mov	r0, r5
 800bef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800befa:	f000 b869 	b.w	800bfd0 <_write_r>

0800befe <__sseek>:
 800befe:	b510      	push	{r4, lr}
 800bf00:	460c      	mov	r4, r1
 800bf02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf06:	f000 f91d 	bl	800c144 <_lseek_r>
 800bf0a:	1c43      	adds	r3, r0, #1
 800bf0c:	89a3      	ldrh	r3, [r4, #12]
 800bf0e:	bf15      	itete	ne
 800bf10:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf1a:	81a3      	strheq	r3, [r4, #12]
 800bf1c:	bf18      	it	ne
 800bf1e:	81a3      	strhne	r3, [r4, #12]
 800bf20:	bd10      	pop	{r4, pc}

0800bf22 <__sclose>:
 800bf22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf26:	f000 b8db 	b.w	800c0e0 <_close_r>
	...

0800bf2c <__swbuf_r>:
 800bf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2e:	460e      	mov	r6, r1
 800bf30:	4614      	mov	r4, r2
 800bf32:	4605      	mov	r5, r0
 800bf34:	b118      	cbz	r0, 800bf3e <__swbuf_r+0x12>
 800bf36:	6983      	ldr	r3, [r0, #24]
 800bf38:	b90b      	cbnz	r3, 800bf3e <__swbuf_r+0x12>
 800bf3a:	f7ff f9ef 	bl	800b31c <__sinit>
 800bf3e:	4b21      	ldr	r3, [pc, #132]	; (800bfc4 <__swbuf_r+0x98>)
 800bf40:	429c      	cmp	r4, r3
 800bf42:	d12b      	bne.n	800bf9c <__swbuf_r+0x70>
 800bf44:	686c      	ldr	r4, [r5, #4]
 800bf46:	69a3      	ldr	r3, [r4, #24]
 800bf48:	60a3      	str	r3, [r4, #8]
 800bf4a:	89a3      	ldrh	r3, [r4, #12]
 800bf4c:	071a      	lsls	r2, r3, #28
 800bf4e:	d52f      	bpl.n	800bfb0 <__swbuf_r+0x84>
 800bf50:	6923      	ldr	r3, [r4, #16]
 800bf52:	b36b      	cbz	r3, 800bfb0 <__swbuf_r+0x84>
 800bf54:	6923      	ldr	r3, [r4, #16]
 800bf56:	6820      	ldr	r0, [r4, #0]
 800bf58:	1ac0      	subs	r0, r0, r3
 800bf5a:	6963      	ldr	r3, [r4, #20]
 800bf5c:	b2f6      	uxtb	r6, r6
 800bf5e:	4283      	cmp	r3, r0
 800bf60:	4637      	mov	r7, r6
 800bf62:	dc04      	bgt.n	800bf6e <__swbuf_r+0x42>
 800bf64:	4621      	mov	r1, r4
 800bf66:	4628      	mov	r0, r5
 800bf68:	f7ff f932 	bl	800b1d0 <_fflush_r>
 800bf6c:	bb30      	cbnz	r0, 800bfbc <__swbuf_r+0x90>
 800bf6e:	68a3      	ldr	r3, [r4, #8]
 800bf70:	3b01      	subs	r3, #1
 800bf72:	60a3      	str	r3, [r4, #8]
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	1c5a      	adds	r2, r3, #1
 800bf78:	6022      	str	r2, [r4, #0]
 800bf7a:	701e      	strb	r6, [r3, #0]
 800bf7c:	6963      	ldr	r3, [r4, #20]
 800bf7e:	3001      	adds	r0, #1
 800bf80:	4283      	cmp	r3, r0
 800bf82:	d004      	beq.n	800bf8e <__swbuf_r+0x62>
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	07db      	lsls	r3, r3, #31
 800bf88:	d506      	bpl.n	800bf98 <__swbuf_r+0x6c>
 800bf8a:	2e0a      	cmp	r6, #10
 800bf8c:	d104      	bne.n	800bf98 <__swbuf_r+0x6c>
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4628      	mov	r0, r5
 800bf92:	f7ff f91d 	bl	800b1d0 <_fflush_r>
 800bf96:	b988      	cbnz	r0, 800bfbc <__swbuf_r+0x90>
 800bf98:	4638      	mov	r0, r7
 800bf9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf9c:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <__swbuf_r+0x9c>)
 800bf9e:	429c      	cmp	r4, r3
 800bfa0:	d101      	bne.n	800bfa6 <__swbuf_r+0x7a>
 800bfa2:	68ac      	ldr	r4, [r5, #8]
 800bfa4:	e7cf      	b.n	800bf46 <__swbuf_r+0x1a>
 800bfa6:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <__swbuf_r+0xa0>)
 800bfa8:	429c      	cmp	r4, r3
 800bfaa:	bf08      	it	eq
 800bfac:	68ec      	ldreq	r4, [r5, #12]
 800bfae:	e7ca      	b.n	800bf46 <__swbuf_r+0x1a>
 800bfb0:	4621      	mov	r1, r4
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	f000 f81e 	bl	800bff4 <__swsetup_r>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d0cb      	beq.n	800bf54 <__swbuf_r+0x28>
 800bfbc:	f04f 37ff 	mov.w	r7, #4294967295
 800bfc0:	e7ea      	b.n	800bf98 <__swbuf_r+0x6c>
 800bfc2:	bf00      	nop
 800bfc4:	080160d0 	.word	0x080160d0
 800bfc8:	080160f0 	.word	0x080160f0
 800bfcc:	080160b0 	.word	0x080160b0

0800bfd0 <_write_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	4d07      	ldr	r5, [pc, #28]	; (800bff0 <_write_r+0x20>)
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	4608      	mov	r0, r1
 800bfd8:	4611      	mov	r1, r2
 800bfda:	2200      	movs	r2, #0
 800bfdc:	602a      	str	r2, [r5, #0]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	f7f7 f8f7 	bl	80031d2 <_write>
 800bfe4:	1c43      	adds	r3, r0, #1
 800bfe6:	d102      	bne.n	800bfee <_write_r+0x1e>
 800bfe8:	682b      	ldr	r3, [r5, #0]
 800bfea:	b103      	cbz	r3, 800bfee <_write_r+0x1e>
 800bfec:	6023      	str	r3, [r4, #0]
 800bfee:	bd38      	pop	{r3, r4, r5, pc}
 800bff0:	2000adb4 	.word	0x2000adb4

0800bff4 <__swsetup_r>:
 800bff4:	4b32      	ldr	r3, [pc, #200]	; (800c0c0 <__swsetup_r+0xcc>)
 800bff6:	b570      	push	{r4, r5, r6, lr}
 800bff8:	681d      	ldr	r5, [r3, #0]
 800bffa:	4606      	mov	r6, r0
 800bffc:	460c      	mov	r4, r1
 800bffe:	b125      	cbz	r5, 800c00a <__swsetup_r+0x16>
 800c000:	69ab      	ldr	r3, [r5, #24]
 800c002:	b913      	cbnz	r3, 800c00a <__swsetup_r+0x16>
 800c004:	4628      	mov	r0, r5
 800c006:	f7ff f989 	bl	800b31c <__sinit>
 800c00a:	4b2e      	ldr	r3, [pc, #184]	; (800c0c4 <__swsetup_r+0xd0>)
 800c00c:	429c      	cmp	r4, r3
 800c00e:	d10f      	bne.n	800c030 <__swsetup_r+0x3c>
 800c010:	686c      	ldr	r4, [r5, #4]
 800c012:	89a3      	ldrh	r3, [r4, #12]
 800c014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c018:	0719      	lsls	r1, r3, #28
 800c01a:	d42c      	bmi.n	800c076 <__swsetup_r+0x82>
 800c01c:	06dd      	lsls	r5, r3, #27
 800c01e:	d411      	bmi.n	800c044 <__swsetup_r+0x50>
 800c020:	2309      	movs	r3, #9
 800c022:	6033      	str	r3, [r6, #0]
 800c024:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c028:	81a3      	strh	r3, [r4, #12]
 800c02a:	f04f 30ff 	mov.w	r0, #4294967295
 800c02e:	e03e      	b.n	800c0ae <__swsetup_r+0xba>
 800c030:	4b25      	ldr	r3, [pc, #148]	; (800c0c8 <__swsetup_r+0xd4>)
 800c032:	429c      	cmp	r4, r3
 800c034:	d101      	bne.n	800c03a <__swsetup_r+0x46>
 800c036:	68ac      	ldr	r4, [r5, #8]
 800c038:	e7eb      	b.n	800c012 <__swsetup_r+0x1e>
 800c03a:	4b24      	ldr	r3, [pc, #144]	; (800c0cc <__swsetup_r+0xd8>)
 800c03c:	429c      	cmp	r4, r3
 800c03e:	bf08      	it	eq
 800c040:	68ec      	ldreq	r4, [r5, #12]
 800c042:	e7e6      	b.n	800c012 <__swsetup_r+0x1e>
 800c044:	0758      	lsls	r0, r3, #29
 800c046:	d512      	bpl.n	800c06e <__swsetup_r+0x7a>
 800c048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c04a:	b141      	cbz	r1, 800c05e <__swsetup_r+0x6a>
 800c04c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c050:	4299      	cmp	r1, r3
 800c052:	d002      	beq.n	800c05a <__swsetup_r+0x66>
 800c054:	4630      	mov	r0, r6
 800c056:	f7ff fab3 	bl	800b5c0 <_free_r>
 800c05a:	2300      	movs	r3, #0
 800c05c:	6363      	str	r3, [r4, #52]	; 0x34
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c064:	81a3      	strh	r3, [r4, #12]
 800c066:	2300      	movs	r3, #0
 800c068:	6063      	str	r3, [r4, #4]
 800c06a:	6923      	ldr	r3, [r4, #16]
 800c06c:	6023      	str	r3, [r4, #0]
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	f043 0308 	orr.w	r3, r3, #8
 800c074:	81a3      	strh	r3, [r4, #12]
 800c076:	6923      	ldr	r3, [r4, #16]
 800c078:	b94b      	cbnz	r3, 800c08e <__swsetup_r+0x9a>
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c084:	d003      	beq.n	800c08e <__swsetup_r+0x9a>
 800c086:	4621      	mov	r1, r4
 800c088:	4630      	mov	r0, r6
 800c08a:	f7ff fa43 	bl	800b514 <__smakebuf_r>
 800c08e:	89a0      	ldrh	r0, [r4, #12]
 800c090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c094:	f010 0301 	ands.w	r3, r0, #1
 800c098:	d00a      	beq.n	800c0b0 <__swsetup_r+0xbc>
 800c09a:	2300      	movs	r3, #0
 800c09c:	60a3      	str	r3, [r4, #8]
 800c09e:	6963      	ldr	r3, [r4, #20]
 800c0a0:	425b      	negs	r3, r3
 800c0a2:	61a3      	str	r3, [r4, #24]
 800c0a4:	6923      	ldr	r3, [r4, #16]
 800c0a6:	b943      	cbnz	r3, 800c0ba <__swsetup_r+0xc6>
 800c0a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0ac:	d1ba      	bne.n	800c024 <__swsetup_r+0x30>
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}
 800c0b0:	0781      	lsls	r1, r0, #30
 800c0b2:	bf58      	it	pl
 800c0b4:	6963      	ldrpl	r3, [r4, #20]
 800c0b6:	60a3      	str	r3, [r4, #8]
 800c0b8:	e7f4      	b.n	800c0a4 <__swsetup_r+0xb0>
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	e7f7      	b.n	800c0ae <__swsetup_r+0xba>
 800c0be:	bf00      	nop
 800c0c0:	20000030 	.word	0x20000030
 800c0c4:	080160d0 	.word	0x080160d0
 800c0c8:	080160f0 	.word	0x080160f0
 800c0cc:	080160b0 	.word	0x080160b0

0800c0d0 <abort>:
 800c0d0:	b508      	push	{r3, lr}
 800c0d2:	2006      	movs	r0, #6
 800c0d4:	f000 fa2a 	bl	800c52c <raise>
 800c0d8:	2001      	movs	r0, #1
 800c0da:	f7f7 f853 	bl	8003184 <_exit>
	...

0800c0e0 <_close_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d06      	ldr	r5, [pc, #24]	; (800c0fc <_close_r+0x1c>)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	4608      	mov	r0, r1
 800c0ea:	602b      	str	r3, [r5, #0]
 800c0ec:	f7f7 f88d 	bl	800320a <_close>
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	d102      	bne.n	800c0fa <_close_r+0x1a>
 800c0f4:	682b      	ldr	r3, [r5, #0]
 800c0f6:	b103      	cbz	r3, 800c0fa <_close_r+0x1a>
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	bd38      	pop	{r3, r4, r5, pc}
 800c0fc:	2000adb4 	.word	0x2000adb4

0800c100 <_fstat_r>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4d07      	ldr	r5, [pc, #28]	; (800c120 <_fstat_r+0x20>)
 800c104:	2300      	movs	r3, #0
 800c106:	4604      	mov	r4, r0
 800c108:	4608      	mov	r0, r1
 800c10a:	4611      	mov	r1, r2
 800c10c:	602b      	str	r3, [r5, #0]
 800c10e:	f7f7 f888 	bl	8003222 <_fstat>
 800c112:	1c43      	adds	r3, r0, #1
 800c114:	d102      	bne.n	800c11c <_fstat_r+0x1c>
 800c116:	682b      	ldr	r3, [r5, #0]
 800c118:	b103      	cbz	r3, 800c11c <_fstat_r+0x1c>
 800c11a:	6023      	str	r3, [r4, #0]
 800c11c:	bd38      	pop	{r3, r4, r5, pc}
 800c11e:	bf00      	nop
 800c120:	2000adb4 	.word	0x2000adb4

0800c124 <_isatty_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4d06      	ldr	r5, [pc, #24]	; (800c140 <_isatty_r+0x1c>)
 800c128:	2300      	movs	r3, #0
 800c12a:	4604      	mov	r4, r0
 800c12c:	4608      	mov	r0, r1
 800c12e:	602b      	str	r3, [r5, #0]
 800c130:	f7f7 f887 	bl	8003242 <_isatty>
 800c134:	1c43      	adds	r3, r0, #1
 800c136:	d102      	bne.n	800c13e <_isatty_r+0x1a>
 800c138:	682b      	ldr	r3, [r5, #0]
 800c13a:	b103      	cbz	r3, 800c13e <_isatty_r+0x1a>
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	bd38      	pop	{r3, r4, r5, pc}
 800c140:	2000adb4 	.word	0x2000adb4

0800c144 <_lseek_r>:
 800c144:	b538      	push	{r3, r4, r5, lr}
 800c146:	4d07      	ldr	r5, [pc, #28]	; (800c164 <_lseek_r+0x20>)
 800c148:	4604      	mov	r4, r0
 800c14a:	4608      	mov	r0, r1
 800c14c:	4611      	mov	r1, r2
 800c14e:	2200      	movs	r2, #0
 800c150:	602a      	str	r2, [r5, #0]
 800c152:	461a      	mov	r2, r3
 800c154:	f7f7 f880 	bl	8003258 <_lseek>
 800c158:	1c43      	adds	r3, r0, #1
 800c15a:	d102      	bne.n	800c162 <_lseek_r+0x1e>
 800c15c:	682b      	ldr	r3, [r5, #0]
 800c15e:	b103      	cbz	r3, 800c162 <_lseek_r+0x1e>
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	2000adb4 	.word	0x2000adb4

0800c168 <memmove>:
 800c168:	4288      	cmp	r0, r1
 800c16a:	b510      	push	{r4, lr}
 800c16c:	eb01 0402 	add.w	r4, r1, r2
 800c170:	d902      	bls.n	800c178 <memmove+0x10>
 800c172:	4284      	cmp	r4, r0
 800c174:	4623      	mov	r3, r4
 800c176:	d807      	bhi.n	800c188 <memmove+0x20>
 800c178:	1e43      	subs	r3, r0, #1
 800c17a:	42a1      	cmp	r1, r4
 800c17c:	d008      	beq.n	800c190 <memmove+0x28>
 800c17e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c182:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c186:	e7f8      	b.n	800c17a <memmove+0x12>
 800c188:	4402      	add	r2, r0
 800c18a:	4601      	mov	r1, r0
 800c18c:	428a      	cmp	r2, r1
 800c18e:	d100      	bne.n	800c192 <memmove+0x2a>
 800c190:	bd10      	pop	{r4, pc}
 800c192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c19a:	e7f7      	b.n	800c18c <memmove+0x24>

0800c19c <__malloc_lock>:
 800c19c:	4801      	ldr	r0, [pc, #4]	; (800c1a4 <__malloc_lock+0x8>)
 800c19e:	f7ff b992 	b.w	800b4c6 <__retarget_lock_acquire_recursive>
 800c1a2:	bf00      	nop
 800c1a4:	2000adac 	.word	0x2000adac

0800c1a8 <__malloc_unlock>:
 800c1a8:	4801      	ldr	r0, [pc, #4]	; (800c1b0 <__malloc_unlock+0x8>)
 800c1aa:	f7ff b98d 	b.w	800b4c8 <__retarget_lock_release_recursive>
 800c1ae:	bf00      	nop
 800c1b0:	2000adac 	.word	0x2000adac

0800c1b4 <_realloc_r>:
 800c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b6:	4607      	mov	r7, r0
 800c1b8:	4614      	mov	r4, r2
 800c1ba:	460e      	mov	r6, r1
 800c1bc:	b921      	cbnz	r1, 800c1c8 <_realloc_r+0x14>
 800c1be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	f7ff ba4c 	b.w	800b660 <_malloc_r>
 800c1c8:	b922      	cbnz	r2, 800c1d4 <_realloc_r+0x20>
 800c1ca:	f7ff f9f9 	bl	800b5c0 <_free_r>
 800c1ce:	4625      	mov	r5, r4
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1d4:	f000 f9c6 	bl	800c564 <_malloc_usable_size_r>
 800c1d8:	42a0      	cmp	r0, r4
 800c1da:	d20f      	bcs.n	800c1fc <_realloc_r+0x48>
 800c1dc:	4621      	mov	r1, r4
 800c1de:	4638      	mov	r0, r7
 800c1e0:	f7ff fa3e 	bl	800b660 <_malloc_r>
 800c1e4:	4605      	mov	r5, r0
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d0f2      	beq.n	800c1d0 <_realloc_r+0x1c>
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	f7ff f9d1 	bl	800b594 <memcpy>
 800c1f2:	4631      	mov	r1, r6
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	f7ff f9e3 	bl	800b5c0 <_free_r>
 800c1fa:	e7e9      	b.n	800c1d0 <_realloc_r+0x1c>
 800c1fc:	4635      	mov	r5, r6
 800c1fe:	e7e7      	b.n	800c1d0 <_realloc_r+0x1c>

0800c200 <__ssputs_r>:
 800c200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c204:	688e      	ldr	r6, [r1, #8]
 800c206:	429e      	cmp	r6, r3
 800c208:	4682      	mov	sl, r0
 800c20a:	460c      	mov	r4, r1
 800c20c:	4690      	mov	r8, r2
 800c20e:	461f      	mov	r7, r3
 800c210:	d838      	bhi.n	800c284 <__ssputs_r+0x84>
 800c212:	898a      	ldrh	r2, [r1, #12]
 800c214:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c218:	d032      	beq.n	800c280 <__ssputs_r+0x80>
 800c21a:	6825      	ldr	r5, [r4, #0]
 800c21c:	6909      	ldr	r1, [r1, #16]
 800c21e:	eba5 0901 	sub.w	r9, r5, r1
 800c222:	6965      	ldr	r5, [r4, #20]
 800c224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c22c:	3301      	adds	r3, #1
 800c22e:	444b      	add	r3, r9
 800c230:	106d      	asrs	r5, r5, #1
 800c232:	429d      	cmp	r5, r3
 800c234:	bf38      	it	cc
 800c236:	461d      	movcc	r5, r3
 800c238:	0553      	lsls	r3, r2, #21
 800c23a:	d531      	bpl.n	800c2a0 <__ssputs_r+0xa0>
 800c23c:	4629      	mov	r1, r5
 800c23e:	f7ff fa0f 	bl	800b660 <_malloc_r>
 800c242:	4606      	mov	r6, r0
 800c244:	b950      	cbnz	r0, 800c25c <__ssputs_r+0x5c>
 800c246:	230c      	movs	r3, #12
 800c248:	f8ca 3000 	str.w	r3, [sl]
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c252:	81a3      	strh	r3, [r4, #12]
 800c254:	f04f 30ff 	mov.w	r0, #4294967295
 800c258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c25c:	6921      	ldr	r1, [r4, #16]
 800c25e:	464a      	mov	r2, r9
 800c260:	f7ff f998 	bl	800b594 <memcpy>
 800c264:	89a3      	ldrh	r3, [r4, #12]
 800c266:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c26a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c26e:	81a3      	strh	r3, [r4, #12]
 800c270:	6126      	str	r6, [r4, #16]
 800c272:	6165      	str	r5, [r4, #20]
 800c274:	444e      	add	r6, r9
 800c276:	eba5 0509 	sub.w	r5, r5, r9
 800c27a:	6026      	str	r6, [r4, #0]
 800c27c:	60a5      	str	r5, [r4, #8]
 800c27e:	463e      	mov	r6, r7
 800c280:	42be      	cmp	r6, r7
 800c282:	d900      	bls.n	800c286 <__ssputs_r+0x86>
 800c284:	463e      	mov	r6, r7
 800c286:	4632      	mov	r2, r6
 800c288:	6820      	ldr	r0, [r4, #0]
 800c28a:	4641      	mov	r1, r8
 800c28c:	f7ff ff6c 	bl	800c168 <memmove>
 800c290:	68a3      	ldr	r3, [r4, #8]
 800c292:	6822      	ldr	r2, [r4, #0]
 800c294:	1b9b      	subs	r3, r3, r6
 800c296:	4432      	add	r2, r6
 800c298:	60a3      	str	r3, [r4, #8]
 800c29a:	6022      	str	r2, [r4, #0]
 800c29c:	2000      	movs	r0, #0
 800c29e:	e7db      	b.n	800c258 <__ssputs_r+0x58>
 800c2a0:	462a      	mov	r2, r5
 800c2a2:	f7ff ff87 	bl	800c1b4 <_realloc_r>
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	d1e1      	bne.n	800c270 <__ssputs_r+0x70>
 800c2ac:	6921      	ldr	r1, [r4, #16]
 800c2ae:	4650      	mov	r0, sl
 800c2b0:	f7ff f986 	bl	800b5c0 <_free_r>
 800c2b4:	e7c7      	b.n	800c246 <__ssputs_r+0x46>
	...

0800c2b8 <_svfiprintf_r>:
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	4698      	mov	r8, r3
 800c2be:	898b      	ldrh	r3, [r1, #12]
 800c2c0:	061b      	lsls	r3, r3, #24
 800c2c2:	b09d      	sub	sp, #116	; 0x74
 800c2c4:	4607      	mov	r7, r0
 800c2c6:	460d      	mov	r5, r1
 800c2c8:	4614      	mov	r4, r2
 800c2ca:	d50e      	bpl.n	800c2ea <_svfiprintf_r+0x32>
 800c2cc:	690b      	ldr	r3, [r1, #16]
 800c2ce:	b963      	cbnz	r3, 800c2ea <_svfiprintf_r+0x32>
 800c2d0:	2140      	movs	r1, #64	; 0x40
 800c2d2:	f7ff f9c5 	bl	800b660 <_malloc_r>
 800c2d6:	6028      	str	r0, [r5, #0]
 800c2d8:	6128      	str	r0, [r5, #16]
 800c2da:	b920      	cbnz	r0, 800c2e6 <_svfiprintf_r+0x2e>
 800c2dc:	230c      	movs	r3, #12
 800c2de:	603b      	str	r3, [r7, #0]
 800c2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e4:	e0d1      	b.n	800c48a <_svfiprintf_r+0x1d2>
 800c2e6:	2340      	movs	r3, #64	; 0x40
 800c2e8:	616b      	str	r3, [r5, #20]
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c2ee:	2320      	movs	r3, #32
 800c2f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2f8:	2330      	movs	r3, #48	; 0x30
 800c2fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c4a4 <_svfiprintf_r+0x1ec>
 800c2fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c302:	f04f 0901 	mov.w	r9, #1
 800c306:	4623      	mov	r3, r4
 800c308:	469a      	mov	sl, r3
 800c30a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c30e:	b10a      	cbz	r2, 800c314 <_svfiprintf_r+0x5c>
 800c310:	2a25      	cmp	r2, #37	; 0x25
 800c312:	d1f9      	bne.n	800c308 <_svfiprintf_r+0x50>
 800c314:	ebba 0b04 	subs.w	fp, sl, r4
 800c318:	d00b      	beq.n	800c332 <_svfiprintf_r+0x7a>
 800c31a:	465b      	mov	r3, fp
 800c31c:	4622      	mov	r2, r4
 800c31e:	4629      	mov	r1, r5
 800c320:	4638      	mov	r0, r7
 800c322:	f7ff ff6d 	bl	800c200 <__ssputs_r>
 800c326:	3001      	adds	r0, #1
 800c328:	f000 80aa 	beq.w	800c480 <_svfiprintf_r+0x1c8>
 800c32c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c32e:	445a      	add	r2, fp
 800c330:	9209      	str	r2, [sp, #36]	; 0x24
 800c332:	f89a 3000 	ldrb.w	r3, [sl]
 800c336:	2b00      	cmp	r3, #0
 800c338:	f000 80a2 	beq.w	800c480 <_svfiprintf_r+0x1c8>
 800c33c:	2300      	movs	r3, #0
 800c33e:	f04f 32ff 	mov.w	r2, #4294967295
 800c342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c346:	f10a 0a01 	add.w	sl, sl, #1
 800c34a:	9304      	str	r3, [sp, #16]
 800c34c:	9307      	str	r3, [sp, #28]
 800c34e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c352:	931a      	str	r3, [sp, #104]	; 0x68
 800c354:	4654      	mov	r4, sl
 800c356:	2205      	movs	r2, #5
 800c358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c35c:	4851      	ldr	r0, [pc, #324]	; (800c4a4 <_svfiprintf_r+0x1ec>)
 800c35e:	f7f3 ff47 	bl	80001f0 <memchr>
 800c362:	9a04      	ldr	r2, [sp, #16]
 800c364:	b9d8      	cbnz	r0, 800c39e <_svfiprintf_r+0xe6>
 800c366:	06d0      	lsls	r0, r2, #27
 800c368:	bf44      	itt	mi
 800c36a:	2320      	movmi	r3, #32
 800c36c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c370:	0711      	lsls	r1, r2, #28
 800c372:	bf44      	itt	mi
 800c374:	232b      	movmi	r3, #43	; 0x2b
 800c376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c37a:	f89a 3000 	ldrb.w	r3, [sl]
 800c37e:	2b2a      	cmp	r3, #42	; 0x2a
 800c380:	d015      	beq.n	800c3ae <_svfiprintf_r+0xf6>
 800c382:	9a07      	ldr	r2, [sp, #28]
 800c384:	4654      	mov	r4, sl
 800c386:	2000      	movs	r0, #0
 800c388:	f04f 0c0a 	mov.w	ip, #10
 800c38c:	4621      	mov	r1, r4
 800c38e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c392:	3b30      	subs	r3, #48	; 0x30
 800c394:	2b09      	cmp	r3, #9
 800c396:	d94e      	bls.n	800c436 <_svfiprintf_r+0x17e>
 800c398:	b1b0      	cbz	r0, 800c3c8 <_svfiprintf_r+0x110>
 800c39a:	9207      	str	r2, [sp, #28]
 800c39c:	e014      	b.n	800c3c8 <_svfiprintf_r+0x110>
 800c39e:	eba0 0308 	sub.w	r3, r0, r8
 800c3a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	9304      	str	r3, [sp, #16]
 800c3aa:	46a2      	mov	sl, r4
 800c3ac:	e7d2      	b.n	800c354 <_svfiprintf_r+0x9c>
 800c3ae:	9b03      	ldr	r3, [sp, #12]
 800c3b0:	1d19      	adds	r1, r3, #4
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	9103      	str	r1, [sp, #12]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	bfbb      	ittet	lt
 800c3ba:	425b      	neglt	r3, r3
 800c3bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c3c0:	9307      	strge	r3, [sp, #28]
 800c3c2:	9307      	strlt	r3, [sp, #28]
 800c3c4:	bfb8      	it	lt
 800c3c6:	9204      	strlt	r2, [sp, #16]
 800c3c8:	7823      	ldrb	r3, [r4, #0]
 800c3ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c3cc:	d10c      	bne.n	800c3e8 <_svfiprintf_r+0x130>
 800c3ce:	7863      	ldrb	r3, [r4, #1]
 800c3d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c3d2:	d135      	bne.n	800c440 <_svfiprintf_r+0x188>
 800c3d4:	9b03      	ldr	r3, [sp, #12]
 800c3d6:	1d1a      	adds	r2, r3, #4
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	9203      	str	r2, [sp, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	bfb8      	it	lt
 800c3e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3e4:	3402      	adds	r4, #2
 800c3e6:	9305      	str	r3, [sp, #20]
 800c3e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c4b4 <_svfiprintf_r+0x1fc>
 800c3ec:	7821      	ldrb	r1, [r4, #0]
 800c3ee:	2203      	movs	r2, #3
 800c3f0:	4650      	mov	r0, sl
 800c3f2:	f7f3 fefd 	bl	80001f0 <memchr>
 800c3f6:	b140      	cbz	r0, 800c40a <_svfiprintf_r+0x152>
 800c3f8:	2340      	movs	r3, #64	; 0x40
 800c3fa:	eba0 000a 	sub.w	r0, r0, sl
 800c3fe:	fa03 f000 	lsl.w	r0, r3, r0
 800c402:	9b04      	ldr	r3, [sp, #16]
 800c404:	4303      	orrs	r3, r0
 800c406:	3401      	adds	r4, #1
 800c408:	9304      	str	r3, [sp, #16]
 800c40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c40e:	4826      	ldr	r0, [pc, #152]	; (800c4a8 <_svfiprintf_r+0x1f0>)
 800c410:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c414:	2206      	movs	r2, #6
 800c416:	f7f3 feeb 	bl	80001f0 <memchr>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d038      	beq.n	800c490 <_svfiprintf_r+0x1d8>
 800c41e:	4b23      	ldr	r3, [pc, #140]	; (800c4ac <_svfiprintf_r+0x1f4>)
 800c420:	bb1b      	cbnz	r3, 800c46a <_svfiprintf_r+0x1b2>
 800c422:	9b03      	ldr	r3, [sp, #12]
 800c424:	3307      	adds	r3, #7
 800c426:	f023 0307 	bic.w	r3, r3, #7
 800c42a:	3308      	adds	r3, #8
 800c42c:	9303      	str	r3, [sp, #12]
 800c42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c430:	4433      	add	r3, r6
 800c432:	9309      	str	r3, [sp, #36]	; 0x24
 800c434:	e767      	b.n	800c306 <_svfiprintf_r+0x4e>
 800c436:	fb0c 3202 	mla	r2, ip, r2, r3
 800c43a:	460c      	mov	r4, r1
 800c43c:	2001      	movs	r0, #1
 800c43e:	e7a5      	b.n	800c38c <_svfiprintf_r+0xd4>
 800c440:	2300      	movs	r3, #0
 800c442:	3401      	adds	r4, #1
 800c444:	9305      	str	r3, [sp, #20]
 800c446:	4619      	mov	r1, r3
 800c448:	f04f 0c0a 	mov.w	ip, #10
 800c44c:	4620      	mov	r0, r4
 800c44e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c452:	3a30      	subs	r2, #48	; 0x30
 800c454:	2a09      	cmp	r2, #9
 800c456:	d903      	bls.n	800c460 <_svfiprintf_r+0x1a8>
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d0c5      	beq.n	800c3e8 <_svfiprintf_r+0x130>
 800c45c:	9105      	str	r1, [sp, #20]
 800c45e:	e7c3      	b.n	800c3e8 <_svfiprintf_r+0x130>
 800c460:	fb0c 2101 	mla	r1, ip, r1, r2
 800c464:	4604      	mov	r4, r0
 800c466:	2301      	movs	r3, #1
 800c468:	e7f0      	b.n	800c44c <_svfiprintf_r+0x194>
 800c46a:	ab03      	add	r3, sp, #12
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	462a      	mov	r2, r5
 800c470:	4b0f      	ldr	r3, [pc, #60]	; (800c4b0 <_svfiprintf_r+0x1f8>)
 800c472:	a904      	add	r1, sp, #16
 800c474:	4638      	mov	r0, r7
 800c476:	f3af 8000 	nop.w
 800c47a:	1c42      	adds	r2, r0, #1
 800c47c:	4606      	mov	r6, r0
 800c47e:	d1d6      	bne.n	800c42e <_svfiprintf_r+0x176>
 800c480:	89ab      	ldrh	r3, [r5, #12]
 800c482:	065b      	lsls	r3, r3, #25
 800c484:	f53f af2c 	bmi.w	800c2e0 <_svfiprintf_r+0x28>
 800c488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c48a:	b01d      	add	sp, #116	; 0x74
 800c48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c490:	ab03      	add	r3, sp, #12
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	462a      	mov	r2, r5
 800c496:	4b06      	ldr	r3, [pc, #24]	; (800c4b0 <_svfiprintf_r+0x1f8>)
 800c498:	a904      	add	r1, sp, #16
 800c49a:	4638      	mov	r0, r7
 800c49c:	f7ff fb02 	bl	800baa4 <_printf_i>
 800c4a0:	e7eb      	b.n	800c47a <_svfiprintf_r+0x1c2>
 800c4a2:	bf00      	nop
 800c4a4:	08016114 	.word	0x08016114
 800c4a8:	0801611e 	.word	0x0801611e
 800c4ac:	00000000 	.word	0x00000000
 800c4b0:	0800c201 	.word	0x0800c201
 800c4b4:	0801611a 	.word	0x0801611a

0800c4b8 <_read_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	4d07      	ldr	r5, [pc, #28]	; (800c4d8 <_read_r+0x20>)
 800c4bc:	4604      	mov	r4, r0
 800c4be:	4608      	mov	r0, r1
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	602a      	str	r2, [r5, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f7f6 fe66 	bl	8003198 <_read>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_read_r+0x1e>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_read_r+0x1e>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	2000adb4 	.word	0x2000adb4

0800c4dc <_raise_r>:
 800c4dc:	291f      	cmp	r1, #31
 800c4de:	b538      	push	{r3, r4, r5, lr}
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	460d      	mov	r5, r1
 800c4e4:	d904      	bls.n	800c4f0 <_raise_r+0x14>
 800c4e6:	2316      	movs	r3, #22
 800c4e8:	6003      	str	r3, [r0, #0]
 800c4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ee:	bd38      	pop	{r3, r4, r5, pc}
 800c4f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4f2:	b112      	cbz	r2, 800c4fa <_raise_r+0x1e>
 800c4f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4f8:	b94b      	cbnz	r3, 800c50e <_raise_r+0x32>
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f000 f830 	bl	800c560 <_getpid_r>
 800c500:	462a      	mov	r2, r5
 800c502:	4601      	mov	r1, r0
 800c504:	4620      	mov	r0, r4
 800c506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c50a:	f000 b817 	b.w	800c53c <_kill_r>
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d00a      	beq.n	800c528 <_raise_r+0x4c>
 800c512:	1c59      	adds	r1, r3, #1
 800c514:	d103      	bne.n	800c51e <_raise_r+0x42>
 800c516:	2316      	movs	r3, #22
 800c518:	6003      	str	r3, [r0, #0]
 800c51a:	2001      	movs	r0, #1
 800c51c:	e7e7      	b.n	800c4ee <_raise_r+0x12>
 800c51e:	2400      	movs	r4, #0
 800c520:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c524:	4628      	mov	r0, r5
 800c526:	4798      	blx	r3
 800c528:	2000      	movs	r0, #0
 800c52a:	e7e0      	b.n	800c4ee <_raise_r+0x12>

0800c52c <raise>:
 800c52c:	4b02      	ldr	r3, [pc, #8]	; (800c538 <raise+0xc>)
 800c52e:	4601      	mov	r1, r0
 800c530:	6818      	ldr	r0, [r3, #0]
 800c532:	f7ff bfd3 	b.w	800c4dc <_raise_r>
 800c536:	bf00      	nop
 800c538:	20000030 	.word	0x20000030

0800c53c <_kill_r>:
 800c53c:	b538      	push	{r3, r4, r5, lr}
 800c53e:	4d07      	ldr	r5, [pc, #28]	; (800c55c <_kill_r+0x20>)
 800c540:	2300      	movs	r3, #0
 800c542:	4604      	mov	r4, r0
 800c544:	4608      	mov	r0, r1
 800c546:	4611      	mov	r1, r2
 800c548:	602b      	str	r3, [r5, #0]
 800c54a:	f7f6 fe0b 	bl	8003164 <_kill>
 800c54e:	1c43      	adds	r3, r0, #1
 800c550:	d102      	bne.n	800c558 <_kill_r+0x1c>
 800c552:	682b      	ldr	r3, [r5, #0]
 800c554:	b103      	cbz	r3, 800c558 <_kill_r+0x1c>
 800c556:	6023      	str	r3, [r4, #0]
 800c558:	bd38      	pop	{r3, r4, r5, pc}
 800c55a:	bf00      	nop
 800c55c:	2000adb4 	.word	0x2000adb4

0800c560 <_getpid_r>:
 800c560:	f7f6 bdf8 	b.w	8003154 <_getpid>

0800c564 <_malloc_usable_size_r>:
 800c564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c568:	1f18      	subs	r0, r3, #4
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	bfbc      	itt	lt
 800c56e:	580b      	ldrlt	r3, [r1, r0]
 800c570:	18c0      	addlt	r0, r0, r3
 800c572:	4770      	bx	lr

0800c574 <_init>:
 800c574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c576:	bf00      	nop
 800c578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c57a:	bc08      	pop	{r3}
 800c57c:	469e      	mov	lr, r3
 800c57e:	4770      	bx	lr

0800c580 <_fini>:
 800c580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c582:	bf00      	nop
 800c584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c586:	bc08      	pop	{r3}
 800c588:	469e      	mov	lr, r3
 800c58a:	4770      	bx	lr
